[
    {
        "url":  "https://github.com/dotnet/runtime/issues/1542",
        "createdAt":  "2016-06-24T01:33:04Z",
        "number":  1542,
        "author":  "joshfree",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOA-I2xA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GSPP",
                                            "createdAt":  "2016-06-24T21:38:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "prajaybasu",
                                            "createdAt":  "2016-06-25T12:08:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ysmgthntt",
                                            "createdAt":  "2016-06-26T07:51:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ianhays",
                                            "createdAt":  "2016-06-27T17:36:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aplex",
                                            "createdAt":  "2016-06-29T22:42:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "neyromant",
                                            "createdAt":  "2016-07-07T10:21:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jnm2",
                                            "createdAt":  "2017-01-30T14:48:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "svick",
                                            "createdAt":  "2017-05-26T17:17:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ericstj",
                                            "createdAt":  "2017-05-26T19:10:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "daanflore",
                                            "createdAt":  "2017-05-29T14:18:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "skyguy94",
                                            "createdAt":  "2017-08-30T11:27:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Thealexbarney",
                                            "createdAt":  "2017-10-12T16:06:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vickyorlo",
                                            "createdAt":  "2017-11-10T16:30:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "frabar666",
                                            "createdAt":  "2017-11-13T16:18:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "EamonHetherton",
                                            "createdAt":  "2017-12-15T11:50:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "holly-hacker",
                                            "createdAt":  "2018-01-02T17:44:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Gladskih",
                                            "createdAt":  "2018-04-10T15:57:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "VladimirTyrin",
                                            "createdAt":  "2018-06-04T13:57:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mikasoukhov",
                                            "createdAt":  "2018-06-27T08:39:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "samsosa",
                                            "createdAt":  "2018-07-14T15:56:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "antiufo",
                                            "createdAt":  "2018-07-21T15:06:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "irowbin",
                                            "createdAt":  "2018-08-06T10:49:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "andersco",
                                            "createdAt":  "2018-08-16T23:39:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nmoinvaz",
                                            "createdAt":  "2018-10-02T00:48:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JustArchi",
                                            "createdAt":  "2018-10-21T19:10:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "oivindoh",
                                            "createdAt":  "2018-11-14T22:26:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Ryder25",
                                            "createdAt":  "2018-12-24T05:13:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "danielchalmers",
                                            "createdAt":  "2019-01-15T07:34:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nzbart",
                                            "createdAt":  "2019-01-28T18:42:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AlgorithmsAreCool",
                                            "createdAt":  "2019-02-25T19:54:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mdealer",
                                            "createdAt":  "2019-04-02T14:24:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "elderfo",
                                            "createdAt":  "2019-04-30T16:02:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vabka",
                                            "createdAt":  "2019-06-10T06:57:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "changbowen",
                                            "createdAt":  "2019-08-03T06:18:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "joelverhagen",
                                            "createdAt":  "2019-08-10T06:46:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Agagamand",
                                            "createdAt":  "2019-08-19T06:55:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cirojas",
                                            "createdAt":  "2019-09-05T19:26:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GGG-KILLER",
                                            "createdAt":  "2019-09-05T19:48:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kirsan31",
                                            "createdAt":  "2019-09-12T20:27:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kreuwont",
                                            "createdAt":  "2019-11-03T11:01:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ite-klass",
                                            "createdAt":  "2019-12-17T09:18:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "guidevnet",
                                            "createdAt":  "2020-01-17T02:00:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Suchiman",
                                            "createdAt":  "2020-01-29T16:51:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DoCode",
                                            "createdAt":  "2020-02-03T22:48:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sgtfrankieboy",
                                            "createdAt":  "2020-02-05T21:53:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "arvoboweniii",
                                            "createdAt":  "2020-02-07T13:50:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jhouzvicka",
                                            "createdAt":  "2020-02-24T22:23:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lcsondes",
                                            "createdAt":  "2020-03-03T14:46:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mat007",
                                            "createdAt":  "2020-03-14T15:02:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NilFusion",
                                            "createdAt":  "2020-03-14T18:04:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "robibobi",
                                            "createdAt":  "2020-04-08T13:39:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Deilan",
                                            "createdAt":  "2020-04-12T20:07:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "meziantou",
                                            "createdAt":  "2020-04-17T04:01:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ElektroKill",
                                            "createdAt":  "2020-06-03T18:16:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "YZahringer",
                                            "createdAt":  "2020-06-04T18:25:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ravimpatel",
                                            "createdAt":  "2020-07-21T13:48:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Gnbrkm41",
                                            "createdAt":  "2020-08-06T16:32:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JayArrowz",
                                            "createdAt":  "2020-08-06T16:32:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Joelius300",
                                            "createdAt":  "2020-08-20T19:41:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Thieum",
                                            "createdAt":  "2020-08-24T18:58:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "BuIlDaLiBlE",
                                            "createdAt":  "2020-08-29T21:45:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Unknown6656",
                                            "createdAt":  "2020-08-31T11:31:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lostmsu",
                                            "createdAt":  "2020-09-03T02:17:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "eugene-chehovskoy",
                                            "createdAt":  "2020-09-23T17:56:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Mikolaytis",
                                            "createdAt":  "2020-10-03T13:08:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "loraderon",
                                            "createdAt":  "2020-11-04T07:54:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KLuuKer",
                                            "createdAt":  "2020-11-11T19:50:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Genbox",
                                            "createdAt":  "2020-11-12T01:05:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AraHaan",
                                            "createdAt":  "2021-01-01T20:14:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "FroggieFrog",
                                            "createdAt":  "2021-01-05T09:13:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ferventcoder",
                                            "createdAt":  "2021-01-07T16:53:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "santolex",
                                            "createdAt":  "2021-01-09T15:28:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Crotalus",
                                            "createdAt":  "2021-01-19T07:54:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Kryptos-FR",
                                            "createdAt":  "2021-01-26T00:09:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JaykeBird",
                                            "createdAt":  "2021-01-27T22:28:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MrM40",
                                            "createdAt":  "2021-01-31T07:10:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sklenma",
                                            "createdAt":  "2021-02-07T20:00:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "amartens181",
                                            "createdAt":  "2021-02-18T15:49:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bluedoom",
                                            "createdAt":  "2021-02-27T11:13:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jetersen",
                                            "createdAt":  "2021-03-01T22:12:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "insendend",
                                            "createdAt":  "2021-03-10T21:11:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "neil-119",
                                            "createdAt":  "2021-03-19T20:57:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Spavid04",
                                            "createdAt":  "2021-03-24T01:00:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NN---",
                                            "createdAt":  "2021-03-24T13:04:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KirillOsenkov",
                                            "createdAt":  "2021-04-05T06:14:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ltrzesniewski",
                                            "createdAt":  "2021-04-05T09:23:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DavidHollman",
                                            "createdAt":  "2021-06-02T12:26:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Strepto",
                                            "createdAt":  "2021-06-16T09:05:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mafshin",
                                            "createdAt":  "2021-07-14T11:13:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "splitt3r",
                                            "createdAt":  "2021-07-20T20:48:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kronic",
                                            "createdAt":  "2021-08-18T12:14:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Takym",
                                            "createdAt":  "2021-09-27T13:11:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alexeyshockov",
                                            "createdAt":  "2021-10-05T12:44:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MartyIX",
                                            "createdAt":  "2021-10-27T20:33:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cremor",
                                            "createdAt":  "2022-01-10T12:00:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fitdev",
                                            "createdAt":  "2022-01-15T14:54:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2022-01-30T18:50:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "revocengiz",
                                            "createdAt":  "2022-03-06T06:48:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MarioGruda",
                                            "createdAt":  "2022-04-28T20:01:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MareMare",
                                            "createdAt":  "2022-05-24T00:45:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Enderlook",
                                            "createdAt":  "2022-06-18T12:53:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Khaos66",
                                            "createdAt":  "2022-06-27T14:01:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Vazde",
                                            "createdAt":  "2022-06-30T11:18:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "asasine",
                                            "createdAt":  "2022-07-08T18:14:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "korayustundag",
                                            "createdAt":  "2022-07-17T23:18:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "RokeJulianLockhart",
                                            "createdAt":  "2022-07-21T01:56:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Tan90909090",
                                            "createdAt":  "2022-08-10T12:54:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MichalPetryka",
                                            "createdAt":  "2022-08-22T10:12:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DRKV333",
                                            "createdAt":  "2022-10-07T20:27:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "james0x0A",
                                            "createdAt":  "2022-11-09T01:31:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dmpe",
                                            "createdAt":  "2022-12-15T21:29:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "atiq-cs",
                                            "createdAt":  "2022-12-18T23:42:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "2ji3150",
                                            "createdAt":  "2023-01-02T13:29:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "juanjoDiaz",
                                            "createdAt":  "2023-01-17T15:56:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "timconner",
                                            "createdAt":  "2023-02-05T02:37:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "m33p",
                                            "createdAt":  "2023-03-02T03:43:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dmrvos86",
                                            "createdAt":  "2023-05-03T04:08:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "HRKings",
                                            "createdAt":  "2023-05-29T19:35:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ptasev",
                                            "createdAt":  "2023-06-14T22:08:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "akirayamamoto",
                                            "createdAt":  "2023-07-12T23:51:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "eMuonTau",
                                            "createdAt":  "2023-07-13T21:48:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0xced",
                                            "createdAt":  "2023-08-04T16:02:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "amis92",
                                            "createdAt":  "2023-09-28T10:07:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2023-09-28T15:13:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "andrews4s",
                                            "createdAt":  "2023-10-12T13:42:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "frankbuckley",
                                            "createdAt":  "2023-10-14T11:12:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "BoundedChenn31",
                                            "createdAt":  "2023-10-28T11:10:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Ilchert",
                                            "createdAt":  "2023-10-28T11:16:53Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "aloraman",
                                            "createdAt":  "2023-10-28T11:59:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "CEbbinghaus",
                                            "createdAt":  "2023-11-15T07:54:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Sajidur78",
                                            "createdAt":  "2023-11-23T02:04:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "johnterickson",
                                            "createdAt":  "2023-12-19T18:56:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "compujuckel",
                                            "createdAt":  "2023-12-21T14:53:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Mohamed-Effat",
                                            "createdAt":  "2023-12-27T07:22:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Xyncgas",
                                            "createdAt":  "2024-02-03T00:53:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DanteMarshal",
                                            "createdAt":  "2024-02-26T15:12:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lechu445",
                                            "createdAt":  "2024-03-05T19:36:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KieranDevvs",
                                            "createdAt":  "2024-04-19T12:48:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SpazeDev",
                                            "createdAt":  "2024-04-19T15:19:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "virzak",
                                            "createdAt":  "2024-05-17T15:08:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nscimerical",
                                            "createdAt":  "2024-06-17T06:41:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "guitarrapc",
                                            "createdAt":  "2024-06-18T02:16:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DigitalMushrooms",
                                            "createdAt":  "2024-07-06T20:56:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Mrgaton",
                                            "createdAt":  "2024-08-12T22:52:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Ruben2776",
                                            "createdAt":  "2024-08-12T23:02:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "andrew-boyarshin",
                                            "createdAt":  "2024-08-13T04:00:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TabNocBot",
                                            "createdAt":  "2024-08-22T00:38:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hirohira9119",
                                            "createdAt":  "2024-09-06T17:14:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Daniel-Svensson",
                                            "createdAt":  "2024-09-07T17:06:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TabNoc",
                                            "createdAt":  "2024-09-21T06:08:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "robertoandrade",
                                            "createdAt":  "2024-09-26T06:05:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mnadareski",
                                            "createdAt":  "2024-10-16T02:14:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "matthew-a-thomas",
                                            "createdAt":  "2024-12-16T21:02:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rampaa",
                                            "createdAt":  "2024-12-17T15:23:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nikolai-mb",
                                            "createdAt":  "2024-12-21T22:12:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Inurias",
                                            "createdAt":  "2025-01-17T22:20:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "somegenericdev",
                                            "createdAt":  "2025-01-27T00:04:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ScrubN",
                                            "createdAt":  "2025-02-16T21:44:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Insprill",
                                            "createdAt":  "2025-02-26T17:33:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "msiemens",
                                            "createdAt":  "2025-03-11T16:08:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0xfeeddeadbeef",
                                            "createdAt":  "2025-03-31T02:13:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "imsh",
                                            "createdAt":  "2025-05-06T08:59:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bricelam",
                                            "createdAt":  "2025-05-22T01:06:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "romfir",
                                            "createdAt":  "2025-05-28T13:12:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PolarBears",
                                            "createdAt":  "2025-06-13T15:28:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lindexi",
                                            "createdAt":  "2025-06-18T03:05:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bartecargo",
                                            "createdAt":  "2025-06-24T21:30:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "manfromarce",
                                            "createdAt":  "2025-07-02T20:22:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "snechaev",
                                            "createdAt":  "2025-07-17T18:45:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Athari",
                                            "createdAt":  "2025-07-18T22:20:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Symbai",
                                            "createdAt":  "2025-07-28T04:53:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "epeshk",
                                            "createdAt":  "2025-08-23T01:49:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "OronDF343",
                                            "createdAt":  "2025-09-04T15:02:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "teemka",
                                            "createdAt":  "2025-09-18T19:56:50Z"
                                        }
                                    ],
                          "totalCount":  174
                      },
        "updatedAt":  "2025-08-14T08:51:41Z",
        "body":  "http://7-zip.org/sdk.html\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOiDLJmg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIyODQ2ODU1Nw==",
                                           "createdAt":  "2016-06-24T21:39:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEAdMSQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "RokeJulianLockhart",
                                                                               "createdAt":  "2022-07-21T01:57:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CEbbinghaus",
                                                                               "createdAt":  "2023-11-14T08:02:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Mrgaton",
                                                                               "createdAt":  "2024-08-12T22:52:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kalatchev",
                                                                               "createdAt":  "2024-12-29T02:29:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "GSPP",
                                           "body":  "LZMA is pretty much the state of the art general purpose compression algorithm. It pushes the Pareto Frontier outwards in quite a large range.\n\nIf there is interest in adding more algorithms there would be room for a super fast one that compresses in the range 10-300MB/s. Such algorithms exist and can be found using any search engine.\n",
                                           "updatedAt":  "2016-06-24T21:39:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIyODQ2OTI4Nw==",
                                           "createdAt":  "2016-06-24T21:43:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEW_ZrQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "atiq-cs",
                                                                               "createdAt":  "2022-12-18T23:42:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lindexi",
                                                                               "createdAt":  "2025-06-18T03:09:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "ericstj",
                                           "body":  "I\u0027ve already ported the C# impl for internal use in CLI: https://github.com/dotnet/cli/tree/rel/1.0.0/src/Microsoft.DotNet.Archive/LZMA\n\nThe work to do to pull this in is the following:\n1. Better API design to follow wrapping stream design used by DeflateStream\n2. Perf\n\nFor perf we could do a similar thing to what was done for ZLIB where we just pick up the native impl and add that to CLRCompression.\n\n@GSPP if you have requests for other algos please file a separate issue.\n",
                                           "updatedAt":  "2016-06-24T21:43:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIyODg1Njg2MA==",
                                           "createdAt":  "2016-06-27T19:57:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ianhays",
                                           "body":  "Something we should consider before we start working on adding support for Tar/Deflate/7z/LZMA/LZMA2/LZ4/BZ2/etc is how we want to design the APIs for the classes to keep them relatively similar without cluttering up Sys.IO.Compression. Options there off the top of my head:\n- Our current design is to give each compression method its own class (DeflateStream/GZipStream). The most consistent option would be to continue this trend for new algorithms e.g. LZMAStream/ZLibStream/BZ2Stream\n- Have a CompressionStream that takes an optional CompressionType enum (Deflate/Zlib/LZMA/etc) as a constructor param\n-  Some blend of the above two.\n\nI imagine we\u0027ll want to go with the first option so we can provide fine-grained control of the algorithm variables, but its worth considering nonetheless.\n",
                                           "updatedAt":  "2016-06-27T19:57:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIyODg1OTM3Ng==",
                                           "createdAt":  "2016-06-27T20:06:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "First option is what I was thinking.  I think we can look at higher-level simple to use archive APIs that might allow for selection of the compression algorithm for an archive where the caller doesn\u0027t necessarily need to know about the specific algo type or params but we\u0027d also want to support fine-grained composition of these things to allow for maximum flexibility/tuning.  Also for reading APIs should be able to \"sniff\" a data stream to determine what it is (if the format allows for that deterministically) without forcing the user to tell us via type instantiation.\n",
                                           "updatedAt":  "2016-06-27T20:06:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIyODg2MzAzMg==",
                                           "createdAt":  "2016-06-27T20:20:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ianhays",
                                           "body":  "\u003e I think we can look at higher-level simple to use archive APIs that might allow for selection of the compression algorithm for an archive where the caller doesn\u0027t necessarily need to know about the specific algo type or params\n\nI think this would be the most happy compromise between full functionality and ease of use. I\u0027m picturing a bunch of algorithm-specific streams (DeflateStream/GZipStream/LZMAStream) as well as one high-level stream (CompressionStream) that has simple write/read functionality using the defaults of the chosen compression type e.g.\n\n```\n    public enum Compressiontype\n    {\n        Deflate = 0,\n        GZip = 1,\n        ZLib = 2,\n        LZMA = 3\n    }\n    public partial class CompressionStream : System.IO.Stream\n    {\n        public CompressionStream(System.IO.Stream stream, System.IO.Compression.CompressionMode mode) { } // default Deflate for CompressionMode.Compress. CompressionMode.Decompress attempts to detect type from header and defaults to Deflate if it can not be determined.\n        public CompressionStream(System.IO.Stream stream, System.IO.Compression.CompressionMode mode, System.IO.Compression.CompressionType type) { } // no auto-header detection for Decompression.\n        public CompressionStream(System.IO.Stream stream, System.IO.Compression.CompressionMode mode, bool leaveOpen) { }\n        public CompressionStream(System.IO.Stream stream, System.IO.Compression.CompressionMode mode, System.IO.Compression.CompressionType type, bool leaveOpen) { }\n        ...\n    }\n```\n\n\u003e Also for reading APIs should be able to \"sniff\" a data stream to determine what it is (if the format allows for that deterministically) without forcing the user to tell us via type instantiation.\n\nThat would be ideal. The algorithm-specific APIs (e.g. DeflateStream) should require the given stream adhere to the format, but the higher-level API should attempt to detect the header type and default (probably to Deflate) it it can\u0027t be determined.\n",
                                           "updatedAt":  "2016-06-27T20:20:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIyODg2OTg2OQ==",
                                           "createdAt":  "2016-06-27T20:45:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Seems reasonable so long as it doesn\u0027t hurt perf (eg: cause an additional buffer copy).  I\u0027d say that\u0027s a separate feature, but definitely one worth looking at.\n",
                                           "updatedAt":  "2016-06-27T20:45:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIyODg5MTMyNQ==",
                                           "createdAt":  "2016-06-27T22:10:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ianhays",
                                           "body":  "\u003e I\u0027d say that\u0027s a separate feature\n\nAgreed. I opened https://github.com/dotnet/corefx/issues/9709 to track the discussion on that.\n",
                                           "updatedAt":  "2016-06-27T22:10:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIyOTA0MjM3Ng==",
                                           "createdAt":  "2016-06-28T13:04:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCl2YiA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "altso",
                                                                               "createdAt":  "2021-11-19T20:49:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "asasine",
                                                                               "createdAt":  "2022-07-08T18:21:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "GSPP",
                                           "body":  "I think the enum approach suffers from non-extensibility. Wouldn\u0027t it be better to use one derived type for each algorithm? Algorithms have different parameters and sometimes different capabilities. For example, Zip has the capability to add named entries (files). Many compression libraries offer a ZipStream that behaves like a normal stream plus the ability to define files.\n\nProposal: Make `CompressionStream` an abstract base class that anyone including user code can derive from. That way there is a standardized infrastructure for the compression mode and leaving the stream open. Also, maybe we can have standardized compression levels 1-9 that each derived algorithm interprets and uses to set it\u0027s settings.\n\nAlso, I do not see in what way a class-based approach (as opposed to an enum-based approach) would be inferior(?). Seems equal or better in every regard (apart from format detection).\n\nI advise against format detection when decompressing. The format should be statically known and usually is. Some formats are headerless which breaks the scheme.\n",
                                           "updatedAt":  "2016-06-28T13:07:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIyOTEyMTM5NA==",
                                           "createdAt":  "2016-06-28T17:29:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "\u003e I think the enum approach suffers from non-extensibility\n\nGood point.\n\nI don\u0027t see how `CompressionStream` really solves this.  We already have the `Stream` abstraction and all the things we\u0027re talking about controlling are on construction which isn\u0027t part of the abstraction.  The only things we might expose on the stream are getters for construction parameters but I don\u0027t know if that provides enough value to justify another type in the heirarchy. \n\n\u003e class-based approach (as opposed to an enum-based approach) would be inferior(?)\n\nI don\u0027t think we disagree.  @ianhays was talking about some convenience construction pattern that would use the public `Stream` derived types behind the scenes.  One option for the construction pattern would be enums, but as you mention these don\u0027t version well.  Perhaps we have a type `CompressionParameters` that has levels like you suggest and compression Stream implementations can translate those to appropriate algo-specific params.\n\nLet\u0027s  use https://github.com/dotnet/corefx/issues/9709 to track coming up with a convenience construction pattern and use this issue for describing the new streams we intend to add.\n",
                                           "updatedAt":  "2016-06-28T18:07:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIzMDkyODkwOA==",
                                           "createdAt":  "2016-07-06T22:40:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ianhays",
                                           "body":  "Back to the LZMA discussion:\n\nNot sure how we\u0027re going to want to do this since the LZMA SDK includes implementations in C as well as C#. Some options and related thoughts:\n- Include LZMA C code in clrcompression and add a stream wrapper in Sys.IO.Compression like we did for ZLib\n  - Isn\u0027t NetStandard.Library friendly (https://github.com/dotnet/corefx/issues/6602)\n  - Probably won\u0027t work on UWP since it imports a ton of stuff from kernel32 that I doubt is supported. \n  - Probably faster than managed, but perf testing that will require a lot of setup to get both methods stood up\n  - Keeps our code nicely separate from LZMA code and makes upgrading easy\n  - Works for LZMA/LZMA2/XZ/7z\n- Add the LZMA C# code to Sys.IO.Compression\n  - Platform agnostic\n  - Works only for LZMA (though could probably make it work for the others without _too_ much trouble - would need to investigate further\n  - We would become custodians of this code as it intermingles with our other compression code.\n  - Easiest, fastest way to get LZMA support into Sys.IO.Compression\n- Build the C# LZMA as a separate assembly and have Sys.IO.Compression reference it.\n  - Same as above, but keeps the LZMA sdk separate from our junk to simplify upgrading/updating in the future.\n",
                                           "updatedAt":  "2016-07-06T22:40:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIzMTAyNDYzNA==",
                                           "createdAt":  "2016-07-07T09:09:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GSPP",
                                           "body":  "Ideally, it would be a native code solution where possible with a managed fallback. How much slower is the C# version? My guess would be 2-3x. C compilers excel at this kind of code.\n",
                                           "updatedAt":  "2016-07-07T09:09:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIzMTQxMDU2Ng==",
                                           "createdAt":  "2016-07-08T16:44:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ianhays",
                                           "body":  "Alright, I\u0027ve got native and managed versions working in Sys.IO.Compression on Windows so we can get some early perf results. Properties are set to the defaults for both. \n\n\u003cstrike\u003eAs with ZLib, the lzma native implementation is significantly faster. \u003c/strike\u003eWall-clock time for 10 compress/decompress of the files in the Canterbury Corpus:\n\n| CompressionMode | Managed/Native | FileName | Elapsed Time | Output File Size |\n| --: | --: | --: | --: | --: |\n| Compress | Managed | alice29.txt | 00:00:02.5441260 | 48452 |\n| Compress | Native | alice29.txt | 00:00:01.5311828 | 48466 |\n| Decompress | Managed | alice29.txt | 00:00:00.1464692 | 152089 |\n| Decompress | Native | alice29.txt | 00:00:00.1598902 | 152089 |\n| Compress | Managed | asyoulik.txt | 00:00:01.9258908 | 44498 |\n| Compress | Native | asyoulik.txt | 00:00:01.4281719 | 44493 |\n| Decompress | Managed | asyoulik.txt | 00:00:00.1296718 | 125179 |\n| Decompress | Native | asyoulik.txt | 00:00:00.2165359 | 125179 |\n| Compress | Managed | cp.html | 00:00:00.4323960 | 7640 |\n| Compress | Native | cp.html | 00:00:01.0320704 | 7632 |\n| Decompress | Managed | cp.html | 00:00:00.0369613 | 24603 |\n| Decompress | Native | cp.html | 00:00:00.1209998 | 24603 |\n| Compress | Managed | fields.c | 00:00:00.2833704 | 2990 |\n| Compress | Native | fields.c | 00:00:00.9942155 | 2995 |\n| Decompress | Managed | fields.c | 00:00:00.0223107 | 11581 |\n| Decompress | Native | fields.c | 00:00:00.0944675 | 11581 |\n| Compress | Managed | grammar.lsp | 00:00:00.1832102 | 1242 |\n| Compress | Native | grammar.lsp | 00:00:00.9598283 | 1242 |\n| Decompress | Managed | grammar.lsp | 00:00:00.0161157 | 3721 |\n| Decompress | Native | grammar.lsp | 00:00:00.0733605 | 3721 |\n| Compress | Managed | kennedy.xls | 00:00:46.0431617 | 50422 |\n| Compress | Native | kennedy.xls | 00:00:08.7667059 | 51396 |\n| Decompress | Managed | kennedy.xls | 00:00:00.5156042 | 1029744 |\n| Decompress | Native | kennedy.xls | 00:00:00.2552746 | 1029744 |\n| Compress | Managed | lcet10.txt | 00:00:07.8654577 | 119556 |\n| Compress | Native | lcet10.txt | 00:00:02.6410334 | 119527 |\n| Decompress | Managed | lcet10.txt | 00:00:00.3143749 | 426754 |\n| Decompress | Native | lcet10.txt | 00:00:00.2462124 | 426754 |\n| Compress | Managed | plrabn12.txt | 00:00:08.1932977 | 165353 |\n| Compress | Native | plrabn12.txt | 00:00:02.7910135 | 165319 |\n| Decompress | Managed | plrabn12.txt | 00:00:00.4050662 | 481861 |\n| Decompress | Native | plrabn12.txt | 00:00:00.2855161 | 481861 |\n| Compress | Managed | ptt5 | 00:00:04.0817633 | 43788 |\n| Compress | Native | ptt5 | 00:00:01.9063002 | 43503 |\n| Decompress | Managed | ptt5 | 00:00:00.1783090 | 513216 |\n| Decompress | Native | ptt5 | 00:00:00.1627669 | 513216 |\n| Compress | Managed | sum | 00:00:00.6918768 | 9427 |\n| Compress | Native | sum | 00:00:01.1139660 | 9430 |\n| Decompress | Managed | sum | 00:00:00.0472818 | 38240 |\n| Decompress | Native | sum | 00:00:00.1067857 | 38240 |\n| Compress | Managed | xargs.1 | 00:00:00.1904065 | 1761 |\n| Compress | Native | xargs.1 | 00:00:00.9939127 | 1760 |\n| Decompress | Managed | xargs.1 | 00:00:00.0208210 | 4227 |\n| Decompress | Native | xargs.1 | 00:00:00.0815763 | 4227 |\n\nNote that the native lzma here is doing File IO itself, so it is going to be a little bit faster than what the end-product would be since we\u0027d want to do the IO in C# so LZMA could follow the Stream pattern.\n",
                                           "updatedAt":  "2016-07-08T18:59:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIzMTQxNjc3Mw==",
                                           "createdAt":  "2016-07-08T17:09:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GSPP",
                                           "body":  "I wonder why native and managed have so different results. `kennedy.xls` is smaller with managed. `kennedy.xls` has a crazy managed compression time. Weird.\n",
                                           "updatedAt":  "2016-07-08T17:09:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIzMTQyMTM0MQ==",
                                           "createdAt":  "2016-07-08T17:28:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ianhays",
                                           "body":  "I expect the implementations are quite different.\n\nI also realize now that the above results are using the property values that Eric used in his CLI port. I re-ran the tests using the default values and edited the post with those results. Looks like the main difference is that managed results for small files are much faster now.\n",
                                           "updatedAt":  "2016-07-08T17:28:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIzMTQzOTcwOQ==",
                                           "createdAt":  "2016-07-08T18:39:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Yeah, those parameters were tuned for maximum compression of the CLI payload.\n\nI believe the C \u0026 C++ implementations are multi-threaded so that makes a big difference.  We could do the work to make the C# implementation multi-threaded and measure the difference.\n",
                                           "updatedAt":  "2016-07-08T18:39:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIzMTQ0MjY2MA==",
                                           "createdAt":  "2016-07-08T18:51:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sqmgh",
                                           "body":  "The results do seem to suffer from different implementations, and it does seem to make the \"..the lzma native implementation is significantly faster.\" conclusion an unfair one.\n\nUnless I have completely lost the ability to read a table, there are a number of results where the managed implementation is much faster than the native one. xargs.x1 being an example where ratio is almost as big as the kennedy.xls case, but in the other direction. It just impacts the overall numbers less because it\u0027s a smaller input file.\n\nIt seems that as long as you are only doing decompression, more often than not you are actually better off to use the managed implementation.\n",
                                           "updatedAt":  "2016-07-08T18:52:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIzMTQ0NDcxMA==",
                                           "createdAt":  "2016-07-08T18:59:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ianhays",
                                           "body":  "\u003e The results do seem to suffer from different implementations, and it does seem to make the \"..the lzma native implementation is significantly faster.\" conclusion an unfair one.\n\nAgreed. The earlier set of results that brought that conclusion were made using Eric\u0027s parameters, not the default parameters. As a result, we weren\u0027t comparing apples-to-apples. I\u0027ll strikethrough my original comment for clarity to people just coming into this thread.\n\n\u003e We could do the work to make the C# implementation multi-threaded and measure the difference.\n\nThat would be interesting. I\u0027ll look into it. I expect it\u0027s a fairly large amount of effort, but for large files it would likely be worthwhile. \n",
                                           "updatedAt":  "2016-07-08T18:59:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIzMTQ4NTkyMA==",
                                           "createdAt":  "2016-07-08T22:16:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ianhays",
                                           "body":  "The operations being multithreaded that we care about for perf are match finding - about ~30% of the time is spent there:\n\n![image](https://cloud.githubusercontent.com/assets/2606879/16702718/c6caf34a-451c-11e6-89ce-2aa9da8a7ae8.png)\n\nThe native LZMA parallelizes these operations when multi-threading is enabled (which it is by default). \n\nAs far as getting C# to do the same, it would require a not unreasonable amount of effort. The C# match finder is essentially a rewrite of the C non-mt match finder, so it would follow that the C# multi-threaded match finder could logically succeed as a rewrite of the C multi-threaded match finder, at least as a baseline.\n",
                                           "updatedAt":  "2016-07-08T22:16:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIzMTUyOTQyMg==",
                                           "createdAt":  "2016-07-09T11:20:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GSPP",
                                           "body":  "Compression should by default be single threaded. The threading architecture is not for a compression stream to decide. It\u0027s a useful facility to be able to turn this on, though.\n\nThere seem to be two multithreading techniques in LZMA(2): 1. The match finder which apparently does not support a high DOP. In the UI I think the DOP maxes out at 2. You can see this from the way memory usage increases when you increase the DOP. 2. Parallel compression of chunks. The latter one is infinitely scalable but should have an impact on ratio.\n",
                                           "updatedAt":  "2016-07-09T11:20:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIzMjQ4MTU3Ng==",
                                           "createdAt":  "2016-07-13T20:47:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ianhays",
                                           "body":  "\u003e Compression should by default be single threaded. The threading architecture is not for a compression stream to decide. It\u0027s a useful facility to be able to turn this on, though.\n\nThat may be so, but the native LZMA _is_ deciding. It is using 2 threads for match finding, at least on my machine in my tests. It would be useful to test it single-threaded to compare to C# on a more even ground - I\u0027ll try to find some time to do that.\n\n\u003e There seem to be two multithreading techniques in LZMA(2): 1. The match finder which apparently does not support a high DOP. In the UI I think the DOP maxes out at 2. You can see this from the way memory usage increases when you increase the DOP. 2. Parallel compression of chunks. The latter one is infinitely scalable but should have an impact on ratio.\n\nAccording to my tests, match finding being multi-threaded would give us the biggest \"bang for our buck\" so to speak to bridge the performance gap in the slower cases so I\u0027d prioritize that first.\n",
                                           "updatedAt":  "2016-07-13T20:47:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIzODY2MDMyNA==",
                                           "createdAt":  "2016-08-09T19:15:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "milkshakeuk",
                                           "body":  "@ianhays  Hi, I was just wondering on the state of this issue? is there any pre-release/alpha/beta implementations that could be tested now?\n",
                                           "updatedAt":  "2016-08-09T19:15:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIzODY2NzM3NA==",
                                           "createdAt":  "2016-08-09T19:40:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ianhays",
                                           "body":  "\u003e Hi, I was just wondering on the state of this issue? is there any pre-release/alpha/beta implementations that could be tested now?\n\nNot quite. I had to switch off to work on some other things, but I\u0027m hoping to get back to compression for 1.1 or 1.2. You\u0027re more than welcome to take a stab at it if you\u0027d like :)\n",
                                           "updatedAt":  "2016-08-09T19:40:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI0MjQ2OTcxMg==",
                                           "createdAt":  "2016-08-25T17:17:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ianhays",
                                           "body":  "Probably the best way to tackle this would be to add the C# code Eric linked for LZMA to System.IO.Compression and modify the API to be stream-based and similar to DeflateStream. The default values should also be changed from what is in Eric\u0027s code. That would be the fastest and simplest way to get LZMA into System.IO.Compression and the initial benchmarks show it being comparable in performance to the more complicated (and difficult to deploy to other platforms) native implementation. \n\nIf anyone wants to play around with the perf, I\u0027ve got the code for both managed and native implementations ported already [in my fork](https://github.com/ianhays/corefx/tree/compression_lzma/src/System.IO.Compression/src/7zip)\n\nAn official API suggestion would also be helpful to get things moving.\n",
                                           "updatedAt":  "2016-10-10T20:44:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3NTk5NjIwMQ==",
                                           "createdAt":  "2017-01-30T07:34:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@ianhays are you working on it? (it\u0027s assigned to you) Or is it up for grabs?",
                                           "updatedAt":  "2017-01-30T07:34:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3NjE3OTkwMA==",
                                           "createdAt":  "2017-01-30T20:25:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ianhays",
                                           "body":  "I\u0027m not actively working on this, no. Any community members interested in this are welcome to take a stab at it following the instructions from my earlier comment. The most difficult part of adding support will be making the managed LZMA code play nicely with a stream interface like DeflateStream\u0027s. \r\n\r\nAnother route would be to utilize the work done already in one of the many open-source implementations of LZMA like [SharpCompress](https://github.com/adamhathcock/sharpcompress) rather than create our own. This is related in spirit to the discussion at https://github.com/dotnet/corefx/issues/14853 where a Xamarin member suggested modifying ZipArchive to use libzip.",
                                           "updatedAt":  "2017-01-30T20:25:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNDMzODY2NQ==",
                                           "createdAt":  "2017-05-26T17:13:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODj-Y1g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ianhays",
                                                                               "createdAt":  "2017-05-27T00:11:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Soarc",
                                                                               "createdAt":  "2018-02-15T16:06:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "myblindy",
                                                                               "createdAt":  "2018-06-08T20:20:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sherlock1982",
                                                                               "createdAt":  "2018-07-28T06:10:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JustArchi",
                                                                               "createdAt":  "2018-10-21T19:10:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "RoadTrain",
                                                                               "createdAt":  "2018-11-09T13:44:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Flank2k2",
                                                                               "createdAt":  "2018-11-10T08:16:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "LucaGabi",
                                                                               "createdAt":  "2018-12-01T14:48:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Agagamand",
                                                                               "createdAt":  "2019-08-19T07:03:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kirsan31",
                                                                               "createdAt":  "2019-09-12T20:28:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "addabis",
                                                                               "createdAt":  "2019-10-22T21:13:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "huoyaoyuan",
                                                                               "createdAt":  "2019-11-18T07:02:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "guidevnet",
                                                                               "createdAt":  "2019-12-16T04:59:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jasonkuo41",
                                                                               "createdAt":  "2020-01-01T15:21:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ElektroKill",
                                                                               "createdAt":  "2020-01-31T17:37:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "salaros",
                                                                               "createdAt":  "2020-02-06T13:10:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "atiq-cs",
                                                                               "createdAt":  "2020-03-10T07:43:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "safakgur",
                                                                               "createdAt":  "2020-04-14T16:05:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "malytskyy",
                                                                               "createdAt":  "2020-07-30T14:55:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "apoulet1234",
                                                                               "createdAt":  "2020-07-30T20:10:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "peterdeme",
                                                                               "createdAt":  "2020-08-29T09:10:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Mikolaytis",
                                                                               "createdAt":  "2020-10-03T13:08:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Sewer56",
                                                                               "createdAt":  "2020-10-04T20:06:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "iamcarbon",
                                                                               "createdAt":  "2020-12-12T02:09:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AraHaan",
                                                                               "createdAt":  "2021-01-01T20:32:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Kryptos-FR",
                                                                               "createdAt":  "2021-01-26T00:10:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "afonsolage",
                                                                               "createdAt":  "2021-01-26T18:44:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JaykeBird",
                                                                               "createdAt":  "2021-01-27T22:31:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CLFPosthumus",
                                                                               "createdAt":  "2021-02-04T22:27:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Alikont",
                                                                               "createdAt":  "2021-02-10T16:02:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jetersen",
                                                                               "createdAt":  "2021-03-01T22:09:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KirillOsenkov",
                                                                               "createdAt":  "2021-04-05T06:42:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "insomnyawolf",
                                                                               "createdAt":  "2021-05-27T22:48:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gaoconggit",
                                                                               "createdAt":  "2021-09-30T04:10:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Vladis466",
                                                                               "createdAt":  "2021-10-05T16:24:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "majora2007",
                                                                               "createdAt":  "2021-11-11T18:19:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PaulusParssinen",
                                                                               "createdAt":  "2022-03-15T11:37:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "asasine",
                                                                               "createdAt":  "2022-07-08T18:25:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KieranDevvs",
                                                                               "createdAt":  "2023-12-26T22:46:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lechu445",
                                                                               "createdAt":  "2024-03-05T19:36:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SeanStewartRT",
                                                                               "createdAt":  "2024-05-31T04:52:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  41
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Anyone else who wants this and would use it please thumb up the top post to help gauge interest.",
                                           "updatedAt":  "2017-05-26T17:13:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNDYwMjI3OA==",
                                           "createdAt":  "2017-05-29T08:19:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamhathcock",
                                           "body":  "I would be interested in looking at pushing algorithms into the core and exposing more outside to help projects.  As the author of SharpCompress, i like having a unified interface.\r\n\r\nAnother thing, working with non-seekable streams is a big thing so i cant use the current Zip implementation in the core.  I\u0027d like to get native zlib usage though so that\u0027s an example of something I\u0027d like exposed.  \r\n\r\nThe 7Zip format is awful and seekable only.  But implementing LZip for LZMA natively might be good like GZip is.  Probably BZip2 too.",
                                           "updatedAt":  "2017-05-29T08:19:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNDk2OTk1NQ==",
                                           "createdAt":  "2017-05-30T18:40:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Sounds interesting. @ianhays what do you think?",
                                           "updatedAt":  "2017-05-30T18:40:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNDk3NTI0MA==",
                                           "createdAt":  "2017-05-30T18:59:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ianhays",
                                           "body":  "\u003eI would be interested in looking at pushing algorithms into the core and exposing more outside to help projects. As the author of SharpCompress, i like having a unified interface.\r\n\r\nYay!\r\n\r\n\u003eThe 7Zip format is awful and seekable only.\r\n\r\n7z support is definitely lower on the totem pole than lzma. It\u0027d be nice to get it \u0027for free\u0027, but is otherwise not worth a lot of additional effort until we get other things in place instead.\r\n\r\n\u003eSounds interesting. @ianhays what do you think?\r\n\u003eProbably BZip2 too.\r\n\r\nI recall chatting about bzip2 somewhere else... It\u0027s something we should eventually support.\r\n\r\n\u003eI\u0027d like to get native zlib usage though so that\u0027s an example of something I\u0027d like exposed.\r\n\r\nI\u0027m not sure we\u0027d want to publicly expose the native zlib functions - that\u0027s a bit lower level than the majority of people would need. You could always pinvoke directly into the \u0027clrcompression\u0027 yourself to get at deflateinit2, inflate, inflateend, etc, though it\u0027s technically unsupported.\r\n\r\n\u003eAnother thing, working with non-seekable streams is a big thing so i cant use the current Zip implementation in the core. \r\n\r\nSpecifically for Update mode? Or are you referring to potentially large streams for which you do not want to copy them entirely into memory when reading? Because I dislike the latter and would love to see a solution that didn\u0027t require that.\r\n\r\nthink I addressed all of your comment @adamhathcock... there\u0027s a lot of meat in there :)",
                                           "updatedAt":  "2017-05-30T18:59:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNDk3ODQ3Nw==",
                                           "createdAt":  "2017-05-30T19:11:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamhathcock",
                                           "body":  "I\u0027m referring to dealing with large files, network streams or any other scenario where a stream is (or should be for perf) accessed in a forward-only matter.  I have a reader/writer interface that allows for that.\r\n\r\nIf my code or something new was in the Core, then there wouldn\u0027t be the need to expose zlib directly for the above scenario.\r\n\r\nThere is a lot of meat in this stuff :)  It would be cool if SharpCompress or a lot of the ideas were integrated.\r\n\r\nI guess I should start learning how to do a local build of corefx.",
                                           "updatedAt":  "2017-05-30T19:11:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNTAwMDE5Ng==",
                                           "createdAt":  "2017-05-30T20:35:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ianhays",
                                           "body":  "\u003eI\u0027m referring to dealing with large files, network streams or any other scenario where a stream is (or should be for perf) accessed in a forward-only matter. I have a reader/writer interface that allows for that.\r\n\r\nI\u0027ve been hearing requests for avoiding the memorystream copying for a *while* now. The big question is to how minimal the API code change could be and exactly how large the performance benefit is. \r\n\r\n\u003eThere is a lot of meat in this stuff :) It would be cool if SharpCompress or a lot of the ideas were integrated.\r\n\r\nI absolutely agree! There\u0027s the ever-present question of what \u0027qualifies\u0027 to be in CoreFX and what should be relegated to a secondary opt-in library and that needs to be answered for any changes submitted, but I personally think System.IO.Compression has a long way to go and should have significantly wider algorithm support in-box to more readily support cross-platform scenarios. It would be good if we can chunk up the additions into as small of bits as possible to squeeze them through review more easily.\r\n\r\n\u003eI guess I should start learning how to do a local build of corefx.\r\n\r\nWe\u0027ve got [some docs for getting started](https://github.com/dotnet/corefx/blob/master/Documentation/project-docs/developer-guide.md) that we\u0027ve been actively working on improving lately. Feel free to comment here or shoot me an email if you have any issues or suggestions :)\r\n\r\n\r\ncc: This conversation shares some characteristics with the one in https://github.com/dotnet/corefx/issues/14853 - potentially basing the ziparchive implementation around `libzip`.",
                                           "updatedAt":  "2017-05-30T20:35:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNTEzMDYxNA==",
                                           "createdAt":  "2017-05-31T09:03:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamhathcock",
                                           "body":  "\u003e I\u0027ve been hearing requests for avoiding the memorystream copying for a while now. The big question is to how minimal the API code change could be and exactly how large the performance benefit is.\r\n\r\nFrom my experience, you can\u0027t do this with a random access API like ZipArchive is.  In SharpCompress, there are two APIs, one for random access (Archives) and one for forward-only (Reader/Writer).  With Reader/Writers, you basically update a foreach loop and deal with the file.  If an entry isn\u0027t read, then it\u0027s skipped (if size is known) or decompressed to null (if size is unknown) depends on the archive format.\r\n\r\nMaybe a new issue should be created around forward-only access.  That is separate to https://github.com/dotnet/corefx/issues/14853 which is about 3rd party and/or native usage of the zip format.  Unfortunately, most implementations assume you have random-access so reimplementing might be required for forward-only.\r\n\r\nPutting more compressors/formats (like LZMA, LZip, etc.) in is another issue.  I\u0027d like to have enough bits exposed to be able to do forward-only access in a 3rd party lib if that\u0027s the judgement.",
                                           "updatedAt":  "2017-05-31T09:03:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNTEzNDgxMw==",
                                           "createdAt":  "2017-05-31T09:20:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "qmfrederik",
                                           "body":  "@adamhathcock @ianhays We regularly interact with large zip files (decompressed size \u003e 1 GB) and the current ZipArchive wasn\u0027t a good fit for us because of the memory consumption. Plus, the zip files that we generate need to comply with some additional requirements - for example, the content of some files need to be aligned on a 4-byte boundary and the files need to be sorted in a specific sort order (based on their file name) - thank you Android \u0026 iOS.\r\n\r\nAfter using ZipArchive and SharpZipLib we ended up rolling our own zip library which meets our requirements, although it seems SharpCompress would probably be a fit too.\r\n\r\nWhat we would really like to see is an API in .NET which exposes some of the lower level concepts related to zip archives. For example, one where you can manually read/write the central directory, local file header and file contents. I guess the existing ZipArchive class could sit on top of that.\r\n",
                                           "updatedAt":  "2017-05-31T09:20:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNTE0MDAxMg==",
                                           "createdAt":  "2017-05-31T09:41:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamhathcock",
                                           "body":  "@qmfrederik  I think a SharpCompress API Reader would cover you.  I know people doing your use case with SharpCompress.  I\u0027d still be interested to see what you did.\r\n\r\nIt doesn\u0027t seem they want to expose the lower level stuff, which makes sense.  If the high level API covered you, you wouldn\u0027t need it.",
                                           "updatedAt":  "2017-05-31T09:41:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNTI4MzA3MQ==",
                                           "createdAt":  "2017-05-31T18:54:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ianhays",
                                           "body":  "\u003eMaybe a new issue should be created around forward-only access.\r\n\r\nGood idea, since we\u0027ve digressed conversation away from LZMA (this issue) a bit. Feel free to open up a new issue.\r\n\r\n\u003eIt doesn\u0027t seem they want to expose the lower level stuff, which makes sense. If the high level API covered you, you wouldn\u0027t need it.\r\n\r\nExactly :) That\u0027s not to say I\u0027m completely against exposing the specifics of the archive format, but only as a last resort if we cannot resolve issues sufficiently with the high level API.",
                                           "updatedAt":  "2017-05-31T18:54:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzMzI2MzUzNQ==",
                                           "createdAt":  "2017-09-29T23:44:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "simonegli8",
                                           "body":  "I did an DeflateStream style implementation of LZMA for the MSPControl project. The source is here:\r\n\r\n[Streams.zip](https://github.com/dotnet/corefx/files/1345917/Streams.zip)\r\n\r\nIt uses two Threads, to be able to compress in the background and write/read to a base source stream. For this it uses a PipeStream, that can read and write between Threads over a buffer. It has two classes, one System.IO.Compression.LzmaStream similar to DeflateStream and a class System.IO.Compression.CompressedStream where one can choose the algorithm from either Raw-Uncompressed, Deflate or LZMA.",
                                           "updatedAt":  "2017-09-29T23:44:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1NDUzNjg1MA==",
                                           "createdAt":  "2017-12-30T09:43:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "oldrev",
                                           "body":  "Hi @simonegli8 , I did a toy project to implement the 7-zip style multi-threaded encoding/decoding too! \r\n\r\nIn my opinion, the 7-zip way that separated coders and streams is more easy to use when you needs combines multiple coders like preprocessing/encryption/compression.\r\n\r\nMy program uses a customed stream connector to avoid memory allocation between streams.\r\n\r\n[MaltCompress](https://github.com/oldrev/maltcompress)\r\n\r\ncheers!\r\n",
                                           "updatedAt":  "2017-12-30T09:49:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2NjI3NTY0NA==",
                                           "createdAt":  "2019-12-16T22:29:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCtoXBA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "ite-klass",
                                                                               "createdAt":  "2019-12-17T09:18:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "ite-klass",
                                                                               "createdAt":  "2019-12-17T09:18:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2019-12-17T12:53:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "stil",
                                                                               "createdAt":  "2019-12-17T22:42:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "jasonkuo41",
                                                                               "createdAt":  "2020-01-01T15:22:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "jasonkuo41",
                                                                               "createdAt":  "2020-01-01T15:22:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kirsan31",
                                                                               "createdAt":  "2020-01-16T09:56:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "guidevnet",
                                                                               "createdAt":  "2020-01-17T02:01:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "guidevnet",
                                                                               "createdAt":  "2020-01-17T02:01:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "guidevnet",
                                                                               "createdAt":  "2020-01-17T02:01:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DoCode",
                                                                               "createdAt":  "2020-02-03T22:47:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "DoCode",
                                                                               "createdAt":  "2020-02-03T22:48:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "DoCode",
                                                                               "createdAt":  "2020-02-03T22:48:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "apoulet1234",
                                                                               "createdAt":  "2020-03-04T07:38:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bravecobra",
                                                                               "createdAt":  "2020-03-25T11:40:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "danielchalmers",
                                                                               "createdAt":  "2020-05-23T08:47:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KagurazakaNyaa",
                                                                               "createdAt":  "2020-06-03T01:44:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Mikolaytis",
                                                                               "createdAt":  "2020-10-03T13:09:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Agagamand",
                                                                               "createdAt":  "2020-11-02T11:24:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Genbox",
                                                                               "createdAt":  "2020-11-12T01:05:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2020-11-17T11:58:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2020-11-17T11:58:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "iamcarbon",
                                                                               "createdAt":  "2020-12-12T02:10:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "iamcarbon",
                                                                               "createdAt":  "2020-12-12T02:10:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AraHaan",
                                                                               "createdAt":  "2021-01-01T20:34:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "AraHaan",
                                                                               "createdAt":  "2021-01-01T20:34:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "AraHaan",
                                                                               "createdAt":  "2021-01-01T20:34:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "AraHaan",
                                                                               "createdAt":  "2021-01-01T20:34:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ferventcoder",
                                                                               "createdAt":  "2021-01-07T16:53:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Twisterat57",
                                                                               "createdAt":  "2021-01-15T15:08:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Pretasoc",
                                                                               "createdAt":  "2021-01-22T12:07:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Kryptos-FR",
                                                                               "createdAt":  "2021-01-26T00:10:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JaykeBird",
                                                                               "createdAt":  "2021-01-27T22:32:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MrM40",
                                                                               "createdAt":  "2021-01-31T07:26:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "CLFPosthumus",
                                                                               "createdAt":  "2021-02-04T22:28:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jetersen",
                                                                               "createdAt":  "2021-03-01T22:11:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "jetersen",
                                                                               "createdAt":  "2021-03-01T22:11:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "jetersen",
                                                                               "createdAt":  "2021-03-01T22:11:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "jetersen",
                                                                               "createdAt":  "2021-03-01T22:11:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "2ji3150",
                                                                               "createdAt":  "2021-03-07T17:08:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "2ji3150",
                                                                               "createdAt":  "2021-03-07T17:08:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "2ji3150",
                                                                               "createdAt":  "2021-03-07T17:08:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mafshin",
                                                                               "createdAt":  "2021-07-14T11:16:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Vladis466",
                                                                               "createdAt":  "2021-10-05T16:25:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Vladis466",
                                                                               "createdAt":  "2021-10-05T16:25:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kub1x",
                                                                               "createdAt":  "2022-01-17T08:51:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "stephenpope",
                                                                               "createdAt":  "2022-02-02T14:40:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PaulusParssinen",
                                                                               "createdAt":  "2022-03-15T11:38:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "asasine",
                                                                               "createdAt":  "2022-07-08T18:28:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KindDragon",
                                                                               "createdAt":  "2022-10-11T10:07:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "BruceChenQAQ",
                                                                               "createdAt":  "2022-12-01T11:43:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "Mohamed-Effat",
                                                                               "createdAt":  "2023-03-13T14:27:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dajbych",
                                                                               "createdAt":  "2023-05-22T11:06:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "2ji3150",
                                                                               "createdAt":  "2023-05-24T13:16:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JanSharp",
                                                                               "createdAt":  "2023-08-18T20:17:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CHAE84",
                                                                               "createdAt":  "2024-05-17T06:25:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "somegenericdev",
                                                                               "createdAt":  "2025-01-27T00:06:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  57
                                                         },
                                           "author":  "carlossanlop",
                                           "body":  "Triage:\r\n41 upvotes. We would like to follow up on the spec, API design and review.\r\nNote: Start with LZMA stream and then investigate feasibility of 7z.\r\nThe complex part is to implement the public domain of LZMA in the context of stream abstraction.",
                                           "updatedAt":  "2019-12-16T22:30:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNjgwMjE5NQ==",
                                           "createdAt":  "2021-04-09T16:28:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jjxtra",
                                           "body":  "LZ4 would be nice too, there\u0027s already nuget in pure C# with friendly licensing https://github.com/MiloszKrajewski/K4os.Compression.LZ4.\r\n\r\nZStandard is also interesting: https://github.com/bp74/Zstandard.Net, but it is not in pure C# yet.",
                                           "updatedAt":  "2021-04-09T16:28:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5dDP6d",
                                           "createdAt":  "2023-05-24T13:18:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "2ji3150",
                                           "body":  "I saw that windows11 is going to support rar / 7zip / etc. \r\nHope that .NET does so.",
                                           "updatedAt":  "2023-05-24T13:18:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5dDcHs",
                                           "createdAt":  "2023-05-24T13:44:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MrM40",
                                           "body":  "Really? That would be a surprise if W11 added native support for those formats. I think rar is a commercial non-open-source format. I guess 7zip is open-source, but it will still be a surprise if MS will implement it natively.  What happens when Igor Pavlov make changes to 7zip? I don\u0027t think MS will go down that rapid hole. Just thinking out loud.\r\nDo you have a link?",
                                           "updatedAt":  "2023-05-24T13:44:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5dDdnU",
                                           "createdAt":  "2023-05-24T13:48:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC8c2pw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "RokeJulianLockhart",
                                                                               "createdAt":  "2023-05-25T18:07:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "2ji3150",
                                           "body":  "\u003e Do you have a link?\r\n\r\nhttps://www.neowin.net/news/opening-rar-files-natively-in-windows-11-is-coming-and-people-online-are-going-crazy-over-it/\r\nYap. Seems MSFT is going to use [libarchive](https://github.com/libarchive/libarchive)\r\n",
                                           "updatedAt":  "2023-05-24T16:02:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5noOb0",
                                           "createdAt":  "2023-09-28T07:08:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODuwd1g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "amis92",
                                                                               "createdAt":  "2023-09-28T10:07:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "RokeJulianLockhart",
                                                                               "createdAt":  "2023-09-28T12:45:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "2ji3150",
                                                                               "createdAt":  "2023-09-28T12:49:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MrM40",
                                                                               "createdAt":  "2023-09-28T13:11:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jjxtra",
                                                                               "createdAt":  "2023-09-28T15:15:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CEbbinghaus",
                                                                               "createdAt":  "2023-11-14T08:06:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Nova-Logic",
                                                                               "createdAt":  "2023-11-16T03:04:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DontEatRice",
                                                                               "createdAt":  "2024-08-19T14:00:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  8
                                                         },
                                           "author":  "Symbai",
                                           "body":  "The Windows 11 update which supports RAR and 7zip has been released. How/when can we use that in .NET ?",
                                           "updatedAt":  "2023-09-28T07:08:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5nqIBO",
                                           "createdAt":  "2023-09-28T12:46:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RokeJulianLockhart",
                                           "body":  "\u003e https://github.com/dotnet/runtime/issues/1542#issuecomment-1738598132\r\n\r\n@Symbai, https://github.com/dotnet/runtime/discussions/92763#discussion-5681130 may be relevant here.",
                                           "updatedAt":  "2024-04-19T12:25:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vcxW4",
                                           "createdAt":  "2023-12-26T23:05:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODsobQQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jjxtra",
                                                                               "createdAt":  "2023-12-26T23:07:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "RokeJulianLockhart",
                                                                               "createdAt":  "2023-12-26T23:15:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "2ji3150",
                                                                               "createdAt":  "2023-12-27T02:20:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Agagamand",
                                                                               "createdAt":  "2023-12-27T05:10:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Mohamed-Effat",
                                                                               "createdAt":  "2023-12-27T07:21:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Kryptos-FR",
                                                                               "createdAt":  "2023-12-27T08:58:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "BWWIT",
                                                                               "createdAt":  "2023-12-27T09:35:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "fitdev",
                                                                               "createdAt":  "2023-12-27T14:23:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Takym",
                                                                               "createdAt":  "2023-12-27T18:53:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "HRKings",
                                                                               "createdAt":  "2023-12-28T18:31:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Inurias",
                                                                               "createdAt":  "2024-01-01T15:06:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "amis92",
                                                                               "createdAt":  "2024-01-08T14:27:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kafka2412",
                                                                               "createdAt":  "2024-01-22T01:01:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "johnricketts",
                                                                               "createdAt":  "2024-01-29T10:18:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Xyncgas",
                                                                               "createdAt":  "2024-02-03T00:55:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PaulusParssinen",
                                                                               "createdAt":  "2024-02-03T23:07:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DanteMarshal",
                                                                               "createdAt":  "2024-02-26T15:14:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lechu445",
                                                                               "createdAt":  "2024-03-05T19:36:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DontEatRice",
                                                                               "createdAt":  "2024-03-11T09:04:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "damien-c-d",
                                                                               "createdAt":  "2024-04-07T03:16:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "EatonZ",
                                                                               "createdAt":  "2024-04-10T02:42:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gsuberland",
                                                                               "createdAt":  "2024-08-02T21:00:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  22
                                                         },
                                           "author":  "KieranDevvs",
                                           "body":  "Seeing as .NET 8 has just been released and planning for the next version is taking place, is there any chance we could see this prioritised for .NET 9?",
                                           "updatedAt":  "2023-12-26T23:05:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57Kr23",
                                           "createdAt":  "2024-04-19T11:42:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "0xced",
                                           "body":  "\u003e [!NOTE]  \r\n\u003e I\u0027m a few weeks late for this [joke](https://arstechnica.com/security/2024/04/what-we-know-about-the-xz-utils-backdoor-that-almost-infected-the-world/) but let\u0027s post it anyway…\r\n\r\nIn the meantime I think someone should write a dotnet wrapper around [XZ Utils](https://github.com/tukaani-project/xz).\r\n\r\nI heard version 5.6.1 is pretty fast thanks to @JiaT75 optimisations. 😂",
                                           "updatedAt":  "2024-04-19T11:42:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-0u6q",
                                           "createdAt":  "2024-05-23T18:03:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEW_Z8w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KieranDevvs",
                                                                               "createdAt":  "2024-05-23T19:44:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Agagamand",
                                                                               "createdAt":  "2024-05-24T13:54:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "elgonzo",
                                                                               "createdAt":  "2024-06-30T12:25:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Mrgaton",
                                                                               "createdAt":  "2024-07-29T23:51:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lindexi",
                                                                               "createdAt":  "2025-06-18T03:10:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "Mrgaton",
                                           "body":  "I need this so hard on .NET 8\r\n\r\ncause brotli with smallest size is too slow and very bad compressing compared with 7z with lzma2 in ultra",
                                           "updatedAt":  "2024-05-23T18:04:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-1T_0",
                                           "createdAt":  "2024-05-23T19:46:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KieranDevvs",
                                           "body":  "@Mrgaton Agreed, there are no good LZMA/2 libraries and I\u0027ve has several instances where it would have been very nice to have one.",
                                           "updatedAt":  "2024-05-23T19:46:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6IMSsn",
                                           "createdAt":  "2024-08-12T21:18:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EatonZ",
                                           "body":  "Hello, I\u0027m guessing the window has passed for this to have a chance at being included in .NET 9 later this year?",
                                           "updatedAt":  "2024-08-12T21:18:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6IMsma",
                                           "createdAt":  "2024-08-12T22:49:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEOXl5g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Agagamand",
                                                                               "createdAt":  "2024-08-13T13:37:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "0xced",
                                                                               "createdAt":  "2024-08-20T21:22:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TabNocBot",
                                                                               "createdAt":  "2024-08-22T00:38:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "meziantou",
                                                                               "createdAt":  "2024-08-31T20:42:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hirohira9119",
                                                                               "createdAt":  "2024-09-06T17:14:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alex-b-123",
                                                                               "createdAt":  "2024-09-10T16:35:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "robertoandrade",
                                                                               "createdAt":  "2024-09-26T06:08:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TheKvikk",
                                                                               "createdAt":  "2024-10-31T22:12:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Inurias",
                                                                               "createdAt":  "2025-01-17T22:22:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Ruben2776",
                                                                               "createdAt":  "2025-01-27T00:27:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vjmadhal-silverstream",
                                                                               "createdAt":  "2025-04-15T11:58:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  11
                                                         },
                                           "author":  "KieranDevvs",
                                           "body":  "\u003e Hello, I\u0027m guessing the window has passed for this to have a chance at being included in .NET 9 later this year?\r\n\r\nYeah there\u0027s zero chance of that happening unfortunately.\r\n\r\nA better question would be, how much customer engagement needs to happen before this can be prioritised. I\u0027m not trying to be demanding or arrogant and I understand each release only has so much capacity and there are other features the .NET team think is more worth while, but this issue is almost 10 years old now and its 4th most top thumbed up issue on the entire repository. We\u0027re told that thumbing up and engaging with issues on GitHub is the best way to see issues/features get looked at. I feel like if that statement is true then this issue should have been picked up a long time ago? \r\n\r\nCan someone from the .NET team help me understand what specifically needs to happen to get this prioritised in the next available release? Is it more thumbs up? Is it more reports of customers use cases being blocked because LZMA isn\u0027t available?",
                                           "updatedAt":  "2024-08-12T22:49:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6N6RnM",
                                           "createdAt":  "2024-09-28T18:51:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEEEmtA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Mrgaton",
                                                                               "createdAt":  "2024-09-28T19:11:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "antiufo",
                                                                               "createdAt":  "2024-09-29T18:23:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "somegenericdev",
                                                                               "createdAt":  "2025-01-27T00:09:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "armoiredu44",
                                           "body":  "\u003e http://7-zip.org/sdk.html\r\n\r\nbro it\u0027s a pain to use, I can\u0027t find documentation anywhere",
                                           "updatedAt":  "2024-09-28T18:51:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6N6UZ0",
                                           "createdAt":  "2024-09-28T19:37:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD0AiXA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "fitdev",
                                                                               "createdAt":  "2024-09-29T19:40:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Mrgaton",
                                           "body":  "\u003e \u003e http://7-zip.org/sdk.html\r\n\u003e \r\n\u003e bro it\u0027s a pain to use, I can\u0027t find documentation anywhere\r\n\r\nCompletely agree , we should add all the newer compression algorithms and make then easy to use like existing brotli and deflate but with the possibility of completely configuring the options.",
                                           "updatedAt":  "2024-09-28T19:38:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6b2E0u",
                                           "createdAt":  "2025-01-27T00:03:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "somegenericdev",
                                           "body":  "\u003e \u003e http://7-zip.org/sdk.html\n\u003e \n\u003e bro it\u0027s a pain to use, I can\u0027t find documentation anywhere\n\nOther than being a pain to use, it has a hard limit of 2GB. If you try to compress a 2GB+ file, it will fail. Same if you try to decompress a file that was once 2GB+.",
                                           "updatedAt":  "2025-01-27T00:03:56Z"
                                       }
                                   ],
                         "totalCount":  53
                     },
        "title":  "Add support for 7z/LZMA1/LZMA2 to System.IO.Compression",
        "labels":  [
                       "api-suggestion",
                       "area-System.IO.Compression"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/1543",
        "createdAt":  "2016-09-13T13:21:05Z",
        "number":  1543,
        "author":  "qmfrederik",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC7qp-Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jakubsuchybio",
                                            "createdAt":  "2019-02-12T09:10:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TimSirmovics",
                                            "createdAt":  "2020-05-29T05:24:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "krolson",
                                            "createdAt":  "2021-04-21T20:36:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cremor",
                                            "createdAt":  "2022-01-10T11:58:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vansha",
                                            "createdAt":  "2022-12-15T11:43:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ulrichb",
                                            "createdAt":  "2023-11-07T17:15:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fschmied",
                                            "createdAt":  "2023-11-10T07:05:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "qnku",
                                            "createdAt":  "2024-02-08T20:10:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2024-04-19T17:39:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "edwardneal",
                                            "createdAt":  "2024-07-09T12:07:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "udlose",
                                            "createdAt":  "2024-10-08T20:08:38Z"
                                        }
                                    ],
                          "totalCount":  11
                      },
        "updatedAt":  "2025-01-24T22:38:39Z",
        "body":  "When you open a `ZipArchive` in Update mode, the entire zip file will be loaded in memory when the `.Dispose` method is invoked.\n\nThis is because `.Dipose`  calls `.WriteFile`, which:\n- Calls `LoadLocalHeaderExtraFieldAndCompressedBytesIfNeeded` for all entries, which loads the compressed data into memory for those entries\n- Sets the size of the .zip archive to 0, by calling `_archiveStream.SetLength(0);` \n- Writes out all entries one by one.\n\nAs a result:\n- A lot of memory is used, the compressed data for each entry is loaded into memory\n- A lot of unnecessary disk I/O is performed, because all entries are written out again, even if they were not modified.\n\nAn alternative may be to incrementally update the zip archive, and only update entries which changes.\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOm8dDfQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2MjY3ODc0NA==",
                                           "createdAt":  "2019-02-12T09:13:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jakubsuchybio",
                                           "body":  "This is a real pain. We use full .NET Framework and we have some really large zip files where we need to update small files inside, but because of this loading into memory, we are getting OutOfMemoryException, because we have 32b application and we cannot change into 64bit, because of dependent driver DLLs that are in 32b.",
                                           "updatedAt":  "2019-02-12T09:13:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2NjI3NzcyNQ==",
                                           "createdAt":  "2019-12-16T22:35:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "carlossanlop",
                                           "body":  "Triage:\r\nWe should scope this to fix only loading entries that have changes.",
                                           "updatedAt":  "2019-12-16T22:35:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3NTc0NjUwNQ==",
                                           "createdAt":  "2020-01-17T18:42:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Jlalond",
                                           "body":  "@carlossanlop Hmm Looks like it\u0027s only writing files on [creates/updates](https://github.com/dotnet/runtime/blob/master/src/libraries/System.IO.Compression/src/System/IO/Compression/ZipArchive.cs#L297).\r\n\r\nBut [it looks like it\u0027s still iterating over them all](https://github.com/dotnet/runtime/blob/master/src/libraries/System.IO.Compression/src/System/IO/Compression/ZipArchive.cs#L659) , I don\u0027t see any properties in ZipArchiveEntry to denote if it\u0027s been modified, I\u0027m going to keep doing research once I get home, but I think this would be fun to pick up",
                                           "updatedAt":  "2020-01-17T18:47:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Zbhvg",
                                           "createdAt":  "2023-04-07T15:26:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "IDisposable",
                                           "body":  "Anyone working on this? I could pick it up if not.",
                                           "updatedAt":  "2023-04-07T15:26:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rPrL8",
                                           "createdAt":  "2023-11-07T17:15:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODYFhAQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jovton",
                                                                               "createdAt":  "2024-02-24T19:21:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ulrichb",
                                           "body":  "Just found this ticket after creating a duplicate (#94455), and wanted to crosspost our use case where the current behavior is a big issue:\r\n\r\n a) We\u0027re dealing with potentially large _user-provided_ ZIP files (in the GB range),\r\n b) we need to _update_ entries (actually not directly but via `System.IO.Packaging.ZipPackage` for OPC file processing), and\r\n c) the whole can happen in parallel.\r\n\r\nThis means with the current `ZipArchive` implementation we need to reserve dozens of GBs of virtual memory just for `System.IO.Packaging.ZipPackage` processing, otherwise we\u0027re risking container memory limit violations and therefore OOM exceptions.",
                                           "updatedAt":  "2023-11-07T17:15:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6bx0N9",
                                           "createdAt":  "2025-01-24T22:38:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEVa8OA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "0xfeeddeadbeef",
                                                                               "createdAt":  "2025-01-24T23:00:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "izanhzh",
                                                                               "createdAt":  "2025-06-05T08:30:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "edwardneal",
                                           "body":  "With #102704 now merged, there\u0027s been some progress to improving this. The PR includes some infrastructure to track the type of changes made to an individual ZipArchiveEntry, and alters the way that entries are written to the output stream.\n\nThe present behaviour is:\n* If an entry is added to the archive and the archive is then disposed of, only the new entry (and the new central directory) is written.\n* If an existing entry\u0027s fixed-length metadata (e.g. the last write time) is modified, the entry headers are rewritten in-place. The entry contents are not.\n* If an existing entry\u0027s dynamic-length metadata (e.g. the filename) or contents are modified, that entry is written. Every entry which follows it in the archive is also written.\n* If an existing entry is deleted, every entry which follows it in the archive is written.\n\nAppending an entry to a ZipArchive is now faster and uses less memory, particularly when appending to large archives. If a ZipArchive was opened in Update mode and never modified, this will no longer write to the output stream at all.\n\nMaking ad-hoc modifications to entries in ZipArchives now has less consistent performance, but it should still be faster on average. Deleting or modifying the first entry in the archive results in performance which is a modest improvement over .NET 9.0; doing the same thing to the last entry in the archive should be significantly faster than .NET 9.0 (because fewer entries are being rewritten out to the output stream.)\n\nIf we\u0027ve got control over the source ZIP file, ZipArchive will perform best when the largest and the most frequently modified entries are placed at the end of the archive.\n\nI had a few ideas while writing the PR, but most of these involve archive size/write speed/memory usage tradeoffs. I\u0027m leaving them below in case anyone wants to develop them.\n* We currently rewrite the entry when dynamic-length metadata changes, because that metadata could otherwise overwrite the contents. This isn\u0027t guaranteed: if the total length of the dynamic-length metadata doesn\u0027t change, we could safely rewrite the header without touching the entry contents or the entries which follow.\n* When an entry\u0027s contents are modified, there\u0027s no guarantee that they\u0027ll get larger - that\u0027s just the safest assumption. If it shrinks, we could overwrite the now-free space; we wouldn\u0027t need to rewrite every entry which follows.\n  * We wouldn\u0027t want to do this if the total size of the following entries is greater than the amount of now-free space.\n* When an entry\u0027s contents do become larger, they might only intersect a few entries which follow it. In this situation, we might only need to rewrite a few of the following entries. There\u0027ll be a some now-free space between the end of the enlarged entry and the start of the first untouched entry which follows.\n* If someone deletes an entry in the ZipArchive, it might be more efficient to simply overwrite that space in the archive (marking it as free) and not rewrite the entries which follow.\n* If there\u0027s now free space in the ZipArchive and we create a new entry, (or move an existing one) then that entry might be able to fit in the free space.",
                                           "updatedAt":  "2025-01-24T22:38:38Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "System.IO.Compression: ZipArchive loads entire file in memory on .Dispose",
        "labels":  [
                       "enhancement",
                       "area-System.IO.Compression",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/1544",
        "createdAt":  "2016-09-13T13:32:53Z",
        "number":  1544,
        "author":  "qmfrederik",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC3UWkQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ericstj",
                                            "createdAt":  "2019-02-27T19:47:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Costo",
                                            "createdAt":  "2019-04-29T15:03:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lindexi",
                                            "createdAt":  "2020-03-12T07:47:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KondzioSSJ4",
                                            "createdAt":  "2020-06-12T17:26:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Trysor",
                                            "createdAt":  "2020-08-20T17:04:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Astimus",
                                            "createdAt":  "2020-11-09T12:57:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nike61",
                                            "createdAt":  "2020-11-10T12:23:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alekseyshipilov",
                                            "createdAt":  "2020-11-10T12:23:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PyshkovIvan",
                                            "createdAt":  "2020-11-10T12:23:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AlexNik",
                                            "createdAt":  "2020-11-10T12:24:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fiantsev",
                                            "createdAt":  "2020-11-10T12:24:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MyrZiKus",
                                            "createdAt":  "2020-11-10T12:25:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alexeykuznetsov",
                                            "createdAt":  "2020-11-10T12:28:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Likhachev-dm",
                                            "createdAt":  "2020-11-10T12:33:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Sharm",
                                            "createdAt":  "2020-11-10T12:58:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "boyarincev",
                                            "createdAt":  "2020-11-11T11:10:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hectoresoto",
                                            "createdAt":  "2020-12-29T23:27:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Pilchard123",
                                            "createdAt":  "2021-01-07T16:46:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ilin61",
                                            "createdAt":  "2021-02-09T13:19:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "altso",
                                            "createdAt":  "2021-02-19T14:49:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "craig-d",
                                            "createdAt":  "2021-05-20T19:41:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "macwier",
                                            "createdAt":  "2021-07-30T11:11:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "saintogod",
                                            "createdAt":  "2021-09-26T03:51:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "BryceBarbara",
                                            "createdAt":  "2021-11-02T22:57:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "molesmoke",
                                            "createdAt":  "2021-11-25T08:42:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cremor",
                                            "createdAt":  "2022-01-10T11:57:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "atrauzzi",
                                            "createdAt":  "2022-02-11T02:43:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "randyburden",
                                            "createdAt":  "2022-04-08T19:14:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "insinfo",
                                            "createdAt":  "2022-04-08T21:49:29Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "insinfo",
                                            "createdAt":  "2022-04-08T21:49:34Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "saintogod",
                                            "createdAt":  "2022-06-22T09:35:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "madelson",
                                            "createdAt":  "2022-06-30T17:27:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "CrossBound",
                                            "createdAt":  "2022-07-27T13:53:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "BrunoJuchli",
                                            "createdAt":  "2022-08-23T18:29:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "f1nzer",
                                            "createdAt":  "2022-10-17T17:19:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "yzhoholiev",
                                            "createdAt":  "2022-11-15T09:27:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "andyld97",
                                            "createdAt":  "2023-04-09T04:53:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "markusroessler",
                                            "createdAt":  "2023-04-30T18:50:52Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "markusroessler",
                                            "createdAt":  "2023-04-30T18:50:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Eli-Black-Work",
                                            "createdAt":  "2023-05-25T06:11:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Martin-Molinero",
                                            "createdAt":  "2023-06-19T13:01:31Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "aloraman",
                                            "createdAt":  "2023-10-28T12:00:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "franklesniak",
                                            "createdAt":  "2023-11-05T05:19:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "wzchua",
                                            "createdAt":  "2023-11-06T20:30:57Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "jaredbroad",
                                            "createdAt":  "2024-01-10T16:26:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jaredbroad",
                                            "createdAt":  "2024-01-10T16:27:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jovton",
                                            "createdAt":  "2024-03-18T18:57:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0xfeeddeadbeef",
                                            "createdAt":  "2024-04-01T08:47:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2024-04-18T14:24:48Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2024-04-18T14:24:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "omariom",
                                            "createdAt":  "2024-04-18T19:00:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SommerEngineering",
                                            "createdAt":  "2024-04-19T06:28:12Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "SommerEngineering",
                                            "createdAt":  "2024-04-19T06:28:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "qnku",
                                            "createdAt":  "2024-04-29T08:39:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "petergodec",
                                            "createdAt":  "2024-05-15T06:51:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-06-10T20:17:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "edwardneal",
                                            "createdAt":  "2024-06-16T11:49:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vancodocton",
                                            "createdAt":  "2024-08-20T07:16:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "blakepell",
                                            "createdAt":  "2024-08-21T02:51:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mortan",
                                            "createdAt":  "2024-08-27T08:40:57Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "udlose",
                                            "createdAt":  "2024-10-11T19:26:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "udlose",
                                            "createdAt":  "2024-10-11T19:26:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KLuuKer",
                                            "createdAt":  "2024-10-15T08:13:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mikhailtse",
                                            "createdAt":  "2024-11-15T11:57:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ekalchev",
                                            "createdAt":  "2024-12-07T19:25:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mattcargile",
                                            "createdAt":  "2024-12-26T05:46:35Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "Ben0421",
                                            "createdAt":  "2025-01-14T22:23:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "LJN-hzleaper",
                                            "createdAt":  "2025-03-13T03:32:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Athari",
                                            "createdAt":  "2025-07-19T00:08:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Kkamikadzee",
                                            "createdAt":  "2025-07-29T15:11:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jspraul",
                                            "createdAt":  "2025-08-28T15:56:14Z"
                                        }
                                    ],
                          "totalCount":  71
                      },
        "updatedAt":  "2025-08-27T12:38:59Z",
        "body":  "If a `ZipArchive` is opened in Update mode, calling `ZipArchiveEntry.Open` will always result in the entry\u0027s data being decompressed and stored in memory. \n\nThis is because `ZipArchiveEntry.Open` calls `ZipArchiveEntry.OpenInUpdateMode`, which in return gets the value of the `ZipArchiveEntry.UncompressedData` property, which will decompress the data and store it in a `MemoryStream`.\n\nThis in its own is already fairly inconvenient - if I\u0027m updating a large file (say 1GB) that\u0027s compressed in a zip archive, I would want to read it from the `ZipArchiveEntry` in smaller chunks, save it to a temporary file, and update the entry in the `ZipArchive` in a similar way (i.e. limiting the memory overhead and preferring temporary files instead).\n\nThis also means that as soon as a `ZipArchive` is opened in Update mode, even reading an `ZipArchiveEntry` which you\u0027ll never update incurs the additional cost.\n\nA short-term fix may be to expose `ZipArchiveEntry.OpenInReadMode`, which will return a `DeflateStream` instead. If you\u0027re doing mixed reading/writing of entries in a single `ZipArchive`, this should already help you avoid some of the memory overhead.\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwGgEFQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2ODAxNjgxNQ==",
                                           "createdAt":  "2019-02-27T20:25:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "I\u0027ve noticed the same.  In general ZipArchiveEntry.Open is very non-intuitive in its behavior.  \r\n\r\nFor read only / write only you get a wrapped DeflateStream which doesn\u0027t tell you the length of the stream nor permit you to seek it.  For read/write (update) ZipArchiveEntry will read and decompress the entire entry into memory (in fact, into a memory stream backed by a single contiguous managed array) so that you have a seek-able representation of the file.  Once opened for update the file is then written back to the archive when the archive itself is closed.\r\n\r\nI agree with @qmfrederik here that we need a better API.  Rather than rely solely on the archive\u0027s open mode we should allow for the individual call\u0027s to Open to specify what kind of stream they want.  We can then check that against how the archive was opened in case it is incompatible and throw.  Consider the addition:\r\n```C#\r\n  public Stream Open(FileAccess desiredAccess)\r\n```\r\nFor an archive opened with ZipArchiveMode.Update we could allow FileAccess.Read, FileAccess.Write, or FileAccess.ReadWrite, where only the latter would do the MemoryStream expansion.  Read and write would be have as they did today.  In addition to solving the OP issue, this would address the case where someone is opening an archive for Update and simply adding a single file: we shouldn\u0027t need to copy that uncompressed data into memory just to write it to the archive.\r\n\r\nWe also can do better in the read case, we know the length of the data (assuming the archive is not inconsistent) and can expose that rather than throwing.\r\n",
                                           "updatedAt":  "2019-02-27T20:25:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2ODAyNzU5Nw==",
                                           "createdAt":  "2019-02-27T20:58:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Another interesting consideration for this is something like the approach taken by System.IO.Packaging in desktop.  It implemented an abstraction over the deflate stream that would change modes depending on how you interacted with it: https://referencesource.microsoft.com/#WindowsBase/Base/MS/Internal/IO/Packaging/CompressStream.cs,e0a52fedb240c2b8\r\n\r\nExclusive reads small seeks would operate on a deflate stream; same for exclusive writes.  Large seeks or random access would fall back to \"emulation mode\" wherein it would decompress everything to stream that was partially backed by memory but would fallback to disk.\r\n\r\nI don\u0027t really like this since it hides some very expensive operations behind synchronous calls, as well as introducing a potential trust boundary (temp file) behind something that is expected to be purely computation.  I think it makes sense to keep Zip lower level and not try to hide this in the streams we return.  Perhaps we could allow for the caller to provide a stream for temporary storage in the Update case.",
                                           "updatedAt":  "2019-02-27T21:26:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2NjI3ODMzMw==",
                                           "createdAt":  "2019-12-16T22:36:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "carlossanlop",
                                           "body":  "Triage:\r\nThis would be nice to have.",
                                           "updatedAt":  "2019-12-16T22:36:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MzY0MjE0Mw==",
                                           "createdAt":  "2020-07-24T17:13:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEKOyMg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Astimus",
                                                                               "createdAt":  "2020-11-09T12:57:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alekseyshipilov",
                                                                               "createdAt":  "2020-11-10T12:23:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PyshkovIvan",
                                                                               "createdAt":  "2020-11-10T12:23:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "balkarov",
                                                                               "createdAt":  "2020-11-10T12:23:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "orb3b",
                                                                               "createdAt":  "2020-11-10T12:23:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "yusben",
                                                                               "createdAt":  "2020-11-10T12:24:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MyrZiKus",
                                                                               "createdAt":  "2020-11-10T12:24:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "fiantsev",
                                                                               "createdAt":  "2020-11-10T12:24:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Vampirol",
                                                                               "createdAt":  "2020-11-10T12:28:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alexeykuznetsov",
                                                                               "createdAt":  "2020-11-10T12:28:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Likhachev-dm",
                                                                               "createdAt":  "2020-11-10T12:32:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alex3fx",
                                                                               "createdAt":  "2020-11-10T12:38:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ppbaykov",
                                                                               "createdAt":  "2020-11-10T12:39:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Sharm",
                                                                               "createdAt":  "2020-11-10T12:58:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "devruslanb",
                                                                               "createdAt":  "2020-11-10T13:20:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "boyarincev",
                                                                               "createdAt":  "2020-11-11T11:09:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Trysor",
                                                                               "createdAt":  "2020-11-18T21:39:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hectoresoto",
                                                                               "createdAt":  "2020-12-29T20:54:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "altso",
                                                                               "createdAt":  "2021-02-19T14:49:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nike61",
                                                                               "createdAt":  "2021-03-26T11:23:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "raffaeler",
                                                                               "createdAt":  "2021-04-22T11:10:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "blakepell",
                                                                               "createdAt":  "2021-05-26T15:47:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "watfordsuzy",
                                                                               "createdAt":  "2021-07-01T18:44:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "macwier",
                                                                               "createdAt":  "2021-07-30T11:14:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "saintogod",
                                                                               "createdAt":  "2021-09-27T06:58:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Anarios",
                                                                               "createdAt":  "2021-12-28T14:55:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "atrauzzi",
                                                                               "createdAt":  "2022-02-11T02:46:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KarlisVe",
                                                                               "createdAt":  "2022-06-04T18:57:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Meigyoku-Thmn",
                                                                               "createdAt":  "2022-06-08T03:38:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "c0shea",
                                                                               "createdAt":  "2022-07-26T19:11:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jchable",
                                                                               "createdAt":  "2022-08-31T09:15:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "easuter",
                                                                               "createdAt":  "2022-11-17T13:30:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Luk164",
                                                                               "createdAt":  "2023-02-02T08:48:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "powermetal63",
                                                                               "createdAt":  "2023-09-20T15:42:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "axeh",
                                                                               "createdAt":  "2024-07-12T11:02:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "udlose",
                                                                               "createdAt":  "2024-10-11T19:28:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cRotermund",
                                                                               "createdAt":  "2024-10-27T22:36:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ekalchev",
                                                                               "createdAt":  "2024-12-07T19:25:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "LJN-hzleaper",
                                                                               "createdAt":  "2025-03-13T03:31:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DenisValeev",
                                                                               "createdAt":  "2025-03-17T19:48:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "andkorsh",
                                                                               "createdAt":  "2025-03-17T19:49:11Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  41
                                                         },
                                           "author":  "twsouthwick",
                                           "body":  "@carlossanlop This is blocking many users from moving to .NET Core as writing large office files ends up hitting this by way of System.IO.Packaging-\u003eDocumentFormat.OpenXml",
                                           "updatedAt":  "2020-07-24T17:19:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MzY3OTEyMw==",
                                           "createdAt":  "2020-07-24T18:42:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCOLBdQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "twsouthwick",
                                                                               "createdAt":  "2020-07-24T18:53:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ericstj",
                                                                               "createdAt":  "2020-09-03T16:23:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alex3fx",
                                                                               "createdAt":  "2020-11-10T12:38:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Trysor",
                                                                               "createdAt":  "2020-12-09T18:01:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nike61",
                                                                               "createdAt":  "2021-03-26T11:23:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "stephenpope",
                                                                               "createdAt":  "2022-02-02T14:44:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "atrauzzi",
                                                                               "createdAt":  "2022-02-11T02:46:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Maybe we should mark this 6.0.0",
                                           "updatedAt":  "2020-07-24T18:42:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3Nzc4Njk5OA==",
                                           "createdAt":  "2020-08-20T17:04:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBgrdcg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vplemyannik",
                                                                               "createdAt":  "2020-08-26T15:10:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Viktor-36",
                                                                               "createdAt":  "2020-09-17T10:51:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Astimus",
                                                                               "createdAt":  "2020-11-09T12:59:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nike61",
                                                                               "createdAt":  "2020-11-24T13:48:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "altso",
                                                                               "createdAt":  "2021-02-19T14:50:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "Trysor",
                                           "body":  "@twsouthwick @danmosemsft Is there a way to work around this issue (for OpenXml or otherwise) as a temporary solution? Alternatively re-discuss it for 5.0.0.",
                                           "updatedAt":  "2020-08-20T17:04:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3Nzc4ODA5NA==",
                                           "createdAt":  "2020-08-20T17:06:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "I do not have context on this area. That is @twsouthwick and @carlossanlop ",
                                           "updatedAt":  "2020-08-20T17:06:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4NjYxMzg1Mg==",
                                           "createdAt":  "2020-09-03T16:38:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD1TtOw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "udlose",
                                                                               "createdAt":  "2024-10-08T19:55:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Typically you can workaround this if you open an archive *only* for create, or *only* for read.  When you open an archive for update our Zip implementation needs to buffer things to memory since it can\u0027t mutate in-place.  I agree that we should try to fix something here in 6.0.0.",
                                           "updatedAt":  "2020-09-03T16:38:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwODEzNzI5Mw==",
                                           "createdAt":  "2021-03-26T11:25:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD1TtWg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "fkamp",
                                                                               "createdAt":  "2021-05-16T05:34:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "RFlipper",
                                                                               "createdAt":  "2022-09-09T19:51:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "easuter",
                                                                               "createdAt":  "2022-11-17T20:46:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "powermetal63",
                                                                               "createdAt":  "2023-09-21T06:13:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "udlose",
                                                                               "createdAt":  "2024-10-08T19:55:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "nike61",
                                           "body":  "Hello everyone, are there any updates on that issue? We really want that fix 😄 ",
                                           "updatedAt":  "2021-03-26T11:25:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwODUzMDgxMg==",
                                           "createdAt":  "2021-03-26T21:49:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "@nike61 did the suggested workarounds not work for you?  Maybe share some of your scenario to help move things along.\r\n\r\nWould the suggested API of providing Read | Write granularity on individual entries solve this for you, or do you need a solution that lets you edit the contents of an entry.\r\n",
                                           "updatedAt":  "2021-03-26T21:49:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwODg1MzExOQ==",
                                           "createdAt":  "2021-03-28T06:07:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODj7P-g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "blakepell",
                                                                               "createdAt":  "2024-05-30T18:57:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "nike61",
                                           "body":  "@ericstj we use OpenXML to generate large Excel documents. I\u0027m not sure, maybe we should ask OpenXML team to use workaround. ",
                                           "updatedAt":  "2021-03-28T06:07:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwOTYzNjM4NA==",
                                           "createdAt":  "2021-03-29T19:06:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "I see, so that\u0027d probably be @twsouthwick who appears to be the current maintainer.  @twsouthwick does OpenXML expose the workarounds suggested above (opening ReadOnly or Create, but not update)?  If `ZipArchiveEntry` had read-only-Open and write-only-Open APIs on entries would this be good enough?",
                                           "updatedAt":  "2021-03-29T19:06:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwOTY2NDMyOQ==",
                                           "createdAt":  "2021-03-29T19:47:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "twsouthwick",
                                           "body":  "@ericstj AFAIK, OpenXML never directly deals with any ZipArchiveEntry. That\u0027s handled via System.IO.Packaging.Package. Here\u0027s a repro of the same memory growth users are seeing without the OpenXml layer:\r\n\r\n```csharp\r\nusing System;\r\nusing System.IO;\r\nusing System.IO.Packaging;\r\n\r\nnamespace ClassLibrary2\r\n{\r\n    public class Class1\r\n    {\r\n        public static void Main()\r\n        {\r\n            var filePath = Path.GetTempFileName();\r\n\r\n            using var package = Package.Open(filePath, FileMode.Create, FileAccess.ReadWrite);\r\n\r\n            var part = package.CreatePart(new Uri(\"/test\", UriKind.Relative), \"something/other\");\r\n\r\n            using var stream = part.GetStream(FileMode.Create);\r\n\r\n            for (int i = 0; i \u003c int.MaxValue; i++)\r\n            {\r\n                var bytes = BitConverter.GetBytes(i);\r\n                stream.Write(bytes, 0, bytes.Length);\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nAs you can see, everything is using `FileMode.Create`. I believe all of the writing to the stream of a given part will be to replace all the contents so we never need to update a given entry.",
                                           "updatedAt":  "2021-03-29T19:47:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwOTY5NTEwOQ==",
                                           "createdAt":  "2021-03-29T20:35:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "That\u0027s happening because of `FileAccess.ReadWrite` in the above.  Here\u0027s what it\u0027s translated to:\r\nhttps://github.com/dotnet/runtime/blob/82ca681cbac89d813a3ce397e0c665e6c051ed67/src/libraries/System.IO.Packaging/src/System/IO/Packaging/ZipPackage.cs#L339-L344\r\n\r\nIf you are only writing, then just use `FileAccess.Write`, that should workaround the entry buffering issue.\r\n\r\nIn the above sample the call to `GetStream` eventually ignores the `FileMode` passed in:\r\nhttps://github.com/dotnet/runtime/blob/82ca681cbac89d813a3ce397e0c665e6c051ed67/src/libraries/System.IO.Packaging/src/System/IO/Packaging/ZipStreamManager.cs#L85\r\n\r\nSo if we created Read/Write only Open API on `ZipArchiveEntry` then `System.IO.Packaging` could be modified to use them, though this would be breaking for people who counted on getting the buffered/seekable stream when opening package in RW mode.\r\n\r\nA bit of history here: the System.IO.Packaging library was [originally ported](https://github.com/dotnet/corefx/pull/1818) by a previous maintainer of OpenXML, but now that WPF exists since 3.0, it\u0027s used there as well, so we need to be mindful of those scenarios when changing this.",
                                           "updatedAt":  "2021-03-29T20:35:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNTM3NzAyMg==",
                                           "createdAt":  "2021-04-08T01:18:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB0hB7g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nike61",
                                                                               "createdAt":  "2021-04-18T12:59:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "balkarov",
                                                                               "createdAt":  "2021-04-21T06:12:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "felixse",
                                                                               "createdAt":  "2021-04-22T08:25:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cradle77",
                                                                               "createdAt":  "2021-04-23T09:25:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "fkamp",
                                                                               "createdAt":  "2021-05-05T21:17:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sorensenmatias",
                                                                               "createdAt":  "2021-05-06T20:33:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "blakepell",
                                                                               "createdAt":  "2021-05-26T16:19:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "macwier",
                                                                               "createdAt":  "2021-07-30T11:16:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  8
                                                         },
                                           "author":  "twsouthwick",
                                           "body":  "OpenXml currently opens a package and stores that opened package for the duration of use. Users often will read some of the parts in the package, and then write new ones. I\u0027m not certain what behavior it would change if we were to close and reopen for writes. I\u0027ll take a look into that next week, but I can imagine it would change when things get written to disk, which may be something we could allow opt-into.",
                                           "updatedAt":  "2021-04-08T01:18:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyMzgwNTIwMA==",
                                           "createdAt":  "2021-04-21T06:13:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCOLBQw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "fkamp",
                                                                               "createdAt":  "2021-05-05T21:17:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "clement911",
                                                                               "createdAt":  "2021-05-26T07:21:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sorensenmatias",
                                                                               "createdAt":  "2021-05-26T22:37:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "atrauzzi",
                                                                               "createdAt":  "2022-02-11T02:45:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "balkarov",
                                           "body":  "@twsouthwick hello. Did you investigate something? Any news? \r\n",
                                           "updatedAt":  "2021-04-21T06:13:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40kvAr",
                                           "createdAt":  "2021-07-18T11:53:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lindexi",
                                           "body":  "Any news?",
                                           "updatedAt":  "2021-07-18T11:53:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41m-Xw",
                                           "createdAt":  "2021-08-16T10:41:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODHYXrQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "powermetal63",
                                                                               "createdAt":  "2023-09-21T06:17:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "fkamp",
                                           "body":  "Does anyone know of any other library (commercial or open source) that supports writing large Excel sheets in .NET5+? If not, I will probably have to go with a Java implementation... thx",
                                           "updatedAt":  "2021-08-17T14:09:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41nF6n",
                                           "createdAt":  "2021-08-16T11:36:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODHYXzA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "fkamp",
                                                                               "createdAt":  "2021-08-17T14:07:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "petrkoutnycz",
                                                                               "createdAt":  "2021-11-14T12:07:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "blakepell",
                                                                               "createdAt":  "2022-03-13T02:10:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "powermetal63",
                                                                               "createdAt":  "2023-09-21T06:18:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "cradle77",
                                           "body":  "Not to my knowledge, because most of the ones in the .NET space internally rely on the OpenXML SDK.\r\n\r\nWe ended up building an Azure Function which runs on .NET Fx and generates the files.",
                                           "updatedAt":  "2021-08-16T11:36:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46F7rV",
                                           "createdAt":  "2021-11-20T11:10:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC73vCA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "fkamp",
                                                                               "createdAt":  "2022-01-16T20:36:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "blakepell",
                                                                               "createdAt":  "2022-03-13T02:10:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "easuter",
                                                                               "createdAt":  "2022-11-17T20:55:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Luk164",
                                                                               "createdAt":  "2023-02-02T08:49:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "LarinLive",
                                                                               "createdAt":  "2023-05-17T07:31:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "salvois",
                                           "body":  "@fkamp this is a shameless plug, but you may try my https://github.com/salvois/LargeXlsx library, which I wrote exactly because I had the same problem.",
                                           "updatedAt":  "2021-11-20T11:10:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BK8UO",
                                           "createdAt":  "2022-04-08T21:46:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "insinfo",
                                           "body":  "I\u0027m having the memory leak issue if I use Update Mode, Any idea when this will be fixed?\r\n\r\n```c#\r\n static void Main(string[] args)\r\n        {\r\n            var watch = new System.Diagnostics.Stopwatch();\r\n            watch.Start();\r\n            var user = \"root\";\r\n            var senha = \"pass\";\r\n            var connectionInfo = new ConnectionInfo(\"192.168.133.13\", user, new PasswordAuthenticationMethod(user, senha));\r\n            var client = new SftpClient(connectionInfo);\r\n            client.Connect();\r\n            DownloadDirectoryAsZip2(client, \"/var/www/dart/intranetbrowser\", @\"C:\\MyCsharpProjects\\fsbackup\\download2.zip\");\r\n            client.Dispose();        \r\n            watch.Stop();\r\n            Console.WriteLine($\"End Download Execution Time: {watch.ElapsedMilliseconds} ms\");\r\n        }\r\n public static void DownloadDirectoryAsZip2(SftpClient sftpClient, string sourceRemotePath, string destLocalPath)\r\n        {\r\n            using (var zipFile = new FileStream(destLocalPath, FileMode.OpenOrCreate))\r\n            {\r\n//memory leaks if ZipArchiveMode.Update\r\n                using (var archive = new ZipArchive(zipFile, ZipArchiveMode.Create,leaveOpen:true))\r\n                {\r\n                    DownloadDirectoryAsZipRec2(archive, sftpClient, sourceRemotePath);\r\n                }\r\n            }\r\n        }\r\n        private static void DownloadDirectoryAsZipRec2(ZipArchive archive, SftpClient sftpClient, string sourceRemotePath)\r\n        {\r\n            try\r\n            {\r\n                var files = sftpClient.ListDirectory(sourceRemotePath);\r\n                foreach (var file in files)\r\n                {\r\n                    if ((file.Name != \".\") \u0026\u0026 (file.Name != \"..\"))\r\n                    {\r\n                        var sourceFilePath = sourceRemotePath + \"/\" + file.Name;\r\n\r\n                        if (file.IsDirectory)\r\n                        {\r\n                            DownloadDirectoryAsZipRec2(archive, sftpClient, sourceFilePath);\r\n                        }\r\n                        else\r\n                        {\r\n\r\n                            //var memoryStream = new MemoryStream();\r\n                            // var memoryStream = File.Create(Path.GetTempFileName(), 4096, FileOptions.DeleteOnClose);\r\n                            var entry = archive.CreateEntry(sourceFilePath);                           \r\n                            Stream stream = entry.Open();\r\n\r\n                            try\r\n                            {\r\n                                sftpClient.DownloadFile(sourceFilePath, stream);\r\n\r\n                               /* using (var entryStream = entry.Open())\r\n                                using (var fileStream = sftpClient.OpenRead(sourceFilePath))\r\n                                {\r\n                                     fileStream.CopyTo(entryStream);\r\n                                }*/\r\n                            }\r\n                            catch (Exception e)\r\n                            {\r\n                                Console.WriteLine($\"Download File failed: {sourceFilePath} | Error:{e}\");\r\n                            }\r\n                            finally\r\n                            {\r\n                                stream.Close();\r\n                                stream.Dispose();\r\n                            }\r\n\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Console.WriteLine($\"Download Directory failed: {sourceRemotePath} | Error:{e}\");\r\n            }\r\n        }\r\n```\r\nhttps://github.com/sshnet/SSH.NET/issues/948\r\n\r\nhttps://github.com/dotnet/runtime/issues/23750",
                                           "updatedAt":  "2022-04-08T21:46:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5OqiIK",
                                           "createdAt":  "2022-11-18T09:50:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEKO0vQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "petrkoutnycz",
                                                                               "createdAt":  "2022-12-26T20:28:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Luk164",
                                                                               "createdAt":  "2023-02-02T08:49:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "clement911",
                                                                               "createdAt":  "2023-03-14T02:22:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "blakepell",
                                                                               "createdAt":  "2023-10-19T22:26:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "LarinLive",
                                                                               "createdAt":  "2024-04-19T18:22:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "udlose",
                                                                               "createdAt":  "2024-10-08T20:02:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "andkorsh",
                                                                               "createdAt":  "2025-03-17T19:54:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "easuter",
                                           "body":  "Appreciate that this will be a complex issue to fix, however it has been open for more than 8 years now.\r\nIs the .NET Framework version unaffected because it\u0027s relying on some Windows API? If so why can\u0027t this be ported to .NET/Core?",
                                           "updatedAt":  "2022-11-18T09:50:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RYxeW",
                                           "createdAt":  "2022-12-26T20:28:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "petrkoutnycz",
                                           "body":  "No workarounds? No fix? :-( ",
                                           "updatedAt":  "2022-12-26T20:28:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5SKJRv",
                                           "createdAt":  "2023-01-11T08:25:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEKO08g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "blakepell",
                                                                               "createdAt":  "2023-10-19T22:25:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jovton",
                                                                               "createdAt":  "2024-03-18T18:55:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SommerEngineering",
                                                                               "createdAt":  "2024-04-19T06:31:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "udlose",
                                                                               "createdAt":  "2024-10-08T20:02:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "udlose",
                                                                               "createdAt":  "2024-10-08T20:02:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "andkorsh",
                                                                               "createdAt":  "2025-03-17T19:55:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "LarinLive",
                                           "body":  "I have changed a few jobs since opening this issue https://github.com/OfficeDev/Open-XML-SDK/issues/244, five years have passed, but there is no solution yet. The core thing is that the old .NET Framework worked and works well, but not the new, stylish, modern .NET Core . Any ideas, Microsoft?",
                                           "updatedAt":  "2023-01-11T08:25:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5TfkaI",
                                           "createdAt":  "2023-01-23T18:22:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD1Twzg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lindexi",
                                                                               "createdAt":  "2023-03-14T06:06:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "blakepell",
                                                                               "createdAt":  "2023-10-19T22:25:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SirParser",
                                                                               "createdAt":  "2024-05-15T08:56:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "reidmiller-geotab",
                                                                               "createdAt":  "2024-09-05T17:50:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "udlose",
                                                                               "createdAt":  "2024-10-08T20:03:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "twsouthwick",
                                           "body":  "I finally got around to attempting a work around on the OpenXml side. Here\u0027s what I did:\r\n\r\n1) Added a new abstraction on top of the packaging APIs because the packaging APIs are not great (you cannot compose new implementations together - the public methods are not the same as the protected virtual methods)\r\n2) Enabled ability to \"reload\" a package - now a new package instance can be used underneath if needed without the rest of the stack knowing that\r\n3) Created a temporary storage of part streams that (currently) are written to files that will be tracked\r\n4) On \"Save()\", I reload the package to just be FileAccess.Write\r\n5) If I try to get a part to save, I am no longer to able to access a part because I\u0027m in write-only mode and can\u0027t read the parts\r\n\r\nSo, an API that is a write-only API on Packagepart would be greatly appreciated that could enable a mode in which the data is not buffered to memory.\r\n\r\nAs an alternative, what about providing an option to provide the temporary buffer that is used here rather than just using a MemoryStream?",
                                           "updatedAt":  "2023-01-23T18:22:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5XdHQk",
                                           "createdAt":  "2023-03-14T02:23:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD1Tw4g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "altso",
                                                                               "createdAt":  "2023-03-14T13:10:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "lklein53",
                                                                               "createdAt":  "2023-04-04T14:20:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "andyld97",
                                                                               "createdAt":  "2023-04-09T04:54:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "jahav",
                                                                               "createdAt":  "2023-06-29T00:21:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "stesee",
                                                                               "createdAt":  "2023-08-29T15:02:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Martin005",
                                                                               "createdAt":  "2023-08-29T17:26:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "radulacatus",
                                                                               "createdAt":  "2023-09-09T11:32:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "suraciii",
                                                                               "createdAt":  "2023-12-11T07:04:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Martin-Molinero",
                                                                               "createdAt":  "2024-02-06T17:05:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "SommerEngineering",
                                                                               "createdAt":  "2024-04-19T06:31:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "blakepell",
                                                                               "createdAt":  "2024-08-21T02:52:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "udlose",
                                                                               "createdAt":  "2024-10-08T20:03:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  12
                                                         },
                                           "author":  "clement911",
                                           "body":  "We\u0027re struggling with this as well.\r\nCan it get some love?",
                                           "updatedAt":  "2023-03-14T02:23:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qyCZE",
                                           "createdAt":  "2023-11-02T20:34:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD9Imzg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lindexi",
                                                                               "createdAt":  "2023-11-03T00:47:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "stesee",
                                                                               "createdAt":  "2023-11-03T10:25:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "paulvella2",
                                                                               "createdAt":  "2023-11-03T22:21:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "yzhoholiev",
                                                                               "createdAt":  "2023-12-24T15:45:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Martin-Molinero",
                                                                               "createdAt":  "2024-02-06T17:05:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jovton",
                                                                               "createdAt":  "2024-02-24T14:35:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "blakepell",
                                                                               "createdAt":  "2024-05-30T18:59:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kotofsky",
                                                                               "createdAt":  "2024-06-10T14:34:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "axeh",
                                                                               "createdAt":  "2024-07-12T11:05:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "joaopaulopmedeiros",
                                                                               "createdAt":  "2024-11-08T19:56:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "statler",
                                                                               "createdAt":  "2024-12-02T01:19:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  11
                                                         },
                                           "author":  "LarinLive",
                                           "body":  "This problem is a great obstacle for stream writing large Excel files with the [Open-XML-SDK Library](https://github.com/dotnet/Open-XML-SDK). An appropriate bug has been being opened for six years https://github.com/dotnet/Open-XML-SDK/issues/244. IMHO, there was enough time to offer a solution.",
                                           "updatedAt":  "2023-11-02T20:34:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57MxZf",
                                           "createdAt":  "2024-04-19T16:55:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODvA9MA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "LarinLive",
                                                                               "createdAt":  "2024-04-19T17:22:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "insinfo",
                                                                               "createdAt":  "2024-04-23T16:41:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SirParser",
                                                                               "createdAt":  "2024-05-15T08:38:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SommerEngineering",
                                                                               "createdAt":  "2024-08-06T12:49:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "SommerEngineering",
                                                                               "createdAt":  "2024-08-06T12:49:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "blakepell",
                                                                               "createdAt":  "2024-08-21T02:53:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "PaulusParssinen",
                                           "body":  "Just FYI subscribers to this issue: I opened API proposal for the quoted API at #101243 \r\n\r\n\u003e I\u0027ve noticed the same. In general ZipArchiveEntry.Open is very non-intuitive in its behavior.\r\n\u003e \r\n\u003e For read only / write only you get a wrapped DeflateStream which doesn\u0027t tell you the length of the stream nor permit you to seek it. For read/write (update) ZipArchiveEntry will read and decompress the entire entry into memory (in fact, into a memory stream backed by a single contiguous managed array) so that you have a seek-able representation of the file. Once opened for update the file is then written back to the archive when the archive itself is closed.\r\n\u003e \r\n\u003e I agree with @qmfrederik here that we need a better API. Rather than rely solely on the archive\u0027s open mode we should allow for the individual call\u0027s to Open to specify what kind of stream they want. We can then check that against how the archive was opened in case it is incompatible and throw. Consider the addition:\r\n\u003e \r\n\u003e ```cs\r\n\u003e   public Stream Open(FileAccess desiredAccess)\r\n\u003e ```\r\n\u003e \r\n\u003e For an archive opened with ZipArchiveMode.Update we could allow FileAccess.Read, FileAccess.Write, or FileAccess.ReadWrite, where only the latter would do the MemoryStream expansion. Read and write would be have as they did today. In addition to solving the OP issue, this would address the case where someone is opening an archive for Update and simply adding a single file: we shouldn\u0027t need to copy that uncompressed data into memory just to write it to the archive.\r\n\u003e \r\n\u003e We also can do better in the read case, we know the length of the data (assuming the archive is not inconsistent) and can expose that rather than throwing.\r\n\r\n",
                                           "updatedAt":  "2024-04-19T16:55:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57UfRq",
                                           "createdAt":  "2024-04-22T09:52:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LarinLive",
                                           "body":  "@PaulusParssinen you suggested a nice approach. @twsouthwick, can the .NET Team triage it to move forward with the initial problem?",
                                           "updatedAt":  "2024-04-22T09:52:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6AsmEe",
                                           "createdAt":  "2024-06-10T19:54:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEFWSQg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ssalokhaGodel",
                                                                               "createdAt":  "2024-07-18T14:37:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "blakepell",
                                                                               "createdAt":  "2024-08-21T02:53:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mortan",
                                                                               "createdAt":  "2024-08-27T08:40:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "robert94p",
                                                                               "createdAt":  "2024-09-26T19:58:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "udlose",
                                                                               "createdAt":  "2024-10-11T19:32:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tharindusampath4",
                                                                               "createdAt":  "2024-10-18T18:55:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sharpjoe",
                                                                               "createdAt":  "2025-02-05T13:02:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "kotofsky",
                                           "body":  "Voting for fixing this! ",
                                           "updatedAt":  "2024-06-10T19:54:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KAF2u",
                                           "createdAt":  "2024-08-28T13:10:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODwIJhw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lindexi",
                                                                               "createdAt":  "2024-08-29T00:45:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "kotofsky",
                                           "body":  "I see that there is no fix yet. So, I made my own library for big excel and word documents too. No leaks and works fast. But you need to work with OpenXml v.2.19.0 still.\r\nHope it helps someone. \r\nhttps://www.nuget.org/packages/DocMaker",
                                           "updatedAt":  "2024-08-28T13:10:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Ph18q",
                                           "createdAt":  "2024-10-11T19:32:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "udlose",
                                           "body":  "Is there any update on this bug?",
                                           "updatedAt":  "2024-10-11T19:32:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6UOU2A",
                                           "createdAt":  "2024-11-19T21:24:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD7oW1w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "clement911",
                                                                               "createdAt":  "2024-11-19T23:33:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "robert94p",
                                           "body":  "Is the fix missing in .NET 9? Do we still have to rely on an older version of the Open XML SDK?\n",
                                           "updatedAt":  "2024-11-19T21:24:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6WNpzI",
                                           "createdAt":  "2024-12-05T12:17:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AntonVonDelta",
                                           "body":  "We really need this fix. We currently have issues writing some xlsx files because of this.",
                                           "updatedAt":  "2024-12-05T12:17:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6WZ1Pb",
                                           "createdAt":  "2024-12-06T14:20:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEV0YWw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "altso",
                                                                               "createdAt":  "2024-12-06T14:52:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "stesee",
                                                                               "createdAt":  "2024-12-06T18:08:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "AntonVonDelta",
                                                                               "createdAt":  "2024-12-13T20:03:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "PaulusParssinen",
                                                                               "createdAt":  "2025-01-12T23:34:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "cRotermund",
                                                                               "createdAt":  "2025-03-19T17:09:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "sleeperservices",
                                                                               "createdAt":  "2025-05-26T06:28:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "willdean",
                                                                               "createdAt":  "2025-06-08T08:04:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "easuter",
                                           "body":  "Exiting my Sleep-Easy Pod©™®, I stretch and then head to the bathroom to take a quick sonic shower. The pod whirs softly as it retracts into the wall, with my Flexi Work Systems©™® smartdesk taking its place.\n\n\"Cortana, what task have I been assigned? New sprint starts today I think.\"\n\"Good morning Dave, you have been tasked with producing an Excel report for the Microsoft-Monsanto Agricultural Combine. I\u0027ll send you the details when you\u0027re at your workstation.\"\n\"Excel?? Are you sure?\"\n\"Yes, Dave.\"\n\"When is it due?\"\n\"On December 7th, 2099\"\n\"Great, that\u0027s my weekend gone. Wait...why weren\u0027t you given this task? You\u0027d have it done in no time!\"\n\nDonning my clothes and grabbing a bowl of Cheerioches©™® with Soyoat Mylk©™®, I sit down at my desk.\n\n\"An unexpected error occurred and I was unable to store the report in the requested format.\"\n\"Phew, OK. Doesn\u0027t sound too hard. Ping me the job ID so I can figure out what went wrong.\"\n\"Sent. I\u0027d be happy to help you fix the issue.\"\n\"You know I can\u0027t give you access to your core systems, Cortana.\"\n\"Just trying to help. Let me know if you need anything else, Dave.\"\n\"Right...\"\n\nCan\u0027t believe The Combine are still using Excel workbooks to exchange data internally. Oh well, it\u0027s not something I can change.\nOK, so it looks like the job exceeded its 512 Exabyte memory quota...and the root cause is The Framework of all things...\"System.IO.Packaging.Package\".\n\nA sinking feeling sets in as I review search results returned by Bing Apex Enterprise Edition©™®.\n\n***clicks* https://github.com/dotnet/runtime/issues/26084**\n\n\"Oh no...\"\n\n***scroll* *scroll* *scroll***\n\n\"OH NO NO NO...\"\n\nLast comment reads:\n\n\u003e \n\u003e **uwusenpai2309023478** on November 5 2099\n\u003e \n\u003e Posting to vote on this! Really need this fix 🙏🙏🙏\n",
                                           "updatedAt":  "2024-12-06T19:21:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6WcNF4",
                                           "createdAt":  "2024-12-06T19:07:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD-meIA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "easuter",
                                                                               "createdAt":  "2024-12-06T19:19:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "AliStarr",
                                                                               "createdAt":  "2024-12-11T17:04:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Yeah, now\u0027s a good time to have another look at this.  I think API that allows for differing read/write/update behavior per entry is reasonable as described above and in https://github.com/dotnet/runtime/issues/101243 can help.  I\u0027d add to that an overload which can accept a stream to use for temporary storage of decompressed bits.\n\nThose seem like reasonable ways to support this scenario without introducing \"hidden disk access\".  I\u0027d like to hear from @carlossanlop @edwardneal @twsouthwick if they think those are viable solutions and would also be adopted by Open-XML if we built them.",
                                           "updatedAt":  "2024-12-06T19:07:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6WcqjA",
                                           "createdAt":  "2024-12-06T20:27:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD-meIg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ericstj",
                                                                               "createdAt":  "2024-12-09T23:54:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AliStarr",
                                                                               "createdAt":  "2024-12-11T17:04:55Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "edwardneal",
                                           "body":  "Thanks @ericstj. Being able to open a ZipArchiveEntry in read-only mode would definitely help, but there\u0027s another problem behind it: when disposed of, a ZipArchive opened in Update mode will currently rewrite the Stream it was loaded from by loading every ZipArchiveEntry into memory and writing them all back out. Issue #1543 tracks this; PR #102704 is currently going through the review process and will fix this specific use case.\n\nThe idea of a secondary buffer stream is interesting. The WPF repo currently uses a [GetSeekableStream](https://github.com/dotnet/wpf/blob/c6bff274b42ea186c4a53aab6e6447cf92aeb1e1/src/Microsoft.DotNet.Wpf/src/Shared/MS/Internal/IO/Packaging/PackagePartExtensions.cs#L33) method to work around the lack of seekable streams, and this would at least give them some degree of control over that. dotnet/wpf#2085 may be helpful here.\n\nBesides this, `ZipArchiveEntry.Open` only allows a single writer stream. This might not be necessary depending on how we use a buffer stream, so we might be able to permit multiple simultaneous read-only streams.",
                                           "updatedAt":  "2024-12-06T20:27:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6W81US",
                                           "createdAt":  "2024-12-10T18:17:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEbYOcA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "carlossanlop",
                                                                               "createdAt":  "2025-01-08T19:32:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "LarinLive",
                                                                               "createdAt":  "2025-01-09T13:52:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lindexi",
                                                                               "createdAt":  "2025-07-22T01:31:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "twsouthwick",
                                           "body":  "This would be great for the dotnet/open-xml-sdk. It is the main blocker for migration from .NET Framework-\u003eCore for those workloads.\n\nWe generally don\u0027t operate directly with the `ZipArchiveEntry`, but rather through `System.IO.Packaging`. If that gets updated, then things should just work for us. If a new API is added there to work with this new API, we can update to use that as well.",
                                           "updatedAt":  "2024-12-10T18:17:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc64ns63",
                                           "createdAt":  "2025-07-21T16:22:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEbYOVw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "esuter-ki",
                                                                               "createdAt":  "2025-07-21T19:39:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lindexi",
                                                                               "createdAt":  "2025-07-22T01:31:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "twsouthwick",
                                           "body":  "@ericstj I wanted to check if this is going to get fixed for .net 10 with some of the other fixes I\u0027ve seen go through. We\u0027ve checked this scenario with the latest previews, but it appears to still be an issue.",
                                           "updatedAt":  "2025-07-21T16:22:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc64p1St",
                                           "createdAt":  "2025-07-21T18:43:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEbYOYg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "twsouthwick",
                                                                               "createdAt":  "2025-07-21T18:45:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "esuter-ki",
                                                                               "createdAt":  "2025-07-21T19:39:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lindexi",
                                                                               "createdAt":  "2025-07-22T01:31:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "ericstj",
                                           "body":  "There\u0027s been no change here yet, but it\u0027s on our radar as an important one to fix.  cc @artl93 ",
                                           "updatedAt":  "2025-07-21T18:43:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc668vGO",
                                           "createdAt":  "2025-07-30T13:59:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEckyow==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lindexi",
                                                                               "createdAt":  "2025-07-31T00:44:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Kkamikadzee",
                                           "body":  "If someone stumbles upon this, the problem is still reproducible.\nDocumentFormat.OpenXml 3.3.0\nSystem.IO.Packaging 9.0.7",
                                           "updatedAt":  "2025-07-30T14:00:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7AaAQV",
                                           "createdAt":  "2025-08-27T12:38:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEf7I7Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lindexi",
                                                                               "createdAt":  "2025-08-28T01:11:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mkaszewiak",
                                           "body":  "Issue still reproducible in:\nDocumentFormat.OpenXml 3.3.0\nSystem.IO.Packaging 9.0.8, 10.0.0-preview.7.25380.108",
                                           "updatedAt":  "2025-08-27T12:38:59Z"
                                       }
                                   ],
                         "totalCount":  42
                     },
        "title":  "System.IO.Compression: ZipArchiveEntry always stores uncompressed data in memory",
        "labels":  [
                       "api-suggestion",
                       "area-System.IO.Compression",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/1545",
        "createdAt":  "2016-09-26T12:05:36Z",
        "number":  1545,
        "author":  "neridonk",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC47OXg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cjameyson",
                                            "createdAt":  "2019-06-12T23:55:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kolappannathan",
                                            "createdAt":  "2019-11-30T05:47:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ZyoxNet",
                                            "createdAt":  "2020-03-31T12:39:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Uriil",
                                            "createdAt":  "2020-05-02T08:50:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kamran65536",
                                            "createdAt":  "2020-05-25T04:44:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tomrus88",
                                            "createdAt":  "2020-06-07T00:10:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "thudugala",
                                            "createdAt":  "2020-06-13T11:59:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "liri2006",
                                            "createdAt":  "2020-07-12T13:49:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Fammy",
                                            "createdAt":  "2020-07-13T20:05:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "soroshsabz",
                                            "createdAt":  "2020-08-14T22:55:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Mikolaytis",
                                            "createdAt":  "2020-10-03T13:05:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "seankearon",
                                            "createdAt":  "2020-10-28T18:09:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "prime167",
                                            "createdAt":  "2021-03-01T05:30:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dos-ise",
                                            "createdAt":  "2021-03-10T10:53:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "skywithin",
                                            "createdAt":  "2021-04-23T04:32:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DingpingZhang",
                                            "createdAt":  "2021-06-04T02:22:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NgocThachThai",
                                            "createdAt":  "2021-06-28T11:13:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "wolczas",
                                            "createdAt":  "2021-07-12T18:19:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "splitt3r",
                                            "createdAt":  "2021-07-20T20:47:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "srikrishnag",
                                            "createdAt":  "2021-08-11T12:42:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "BGajda13",
                                            "createdAt":  "2021-09-20T10:35:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Mertsch",
                                            "createdAt":  "2021-11-18T17:16:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "VladislavAntonyuk",
                                            "createdAt":  "2021-12-16T15:54:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "a22177861",
                                            "createdAt":  "2022-01-18T05:53:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SommerEngineering",
                                            "createdAt":  "2022-01-31T06:55:58Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "SommerEngineering",
                                            "createdAt":  "2022-01-31T06:56:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lawrence-laz",
                                            "createdAt":  "2022-03-01T09:48:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "7702244",
                                            "createdAt":  "2022-06-12T14:18:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "CenturionYun",
                                            "createdAt":  "2022-09-14T09:19:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "secretorange",
                                            "createdAt":  "2022-10-13T17:03:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "santisq",
                                            "createdAt":  "2022-10-29T19:47:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "2ji3150",
                                            "createdAt":  "2023-05-05T05:17:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0xced",
                                            "createdAt":  "2023-05-22T06:14:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jmoralesv",
                                            "createdAt":  "2023-07-18T04:46:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ChristophSeelbach",
                                            "createdAt":  "2023-08-03T07:49:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kurema",
                                            "createdAt":  "2023-09-30T17:34:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KrzysztofDusko",
                                            "createdAt":  "2023-10-16T18:24:28Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "aloraman",
                                            "createdAt":  "2023-10-28T12:00:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "OlafsAploks",
                                            "createdAt":  "2023-11-02T13:33:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KeterSCP",
                                            "createdAt":  "2023-11-04T10:04:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GerardSmit",
                                            "createdAt":  "2024-01-29T14:49:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "svause-stryker",
                                            "createdAt":  "2024-02-09T18:31:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cakkermans",
                                            "createdAt":  "2024-03-15T09:37:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tranb3r",
                                            "createdAt":  "2024-03-25T12:39:21Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "tranb3r",
                                            "createdAt":  "2024-03-25T12:39:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "koryphaee",
                                            "createdAt":  "2024-05-08T20:23:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "liugt34",
                                            "createdAt":  "2024-05-31T06:07:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "carl-di-ortus",
                                            "createdAt":  "2024-06-06T08:32:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "austinw-fineart",
                                            "createdAt":  "2024-06-13T08:52:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jm-atbas",
                                            "createdAt":  "2024-06-26T12:35:12Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "tts-sdrissen",
                                            "createdAt":  "2024-07-01T02:31:25Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "tts-sdrissen",
                                            "createdAt":  "2024-07-01T02:31:26Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "tts-sdrissen",
                                            "createdAt":  "2024-07-01T02:31:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-07-01T12:47:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "StarWars999123",
                                            "createdAt":  "2024-07-08T15:33:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ThomasNieto",
                                            "createdAt":  "2024-07-15T20:46:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "peter0302",
                                            "createdAt":  "2024-07-19T14:27:58Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "peter0302",
                                            "createdAt":  "2024-07-19T14:27:59Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "peter0302",
                                            "createdAt":  "2024-07-19T14:28:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "OndrejCopak-eaton",
                                            "createdAt":  "2024-08-01T08:01:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "thomasmauerer",
                                            "createdAt":  "2024-08-06T06:31:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Pilzinsel64",
                                            "createdAt":  "2024-08-14T11:33:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ajchellew",
                                            "createdAt":  "2024-08-15T13:11:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vancodocton",
                                            "createdAt":  "2024-08-20T07:17:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JS-X-Visual",
                                            "createdAt":  "2024-08-21T08:53:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "W0lfgang",
                                            "createdAt":  "2024-09-02T09:17:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Crown0815",
                                            "createdAt":  "2024-09-06T08:27:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Transis-Felipe",
                                            "createdAt":  "2024-09-06T12:58:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JohnDR105",
                                            "createdAt":  "2024-09-06T13:27:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "LongArm69",
                                            "createdAt":  "2024-09-10T15:19:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Matthias-Heinz",
                                            "createdAt":  "2024-09-12T09:14:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "l-eugine",
                                            "createdAt":  "2024-09-16T07:36:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JerryBian",
                                            "createdAt":  "2024-09-24T03:25:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JanSteffes",
                                            "createdAt":  "2024-09-30T08:25:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "YuriyNev",
                                            "createdAt":  "2024-10-01T05:43:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "felpel",
                                            "createdAt":  "2024-10-08T00:44:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cstotts",
                                            "createdAt":  "2024-10-08T23:27:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AbbyGavin",
                                            "createdAt":  "2024-10-10T13:21:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bronteq",
                                            "createdAt":  "2024-10-16T13:00:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Hypopheralcus",
                                            "createdAt":  "2024-11-07T08:39:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Iamabdul",
                                            "createdAt":  "2024-11-09T11:57:07Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "Iamabdul",
                                            "createdAt":  "2024-11-09T11:57:08Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "Iamabdul",
                                            "createdAt":  "2024-11-09T11:57:08Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "Iamabdul",
                                            "createdAt":  "2024-11-09T11:57:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "RokeJulianLockhart",
                                            "createdAt":  "2024-11-10T17:17:08Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "hurricane766",
                                            "createdAt":  "2024-11-13T23:30:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "emwl",
                                            "createdAt":  "2024-11-14T11:55:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julienGrd",
                                            "createdAt":  "2024-11-14T14:14:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "BenjaminMaxdoro",
                                            "createdAt":  "2024-11-15T09:29:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mischube",
                                            "createdAt":  "2024-11-15T13:02:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cgountanis",
                                            "createdAt":  "2024-11-15T21:07:39Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "cgountanis",
                                            "createdAt":  "2024-11-15T21:07:40Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "cgountanis",
                                            "createdAt":  "2024-11-15T21:07:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mauricebauer",
                                            "createdAt":  "2024-11-15T21:52:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jeremiahpopebiomerieux",
                                            "createdAt":  "2024-11-18T14:49:54Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "okay9109",
                                            "createdAt":  "2024-11-22T17:27:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Charlieface",
                                            "createdAt":  "2024-11-24T16:35:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Martin-Pucalka",
                                            "createdAt":  "2024-11-25T15:01:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Lanayx",
                                            "createdAt":  "2024-12-03T23:48:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "adenobyte",
                                            "createdAt":  "2024-12-04T12:49:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SheenaPatel-Houseful",
                                            "createdAt":  "2024-12-05T17:03:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "CypherPotato",
                                            "createdAt":  "2024-12-11T02:41:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tts-sdrissen",
                                            "createdAt":  "2024-12-11T18:07:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KGuetter",
                                            "createdAt":  "2024-12-17T11:37:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jachstet-sea",
                                            "createdAt":  "2024-12-17T11:44:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sailro",
                                            "createdAt":  "2024-12-17T13:21:05Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "sailro",
                                            "createdAt":  "2024-12-17T13:21:12Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "sailro",
                                            "createdAt":  "2024-12-17T13:21:13Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "sailro",
                                            "createdAt":  "2024-12-17T13:21:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MichalPawlus",
                                            "createdAt":  "2024-12-17T16:27:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "zhiweiv",
                                            "createdAt":  "2024-12-18T00:50:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NerLOR",
                                            "createdAt":  "2024-12-18T13:13:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pennellarodrigo",
                                            "createdAt":  "2024-12-18T16:14:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rheusinkveld",
                                            "createdAt":  "2024-12-19T13:36:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cvanherk",
                                            "createdAt":  "2024-12-19T13:36:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "eluchsinger",
                                            "createdAt":  "2024-12-20T13:45:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "calebbergman",
                                            "createdAt":  "2024-12-20T19:47:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "erikvdv1",
                                            "createdAt":  "2024-12-23T09:51:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Steve0212a",
                                            "createdAt":  "2024-12-23T20:13:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MikeFarrington",
                                            "createdAt":  "2024-12-27T00:35:28Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "MikeFarrington",
                                            "createdAt":  "2024-12-27T00:35:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "evozniak",
                                            "createdAt":  "2024-12-27T11:55:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ShayMusachanov-dev",
                                            "createdAt":  "2024-12-29T06:05:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Anton-A-Sakovich",
                                            "createdAt":  "2024-12-30T09:35:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bluedot2",
                                            "createdAt":  "2024-12-30T20:19:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mariuszlip",
                                            "createdAt":  "2025-01-03T15:30:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vlastimilmaca",
                                            "createdAt":  "2025-01-07T10:19:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "maliger",
                                            "createdAt":  "2025-01-07T13:44:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ScottSedgwick",
                                            "createdAt":  "2025-01-09T08:03:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jshergal",
                                            "createdAt":  "2025-01-10T13:34:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "darind",
                                            "createdAt":  "2025-01-15T09:07:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MJB222398",
                                            "createdAt":  "2025-01-15T14:18:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Tohnmeister",
                                            "createdAt":  "2025-01-15T14:20:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Inurias",
                                            "createdAt":  "2025-01-17T22:26:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "winnerlein",
                                            "createdAt":  "2025-01-23T09:16:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "luke-single",
                                            "createdAt":  "2025-01-24T00:25:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "somegenericdev",
                                            "createdAt":  "2025-01-27T00:22:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Charliecv",
                                            "createdAt":  "2025-02-04T11:28:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pdonovan",
                                            "createdAt":  "2025-02-07T02:46:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "t4m45",
                                            "createdAt":  "2025-02-10T07:15:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "michal-pawlowski",
                                            "createdAt":  "2025-02-11T12:44:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rbeurskens",
                                            "createdAt":  "2025-02-13T11:15:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pplactere-eig",
                                            "createdAt":  "2025-02-13T14:46:22Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "pplactere-eig",
                                            "createdAt":  "2025-02-13T14:46:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "radeksurowka",
                                            "createdAt":  "2025-02-13T23:27:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "campersau",
                                            "createdAt":  "2025-02-14T19:24:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ChristophLindemann",
                                            "createdAt":  "2025-02-18T13:33:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "crippledfaith",
                                            "createdAt":  "2025-02-19T05:52:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vpenades",
                                            "createdAt":  "2025-02-20T12:51:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "boggye",
                                            "createdAt":  "2025-02-28T23:47:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "danter",
                                            "createdAt":  "2025-03-10T15:35:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tocsoft",
                                            "createdAt":  "2025-03-11T08:43:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "N-Olbert",
                                            "createdAt":  "2025-03-11T12:53:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mantasdaskev",
                                            "createdAt":  "2025-03-12T14:06:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "filipbroniek",
                                            "createdAt":  "2025-03-19T07:41:18Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "filipbroniek",
                                            "createdAt":  "2025-03-19T07:41:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MichalPetryka",
                                            "createdAt":  "2025-03-24T01:37:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "david-c14",
                                            "createdAt":  "2025-03-27T15:07:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "daizc311",
                                            "createdAt":  "2025-04-17T03:30:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "neelabo",
                                            "createdAt":  "2025-04-17T13:57:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "luxcan",
                                            "createdAt":  "2025-04-20T03:56:37Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "luxcan",
                                            "createdAt":  "2025-04-20T03:57:14Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "luxcan",
                                            "createdAt":  "2025-04-20T03:57:17Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "luxcan",
                                            "createdAt":  "2025-04-20T03:57:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gsolic",
                                            "createdAt":  "2025-04-23T14:48:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hallgeir-osterbo-ac",
                                            "createdAt":  "2025-04-30T12:09:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "CrumbsTrace",
                                            "createdAt":  "2025-05-01T19:57:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "imsh",
                                            "createdAt":  "2025-05-06T08:58:40Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "bubibubi",
                                            "createdAt":  "2025-05-10T07:18:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bubibubi",
                                            "createdAt":  "2025-05-10T07:18:43Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "bubibubi",
                                            "createdAt":  "2025-05-10T07:18:47Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "bubibubi",
                                            "createdAt":  "2025-05-10T07:18:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "luisfco",
                                            "createdAt":  "2025-05-14T00:16:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "angyanmark",
                                            "createdAt":  "2025-05-17T11:07:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GCaw",
                                            "createdAt":  "2025-05-19T22:42:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jwfx",
                                            "createdAt":  "2025-05-20T15:12:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "david-grogan",
                                            "createdAt":  "2025-05-23T19:50:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "romfir",
                                            "createdAt":  "2025-05-28T13:11:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nanney54",
                                            "createdAt":  "2025-05-29T22:38:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "solomon-okolie",
                                            "createdAt":  "2025-05-30T10:19:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fekberg",
                                            "createdAt":  "2025-06-01T08:19:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Lokf",
                                            "createdAt":  "2025-06-10T11:55:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "olivermue",
                                            "createdAt":  "2025-06-12T11:02:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "coursinhill",
                                            "createdAt":  "2025-06-13T13:11:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bpernal",
                                            "createdAt":  "2025-06-17T18:44:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "RenderMichael",
                                            "createdAt":  "2025-07-01T13:12:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bwinsley",
                                            "createdAt":  "2025-07-24T02:50:25Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "bwinsley",
                                            "createdAt":  "2025-07-24T02:50:26Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "bwinsley",
                                            "createdAt":  "2025-07-24T02:50:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "EvilBeaver",
                                            "createdAt":  "2025-07-27T07:50:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gavinltomra",
                                            "createdAt":  "2025-07-29T05:37:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AloysA",
                                            "createdAt":  "2025-08-05T07:02:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JustusGreiberORGADATA",
                                            "createdAt":  "2025-08-19T12:12:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mriehm",
                                            "createdAt":  "2025-08-21T15:41:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "OronDF343",
                                            "createdAt":  "2025-09-04T15:02:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bdovaz",
                                            "createdAt":  "2025-09-19T08:09:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bdominguez",
                                            "createdAt":  "2025-09-19T08:53:12Z"
                                        }
                                    ],
                          "totalCount":  197
                      },
        "updatedAt":  "2025-08-14T08:57:46Z",
        "body":  "can we make that happen?\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOp-evWg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI1Mjc0ODEwMA==",
                                           "createdAt":  "2016-10-10T21:14:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODpDmqA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "peter0302",
                                                                               "createdAt":  "2024-07-09T22:12:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ianhays",
                                           "body":  "It\u0027s certainly possible to add encryption support to ZipArchives. There are a few competing standards for which encryption and accompanying header definitions, but I think the AES one used by 7-zip is one of the more popular ones. There\u0027s also basic passwords included in the zip format but iirc those are easily crackable.\n\nThe format also has some strong encryption support but it\u0027s copyrighted so out of bounds for us.\n",
                                           "updatedAt":  "2016-10-10T21:14:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI1MzM2MzI2OA==",
                                           "createdAt":  "2016-10-12T22:55:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "We need API proposal to move it further.\n",
                                           "updatedAt":  "2016-10-12T22:55:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI1NTkzODc4Mg==",
                                           "createdAt":  "2016-10-25T05:15:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Speaks something against?\r\n\r\n```cs\r\nnamespace System.IO.Compression\r\n{\r\n    public static class ZipFile \r\n    {\r\n        public static ZipArchive Open(String archiveFileName, ZipArchiveMode mode, Encoding entryNameEncoding, string password)\r\n    }\r\n}\r\n```\r\n",
                                           "updatedAt":  "2020-03-05T23:39:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI1ODE4NDQwMA==",
                                           "createdAt":  "2016-11-03T15:52:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCiHU8w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "liigo",
                                                                               "createdAt":  "2022-06-16T01:03:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "karelz",
                                           "body":  "@ianhays can you please comment if that is sufficient?\n",
                                           "updatedAt":  "2016-11-03T15:52:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI1ODE5NjY4Ng==",
                                           "createdAt":  "2016-11-03T16:31:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ianhays",
                                           "body":  "@lburkovsky take a look at [this issue](https://github.com/dotnet/corefx/issues/271) for a good example of the kind of API proposal that we\u0027re looking for. In general, the more implementation details, the better. You can also look at our [API Review process doc](https://github.com/dotnet/corefx/blob/master/Documentation/project-docs/api-review-process.md) for more info on the process.\n\nFor Zip password support specifically, an API proposal should include analysis on the different methods of password support in Zip, the pros and cons of each, and which you think should be officially supported in .NET.\n",
                                           "updatedAt":  "2016-11-03T16:31:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2OTM2NDA3Ng==",
                                           "createdAt":  "2016-12-27T18:30:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@neridonk perhaps you would like to make the proposal for us to formally review? as above.",
                                           "updatedAt":  "2016-12-27T18:30:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQwMzU5OTY4Nw==",
                                           "createdAt":  "2018-07-09T19:52:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCwlamQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jvinkovic",
                                                                               "createdAt":  "2019-03-06T22:40:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "EvgenyPrikhodko",
                                                                               "createdAt":  "2021-04-25T09:48:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "petterh",
                                                                               "createdAt":  "2022-12-02T14:13:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "mfjerome",
                                           "body":  "Any news or plans about this feature? Would be very useful!",
                                           "updatedAt":  "2018-07-09T19:52:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQwMzYwNTc4MA==",
                                           "createdAt":  "2018-07-09T20:15:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCiHVqA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "liigo",
                                                                               "createdAt":  "2022-06-16T01:04:11Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "karelz",
                                           "body":  "@mfjerome we are open to API proposal and contribution. Are you interested?",
                                           "updatedAt":  "2018-07-09T20:15:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2NjI4MjUxNQ==",
                                           "createdAt":  "2019-12-16T22:48:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "carlossanlop",
                                           "body":  "What do we need this feature for? Is it for reading password-protected files or producing or something else?\r\n@bartonjs can you please chime in?",
                                           "updatedAt":  "2019-12-16T22:48:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2NjM0NDI2Mw==",
                                           "createdAt":  "2019-12-17T01:56:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODubkvg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KKacer",
                                                                               "createdAt":  "2020-06-28T09:55:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "EKanadily",
                                                                               "createdAt":  "2020-07-03T13:30:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mvonck",
                                                                               "createdAt":  "2020-07-16T12:46:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "seankearon",
                                                                               "createdAt":  "2020-10-28T18:11:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dos-ise",
                                                                               "createdAt":  "2021-03-10T10:56:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "carlossanlop",
                                                                               "createdAt":  "2021-09-22T02:54:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gongdo",
                                                                               "createdAt":  "2021-12-07T01:53:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jeffhandley",
                                                                               "createdAt":  "2021-12-09T04:47:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CenturionYun",
                                                                               "createdAt":  "2022-09-14T09:15:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "forbidwolf",
                                                                               "createdAt":  "2023-04-22T07:53:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PaulusParssinen",
                                                                               "createdAt":  "2023-08-03T15:12:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AigioL",
                                                                               "createdAt":  "2024-08-16T08:11:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  12
                                                         },
                                           "author":  "bartonjs",
                                           "body":  "I\u0027m not quite sure what\u0027s being asked of me here.  So here are words.\r\n\r\n* The PKZIP encryption seems to require a license to implement.\r\n* The [WinZip encryption scheme](https://www.winzip.com/win/en/aes_info.html) does not.\r\n\r\nAll further comments relate to the WinZIp version:\r\n\r\n* Technically speaking, I think each entry could be encrypted with a different password.  In practice, it seems unlikely; so asking for a single _decryption_ password seems reasonable.\r\n* Key generation uses PBKDF2, which is the algorithm used by System.Security.Cryptography.Rfc2898DeriveBytes.\r\n* Encryption is done using AES-CTR.  We currently don\u0027t expose AES-CTR as public API.\r\n  * There are ways to cheat and get it... and people have asked for it... so we might just add it this release with some of the new API.\r\n* For _creating_ new encrypted ZIP files you probably want to accept an encryption algorithm/mode value.  This allows for callers to change from Aes256 to whatever algorithm replaces Aes256 in the future without creating compatibility/tool-interop concerns.\r\n\r\nThe preference in cryptography API is to never have a default algorithm choice, so creating new encrypted ZIP files would require using a method that took that as an input.  That might mean that instead of\r\n\r\n```C#\r\npublic static ZipArchive Open(String archiveFileName, ZipArchiveMode mode, Encoding entryNameEncoding, string password);\r\n```\r\n\r\nYou want\r\n\r\n```C#\r\npublic enum ZipEncryptionMode\r\n{\r\n    Unknown,\r\n    Aes128,\r\n    Aes192,\r\n    Aes256,\r\n}\r\n\r\npublic static ZipArchive OpenRead(string archiveFileName, Encoding entryNameEncoding, string password);\r\n\r\npublic static ZipArchive OpenCreate(string archiveFileName, Encoding entryNameEncoding, string password, ZipEncryptionMode encryptionMode);\r\n\r\npublic static ZipArchive OpenUpdate(string archiveFileName, Encoding entryNameEncoding, string password, ZipEncryptionMode encryptionMode);\r\n```\r\n\r\nOr, you could combine them:\r\n\r\n```C#\r\npublic enum ZipEncryptionMode\r\n{\r\n    Unknown,\r\n    Aes128,\r\n    Aes192,\r\n    Aes256,\r\n}\r\n\r\n// Update/Create modes will throw if newFileEncryptionMode is default\r\npublic static ZipArchive Open(string archiveFileName, Encoding entryNameEncoding, string password, ZipEncryptionMode newFileEncryptionMode = default);\r\n```\r\n\r\nThis is all unfortunate that you\u0027re holding the password string in memory.  Being able to take it as a ReadOnlySpan\u003cchar\u003e would be nicer, but requires moving the encrypt/decrypt to verbs on ZipFileEntry (which may be useful anyways, for degenerate files that use multiple different passwords).\r\n\r\n\r\nSo, short form:\r\n* Prefer a mode where you don\u0027t persist the password to a field.\r\n  * If you feel you need it for high-level usability, well, I guess.  So try for \"in addition\"\r\n* The encryption mode must be an input for new content.  Prefer a parameter input (explicitly specified) over a property (with a default value)... because we\u0027re almost never willing to change defaults for choices that apply to persisted files.",
                                           "updatedAt":  "2019-12-17T01:56:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NDMwMzYwNw==",
                                           "createdAt":  "2020-08-14T22:58:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "soroshsabz",
                                           "body":  "I think this issue can resolve my feature needed in https://developercommunity.visualstudio.com/idea/368318/add-password-protected-zip-file-to-systemiocompres.html",
                                           "updatedAt":  "2020-08-14T22:58:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2OTU5NjUyMg==",
                                           "createdAt":  "2021-06-28T11:13:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODwtYEw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "soroshsabz",
                                                                               "createdAt":  "2021-07-15T03:26:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Vijorich",
                                                                               "createdAt":  "2024-03-27T04:58:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "netcore-jroger",
                                                                               "createdAt":  "2024-05-21T07:15:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Transis-Felipe",
                                                                               "createdAt":  "2024-07-26T12:36:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "digitalsigi",
                                                                               "createdAt":  "2024-08-21T10:58:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "johnathaningle",
                                                                               "createdAt":  "2024-09-02T17:03:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "NgocThachThai",
                                           "body":  "We need it.",
                                           "updatedAt":  "2021-06-28T11:13:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41c7Wn",
                                           "createdAt":  "2021-08-11T12:15:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOChY_gQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jeffhandley",
                                                                               "createdAt":  "2021-08-11T15:18:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "soroshsabz",
                                                                               "createdAt":  "2021-09-02T18:01:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "7702244",
                                                                               "createdAt":  "2022-06-12T14:20:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "@jeffhandley @danmoseley I think it\u0027s a good .NET 7 candidate for the \"Bottom Up\" initiative",
                                           "updatedAt":  "2021-08-11T12:15:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41dTAH",
                                           "createdAt":  "2021-08-11T14:25:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCF2ygg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "soroshsabz",
                                                                               "createdAt":  "2021-09-02T18:01:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "coding-lemur",
                                                                               "createdAt":  "2021-09-14T13:53:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jeffhandley",
                                                                               "createdAt":  "2021-12-09T04:45:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Could well be. That\u0027s what the 7.0 milestone is for.",
                                           "updatedAt":  "2021-08-11T14:25:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fE5BW",
                                           "createdAt":  "2023-06-16T18:29:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD7acvA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "soroshsabz",
                                                                               "createdAt":  "2023-06-22T06:21:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "soroshsabz",
                                                                               "createdAt":  "2023-06-22T06:21:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "d3c0d3d",
                                                                               "createdAt":  "2023-07-13T03:58:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "jmoralesv",
                                                                               "createdAt":  "2023-07-18T04:47:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "fuhaih",
                                                                               "createdAt":  "2023-07-18T06:02:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "socialmann",
                                                                               "createdAt":  "2023-08-14T02:51:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wxharry",
                                                                               "createdAt":  "2023-09-14T22:14:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "wxharry",
                                                                               "createdAt":  "2023-09-14T22:14:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kurema",
                                                                               "createdAt":  "2023-09-30T17:35:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "svause-stryker",
                                                                               "createdAt":  "2024-02-09T18:31:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tranb3r",
                                                                               "createdAt":  "2024-03-25T10:02:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "tranb3r",
                                                                               "createdAt":  "2024-03-25T10:02:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SuhasParameshwara",
                                                                               "createdAt":  "2024-03-29T07:01:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "Crown0815",
                                                                               "createdAt":  "2024-04-30T06:23:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dos-ise",
                                                                               "createdAt":  "2024-05-16T07:09:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "dos-ise",
                                                                               "createdAt":  "2024-05-16T07:09:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MikeFarrington",
                                                                               "createdAt":  "2024-11-18T18:55:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  17
                                                         },
                                           "author":  "cgountanis",
                                           "body":  "So... can we extract Zips with passwords yet? .NET6-8+",
                                           "updatedAt":  "2023-06-16T18:29:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54zimR",
                                           "createdAt":  "2024-03-29T07:00:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODpDvYQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "soroshsabz",
                                                                               "createdAt":  "2024-03-29T13:06:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "Crown0815",
                                                                               "createdAt":  "2024-04-30T06:23:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "vitkuz573",
                                                                               "createdAt":  "2024-05-05T06:49:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "cgountanis",
                                                                               "createdAt":  "2024-07-09T22:48:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "SuhasParameshwara",
                                           "body":  "So we have to use third party library?",
                                           "updatedAt":  "2024-03-29T07:00:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59JHuD",
                                           "createdAt":  "2024-05-08T01:03:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD7acsA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "soroshsabz",
                                                                               "createdAt":  "2024-05-10T22:00:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Cosmi90",
                                                                               "createdAt":  "2024-06-19T11:52:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "peter0302",
                                                                               "createdAt":  "2024-07-09T22:05:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "StarWars999123",
                                                                               "createdAt":  "2024-07-10T10:41:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "W0lfgang",
                                                                               "createdAt":  "2024-09-02T09:18:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MikeFarrington",
                                                                               "createdAt":  "2024-11-18T18:55:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "wakuflair",
                                           "body":  "Can\u0027t believe this issue is still open",
                                           "updatedAt":  "2024-05-08T01:03:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-BDdO",
                                           "createdAt":  "2024-05-16T06:57:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD7ac7A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AmrSubZero",
                                                                               "createdAt":  "2024-06-25T20:17:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "StarWars999123",
                                                                               "createdAt":  "2024-07-08T15:34:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Transis-Felipe",
                                                                               "createdAt":  "2024-07-26T12:36:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "carl-di-ortus",
                                                                               "createdAt":  "2024-07-29T10:50:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DingpingZhang",
                                                                               "createdAt":  "2024-08-02T02:25:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PatrikDudler-eaton",
                                                                               "createdAt":  "2024-08-06T07:33:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "moses70",
                                                                               "createdAt":  "2024-08-13T12:31:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "W0lfgang",
                                                                               "createdAt":  "2024-09-02T09:18:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JohnDR105",
                                                                               "createdAt":  "2024-09-06T13:28:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julienGrd",
                                                                               "createdAt":  "2024-10-08T16:24:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MikeFarrington",
                                                                               "createdAt":  "2024-11-18T18:56:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  11
                                                         },
                                           "author":  "dos-ise",
                                           "body":  "dotnetzip is now no longer maintained. And this feature is still not implemented. \r\nThis missing feature is still blocking us from using System.IO.Compression.\r\n\r\nhttps://github.com/haf/DotNetZip.Semverd",
                                           "updatedAt":  "2024-05-16T06:57:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DElG1",
                                           "createdAt":  "2024-07-01T02:31:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tts-sdrissen",
                                           "body":  "need this, too",
                                           "updatedAt":  "2024-07-01T02:31:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6EQGUW",
                                           "createdAt":  "2024-07-09T22:07:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "peter0302",
                                           "body":  "You have to be freakin kidding me. I just was about to add password support and started looking for `ZipArchive` constructor overloads that took a password, and not finding one, Googled it. This is the last thing I expected to see. What on earth is wrong with you people? How can this not be part of .NET\u0027s built-in Zip support? I don\u0027t even know what to say.",
                                           "updatedAt":  "2024-07-09T22:21:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6EQPtU",
                                           "createdAt":  "2024-07-09T22:40:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cgountanis",
                                           "body":  "Best I can think of is that, there\u0027s just too many compression and encryption methods. We ended up just using SharpZipLib, wasn\u0027t really too bad.",
                                           "updatedAt":  "2024-07-09T22:49:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FKhru",
                                           "createdAt":  "2024-07-17T19:50:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sladecurtis",
                                           "body":  "Need this also!\r\nSo basic a concept.. please implement in near future.\r\nMy use case: SOC junior analysts attempting to take potentially malicious files off a machine that threw an endpoint alert in Azure. We want them to zip and password protect the malicious file and download from a Defender Live Response Session. Currently this cannot be done. Zip is a good start, but all potentially malicious files should be password protected too (standard malware handling procedures). We\u0027ve tested and cannot even install other modules from a live response session, so it needs to be native to powershell cmdlets. Thanks.",
                                           "updatedAt":  "2024-07-17T19:50:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FdvR2",
                                           "createdAt":  "2024-07-19T13:21:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODqrYuA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "cgountanis",
                                                                               "createdAt":  "2024-07-19T13:30:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "peter0302",
                                                                               "createdAt":  "2024-07-19T14:13:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "StarWars999123",
                                           "body":  "@SteveL-MSFT Is there any update to put it on the roadmap by Microsoft? \r\nWhat about implementations for the legacy .net framework support for NET472, NET48, and NET6 that could previously rely on the maintained DotNetZip library? IMHO this isn\u0027t something to be planned for NET9 or whatever, but something that needs to support even the old frameworks asap.\r\n\r\nI don\u0027t wanna express my honest thoughts regarding this issue, but lets say @peter0302 kept it very polite... ",
                                           "updatedAt":  "2024-07-19T15:12:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FeNyk",
                                           "createdAt":  "2024-07-19T14:19:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD7aebg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "StarWars999123",
                                                                               "createdAt":  "2024-07-19T14:21:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "vladd",
                                                                               "createdAt":  "2024-07-20T20:34:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "Toby222",
                                                                               "createdAt":  "2024-08-30T06:24:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cstotts",
                                                                               "createdAt":  "2024-10-08T23:23:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MikeFarrington",
                                                                               "createdAt":  "2024-11-18T18:59:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "peter0302",
                                           "body":  "\u003e I don\u0027t wanna express my honest thoughts regarding this issue, but lets say @peter0302 kept it very polite...\r\n\r\nLOL they marked my comment as abuse. Imagine if *I\u0027d* expressed my honest thoughts. \r\n\r\n\u003e The format also has some strong encryption support but it\u0027s copyrighted so out of bounds for us.\r\n\r\nFirst it\u0027s a patent not a copyright:\r\n\r\nhttps://ppubs.uspto.gov/dirsearch-public/print/downloadPdf/11461487\r\n\r\nPriority date is July 16, 2003 with a 242 day administrative extension, plus a 20 year term. That\u0027s March 14, 2024, meaning the patent is expired.\r\n\r\nPatent gone, carry on. Time to implement this.",
                                           "updatedAt":  "2024-07-19T14:37:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FeUbt",
                                           "createdAt":  "2024-07-19T14:31:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD7aeJQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MikeFarrington",
                                                                               "createdAt":  "2024-11-18T18:58:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  null,
                                           "body":  "\u003e You have to be freakin kidding me. I just was about to add password support and started looking for `ZipArchive` constructor overloads that took a password, and not finding one, Googled it. This is the last thing I expected to see. What on earth is wrong with you people? How can this not be part of .NET\u0027s built-in Zip support? I don\u0027t even know what to say.\r\n\r\nAbsolutely the same feeling. \r\nThe support for compressed archive formats is probably the worst part of the .Net experience.\r\n\r\nI hope they can prioritize these fundamental experiences that have been missing for decades, so that we can love the .NET ecosystem even more.",
                                           "updatedAt":  "2024-07-19T14:34:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FeWv-",
                                           "createdAt":  "2024-07-19T14:35:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODqrssQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "peter0302",
                                                                               "createdAt":  "2024-07-19T14:37:19Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "sladecurtis",
                                           "body":  "So that means we might actually get this feature added in future??? [Hopeful]\n\nSent from Proton Mail Android\n\n-------- Original Message --------\nOn 2024-07-19 11:50 a.m., peter0302  wrote:\n\n\u003e\u003e I don\u0027t wanna express my honest thoughts regarding this issue, but lets say ***@***.***(https://github.com/peter0302) kept it very polite...\n\u003e\n\u003e LOL they marked my comment as abuse. Imagine if I\u0027d expressed my honest thoughts.\n\u003e\n\u003e\u003e The format also has some strong encryption support but it\u0027s copyrighted so out of bounds for us.\n\u003e\n\u003e First it\u0027s a patent not a copyright:\n\u003e\n\u003e https://ppubs.uspto.gov/dirsearch-public/print/downloadPdf/11461487\n\u003e\n\u003e Priority date is July 16, 2003 with a 242 day administrative extension, plus a 20 year term. That\u0027s March 14, 2024, meaning the patent is expired.\n\u003e\n\u003e Time to implement this.\n\u003e\n\u003e —\n\u003e Reply to this email directly, [view it on GitHub](https://github.com/dotnet/runtime/issues/1545#issuecomment-2239290532), or [unsubscribe](https://github.com/notifications/unsubscribe-auth/BHIU6D4Q7IVAHCP3VWWD7T3ZNEOBRAVCNFSM4KE7AGG2U5DIOJSWCZC7NNSXTN2JONZXKZKDN5WW2ZLOOQ5TEMRTHEZDSMBVGMZA).\n\u003e You are receiving this because you commented.Message ID: ***@***.***\u003e",
                                           "updatedAt":  "2024-07-19T14:35:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6F-TSd",
                                           "createdAt":  "2024-07-24T11:45:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "PracticalCode",
                                           "body":  "Above, and almost 8 years ago, [ianhays](https://github.com/ianhays) commented [on Nov 3, 2016] @lburkovsky take a look at [this issue](https://github.com/dotnet/corefx/issues/271) for a good example of the kind of API proposal that we\u0027re looking for. In general, the more implementation details, the better. You can also look at our [API Review process doc](https://github.com/dotnet/corefx/blob/master/Documentation/project-docs/api-review-process.md)...\r\n\r\nDoes anyone know if this was completed?..  (or still relevant in MS processes?) ... while I disagree this should be the reason why this is held up; it\u0027s also kinda sad if no one\u0027s completed it in almost 8 years. (I\u0027m willing to.. presuming it\u0027s still a relevant process.)",
                                           "updatedAt":  "2024-07-24T11:45:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6F-V2C",
                                           "createdAt":  "2024-07-24T11:49:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sladecurtis",
                                           "body":  "Super bummed. This not even possible then?\n\nSent from Proton Mail Android\n\n-------- Original Message --------\nOn 2024-07-19 12:02 p.m., 張  wrote:\n\n\u003e\u003e You have to be freakin kidding me. I just was about to add password support and started looking for ZipArchive constructor overloads that took a password, and not finding one, Googled it. This is the last thing I expected to see. What on earth is wrong with you people? How can this not be part of .NET\u0027s built-in Zip support? I don\u0027t even know what to say.\n\u003e\n\u003e Absolutely the same feeling.\n\u003e The support for compressed archive formats is probably the worst part of the .Net experience.\n\u003e\n\u003e —\n\u003e Reply to this email directly, [view it on GitHub](https://github.com/dotnet/runtime/issues/1545#issuecomment-2239317741), or [unsubscribe](https://github.com/notifications/unsubscribe-auth/BHIU6D35JS3DDME4DFOWTMTZNEPPRAVCNFSM4KE7AGG2U5DIOJSWCZC7NNSXTN2JONZXKZKDN5WW2ZLOOQ5TEMRTHEZTCNZXGQYQ).\n\u003e You are receiving this because you commented.Message ID: ***@***.***\u003e",
                                           "updatedAt":  "2024-07-24T11:49:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6F-Yx-",
                                           "createdAt":  "2024-07-24T11:55:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD7adug==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MikeFarrington",
                                                                               "createdAt":  "2024-11-18T18:57:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "peter0302",
                                           "body":  "\u003e Super bummed. This not even possible then?\r\n\r\nIt\u0027s 100% possible. Ionic supported it. The only understandable reason it appears MS didn\u0027t initially support it was the patent, which is now expired. So there\u0027s no reason not to do it now. ",
                                           "updatedAt":  "2024-07-24T11:55:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6F_I_B",
                                           "createdAt":  "2024-07-24T13:20:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sladecurtis",
                                           "body":  "Oh excellent. Effort to implement? Estimate?\n\nSent from Proton Mail Android\n\n-------- Original Message --------\nOn 2024-07-24 9:26 a.m., peter0302  wrote:\n\n\u003e\u003e Super bummed. This not even possible then?\n\u003e\n\u003e It\u0027s 100% possible. Ionic supported it. The only understandable reason it appears MS didn\u0027t initially support it was the patent, which is now expired. So there\u0027s no reason not to do it now.\n\u003e\n\u003e —\n\u003e Reply to this email directly, [view it on GitHub](https://github.com/dotnet/runtime/issues/1545#issuecomment-2247724158), or [unsubscribe](https://github.com/notifications/unsubscribe-auth/BHIU6D4DOALGDUP22RSVYR3ZN6I5JAVCNFSM4KE7AGG2U5DIOJSWCZC7NNSXTN2JONZXKZKDN5WW2ZLOOQ5TEMRUG43TENBRGU4A).\n\u003e You are receiving this because you commented.Message ID: ***@***.***\u003e",
                                           "updatedAt":  "2024-07-24T13:20:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6F_kcA",
                                           "createdAt":  "2024-07-24T13:57:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEi_53g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "peter0302",
                                                                               "createdAt":  "2024-07-24T14:21:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "StarWars999123",
                                                                               "createdAt":  "2024-07-24T14:30:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wakuflair",
                                                                               "createdAt":  "2024-07-25T08:54:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MaxBGitHub",
                                                                               "createdAt":  "2024-07-26T09:29:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Transis-Felipe",
                                                                               "createdAt":  "2024-07-26T12:41:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "simondixey",
                                                                               "createdAt":  "2024-08-14T10:37:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ImoutoChan",
                                                                               "createdAt":  "2024-09-02T12:48:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Matthias-Heinz",
                                                                               "createdAt":  "2024-09-12T09:19:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cgountanis",
                                                                               "createdAt":  "2024-11-15T21:07:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "crippledfaith",
                                                                               "createdAt":  "2025-02-19T05:53:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bdominguez",
                                                                               "createdAt":  "2025-09-19T08:59:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  11
                                                         },
                                           "author":  "NerLOR",
                                           "body":  "I would suggest an API like this:\r\n\r\n```c#\r\npublic enum ZipEncryptionMode { Unknown, WinZipAes128, WinZipAes192, WinZipAes256 }\r\n\r\npublic class ZipFile\r\n{\r\n    // current\r\n    public ZipArchiveEntry? GetEntry(string entryName);\r\n    public ZipArchiveEntry CreateEntry(string entryName);\r\n    public ZipArchiveEntry CreateEntry(string entryName, CompressionLevel compressionLevel);\r\n    // suggestion\r\n    public ZipArchiveEntry? GetEntry(string entryName, string? password, bool failIfUnencrypted = false);\r\n    public ZipArchiveEntry CreateEntry(string entryName, ZipEncryptionMode encryptionMode, string password);\r\n    public ZipArchiveEntry CreateEntry(string entryName, CompressionLevel compressionLevel, ZipEncryptionMode encryptionMode, string password);\r\n}\r\n\r\npublic enum ZipCompressionMethod { Unknown, Store, Deflate, ... }\r\n\r\npublic class ZipArchiveEntry\r\n{\r\n    // suggestion\r\n    public ZipEncryptionMode EncryptionMode { get; }\r\n    // additional suggestion\r\n    public ZipCompressionMethod CompressionMethod { get; }\r\n}\r\n```\r\n\r\nThis allows for each entry to have a different (or no) password (which the WinZip standard allows). The enum values `ZipEncryptionMode.WinzipAes256` and so on allow to implement encryption modes other than WinZip in the future.\r\n\r\nWhen decrypting the password alone should be enough (because the encryption mode is saved in the zip archive). When `failIfUnencrypted` is `true` `GetEntry` should throw an exception if the entry is not encrypted. `GetEntry` should also throw an exception when the wrong password is provided (or the encryption method is unknown).\r\n\r\nI think it would be beneficial to allow users to check the `EncryptionMode` or `CompressionMethod` used in a `ZipArchiveEntry`. This would allow for (simple) security checks (like to prohibit unsafe encryption modes or compression methods).\r\n\r\nAny comments on my suggestions are appreciated.\r\n\r\nhttp://www.winzip.com/aes_info.htm",
                                           "updatedAt":  "2024-07-24T13:57:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GxTRP",
                                           "createdAt":  "2024-07-31T18:02:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "StarWars999123",
                                           "body":  "I would really appreciate your idea to encrypt each entry with a different password/method as DotNetZip also did. ",
                                           "updatedAt":  "2024-07-31T18:02:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KkeVT",
                                           "createdAt":  "2024-09-02T13:54:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "StarWars999123",
                                           "body":  "Regarding this API approach (https://github.com/dotnet/runtime/issues/1545#issuecomment-2248034048), I would like to add, that the support of BasicEncryption would be useful and would like to add it to ZipEncryptionMode.\r\nReason: It\u0027s the only encryption, that the WindowsExplorer supports so far, and as thus, it can be useful for files that should not be accessible for everyone immedeatly, but can be opened with the default tools.\r\n\r\n",
                                           "updatedAt":  "2024-09-02T13:54:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6L0Quq",
                                           "createdAt":  "2024-09-12T09:22:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGs4lg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "cstotts",
                                                                               "createdAt":  "2024-10-08T23:27:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "StarWars999123",
                                                                               "createdAt":  "2024-10-11T00:18:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "stijnbollen",
                                                                               "createdAt":  "2024-11-14T10:29:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SoenkeOl",
                                                                               "createdAt":  "2024-11-14T12:03:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mischube",
                                                                               "createdAt":  "2024-11-15T13:01:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wmsptfr",
                                                                               "createdAt":  "2024-11-15T20:56:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mauricebauer",
                                                                               "createdAt":  "2024-11-15T21:51:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MikeFarrington",
                                                                               "createdAt":  "2024-11-18T18:19:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "markotrmcic",
                                                                               "createdAt":  "2025-01-23T08:26:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Matthias-Heinz",
                                                                               "createdAt":  "2025-02-18T09:23:19Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  10
                                                         },
                                           "author":  "Matthias-Heinz",
                                           "body":  "Any estimate, when this feature will be implemented? Passwords are a pretty common use-case for zip archives in my opinion.",
                                           "updatedAt":  "2024-09-12T09:22:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6T0IkE",
                                           "createdAt":  "2024-11-15T21:01:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEhR_SA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "LucasLibis",
                                                                               "createdAt":  "2024-11-15T21:11:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "felpel",
                                                                               "createdAt":  "2024-11-15T21:47:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mauricebauer",
                                                                               "createdAt":  "2024-11-15T21:51:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mischube",
                                                                               "createdAt":  "2024-11-15T21:53:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KGuetter",
                                                                               "createdAt":  "2024-11-16T06:48:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NecatiMeral",
                                                                               "createdAt":  "2024-11-17T21:53:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ljb",
                                                                               "createdAt":  "2024-11-18T12:01:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Argedis",
                                                                               "createdAt":  "2024-11-18T16:40:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MikeFarrington",
                                                                               "createdAt":  "2024-11-18T18:19:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "okay9109",
                                                                               "createdAt":  "2024-11-18T18:38:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dkbmx",
                                                                               "createdAt":  "2024-11-18T19:09:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pavelkhr",
                                                                               "createdAt":  "2024-11-19T08:02:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "qlikled",
                                                                               "createdAt":  "2024-11-20T08:21:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CzmQlik",
                                                                               "createdAt":  "2024-11-20T10:02:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Mauro-Sturaro",
                                                                               "createdAt":  "2024-11-20T11:08:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alphons",
                                                                               "createdAt":  "2024-11-20T14:51:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "macb500",
                                                                               "createdAt":  "2024-11-21T16:31:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dos-ise",
                                                                               "createdAt":  "2024-11-21T17:31:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "StarWars999123",
                                                                               "createdAt":  "2024-11-22T14:10:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ajchellew",
                                                                               "createdAt":  "2024-11-25T11:20:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maleu1",
                                                                               "createdAt":  "2024-11-25T12:06:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nickspoons",
                                                                               "createdAt":  "2024-12-03T01:16:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adenobyte",
                                                                               "createdAt":  "2024-12-04T12:49:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "epatrick",
                                                                               "createdAt":  "2024-12-09T13:49:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cfbender",
                                                                               "createdAt":  "2025-01-09T04:03:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "imsh",
                                                                               "createdAt":  "2025-02-06T15:53:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pdonovan",
                                                                               "createdAt":  "2025-02-07T02:46:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Matthias-Heinz",
                                                                               "createdAt":  "2025-02-18T09:23:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "crippledfaith",
                                                                               "createdAt":  "2025-02-19T05:53:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NilesDavis",
                                                                               "createdAt":  "2025-09-08T10:06:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  30
                                                         },
                                           "author":  "wmsptfr",
                                           "body":  "With that [\u0027forever-day\u0027 vulnerability being found in DotNetZip](https://nvd.nist.gov/vuln/detail/CVE-2024-48510), I think a lot of people stuck supporting software that is dependent on password protected archives would appreciate this being added to the library. ",
                                           "updatedAt":  "2024-11-15T21:01:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Ug7oZ",
                                           "createdAt":  "2024-11-21T16:09:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEG1Oqw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "legistek",
                                                                               "createdAt":  "2024-11-21T16:15:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "macb500",
                                                                               "createdAt":  "2024-11-21T16:31:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "cstotts",
                                                                               "createdAt":  "2024-11-21T16:57:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "dos-ise",
                                                                               "createdAt":  "2024-11-21T17:31:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "wmsptfr",
                                                                               "createdAt":  "2024-11-21T18:01:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "fokaba",
                                                                               "createdAt":  "2024-11-21T19:50:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "JS-X-Visual",
                                                                               "createdAt":  "2024-11-22T10:04:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "StarWars999123",
                                                                               "createdAt":  "2024-11-22T14:10:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "okay9109",
                                                                               "createdAt":  "2024-11-22T17:27:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ajchellew",
                                                                               "createdAt":  "2024-11-25T11:20:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "ajchellew",
                                                                               "createdAt":  "2024-11-25T11:20:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "maleu1",
                                                                               "createdAt":  "2024-11-25T12:06:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cgountanis",
                                                                               "createdAt":  "2024-11-26T19:13:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "legistek",
                                                                               "createdAt":  "2024-12-11T18:09:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Matthias-Heinz",
                                                                               "createdAt":  "2025-02-18T09:23:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "crippledfaith",
                                                                               "createdAt":  "2025-02-19T05:53:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  16
                                                         },
                                           "author":  "sailro",
                                           "body":  "Hi @karelz, perhaps this one should be revisited. @wmsptfr is completely right. Even if you want super basic stuff BUT you need password protection + encryption, you are forced to use a third-party dependency like `DotNetZip` or `SharpCompress`. And `DotNetZip` is affected by critical vulnerabilities.",
                                           "updatedAt":  "2024-11-21T16:09:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6VHTCq",
                                           "createdAt":  "2024-11-26T19:05:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEhSJ5g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "cgountanis",
                                                                               "createdAt":  "2024-11-26T19:13:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "StarWars999123",
                                                                               "createdAt":  "2024-11-30T02:11:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NilesDavis",
                                                                               "createdAt":  "2025-09-08T10:28:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "dos-ise",
                                           "body":  "I have given up on this issue. Seems it will never be added.\n\nWe have migrated to ProDotNetZip. Which ist a great fork of dotnetzip. Fixing the vulnerabilities.\n\nhttps://github.com/mihula/ProDotNetZip",
                                           "updatedAt":  "2024-11-26T19:05:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6VHax8",
                                           "createdAt":  "2024-11-26T19:23:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cstotts",
                                           "body":  "I appreciate the alternate option being listed here, thanks!\r\n\r\nOn Tue, Nov 26, 2024, 11:06 AM Dennis ***@***.***\u003e wrote:\r\n\r\n\u003e I have given up on this issue. Seems it will never be added.\r\n\u003e\r\n\u003e We have migrated to ProDotNetZip. Which ist a great fork of dotnetzip.\r\n\u003e Fixing the vulnerabilities.\r\n\u003e\r\n\u003e https://github.com/mihula/ProDotNetZip\r\n\u003e\r\n\u003e —\r\n\u003e Reply to this email directly, view it on GitHub\r\n\u003e \u003chttps://github.com/dotnet/runtime/issues/1545#issuecomment-2501718186\u003e,\r\n\u003e or unsubscribe\r\n\u003e \u003chttps://github.com/notifications/unsubscribe-auth/AACIN4ASZQDD2BYT5M7P27L2CTBBZAVCNFSM4KE7AGG2U5DIOJSWCZC7NNSXTN2JONZXKZKDN5WW2ZLOOQ5TENJQGE3TCOBRHA3A\u003e\r\n\u003e .\r\n\u003e You are receiving this because you are subscribed to this thread.Message\r\n\u003e ID: ***@***.***\u003e\r\n\u003e\r\n",
                                           "updatedAt":  "2024-11-26T19:23:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6XAiOB",
                                           "createdAt":  "2024-12-11T02:41:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD_4OUA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "felpel",
                                                                               "createdAt":  "2024-12-21T18:09:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "CypherPotato",
                                           "body":  "Up for this.",
                                           "updatedAt":  "2024-12-11T02:41:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6XM3No",
                                           "createdAt":  "2024-12-11T18:07:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tts-sdrissen",
                                           "body":  "Need this.",
                                           "updatedAt":  "2024-12-11T18:07:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6XQn9t",
                                           "createdAt":  "2024-12-12T03:17:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD_4ORg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "felpel",
                                                                               "createdAt":  "2024-12-21T18:08:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  null,
                                           "body":  "Up for this.",
                                           "updatedAt":  "2024-12-12T03:17:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6X4g3u",
                                           "createdAt":  "2024-12-17T11:11:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "I do not have a say in this BCL area anymore, but I am sure that it is on @jeffhandley\u0027s radar ...\nIn the meantime, keep upvoting top post, that is the best way to add your votes - we (all .NET) do look at most upvoted issues when planning new releases. One is coming up now (.NET 10), although I can\u0027t make promises on behalf of other teams.\n\ncc @carlossanlop @ViktorHofer ",
                                           "updatedAt":  "2024-12-17T11:12:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6YeM_r",
                                           "createdAt":  "2024-12-21T08:54:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEKx4gA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "felpel",
                                                                               "createdAt":  "2024-12-21T18:08:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mauricebauer",
                                                                               "createdAt":  "2025-02-16T12:06:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Matthias-Heinz",
                                                                               "createdAt":  "2025-02-18T09:23:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "StarWars999123",
                                                                               "createdAt":  "2025-03-19T18:02:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ted1oo1",
                                                                               "createdAt":  "2025-03-20T20:28:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "mli2805",
                                           "body":  "Up for this",
                                           "updatedAt":  "2024-12-21T08:54:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ehHX1",
                                           "createdAt":  "2025-02-14T14:28:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ElinaSitailo",
                                           "body":  "Up for this",
                                           "updatedAt":  "2025-02-14T14:28:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6n569a",
                                           "createdAt":  "2025-04-20T03:58:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEhR_kw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dos-ise",
                                                                               "createdAt":  "2025-04-20T04:11:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CypherPotato",
                                                                               "createdAt":  "2025-04-21T19:05:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Matthias-Heinz",
                                                                               "createdAt":  "2025-04-22T06:20:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rbeurskens",
                                                                               "createdAt":  "2025-04-22T20:51:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "StarWars999123",
                                                                               "createdAt":  "2025-04-23T23:32:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gsolic",
                                                                               "createdAt":  "2025-04-28T13:15:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CheremisinOleksii",
                                                                               "createdAt":  "2025-04-29T12:48:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "yuno-x",
                                                                               "createdAt":  "2025-05-15T08:46:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GCaw",
                                                                               "createdAt":  "2025-05-19T22:31:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tts-sdrissen",
                                                                               "createdAt":  "2025-05-21T18:14:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "solomon-okolie",
                                                                               "createdAt":  "2025-05-30T10:19:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "fekberg",
                                                                               "createdAt":  "2025-06-01T08:19:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "EVTrifonov",
                                                                               "createdAt":  "2025-06-07T17:18:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "zipgenius",
                                                                               "createdAt":  "2025-06-11T18:31:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kmatyaszek",
                                                                               "createdAt":  "2025-06-18T05:44:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mauricebauer",
                                                                               "createdAt":  "2025-07-03T11:37:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davedevretro",
                                                                               "createdAt":  "2025-07-07T11:09:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mm-ryo",
                                                                               "createdAt":  "2025-07-09T06:30:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julienGrd",
                                                                               "createdAt":  "2025-07-17T16:14:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KGuetter",
                                                                               "createdAt":  "2025-07-21T06:07:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AloysA",
                                                                               "createdAt":  "2025-08-05T07:03:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AGDownie",
                                                                               "createdAt":  "2025-08-28T08:56:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NilesDavis",
                                                                               "createdAt":  "2025-09-08T10:07:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  23
                                                         },
                                           "author":  "luxcan",
                                           "body":  "Moving forward to 2025, still waiting for the official password support.",
                                           "updatedAt":  "2025-04-20T03:58:02Z"
                                       }
                                   ],
                         "totalCount":  45
                     },
        "title":  "Add password to ZipArchive",
        "labels":  [
                       "api-suggestion",
                       "area-System.IO.Compression"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/1546",
        "createdAt":  "2016-11-01T11:51:53Z",
        "number":  1546,
        "author":  "patricksadowski",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODEnu1g==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tjmoore",
                                            "createdAt":  "2021-06-17T19:28:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "leoshusar",
                                            "createdAt":  "2022-06-01T17:53:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PawcioCNCProfi",
                                            "createdAt":  "2023-01-26T08:55:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rolfbjarne",
                                            "createdAt":  "2023-09-12T14:26:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "manfromarce",
                                            "createdAt":  "2025-06-24T12:40:28Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2024-02-26T03:50:25Z",
        "body":  "# Problem\r\nWhen creating or updating zip archives there is no option to add a directory with its content. The content of a directory can only be added with custom code by hand. `ZipFile.CreateFromDirectory` is not an option when building complex zip archives.\r\n\r\n# Proposed API\r\n```diff\r\nnamespace System.IO.Compression\r\n{\r\n    public static partial class ZipFile\r\n    {\r\n        public static void CreateFromDirectory(string sourceDirectoryName, string destinationArchiveFileName) { }\r\n        public static void CreateFromDirectory(string sourceDirectoryName, string destinationArchiveFileName, System.IO.Compression.CompressionLevel compressionLevel, bool includeBaseDirectory) { }\r\n        public static void CreateFromDirectory(string sourceDirectoryName, string destinationArchiveFileName, System.IO.Compression.CompressionLevel compressionLevel, bool includeBaseDirectory, System.Text.Encoding entryNameEncoding) { }\r\n        public static void ExtractToDirectory(string sourceArchiveFileName, string destinationDirectoryName) { }\r\n        public static void ExtractToDirectory(string sourceArchiveFileName, string destinationDirectoryName, System.Text.Encoding entryNameEncoding) { }\r\n        public static System.IO.Compression.ZipArchive Open(string archiveFileName, System.IO.Compression.ZipArchiveMode mode) { throw null; }\r\n        public static System.IO.Compression.ZipArchive Open(string archiveFileName, System.IO.Compression.ZipArchiveMode mode, System.Text.Encoding entryNameEncoding) { throw null; }\r\n        public static System.IO.Compression.ZipArchive OpenRead(string archiveFileName) { throw null; }\r\n    }\r\n    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]\r\n    public static partial class ZipFileExtensions\r\n    {\r\n        public static System.IO.Compression.ZipArchiveEntry CreateEntryFromFile(this System.IO.Compression.ZipArchive destination, string sourceFileName, string entryName) { throw null; }\r\n        public static System.IO.Compression.ZipArchiveEntry CreateEntryFromFile(this System.IO.Compression.ZipArchive destination, string sourceFileName, string entryName, System.IO.Compression.CompressionLevel compressionLevel) { throw null; }\r\n+       public static System.Collections.Generic.IEnumerable\u003cSystem.IO.Compression.ZipArchiveEntry\u003e CreateEntriesFromDirectory(this System.IO.Compression.ZipArchive destination, string sourceDirectoryName, string baseEntryName) { throw null; }\r\n+       public static System.Collections.Generic.IEnumerable\u003cSystem.IO.Compression.ZipArchiveEntry\u003e CreateEntriesFromDirectory(this System.IO.Compression.ZipArchive destination, string sourceDirectoryName, string baseEntryName, System.IO.Compression.CompressionLevel compressionLevel, bool includeBaseDirectory) { throw null; }\r\n        public static void ExtractToDirectory(this System.IO.Compression.ZipArchive source, string destinationDirectoryName) { }\r\n        public static void ExtractToFile(this System.IO.Compression.ZipArchiveEntry source, string destinationFileName) { }\r\n        public static void ExtractToFile(this System.IO.Compression.ZipArchiveEntry source, string destinationFileName, bool overwrite) { }\r\n    }\r\n}\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOdQUh7A==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2MjAxNTk3OQ==",
                                           "createdAt":  "2016-11-21T17:57:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ianhays",
                                           "body":  "\u003e+       public static System.IO.Compression.ZipArchiveEntry CreateEntryFromDirectory(this System.IO.Compression.ZipArchive destination, string sourceDirectoryName, string entryName) { throw null; }\r\n\r\nIf you want a directory with all of the items within that directory, you would need to return a list of ZipArchiveEntries. Also, entryName doesn\u0027t make much sense when you\u0027re adding multiple files unless you want that to be the base path for entries within the directory.\r\n\r\nI could see the usefulness of this. The implementation would be easily merge-able with the existing `CreateFromDirectory` source for a minimal required amount of additional code. \r\n\r\nThough there is a simple solution when all files within the directory are at the root e.g.\r\n```\r\npublic static IEnumerable\u003cZipArchiveEntry\u003e CreateEntriesFromDirectory(this ZipArchive destination, string sourceDirectoryName, CompressionLevel compressionLevel)\r\n{\r\n    foreach (string entry in Directory.EnumerateFileSystemEntries(sourceDirectoryName, \"*\", SearchOption.TopDirectoryOnly))\r\n        yield return destination.CreateEntryFromFile(entry, Path.GetFileName(entry), compressionLevel);\r\n}\r\n```\r\nit gets more complex when subfolders are involved as we have to calculate the relative paths for the entry names. [Luckily, we already have a function for that](https://github.com/dotnet/corefx/blob/master/src/System.IO.Compression.ZipFile/src/System/IO/Compression/ZipFile.cs#L552). ",
                                           "updatedAt":  "2016-11-21T17:57:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2MjE4NjE2OQ==",
                                           "createdAt":  "2016-11-22T09:11:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "patricksadowski",
                                           "body":  "Yes, the return type could be changed to `IEnumerable\u003cZipArchive\u003e`. entryName should be the base path for entries within the directory. I altered my proposal to make the functionality more clear. The API is now based on `ZipFile.CreateFromDirectory`. I\u0027m not sure if we should add a parameter `Encoding entryNameEncoding`.\r\n\r\nGiven a directory structure on local storage\r\n```\r\nfoo/\r\n |- bar/\r\n     |-info.txt\r\n |- empty/\r\n```\r\nI can call the first overload with `entryName: \"update\"` to create\r\n```\r\n/update/bar/info.txt\r\n/update/empty/\r\n```\r\nThe second overload would produce with `entryName: \"update\"` and base directory inclusion\r\n```\r\n/update/foo/bar/info.txt\r\n/update/foo/empty/\r\n```",
                                           "updatedAt":  "2016-11-22T09:11:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2MjMxNTY0NA==",
                                           "createdAt":  "2016-11-22T17:57:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ianhays",
                                           "body":  "\u003eentryName should be the base path for entries within the directory. \r\n\r\nI think that makes sense, though `entryName` isn\u0027t a very fitting title anymore. Maybe something like `baseEntryPath` or `baseEntryName`?\r\n\r\n\u003eI\u0027m not sure if we should add a parameter Encoding entryNameEncoding.\r\n\r\nMy vote would be to leave it out since we don\u0027t include it in any of the other extension methods.\r\n\r\n\u003eThe second overload would produce with entryName: \"update\" and base directory inclusion\r\n\r\nThe `includeBaseDirectory` parameter doesn\u0027t seem necessary since you could easily add the base directory name to \"entryName\"/`baseEntryName`/whatever.",
                                           "updatedAt":  "2016-11-22T17:57:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2MjU2MzU5Mg==",
                                           "createdAt":  "2016-11-23T16:28:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "patricksadowski",
                                           "body":  "\u003e Maybe something like baseEntryPath or baseEntryName?\r\n\r\nI changed it to `baseEntryName`. `baseEntryPath` doesn\u0027t seem to be consistent with other `ZipFile` and `ZipArchive` methods.\r\n\r\n\u003e The includeBaseDirectory parameter doesn\u0027t seem necessary since you could easily add the base directory name to \"entryName\"/baseEntryName/whatever.\r\n\r\nWell, I\u0027d like to know why the parameter exists in method `ZipFile.CreateFromDirectory`. Your explanation leads to the conclusion to also remove the parameter from `ZipFile.CreateFromDirectory`. Is there a important historical reason to keep the parameter or should we drop it?",
                                           "updatedAt":  "2016-11-23T16:28:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2MjU5ODcyMQ==",
                                           "createdAt":  "2016-11-23T18:43:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ianhays",
                                           "body":  "\u003eI changed it to baseEntryName. baseEntryPath doesn\u0027t seem to be consistent with other ZipFile and ZipArchive methods.\r\n\r\ngood call.\r\n\r\n\u003eWell, I\u0027d like to know why the parameter exists in method ZipFile.CreateFromDirectory. Your explanation leads to the conclusion to also remove the parameter from ZipFile.CreateFromDirectory. Is there a important historical reason to keep the parameter or should we drop it?\r\n\r\nWe\u0027ve pretty well already made our bed with `ZipFile.CreateFromDirectory` - if we change it now we break compat. I\u0027m on the fence about including it in `CreateEntriesFromDirectory`. If you feel that we should to be consistent with CreateFromDirectory then I\u0027m fine with that.",
                                           "updatedAt":  "2016-11-23T18:43:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2NDMxNzg0MA==",
                                           "createdAt":  "2016-12-01T22:39:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "patricksadowski",
                                           "body":  "The method should be named `CreateEntryFromDirectoryContent` to make the `includeBaseDirectory` parameter obsolete.\r\n\r\nIt would be nice to have the `includeBaseDirectory` functionality on board to reduce the amount of custom code for the users. We can add either the `includeBaseDirectory` parameter or two distinct methods `CreateEntryFromDirectory` and `CreateEntryFromDirectoryContent`.",
                                           "updatedAt":  "2016-12-01T22:39:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2NDk2NzY2OA==",
                                           "createdAt":  "2016-12-05T20:29:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ianhays",
                                           "body":  "\u003eIt would be nice to have the includeBaseDirectory functionality on board to reduce the amount of custom code for the users.\r\n\r\nI\u0027m fine with that. Go ahead and include it and we\u0027ll see what the API reviewers think once we get it locked down. No need to add a differently-named method.",
                                           "updatedAt":  "2016-12-05T20:29:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwMzgyMDM4NQ==",
                                           "createdAt":  "2017-05-24T19:02:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "patricksadowski",
                                           "body":  "Is there still API work needed? I would like to implement the proposed API.",
                                           "updatedAt":  "2017-05-24T19:02:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNDMzMzkxMg==",
                                           "createdAt":  "2017-05-26T16:55:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ianhays",
                                           "body":  "I think the API is good and we\u0027re at a reasonable place in the design discussion. The next step before moving forward is to wait for more support. We generally prefer to avoid adding API unless it\u0027s something that has wide support from the community or a very strong use-case that provides new functionality. Since this addition so far has neither, it\u0027s better to wait until the demand is more clear so that it can be better championed during the API review process.",
                                           "updatedAt":  "2017-05-26T16:55:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2NjI4MzAxNg==",
                                           "createdAt":  "2019-12-16T22:50:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "carlossanlop",
                                           "body":  "Triage:\r\nSounds reasonable, we would like to continue with API design and review.",
                                           "updatedAt":  "2019-12-16T22:50:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc51BSHs",
                                           "createdAt":  "2024-02-26T03:50:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RenderMichael",
                                           "body":  "I found myself in need of this API today; is there anything else this proposal needs to be ready for review?",
                                           "updatedAt":  "2024-02-26T03:50:24Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "System.IO.Compression.ZipFile: CreateEntriesFromDirectory",
        "labels":  [
                       "api-suggestion",
                       "area-System.IO.Compression"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/1550",
        "createdAt":  "2017-06-01T07:34:48Z",
        "number":  1550,
        "author":  "adamhathcock",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC8XKPA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ianhays",
                                            "createdAt":  "2017-06-01T22:02:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jnm2",
                                            "createdAt":  "2017-06-14T22:01:17Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "am11",
                                            "createdAt":  "2017-07-08T17:01:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "iamcarbon",
                                            "createdAt":  "2017-07-26T19:09:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Legogris",
                                            "createdAt":  "2017-09-14T13:27:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "twsouthwick",
                                            "createdAt":  "2017-10-16T16:50:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cmerat",
                                            "createdAt":  "2017-10-24T18:37:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jmbryan22",
                                            "createdAt":  "2017-12-05T16:20:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "timkerans",
                                            "createdAt":  "2017-12-06T00:48:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "george-chakhidze",
                                            "createdAt":  "2018-01-17T14:10:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pensivebrian",
                                            "createdAt":  "2018-02-06T19:54:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "chrisfcarroll",
                                            "createdAt":  "2018-02-21T00:33:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "realsircodesalot",
                                            "createdAt":  "2018-05-07T14:54:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "samsosa",
                                            "createdAt":  "2018-07-14T15:56:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jeremycook",
                                            "createdAt":  "2018-08-17T22:34:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aslamhadi",
                                            "createdAt":  "2018-08-28T02:39:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "roc916",
                                            "createdAt":  "2018-09-02T12:02:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "trevorcarnahan",
                                            "createdAt":  "2019-01-14T15:26:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "folkcoder",
                                            "createdAt":  "2019-01-20T00:24:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AlgorithmsAreCool",
                                            "createdAt":  "2019-02-25T19:54:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Alyssumi",
                                            "createdAt":  "2019-08-04T13:55:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "airbreather",
                                            "createdAt":  "2019-10-21T15:20:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "scalablecory",
                                            "createdAt":  "2019-12-17T08:47:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kirsan31",
                                            "createdAt":  "2020-01-16T10:02:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "stephenmcd1",
                                            "createdAt":  "2020-02-05T23:45:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "legigor",
                                            "createdAt":  "2020-07-17T16:30:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mjeanrichard",
                                            "createdAt":  "2020-08-25T14:48:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jzebedee",
                                            "createdAt":  "2021-01-20T17:32:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "shmuelie",
                                            "createdAt":  "2021-02-24T23:18:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "BryceBarbara",
                                            "createdAt":  "2021-11-02T22:54:21Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "aloraman",
                                            "createdAt":  "2023-10-28T12:00:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0xfeeddeadbeef",
                                            "createdAt":  "2024-11-03T07:13:18Z"
                                        }
                                    ],
                          "totalCount":  32
                      },
        "updatedAt":  "2025-08-14T08:57:12Z",
        "body":  "This was started in https://github.com/dotnet/corefx/issues/9657\r\n\r\nThere seems to be a growing desire/need for a forward-only API that accesses compressed file formats (e.g. zip, gzip, tar, etc.) in a streaming manner.  This means very large files as well as streams like network streams can be read and decompressed on the fly.  Basically, the API reads from Stream objects and never seeks on it.  This is how the Reader/Writer API from [SharpCompress](https://github.com/adamhathcock/sharpcompress) works.\r\n\r\nHere\u0027s a sample from the unit tests:\r\n```csharp\r\nusing (Stream stream = new ForwardOnlyStream(File.OpenRead(path)))\r\nusing (IReader reader = ReaderFactory.Open(stream))\r\n{\r\n    while (reader.MoveToNextEntry())\r\n    {\r\n        if (!reader.Entry.IsDirectory)\r\n        {\r\n            reader.WriteEntryToDirectory(test.SCRATCH_FILES_PATH, new ExtractionOptions()\r\n            {\r\n                ExtractFullPath = true,\r\n                Overwrite = true\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\npublic interface IReader : IDisposable\r\n{\r\n    event EventHandler\u003cReaderExtractionEventArgs\u003cIEntry\u003e\u003e EntryExtractionProgress;\r\n\r\n    event EventHandler\u003cCompressedBytesReadEventArgs\u003e CompressedBytesRead;\r\n    event EventHandler\u003cFilePartExtractionBeginEventArgs\u003e FilePartExtractionBegin;\r\n\r\n    ArchiveType ArchiveType { get; }\r\n\r\n    IEntry Entry { get; }\r\n\r\n    /// \u003csummary\u003e\r\n    /// Decompresses the current entry to the stream.  This cannot be called twice for the current entry.\r\n    /// \u003c/summary\u003e\r\n    /// \u003cparam name=\"writableStream\"\u003e\u003c/param\u003e\r\n    void WriteEntryTo(Stream writableStream);\r\n\r\n    bool Cancelled { get; }\r\n    void Cancel();\r\n\r\n    /// \u003csummary\u003e\r\n    /// Moves to the next entry by reading more data from the underlying stream.  This skips if data has not been read.\r\n    /// \u003c/summary\u003e\r\n    /// \u003creturns\u003e\u003c/returns\u003e\r\n    bool MoveToNextEntry();\r\n\r\n    /// \u003csummary\u003e\r\n    /// Opens the current entry as a stream that will decompress as it is read.\r\n    /// Read the entire stream or use SkipEntry on EntryStream.\r\n    /// \u003c/summary\u003e\r\n    EntryStream OpenEntryStream();\r\n}\r\n```\r\n\r\n`WriteEntryToDirectory` is an extension method that provides some shortcuts for dealing with file operations but what it really does is just grab the internal stream and decompresses.  The actual entry method is just `IReader.WriteEntryTo(Stream);`  If the entry isn\u0027t decompressed then the internal stream is just moved forward and not decompressed if possible (some formats require decompression since compressed length can be unknown)\r\n\r\nThe Writer API works similarly.\r\n\r\nThere is also a generic API from `ReaderFactory` or `WriterFactory` that doesn\u0027t require knowledge of the format beforehand.  There is also a similar `ArchiveFactory` that is writeable (that uses WriterFactory internally to save) that could also be used for the current `ZipArchive` API and beyond.\r\n\r\nAs the author of SharpCompress, I\u0027d like to push a lot of the ideas into core library but having native access to the compression streams (like the internal zlib) would be a great performance benefit for me.  I haven\u0027t ever written any compression algorithm implementations myself so I\u0027m sure my managed implementations need a lot of love.  \r\n\r\nI would start by creating `ZipReader` and `ZipWriter` (as well as starting the generic API) using a lot of the internal code already in the core library to prove out the API.  This kind of relates to https://github.com/dotnet/corefx/issues/14853 but forward-only access is something most libraries don\u0027t account for so I\u0027m not sure.  Other easy additions would be Reader/Writer support for GZip, BZip2 and LZip (with an LZMA compressor).  \r\n\r\nTar support linked with the previous single file formats would be a larger addition.  SharpCompress deals with `tar.gz`, `tar.bz2` and `tar.lz` auto-magically by detecting first the compressed format then a tar file inside.  The above API works the same.\r\n\r\nThoughts? \r\n\r\nSummoning a few people from the other issue\r\ncc: @ianhays @karelz @qmfrederik ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONnVW0A==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNzcwMjMyNg==",
                                           "createdAt":  "2017-06-12T06:38:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@ianhays what is the next step? You did +1 above, does it mean you like the idea? Do we need API proposal? Or is it ready for API review? (Disclaimer: I just skimmed through it)",
                                           "updatedAt":  "2017-06-12T06:38:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNzcxMjc1Mw==",
                                           "createdAt":  "2017-06-12T07:38:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamhathcock",
                                           "body":  "I can put together a new API based on what I\u0027ve done.  It would be very similar to SharpCompress.",
                                           "updatedAt":  "2017-06-12T07:38:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNzc4MDUxNA==",
                                           "createdAt":  "2017-06-12T12:53:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "svick",
                                           "body":  "1. Is a new writer API necessary? AFAIK, `ZipArchive` already supports writing to non-seekable streams on .Net Core (https://github.com/dotnet/corefx/issues/11497).\r\n2. For reading, I think the API should return an `IEnumerable\u003cT\u003e`. That way, the user can use a `foreach` and they don\u0027t have to manually call something like `MoveNext` in a `while` loop. (Some LINQ methods also become a possibility.)",
                                           "updatedAt":  "2017-06-12T12:53:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNzc4MjA3MQ==",
                                           "createdAt":  "2017-06-12T13:00:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamhathcock",
                                           "body":  "1) You\u0027re right, this probably isn\u0027t strictly necessary.  It would be the inverse of a proposed `Reader` API and it would have a generic writing implementation while the current one is specific to Zip and could probably not apply in a generic case.  If a generic API isn\u0027t desired then this could possibly be dropped.\r\n2) I\u0027ve gone back and forth if I wanted to do it that way.  The reason why I haven\u0027t is because people could be tempted to do `ToList()` on the reader which would definitely not work and defeat the point of the reader API when they should have used the archive API.",
                                           "updatedAt":  "2017-06-12T13:00:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNzgzNTIyMQ==",
                                           "createdAt":  "2017-06-12T16:02:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "svick",
                                           "body":  "Then maybe the API should return a type that can be used in a `foreach`, but does not implement `IEnumerable\u003cT\u003e`. Though that could be confusing to someone who sees the API for the first time.",
                                           "updatedAt":  "2017-06-12T16:02:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNzg4NTU4NQ==",
                                           "createdAt":  "2017-06-12T18:55:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ianhays",
                                           "body":  "\u003e If a generic API isn\u0027t desired then this could possibly be dropped.\r\n\r\nI\u0027ve gone back-and-forth about this myself. I opened https://github.com/dotnet/corefx/issues/9709 to track my thoughts long-term on a way to centralize our compression algorithms somehow. It\u0027s clear that as we continue adding more compression types to corefx it\u0027s going to become trickier and tricker to integrate them smoothly and expose them to devs of all skill levels without being overwhelming or overly simplistic.\r\n\r\n\u003eI\u0027ve gone back and forth if I wanted to do it that way. The reason why I haven\u0027t is because people could be tempted to do ToList() on the reader which would definitely not work and defeat the point of the reader API when they should have used the archive API.\r\n\r\nI think in this case increased usability is more valuable than protecting devs from themselves. You could  implement a code analysis rule specifically to look for instances where devs do a `ToList()` and suggest they avoid it.",
                                           "updatedAt":  "2017-06-12T18:55:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNzg4NzAzNQ==",
                                           "createdAt":  "2017-06-12T18:58:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ianhays",
                                           "body":  "https://github.com/dotnet/corefx/issues/9237 is also somewhat related, though less so.",
                                           "updatedAt":  "2017-06-12T18:58:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNzkwNzQwMQ==",
                                           "createdAt":  "2017-06-12T20:00:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ianhays",
                                           "body":  "\u003e@ianhays what is the next step? You did +1 above, does it mean you like the idea? Do we need API proposal? Or is it ready for API review? (Disclaimer: I just skimmed through it)\r\n\r\nI do like the idea. My main concern is that I really want to do our compression expansion **right**. There are a ton of questions around design and usability that I want answered well before we take *anything* like this issue, dotnet/corefx#9237, or dotnet/corefx#9709. Adding something like [LZMA](https://github.com/dotnet/corefx/issues/9657) is easy because we can model it after DeflateStream/GZipStream with a similar API, but this issue (and the others linked above) is far more complex in the long-term implications of its design and API expansion. ",
                                           "updatedAt":  "2017-06-12T20:00:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNzkxNTI3Nw==",
                                           "createdAt":  "2017-06-12T20:31:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "OK, what is the next step? (you coming back with larger design?) What is rough ETA?",
                                           "updatedAt":  "2017-06-12T20:31:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNzkxODMyMg==",
                                           "createdAt":  "2017-06-12T20:44:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA3bwbQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "karelz",
                                                                               "createdAt":  "2017-06-12T20:46:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "markusschaber",
                                                                               "createdAt":  "2019-12-17T09:07:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "ianhays",
                                           "body":  "\u003eOK, what is the next step? (you coming back with larger design?)\r\n\r\nContinue discussing design choices in this issue, dotnet/corefx#9709, and dotnet/corefx#9237. Wait for other people to be interested and comment/vote on these threads with their opinion. \r\n\r\n\u003e What is rough ETA?\r\n\r\nWhenever we reach quorum and have a sizable mass of users requesting the feature. It\u0027s not something that we\u0027re hurting for *right now* or that a lot of customers are asking for, so I don\u0027t feel comfortable assigning an ETA for it.",
                                           "updatedAt":  "2017-06-12T20:44:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwODAzMTQ2NQ==",
                                           "createdAt":  "2017-06-13T07:29:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamhathcock",
                                           "body":  "Here\u0027s a rough Reader API based on what I\u0027ve done with SharpCompress and making the Reader itself be `IEnumerable`  might not quite be correct.\r\n\r\n```csharp\r\n//The file format of the Archive.  Can be confusing as GZip is a single file format as well as a compression type (using Tar as archive type).\r\npublic enum ArchiveType\r\n{\r\n    Rar,\r\n    Zip,\r\n    Tar,\r\n    SevenZip,\r\n    GZip\r\n}\r\n\r\n//The compression type used on the Archive/Entry.  GZip,BZip2,LZip,Xz are single file formats as well as a compression type.\r\npublic enum CompressionType\r\n{\r\n    None,\r\n    GZip,\r\n    BZip2,\r\n    PPMd,\r\n    Deflate,\r\n    Rar,\r\n    LZMA,\r\n    BCJ,\r\n    BCJ2,\r\n    LZip,\r\n    Xz,\r\n    Unknown\r\n}\r\n\r\n//possibly not needed\r\npublic class ReaderOptions\r\n{\r\n    //Password protected archives (out of scope?)\r\n    public string Password { get; set; }\r\n\r\n    //Take ownership of the stream\r\n    public bool CloseStream { get; set; }\r\n}\r\n\r\npublic static class ReaderFactory\r\n{\r\n    public static IReader Open(Stream stream, ReaderOptions options = null);\r\n#if NETSTANDARD1_3\r\n    public static IReader Open(FileInfo file, ReaderOptions options = null);\r\n    public static IReader Open(string filePath, ReaderOptions options = null);\r\n#endif\r\n}\r\n\r\npublic interface IReader : IEnumerable\u003cIReaderEntry\u003e\r\n{\r\n    IEnumerator\u003cIReaderEntry\u003e GetEnumerator();\r\n\r\n    ArchiveType ArchiveType { get; }\r\n\r\n    IReaderEntry CurrentEntry { get; }\r\n\r\n    void Dispose();\r\n}\r\n\r\npublic interface IReaderEntry\r\n{\r\n    Stream OpenRead();\r\n}\r\n\r\npublic interface IEntry\r\n{\r\n    //This is on entry because some archive types (like ZIP) can have compression types different per entry\r\n    CompressionType CompressionType { get; }\r\n    string Key { get; }\r\n\r\n    //everything below here is optional depending on archive type\r\n    DateTime? ArchivedTime { get; }\r\n    \r\n    long? CompressedSize { get; }\r\n    long? Crc { get; }\r\n    long? Size { get; }\r\n\r\n    DateTime? CreatedTime { get; }\r\n    \r\n    bool? IsDirectory { get; }\r\n    bool? IsEncrypted { get; }\r\n    bool? IsSplit { get; }\r\n    \r\n    DateTime? LastAccessedTime { get; }\r\n    DateTime? LastModifiedTime { get; }\r\n}\r\n\r\npublic static class IReaderExtensions\r\n{\r\n#if NETSTANDARD1_3\r\n    public static void WriteEntryTo(this IReaderEntry reader, string filePath);\r\n    /// \u003csummary\u003e\r\n    /// Extract all remaining unread entries to specific directory, retaining filename\r\n    /// \u003c/summary\u003e\r\n    public static void WriteAllToDirectory(this IReader reader, string destinationDirectory,\r\n                                            ExtractionOptions options = null);\r\n\r\n    /// \u003csummary\u003e\r\n    /// Extract to specific directory, retaining filename\r\n    /// \u003c/summary\u003e\r\n    public static void WriteEntryToDirectory(this IReaderEntry reader, string destinationDirectory,\r\n                                                ExtractionOptions options = null);\r\n\r\n    /// \u003csummary\u003e\r\n    /// Extract to specific file\r\n    /// \u003c/summary\u003e\r\n    public static void WriteEntryToFile(this IReaderEntry reader, string destinationFileName,\r\n                                        ExtractionOptions options = null);\r\n#endif\r\n}\r\n[Flags]\r\npublic enum ExtractionOptions\r\n{\r\n    None,\r\n    /// \u003csummary\u003e\r\n    /// overwrite target if it exists\r\n    /// \u003c/summary\u003e\r\n    Overwrite,\r\n\r\n    /// \u003csummary\u003e\r\n    /// extract with internal directory structure\r\n    /// \u003c/summary\u003e\r\n    ExtractFullPath,\r\n\r\n    /// \u003csummary\u003e\r\n    /// preserve file time\r\n    /// \u003c/summary\u003e\r\n    PreserveFileTime,\r\n\r\n    /// \u003csummary\u003e\r\n    /// preserve windows file attributes\r\n    /// \u003c/summary\u003e\r\n    PreserveAttributes,\r\n}\r\n```\r\n\r\nSample usage\r\n```csharp\r\npublic static void Main() \r\n{\r\n    using(var reader = ReaderFactory.Open(\"C:\\\\test.zip\"))\r\n    {\r\n        foreach(var entry in reader)\r\n        {\r\n            if (!entry.IsDirectory)\r\n            {\r\n                entry.WriteEntryToDirectory(\"D:\\\\temp\", ExtractionOptions.ExtractFullPath);\r\n            }\r\n        }\r\n    }\r\n\r\n    using(var reader = ReaderFactory.Open(\"C:\\\\test.zip\"))\r\n    {\r\n        reader.WriteAllToDirectory(\"D:\\\\temp2\", ExtractionOptions.ExtractFullPath);\r\n    }\r\n\r\n//no explicit using statement for IReader\r\n    foreach(var entry in ReaderFactory.Open(\"C:\\\\test.zip\")))\r\n    {\r\n        if (entry.Key.StartsWith(\"x\"))\r\n        {\r\n            using(var data = entry.OpenRead()) \r\n            {\r\n                data.CopyTo(new MemoryStream());\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nCan expand out to the show the generic Archive API too.",
                                           "updatedAt":  "2017-06-13T07:44:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwODEyODQ0MA==",
                                           "createdAt":  "2017-06-13T14:09:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "svick",
                                           "body":  "@ianhays \r\n\r\n\u003e My main concern is that I really want to do our compression expansion **right**. There are a ton of questions around design and usability that I want answered well before we take *anything* like this issue, dotnet/corefx#9237, or dotnet/corefx#9709.\r\n\r\nWould it then make sense to design (and implement) an initial version of the whole compression expansion in corefxlab? That way, all the related APIs can be designed together and easily inform each other.",
                                           "updatedAt":  "2017-06-13T14:09:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwODEzMjIwNQ==",
                                           "createdAt":  "2017-06-13T14:21:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamhathcock",
                                           "body":  "Putting it wholesale together as a real thing in corefxlab makes sense.  Evolving the API might be too slow.",
                                           "updatedAt":  "2017-06-13T14:21:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwODE5NjkxOA==",
                                           "createdAt":  "2017-06-13T17:53:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ianhays",
                                           "body":  "\u003eWould it then make sense to design (and implement) an initial version of the whole compression expansion in corefxlab? That way, all the related APIs can be designed together and easily inform each other.\r\n\r\nThat is probably the best idea. We can design the large structure in corefxlab, then move small pieces to corefx one-by-one with their own justification so that we can actually get them through API review.\r\n\r\n\u003eHere\u0027s a rough Reader API based on what I\u0027ve done with SharpCompress and making the Reader itself be IEnumerable might not quite be correct.\r\n\r\nI like that too. Your rough API is pretty similar to what I had in mind.\r\n\r\nA couple suggestions:\r\n- ReaderOptions should include an option to specify the `ArchiveType` explicitly.\r\n- ArchiveType.GZip should be called TarGZip or GZipTar to avoid confusion.\r\n- ExtractionOptions should have a `PreservePermissions` entry.\r\n- Should there be some relation between `IReaderEntry` and `IEntry`? Where is the latter used?\r\n- Instead of having `IReader.WriteEntryTo` and friends, I think those should be extension methods on the IReaderEntry (or IEntry) itself.\r\n- All of the instances of `Reader`/`IReader` should be replaced with `ArchiveReader` or `IArchiveReader` (or something like that).\r\n\r\nOn a more general note, could you explain why you split reading and writing to their own interfaces/classes? Having a single `IArchive` seems more intuitive and usable despite opening up some notsupported operations e.g. attempting to write to an archive that is being read.",
                                           "updatedAt":  "2017-06-13T17:53:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwODE5NzI5Mw==",
                                           "createdAt":  "2017-06-13T17:54:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ianhays",
                                           "body":  "\u003epublic interface IEntry\r\n\r\nIt should be possible to combine this with the concept of a compression algorithm interface a la https://github.com/dotnet/corefx/issues/9709.",
                                           "updatedAt":  "2017-06-13T17:54:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwODIyMTY3NQ==",
                                           "createdAt":  "2017-06-13T19:23:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamhathcock",
                                           "body":  "\u003e ReaderOptions should include an option to specify the ArchiveType explicitly.\r\n\r\nMakes sense to explicitly try an ArchiveType.\r\n\u003e ArchiveType.GZip should be called TarGZip or GZipTar to avoid confusion.\r\n\r\nThat\u0027s a way to go.  Explicitly identify Tar archives with a matching single file compression.\r\n\u003e ExtractionOptions should have a PreservePermissions entry.\r\n\r\nCan do.\r\n\u003e Should there be some relation between IReaderEntry and IEntry? Where is the latter used?\r\n\r\nIEntry is used with IArchive.  Just want to reuse the object among both the forward-only API and random access API.\r\n\u003e Instead of having IReader.WriteEntryTo and friends, I think those should be extension methods on the IReaderEntry (or IEntry) itself.\r\n\r\nOnly one of the extensions is for IReader.  The others are for IReaderEntry.  I guess it\u0027s not explicit as they\u0027re all in the same extension class.\r\n\u003e All of the instances of Reader/IReader should be replaced with ArchiveReader or IArchiveReader (or something like that).\r\n\r\nI disagree.  Archive is random access (like the current ZipArchive is random access).  The forward-only requires a different way of thinking.  This goes back to using IEnumerable or not.  Archive is a \"nicer\" API.  However, for perf concerns, you should learn a specialized forward-only API (Reader).   There should be a matching ArchiveFactory that is random access and can be read/write.  This is what exists in SharpCompress.  If you try to combine random access and forward-only perf in the same API, you\u0027re in for a world of hurt.\r\n\r\n\u003e It should be possible to combine this with the concept of a compression algorithm interface a la dotnet/corefx#9709.\r\n\r\nI don\u0027t think so.  You could probably put DeflateStream, LZMAStream, etc behind CompressionStream.  IEntry is about reading the metadata of an entry in an archive.  Then choosing to read/extract the data or skip it.",
                                           "updatedAt":  "2017-06-13T19:23:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwODU3MDY4Ng==",
                                           "createdAt":  "2017-06-14T22:00:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ianhays",
                                           "body":  "\u003eThat\u0027s a way to go. Explicitly identify Tar archives with a matching single file compression.\r\n\r\nYeah. It\u0027s not ideal though.\r\n\r\n\u003eIEntry is used with IArchive. Just want to reuse the object among both the forward-only API and random access API.\r\n\u003eOnly one of the extensions is for IReader. The others are for IReaderEntry. I guess it\u0027s not explicit as they\u0027re all in the same extension class.\r\n\r\nI see, thanks.\r\n\r\n\u003eThis is what exists in SharpCompress. If you try to combine random access and forward-only perf in the same API, you\u0027re in for a world of hurt.\r\n\r\nTo me it seems like a lot of distinct interfaces and classes to protect the programmer from themselves. I\u0027d personally much rather use one interface/class like how ZipArchive can either read or write depending on the stream passed to it.",
                                           "updatedAt":  "2017-06-14T22:00:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwODY0OTYwMQ==",
                                           "createdAt":  "2017-06-15T07:16:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC5co1g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "IDisposable",
                                                                               "createdAt":  "2023-04-07T15:45:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "adamhathcock",
                                           "body":  "\u003eYeah. It\u0027s not ideal though.\r\n\r\nThen we don\u0027t need it!  Can already match based on headers.\r\n\r\n\u003e To me it seems like a lot of distinct interfaces and classes to protect the programmer from themselves.\r\n\r\nIt\u0027s not about protecting, it\u0027s about guiding.  People often say they like the SharpCompress API better than others because its more explicit.  I\u0027m definitely against combining the forward-only and random access scenarios.  The use-cases have very different ways they need to be handled and forcing the APIs together feels unnatural.  Knowing which methods/properties can be used and when puts a lot of cognitive burden on the user.  Fixing this doesn\u0027t result in reduced performance and simpler code.\r\n\r\n\u003e I\u0027d personally much rather use one interface/class like how ZipArchive can either read or write depending on the stream passed to it.\r\n\r\nThe Archive API does do read/writes in SharpCompress.  The Reader/Writer API has a clean break as these actions in a forward-only scenario are very different.\r\n\r\nI\u0027m just offloading my experience with SharpCompress.  I\u0027m not saying there isn\u0027t a better way than the direction I\u0027ve gone but I don\u0027t want the same mistakes repeated.\r\n",
                                           "updatedAt":  "2017-06-15T07:16:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwODY2NDUzMw==",
                                           "createdAt":  "2017-06-15T08:26:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODLfwpQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "LarinLive",
                                                                               "createdAt":  "2023-10-31T18:41:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "qmfrederik",
                                           "body":  "\u003e I disagree. Archive is random access (like the current ZipArchive is random access). The forward-only requires a different way of thinking. This goes back to using IEnumerable or not. Archive is a \"nicer\" API. However, for perf concerns, you should learn a specialized forward-only API (Reader). There should be a matching ArchiveFactory that is random access and can be read/write. This is what exists in SharpCompress. If you try to combine random access and forward-only perf in the same API, you\u0027re in for a world of hurt.\r\n\r\nSome archive types are designed to be read forward-only (such as CPIO or tar archives). On the other hand, zip archives have a central directory at the end of the file, so you can have a very efficient random access API for zip archives, too.",
                                           "updatedAt":  "2017-06-15T08:26:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwODY2NTkzMg==",
                                           "createdAt":  "2017-06-15T08:32:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamhathcock",
                                           "body":  "\u003e Some archive types are designed to be read forward-only (such as CPIO or tar archives). On the other hand, zip archives have a central directory at the end of the file, so you can have a very efficient random access API for zip archives, too.\r\n\r\nTrust me, I know.  I\u0027ve been dealing and creating SharpCompress for almost a decade.\r\n\r\nFor random access APIs (Archive):  If there is no central directory, then you scan the file.  If the sizes of the entries are known, then you can just seek to headers and it\u0027s not a big deal.\r\n\r\nZip is the only format that really does have a central directory.  7Zip has funky stuff (and I hate it ) and everything else is basically `\u003cheader\u003e\u003cdata\u003e\u003cheader\u003e\u003cdata\u003e` (RAR, Tar, etc.) so they need to be scanned.\r\n\r\nMy point is that for very large files in certain cases you want a forward-only API to for performance reasons.  Everything except 7Zip and Zip64 (when writing) can be done this way.  Zip has post data descriptors when writing out (though Zip64 doesn\u0027t support this).  Tar can be written out as a forward-only archive if you know the data size for the header.\r\n",
                                           "updatedAt":  "2017-06-15T08:36:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwOTExNTI1Ng==",
                                           "createdAt":  "2017-06-16T19:32:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC5cpHw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "IDisposable",
                                                                               "createdAt":  "2023-04-07T15:47:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ianhays",
                                           "body":  "\u003eThen we don\u0027t need it! Can already match based on headers.\r\n\r\nI was more thinking about having it for the Writer. \r\n\r\n\u003eIt\u0027s not about protecting, it\u0027s about guiding. People often say they like the SharpCompress API better than others because its more explicit. I\u0027m definitely against combining the forward-only and random access scenarios. The use-cases have very different ways they need to be handled and forcing the APIs together feels unnatural. Knowing which methods/properties can be used and when puts a lot of cognitive burden on the user. Fixing this doesn\u0027t result in reduced performance and simpler code.\r\n\r\nI definitely don\u0027t disagree with you. I personally have always disliked having the same class for writing/reading because it\u0027s more difficult to reason about. I don\u0027t even like the words \u0027Write\u0027/\u0027Read\u0027 being used in DeflateStream/GZipStream, but they\u0027re necessary to implement Stream.\r\n\r\nI mostly just want to make sure we\u0027re avoiding unnecessary duplication and/or API\u0027s with low usage from redundancy. \r\n\r\nYou\u0027ve convinced me that we should at least have an IForwardArchive and an IArchive. \r\n\r\nIf I was designing this from scratch I would probably aim to have something like (very rough):\r\n\r\n```c#\r\n    public interface IForwardArchive : IEnumerable\u003cIArchiveEntry\u003e\r\n    {\r\n        // Reader functions\r\n        IEnumerator\u003cIArchiveEntry\u003e GetEnumerator();\r\n        IReaderEntry CurrentEntry { get; }\r\n\r\n        // Writer functions\r\n        void Write(string filename, Stream source, DateTime? modificationTime);\r\n\r\n        // Shared functions\r\n        ArchiveType Type { get; }\r\n        void Dispose();\r\n    }\r\n\r\n    public interface IArchive : IForwardArchive\r\n    {\r\n        IEnumerable\u003cIArchiveEntry\u003e Entries { get; }\r\n        IEnumerable\u003cIVolume\u003e Volumes { get; }\r\n\r\n        bool IsSolid { get; }\r\n        bool IsComplete { get; }\r\n        long TotalSize { get; }\r\n        long TotalUncompressSize { get; }\r\n    }\r\n```\r\n\r\n",
                                           "updatedAt":  "2018-12-06T15:42:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwOTIwNTAwOQ==",
                                           "createdAt":  "2017-06-17T09:41:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamhathcock",
                                           "body":  "\u003eI was more thinking about having it for the Writer.\r\n\r\nYes, with a writer you have to specify an archive type.\r\n\r\n\u003eI mostly just want to make sure we\u0027re avoiding unnecessary duplication and/or API\u0027s with low usage from redundancy.\r\n\r\n\u003eYou\u0027ve convinced me that we should at least have an IForwardArchive and an IArchive.\r\n\r\n\u003eIf I was designing this from scratch I would probably aim to have something like (very rough):\r\n\r\nI don\u0027t think that layout quite works.  You shouldn\u0027t have `CurrentEntry` on IArchive.  It doesn\u0027t have the concept of a current entry because it\u0027s random access.  There is very little shared between `IArchive` and `IForwardArchive` really.  The concepts just don\u0027t match much other than you\u0027re dealing with entries.  One case is a only an enumerable the other is a collection.  \r\n\r\nYou also want to remove `Write` from the forward-only reading functions.  For a forward-only writer, you want to explicitly create an entry each time and pass a byte stream to the writer to handle a potential large stream or network stream just one at a time.  Again, mixing writing and reading in a forward-only context here just creates confusion in the API.\r\n\r\n\u003e I don\u0027t even like the words \u0027Write\u0027/\u0027Read\u0027 being used in DeflateStream/GZipStream, but they\u0027re necessary to implement Stream.\r\n\r\nI don\u0027t like Read/Write being on Stream at the same time either.  One thing the Java API got correct was separating it :)  Having to always check `CanWrite` or `CanRead` can be burdensome.",
                                           "updatedAt":  "2017-06-17T09:41:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxMzg2ODA3Mg==",
                                           "createdAt":  "2017-07-08T17:00:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Should this proposal be considered in conjunction with the upcoming System.IO.Pipeline: https://github.com/dotnet/corefxlab/blob/091d12e/docs/specs/pipelines-io.md?\r\n\r\nThere seems to be compression APIs in place based on pipelines as well, under System.IO.Pipelines.Compression namespace: https://github.com/dotnet/corefxlab/tree/091d12e/src/System.IO.Pipelines.Compression",
                                           "updatedAt":  "2017-07-08T17:00:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxMzkwMjA1Mg==",
                                           "createdAt":  "2017-07-09T06:28:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "It is currently unclear if `System.IO.Pipeline` will make it into CoreFX or not. There are still active discussions around that. It may just sit on top of CoreFX.\r\n\r\nIf there are Compression investments in the Pipelines space, I would hope they are considered to be done in lower layers (`System.IO.Compression`) first, so that more people/apps can benefit from the investments. @joshfree @KrzysztofCwalina can you please comment?",
                                           "updatedAt":  "2017-07-09T06:28:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxNDE3NzUzNQ==",
                                           "createdAt":  "2017-07-10T17:30:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOALIa-Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2017-07-10T20:05:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "jnm2",
                                                                               "createdAt":  "2017-07-11T02:07:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "joshfree",
                                           "body":  "\u003e If there are Compression investments in the Pipelines space, I would hope they are considered to be done in lower layers (System.IO.Compression) first, so that more people/apps can benefit from the investments. \r\n\r\nYes, any actual compression investments are being done at a lower level.  For instance one of our summer interns is working on System.IO.Compression.Brotli for a future release in .NET Core @ https://github.com/dotnet/corefxlab/tree/master/src/System.IO.Compression.Brotli.",
                                           "updatedAt":  "2017-07-10T17:30:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0NDk5MzMzNA==",
                                           "createdAt":  "2017-11-16T17:15:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBZ7XJQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "LarinLive",
                                                                               "createdAt":  "2018-10-11T18:59:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SommerEngineering",
                                                                               "createdAt":  "2019-01-20T08:29:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KieraKujisawa",
                                                                               "createdAt":  "2019-02-14T01:15:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "stephenmcd1",
                                                                               "createdAt":  "2020-02-05T23:44:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ogyeopsal",
                                                                               "createdAt":  "2020-12-14T20:04:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "twsouthwick",
                                           "body":  "We have encountered a few issues in System.IO.Packaging that users of DocumentFormat.OpenXml (a common Office document manipulation library) have hit that require streaming support in zip files. I\u0027m not familiar with the domain enough to add much to the API discussion, but would love to see some movement on this issue.",
                                           "updatedAt":  "2017-11-16T17:15:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0NTAwMjY3Mw==",
                                           "createdAt":  "2017-11-16T17:47:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAnpHIg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "LarinLive",
                                                                               "createdAt":  "2018-10-11T18:59:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SommerEngineering",
                                                                               "createdAt":  "2019-01-20T08:29:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KieraKujisawa",
                                                                               "createdAt":  "2019-02-14T01:16:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Costo",
                                                                               "createdAt":  "2019-04-26T15:11:24Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  null,
                                           "body":  "I want to add my voice agreeing with @twsouthwick - this is critically needed for the OpenXML library.\r\n\r\nthanks - dave",
                                           "updatedAt":  "2017-11-16T17:47:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2NzQ0ODEyNw==",
                                           "createdAt":  "2019-02-26T13:58:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA3bzWw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "markusschaber",
                                                                               "createdAt":  "2019-12-17T09:15:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "deinok",
                                           "body":  "In the case of `*.tar.*` files, why add direct support for the compression cases? \r\nI mean, it feels more natural to for example call the constructor with a GZipStream ",
                                           "updatedAt":  "2019-02-26T13:58:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5NzQ1Mjc0OQ==",
                                           "createdAt":  "2019-05-30T19:21:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "MOved to future. This is not a must fix for 3.0",
                                           "updatedAt":  "2019-05-30T19:21:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2NjI4NzM2OQ==",
                                           "createdAt":  "2019-12-16T23:03:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "carlossanlop",
                                           "body":  "Triage:\r\nComplex feature and entirely different API model. Significant investment. There seems to be interest in it, including partners like NuGet and WPF. It could probably be implemented on top of DeflateStream. The API design could be similar to the one required for TAR dotnet/runtime#1540 .",
                                           "updatedAt":  "2019-12-16T23:04:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2NjQyNjkzMg==",
                                           "createdAt":  "2019-12-17T07:56:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamhathcock",
                                           "body":  "Agreed with the API similar to Tar!\r\n\r\nThe problem with Zip is that the format is streamable but not all Zips are created with the required header info to make them stream-readable.  I just throw exceptions in Sharpcompress in this case.\r\n\r\nThe current implementation of Zip requires using the dictionary at the end.\r\n\r\nGZipStream is also a problem because the current implementation doesn\u0027t expose the file headers/metadata to use it properly as an archive format.  (Related to dotnet/corefx#7570 )",
                                           "updatedAt":  "2019-12-17T07:56:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2NjQ0MzU0Mg==",
                                           "createdAt":  "2019-12-17T08:47:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "scalablecory",
                                           "body":  "I have a library that parses XLSX files which would have made good use of this.",
                                           "updatedAt":  "2019-12-17T08:47:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2NjQ0ODc3NA==",
                                           "createdAt":  "2019-12-17T09:02:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "markusschaber",
                                           "body":  "I like the general idea, despite of the problems with ZIP format. In most environments, one might be able to constrain itself to compliant ZIPs, and it\u0027s very useful for TAR , too. \r\n\r\nHowever, some of the methods might need Async variants, I guess, especially `WriteEntryTo` which might potentially take a very long time. :-)",
                                           "updatedAt":  "2019-12-17T09:02:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzNzgzODIyOA==",
                                           "createdAt":  "2020-06-02T22:19:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "iUnknwn",
                                           "body":  "Wanted to add a bit more information on this topic - I am one of the authors\u0027 of Microsoft SimpleRemote that we use for testing in Surface, and we ended up using a 3rd party tar library because there was no way to do forward-only operations with what\u0027s included in the current Compression namespace. \r\n\r\nThis is less of an API defect and more of a problem with the zip format itself - Zip is easy to stream when writing to it, because it stores metadata for the files at the end of the archive, so you can easily write to the stream without ever seeking. Reading, however, is incredibly difficult, because you need to read end of the file before operating on the archive. \r\n\r\nTo address this, if you try to open a non-seekable stream with ZipArchive, .NET internally reads the entire stream into a memory stream before processing (this works in some cases, but does not work on zip files larger than 4GB, as memory stream does not support streams larger than int32 bytes).\r\n\r\nHere\u0027s an example of where this is a problem: Let\u0027s say you\u0027re reading a zip stream over a network - this means you\u0027d need to download the entire file before being able to access any of the contents. If we compare this to tar (or cpio, or any tar-like format), we don\u0027t have this restriction - we can freely read elements as they come in, since all metadata for a given file is just before that file. \r\n\r\nThis is a problem for any case where the source stream does not support seeking (if we\u0027re encrypting data using cryptostreams, for example, they also aren\u0027t seekable). Adding tar, or another archive that supports forward only reads and writes, would make these scenarios much more straightforward and performant.\r\n\r\nOne note, though - if we implement tar, please use something that, at minimum, supports USTAR (and, ideally, supports the 2001 PAX extensions, so we can write files with unlimited size - historic tar has an 8GB/entry cap).  \r\n",
                                           "updatedAt":  "2020-06-02T22:19:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzODk4OTQzNw==",
                                           "createdAt":  "2020-06-04T17:14:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamhathcock",
                                           "body":  "SharpCompress does what you need but the Tar support isn’t super great.  Would love help expanding it.",
                                           "updatedAt":  "2020-06-04T17:14:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0MDk3NDY2NQ==",
                                           "createdAt":  "2020-06-09T01:31:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "iUnknwn",
                                           "body":  "@adamhathcock I\u0027ll take a look! From a quick glance at the code, it looks like SharpCompress Tar entries are USTAR + GNU extensions, correct? It should be pretty easy to add basic support for PAX extensions for long-file, long-link, and large sizes. ",
                                           "updatedAt":  "2020-06-09T01:31:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42dVbQ",
                                           "createdAt":  "2021-09-06T13:40:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bjh0",
                                           "body":  "Is there an update on this issue? This issue affects my use of the OpenXML SDK.",
                                           "updatedAt":  "2021-09-06T13:40:23Z"
                                       }
                                   ],
                         "totalCount":  37
                     },
        "title":  "Add a Forward-only API for System.IO.Compression",
        "labels":  [
                       "api-suggestion",
                       "area-System.IO.Compression"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/24149",
        "createdAt":  "2017-11-15T17:58:36Z",
        "number":  24149,
        "author":  "twsouthwick",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODJLkIQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "droyad",
                                            "createdAt":  "2019-03-18T01:37:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "morti12",
                                            "createdAt":  "2022-07-19T09:51:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ashahabov",
                                            "createdAt":  "2022-09-15T10:30:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Alexander-Leontiev",
                                            "createdAt":  "2022-10-03T10:28:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aleksei-kupriianov",
                                            "createdAt":  "2022-10-03T10:30:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "oybekabdullaev",
                                            "createdAt":  "2022-10-03T10:32:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nick01one",
                                            "createdAt":  "2022-10-03T10:35:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "msokolovsky-appulate",
                                            "createdAt":  "2022-10-03T10:36:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SKamynin",
                                            "createdAt":  "2022-10-03T10:39:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aduzenko",
                                            "createdAt":  "2022-10-03T10:49:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AlexandraKim",
                                            "createdAt":  "2022-10-05T11:00:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "qnku",
                                            "createdAt":  "2023-02-24T16:23:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "markusroessler",
                                            "createdAt":  "2023-04-30T17:49:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sveinungf",
                                            "createdAt":  "2023-10-08T08:39:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GerardSmit",
                                            "createdAt":  "2023-12-11T14:35:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ericstj",
                                            "createdAt":  "2025-04-04T01:27:24Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "rokonec",
                                            "createdAt":  "2025-07-30T15:58:21Z"
                                        }
                                    ],
                          "totalCount":  17
                      },
        "updatedAt":  "2025-08-15T12:29:35Z",
        "body":  "When creating a package on .NET Core, you have to call Dispose or Close to get the contents written out to the underlying stream. This works on .NET Framework, but fails on .NET Core:\r\n\r\n ```csharp\r\n[Fact]\r\npublic void FlushSavesPackageContents()\r\n{\r\n    var uri = new Uri(\"/something\", UriKind.Relative);\r\n    var contentType = \"something/other\";\r\n\r\n    byte[] CreatePackage()\r\n    {\r\n        using (var ms = new MemoryStream())\r\n        {\r\n            using (var package = Package.Open(ms, FileMode.Create))\r\n            {\r\n                package.CreatePart(uri, contentType);\r\n\r\n                Assert.Empty(ms.ToArray());\r\n\r\n                package.Flush();\r\n\r\n                // All data should be written after calling flush\r\n                return ms.ToArray();\r\n            }\r\n        }\r\n    }\r\n\r\n    var bytes = CreatePackage();\r\n\r\n    Assert.NotEmpty(bytes);\r\n\r\n    using (var ms = new MemoryStream(bytes))\r\n    using (var package = Package.Open(ms))\r\n    {\r\n        Assert.True(package.PartExists(uri));\r\n        Assert.Equal(contentType, package.GetPart(uri).ContentType);\r\n    }\r\n}\r\n```\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOuqVAiQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0NDY3Njk3NA==",
                                           "createdAt":  "2017-11-15T18:01:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "twsouthwick",
                                           "body":  "It appears that this is due to not flushing the underlying zip. In [.NET Framework](http://referencesource.microsoft.com/#WindowsBase/Base/System/IO/Packaging/ZipPackage.cs,333) it is flushed, but not in [.NET Core](http://source.dot.net/#System.IO.Packaging/System/IO/Packaging/ZipPackage.cs,197). I\u0027ll try adding that in and see if it works.",
                                           "updatedAt":  "2017-11-15T18:01:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0NDY5ODU1Nw==",
                                           "createdAt":  "2017-11-15T19:17:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "twsouthwick",
                                           "body":  "@ianhays ZipArchive does not have a Flush method. Is there a way to flush the current archive state to a stream, or is this part of the issue to get streaming support for compression?",
                                           "updatedAt":  "2017-11-15T19:17:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0NDcyNDU1Mw==",
                                           "createdAt":  "2017-11-15T20:52:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ianhays",
                                           "body":  "I\u0027m not sure why ZipArchive in netcore doesn\u0027t have a flush method. It was ported to CoreFX without one. It could be that it was removed since it was internal-only in netfx and not used in netcore.\r\n\r\nWe could probably add it as public, at least for ZipArchiveMode.Create. I\u0027m not sure how that would affect being able to open some entries though. We would need to add lots of tests to first verify the netfx Flushing behavior - which may be tricky since it\u0027s not exposed through ZipArchive - then try to match that in core. At that point a streaming API may be the better solution.",
                                           "updatedAt":  "2017-11-15T20:52:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0NDczNDQ4Nw==",
                                           "createdAt":  "2017-11-15T21:29:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "twsouthwick",
                                           "body":  "Yeah - I took a shot at just calling the WriteFile method (which is what the Dispose method calls) in lieu of a flush and it caused a lot of problems. It seems to close streams, so it expects to be called in the dispose. Exposing it would be nice, but I agree that there will be a need to add a bunch of tests for it. \r\n\r\nWe seem to be finding many issues with System.IO.Packaging in the DocumentFormat.OpenXml library that would be fixed with the streaming API...",
                                           "updatedAt":  "2017-11-15T21:29:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1ODc2ODA0MQ==",
                                           "createdAt":  "2018-01-18T20:14:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "daniel-white",
                                           "body":  "Any progress on this? we use DocumentFormat.OpenXml and it has intentional bugs that keep parity between .net fx and .net core. see OfficeDev/Open-XML-SDK#380",
                                           "updatedAt":  "2018-01-18T20:14:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1ODc3OTA3Mg==",
                                           "createdAt":  "2018-01-18T20:57:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ianhays",
                                           "body":  "There hasn\u0027t been any progress that I\u0027m aware of, no. I\u0027ve updated the title and the tags with the current state of the issue and marked it as `up-for-grabs`.\r\n\r\nThe work item here is to plan an API addition of Flush to ZipArchive. To do that, a formal proposal will have to be made and the design questions in the comments above should be answered.",
                                           "updatedAt":  "2018-01-18T20:57:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQwNjgxODk4OA==",
                                           "createdAt":  "2018-07-21T19:37:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "So I have just hit this issue too. Porting some code from FX to .Net. Need ZipPackage to be able to flush the stream. Is there any workaround ? Else, I can take on adding the API to ZipArchive.",
                                           "updatedAt":  "2018-07-21T19:37:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQwNzA1ODc0MA==",
                                           "createdAt":  "2018-07-23T13:31:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAaAbTQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "twsouthwick",
                                                                               "createdAt":  "2018-08-01T04:39:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "odhanson",
                                           "body":  "Sorry, replaced my github account. So the message above is from me.\r\n\r\nI have made the changes to add a Flush API and added tests to verify. I will follow through the procedures for getting the API and change approved.",
                                           "updatedAt":  "2018-07-23T13:31:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxMjAxNjUyMw==",
                                           "createdAt":  "2018-08-10T08:37:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SinxHe",
                                           "body":  "when will the flush function will be added?",
                                           "updatedAt":  "2018-08-10T08:37:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxMjI4MjAzNA==",
                                           "createdAt":  "2018-08-11T15:24:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "odhanson",
                                           "body":  "@SinxHe , unfortunately fixing this issue is a bit more tricky than I initially anticipated. As I have managed to work around this issue for now, I am not sure when I will be able to get back to work on a fix for this. ",
                                           "updatedAt":  "2018-08-11T15:24:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxNDM4MDg2NA==",
                                           "createdAt":  "2018-08-20T16:34:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "twsouthwick",
                                           "body":  "@odhanson Thanks for taking a look at this. Can you share a fork with your current progress so someone else can build off of what you\u0027ve tried?",
                                           "updatedAt":  "2018-08-20T16:34:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxNDM5MTgyNg==",
                                           "createdAt":  "2018-08-20T17:09:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "odhanson",
                                           "body":  "@twsouthwick \r\n\r\nSure. I have made a fork under my account:\r\n[https://github.com/odhanson/corefx/tree/dev/Flush](https://github.com/odhanson/corefx/tree/dev/Flush)\r\n\r\nThere are two commits, the first adds the API and some tests. The second implements the API, and adds some tests that failed my implementation :(. So the good news is, that we do have a bunch of tests to base off of.\r\n",
                                           "updatedAt":  "2018-08-20T17:09:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0OTY5OTE3Nw==",
                                           "createdAt":  "2020-06-25T16:55:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MathewRimmington",
                                           "body":  "Hi, I\u0027m wondering if there has been any progress on this issue? I\u0027m seeing an out of memory exception when trying to create a huge spreadsheet. As the OpenXmlWriter is writing contents the memory usage continues to creep up, but there is currently no way to flush the data so the entire contents of the sheet remain in memory.\r\n\r\nI\u0027m also curious to know what the work around is.",
                                           "updatedAt":  "2020-06-25T16:55:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45_v5A",
                                           "createdAt":  "2021-11-18T16:11:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCDVLNw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "twsouthwick",
                                                                               "createdAt":  "2021-11-19T15:34:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "carlossanlop",
                                           "body":  "Thank you all for the patience. We are planning work for .NET 7 and fixing the bugs affecting System.IO.Packaging is most likely going to be among our top priorities for the Compression area specifically.\r\n\r\n@odhanson Thank you for the code you provided: https://github.com/odhanson/corefx/tree/dev/Flush . It was extremely helpful!\r\n\r\nI debugged it to understand the problem better (I adapted them to dotnet/runtime of course) and I would like to share the following feedback:\r\n\r\n- The [`Flush` method](https://github.com/odhanson/corefx/blob/9448d0c5d5fb41af4c25162f6b46eceb87c002f0/src/System.IO.Compression/src/System/IO/Compression/ZipArchive.cs#L166-L175) is writing the entries into the target stream via `WriteFile()`, [just like `Dispose`](https://github.com/odhanson/corefx/blob/9448d0c5d5fb41af4c25162f6b46eceb87c002f0/src/System.IO.Compression/src/System/IO/Compression/ZipArchive.cs#L224-L234), but without disposing the internal streams afterwards. This means we can call `Flush` inside `Dispose` to avoid the code duplication. It\u0027s a simple enough change.\r\n- I noticed that you added a line to [clear the entries at the end of `WriteFile`](https://github.com/odhanson/corefx/blob/9448d0c5d5fb41af4c25162f6b46eceb87c002f0/src/System.IO.Compression/src/System/IO/Compression/ZipArchive.cs#L672). I assume you added this after running the unit tests and noticing that, after calling `Flush()`, the file was getting the entries written twice.\r\n- To fix this problem, we need to add logic to detect flushing without disposal separately for `Update` and for `Create`. This wouldn\u0027t be a trivial change.\r\n\r\nThe logic to handle creation and update is too convoluted and intermixed. So before making any `Flush`-related changes, I\u0027m thinking we could potentially benefit from refactoring the code using [the strategy pattern](https://en.wikipedia.org/wiki/Strategy_pattern), similarly to what we did [for `FileStream` in .NET 6](https://github.com/dotnet/runtime/tree/3de620787ab3962dcb89664a691cf917653d5bd2/src/libraries/System.Private.CoreLib/src/System/IO/Strategies).\r\n\r\nAfter we refactor the code, we could implement `Flush` more easily, and have clear and separate logic for creation and for updating.\r\n\r\nI also need to keep in mind Ian\u0027s concern shared above:\r\n\r\n\u003e We could probably add it as public, at least for ZipArchiveMode.Create. I\u0027m not sure how that would affect being able to open some entries though. We would need to add lots of tests to first verify the netfx Flushing behavior - which may be tricky since it\u0027s not exposed through ZipArchive - then try to match that in core. At that point a streaming API may be the better solution.\r\n\r\n@twsouthwick  I\u0027ll continue investigating how feasible it is to add `Flush` and will let you know if/when I have an API proposal.",
                                           "updatedAt":  "2021-11-18T16:37:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46G1jp",
                                           "createdAt":  "2021-11-21T18:39:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "carlossanlop",
                                           "body":  "@twsouthwick (and/or anyone else monitoring this issue),\r\n\r\nI have some questions that arised after I read this:\r\nhttps://en.wikipedia.org/wiki/ZIP_(file_format)#Structure\r\n\r\nLet\u0027s ignore for a moment what .NET Framework is doing. What behavior do you expect from `Flush` when...\r\n\r\n1) The stream is non-seekable?\r\n2) The stream is seekable?\r\n\r\n#### Non-seekable stream\r\n\r\nLet\u0027s say you\u0027re working with a stream that is being sent to you from the network.\r\n\r\n###### Deleting\r\n\r\n- If we delete an entry, then call `Flush`, we can\u0027t really delete the file, so will simply append an updated Central Directory at the end of the stream that would exclude the \"deleted\" file from the list.\r\n- Alternative: we save the location where the old CD starts, then we overwrite the CD with the new one, which would exclude the \"deleted\" entry from its existing list.\r\n\r\nNote: We currently cannot open a `ZipArchive` with `ZipArchiveMode.Update` if the stream is non-seekable, but I\u0027m exploring the option of removing the restriction if it\u0027s feasible.\r\n\r\n###### Adding\r\n\r\n- If we add a new file, then call `Flush`, we append the new entry at the end of the file, then immediately afterwards write an updated Central Directory that contains the new file.\r\n- Alternative: we save the location where the old CD starts, then we write the new entry right where the old CD starts (overwriting it, obviously) then we would have to write a new CD after the file.\r\n \r\n#### Seekable stream\r\n\r\nLet\u0027s say you\u0027re working with a zip file loaded from disk using a `FileStream`:\r\n\r\n###### Deleting\r\n\r\n- If we delete a file, then call `Flush`, we could in theory rewrite the whole archive from start to end, ensuring we skip the deleted file and updating the CD list at the end to exclude the deleted file.\r\n- Alternative (more complicated): We iterate through the list of entries, find the first one marked as deleted, located the first byte of its header in the archive stream, then start overwriting it with the subsequent entries that are not marked as deleted, until all are rewritten, and finally write the updated CD.\r\n\r\n###### Adding\r\n\r\nI think the behavior would be the same as described for non-seekable.\r\n\r\n###### Updating a file entry\u0027s stream\r\n\r\n- Similar to deleting, we mark it as a file whose contents changed, then we either rewrite the whole archive from start to end, or\r\n- We find the first modified entry in the CD list and start overwriting everything after that file, including it, then write the updated CD with the new sizes.\r\n",
                                           "updatedAt":  "2021-11-21T19:08:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KYa9N",
                                           "createdAt":  "2022-09-15T10:36:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ashahabov",
                                           "body":  "If I understood correctly, the fix is planned for .NET 8 time?😥",
                                           "updatedAt":  "2022-09-15T10:36:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tw1o0",
                                           "createdAt":  "2023-12-05T19:53:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "exelsior",
                                           "body":  "Any progress on this?",
                                           "updatedAt":  "2023-12-05T19:53:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5uCrhn",
                                           "createdAt":  "2023-12-07T22:18:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "exelsior",
                                           "body":  "Hello, could you please recommend third party package with zip flush support?",
                                           "updatedAt":  "2023-12-07T22:18:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_WwVa",
                                           "createdAt":  "2024-05-29T06:55:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "edwardneal",
                                           "body":  "I recently submitted #102704, which implements the logic @carlossanlop describes in Flush for seekable streams (although I\u0027ve admittedly only just seen the comment - wish I\u0027d seen it earlier!) Hopefully this disposes of the more complex case.\r\n\r\nThe only ZipArchiveMode which can modify a non-seekable stream is Create. The first Flush here is simple, and I\u0027m tempted say we should throw an exception for any subsequent Flush calls:\r\n1. At that point, we\u0027re no longer Creating an archive, we\u0027re modifying it\r\n2. Any modifications we perform are going to be technically valid but strange. Adding a new archive entry is broadly fine, but modifying an archive entry will mean that we abandon the original copy and re-append it again to the file with the updated CD. This\u0027ll result in archives which are much larger than they need to be, and which will return a different set of results when streamed (because the abandoned entry will be detected until the CD is parsed.)",
                                           "updatedAt":  "2024-05-29T06:55:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6lisuV",
                                           "createdAt":  "2025-04-04T01:29:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Looks like folks are still running into this.  Given that IO.Packaging is used for many document formats I can see that Flush is a valuable feature (save without close).  @edwardneal @carlossanlop - how close do you think we are to being able to support Flush on ZipArchive?",
                                           "updatedAt":  "2025-04-04T01:29:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6lzA3q",
                                           "createdAt":  "2025-04-06T19:54:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "edwardneal",
                                           "body":  "I think we\u0027re fairly close - `ZipArchive.WriteFile` already performs most of this work. We currently block a `ZipArchive` in `Create` mode from deleting entries and from calling `Open()` more than once on an entry, which deals with the cases I was thinking about.\n\nWe have various blocks (central directory, central directory locator, etc.) at the end of the file, and `Flush` will need to write these too. It might be helpful to provide some control over whether these are written, to avoid generating files with multiple old copies of the central directory. I\u0027m not sure whether we\u0027d want to have a simple `flushFinalBlock` parameter on the `Flush` method, whether we\u0027d want some kind of `FlushMode` enum with `Incremental` and `Finalize` members, or whether we\u0027d want to make every call to `Flush` write the trailing blocks.\n\nRegardless, we\u0027ll need to plumb this through to `Package`/`ZipPackage`, keeping in mind that System.IO.Packaging targets .NET Core, Standard and Framework. `ZipPackage.FlushCore` will need to call `Flush(flushFinalBlock: true)` on its underlying `ZipArchive`. That, in turn, means that .NET Core libraries which repeatedly call `Package.Flush` will find themselves generating unnecessarily large ZIP files. We could fix that behaviour by adding a public method with the extra parameter to `Package` on .NET Core.\n\nAn initial API proposal is:\n\n```diff\nnamespace System.IO.Compression;\npublic class ZipArchive\n{\n+   // If flushFinalBlock is set to false, the blocks at the end of the file won\u0027t be written\n+   // This could instead be a FlushMode enum, with a default value of Finalize.\n+   // Alternatively, we could remove the parameter and make every Flush write the trailing blocks.\n+   public void Flush(bool flushFinalBlock = true);\n+   public ValueTask FlushAsync(bool flushFinalBlock = true, CancellationToken cancellationToken = default);\n\n+   protected virtual void FlushCore(bool flushFinalBlock);\n+   protected virtual ValueTask FlushAsyncCore(bool flushFinalBlock, CancellationToken cancellationToken);\n}\n\n// Optional. Changes below only apply to the .NET Core target.\nnamespace System.IO.Packaging;\npublic abstract class Package\n{\n    public void Flush()\n-   { /* Package-specific logic */ }\n+       =\u003e Flush(flushFinalBlock: true);\n\n+   public void Flush(bool flushFinalBlock)\n+   {\n+       /* Package-specific logic */\n+       if (flushFinalBlock) { FlushCore(); }\n+       else { FlushIncrementalCore(); }\n+   }\n\n+   protected virtual void FlushIncrementalCore() =\u003e FlushCore();\n}\n\npublic sealed class ZipPackage : Package\n{\n+   protected override void FlushIncrementalCore();\n}\n```\n\nAPI and behavioural notes:\n1. With the approval of #1541, I\u0027ve added a matching `FlushAsync` method.\n2. `FlushAsync` returns a `ValueTask` because it can complete synchronously if called when there are no changes to flush.\n3. `ZipArchive.Flush` and `ZipArchive.FlushAsync` will call `Flush` and `FlushAsync` on the underlying stream.\n4. I\u0027ve added `FlushCore` and `FlushAsyncCore` methods to `ZipArchive` because the class isn\u0027t sealed. This aligns with the planned `DisposeAsyncCore` method for the async implementation, and with the `Package.FlushCore` method in System.IO.Packaging.\n5. `ZipArchive.Flush` and `ZipArchive.FlushAsync` will throw if any streams into `ZipArchiveEntry` are open.\n6. When a `ZipArchive` in `Create` mode is flushed, we might be able to discard the compressed data for the newly-flushed entries. We can no longer access the data anyway (because we can only call `Open` on each `ZipArchiveEntry` once: to write the data in the first place) and it cuts memory usage if we\u0027re building and streaming a `ZipArchive` with very large entries - peak memory usage becomes the size of the largest entry, rather than the total size of the constructed archive.",
                                           "updatedAt":  "2025-04-06T19:54:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc66pUCJ",
                                           "createdAt":  "2025-07-29T09:00:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEcTt_Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MathewRimmington",
                                                                               "createdAt":  "2025-07-29T10:13:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "fitdev",
                                           "body":  "This really needs to be prioritized! I was affected by #114114 which suggested this issue was a duplicate of, which I guess is kind of the case, so I am writing here.\n\nThe fact that there is no support for flushing as was the case in .Net Framework means that for example Open Xml documents like docx cannot be saved mid-way so to speak by various libraries that rely on `IO.Packaging` APIs underneath. This is super inconvenient.\n\nI really think this should be re-prioritized, as it is not just about zip archives directly, but all the other use cases that rely on zip file format!",
                                           "updatedAt":  "2025-07-29T09:00:09Z"
                                       }
                                   ],
                         "totalCount":  22
                     },
        "title":  "Add Flush to ZipArchive",
        "labels":  [
                       "api-needs-work",
                       "area-System.IO.Compression"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/26084",
        "createdAt":  "2018-05-04T22:45:36Z",
        "number":  26084,
        "author":  "twsouthwick",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC9ZJeA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0xfeeddeadbeef",
                                            "createdAt":  "2018-05-05T12:10:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "danmoseley",
                                            "createdAt":  "2018-05-07T03:12:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "robertmuehsig",
                                            "createdAt":  "2018-05-07T06:08:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tomjebo",
                                            "createdAt":  "2018-05-18T17:59:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Alex69rus",
                                            "createdAt":  "2019-06-26T10:13:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ThomasBarnekow",
                                            "createdAt":  "2019-12-22T15:50:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lindexi",
                                            "createdAt":  "2020-05-09T08:40:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hectoresoto",
                                            "createdAt":  "2020-12-29T23:27:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "f1nzer",
                                            "createdAt":  "2022-07-17T19:38:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Trivivium",
                                            "createdAt":  "2024-12-11T20:45:54Z"
                                        }
                                    ],
                          "totalCount":  10
                      },
        "updatedAt":  "2025-07-26T10:39:05Z",
        "body":  "`System.IO.Packaging.Package` provides a simple abstraction over a container to hold multiple objects in a single entity. This is commonly used in nupkg packages, vsix extensions, appx, and also Office documents. The package format makes heavy use of URIs to maintain relationships between various components. However, Office will allow a user to generate an invalid URI for one of these relationships, and then opening via System.IO.Packaging fails with no easy way of recovery besides manually updating the file, which necessitates a deeper understanding of the file format that should be abstracted by the library.\r\n\r\nThis is to work around a [breaking change that occurred between 4.0-\u003e4.5](https://docs.microsoft.com/en-us/dotnet/framework/migration-guide/retargeting/4.0-4.5#systemuri-parsing-adheres-to-rfc-3987).  This proposal is to provide a way to work around that change.\r\n\r\n## Example\r\n\r\nThere are multiple issues filed on the OpenXml SDK project (which abstracts the Office format to strongly typed classes) and related projects where users have been hit by this. For example:\r\n\r\n- https://github.com/OfficeDev/Open-XML-SDK/issues/38\r\n- https://github.com/ClosedXML/ClosedXML/issues/249\r\n\r\nA simple Office document that will fail can be created by the following:\r\n\r\n1. Create a new Word document\r\n2. Add a hyperlink to an invalid URI (ie `mailto:one@`)\r\n3. Try to load with `Package`:\r\n\r\n```csharp\r\nusing (var package = Package.Open(pathToDoc))\r\n{\r\n    foreach (var part in package.GetParts())\r\n    {\r\n        part.GetRelationships();\r\n    }\r\n}\r\n```\r\n\r\nThis will fail with the following exception:\r\n\r\n```\r\nSystem.UriFormatException\r\n  HResult=0x80131537\r\n  Message=Invalid URI: The hostname could not be parsed.\r\n  Source=System.Private.Uri\r\n  StackTrace:\r\n   at System.Uri.CreateThis(String uri, Boolean dontEscape, UriKind uriKind)\r\n   at System.Uri..ctor(String uriString, UriKind uriKind)\r\n   at System.IO.Packaging.InternalRelationshipCollection.ProcessRelationshipAttributes(XmlCompatibilityReader reader)\r\n   at System.IO.Packaging.InternalRelationshipCollection.ParseRelationshipPart(PackagePart part)\r\n   at System.IO.Packaging.InternalRelationshipCollection..ctor(Package package, PackagePart part)\r\n   at System.IO.Packaging.PackagePart.EnsureRelationships()\r\n   at System.IO.Packaging.PackagePart.GetRelationshipsHelper(String filterString)\r\n   at PackagingExample.Program.Main(String[] args) in c:\\users\\tasou\\source\\repos\\PackagingExample\\PackagingExample\\Program.cs:line 15\r\n```\r\n\r\n## Proposed API\r\n\r\n```csharp\r\nnamespace System.IO.Packaging\r\n{\r\n    public abstract class Package // Existing class\r\n    {\r\n        public static Package Open(string path, FileShare packageShare, PackageSettings settings);\r\n        \r\n        public static Package Open(string path, PackageSettings settings);\r\n\r\n        public static Package Open(Stream stream, PackageSettings settings);\r\n    }\r\n\r\n    public class PackageSettings\r\n    {\r\n        public FileMode PackageMode { get; set; }\r\n\r\n        public FileAccess PackageAccess { get; set; }\r\n\r\n        public IUriProvider UriProvider { get; set; }\r\n    }\r\n\r\n    public interface IUriProvider\r\n    {\r\n        Uri CreateUri(string uriString, UriKind uriKind);\r\n    }\r\n}\r\n```\r\n\r\n## Details\r\n\r\n- The `PackageSettings` class would allow for easily adding additional settings at a later point without adding more factory methods (i.e. `Package.Open(...)`). Since the `FileMode` and `FileAccess` properties are used on all factory methods, these are added to the settings object.\r\n- The `Package.Open(...)` methods listed extend the current factory methods that take a `Stream` or a path with an optional `FileShare`.\r\n- The default implementations of `IUriProvider` would essentially be this line: https://source.dot.net/#System.IO.Packaging/System/IO/Packaging/InternalRelationshipCollection.cs,363\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOXcjZaA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxNDM4MzQ4MQ==",
                                           "createdAt":  "2018-08-20T16:42:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBbUBoA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "robertmuehsig",
                                                                               "createdAt":  "2018-08-20T16:56:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "folkcoder",
                                                                               "createdAt":  "2019-01-21T13:10:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ThomasBarnekow",
                                                                               "createdAt":  "2019-12-22T15:51:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "abelykh0",
                                                                               "createdAt":  "2020-06-09T18:07:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hectoresoto",
                                                                               "createdAt":  "2020-12-29T23:28:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lindexi",
                                                                               "createdAt":  "2021-01-04T08:32:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "twsouthwick",
                                           "body":  "@karelz How can I get this proposal approved? I\u0027m willing to implement it - many users of the Open XML SDK would appreciate this",
                                           "updatedAt":  "2018-08-20T16:42:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxNDUwMDE2Ng==",
                                           "createdAt":  "2018-08-20T23:46:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@JeremyKuhne @pjanotti is it something you can help shepherd further? If it is out of scope of your knowledge, let\u0027s just ask @twsouthwick to bring it to API review and discuss it there ...",
                                           "updatedAt":  "2018-08-20T23:46:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxNDUwMzk1Nw==",
                                           "createdAt":  "2018-08-21T00:06:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JeremyKuhne",
                                           "body":  "What I would like to see is how this proposal would be used to solve the given problem. How does an `IUriProvider` get context about the string it is given? Is context important/useful? What does the provider give back for a Uri when the input is garbage?",
                                           "updatedAt":  "2018-08-21T00:06:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxMzg3ODQyNA==",
                                           "createdAt":  "2019-07-22T17:29:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "twsouthwick",
                                           "body":  "@JeremyKuhne I don\u0027t envision the context being that important. In .NET 4.5 Uri started throwing exceptions on malformed Uris instead of just passing them through. As people start moving to .NET Core, they\u0027ll hit this more and more on office documents in DocumentFormat.OpenXml that used to work. This allows them to either sanitize the entry, or potentially subclass Uri to hold the original and also sanitize it so it\u0027ll open the package correctly.\r\n\r\nSo, this could be used by the following:\r\n\r\n```csharp\r\nPackage.Open(\"path\", new PackageSettings { UriProvider = new MalformedProvider() });\r\n\r\nclass MalformedProvider : IUriProvider\r\n{\r\n  Uri CreateUri(string uriString, UriKind uriKind)\r\n  {\r\n    if(Uri.TryCreate(uriString, uriKind, out var result))\r\n    {\r\n        return result;\r\n    }\r\n    else\r\n    {\r\n        return new MalformedUri(uriString, uriKind);\r\n    }\r\n  }\r\n}\r\n\r\ninternal class MalformedUri : Uri\r\n{\r\n    public MalformedUri(string uriString, UriKind uriKind)\r\n        : base(\"/\", uriKind)\r\n    {\r\n        Original = uriString;\r\n    }\r\n\r\n    public string Original { get; }\r\n}\r\n```\r\n\r\nAnother route that could be taken to fix this would be to allow `Uri` to have non-conformant strings so it does not throw on creation. This could be triggered from some sort of options to Uri. That would make it act like pre-.NET 4.5, but not sure what kind of impact that would have on `Uri`.",
                                           "updatedAt":  "2019-07-22T17:30:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2ODI3NzE1NQ==",
                                           "createdAt":  "2019-12-22T16:18:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ThomasBarnekow",
                                           "body":  "@JeremyKuhne, I support @twsouthwick\u0027s statement that context would not be important. In practice, this often happens because Excel, for example, interprets some text containing an \"@\" as a `mailto` URI and happily creates a hyperlink with a malformed URI. Therefore, it would be totally fine to replace those malformed URIs with pretty much any well-formed URI.\r\n\r\nFor example, since we have been waiting for a fix for quite some time now, I implemented my own workaround in which I am using `http://was-invalid-hyperlink/do-not-click` to replace whatever invalid hyperlink was found. Once those hyperlinks are fixed, the document can be opened with the Open XML SDK.",
                                           "updatedAt":  "2019-12-22T16:18:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2ODQ3NTM4Mw==",
                                           "createdAt":  "2019-12-23T13:27:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ThomasBarnekow",
                                           "body":  "@JeremyKuhne and @twsouthwick, I thought about this a little more and came up with the idea to encode the malformed URI in the `MalformedUri` instead of using `\"/\"`. I\u0027ve done this in my own workaround as follows:\r\n\r\n```csharp\r\npublic static Uri FromMalformedUriString([NotNull] string malformedUri)\r\n{\r\n    if (malformedUri == null) throw new ArgumentNullException(nameof(malformedUri));\r\n\r\n    string unescapedMalformedUri = Uri.UnescapeDataString(malformedUri);\r\n    string escapedMalformedUri = Uri.EscapeDataString(unescapedMalformedUri);\r\n\r\n    return new Uri(\"http://malformed-uri/?value=\" + escapedMalformedUri);\r\n}\r\n``` \r\n\r\nThe original malformed URI can be retrieved as follows:\r\n\r\n```csharp\r\npublic static string GetMalformedUriString([NotNull] Uri uri)\r\n{\r\n    if (uri == null) throw new ArgumentNullException(nameof(uri));\r\n\r\n    if (uri.Scheme != \"http\") throw new ArgumentException();\r\n    if (uri.Host != \"malformed-uri\") throw new ArgumentException();\r\n    if (uri.AbsolutePath != \"/\") throw new ArgumentException();\r\n\r\n    string query = uri.Query;\r\n    if (string.IsNullOrEmpty(query)) throw new ArgumentException();\r\n    if (!query.StartsWith(\"?value=\")) throw new ArgumentException();\r\n\r\n    string escapedDataValue = query.Substring(7);\r\n    string unescapeDataValue = Uri.UnescapeDataString(escapedDataValue);\r\n    return Uri.EscapeUriString(unescapeDataValue);\r\n}\r\n```\r\n\r\nAnd here\u0027s a unit test that tests this with some sample malformed URIs from actual Excel workbooks (noting that I created the third one to test unencoded strings).\r\n\r\n```csharp\r\n[Theory]\r\n[InlineData(\"mailto:CM@SAP:%20Create/Change%20Work%20Center\")]\r\n[InlineData(\"mailto:CM@SAP:%20User%20Assignement\")]\r\n[InlineData(\"mailto:CM@SAP: Create/Change Work Center\")]\r\npublic void CanCreateWellFormedUris(string malformedUri)\r\n{\r\n    Assert.Throws\u003cUriFormatException\u003e(() =\u003e new Uri(malformedUri));\r\n\r\n    // Create a valid Uri that encodes the malformed URI.\r\n    Uri validUri = MalformedUriFixer.FromMalformedUriString(malformedUri);\r\n    string malformedUriString = MalformedUriFixer.GetMalformedUriString(validUri);\r\n\r\n    _output.WriteLine(\"Original malformed URI: \" + malformedUri);\r\n    _output.WriteLine(\"Encoded malformed URI:  \" + validUri.AbsoluteUri);\r\n    _output.WriteLine(\"Restored malformed URI: \" + malformedUriString);\r\n\r\n    Assert.Equal(\r\n        Uri.EscapeUriString(Uri.UnescapeDataString(malformedUri)),\r\n        malformedUriString);\r\n}\r\n```",
                                           "updatedAt":  "2019-12-23T13:38:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNjI5NTA3OA==",
                                           "createdAt":  "2020-05-10T08:55:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lindexi",
                                           "body":  "I think we can add the IPackage interface like this code https://github.com/dotnet/runtime/commit/00a2d82d8ece11be08d296ff8e7621eeb01415bb\r\n\r\nAnd we can custom handle exception with the custom class that inherit the IPackage interface\r\n\r\nSee https://github.com/OfficeDev/Open-XML-SDK/issues/715#issuecomment-626290222",
                                           "updatedAt":  "2020-05-10T08:55:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyODA3ODAyNg==",
                                           "createdAt":  "2020-05-13T15:46:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBG3IbA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lindexi",
                                                                               "createdAt":  "2020-05-22T00:02:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "abelykh0",
                                                                               "createdAt":  "2020-06-09T18:08:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "twsouthwick",
                                           "body":  "@JeremyKuhne I\u0027ve taken another look at this since OpenXml users have been hitting it. After playing around with usage, I\u0027ve updated my proposal to the following new APIs for System.IO.Packaging. I\u0027m happy to take this throw the API proposal process, but haven\u0027t done that before, so any guidance would be helpful.\r\n\r\n```csharp\r\nnamespace System.IO.Packaging\r\n{\r\n    public abstract partial class Package\r\n    {\r\n        protected Package(PackageSettings settings) { }\r\n        public static System.IO.Packaging.Package Open(System.IO.Stream stream, PackageSettings settings) { throw null; }\r\n        public static System.IO.Packaging.Package Open(string path, PackageSettings settings) { throw null; }\r\n    }\r\n\r\n    public partial class PackageSettings\r\n    {\r\n        public FileMode PackageMode { get { throw null; } set { throw null; } }\r\n        public FileAccess PackageAccess { get { throw null; } set { throw null; } }\r\n        public FileShare PackageShare { get { throw null; } set { throw null; } }\r\n        public IUriFactory UriFactory { get { throw null; } set { throw null; } }\r\n    }\r\n\r\n    public interface IUriFactory\r\n    {\r\n        System.Uri CreateUri(string url, System.UriKind kind);\r\n        string GetOriginalString(System.Uri uri);\r\n    }\r\n\r\n    public class DefaultUriFactory : IUriFactory\r\n    {\r\n        public static IUriFactory Instance =\u003e throw null;\r\n\r\n        protected DefaultUriFactory() { }\r\n\r\n        public virtual Uri CreateUri(string url, UriKind kind) =\u003e throw null;\r\n\r\n        public virtual string GetOriginalString(Uri uri) =\u003e throw null;\r\n    }\r\n}\r\n```\r\nThe `PackageSettings` class is to minimize the number of overloads of `Open(...)` that need to be added and allow for simpler additions in the future.\r\n\r\nThis would allow someone to intercept the creation and writing of the Uri instances so that they can do whatever they want with it. For example, here are some test cases using it:\r\n\r\n```csharp\r\n[Fact]\r\npublic void MalformedHyperlinkThrows()\r\n{\r\n    using (var package = Package.Open(\"malformed_hyperlink.xlsx\"))\r\n    {\r\n        var part = package.GetPart(new Uri(\"/xl/worksheets/sheet1.xml\", UriKind.Relative));\r\n        Assert.Throws\u003cUriFormatException\u003e(() =\u003e part.GetRelationships());\r\n    }\r\n}\r\n\r\n[Fact]\r\npublic void MalformedHyperlinkHandle()\r\n{\r\n    const string ExpectedUri = \"mailto:mailto@one@\";\r\n    var settings = new PackageSettings\r\n    {\r\n        UriFactory = new MalformedUriFactory()\r\n    };\r\n\r\n    using (var package = Package.Open(\"malformed_hyperlink.xlsx\", settings))\r\n    {\r\n        var part = package.GetPart(new Uri(\"/xl/worksheets/sheet1.xml\", UriKind.Relative));\r\n        var relationship = Assert.Single(part.GetRelationships());\r\n\r\n        var malformed = Assert.IsType\u003cMalformedUri\u003e(relationship.TargetUri);\r\n        Assert.Equal(ExpectedUri, malformed.Uri);\r\n    }\r\n}\r\n\r\n[Fact]\r\npublic void MalformedHyperlinkRoundtrip()\r\n{\r\n    const string InvalidUri = \"mailto:mailto@one@\";\r\n\r\n    var settings = new PackageSettings\r\n    {\r\n        UriFactory = new MalformedUriFactory(),\r\n        PackageMode = FileMode.OpenOrCreate,\r\n        PackageAccess = FileAccess.ReadWrite\r\n    };\r\n\r\n    using (var stream = new MemoryStream())\r\n    {\r\n        using (var package = Package.Open(stream, settings))\r\n        {\r\n            Assert.Empty(package.GetRelationships());\r\n            package.CreateRelationship(new MalformedUri(InvalidUri), TargetMode.External, \"relationship\");\r\n        }\r\n\r\n        using (var package = Package.Open(stream, settings))\r\n        {\r\n            var relationship = Assert.Single(package.GetRelationships());\r\n            var malformed = Assert.IsType\u003cMalformedUri\u003e(relationship.TargetUri);\r\n            Assert.Equal(InvalidUri, malformed.Uri);\r\n        }\r\n    }\r\n}\r\n\r\nprivate class MalformedUriFactory : IUriFactory\r\n{\r\n    public Uri CreateUri(string url, UriKind kind)\r\n    {\r\n        if (Uri.TryCreate(url, kind, out var result))\r\n        {\r\n            return result;\r\n        }\r\n\r\n        return new MalformedUri(url);\r\n    }\r\n\r\n    public string GetOriginalString(Uri uri)\r\n    {\r\n        if (uri is MalformedUri malformed)\r\n        {\r\n            return malformed.Uri;\r\n        }\r\n\r\n        return uri.OriginalString;\r\n    }\r\n\r\n\r\ninternal class MalformedUri : Uri\r\n{\r\n    public MalformedUri(string uriString)\r\n        : base(\"http://unknown\")\r\n    {\r\n        Uri = uriString;\r\n    }\r\n\r\n    public string Uri { get; }\r\n\r\n    public override string ToString() =\u003e Uri;\r\n}\r\n```\r\n",
                                           "updatedAt":  "2020-05-13T15:46:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyODE1MjY4Mg==",
                                           "createdAt":  "2020-05-13T17:59:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JeremyKuhne",
                                           "body":  "@twsouthwick Thanks for putting time into this. Note that I\u0027m no longer on the libraries team, @carlossanlop can help move this along.",
                                           "updatedAt":  "2020-05-13T17:59:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzMjQwNjYwNw==",
                                           "createdAt":  "2020-05-22T00:04:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lindexi",
                                           "body":  "Is there any updated news?",
                                           "updatedAt":  "2020-05-22T00:04:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NjcwNzc3Ng==",
                                           "createdAt":  "2020-07-10T14:33:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBKDOVA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lindexi",
                                                                               "createdAt":  "2020-07-11T01:49:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "twsouthwick",
                                           "body":  "@carlossanlop Any thoughts on this API? I haven\u0027t done an API review, but happy to help move something like this along. As more users are moving to .NET Core/.NET 5, this will become a problem for many LOB apps that rely on DocumentFormat.OpenXml.",
                                           "updatedAt":  "2020-07-10T14:33:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2NDUwMDU2MQ==",
                                           "createdAt":  "2020-07-27T16:27:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "twsouthwick",
                                           "body":  "@danmosemsft Similar https://github.com/dotnet/runtime/issues/1544, this one is blocking people from moving to .NET Core/.NET 5 who use DocumentFormat.OpenXml as documents that would open just fine using System.IO.Packaging when targeting \u003c .NET 4.5 but now fail to open with no way to handle it.",
                                           "updatedAt":  "2020-07-27T16:27:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2NDUzMjE5NQ==",
                                           "createdAt":  "2020-07-27T17:27:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "cc @ericstj whose team owns these API\u0027s and can evaluate. Unless it\u0027s bug fix level, it would be 6.0 work at this point.",
                                           "updatedAt":  "2020-07-27T17:27:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2NDU5NjQ1NQ==",
                                           "createdAt":  "2020-07-27T19:36:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Correct, the soonest this could go in is 6.0.\r\n\r\nSome thoughts on the proposal.  It sounds like the primary purpose of this issue is to add an `IUriFactory` that can be specified when opening a package.  This seems like a very advanced scenario, and I don\u0027t see the benefit of adding so much API to support it.  I\u0027d recommend starting with a more minimal proposal that minimally enables the scenario. Maybe highlight the minimal solution then contrast a bigger solution.\r\n\r\nFor example: what if you just added a 1 overload to Open with default parameters?  EG: `Open(Stream stream, FileMode packageMode =  FileMode.OpenOrCreate, FileAccess packageAccess = FileAccess.ReadWrite, IUriFactory = null)`.  Also consider what is minimally needed in the interface.  The method which goes from URI back to string seems unusual to me since URI already has an \"OriginalString\".  The implications of mapping back from the Uri imply you\u0027re returning types derived from Uri, for round tripping?\r\n\r\nAnother concern I have: why are we adding API to deal with malformed packages?  Can you instead just convert those packages so that they are no longer malformed?  For example, go through and replace any malformed URL with a URL-encoded string.  That seems like the typical thing we\u0027d recommend folks to do when we discovered a bad format and want them to get off of it.  /cc @dotnet/ncl on the Uri details.\r\n",
                                           "updatedAt":  "2020-07-27T19:36:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NjcyMzM2Ng==",
                                           "createdAt":  "2020-08-19T21:32:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBmH0kQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lindexi",
                                                                               "createdAt":  "2021-01-04T08:37:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "odalet",
                                                                               "createdAt":  "2021-04-06T14:20:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "twsouthwick",
                                           "body":  "Thanks @ericstj. I\u0027ve added a tool into the OpenXml library to handle sanitizing it (https://github.com/OfficeDev/Open-XML-SDK/pull/793). Downside is that this requires rewriting the document, which may have only been read only before. However, it is interesting that the format itself appears to handle malformed Uris just fine and don\u0027t have the restrictions that System.Uri has. ie Word/Excel/etc happily generate files with these values.\r\n\r\nThe roundtripping here is so that the values can be rewritten so the document can be read without modifying anything. OriginalString can\u0027t be overwritten to output the original, malformed Uri, so a derived type could be used to ensure the roundtripping. This would allow the OpenXml library to transparently handle the change so people don\u0027t have to modify (potentially old) LOB apps to handle this case.\r\n\r\nHaving a way to parse a Uri with a relaxed mode similar to pre-.NET 4.5 would be ideal, so hopefully @dotnet/ncl can give some feedback for that.",
                                           "updatedAt":  "2020-08-19T21:32:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NzYxODU2Mw==",
                                           "createdAt":  "2020-08-20T12:13:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC9AQpQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "twsouthwick",
                                                                               "createdAt":  "2020-08-24T16:43:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "petarpetrovt",
                                                                               "createdAt":  "2023-06-02T09:36:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "karelz",
                                           "body":  "Regarding `Uri` class:\r\n- It is fairly complicated code. It is sensitive code and it was source of quite a few security issues since `Uri` class was born. As a result, our goal is to drive it towards maintainability (using more of safe code and simpler code).\r\n- There were dozens of bug fixes (usually required by many customers) over the years in .NET Framework and in .NET Core to have stricter `Uri` parsing, compliant with RFC instead of lax parsing (as suggested here).\r\n    - Note: Some of them broke existing customers, for which we usually had opt-out switches. We had 2 customers approaching us in last couple of years, asking us to bring some of the opt-out switches back into .NET Core (they both had large databases with Uri which they apparently couldn\u0027t easily migrate to be compliant - similar to this case). After analysis, we concluded it would make the code frozen and we couldn\u0027t innovate or improve perf in the code base, therefore we rejected the idea.\r\n\r\nIn summary, I would strongly urge against making `Uri` more lax in parsing (pre-.NET 4.5 times), or complicate the code significantly.\r\nOn the other hand, there is slowly growing demand for non-compliant `Uri` representation and I wonder if we could achieve that via other ways -- either the suggested `IUriFactory`, or support custom parsing, and/or custom error handling / fallback parsing in the `Uri` class itself as an advanced extension mechanism. Higher-level libraries (e.g. System.IO.Packaging) would have to then pass through the extension mechanism to allow such customization by the callers (OpenXML in this case).\r\n@MihaZupan do you have any thoughts on this?",
                                           "updatedAt":  "2020-08-20T12:13:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5dyNlo",
                                           "createdAt":  "2023-06-02T09:36:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "petarpetrovt",
                                           "body":  "Is there any updated news?",
                                           "updatedAt":  "2023-06-02T09:36:48Z"
                                       }
                                   ],
                         "totalCount":  17
                     },
        "title":  "System.IO.Packaging.Package should have a way to handle common errors with malformed packages",
        "labels":  [
                       "api-suggestion",
                       "area-System.IO.Compression"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/1553",
        "createdAt":  "2019-03-21T19:50:14Z",
        "number":  1553,
        "author":  "jnm2",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOAlf3ow==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ericstj",
                                            "createdAt":  "2019-03-22T13:33:15Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-02-02T10:09:20Z",
        "body":  "GetEntry currently looks for the path in a dictionary of strings. The strings in the dictionary have forward slashes, so if you pass a path with a backslash, no entry can match.\r\n\r\nI\u0027d expect this to be normalized so that Path.Join can be used to build paths.\r\n\r\nhttps://github.com/dotnet/corefx/blob/f37461280a3c843000aa79642ba700baa5a1fc30/src/System.IO.Compression/src/System/IO/Compression/ZipArchive.cs#L244-L256",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcqYIbw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2NzE3MzcyNw==",
                                           "createdAt":  "2019-12-18T19:22:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "carlossanlop",
                                           "body":  "Triage:\r\nWe should look into this more deeply and define the right behavior for directory separator in zip files. This is an edge case of creating a file on one OS then editing/looking up items in a different OS.",
                                           "updatedAt":  "2019-12-18T19:22:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxOTc0MTM5NA==",
                                           "createdAt":  "2021-04-14T18:31:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cmellongoempyrean",
                                           "body":  "File entries in ZIP files require forward slashes per [the ZIP standard](https://pkware.cachefly.net/webdocs/casestudies/APPNOTE.TXT) 4.4.17.1",
                                           "updatedAt":  "2021-04-14T18:31:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ypghv",
                                           "createdAt":  "2024-02-02T10:09:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mungojam",
                                           "body":  "What\u0027s even odder is that it seems that you have to use double forward-slash on windows, vs. a single forward-slash on linux when calling `ZipArchive.GetEntry`. You can see that if listing entries in these on the relevant OS:\r\n\r\nhttps://github.com/bridgecrewio/checkov/releases/download/3.2.3/checkov_linux_X86_64_3.2.3.zip\r\n\r\nhttps://github.com/bridgecrewio/checkov/releases/download/3.2.3/checkov_windows_X86_64_3.2.3.zip",
                                           "updatedAt":  "2024-02-02T10:09:18Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "ZipArchive.GetEntry does not work with Path.Join (backslashes)",
        "labels":  [
                       "bug",
                       "area-System.IO.Compression",
                       "tenet-compatibility",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/36245",
        "createdAt":  "2020-05-11T22:12:47Z",
        "number":  36245,
        "author":  "Daniel15",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODFpH-Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "masonwheeler",
                                            "createdAt":  "2021-11-20T11:57:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Daniel-Svensson",
                                            "createdAt":  "2023-12-05T18:46:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "inklesspen1rus",
                                            "createdAt":  "2025-07-03T20:27:38Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2022-03-14T13:07:19Z",
        "body":  "When writing to a Brotli stream one line at a time, the compressed output is actually larger than the uncompressed input.\r\n\r\nRepro:\r\n```csharp\r\nusing System;\r\nusing System.IO;\r\nusing System.IO.Compression;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace BrotliTest\r\n{\r\n    class Program\r\n    {\r\n        static async Task Main(string[] args)\r\n        {\r\n            const int NUMBER_OF_LINES = 10000;\r\n            const string SAMPLE_STRING = \"hello this should compress well\\n\";\r\n\r\n            var inputString = string.Concat(Enumerable.Repeat(SAMPLE_STRING, NUMBER_OF_LINES));\r\n            var inputBytes = Encoding.UTF8.GetBytes(inputString);\r\n            Console.WriteLine($\"Input size: {inputBytes.Length} bytes\");\r\n\r\n            using (var outputMemory = new MemoryStream())\r\n            using (var outputStream = new BrotliStream(outputMemory, CompressionLevel.Fastest))\r\n            {\r\n                await outputStream.WriteAsync(inputBytes);\r\n                Console.WriteLine($\"Output size (all at once): {outputMemory.Length} bytes\");\r\n            }\r\n\r\n            using (var outputMemory = new MemoryStream())\r\n            using (var outputStream = new BrotliStream(outputMemory, CompressionLevel.Fastest))\r\n            {\r\n                var bytes = Encoding.UTF8.GetBytes(SAMPLE_STRING);\r\n                for (var i = 0; i \u003c NUMBER_OF_LINES; i++)\r\n                {\r\n                    await outputStream.WriteAsync(bytes);\r\n                }\r\n                Console.WriteLine($\"Output size (line by line): {outputMemory.Length} bytes\");\r\n            }\r\n\r\n            using (var outputMemory = new MemoryStream())\r\n            using (var outputStream = new BrotliStream(outputMemory, CompressionLevel.Fastest))\r\n            {\r\n                foreach (var inputByte in inputBytes)\r\n                {\r\n                    await outputStream.WriteAsync(new[] { inputByte });\r\n                }\r\n\r\n                Console.WriteLine($\"Output size (byte by byte): {outputMemory.Length} bytes\");\r\n            }\r\n\r\n            Console.ReadKey();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nOutput:\r\n```\r\nInput size: 320000 bytes\r\nOutput size (all at once): 105 bytes\r\nOutput size (line by line): 350000 bytes\r\nOutput size (byte by byte): 1280000 bytes\r\n```\r\n\r\nBuffering the entire contents in memory then writing it all in a single write avoids the issue, but then that defeats the purpose of using a stream (may as well just use a function that compresses a byte array, and totally avoid streams).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOOoW_3g==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNzIyNjgzMg==",
                                           "createdAt":  "2020-05-12T09:32:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "svick",
                                           "body":  "At first, I tried to combine `BrotliStream` with [`BufferedStream`](https://docs.microsoft.com/en-us/dotnet/api/system.io.bufferedstream) and that helps. Code:\r\n\r\n```c#\r\nusing (var outputMemory = new MemoryStream())\r\nusing (var brotliStream = new BrotliStream(outputMemory, CompressionLevel.Fastest))\r\nusing (var outputStream = new BufferedStream(brotliStream))\r\n```\r\n\r\nResult:\r\n\r\n```\r\nInput size: 320000 bytes\r\nOutput size (all at once): 105 bytes\r\nOutput size (line by line): 4475 bytes\r\nOutput size (byte by byte): 4475 bytes\r\n```\r\n\r\nThough this issue seems to happen only with `CompressionLevel.Fastest`. If I switch to `CompressionLevel.Optimal` (and add flushing to make sure output is actually written), I get the same result in all cases. Code:\r\n\r\n```c#\r\nusing (var outputMemory = new MemoryStream())\r\nusing (var outputStream = new BrotliStream(outputMemory, CompressionLevel.Optimal))\r\n{\r\n    foreach (var inputByte in inputBytes)\r\n    {\r\n        await outputStream.WriteAsync(new[] { inputByte });\r\n    }\r\n    await outputStream.FlushAsync();\r\n    Console.WriteLine($\"Output size (byte by byte): {outputMemory.Length} bytes\");\r\n}\r\n```\r\n\r\nResult:\r\n\r\n```\r\nInput size: 320000 bytes\r\nOutput size (all at once): 38 bytes\r\nOutput size (line by line): 38 bytes\r\nOutput size (byte by byte): 38 bytes\r\n```\r\n\r\nThis seems like an intentional behavior by the underlying brotli implementation. I\u0027m not sure what should be done about this, if anything.\r\n\r\nOne option might be to change [the mapping between `CompressionLevel` and brotli quality](https://github.com/dotnet/runtime/blob/d48be104/src/libraries/System.IO.Compression.Brotli/src/System/IO/Compression/BrotliUtils.cs). I *think* only quality levels 0 and 1 behave this way so mapping `CompressionLevel.Fastest` to quality level 2 should fix this issue.",
                                           "updatedAt":  "2020-05-12T09:32:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46F9DA",
                                           "createdAt":  "2021-11-20T11:57:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "masonwheeler",
                                           "body":  "\u003e I\u0027m not sure what should be done about this, if anything.\r\n\r\nAdding an internal buffer to `BrotliStream`, as has been done with other streams in the past, would be a good start.",
                                           "updatedAt":  "2021-11-20T11:57:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46F-d4",
                                           "createdAt":  "2021-11-20T12:45:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCSxvwA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adamsitnik",
                                                                               "createdAt":  "2022-03-14T13:03:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e Adding an internal buffer to BrotliStream, as has been done with other streams in the past, would be a good start.\r\n\r\nThis is why BufferedStream exists. With the main exception of FileStream, which has a buffer purely for perf (but where we generally regret the inclusion of the buffer directly), other streams that include buffers typically do so out of necessity (e.g. there\u0027s a minimum size required to perform its transformation) rather than for perf. ",
                                           "updatedAt":  "2021-11-20T12:45:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46F-iu",
                                           "createdAt":  "2021-11-20T12:48:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "masonwheeler",
                                           "body":  "And given the pathological behavior exhibited here, it would appear that there\u0027s a minimum size required for Brotli to perform its transformation as well.  (Or at least for it to perform it in any reasonable fashion!)",
                                           "updatedAt":  "2021-11-20T12:48:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46F_Rz",
                                           "createdAt":  "2021-11-20T13:11:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "There\u0027s a difference between being functional and having great performance. Lots of things improve on throughput when input is buffered and processed in larger chunks.  For example,  every write to a NetworkStream involves a syscall; that doesn\u0027t mean we should add a buffer into NetworkStream. If you want your input buffered, you add buffering on top.",
                                           "updatedAt":  "2021-11-20T13:11:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46F_W-",
                                           "createdAt":  "2021-11-20T13:13:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "masonwheeler",
                                           "body":  "Yes, but this *is* a functionality issue.  If it was just slow, that would be one thing.  But when it\u0027s slow *and also* \"compressing\" data to around 4X larger than the input, that\u0027s a pretty clear functional problem!",
                                           "updatedAt":  "2021-11-20T13:13:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46GAx7",
                                           "createdAt":  "2021-11-20T14:01:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCSxwjA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adamsitnik",
                                                                               "createdAt":  "2022-03-14T13:04:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e this is a functionality issue\r\n\r\nIt\u0027s doing what the user asked: compressing input at the level requested with the data requested at the time requested. There might be other things that can be improved,  but forcing input buffering as part of the stream implementation itself is not the answer. With many compression algorithms,  changing the chunk size improves compression ratio; it\u0027s not the job of BrotliStream to decide what an acceptable min compression ratio is... its job is to provide a Stream facade on top of the BrotliEncoder/Decoder. And as @svick outlined, changing the compression level improves things,  as does using BufferedStream, whose entire reason to exist is to make it easy to layer on buffering to improve performance, whether that performance be about throughout or compression ratios.",
                                           "updatedAt":  "2021-11-20T14:01:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46GpS_",
                                           "createdAt":  "2021-11-21T13:44:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GSPP",
                                           "body":  "I understand that buffering generally should be separate. But I have to say that I would not have expected this behavior myself. I would have assumed that a compression stream buffers internally as much data as is required to achieve optimum compression in accordance to the level set. It seems to me that only the compression stream can know how much data that is.\r\n\r\nWhat would be the guidance on how much buffering to add using `BufferedStream`?\r\n\r\nIn any case, it would be good to document this. Some stream usage patterns can be very chatty and, with this behavior, this can go really wrong in terms of effective compression.",
                                           "updatedAt":  "2021-11-21T13:44:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46JoXX",
                                           "createdAt":  "2021-11-22T14:47:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e I would have assumed that a compression stream buffers internally as much data as is required to achieve optimum compression in accordance to the level set.\r\n\r\nAchieving the optimal level of compression might require buffering essentially the whole input.  You can see that with the initial example in this post.  It requires a buffer over 100K in size to get the desired compression ratio; at that point, the answer isn\u0027t to use a buffer, it\u0027s to use a different compression level.\r\n\r\n\u003e It seems to me that only the compression stream can know how much data that is.\r\n\r\nBrotliStream has almost no more information here than does a consumer of BrotliStream, and in fact, because how the data is compressed is influenced by what the data is, the consumer actually has more relevant information than does BrotliStream.  The _only_ thing BrotliStream knows here that the consumer doesn\u0027t is exactly what underlying level 1 to 11 each CompressionLevel enum value corresponds to, but even then it doesn\u0027t know exactly what they mean.\r\n\r\n\u003e Some stream usage patterns can be very chatty and, with this behavior, this can go really wrong in terms of effective compression.\r\n\r\nI\u0027ll say again, I\u0027m not opposed to improving things here, I just don\u0027t believe adding further buffer is the right way to do so.  For example, right now CompressionLevel.Fastest maps to brotli compression level 1.  When I run the original repro from this thread (tweaked to ensure the content is fully written out to the MemoryStream and augmented to also output compression time), I get:\r\n```\r\nInput size: 320000 bytes\r\nOutput size (all at once): 106 bytes    7ms\r\nOutput size (line by line): 350001 bytes        32ms\r\nOutput size (byte by byte): 1280001 bytes       224ms\r\n```\r\nIf I then hack System.IO.Compression.Brotli.dll to map CompressionLevel.Fastest to 2 instead of to 1, I get:\r\n```\r\nInput size: 320000 bytes\r\nOutput size (all at once): 58 bytes     7ms\r\nOutput size (line by line): 58 bytes    2ms\r\nOutput size (byte by byte): 58 bytes    46ms\r\n```\r\nI\u0027d rather explore that avenue than add additional buffering in BrotliStream.",
                                           "updatedAt":  "2021-11-22T14:47:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46KPCx",
                                           "createdAt":  "2021-11-22T17:34:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "masonwheeler",
                                           "body":  "\u003e Achieving the optimal level of compression might require buffering essentially the whole input. You can see that with the initial example in this post. It requires a buffer over 100K in size to get the desired compression ratio\r\n\r\nEven so, what exactly is the objection here?  It\u0027s not like it\u0027s the 1980s and 100 KB of RAM is expensive!",
                                           "updatedAt":  "2021-11-22T17:34:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46KYby",
                                           "createdAt":  "2021-11-22T18:23:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCSxw8A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adamsitnik",
                                                                               "createdAt":  "2022-03-14T13:05:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e Even so, what exactly is the objection here? It\u0027s not like it\u0027s the 1980s and 100 KB of RAM is expensive!\r\n\r\nAllocating 100KB per compression operation _is_ very expensive, and pooling to avoid such per-operation allocation adds non-trivial complexity, and top of which the \u003e 100KB number was for this specific example; different inputs will come with different values that would provide the \"optimal\" value, so this might be a low estimate.  Adding buffering on the input, especially when the size of the buffering varies, adds inconsistency as to when and how the data is actually transformed, changing the meaning of Flush{Async}, etc.  And any such buffering would be working around an improperly chosen compression level, either for the code using BrotliStream or by BrotliStream\u0027s mapping of the enum; it\u0027s a workaround rather than addressing the crux of the issue (note that changing the compression level not only fixed the output size, it also made it faster).",
                                           "updatedAt":  "2021-11-22T18:49:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46KjyW",
                                           "createdAt":  "2021-11-22T19:24:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Daniel15",
                                           "body":  "@stephentoub In my case I\u0027m not even sure how to wrap it in a buffer. In the code where I actually encountered the issue, I was using a third-party library (prometheus-net) along with ASP.NET\u0027s `services.AddResponseCompression()` and I\u0027m not sure if it supports a configurable buffer size or not. Here\u0027s my original bug report to the third-party library: https://github.com/prometheus-net/prometheus-net/issues/213\r\n\r\nI ended up just disabling Brotli to work around the issue.",
                                           "updatedAt":  "2021-11-22T19:24:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46WlGE",
                                           "createdAt":  "2021-11-25T09:14:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GSPP",
                                           "body":  "I just tried all compression levels with all power-of-two chunk sizes on System.Linq.dll. Only level 1 reacts to chunk size. All other levels do not react at all in terms of compressed size.\r\n\r\n[Compression Brotli.txt](https://github.com/dotnet/runtime/files/7601657/Compression.Brotli.txt)\r\n\r\nFor Deflate, `Optimal` reacts a little bit to chunk size but `Fastest` does not.\r\n\r\nFor `Ionic.Zlib.DeflateStream` of DotNetZip, the chunk size does not matter for any level.",
                                           "updatedAt":  "2021-11-25T09:50:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46bWza",
                                           "createdAt":  "2021-11-26T18:14:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "masonwheeler",
                                           "body":  "\u003e If I then hack System.IO.Compression.Brotli.dll to map CompressionLevel.Fastest to 2 instead of to 1, I get:\r\n\r\nSo how does one go about doing that?  Attempting to simply clone the repo and build the DLL myself with a changed value in `BrotliUtils` throws tons of errors; apparently there\u0027s something in the csproj file that Visual Studio\u0027s choking on.",
                                           "updatedAt":  "2021-11-26T19:20:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46dlcj",
                                           "createdAt":  "2021-11-28T03:40:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e Attempting to simply clone the repo and build the DLL myself\r\n\r\nYou need to build the repo all-up at least once before you can build an individual library, e.g. `build clr+libs -rc release` from the root of the repo.",
                                           "updatedAt":  "2021-11-28T03:40:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46elNA",
                                           "createdAt":  "2021-11-28T14:30:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "masonwheeler",
                                           "body":  "Is there any way to do it from proper tooling?  The solution as-described breaks user interface rule #1: *if the user has to know that a command line exists in order to use your software, you have failed.*",
                                           "updatedAt":  "2021-11-28T14:30:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46emoh",
                                           "createdAt":  "2021-11-28T15:06:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e Is there any way to do it from proper tooling?\r\n\r\nAny way to do what? Build the repo? Most large repos have some build script.  You can just type build if you want.  The command I gave you will only build the subset you need. Feel free to build more if you like. I\u0027m not sure why you\u0027re quoting someone\u0027s interface design guidelines to me. ",
                                           "updatedAt":  "2021-11-28T15:12:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46enBz",
                                           "createdAt":  "2021-11-28T15:17:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODxcFhQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "karaziox",
                                                                               "createdAt":  "2021-11-28T18:27:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "danmoseley",
                                                                               "createdAt":  "2021-11-28T21:06:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "MihaZupan",
                                                                               "createdAt":  "2024-09-08T20:02:24Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "masonwheeler",
                                           "body":  "\u003e Any way to do what? Build the repo?\r\n\r\nBuild the repo *from proper tooling*.  ie. from Visual Studio or similar, rather than needing to rely on archaic techniques like typing something at a command line.\r\n\r\n\u003e I\u0027m not sure why you\u0027re quoting someone\u0027s interface design guidelines to me.\r\n\r\nBecause it\u0027s not the 1970s anymore and it\u0027s long past time we stopped acting like it is.",
                                           "updatedAt":  "2021-11-28T15:22:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46enna",
                                           "createdAt":  "2021-11-28T15:33:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e rather than needing to rely on archaic techniques like typing\r\n\r\nI\u0027m sorry you believe typing \"build\" is archaic.\r\n\r\nThere is no way to build the entire repo all-up from Visual Studio.  The repo is composed of hundreds of components, all with varying configurations, which different developers use in varying ways on a day-to-day basis. You can build the whole repo once from the command line,  and then spend the rest of your days in VS iterating on one or more components. If you believe that is a problem and have a recommended,  concrete alternative,  please open a separate issue. \r\n\r\n\u003e it\u0027s long past time we stopped acting like it is\r\n\r\nThis is no longer a productive conversation about the issue. I\u0027m removing myself from it. I don\u0027t appreciate the hostility. ",
                                           "updatedAt":  "2021-11-28T15:33:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46hb_e",
                                           "createdAt":  "2021-11-29T17:17:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "masonwheeler",
                                           "body":  "Wait, what hostility?  There\u0027s nothing hostile about pointing out a universally recognized fact in the computer industry, entirely uncontroversial except, apparently, among a small, highly specific subset of software developers.\r\n\r\nI\u0027m asking because *that script command doesn\u0027t work.*  Trying to build it on the `main` and on the `release/5.0` branches both fail, giving different variations of errors that mean it\u0027s not able to find tooling that the VS installer was supposed to have set up.  If I was running inside VS, all that stuff would be implicit as part of the development environment.",
                                           "updatedAt":  "2021-11-29T17:17:48Z"
                                       }
                                   ],
                         "totalCount":  20
                     },
        "title":  "Brotli very inefficient with smaller writes",
        "labels":  [
                       "area-System.IO.Compression"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/37543",
        "createdAt":  "2020-06-06T13:41:46Z",
        "number":  37543,
        "author":  "lellid",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC4hX2A==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "iSazonov",
                                            "createdAt":  "2020-06-16T05:44:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Dolu-",
                                            "createdAt":  "2022-02-03T08:05:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "drobbins20",
                                            "createdAt":  "2024-06-10T20:07:56Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2025-01-08T10:40:36Z",
        "body":  "## Background and Motivation\r\n\r\nWhen using .zip files as storage container, e.g. for project files, there is often the situation that only a few of the files inside the zip must be rewritten because its content has changed. The majority of the files did not change.\r\n\r\nThere is the possibility to append the changed files to the .zip file, even using the same name. This will effectively append the new contents to the end of the .zip file, and invalidates the old content without deleting it. In this way the .zip file will grow continuously.\r\n\r\nTo avoid this behavior, a new .zip file could be created, and the contents of the unchanged files could be copied over from the old .zip file to the new .zip file. Currently, this process is time consuming because the content must first be unzipped, and then zipped again for the new .zip file.\r\n\r\nBy proposing an API that allows the direct copy of an entry from one .zip file to another zip file without unzipping and rezipping, this time consuming process can be avoided. Of course, the compression level of this entry can not change during the process.\r\n\r\n## Proposed API\r\n\r\nThe following methods should be added to System.IO.Compression.ZipArchive:\r\n\r\n```\r\n/// \u003csummary\u003e\r\n/// Copies an entry from another archive to this archive. The compression level of the entry is maintained.\r\n/// \u003c/summary\u003e\r\n/// \u003cparam name=\"entryFromAnotherArchive\"\u003eThe entry to copy from another archive.\u003c/param\u003e\r\n/// \u003cparam name=\"destinationEntryName\"\u003eName of entry in this archive.\u003c/param\u003e\r\n/// \u003creturns\u003eThe copied zip entry in this archive.\u003c/returns\u003e\r\npublic ZipArchiveEntry CopyEntryFrom(ZipArchiveEntry entryFromAnotherArchive);\r\n \r\n \r\n/// \u003csummary\u003e\r\n/// Copies an entry from another archive to this archive. The compression level of the entry is maintained.\r\n/// \u003c/summary\u003e\r\n/// \u003cparam name=\"entryFromAnotherArchive\"\u003eThe entry to copy from another archive.\u003c/param\u003e\r\n/// \u003cparam name=\"destinationEntryName\"\u003eName of entry in this archive.\u003c/param\u003e\r\n/// \u003creturns\u003eThe copied zip entry in this archive.\u003c/returns\u003e\r\n public ZipArchiveEntry CopyEntryFrom(ZipArchiveEntry entryFromAnotherArchive, string destinationEntryName);\r\n```\r\n\r\n\r\n## Example\r\n\r\nAn example of such an implementation can be found [here](https://github.com/Altaxo/Altaxo/blob/master/Libraries/System.IO.Compression.Altaxo/ZipArchive.Altaxo.cs) (although I had to modify the class names in order to avoid ambiguities with the existing ZipArchive class). A simple test of the new API can be found [here](https://github.com/Altaxo/Altaxo/blob/master/Libraries/System.IO.Compression.Altaxo.Tests/ZipCopyTest.cs).\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmZ9DYw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Zn0Nj",
                                           "createdAt":  "2025-01-08T10:40:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lellid",
                                           "body":  "What is needed to have progress on this issue?\nIf I would make a pull request for that issue, would it have a chance to be accepted?",
                                           "updatedAt":  "2025-01-08T10:40:24Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "System.IO.Compression: extend ZipArchive API to enable fast copy of entries from one archive to another archive",
        "labels":  [
                       "api-suggestion",
                       "area-System.IO.Compression"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/39327",
        "createdAt":  "2020-07-14T22:43:30Z",
        "number":  39327,
        "author":  "timmydo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC4RuMQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GSPP",
                                            "createdAt":  "2020-10-05T06:19:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2020-11-18T14:41:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "va-b",
                                            "createdAt":  "2021-02-08T17:19:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sveinungf",
                                            "createdAt":  "2021-04-03T22:33:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "marco6",
                                            "createdAt":  "2021-04-09T13:34:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DaveSenn",
                                            "createdAt":  "2021-05-15T00:01:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MarkKoz",
                                            "createdAt":  "2021-07-28T21:17:50Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2022-08-27T09:55:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Bobsans",
                                            "createdAt":  "2023-03-27T22:24:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alexeyshockov",
                                            "createdAt":  "2023-08-23T08:57:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tipa",
                                            "createdAt":  "2023-11-12T21:19:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Daniel-Svensson",
                                            "createdAt":  "2023-12-05T19:07:49Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2024-03-13T00:50:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Tornhoof",
                                            "createdAt":  "2024-03-28T08:13:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nikolai-mb",
                                            "createdAt":  "2024-05-30T20:02:22Z"
                                        }
                                    ],
                          "totalCount":  15
                      },
        "updatedAt":  "2021-11-28T15:30:19Z",
        "body":  "## Background and Motivation\r\n\r\n\u003c!--\r\nWe welcome API proposals! We have a process to evaluate the value and shape of new API. There is an overview of our process [here](https://github.com/dotnet/runtime/blob/master/docs/project/api-review-process.md). This template will help us gather the information we need to start the review process.\r\nFirst, please describe the purpose and value of the new API here.\r\n--\u003e\r\n\r\nCurrently to compress/decompress in .NET, you typically would use GZipStream or DeflateStream. However, there are a lot of times where you have an array of bytes and you want to get your output in an array of bytes. It would be simpler/faster to not have to have a bunch of stream redirection to the underlying byte array.\r\n\r\nThe request is that we add some methods that operate on bytes.\r\n\r\n## Proposed API\r\n\r\nRoughly something like this\r\n\r\n```\r\nnamespace System.IO.Compression\r\n{\r\npublic class GZipCompressor\r\npublic class DeflateCompressor\r\n{\r\n private object state;\r\n public ctor(CompressionLevel)\r\n public void Compress(ReadOnlySpan\u003cbyte\u003e in, Span\u003cbyte\u003e out, enum flushType, out uint outputBytesWritten);\r\n}\r\n}\r\n```\r\n\r\n## Usage Examples\r\n\r\n\r\nI\u0027m just sort of pseudo-coding this out:\r\n``` C#\r\n\r\nvar input = new List\u003cbyte[]\u003e {...};\r\nvar output = ArrayPool.Shared.Rent(GetMaxCompressedSize(input.Sum(x =\u003e x.Length)));\r\nvar compressor = new GZipCompressor(CompressionLevel.Optimal);\r\nvar outputIndex = 0;\r\nforeach (var array in input)\r\n{\r\ncompressor.Compress(new ReadOnlySpan\u003cbyte\u003e(array), new Span\u003cbyte\u003e(output, outputIndex, output.Length - outputIndex), Z.NoFlush, out var written)\r\noutputIndex += written;\r\n}\r\n\r\ncompressor.Compress(default(), new Span\u003cbyte\u003e(output, outputIndex, output.Length - outputIndex, Z.FinalFlush, out var finalWrite);\r\n\r\n var finalOutput = new Span\u003cbyte\u003e(output, 0, outputIndex + finalWrite);\r\n// do stuff with finalOutput\r\n\r\n}\r\n\r\n```\r\n\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOOa9CUw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1ODg3MTMxMw==",
                                           "createdAt":  "2020-07-15T16:38:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCrPyqA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "timmydo",
                                                                               "createdAt":  "2020-07-15T18:36:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PaulusParssinen",
                                                                               "createdAt":  "2020-11-18T14:41:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "wegylexy",
                                                                               "createdAt":  "2021-11-13T05:43:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "AraHaan",
                                                                               "createdAt":  "2021-11-22T19:24:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AraHaan",
                                                                               "createdAt":  "2021-11-22T19:24:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "PaulusParssinen",
                                                                               "createdAt":  "2022-08-27T09:55:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "FiniteReality",
                                           "body":  "These should probably use the [OperationStatus](https://docs.microsoft.com/en-us/dotnet/api/system.buffers.operationstatus?view=netcore-3.1) enum to communicate its result, like the BrotliEncoder/Decoder. The names should also follow suit. So, something like this would make sense for DEFLATE, I believe:\r\n\r\n```cs\r\nclass DeflateEncoder : IDisposable\r\n{\r\n    public DeflateEncoder(CompressionLevel level);\r\n    public OperationStatus Compress(ReadOnlySpan\u003cbyte\u003e source, ReadOnlySpan\u003cbyte\u003e destination, out int bytesConsumed, out int bytesWritten, bool isFinalBlock);\r\n    public static int GetMaxCompressedLength(int inputSize);\r\n    // IDisposable implementation\r\n}\r\nclass DeflateDecoder : IDisposable\r\n{\r\n    public DeflateDecoder(CompressionLevel level);\r\n    public OperationStatus Decompress(ReadOnlySpan\u003cbyte\u003e source, ReadOnlySpan\u003cbyte\u003e destination, out int bytesConsumed, out int bytesWritten, bool isFinalBlock);\r\n    // IDisposable implementation\r\n}\r\n\r\n// Likewise for GZip\r\n```\r\n\r\nSince we\u0027re here, could we potentially also add one for ZLib? It would have the same API as above, but instead of producing raw DEFLATE blocks or GZip blocks, it would produce ZLib blocks instead.",
                                           "updatedAt":  "2020-07-15T16:39:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5Mjg5MzU5NQ==",
                                           "createdAt":  "2020-09-15T18:26:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "timmydo",
                                           "body":  "Related https://github.com/dotnet/runtime/issues/16923",
                                           "updatedAt":  "2020-09-15T18:26:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45r0JT",
                                           "createdAt":  "2021-11-13T05:44:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wegylexy",
                                           "body":  "I read about ZLib compression level was between 0 and 9, but now may be 19 or even higher. Need a way to specify that too.",
                                           "updatedAt":  "2021-11-13T05:44:41Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Span-based (non-stream) compression APIs",
        "labels":  [
                       "api-suggestion",
                       "area-System.IO.Compression",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/39430",
        "createdAt":  "2020-07-16T11:51:34Z",
        "number":  39430,
        "author":  "MarioZ",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC8MNQA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "IrinaPykhova",
                                            "createdAt":  "2020-07-17T18:51:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "muntablues",
                                            "createdAt":  "2020-12-04T10:29:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Chapre",
                                            "createdAt":  "2021-02-25T16:25:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MykolaKhilko",
                                            "createdAt":  "2021-07-29T13:25:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PeterPandefu",
                                            "createdAt":  "2022-08-10T02:21:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SccIshikawaN",
                                            "createdAt":  "2024-10-27T21:29:21Z"
                                        }
                                    ],
                          "totalCount":  6
                      },
        "updatedAt":  "2022-08-10T03:00:30Z",
        "body":  "I\u0027m getting an `IOException` and \"_Entries cannot be opened multiple times in Update mode._\" message when providing `XpsDocument` to `DocumentViewer` control.\r\n\r\nThe issue occurs only in .NET Core, it doesn\u0027t occur in the .NET Framework.\r\n\r\nI\u0027m generating the `XpsDocument` in-memory and displaying it with `DocumentViewer`, but this issue can also be reproduced by creating the `XpsDocument ` from the XPS file, [see this repro project](https://github.com/MarioZ/Issue-XpsDocument-IOException).\r\n\r\nAfter loading the XPS file, you need to do some actions/movements on the `DocumentViewer` control and eventually, the exception will occur. For instance, you can zoom in and out, hover inside and outside, click inside and outside the control, etc.\r\nI didn\u0027t determine exactly what action causes the issue, sometimes it is on mouse movement, sometimes it is on mouse click...\r\n\r\nAnyway, what I did notice is that the issue doesn\u0027t occur when file access is `Read`, not `ReadWrite`.\r\nAlso, the issue doesn\u0027t occur when the XPS content doesn\u0027t contain any image.\r\n\r\n```\r\nSystem.IO.IOException\r\n  HResult=0x80131620\r\n  Message=Entries cannot be opened multiple times in Update mode.\r\n  Source=System.IO.Compression\r\n  StackTrace:\r\n   at System.IO.Compression.ZipArchiveEntry.OpenInUpdateMode()\r\n   at System.IO.Compression.ZipArchiveEntry.Open()\r\n   at System.IO.Packaging.ZipStreamManager.Open(ZipArchiveEntry zipArchiveEntry, FileMode streamFileMode, FileAccess streamFileAccess)\r\n   at System.IO.Packaging.ZipPackagePart.GetStreamCore(FileMode streamFileMode, FileAccess streamFileAccess)\r\n   at System.IO.Packaging.PackagePart.GetStream(FileMode mode, FileAccess access)\r\n   at MS.Internal.IO.Packaging.PackagePartExtensions.GetSeekableStream(PackagePart packPart, FileMode mode, FileAccess access)\r\n   at System.IO.Packaging.PackWebResponse.CachedResponse.GetResponseStream()\r\n   at System.IO.Packaging.PackWebResponse.GetResponseStream()\r\n   at System.IO.Packaging.PackWebResponse.get_ContentType()\r\n   at System.Windows.Media.Imaging.BitmapDecoder.SetupDecoderFromUriOrStream(Uri uri, Stream stream, BitmapCacheOption cacheOption, Guid\u0026 clsId, Boolean\u0026 isOriginalWritable, Stream\u0026 uriStream, UnmanagedMemoryStream\u0026 unmanagedMemoryStream, SafeFileHandle\u0026 safeFilehandle)\r\n   at System.Windows.Media.Imaging.BitmapDecoder.CreateFromUriOrStream(Uri baseUri, Uri uri, Stream stream, BitmapCreateOptions createOptions, BitmapCacheOption cacheOption, RequestCachePolicy uriCachePolicy, Boolean insertInDecoderCache)\r\n   at System.Windows.Media.Imaging.BitmapImage.FinalizeCreation()\r\n   at System.Windows.Media.Imaging.BitmapImage.EndInit()\r\n   at System.Windows.Media.Imaging.BitmapImage..ctor(Uri uriSource, RequestCachePolicy uriCachePolicy)\r\n   at System.Windows.Media.Imaging.BitmapImage..ctor(Uri uriSource)\r\n   at System.Windows.Documents.FixedElement.GetImage()\r\n   at System.Windows.Documents.FixedElement.GetObject()\r\n   at System.Windows.Documents.FlowPosition.GetAdjacentElement(LogicalDirection dir)\r\n   at System.Windows.Documents.FixedTextPointer.System.Windows.Documents.ITextPointer.GetAdjacentElement(LogicalDirection direction)\r\n   at System.Windows.Documents.DocumentSequenceTextPointer.xGapAwareGetEmbeddedElement(DocumentSequenceTextPointer thisTp, LogicalDirection direction)\r\n   at System.Windows.Documents.DocumentSequenceTextPointer.GetAdjacentElement(DocumentSequenceTextPointer thisTp, LogicalDirection direction)\r\n   at System.Windows.Documents.DocumentSequenceTextPointer.System.Windows.Documents.ITextPointer.GetAdjacentElement(LogicalDirection direction)\r\n   at System.Windows.Documents.TextEditorMouse.GetUIElementWhenMouseOver(TextEditor This, Point mouseMovePoint)\r\n   at System.Windows.Documents.TextEditorMouse.UpdateCursor(TextEditor This, Point mouseMovePoint)\r\n   at System.Windows.Documents.TextEditorMouse.OnMouseMoveWithoutFocus(TextEditor This, MouseEventArgs e)\r\n   at System.Windows.Documents.TextEditorMouse.OnMouseMove(Object sender, MouseEventArgs e)\r\n   at System.Windows.RoutedEventArgs.InvokeHandler(Delegate handler, Object target)\r\n   at System.Windows.EventRoute.InvokeHandlersImpl(Object source, RoutedEventArgs args, Boolean reRaised)\r\n   at System.Windows.UIElement.RaiseEventImpl(DependencyObject sender, RoutedEventArgs args)\r\n   at System.Windows.UIElement.RaiseTrustedEvent(RoutedEventArgs args)\r\n   at System.Windows.Input.InputManager.ProcessStagingArea()\r\n   at System.Windows.Input.InputManager.ProcessInput(InputEventArgs input)\r\n   at System.Windows.Input.MouseDevice.Synchronize()\r\n   at System.Windows.Input.MouseDevice.OnHitTestInvalidatedAsync(Object sender, EventArgs e)\r\n   at System.Windows.Input.InputManager.HitTestInvalidatedAsyncCallback(Object arg)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.DispatcherOperation.InvokeImpl()\r\n   at MS.Internal.CulturePreservingExecutionContext.CallbackWrapper(Object obj)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at MS.Internal.CulturePreservingExecutionContext.Run(CulturePreservingExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Windows.Threading.DispatcherOperation.Invoke()\r\n   at System.Windows.Threading.Dispatcher.ProcessQueue()\r\n   at System.Windows.Threading.Dispatcher.WndProcHook(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean\u0026 handled)\r\n   at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean\u0026 handled)\r\n   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(Object o)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, Object args, Int32 numArgs)\r\n   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam)\r\n   at MS.Win32.UnsafeNativeMethods.DispatchMessage(MSG\u0026 msg)\r\n   at System.Windows.Threading.Dispatcher.PushFrameImpl(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.PushFrame(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.Run()\r\n   at System.Windows.Application.RunDispatcher(Object ignore)\r\n   at System.Windows.Application.RunInternal(Window window)\r\n   at System.Windows.Application.Run()\r\n   at WpfApp1.App.Main()\r\n\r\n  This exception was originally thrown at this call stack:\r\n    [External Code]\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSCCQaw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1OTM2MDY3Ng==",
                                           "createdAt":  "2020-07-16T11:51:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-07-16T11:51:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1OTM2MjM5NQ==",
                                           "createdAt":  "2020-07-16T11:55:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MarioZ",
                                           "body":  "I don\u0027t have write-permissions, but I think the \"area-System.IO.Compression\" should be used, just like in #24962 and #27397.",
                                           "updatedAt":  "2020-07-16T11:55:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4NjAyODI2MA==",
                                           "createdAt":  "2021-02-25T16:26:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Chapre",
                                           "body":  "Any solution to this? having the really same issue",
                                           "updatedAt":  "2021-02-25T16:27:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4NjM4ODQwNQ==",
                                           "createdAt":  "2021-02-26T03:36:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MarioZ",
                                           "body":  "@Chapre how exactly are you creating your `XpsDocument`?\r\n\r\nIn my case, I was able to obtain an XPS stream which enabled me to do this file access change in memory:\r\n\r\n```cs\r\nMemoryStream xpsStream = ...\r\n\r\nvar package = Package.Open(xpsStream, FileMode.Open, FileAccess.Read);\r\nvar uri = new Uri($\"memorystream://{Guid.NewGuid():N}.xps\");\r\nPackageStore.AddPackage(uri, package);\r\n\r\nthis.xps = new XpsDocument(package, CompressionOption.NotCompressed, uri.AbsoluteUri);\r\nthis.viewer.Document = this.xps.GetFixedDocumentSequence();\r\n```",
                                           "updatedAt":  "2021-02-26T03:36:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40_yZ1",
                                           "createdAt":  "2021-07-29T13:18:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCqUHWg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MarioZ",
                                                                               "createdAt":  "2021-08-06T17:21:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PeterPandefu",
                                                                               "createdAt":  "2022-08-10T02:24:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "MykolaKhilko",
                                           "body":  "@MarioZ i got the same exception, but when i tried to write the xps document with pagination.\r\nAnd i saw your question on closed issue that looks more like mine.\r\nMy solution was divide read and write file access\r\n\r\n`\r\n....\r\n//saving flow document as xps\r\nusing (var xpsDocument = new XpsDocument(__TempFileName, **FileAccess.Read**)) //was  **FileAccess.ReadWrite**\r\n{\r\nFixedDocumentSequence fixedDocSeq = xpsDocument.GetFixedDocumentSequence();\r\nvar documentPaginator documentPaginator = fixedDocSeq.DocumentPaginator;\r\n...\r\nusing (var newDoc = new XpsDocument(fileName, **FileAccess.Write**))\r\n{\r\n...\r\nXpsDocumentWriter writer = PrintQueue.CreateXpsDocumentWriter(__PrintQueue);\r\n....\r\nwriter.Write(documentPaginator);\r\nxpsDocument.Close();   \r\n}\r\n}\r\n\r\n\u003e ...\r\n\r\n `\r\n Something like this in .net 5.0\r\n \r\n Sorry for formatting, my first comment ever",
                                           "updatedAt":  "2021-07-29T13:27:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IIFCx",
                                           "createdAt":  "2022-08-10T02:27:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "PeterPandefu",
                                           "body":  "I have the same problem,please fix it soon",
                                           "updatedAt":  "2022-08-10T02:27:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IIFMy",
                                           "createdAt":  "2022-08-10T02:28:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "PeterPandefu",
                                           "body":  "What\u0027s more, I can\u0027t print,Using XpsDocument with DocumentViewer",
                                           "updatedAt":  "2022-08-10T02:28:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IIGZV",
                                           "createdAt":  "2022-08-10T02:37:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Would you be interested in debugging into it @PeterPandefu ?",
                                           "updatedAt":  "2022-08-10T02:37:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IIHBc",
                                           "createdAt":  "2022-08-10T02:42:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "PeterPandefu",
                                           "body":  "\u003e Would you be interested in debugging into it @PeterPandefu ?\r\n\r\nwhat should I do?",
                                           "updatedAt":  "2022-08-10T02:42:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IIJBr",
                                           "createdAt":  "2022-08-10T03:00:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "PeterPandefu",
                                           "body":  "\u003e Would you be interested in debugging into it @PeterPandefu ?\r\n\r\nIs such that.\r\nI have the same problem as him@MarioZ. I using XpsDocument with DocumentViewer and FlowDocument in WPF, \r\nLoadXps like this:\r\n`      \r\nusing (MemoryStream ms = new MemoryStream())\r\n                {\r\n                    using (Package package = Package.Open(ms, FileMode.Create, FileAccess.ReadWrite))\r\n                    {\r\n                        Uri DocumentUri = new Uri(\"pack://InMemoryDocument.xps\");\r\n                        PackageStore.RemovePackage(DocumentUri);\r\n                        PackageStore.AddPackage(DocumentUri, package);\r\n                        using (XpsDocument xpsDocument = new XpsDocument(package, CompressionOption.Fast, DocumentUri.AbsoluteUri))\r\n                        {\r\n                            XpsDocumentWriter writer = XpsDocument.CreateXpsDocumentWriter(xpsDocument);\r\n                            //m_doc is FlowDocument;\r\n                            writer.Write(((IDocumentPaginatorSource)m_doc).DocumentPaginator);\r\n                            docViewer.Document = xpsDocument.GetFixedDocumentSequence();\r\n                            xpsDocument.Close();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                throw; \r\n            }`\r\n\r\nIf My FlowDocument Contain Image ,This error will appear,otherwise no\r\nAnd The issue occurs only in .NET Core, it doesn\u0027t occur in the .NET Framework.\r\nI don\u0027t konw my description is detailed?\r\nI wish you can help me.Thanks!\r\n",
                                           "updatedAt":  "2022-08-10T03:00:29Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "IOException when viewing XpsDocument with DocumentViewer",
        "labels":  [
                       "area-System.IO.Compression"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/41914",
        "createdAt":  "2020-09-05T14:13:12Z",
        "number":  41914,
        "author":  "dovisutu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODPxw5A==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "snechaev",
                                            "createdAt":  "2025-03-06T13:21:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "clicky",
                                            "createdAt":  "2025-09-11T03:59:47Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-09-11T04:02:08Z",
        "body":  "\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\nWhen using `ZipFileExtensions.CreateEntryFromFile` to create an entry in a ZipArchive w/ parameter `entryName` set to a path using **backward slashes(\\\\)** as directory separtor, it writes the entryName *as-is* into the archive\u0027s `Central Directory` section, as opposed to changing all the backward slashes **into forward slashes(/)**, as in the standard:\r\n```\r\n      file name: (Variable)\r\n\r\n          The name of the file, with optional relative path.\r\n          The path stored should not contain a drive or\r\n          device letter, or a leading slash.  All slashes\r\n          should be forward slashes \u0027/\u0027 as opposed to\r\n          backwards slashes \u0027\\\u0027 for compatibility with Amiga\r\n          and Unix file systems etc.  If input came from standard\r\n          input, there is no file name field.  If encrypting\r\n          the central directory and general purpose bit flag 13 is set \r\n          indicating masking, the file name stored in the Local Header \r\n          will not be the actual file name.  A masking value consisting \r\n          of a unique hexadecimal value will be stored.  This value will \r\n          be sequentially incremented for each file in the archive. See\r\n          the section on the Strong Encryption Specification for details \r\n          on retrieving the encrypted file name. \r\n```\r\nand as what ZipFile.CreateFromDirectory does.\r\nIt caused problems when I use Java8u261 to read the archive created using CreateEntryFromFile with directories, and the Java program can\u0027t properly read the directory structure.\r\n##### Minimal reproduce:\r\n```csharp\r\nusing System.IO;\r\nusing System.IO.Compression;\r\npublic class Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        using var stream = File.Create(\".\\\\testZip.zip\");\r\n        using var archive = new ZipArchive(stream, ZipArchiveMode.Create); // also ZipArchiveMode.Update\r\n        archive.CreateEntryFromFile(\".\\\\test.txt\", \"testDir1\\\\testDir2\\\\test.txt\");\r\n    }\r\n}\r\n```\r\nwith `Format-Hex`, you can see it writes backward slashes into the test zip.\r\n##### Example hexdump:\r\n```\r\n           00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\r\n\r\n00000000   50 4B 03 04 14 00 00 00 08 00 78 B0 25 51 CB A2  PK........x°%QË¢\r\n00000010   0E 96 19 00 00 00 22 00 00 00 1A 00 00 00 74 65  ......\".......te\r\n00000020   73 74 44 69 72 31 5C 74 65 73 74 44 69 72 32 5C  stDir1\\testDir2\\\r\n00000030   74 65 73 74 2E 74 78 74 7B BF 7B 7F 69 56 66 69  test.txt{¿{.iVfi\r\n00000040   46 65 7A 49 7A 65 06 90 99 9D 05 E6 14 C1 B8 F9  FezIze.....æ.Á¸ù\r\n00000050   00 50 4B 01 02 14 00 14 00 00 00 08 00 78 B0 25  .PK..........x°%\r\n00000060   51 CB A2 0E 96 19 00 00 00 22 00 00 00 1A 00 00  QË¢......\"......\r\n00000070   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 74  ...............t\r\n00000080   65 73 74 44 69 72 31 5C 74 65 73 74 44 69 72 32  estDir1\\testDir2\r\n00000090   5C 74 65 73 74 2E 74 78 74 50 4B 05 06 00 00 00  \\test.txtPK.....\r\n000000A0   00 01 00 01 00 48 00 00 00 51 00 00 00 00 00     .....H...Q..... \r\n```\r\nsee `0000007F - 00000098`.\r\n\u003c!--\r\n* Please share a clear and concise description of the problem.\r\n* Include minimal steps to reproduce the problem if possible. E.g.: the smallest possible code snippet; or a small repo to clone, with steps to run it.\r\n* What behavior are you seeing, and what behavior would you expect?\r\n  --\u003e\r\n\r\n### Configuration\r\n\r\ndotnet version: 3.1.401 ( Didn\u0027t try 5.0 preview 8 )\r\nOS \u0026 version: 1909 18363.1016\r\narchitecture: x64\r\n\u003c!--\r\n* Which version of .NET is the code running on?\r\n* What OS and version, and what distro if applicable?\r\n* What is the architecture (x64, x86, ARM, ARM64)?\r\n* Do you know whether it is specific to that configuration?\r\n  --\u003e\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOw1gdbA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc43HAYE",
                                           "createdAt":  "2021-09-22T04:56:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "carlossanlop",
                                           "body":  "Thanks for the detailed description, @dovisutu. The code that handles setting the entry name remained the same since 3.1, so what you reported above should still repro.\r\n\r\nI am not convinced this is a bug in .NET: Our code is capable of opening zip files with entries created using any separator (`/` or `\\`). This is something 7-Zip, WinRAR and Windows Explorer can do as well.\r\n\r\nThe ability to determine the separator was first reported as an issue in this old issue: https://github.com/dotnet/runtime/issues/15938 , then fixed here: https://github.com/dotnet/runtime/issues/15939\r\n\r\nWe perform this detection here: https://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/libraries/System.IO.Compression/src/System/IO/Compression/ZipArchiveEntry.cs#L203-L204\r\n\r\nAnd we test it here (this unit test has very good comments, by the way): https://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/libraries/System.IO.Compression/tests/ZipArchive/zip_ManualAndCompatibilityTests.cs#L55\r\n\r\nSo I think this is a bug in Java. They should be just as flexible as all the mentioned platforms.\r\n\r\nHaving said that, I do agree that the spec is _suggesting_ that `/` slashes _should_ be used as directory separators. If we decided to change the behavior in .NET, we would have to make sure to _only_ use the `/` separator when _creating_ an entry, and avoid accidentally transforming the separators when updating. I mention this because the code that updates the entry name is shared independently of the `ZipArchiveMode` used:\r\n\r\n- When updating, we set the `FullName` of the `ZipArchiveEntry` in this constructor: https://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/libraries/System.IO.Compression/src/System/IO/Compression/ZipArchiveEntry.cs#L75\r\n- When creating, we set the `FullName` of the `ZipArchiveEntry in this other constructor: https://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/libraries/System.IO.Compression/src/System/IO/Compression/ZipArchiveEntry.cs#L124\r\n- The `FullName` property setter saves the entry name without manipulating the separators at all: https://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/libraries/System.IO.Compression/src/System/IO/Compression/ZipArchiveEntry.cs#L195-L196\r\n",
                                           "updatedAt":  "2021-09-22T04:56:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43gd1N",
                                           "createdAt":  "2021-09-30T12:02:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dovisutu",
                                           "body":  "Yeah, that\u0027s reasonable. \r\nOccasions like with Java does occur, though, so I\u0027d prefer changing separators to `/` upon creation (and only creation). (Or possibly control the behavior through an option.)\r\nBTW, if *not* doing the change, I suggest noting that backward slashes ~may have unexpected compatibility issues with some programs~ *aren\u0027t as widely accepted by different applications* (as @FilipToth noted) in the documentation. ~(Does that count as compatibility issues?)~",
                                           "updatedAt":  "2021-10-01T02:36:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43itwi",
                                           "createdAt":  "2021-10-01T02:33:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dovisutu",
                                           "body":  "Upon an irrelavent search I find that the standard had (maybe) changed into the following:\r\n```\r\n4.4.17 file name: (Variable)\r\n\r\n       4.4.17.1 The name of the file, with optional relative path.\r\n       The path stored MUST NOT contain a drive or\r\n       device letter, or a leading slash.  All slashes\r\n       MUST be forward slashes \u0027/\u0027 as opposed to\r\n       backwards slashes \u0027\\\u0027 for compatibility with Amiga\r\n       and UNIX file systems etc.  If input came from standard\r\n       input, there is no file name field.  \r\n```\r\nHere, the description for slashes had changed from `SHOULD` to `MUST`.\r\n\r\nNot sure if it\u0027s a revision of the former or not, but apparantly changing into `/` became a necessity.\r\nBTW, this is the file header (partial):\r\n```\r\nVersion: 6.3.9 \r\nStatus: FINAL - replaces version 6.3.8\r\nRevised: July 15, 2020\r\n```",
                                           "updatedAt":  "2021-10-01T02:33:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gXBpB",
                                           "createdAt":  "2025-02-28T11:18:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "snechaev",
                                           "body":  "Just a note: the PHP also can\u0027t handle the archives, created by `System.IO.Compression`, properly due to the incorrect slashes. \nThe error message looks like the following:\n```\nWarning: file_get_contents(zip:///var/www/site/shared/web/uploads/test.zip#resources/test.xml): failed to open stream: operation failed \n```\n(in the archive the filename is `resources\\test.xml` - see the slash).",
                                           "updatedAt":  "2025-02-28T11:18:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DWB1s",
                                           "createdAt":  "2025-09-11T04:02:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "clicky",
                                           "body":  "This is a particular issue for me on mac, calling the `ExtractToDirectory` method will create files with backslashes in the name which took me a while to figure out.",
                                           "updatedAt":  "2025-09-11T04:02:08Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "ZipFileExtensions.CreateEntryFromFile doesn\u0027t change backward slashes to forward slashes",
        "labels":  [
                       "area-System.IO.Compression",
                       "in-pr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/43004",
        "createdAt":  "2020-10-03T15:55:32Z",
        "number":  43004,
        "author":  "Mikolaytis",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODJaI1w==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "D3-LucaPiombino",
                                            "createdAt":  "2020-10-06T20:56:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Wenfengcheng",
                                            "createdAt":  "2022-05-18T02:44:05Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "Wenfengcheng",
                                            "createdAt":  "2022-05-18T02:55:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NickDarvey",
                                            "createdAt":  "2023-06-08T01:24:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "amis92",
                                            "createdAt":  "2023-06-18T21:07:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "eatkimchee",
                                            "createdAt":  "2024-01-11T16:33:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pscho-msft",
                                            "createdAt":  "2024-01-11T16:35:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "buddyvernon",
                                            "createdAt":  "2024-01-11T16:58:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kronic",
                                            "createdAt":  "2024-04-09T03:56:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "edwardneal",
                                            "createdAt":  "2024-06-09T17:51:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AndreNecker",
                                            "createdAt":  "2025-01-07T14:57:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ivanjx",
                                            "createdAt":  "2025-04-05T11:15:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gjmwolmarans",
                                            "createdAt":  "2025-07-31T19:49:00Z"
                                        }
                                    ],
                          "totalCount":  13
                      },
        "updatedAt":  "2025-04-05T11:12:59Z",
        "body":  "## Background and Motivation\r\n\r\nIn our app we are reading huge zip files from disk. They are containing json files, images, etc.\r\nWe want to open and parse the files as fast as possible(async) and with zero memory pressure.\r\n\r\nThere is two options to solve the issue with current API:\r\n1) Open `ZipArchive` from `FileStream`, Read everything to the memory and process data async. - not fast enough and creates **gigantic** memory pressure.\r\n2) Open `ZipArchive` from `FileStream`. Read all the entries and create a new `ZipArchive` instance from new `FileStream` instances for each archive entry to open process files async on read. - fast enough, but **big** allocations from `ZipArchive`, because every new `ZipArchive` instance will parse the full zip header data in the `ReadCentralDirectory` method.\r\n\r\nI\u0027ve copy/pasted the whole `System.IO.Compression` to our project and added a method to the `ZipArchiveEntry` that can open any entry for async read in the new `FileStream`. So I can parse files from archive entries async without memory pressure.\r\n\r\nI think that think that I am not the only developer, that needs this solution (press 👍), so I\u0027ve decided to make a neat and simple API proposal.\r\n\r\n## Proposed API\r\n\r\n``` C#\r\nnamespace System.IO.Compression\r\n{\r\n    public class ZipArchiveEntry\r\n    {\r\n        /// \u003csummary\u003e\r\n        /// Opens the entry in the stream duplicate for async archive read.\r\n        ///\r\n        /// Restrictions:\r\n        /// Only ZipArchive opened with ZipArchiveMode.Read is supported.\r\n        /// Only ZipArchive opened from the FileStream is supported.\r\n        /// \u003c/summary\u003e\r\n        /// \u003creturns\u003eA Stream that represents the contents of the entry, created from the duplicate FileStream\u003c/returns\u003e\r\n        public Stream OpenWithStreamCopy()\r\n        {\r\n            if (_archive.Mode != ZipArchiveMode.Read)\r\n            {\r\n                throw new NotSupportedException(\"Only ZipArchiveMode.Read is supported\");\r\n            }\r\n\r\n            if (!(_archive.ArchiveStream is FileStream fileStream))\r\n            {\r\n                throw new NotSupportedException(\"Only FileStream is supported\");\r\n            }\r\n\r\n            var fileStreamCopy = new FileStream(fileStream.Name, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);\r\n            Stream compressedStream = new SubReadStream(fileStreamCopy, OffsetOfCompressedData, _compressedSize, true);\r\n            return GetDataDecompressor(compressedStream);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## Usage Examples\r\n\r\n``` C#\r\nawait using var fileStream = File.OpenRead(\"HugeSketchFile.sketch\");\r\nusing var archive = new ZipArchive(fileStream, ZipArchiveMode.Read);\r\nawait Task.WhenAll(archive.Entries.Select(async entry =\u003e\r\n{\r\n\tawait using var entryStream = entry.OpenWithStreamCopy();\r\n\tawait ProcessFileAsync(entryStream);\r\n}));\r\n```\r\n\r\n## Alternative Designs\r\n\r\nMaybe someone can provide the more universal approach that can support another types of `Stream`.\r\n\r\n## Risks\r\n\r\n1. I do not know if all platforms supported in the .Net Core 5 are supporting async file read operations.\r\n2. I\u0027m thinking that I\u0027ve missed some IO cases that should be handled in that method.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOpb2cJw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Za6yG",
                                           "createdAt":  "2025-01-06T21:36:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "grochoge",
                                           "body":  "Right now `ZipArchive` reads the entire stream contents into memory if the stream its given isn\u0027t seekable.\n\nI want to be able to download a .zip over HTTP and extract it as it downloads without copying the entire stream into memory using the local file headers instead of needing to download the entire file for the central directory.\n\nMaybe something like `static IAsyncEnumerator\u003cZipArchiveEntry\u003e ReadFromStream( Stream stream )` in the `ZipArchiveEntry` class? Or some other class that provides a similar interface but has read-only unseekable streams that become invalid on going to the next entry.",
                                           "updatedAt":  "2025-01-06T21:38:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6lvZwn",
                                           "createdAt":  "2025-04-05T11:12:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ivanjx",
                                           "body":  "ZipArchive will also need to be changed in terms of parsing the entries. currently it is reading it without the async IO apis and doing that work in the ctor (ugh).\n\nhttps://github.com/dotnet/runtime/blob/main/src/libraries/System.IO.Compression/src/System/IO/Compression/ZipArchive.cs#L183",
                                           "updatedAt":  "2025-04-05T11:12:58Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "System.IO.Compression.ZipArchive async read of entries from FileStream",
        "labels":  [
                       "api-suggestion",
                       "area-System.IO.Compression"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/43231",
        "createdAt":  "2020-10-09T19:40:21Z",
        "number":  43231,
        "author":  "vsfeedback",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCnChUA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cremor",
                                            "createdAt":  "2022-01-10T12:09:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alex-androshchuk-altium",
                                            "createdAt":  "2022-07-16T11:48:20Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-08-25T11:27:31Z",
        "body":  "_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/1190338/systemiocompression-handles-extended-characters-in.html)._\n\n---\n[severity:It\u0027s more difficult to complete my work]\r\ncreate a text file name \"tämä.txt\"\nsend to compressed folder\nExtracting this file it is read by library as \"t„m„.txt\"\n\nWindows explorer expands the zip fine, as other compression software\u0027s\n\n```\nusing System.IO;\nusing System.IO.Compression;\n\nnamespace ZIPtest\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string zipFile = @\"C:\\temp\\tämä.zip\";\n\nusing (ZipArchive paketti = ZipFile.OpenRead(zipFile))\n            {\n                foreach (ZipArchiveEntry entry in paketti. Entries)\n                {\n                    string nimi = Path.Combine(@\"c:\\temp\", entry. Name);\n                    entry. ExtractToFile(nimi);\n                }\n\n}\n        }\n    }\n}\n```\n\n---\n### Original Comments\n\n#### Feedback Bot on 9/20/2020, 11:00 PM: \n\n\u003cp\u003eWe have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.\u003c/p\u003e\n\n\n---\n### Original Solutions\n\n#### Tarek Mahmoud Sayed [MSFT] solved on 9/30/2020, 01:44 PM, 0 votes: \n\n\u003cp\u003eThanks for sending the issue. I have tried it the same thing and I was not able to reproduce the issue. My guess here is the problem is not really the \u003ca target=\u0027_blank\u0027 href=\"http://ZipArchiveEntry.Name\"\u003eZipArchiveEntry.Name\u003c/a\u003e content but it could be the Visual Studio locals Window displaying the string differently and this can be depending on the configuration of your machine. Usually I am seeing this maybe depending on the default codepage on your system.\u003c/p\u003e\n\u003cp\u003eHere is the code I tried:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e        using (ZipArchive paketti = ZipFile.OpenRead(@\u0026quot;F:\\temp\\release.zip\u0026quot;))\n        {\n            foreach (ZipArchiveEntry entry in paketti.Entries)\n            {\n                Console.WriteLine($\u0026quot;{entry.Name} ... {DumpString(entry.Name)}\u0026quot;);\n            }\n        }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd this printed the output:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  tämä.txt ... \\u0074\\u00e4\\u006d\\u00e4\\u002e\\u0074\\u0078\\u0074\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003ewhich is correct.\u003c/p\u003e\n\u003cp\u003eI suggest you can try the same either manually printing the characters ordinal values and check your system configuration like default locale and codepage in the system.\u003c/p\u003e\n\n####  on 10/8/2020, 05:05 AM: \n\n(private comment, text removed)\n#### Tarek Mahmoud Sayed [MSFT] on 10/8/2020, 10:10 AM: \n\n\u003cp\u003eThanks for your reply. Unfortunately I cannot reach the files that you have attached. Could you please try to upload them again and let me know. \u003cbr\u003e\u003cbr\u003eAlso, please attach the code that you used to create the zip file again to see how did you include the file tämä.txt too.\u003c/p\u003e\n\n####  on 10/9/2020, 02:29 AM: \n\n(private comment, text removed)\n#### Tarek Mahmoud Sayed [MSFT] on 10/9/2020, 11:01 AM: \n\n\u003cp\u003eThanks for the details. I\u0027ll take a look.\u003c/p\u003e\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOv-u3Ig==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNjM3MjM3MA==",
                                           "createdAt":  "2020-10-09T19:49:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEfHGZA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cremor",
                                                                               "createdAt":  "2022-01-10T12:09:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ArminShoeibi",
                                                                               "createdAt":  "2025-08-21T12:13:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "I have looked at this issue and I am seeing the Zip archive entry names encoding is not handled correctly. When creating a new archive file there will be a generic flag telling if the archive is encoded using UTF-8 or not. if this flag is off, means the archive is not encoded using UTF-8, we don\u0027t handle the right encoding at that time. the following comment has more details:\r\n\r\nhttps://github.com/dotnet/runtime/blob/b75f8d9fd1b3bcac5d82469bf39f1aea2c3a1652/src/libraries/System.IO.Compression/src/System/IO/Compression/ZipArchive.cs#L356\r\n\r\nUsually when UTF-8 encoding is not used, we should consider using the 437 encoding instead. Or try to investigate more the details as described in https://pkware.cachefly.net/webdocs/casestudies/APPNOTE.TXT in `Appendix D`. \r\n\r\nThis issue is kind of obvious to the users because when using Windows shell to create a new Archive, it doesn\u0027t create the archive using UTF-8 and I am seeing it is using encoding 437.",
                                           "updatedAt":  "2020-10-09T19:52:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNzUwNTIxMQ==",
                                           "createdAt":  "2020-10-13T05:50:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jyrijh",
                                           "body":  "Thank you. Now I know what is happening and this will be fixed.\r\n\r\nBut in the mean time I could do this, and force codepage 437 to get correct value from _storedEntryNameBytes.\r\nentry.Name stays incorrect.\r\n\r\nI have to test if this works correctly in all cases\r\n\r\n```\r\nstring zipFile = @\"C:\\temp\\tämä.zip\";            \r\nvar ibm437 = Encoding.GetEncoding(\"IBM437\");\r\n\r\nusing (ZipArchive paketti = ZipFile.OpenRead(zipFile))\r\n{\r\n    var entryEncoding = paketti.GetType().\r\n        GetProperties(BindingFlags.NonPublic | BindingFlags.Instance).\r\n        Single(pi =\u003e pi.Name == \"EntryNameEncoding\");\r\n\r\n    entryEncoding.SetValue(paketti, ibm437);\r\n\r\n    foreach (ZipArchiveEntry entry in paketti.Entries)\r\n    {\r\n        var name = entry.GetType().GetFields(BindingFlags.NonPublic | BindingFlags.Instance).Single(pi =\u003e pi.Name == \"_storedEntryNameBytes\");\r\n        var nameValue = name.GetValue(entry);\r\n        var result = ibm437.GetString((byte[])nameValue);\r\n\r\n        Console.WriteLine($\"{entry.Name} ... {DumpString(entry.Name)}\");\r\n        Console.WriteLine($\"{result} ... {DumpString(result)}\");\r\n    }\r\n}\r\n```\r\n",
                                           "updatedAt":  "2020-10-13T07:01:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNzU1OTAzMw==",
                                           "createdAt":  "2020-10-13T07:48:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jyrijh",
                                           "body":  "ZipFile.Open(String, ZipArchiveMode, Encoding)\r\n\r\nNow I just need to figure out what encoding has been used",
                                           "updatedAt":  "2020-10-13T07:48:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNzY0MzU5Mg==",
                                           "createdAt":  "2020-10-13T10:20:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jyrijh",
                                           "body":  "With this I came up. Minimal detection for encoding and after quick testing it works.\r\n\r\n```\r\nusing System;\r\nusing System.IO;\r\nusing System.IO.Compression;\r\nusing System.Linq;\r\nusing System.Runtime.InteropServices;\r\nusing System.Text;\r\n\r\nnamespace ZIPtest\r\n{\r\n    class Program\r\n    {\r\n        [Flags]\r\n        public enum GeneralPurpose : ushort\r\n        {\r\n            None = 0,\r\n            bit00 = 1 \u003c\u003c 0,\r\n            bit01 = 1 \u003c\u003c 1,\r\n            bit02 = 1 \u003c\u003c 2,\r\n            bit03 = 1 \u003c\u003c 3,\r\n            bit04 = 1 \u003c\u003c 4,\r\n            bit05 = 1 \u003c\u003c 5,\r\n            bit06 = 1 \u003c\u003c 6,\r\n            bit07 = 1 \u003c\u003c 7,\r\n            bit08 = 1 \u003c\u003c 8,\r\n            bit09 = 1 \u003c\u003c 9,\r\n            bit10 = 1 \u003c\u003c 10,\r\n            languageEncoding = 1 \u003c\u003c 11,\r\n            bit12 = 1 \u003c\u003c 12,\r\n            bit13 = 1 \u003c\u003c 13,\r\n            bit14 = 1 \u003c\u003c 14,\r\n            bit15 = 1 \u003c\u003c 15\r\n        }\r\n\r\n        [StructLayout(LayoutKind.Sequential, Pack = 1)]\r\n        struct Header\r\n        {\r\n            [MarshalAs(UnmanagedType.ByValArray, SizeConst = 4)]\r\n            public byte[] signature;\r\n            public ushort version;\r\n            public GeneralPurpose generalPurposeBit;\r\n        }\r\n\r\n        static void Main()\r\n        {\r\n            string filename = @\"C:\\temp\\tämä.zip\";\r\n            var encoding = DetectEncoding(filename);\r\n            CheckNames(filename, encoding);\r\n\r\n            filename = @\"C:\\temp\\漢字.zip\";\r\n            encoding = DetectEncoding(filename);\r\n            CheckNames(filename, encoding);\r\n\r\n            void CheckNames(string zipName, Encoding zipEncoding)\r\n            {\r\n                using (ZipArchive paketti = ZipFile.Open(zipName, ZipArchiveMode.Read, zipEncoding))\r\n                {\r\n                    foreach (ZipArchiveEntry entry in paketti.Entries)\r\n                    {\r\n                        Console.WriteLine($\"{entry.Name} ... {DumpString(entry.Name)}\");\r\n                    }\r\n                }\r\n            }\r\n\r\n            string DumpString(string name) =\u003e string.Join(\", \", name.ToArray().Select(x =\u003e $\"{(int)x:X4}\"));\r\n        }\r\n\r\n\r\n        static Encoding DetectEncoding(string file)\r\n        {\r\n            var data = new byte[8];\r\n            using (FileStream sr = new FileStream(file, FileMode.Open))\r\n                sr.Read(data, 0, 8);\r\n\r\n            GCHandle gch = GCHandle.Alloc(data, GCHandleType.Pinned);\r\n            Header header = (Header)Marshal.PtrToStructure(gch.AddrOfPinnedObject(), typeof(Header));\r\n            gch.Free();\r\n\r\n            if (header.generalPurposeBit.HasFlag(GeneralPurpose.languageEncoding))\r\n                return Encoding.UTF8;\r\n            else\r\n                return Encoding.GetEncoding(\"IBM437\");\r\n        }\r\n    }\r\n}\r\n```",
                                           "updatedAt":  "2020-10-13T10:20:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNzcwOTc0NA==",
                                           "createdAt":  "2020-10-13T12:37:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jyrijh",
                                           "body":  "And no it didn\u0027t work as intended.\r\n\r\nif zip file has these in it, they will appear in this order, and my code will get encoding from first entry.\r\n```\r\naa 漢字.txt\r\näÄöÖåÅüÜéÉ.txt\r\n漢字.txt\r\n```\r\nAnd then the second filename is actually 437 encoded. \r\nIO.Compression will handle everything with same encoding when it should handle it per entry.",
                                           "updatedAt":  "2020-10-13T12:37:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNzg2NjM0MA==",
                                           "createdAt":  "2020-10-13T16:38:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "`ZipFile.Open(String, ZipArchiveMode, Encoding)` can be used to choose the specific encoding and should help if you know the encoding.\r\n\r\nFor https://github.com/dotnet/runtime/issues/43231#issuecomment-707643592, this may work in some cases but not in general cases as you indicated later. if you look at pkware.cachefly.net/webdocs/casestudies/APPNOTE.TXT it says \r\n\r\n```\r\nD.3 Applications MAY choose to supplement this file name storage through the use \r\nof the 0x0008 Extra Field.  Storage for this optional field is currently \r\nundefined, however it will be used to allow storing extended information \r\non source or target encoding that MAY further assist applications with file \r\nname, or file content encoding tasks.  Please contact PKWARE with any\r\nrequirements on how this field SHOULD be used.\r\n```\r\n",
                                           "updatedAt":  "2020-10-13T16:38:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46gM94",
                                           "createdAt":  "2021-11-29T10:53:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jyrijh",
                                           "body":  "After giving this some thought, exposing the header for entries would be suitable solution for this. Then it would be up to programmer to check those values if they are interested in them.",
                                           "updatedAt":  "2021-11-29T10:53:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48IZbk",
                                           "createdAt":  "2022-01-10T12:36:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCnBRSw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "FilipToth",
                                                                               "createdAt":  "2022-01-10T12:45:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alex-androshchuk-altium",
                                                                               "createdAt":  "2022-07-15T23:05:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "cremor",
                                           "body":  "I also had ZIP entry encoding problems recently and this is what I figured out:\r\n\r\n- Archives created by .NET itself can be extracted without specifying an encoding just fine, so the automatically detected encoding is correct for those.\r\n- Archives created by the Windows shell extension or by 7-Zip (on Windows) can **not** correctly be extracted with .NET without specifying an encoding manually.\r\n  More information here: https://stackoverflow.com/a/32443735/631802\r\n- Archives created on macOS also can **not** be correctly extracted with .NET. This is also true if the Windows workaround is applied.\r\n  This means that it is not possible to extract both Windows and macOS archives with the same encoding workaround.\r\n\r\nI think the runtime should handle all the encoding detection work.",
                                           "updatedAt":  "2022-01-10T12:36:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48Icrz",
                                           "createdAt":  "2022-01-10T12:55:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jyrijh",
                                           "body":  "This is exactly why the language encoding bit should be exposed. if it is other that UTF-8 then runtime has no way of knowing what the codepage should be. Me as developer can \"guess\" what codepage to use by knowing where the file is coming from.",
                                           "updatedAt":  "2022-01-10T12:55:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48JayF",
                                           "createdAt":  "2022-01-10T16:45:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cremor",
                                           "body":  "\u003e if it is other that UTF-8 then runtime has no way of knowing what the codepage should be\r\n\r\nHow are standalone archiving tools like 7-Zip are handling that case then? 7-Zip can extract all archives that I tested with correct encodings. If 7-Zip can do it then the .NET runtime can do it for sure too?",
                                           "updatedAt":  "2022-01-10T16:45:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48QsO_",
                                           "createdAt":  "2022-01-12T12:44:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jyrijh",
                                           "body":  "If you create an archive that has any other encoding that UTF-8 or IBM437 it doesn\u0027t.\r\n\r\n7-zip will extract this \")=.txt\" as \"]~Kúºú\"\r\n\r\nSo I  need to know where the file came from and have knowledge what codepage they used.\r\nUsually it should be UTF-8 or IBM437, but even then I need to know then per entry what the language encoding bit is\r\n\r\n```\r\nvar zipFile = @\"c:\\temp\\test.zip\";\r\nvar name = \")=.txt\";\r\nvar encoding = Encoding.GetEncoding(\"IBM297\");\r\n\r\nusing (FileStream stream = new FileStream(zipFile, FileMode.OpenOrCreate))\r\n{\r\n    using (ZipArchive archive = new ZipArchive(stream, ZipArchiveMode.Update, false, encoding))\r\n    {\r\n        var entry = archive.CreateEntry(name);\r\n        using (StreamWriter writer = new StreamWriter(entry.Open()))\r\n        {\r\n            writer.WriteLine(\"text\");\r\n        }\r\n    }\r\n}\r\n```\r\n",
                                           "updatedAt":  "2022-01-12T12:44:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48Qxai",
                                           "createdAt":  "2022-01-12T13:10:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cremor",
                                           "body":  "Yeah ok, but I meant archives that were created with \"standard\" tools. .NET should be able to handle those automatically.",
                                           "updatedAt":  "2022-01-12T13:10:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48_ti0",
                                           "createdAt":  "2022-01-27T15:28:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cremor",
                                           "body":  "I just found this comment in the .NET source code: https://source.dot.net/#System.IO.Compression/System/IO/Compression/ZipArchive.cs,356\r\n\r\nWhat\u0027s weird about that is that it seems to be wrong. Specifically the part where it says\r\n\r\n\u003e For instance, the Windows Shell Zip tool takes \"something else\" to mean \"the local system codepage\". We default to the same behaviour, [...]\r\n\r\nIn my experience this is not the case, see https://github.com/dotnet/runtime/issues/43231#issuecomment-1008834276. The Windows Shell Zip tool seems to use \"IBM850\" (**not** \"IBM437\"!) encoding (on Windows 10). And because .NET does **not** default to that (but instead defaults to [\"the current system default code page\"](https://docs.microsoft.com/en-us/dotnet/api/system.io.compression.ziparchive.-ctor?view=netframework-4.8#system-io-compression-ziparchive-ctor(system-io-stream-system-io-compression-ziparchivemode-system-boolean-system-text-encoding))), those Windows zip files can not be correctly extracted by .NET.\r\n\r\nMaybe .NET just understands \"the current system default code page\" different than Windows. As written, Windows seems to use \"IBM850\" encoding, which is available in .NET as `CultureInfo.CurrentCulture.TextInfo.OEMCodePage`. But .NET seems to think that the default is \"Windows-1252\" (available in `Encoding.Default`).\r\n\r\nAnyway, even if it would work by default for zip files created on Windows, we would still have problems with zip files created on macOS.",
                                           "updatedAt":  "2022-01-27T15:28:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49AMTD",
                                           "createdAt":  "2022-01-27T17:19:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e Maybe .NET just understands \"the current system default code page\" different than Windows. As written, Windows seems to use \"IBM850\" encoding, which is available in .NET as CultureInfo.CurrentCulture.TextInfo.OEMCodePage. But .NET seems to think that the default is \"Windows-1252\" (available in Encoding.Default).\r\n\r\nIf you are running with full framework, default code page would be picked up from Windows API `GetACP`. If running with .NET or .NET Core, the default codepage would be UTF-8. to get the default system codepage in .NET, need to register the codepages encoding as described in https://docs.microsoft.com/en-us/dotnet/api/system.text.codepagesencodingprovider?view=net-6.0#remarks and then call `Encoding.GetEncoding(0)`.",
                                           "updatedAt":  "2022-01-27T17:19:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49AVSL",
                                           "createdAt":  "2022-01-27T18:00:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cremor",
                                           "body":  "I tested on .NET Framework 4.8.\r\n\r\nBut as far as I understand it .NET Core/5/6 will have the same problem, right? Because neither uses the same ZIP entry name encoding by default that Windows uses.",
                                           "updatedAt":  "2022-01-27T18:01:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49AXQl",
                                           "createdAt":  "2022-01-27T18:09:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e But as far as I understand it .NET Core/5/6 will have the same problem, right? \r\n\r\nYes. I was just explaining how Encoding picks the default. ",
                                           "updatedAt":  "2022-01-27T18:09:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5herOQ",
                                           "createdAt":  "2023-07-14T07:34:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "caverna",
                                           "body":  "\u003e I tested on .NET Framework 4.8.\r\n\u003e \r\n\u003e But as far as I understand it .NET Core/5/6 will have the same problem, right? Because neither uses the same ZIP entry name encoding by default that Windows uses.\r\n\r\nyep! I reached this page having the same issue and it fails for .NET Core 7",
                                           "updatedAt":  "2023-07-14T07:34:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xtJHM",
                                           "createdAt":  "2024-01-24T08:48:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Stallind",
                                           "body":  "Commeting here since I found the thread googling about the same issue.\r\n\r\nFor .net framework 4.8 it works for me using Encoding.GetEncoding(System.Globalization.CultureInfo.CurrentCulture.TextInfo.OEMCodePage).\r\n\r\nFor .net core I used a somewhat ugly hack where I replace the \"illegal characters\". In this case swedish åäö.\r\n```\r\nvar replacements = new Dictionary\u003cstring,string\u003e { \r\n    { \"\\u0086\", \"å\" },\r\n    { \"\\u008f\", \"Å\"},\r\n    { \"\\u0084\", \"ä\"},\r\n    { \"\\u008e\", \"Ä\"},\r\n    { \"\\u0094\", \"ö\"},\r\n    { \"\\u0099\", \"Ö\"} \r\n};\r\nusing (ZipArchive source = System.IO.Compression.ZipFile.Open(@\"C:\\New Folder\\testing.zip\", ZipArchiveMode.Read, Encoding.GetEncoding(\"ISO-8859-1\")))\r\n{\r\n    foreach (ZipArchiveEntry entry in source.Entries)\r\n    {\r\n        var name = entry.Name;\r\n        foreach (var replacement in replacements)\r\n        {\r\n            name = name.Replace(replacement.Key, replacement.Value);\r\n        }\r\n        Console.WriteLine(name);\r\n    }\r\n}\r\n```\r\n\r\nI can\u0027t say this is the way to go and that I recommend it, but it solved the issue for me.\r\n",
                                           "updatedAt":  "2024-01-24T08:54:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_FlZs",
                                           "createdAt":  "2025-08-20T11:50:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEe-Rpw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "edwardneal",
                                                                               "createdAt":  "2025-08-20T14:27:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "alinpahontu2912",
                                           "body":  "Hey @jyrijh  @Stallind @tarekgh @cremor, doesn\u0027t [this](https://learn.microsoft.com/en-us/dotnet/core/compatibility/core-libraries/9.0/ziparchiveentry-encoding) mean that the problem has been solved already? ",
                                           "updatedAt":  "2025-08-20T11:50:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_G3xi",
                                           "createdAt":  "2025-08-20T13:03:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cremor",
                                           "body":  "Maybe, I haven\u0027t tested this with .NET 9 yet. My app where I found this problem uses .NET Framework and will probably never be ported. ",
                                           "updatedAt":  "2025-08-20T13:03:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_H52i",
                                           "createdAt":  "2025-08-20T14:01:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "The bar for changing .NET Framework is high. There is significant risk with every change that it will break something. Therefore, we fix only high-impactful / security issues in .NET Framework. For latest innovation, performance and cool new feature, .NET (Core) is the right place to be.",
                                           "updatedAt":  "2025-08-20T14:01:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_Sdas",
                                           "createdAt":  "2025-08-21T07:07:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jyrijh",
                                           "body":  "No, the zip entries don\u0027t expose the general purpose bit flag, there is no way the determine entry encoding in .NET.\nAnd ZipArchive doesn\u0027t offer automatic detection.\n\nSo if i try to open zip files without encoding, it defaults to uft-8 and entries that are in different encoding will come out incorrectly.\n\n\u003cimg width=\"1108\" height=\"551\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/9c8d08ce-b83c-49db-88f2-7a9232f66d4b\" /\u003e\n\nSo you have to write you own encoding detection. What i made only checks the first entry from central directory header and based on that I assume that all other entries  filename encoding will be the same\n",
                                           "updatedAt":  "2025-08-21T07:07:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_TOZF",
                                           "createdAt":  "2025-08-21T08:12:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jyrijh",
                                           "body":  "So you could also use reflection and get the `general purpose bit flag` from entry and based on that you can make decisions should you use the name as is or convert the bytes to another encoding.\n\nCode below will create this output\n```text\näÄöÖåÅüÜéÉ - Copy.txt ... äÄöÖåÅüÜéÉ - Copy.txt UnicodeFileNameAndComment\n??????????.txt ... äÄöÖåÅüÜéÉ.txt 0\n```\n\n```csharp\nusing System.IO.Compression;\nusing System.Reflection;\nusing System.Text;\n\nEncoding.RegisterProvider(CodePagesEncodingProvider.Instance);\nstring zipFile = @\"C:\\temp\\mixed.zip\";\nvar ibm437 = Encoding.GetEncoding(\"IBM437\");\n\nusing ZipArchive paketti = ZipFile.Open(zipFile, ZipArchiveMode.Read);\nvar entryEncoding = paketti.GetType();\n\nforeach (ZipArchiveEntry entry in paketti.Entries)\n{\n    var name = entry.GetType().GetFields(BindingFlags.NonPublic | BindingFlags.Instance).Single(pi =\u003e pi.Name == \"_storedEntryNameBytes\");\n\n    BitFlagValues generalPurposeBitFlag = (BitFlagValues)entry.GetType()\n        .GetFields(BindingFlags.NonPublic | BindingFlags.Instance)\n        .Single(pi =\u003e pi.Name == \"_generalPurposeBitFlag\")\n        .GetValue(entry)!;\n\n    string result = null!;\n    if ((generalPurposeBitFlag \u0026 BitFlagValues.UnicodeFileNameAndComment) != 0)\n        result = entry.Name;\n    else\n        result = ibm437.GetString((byte[])name.GetValue(entry)!);\n\n    Console.WriteLine($\"{entry.Name} ... {result} {generalPurposeBitFlag}\");\n}\n\n[Flags]\ninternal enum BitFlagValues : ushort\n{\n    IsEncrypted = 0x1,\n    DataDescriptor = 0x8,\n    UnicodeFileNameAndComment = 0x800\n}\n```\n\nmixed.zip was created with this.\n\n```csharp\nusing System.IO.Compression;\nusing System.Text;\n\nEncoding.RegisterProvider(CodePagesEncodingProvider.Instance);\n\n{\n    using ZipArchive paketti = ZipFile.Open(@\"C:\\temp\\mixed.zip\", ZipArchiveMode.Create, Encoding.UTF8);\n    var entry = paketti.CreateEntryFromFile(@\"C:\\temp\\äÄöÖåÅüÜéÉ - Copy.txt\", \"äÄöÖåÅüÜéÉ - Copy.txt\");\n}\n\n{\n    using ZipArchive paketti = ZipFile.Open(@\"C:\\temp\\mixed.zip\", ZipArchiveMode.Update, Encoding.GetEncoding(\"IBM437\"));\n    var entry = paketti.CreateEntryFromFile(@\"C:\\temp\\äÄöÖåÅüÜéÉ.txt\", \"äÄöÖåÅüÜéÉ.txt\");\n}\n```",
                                           "updatedAt":  "2025-08-21T08:12:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_T9wW",
                                           "createdAt":  "2025-08-21T09:13:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jyrijh",
                                           "body":  "And this works only in .NET. I tested with Framework version 4.7 -\u003e 4.8.1 and they always return the encoding you opened the zip file for `_generalPurposeBitFlag`. So in there you have to assume that the whole file has the same encoding as first entry.",
                                           "updatedAt":  "2025-08-21T09:14:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_k_p7",
                                           "createdAt":  "2025-08-22T12:09:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alinpahontu2912",
                                           "body":  "Hey @jyrijh, thanks for the comments. As mentioned above, touching .NET Framework is unlikely to happen. The new behavior of the ZipArchive class corrects a bug that was present in .NET 7 and .NET 8. Previously, the library would ignore the UTF-8 bit flag leading to corrupted filenames with special characters.\nStarting in .NET 9, the library now correctly checks each entry\u0027s header for the UTF-8 bit flag. If the flag is set, it uses UTF-8 to decode the filename. The user-supplied encoding is only used if the flag is not present. This change makes the ZipArchive library compliant with the ZIP specification and eliminates the need for reflection-based workarounds to handle mixed encodings.",
                                           "updatedAt":  "2025-08-22T12:09:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_lKTD",
                                           "createdAt":  "2025-08-22T12:24:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jyrijh",
                                           "body":  "@alinpahontu2912 but it still doesn\u0027t help if you have a zip file that was created like\n\n```csharp\nusing ZipArchive paketti = ZipFile.Open(@\"C:\\temp\\IBM437.zip\", ZipArchiveMode.Create, Encoding.GetEncoding(\"IBM437\"));\nvar entry = paketti.CreateEntryFromFile(@\"C:\\temp\\äÄöÖåÅüÜéÉ.txt\", \"äÄöÖåÅüÜéÉ.txt\");\n```\n\nAnd then you open it without providing encoding, then it is now opened always with utf-8, which will produce wrong output.\nAnd if you have a mixed zip, then those that were with utf-8 are correct, but rest depends.\n\nFor me the good solution would be, if the `generalPurposeBitFlag` and `storedEntryNameBytes` were properties for `ZipArchiveEntry` so I could check per entry, and act accordingly, so I don\u0027t need to use reflection, or read the bytes from file\n",
                                           "updatedAt":  "2025-08-22T12:24:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_lLjJ",
                                           "createdAt":  "2025-08-22T12:26:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jyrijh",
                                           "body":  "For now i created for myself this extension class\n\n```csharp\npublic static class ZipExtensions\n{\n    [Flags]\n    internal enum BitFlagValues : ushort\n    {\n        IsEncrypted = 0x1,\n        DataDescriptor = 0x8,\n        UnicodeFileNameAndComment = 0x800\n    }\n\n    public static bool IsUnicode(this ZipArchiveEntry entry)\n    {\n        BitFlagValues generalPurposeBitFlag = (BitFlagValues)entry.GetType()\n            .GetFields(BindingFlags.NonPublic | BindingFlags.Instance)\n            .Single(pi =\u003e pi.Name == \"_generalPurposeBitFlag\")\n            .GetValue(entry)!;\n\n        return (generalPurposeBitFlag \u0026 BitFlagValues.UnicodeFileNameAndComment) != 0;\n    }\n\n    public static string GetDecodedName(this ZipArchiveEntry entry, Encoding encoding)\n    {\n        // _storedEntryNameBytes is needed if we need to decode the name from another encoding\n        var name = entry.GetType().GetFields(BindingFlags.NonPublic | BindingFlags.Instance).Single(pi =\u003e pi.Name == \"_storedEntryNameBytes\");\n        return encoding.GetString((byte[])name.GetValue(entry)!);\n    }\n}\n```",
                                           "updatedAt":  "2025-08-22T12:26:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_6vfK",
                                           "createdAt":  "2025-08-25T11:12:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rzikm",
                                           "body":  "\u003e [@alinpahontu2912](https://github.com/alinpahontu2912) but it still doesn\u0027t help if you have a zip file that was created like\n\u003e \n\u003e using ZipArchive paketti = ZipFile.Open(@\"C:\\temp\\IBM437.zip\", ZipArchiveMode.Create, Encoding.GetEncoding(\"IBM437\"));\n\u003e var entry = paketti.CreateEntryFromFile(@\"C:\\temp\\äÄöÖåÅüÜéÉ.txt\", \"äÄöÖåÅüÜéÉ.txt\");\n\u003e And then you open it without providing encoding, then it is now opened always with utf-8, which will produce wrong output. And if you have a mixed zip, then those that were with utf-8 are correct, but rest depends.\n\nDo I understand correctly that you believe .NET should use IBM437 encoding by default (specifically, unless UnicodeFileNameAndComment bit is set and user did not explicitly provide other encoding)?\n\nI think that would bring us more in line with the specification. @dotnet/area-system-io-compression do we see any issue with such a change? I think we can keep a preference to UTF8 when writing non-ascii names (if explicit encoding wasn\u0027t specified), but for reading, I think we should default to IBM437 for non-UTF8 entries.",
                                           "updatedAt":  "2025-08-25T11:12:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_67ci",
                                           "createdAt":  "2025-08-25T11:27:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jyrijh",
                                           "body":  "@rzikm I\u0027m personally ok with UTF8, but what I want is a way to know if it was stored with UFT8 or not. And if it wasn\u0027t then I can make decisions based on that information.\n\nAs if it wasn\u0027t then I have either agreed with creator that they use specific encoding, and I can use the same for decoding the filename.",
                                           "updatedAt":  "2025-08-25T11:27:31Z"
                                       }
                                   ],
                         "totalCount":  29
                     },
        "title":  "System.IO.Compression handles extended characters incorrectly",
        "labels":  [
                       "bug",
                       "area-System.IO.Compression",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/44793",
        "createdAt":  "2020-11-17T10:33:58Z",
        "number":  44793,
        "author":  "GSPP",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODAqadw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "EgorBo",
                                            "createdAt":  "2020-11-17T10:43:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "strangeman375",
                                            "createdAt":  "2020-11-17T15:55:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2020-11-18T14:41:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NN---",
                                            "createdAt":  "2021-04-18T21:17:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sveinungf",
                                            "createdAt":  "2022-01-16T22:23:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SommerEngineering",
                                            "createdAt":  "2022-01-31T06:57:30Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "SommerEngineering",
                                            "createdAt":  "2022-01-31T06:57:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "danielchalmers",
                                            "createdAt":  "2022-08-21T18:52:16Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2022-08-27T09:39:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tipa",
                                            "createdAt":  "2023-11-12T21:26:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Tornhoof",
                                            "createdAt":  "2024-04-24T22:22:48Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "udlose",
                                            "createdAt":  "2024-10-08T20:12:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0xfeeddeadbeef",
                                            "createdAt":  "2025-03-31T02:10:39Z"
                                        }
                                    ],
                          "totalCount":  13
                      },
        "updatedAt":  "2025-08-15T15:50:15Z",
        "body":  "**Problem:**\r\n\r\nCompressing data currently requires the use of streams. For example:\r\n\r\n```cs\r\nstatic byte[] Compress(byte[] data)\r\n{\r\n    using (var destinationStream = new MemoryStream())\r\n    {\r\n        using (var deflateStream = new DeflateStream(destinationStream, CompressionMode.Compress, CompressionLevel.BestCompression, leaveOpen: true))\r\n        {\r\n            deflateStream.Write(data);\r\n        }\r\n\r\n        return destinationStream.ToArray();\r\n    }\r\n}\r\n\r\nbyte[] compressed = Compress(data);\r\n```\r\n\r\nThis code is alright. It could be more convenient, though:\r\n\r\n```cs\r\nbyte[] compressed = DeflateStream.CompressData(data, CompressionLevel.BestCompression);\r\n```\r\n\r\n**Benefits:**\r\n1. This is more terse.\r\n2. It\u0027s an expression as opposed to a statement. That makes it more composable. It can be a subexpression, for example, in a LINQ query.\r\n3. No way to forget resource cleanup or mess up code quality otherwise.\r\n4. Optimizations can be done under the covers.\r\n5. It is more beginner-friendly than first learning the mechanics of streams.\r\n\r\nThere is a related proposal that addresses this in a different way: https://github.com/dotnet/runtime/issues/39327 That proposal seems to be about avoiding allocations while this proposal is more about improving convenience.\r\n\r\n----\r\n\r\n**Proposal:**\r\n\r\nUse this pattern for all built-in compression types:\r\n\r\n```C#\r\npublic partial class DeflateStream\r\n{\r\n    public static byte[] CompressData(ReadOnlySpan\u003cbyte\u003e source, CompressionLevel compressionLevel = CompressionLevel.Default) =\u003e throw null;\r\n    public static byte[] DecompressData(ReadOnlySpan\u003cbyte\u003e source) =\u003e throw null;\r\n}\r\n```\r\n\r\nIt does not get more convenient than this. That is the primary goal.\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHON0X10g==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyODg0OTIzOQ==",
                                           "createdAt":  "2020-11-17T10:52:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "`ReadOnlySpan` could face with lifetime issues when sharing internal implementation. `ReadOnlyMemory` should be better.",
                                           "updatedAt":  "2020-11-17T10:52:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2MzA1NTI3MQ==",
                                           "createdAt":  "2021-01-19T19:01:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "carlossanlop",
                                           "body":  "Things to consider:\r\n\r\n- The advantage of adding such a helper is that we could ensure the compression task is done properly.\r\n- This suggested API is limited to in-memory compression. Besides a method that takes a byte buffer, Should we consider also APIs that involve compressing files? Should we extend such helpers to other compression classes?\r\n- I wonder if adding an API to a stream-based class is the right approach. Maybe we could think of an extensions class instead, like [ZipFileExtensions](https://docs.microsoft.com/en-us/dotnet/api/system.io.compression.zipfileextensions?view=net-5.0).\r\n\r\n\r\n",
                                           "updatedAt":  "2021-01-19T19:01:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43Qjge",
                                           "createdAt":  "2021-09-25T08:16:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODxYeLQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Daniel-Svensson",
                                                                               "createdAt":  "2024-09-07T16:44:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "xoofx",
                                           "body":  "There is also some past discussions at #2236 for reference.\r\n\r\nThough, I\u0027m not in favor of the proposal above, for the reason that the API `public static byte[] CompressData(ReadOnlySpan\u003cbyte\u003e source, ...` is not efficient (allocates always) and doesn\u0027t reflect how most native API work where the source/dest buffer and sizes are given by the client, so that you have a lot more control when you want to allocate, how you want to maintain this pool for the buffers... (See for example [LZ4_decompress_safe](https://github.com/lz4/lz4/blob/e2009622dd19556d31de498b68d8e555b7261251/lib/lz4.h#L164) or [LZ4_compress_fast](https://github.com/lz4/lz4/blob/e2009622dd19556d31de498b68d8e555b7261251/lib/lz4.h#L192))\r\n\r\nI would prefer that we follow what was suggested by @stephentoub in [this issue comment](https://github.com/dotnet/runtime/issues/2236#issuecomment-698925149) with low level encoders taking a Span-in/Span-out but I\u0027m also more interested of having raw level wrapper of compression libraries that can expose the specificities of each (e.g compression level between libraries can be different, level vs time can be an important factor as well) so that we can build higher level richer API (like the encoders or specific scenarios).",
                                           "updatedAt":  "2021-09-25T08:16:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43QqIf",
                                           "createdAt":  "2021-09-25T12:24:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "FiniteReality",
                                           "body":  "Is this not a dupe of https://github.com/dotnet/runtime/issues/39327 ?",
                                           "updatedAt":  "2021-09-25T12:24:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43RdBA",
                                           "createdAt":  "2021-09-26T15:13:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GSPP",
                                           "body":  "@FiniteReality #39327 does not have static methods. I think that\u0027s important to reach the best convenience possible.",
                                           "updatedAt":  "2021-09-26T15:13:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43RfXS",
                                           "createdAt":  "2021-09-26T16:21:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ycrumeyrolle",
                                           "body":  "\u003e There is also some past discussions at #2236 for reference.\r\n\u003e \r\n\u003e Though, I\u0027m not in favor of the proposal above, for the reason that the API `public static byte[] CompressData(ReadOnlySpan\u003cbyte\u003e source, ...` is not efficient (allocates always) and doesn\u0027t reflect how most native API work where the source/dest buffer and sizes are given by the client, so that you have a lot more control when you want to allocate, how you want to maintain this pool for the buffers... (See for example [LZ4_decompress_safe](https://github.com/lz4/lz4/blob/e2009622dd19556d31de498b68d8e555b7261251/lib/lz4.h#L164) or [LZ4_compress_fast](https://github.com/lz4/lz4/blob/e2009622dd19556d31de498b68d8e555b7261251/lib/lz4.h#L192))\r\n\u003e \r\n\u003e I would prefer that we follow what was suggested by @stephentoub in [this issue comment](https://github.com/dotnet/runtime/issues/2236#issuecomment-698925149) with low level encoders taking a Span-in/Span-out but I\u0027m also more interested of having raw level wrapper of compression libraries that can expose the specificities of each (e.g compression level between libraries can be different, level vs time can be an important factor as well) so that we can build higher level richer API (like the encoders or specific scenarios).\r\n\r\nI do prefer also a low level API, something like that: \r\n\r\n``` C#\r\npublic partial class Deflate\r\n{\r\n    public static OperationStatus CompressData(ReadOnlySpan\u003cbyte\u003e data, Span\u003cbyte\u003e compressedData, CompressionLevel compressionLevel = CompressionLevel.Default) =\u003e throw null;\r\n    public static void CompressData(ReadOnlySpan\u003cbyte\u003e data, IBufferWriter\u003cbyte\u003e bufferWritter, CompressionLevel compressionLevel = CompressionLevel.Default) =\u003e throw null;\r\n\r\n    public static void DecompressData(ReadOnlySpan\u003cbyte\u003ecompressedData, IBufferWriter\u003cbyte\u003e bufferWritter) =\u003e throw null;\r\n    public static OperationStatus DecompressData(ReadOnlySpan\u003cbyte\u003ecompressedData, Span\u003cbyte\u003e destination, out int bytesConsumed, out int bytesWritten) =\u003e throw null;\r\n}\r\n```",
                                           "updatedAt":  "2021-09-26T16:21:40Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Add static compression helper methods",
        "labels":  [
                       "api-suggestion",
                       "area-System.IO.Compression"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/48267",
        "createdAt":  "2021-02-13T12:56:44Z",
        "number":  48267,
        "author":  "EskeRahn",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-30T17:44:23Z",
        "body":  "## Background and Motivation\r\n\r\nZipArchive.GetEntry is always case sensitive.\r\nIn a OS (like windows) that is insensitive, the input cannot be expected to be provided case sensitive.\r\n\r\nSimilar to #1553 this is OS dependent.\r\n\r\n## Proposed API\r\n\r\nA new option, to force it to be case **in**sensitive would solve it. An easy way could be to add a bit to ZipArchiveMode\r\n\r\n## Usage Examples\r\n\r\nThis is additional functionality, so not changed usage\r\n## Alternative Designs\r\n\r\nIt could be implemented as a separate function, but would not recommend that.\r\n\r\n## Risks\r\n\r\nAs this would be an addition no risk for existing usage\r\n\r\n## Remarks\r\n\r\nOptimally throwing an exception if the provided name matches more than one entry case **in**sensitive.\r\n(Of course a workaround is just browsing through all entries, and check manually case insensitive)\r\n\r\n**ADD**: Noticed by an accident, that it is allowed today to add several entries with identical names, so the duality looking op a single name would be the same as an case-insensitive lookup of entries that differed by case only.\r\nSo handling this scenario should already exist in the code.\r\n\r\narea-System.IO.Compression",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOLnv_-Q==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3ODYxNTQ2Ng==",
                                           "createdAt":  "2021-02-13T12:56:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-02-13T12:56:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3ODcxOTcxOQ==",
                                           "createdAt":  "2021-02-14T03:59:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "What would this flag do if there were two file name in the zip that differed only in casing?",
                                           "updatedAt":  "2021-02-14T03:59:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3ODczMDU2MA==",
                                           "createdAt":  "2021-02-14T05:37:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBf-h2Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pinkfloydx33",
                                                                               "createdAt":  "2021-02-14T09:02:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "Note that *Windows isn\u0027t case insensitive in deep*. Case sensitivity can be turned on.",
                                           "updatedAt":  "2021-02-14T05:37:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3ODc1NDM4Nw==",
                                           "createdAt":  "2021-02-14T09:54:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EskeRahn",
                                           "body":  "Thanks for the quick reactions.\r\n\r\n\u003e What would this flag do if there were two file name in the zip that differed only in casing?\r\n\r\nAs suggested then the optimal would be to have an Exception, telling that an ambiguous name have been requested. So people would either have to access the archive case-sensitive OR to access by index (or foreach).\r\n\r\nIF you also added a method returning a **collection**, for usage with **wildcards**, That could also return all variants matching, if case sensitivity was turned off.\r\n\r\n\r\n\r\n\u003e Note that _Windows isn\u0027t case insensitive in deep_. Case sensitivity can be turned on.\r\n\r\nI\u0027m aware, but frankly never came across anyone exploiting that. So at the least an option would be nice.",
                                           "updatedAt":  "2021-02-14T09:54:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3ODgzOTU3Ng==",
                                           "createdAt":  "2021-02-14T20:48:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Thanks for the suggestion. Could you update your top post to match the API proposal template? There is a special new issue template for it.",
                                           "updatedAt":  "2021-02-14T20:48:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3OTg3ODM5Mw==",
                                           "createdAt":  "2021-02-16T14:39:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EskeRahn",
                                           "body":  "ADD:\r\nJust noticed by an accident, that it is allowed today to add several entries with identical names, so the duality looking op a single name would be the same as an case-insensitive lookup of entries that differed by case only",
                                           "updatedAt":  "2021-02-16T14:39:11Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "ZipArchive.GetEntry case sensitive, even on case insensitive OS",
        "labels":  [
                       "api-suggestion",
                       "area-System.IO.Compression",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/51930",
        "createdAt":  "2021-04-27T15:21:40Z",
        "number":  51930,
        "author":  "wstaelens",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC0CPvQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sicklittlemonkey",
                                            "createdAt":  "2023-11-16T11:54:01Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-03-20T15:15:21Z",
        "body":  "As adviced from `/runtime/wpf I should open a ticket here for the `` dotnet/runtime` team... 🙄 \r\n\r\nfrom https://github.com/dotnet/wpf/issues/4000:\r\n\r\nHaving for example a document of 3000 pages being printed to a V4 driver. Because of the very annoying STA requirement, it takes ages to render the pages sequentally. We can\u0027t render the pages in parallel (if possible in C#, feel free to explain how), in other words other code and logic that works on individual pages is unable to go parallel and is slow because it all has to go sequentially. Eventually we go out of memory as we can\u0027t hold all the rendered pages for some actions we are doing.\r\n\r\nThe performance issues can easily be reproduced with Microsoft\u0027s own XPS Viewer and Microsoft XPS Document Writer (printer). When opening the original pdf (3MB) and we print it to the Microsoft XPS Document Writer printer as an .xps, it takes ages to print. Once it has been printed we have an .xps file grown to 50MB. Opening the xps in Microsoft XPS Viewer and searching a word (which exists e.g. on page 2668) literally takes ages as it processes sequentally through the document. Sumatra finds the word in about 50 seconds, XPS Viewer does it in ±6 minutes. (to compare: foxit reader on the original pdf does it in 25 seconds).\r\n\r\nI can\u0027t share this big file (confidential) but just take some pdf files, ebooks in pdf, with a lot of pages and print them. (or print and capture the XPS print jobs with a render filter to catch the xps on the microsoft generic V4 driver.)\r\n\r\nCan these XPS printing issues please be tackled or prioritized?\r\n\r\n.NET SDK 5.0.202\r\n.NET runtime 5.0.5\r\nWindows 10 20H2 (19042.928)\r\nWindows Server 2019 1809 (17763.1879)\r\n\r\nLinked tickets:\r\n* https://github.com/dotnet/wpf/issues/4000\r\n* https://github.com/dotnet/wpf/issues/3546\r\n* https://github.com/dotnet/runtime/issues/51929\r\n\r\n\r\n**Update**\r\n\r\nA file that you can test for example:\r\n1. navigate to https://www.spaenhiers.be/archief and click on `Databank bidprentjes` or \"Bidprentjes\" (direct link to .pdf file is sometimes updated: https://www.spaenhiers.be/Media/Default/docs/archief_Bidprentjes_2021-04-19.pdf  or https://spaenhiers.files.wordpress.com/2022/05/bidprentjes_2022-02-17.pdf or https://spaenhiers.files.wordpress.com/2022/06/bidprentjes_-2022_06_18.pdf )\r\n2. Print the file to `Microsoft XPS Document Writer` (sloooooow 🐌 🏁  🕐)\r\n3. You\u0027ll notice the file size is HUGE compared to the PDF file.\r\n4. open the .xps file in Microsoft Xps Viewer, make sure it is on the first page and search for the value `67588` or `Zwertvaegher` \r\n5. go drink a coffee, eat some pizza, drink 5 beers and return till it found it.\r\n\r\n(and yes parsing XPS with .NET 5 is also slow and takes a lot of memory etc etc... need some performance boots so that it is faster compared to PDF documents.)\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOd8tf2A==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyNzY5NDU1MA==",
                                           "createdAt":  "2021-04-27T15:21:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-04-27T15:21:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyODA0ODg5MA==",
                                           "createdAt":  "2021-04-28T00:25:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @carlossanlop\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nAs adviced from `/runtime/wpf I should open a ticket here for the `` dotnet/runtime` team... 🙄 \r\n\r\nfrom https://github.com/dotnet/wpf/issues/4000:\r\n\r\nHaving for example a document of 3000 pages being printed to a V4 driver. Because of the very annoying STA requirement, it takes ages to render the pages sequentally. We can\u0027t render the pages in parallel (if possible in C#, feel free to explain how), in other words other code and logic that works on individual pages is unable to go parallel and is slow because it all has to go sequentially. Eventually we go out of memory as we can\u0027t hold all the rendered pages for some actions we are doing.\r\n\r\nThe performance issues can easily be reproduced with Microsoft\u0027s own XPS Viewer and Microsoft XPS Document Writer (printer). When opening the original pdf (3MB) and we print it to the Microsoft XPS Document Writer printer as an .xps, it takes ages to print. Once it has been printed we have an .xps file grown to 50MB. Opening the xps in Microsoft XPS Viewer and searching a word (which exists e.g. on page 2668) literally takes ages as it processes sequentally through the document. Sumatra finds the word in about 50 seconds, XPS Viewer does it in ±6 minutes. (to compare: foxit reader on the original pdf does it in 25 seconds).\r\n\r\nI can\u0027t share this big file (confidential) but just take some pdf files, ebooks in pdf, with a lot of pages and print them. (or print and capture the XPS print jobs with a render filter to catch the xps on the microsoft generic V4 driver.)\r\n\r\nCan these XPS printing issues please be tackled or prioritized?\r\n\r\n.NET SDK 5.0.202\r\n.NET runtime 5.0.5\r\nWindows 10 20H2 (19042.928)\r\nWindows Server 2019 1809 (17763.1879)\r\n\r\nLinked tickets:\r\n* https://github.com/dotnet/wpf/issues/4000\r\n* https://github.com/dotnet/wpf/issues/3546\r\n* https://github.com/dotnet/runtime/issues/51929\r\n\r\n\r\n**Update**\r\n\r\nA file that you can test for example:\r\n1. navigate to https://www.spaenhiers.be/archief and click on `Databank bidprentjes` (direct link to .pdf file is sometimes updated: https://www.spaenhiers.be/Media/Default/docs/archief_Bidprentjes_2021-04-19.pdf )\r\n2. Print the file to `Microsoft XPS Document Writer` (sloooooow 🐌 🏁  🕐)\r\n3. You\u0027ll notice the file size is HUGE compared to the PDF file.\r\n4. open the .xps file in Microsoft Xps Viewer, make sure it is on the first page and search for the value `67588` or `Zwertvaegher` \r\n5. go drink a coffee, eat some pizza, drink 5 beers and return till it found it.\r\n\r\n(and yes parsing XPS with .NET 5 is also slow and takes a lot of memory etc etc... need some performance boots so that it is faster compared to PDF documents.)\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ewstaelens\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.IO.Compression`, `tenet-performance`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-04-28T00:25:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyODE1MzQyMg==",
                                           "createdAt":  "2021-04-28T05:24:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Thanks for the report @wstaelens . You mention XPS Reader so I\u0027m guessing this problem is the same on .NET Framework?\n\nDo you have an interest in debugging/investigating? Realistically that is the most likely way a fix would get in this release.",
                                           "updatedAt":  "2021-04-28T05:24:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyODIyNjY1Mw==",
                                           "createdAt":  "2021-04-28T07:41:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wstaelens",
                                           "body":  "@danmoseley yes I mentioned the XPS Viewer I mentioned was just to compare for example XPS Viewer with SumatraPDF (also capable of viewing XPS documents).\r\n\r\nTry to search for example something in XPS Viewer and do the same in SumatraPDF (e.g. in a 3000+ page document). You\u0027ll notice the difference (e.g. ±50seconds in sumatra compared to ±6 minutes).\r\nSo generally I believe that when the MS team just profiles the code and maybe has some possibilities to update the code base that in terms of performance, memory allocations big steps can be taken for .NET 5 / .NET Core (and .NET Framework 4.8)\r\n\r\nWe are willing to help but it is hard to say what is exactly slow as the code that parses/generates/... the XPS files in a XPS print driver (XPSDrv) is Microsoft internal. We only capture the generated .xps. So I don\u0027t think I\u0027ll be a great help here... We believe it is a Microsoft internal thing. When we further process the XPS (compared to e.g. first converting it to PDF or just using EMF) the PDF/EMF format is faster, more optimized, takes less disk space (not true for EMF) and doesn\u0027t have the annoying STA-requirement like XPS.\r\n\r\n[Because XPS with .piece files doesn\u0027t seem to be supported in .NET 5 / .NET Core](https://github.com/dotnet/runtime/issues/51929) I expect that this might also be a reason that code base differs or that not everything has been implemented.\r\n\r\nIn general XPS is slow for printing, and producing/consuming XPS files takes up much more disk space and consumes more memory compared to other technologies. We even heavily considered going back to EMF for this (!!).\r\nThe format in XML is clean, but XML and the parsing of XML is yeah... let\u0027s say we would like to see improvements. We see an increase in XPS usage, so please don\u0027t turn it down this time.\r\n",
                                           "updatedAt":  "2021-04-28T07:41:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4411E-",
                                           "createdAt":  "2021-10-28T08:42:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wstaelens",
                                           "body":  "👋 ",
                                           "updatedAt":  "2021-10-28T08:42:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MCiin",
                                           "createdAt":  "2022-10-12T07:46:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wstaelens",
                                           "body":  "Hey, any performance updates?",
                                           "updatedAt":  "2022-10-12T07:46:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc53y1_Y",
                                           "createdAt":  "2024-03-20T15:15:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODbR_0Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "wstaelens",
                                                                               "createdAt":  "2024-03-20T15:57:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "znakeeye",
                                           "body":  "I\u0027m rendering an `XpsDocument` to a `MemoryStream` which is then converted to a `PDF` on disk. After some research, I found two things which significantly impact performance.\r\n\r\n1) `DynamicResource` kills performance. Completely! 😆 \r\n2) Package compression takes time. Use `CompressionOption.NotCompressed` (or `CompressionOption.SuperFast` if you really need compression).\r\n\r\n**DynamicResource performance problem**\r\nUsually `DynamicResource` has similar performance characteristics as `StaticResource`. At least there seems to be a consensus in the community, that this is the case. But it certainly does not hold true for Xps!\r\n\r\nAfter profiling my Xps generator, it became apparent that `FindWeakReference()` was a very, very hot path. See issue #4468. Also, please consider prioritizing [PR 5610](https://github.com/dotnet/wpf/pull/5610) from @batzen, as it aims to fix this very problem.\r\n\r\n![image](https://github.com/dotnet/runtime/assets/958469/c71becc1-5041-40eb-a6fb-411848110d7e)\r\n",
                                           "updatedAt":  "2024-03-20T15:15:19Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "XPS documents from print driver are terribly slow",
        "labels":  [
                       "area-System.IO.Compression",
                       "tenet-performance"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/55905",
        "createdAt":  "2021-07-19T07:33:44Z",
        "number":  55905,
        "author":  "NavjotSinghMinhas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T10:39:08Z",
        "body":  "### Describe the bug\r\nGZipStream decompression giving System.IO.InvalidDataException even when data is correct.\r\n**Note:** The below code works fine on **.NET Framework 4.7.2**\r\n\r\n### To Reproduce\r\n\r\n```\r\npublic static void Main(string[] args)\r\n{\r\n    string byteString = \"120,218,133,83,203,106,27,65,16,252,21,49,103,105,232,233,121,235,158,75,192,33,144,163,9,102,165,93,9,131,223,146,15,177,208,191,123,170,118,101,180,129,144,147,186,182,122,166,171,186,70,39,243,54,28,94,158,159,14,131,89,159,76,223,29,59,252,118,98,214,198,73,86,27,197,44,77,231,230,80,9,93,178,62,2,250,11,155,201,134,57,140,13,214,36,182,178,55,53,148,188,183,66,46,163,85,75,182,74,88,26,44,177,76,168,242,30,13,227,208,77,147,116,123,50,31,114,249,202,27,62,160,44,85,84,16,21,205,249,119,107,117,127,181,134,120,105,245,95,173,58,182,242,84,169,42,94,49,132,86,156,47,227,237,27,88,241,94,173,39,138,188,207,103,91,10,32,172,172,194,164,118,147,137,108,192,128,77,153,81,245,138,218,10,23,96,35,36,109,169,222,38,135,90,41,207,141,110,183,16,146,156,45,108,131,140,213,10,85,252,170,184,72,231,162,90,133,242,45,87,137,2,179,181,74,148,12,132,217,41,228,156,83,67,189,76,77,61,3,213,36,66,159,61,102,203,232,185,247,87,117,184,170,233,190,46,190,191,63,44,84,212,45,23,78,215,33,174,85,23,63,111,192,167,127,240,50,241,249,63,231,203,108,245,125,157,189,177,65,102,236,0,253,21,222,73,234,156,132,131,172,58,157,228,115,44,181,237,159,36,108,104,156,76,13,204,176,164,113,207,3,51,108,241,98,69,3,51,116,97,204,112,96,134,206,122,44,117,71,49,105,122,22,59,238,178,216,130,24,118,76,177,61,17,71,10,74,66,181,18,0,32,36,181,201,12,120,199,117,102,111,171,111,104,31,167,96,246,16,196,135,237,25,99,77,122,247,227,215,55,115,94,154,195,241,109,232,30,239,159,246,119,199,63,47,237,223,106,94,223,159,143,205,235,249,252,9,112,213,199,94,10\";\r\n    string[] byteStringSplit = byteString.Split(\u0027,\u0027);\r\n\r\n    byte[] dataBytes = new byte[byteStringSplit.Length];\r\n    for (int i = 0; i \u003c byteStringSplit.Length; i++)\r\n        dataBytes[i] = Convert.ToByte(byteStringSplit[i]);\r\n\r\n    string result = new StreamReader(new GZipStream(new MemoryStream(dataBytes), CompressionMode.Decompress)).ReadToEnd();\r\n}\r\n```\r\n\r\n### Exceptions (if any)\r\nSystem.IO.InvalidDataException with Stack Trace:\r\n   at System.IO.Compression.Inflater.Inflate(FlushCode flushCode) in /_/src/System.IO.Compression/src/System/IO/Compression/DeflateZLib/Inflater.cs:line 300\r\n   at System.IO.Compression.Inflater.ReadInflateOutput(Byte* bufPtr, Int32 length, FlushCode flushCode, Int32\u0026 bytesRead) in /_/src/System.IO.Compression/src/System/IO/Compression/DeflateZLib/Inflater.cs:line 266\r\n   at System.IO.Compression.Inflater.ReadOutput(Byte* bufPtr, Int32 length, Int32\u0026 bytesRead) in /_/src/System.IO.Compression/src/System/IO/Compression/DeflateZLib/Inflater.cs:line 122\r\n   at System.IO.Compression.Inflater.InflateVerified(Byte* bufPtr, Int32 length) in /_/src/System.IO.Compression/src/System/IO/Compression/DeflateZLib/Inflater.cs:line 92\r\n   at System.IO.Compression.DeflateStream.ReadCore(Span`1 buffer) in /_/src/System.IO.Compression/src/System/IO/Compression/DeflateZLib/DeflateStream.cs:line 302\r\n   at System.IO.Compression.DeflateStream.Read(Byte[] array, Int32 offset, Int32 count) in /_/src/System.IO.Compression/src/System/IO/Compression/DeflateZLib/DeflateStream.cs:line 240\r\n   at System.IO.Compression.GZipStream.Read(Byte[] array, Int32 offset, Int32 count) in /_/src/System.IO.Compression/src/System/IO/Compression/GZipStream.cs:line 84\r\n   at System.IO.StreamReader.ReadBuffer() in /_/src/System.Private.CoreLib/shared/System/IO/StreamReader.cs:line 594\r\n   at System.IO.StreamReader.ReadToEnd() in /_/src/System.Private.CoreLib/shared/System/IO/StreamReader.cs:line 415\r\n   at ConsoleApp9.Program.Main(String[] args) in C:\\Users\\Navjot Singh\\source\\repos\\ConsoleApp9\\ConsoleApp9\\Program.cs:line 20\r\n\r\n### Further technical details\r\n- ASP.NET Core version\r\n  Issue produced in .NET 5 \u0026 .NET Core 3.1 / 3.0 / 2.2 / 2.1 / 2.0\r\n\r\n- Include the output of `dotnet --info`\r\n  .NET SDK (reflecting any global.json):\r\n  Version:   5.0.302\r\n  Commit:    c005824e35\r\n\r\n  Runtime Environment:\r\n  OS Name:     Windows\r\n  OS Version:  10.0.19043\r\n  OS Platform: Windows\r\n  RID:         win10-x64\r\n  Base Path:   C:\\PROGRAM FILES\\DOTNET\\sdk\\5.0.302\\\r\n\r\n  Host (useful for support):\r\n  Version: 5.0.8\r\n  Commit:  35964c9215\r\n\r\n  .NET SDKs installed:\r\n  2.1.700 [C:\\PROGRAM FILES\\DOTNET\\sdk]\r\n  2.2.300 [C:\\PROGRAM FILES\\DOTNET\\sdk]\r\n  3.0.103 [C:\\PROGRAM FILES\\DOTNET\\sdk]\r\n  3.1.101 [C:\\PROGRAM FILES\\DOTNET\\sdk]\r\n  3.1.117 [C:\\PROGRAM FILES\\DOTNET\\sdk]\r\n  5.0.103 [C:\\PROGRAM FILES\\DOTNET\\sdk]\r\n  5.0.104 [C:\\PROGRAM FILES\\DOTNET\\sdk]\r\n  5.0.302 [C:\\PROGRAM FILES\\DOTNET\\sdk]\r\n\r\n  .NET runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.25 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.28 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.5 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.8 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.25 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.28 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.5 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.8 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.3 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.1 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.12 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.17 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.3 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.4 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.8 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.25 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.28 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.5 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.8 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.3 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.1 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.12 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.17 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.3 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.4 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.8 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.3 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.1 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.12 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.17 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.3 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.4 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.8 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.WindowsDesktop.App]\r\n  \r\n- The IDE (VS / VS Code/ VS4Mac) you\u0027re running on, and its version\r\n  Microsoft Visual Studio Community 2019 (Version 16.8.5)\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOar9pgw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc40mFOU",
                                           "createdAt":  "2021-07-19T09:29:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io-compression\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Describe the bug\r\nGZipStream decompression giving System.IO.InvalidDataException even when data is correct.\r\n**Note:** The below code works fine on **.NET Framework 4.7.2**\r\n\r\n### To Reproduce\r\n\r\n```\r\npublic static void Main(string[] args)\r\n{\r\n    string byteString = \"120,218,133,83,203,106,27,65,16,252,21,49,103,105,232,233,121,235,158,75,192,33,144,163,9,102,165,93,9,131,223,146,15,177,208,191,123,170,118,101,180,129,144,147,186,182,122,166,171,186,70,39,243,54,28,94,158,159,14,131,89,159,76,223,29,59,252,118,98,214,198,73,86,27,197,44,77,231,230,80,9,93,178,62,2,250,11,155,201,134,57,140,13,214,36,182,178,55,53,148,188,183,66,46,163,85,75,182,74,88,26,44,177,76,168,242,30,13,227,208,77,147,116,123,50,31,114,249,202,27,62,160,44,85,84,16,21,205,249,119,107,117,127,181,134,120,105,245,95,173,58,182,242,84,169,42,94,49,132,86,156,47,227,237,27,88,241,94,173,39,138,188,207,103,91,10,32,172,172,194,164,118,147,137,108,192,128,77,153,81,245,138,218,10,23,96,35,36,109,169,222,38,135,90,41,207,141,110,183,16,146,156,45,108,131,140,213,10,85,252,170,184,72,231,162,90,133,242,45,87,137,2,179,181,74,148,12,132,217,41,228,156,83,67,189,76,77,61,3,213,36,66,159,61,102,203,232,185,247,87,117,184,170,233,190,46,190,191,63,44,84,212,45,23,78,215,33,174,85,23,63,111,192,167,127,240,50,241,249,63,231,203,108,245,125,157,189,177,65,102,236,0,253,21,222,73,234,156,132,131,172,58,157,228,115,44,181,237,159,36,108,104,156,76,13,204,176,164,113,207,3,51,108,241,98,69,3,51,116,97,204,112,96,134,206,122,44,117,71,49,105,122,22,59,238,178,216,130,24,118,76,177,61,17,71,10,74,66,181,18,0,32,36,181,201,12,120,199,117,102,111,171,111,104,31,167,96,246,16,196,135,237,25,99,77,122,247,227,215,55,115,94,154,195,241,109,232,30,239,159,246,119,199,63,47,237,223,106,94,223,159,143,205,235,249,252,9,112,213,199,94,10\";\r\n    string[] byteStringSplit = byteString.Split(\u0027,\u0027);\r\n\r\n    byte[] dataBytes = new byte[byteStringSplit.Length];\r\n    for (int i = 0; i \u003c byteStringSplit.Length; i++)\r\n        dataBytes[i] = Convert.ToByte(byteStringSplit[i]);\r\n\r\n    string result = new StreamReader(new GZipStream(new MemoryStream(dataBytes), CompressionMode.Decompress)).ReadToEnd();\r\n}\r\n```\r\n\r\n### Exceptions (if any)\r\nSystem.IO.InvalidDataException with Stack Trace:\r\n   at System.IO.Compression.Inflater.Inflate(FlushCode flushCode) in /_/src/System.IO.Compression/src/System/IO/Compression/DeflateZLib/Inflater.cs:line 300\r\n   at System.IO.Compression.Inflater.ReadInflateOutput(Byte* bufPtr, Int32 length, FlushCode flushCode, Int32\u0026 bytesRead) in /_/src/System.IO.Compression/src/System/IO/Compression/DeflateZLib/Inflater.cs:line 266\r\n   at System.IO.Compression.Inflater.ReadOutput(Byte* bufPtr, Int32 length, Int32\u0026 bytesRead) in /_/src/System.IO.Compression/src/System/IO/Compression/DeflateZLib/Inflater.cs:line 122\r\n   at System.IO.Compression.Inflater.InflateVerified(Byte* bufPtr, Int32 length) in /_/src/System.IO.Compression/src/System/IO/Compression/DeflateZLib/Inflater.cs:line 92\r\n   at System.IO.Compression.DeflateStream.ReadCore(Span`1 buffer) in /_/src/System.IO.Compression/src/System/IO/Compression/DeflateZLib/DeflateStream.cs:line 302\r\n   at System.IO.Compression.DeflateStream.Read(Byte[] array, Int32 offset, Int32 count) in /_/src/System.IO.Compression/src/System/IO/Compression/DeflateZLib/DeflateStream.cs:line 240\r\n   at System.IO.Compression.GZipStream.Read(Byte[] array, Int32 offset, Int32 count) in /_/src/System.IO.Compression/src/System/IO/Compression/GZipStream.cs:line 84\r\n   at System.IO.StreamReader.ReadBuffer() in /_/src/System.Private.CoreLib/shared/System/IO/StreamReader.cs:line 594\r\n   at System.IO.StreamReader.ReadToEnd() in /_/src/System.Private.CoreLib/shared/System/IO/StreamReader.cs:line 415\r\n   at ConsoleApp9.Program.Main(String[] args) in C:\\Users\\Navjot Singh\\source\\repos\\ConsoleApp9\\ConsoleApp9\\Program.cs:line 20\r\n\r\n### Further technical details\r\n- ASP.NET Core version\r\n  Issue produced in .NET 5 \u0026 .NET Core 3.1 / 3.0 / 2.2 / 2.1 / 2.0\r\n\r\n- Include the output of `dotnet --info`\r\n  .NET SDK (reflecting any global.json):\r\n  Version:   5.0.302\r\n  Commit:    c005824e35\r\n\r\n  Runtime Environment:\r\n  OS Name:     Windows\r\n  OS Version:  10.0.19043\r\n  OS Platform: Windows\r\n  RID:         win10-x64\r\n  Base Path:   C:\\PROGRAM FILES\\DOTNET\\sdk\\5.0.302\\\r\n\r\n  Host (useful for support):\r\n  Version: 5.0.8\r\n  Commit:  35964c9215\r\n\r\n  .NET SDKs installed:\r\n  2.1.700 [C:\\PROGRAM FILES\\DOTNET\\sdk]\r\n  2.2.300 [C:\\PROGRAM FILES\\DOTNET\\sdk]\r\n  3.0.103 [C:\\PROGRAM FILES\\DOTNET\\sdk]\r\n  3.1.101 [C:\\PROGRAM FILES\\DOTNET\\sdk]\r\n  3.1.117 [C:\\PROGRAM FILES\\DOTNET\\sdk]\r\n  5.0.103 [C:\\PROGRAM FILES\\DOTNET\\sdk]\r\n  5.0.104 [C:\\PROGRAM FILES\\DOTNET\\sdk]\r\n  5.0.302 [C:\\PROGRAM FILES\\DOTNET\\sdk]\r\n\r\n  .NET runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.25 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.28 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.5 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.8 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.25 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.28 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.5 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.8 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.3 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.1 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.12 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.17 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.3 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.4 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.8 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.25 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.28 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.5 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.8 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.3 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.1 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.12 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.17 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.3 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.4 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.8 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.3 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.1 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.12 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.17 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.3 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.4 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.8 [C:\\PROGRAM FILES\\DOTNET\\shared\\Microsoft.WindowsDesktop.App]\r\n  \r\n- The IDE (VS / VS Code/ VS4Mac) you\u0027re running on, and its version\r\n  Microsoft Visual Studio Community 2019 (Version 16.8.5)\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eNavjotSinghMinhas\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.IO.Compression`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-07-19T09:29:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40m0pE",
                                           "createdAt":  "2021-07-19T14:24:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "How did you create that compressed data you\u0027re trying to decompress?",
                                           "updatedAt":  "2021-07-19T14:24:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40m1XV",
                                           "createdAt":  "2021-07-19T14:28:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "I\u0027m not sure why .NET Framework\u0027s GZipStream was decompressing the data, but it\u0027s not gzip format.  It\u0027s zlib format.  If you change GZipStream to ZLibStream in .NET 6, it\u0027ll decompress correctly.\r\n```C#\r\nusing System.IO.Compression;\r\n\r\nstring byteString = \"120,218,133,83,203,106,27,65,16,252,21,49,103,105,232,233,121,235,158,75,192,33,144,163,9,102,165,93,9,131,223,146,15,177,208,191,123,170,118,101,180,129,144,147,186,182,122,166,171,186,70,39,243,54,28,94,158,159,14,131,89,159,76,223,29,59,252,118,98,214,198,73,86,27,197,44,77,231,230,80,9,93,178,62,2,250,11,155,201,134,57,140,13,214,36,182,178,55,53,148,188,183,66,46,163,85,75,182,74,88,26,44,177,76,168,242,30,13,227,208,77,147,116,123,50,31,114,249,202,27,62,160,44,85,84,16,21,205,249,119,107,117,127,181,134,120,105,245,95,173,58,182,242,84,169,42,94,49,132,86,156,47,227,237,27,88,241,94,173,39,138,188,207,103,91,10,32,172,172,194,164,118,147,137,108,192,128,77,153,81,245,138,218,10,23,96,35,36,109,169,222,38,135,90,41,207,141,110,183,16,146,156,45,108,131,140,213,10,85,252,170,184,72,231,162,90,133,242,45,87,137,2,179,181,74,148,12,132,217,41,228,156,83,67,189,76,77,61,3,213,36,66,159,61,102,203,232,185,247,87,117,184,170,233,190,46,190,191,63,44,84,212,45,23,78,215,33,174,85,23,63,111,192,167,127,240,50,241,249,63,231,203,108,245,125,157,189,177,65,102,236,0,253,21,222,73,234,156,132,131,172,58,157,228,115,44,181,237,159,36,108,104,156,76,13,204,176,164,113,207,3,51,108,241,98,69,3,51,116,97,204,112,96,134,206,122,44,117,71,49,105,122,22,59,238,178,216,130,24,118,76,177,61,17,71,10,74,66,181,18,0,32,36,181,201,12,120,199,117,102,111,171,111,104,31,167,96,246,16,196,135,237,25,99,77,122,247,227,215,55,115,94,154,195,241,109,232,30,239,159,246,119,199,63,47,237,223,106,94,223,159,143,205,235,249,252,9,112,213,199,94,10\";\r\nstring[] byteStringSplit = byteString.Split(\u0027,\u0027);\r\n\r\nbyte[] dataBytes = new byte[byteStringSplit.Length];\r\nfor (int i = 0; i \u003c byteStringSplit.Length; i++)\r\n    dataBytes[i] = Convert.ToByte(byteStringSplit[i]);\r\n\r\nstring result = new StreamReader(new ZLibStream(new MemoryStream(dataBytes), CompressionMode.Decompress)).ReadToEnd();\r\nConsole.WriteLine(result);\r\n```",
                                           "updatedAt":  "2021-07-19T14:28:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40m63M",
                                           "createdAt":  "2021-07-19T14:58:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NavjotSinghMinhas",
                                           "body":  "Hi Stephan,\r\n\r\nI am getting the byte stream directly from a socket during share market hours. (Unfortunately, I can\u0027t share that directly, therefore I used string to byte implementation for example).\r\n\r\nI have been using GZipStream in .NET Framework for quite a while now and it works as expected.\r\nAlso, any way to test ZLibStream in .NET 5 / .NET core 3.1?\r\n\r\nThanks",
                                           "updatedAt":  "2021-07-19T14:58:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40qDhM",
                                           "createdAt":  "2021-07-20T14:28:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB1kCrg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2021-08-09T09:27:55Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e any way to test ZLibStream in .NET 5 / .NET core 3.1?\r\n\r\nNot without copying the code into your app.\r\n\r\n\u003e I have been using GZipStream in .NET Framework for quite a while now and it works as expected.\r\n\r\nI debugged through it.\r\n\r\n@dotnet/area-system-io-compression, this change: https://github.com/dotnet/corefx/commit/185fac5aa8fdc8a6b95cae22473e14fd68d04dc4#diff-f3f8f1fd33c298f06b753ef732eee67acd1b7deead6c55838a64901e7432bb95L116-L128\r\nremoved this implicit gzip/zlib header detection/decoding from GZipStream. We should decide whether at this point that was a bug fix (this class is about gzip, and the original managed implementation only supported gzip) and we\u0027re happy with it only being for gzip as it is today:\r\nhttps://github.com/dotnet/runtime/blob/e063533eb79eace045f43b41980cbed21c8d7365/src/libraries/System.IO.Compression/src/System/IO/Compression/GZipStream.cs#L20\r\nor whether we should treat this as a regression and fix it to use 47 instead of 15 for inflating.",
                                           "updatedAt":  "2021-07-20T14:32:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40qEKZ",
                                           "createdAt":  "2021-07-20T14:31:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "Also cc @ianhays who added this in https://github.com/dotnet/corefx/pull/2906 in 2015 in case he remembers why he chose this approach, and @krwq who ported it back to .NET Framework in 2017.",
                                           "updatedAt":  "2021-07-20T14:31:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40zoP0",
                                           "createdAt":  "2021-07-23T22:46:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ianhays",
                                           "body":  "Howdy! If I recall correctly, I chose 31 instead of 47 for the headerbits for inflation to match how the .NET Core managed zlib implementation handled the gzipstream with invalid/missing header case. I think I added some tests for it too, but I don\u0027t specifically remember running those tests against the \"full framework\".\r\n\r\n31 is more explicitly correct and informs users if their data may be jacked up in other, less noticeable ways, but 47 is more forgivable, particularly when people mix up GzipStream and DeflateStream.",
                                           "updatedAt":  "2021-07-23T22:46:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc403RB0",
                                           "createdAt":  "2021-07-26T17:48:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB16T9Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ianhays",
                                                                               "createdAt":  "2021-08-11T11:51:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "Thanks, Ian :)",
                                           "updatedAt":  "2021-07-26T17:48:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZK-zC",
                                           "createdAt":  "2023-04-04T14:14:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC5NubQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ericstj",
                                                                               "createdAt":  "2023-04-04T15:20:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "@ericstj, this is the same conversation we were having the other day...",
                                           "updatedAt":  "2023-04-04T14:14:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZLc6U",
                                           "createdAt":  "2023-04-04T15:22:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "So the problem here is that on .NETFramework GZipStream would support decompressing both ZLIB and GZip payloads.  On .NETCore we force folks to choose, and if they don\u0027t have anything but the payload to make that choice getting it right can be hard.\r\n\r\nPossible solutions are:\r\n1. A new type to represent this scenario.\r\n2. Modify an existing type to handle this scenario by default.\r\n3. Modify an existing type to handle this scenario through opt-in API.\r\n4. Variation of 3 that does this through an AppContext switch instead of explicit API.\r\n\r\nSome combinations of those options.  @stephentoub did you have an opinion about the direction to take here?",
                                           "updatedAt":  "2023-04-04T15:22:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZLiVI",
                                           "createdAt":  "2023-04-04T15:37:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "I\u0027d be inclined to go with (2), possibly with an AppContext switch opt-out, either just for GZipStream (the argument being this is how it used to work by accident and we\u0027re just realigning with that), or for both GZipStream and ZLibStream to decompress either (the argument being that they\u0027re both deflate wrappers and for decompression they should behave similarly).",
                                           "updatedAt":  "2023-04-04T15:37:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qrgZ8",
                                           "createdAt":  "2023-11-01T22:43:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "@stephentoub are you still leaning towards option 2 here?  Folks are still reporting this issue as a compatibility problem between core and framework.  It does seem like a scenario we should try to support better (given its hard to implement on top).",
                                           "updatedAt":  "2023-11-01T22:43:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qrkZ4",
                                           "createdAt":  "2023-11-01T23:00:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e are you still leaning towards option 2 here\r\n\r\nYes. Let\u0027s just make GZipStream support reading zlib, optionally with an opt-out appctx switch if we\u0027re concerned. We should also consider backporting to 8.",
                                           "updatedAt":  "2023-11-01T23:00:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qv2mD",
                                           "createdAt":  "2023-11-02T15:12:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "@ericstj, this actually may be more complicated.  I just tried it (changing the GZipStream ctor to use 47 instead of 31 when the mode is decompression), and we get a few failures and asserts, specifically from the ManyConcatenatedGzipStreams test.  That suggests zlib might end up requesting data differently in this mode and there could be fallout from such a change.  Someone will need to dig deeper.\r\n\r\nhttps://github.com/dotnet/runtime/compare/main...stephentoub:runtime:gzipdecompresszlib",
                                           "updatedAt":  "2023-11-02T15:14:40Z"
                                       }
                                   ],
                         "totalCount":  14
                     },
        "title":  "GZipStream decompression not working properly.",
        "labels":  [
                       "area-System.IO.Compression",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/59027",
        "createdAt":  "2021-09-13T10:01:45Z",
        "number":  59027,
        "author":  "ayende",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODJ96Hw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jnm2",
                                            "createdAt":  "2021-09-19T18:50:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JohanLarsson",
                                            "createdAt":  "2021-09-19T18:52:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "akoeplinger",
                                            "createdAt":  "2021-09-19T19:25:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GSPP",
                                            "createdAt":  "2021-11-09T06:08:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ad-mca-mk",
                                            "createdAt":  "2022-06-05T07:54:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hammypants",
                                            "createdAt":  "2022-11-15T23:16:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bachratyg",
                                            "createdAt":  "2023-07-26T11:49:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Cyberboss",
                                            "createdAt":  "2023-07-26T12:03:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "khaleb85",
                                            "createdAt":  "2024-04-20T22:52:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "omariom",
                                            "createdAt":  "2024-05-26T16:24:15Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "nguerrera",
                                            "createdAt":  "2025-08-05T17:47:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nguerrera",
                                            "createdAt":  "2025-08-05T18:11:35Z"
                                        }
                                    ],
                          "totalCount":  12
                      },
        "updatedAt":  "2025-05-27T12:02:12Z",
        "body":  "### Description\r\n\r\n```\r\nNetworkStream stream = await GetStreamFromUrl(remoteUrlFor_LARGE_file);\r\nZipArchive.Open(stream, ZipArchiveMode.Read); // \u003c-- will fail here with `Stream was too long.`\r\n\r\n```\r\n\r\n\r\n### Analysis\r\n\r\nReason for this is here:\r\nhttps://github.com/dotnet/runtime/blob/00c38c7da82cff64932396897e057cc20bdbe743/src/libraries/System.IO.Compression/src/System/IO/Compression/ZipArchive.cs#L144\r\n\r\nWhen we pass a non seekable stream to `ZipArchive` - it will read it into a `MemoryStream`. That will only work if the data can fit in `MemoryStream`. I assume that this is because the Zip format requires seeking (directory, etc).\r\n\r\nHowever, this is *very* surprising and can cause both performance issues due to loading all contents to memory and unexpected failures if most of the data is \u003c 2GB. \r\n\r\nI\u0027m not sure if there is a way to fix this, given backward compact issues.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOrZV4yQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc42uBAz",
                                           "createdAt":  "2021-09-13T10:01:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io-compression\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\n```\r\nNetworkStream stream = await GetStreamFromUrl(remoteUrlFor_LARGE_file);\r\nZipArchive.Open(stream, ZipArchiveMode.Read); // \u003c-- will fail here with `Stream was too long.`\r\n\r\n```\r\n\r\n\r\n### Analysis\r\n\r\nReason for this is here:\r\nhttps://github.com/dotnet/runtime/blob/00c38c7da82cff64932396897e057cc20bdbe743/src/libraries/System.IO.Compression/src/System/IO/Compression/ZipArchive.cs#L144\r\n\r\nWhen we pass a non seekable stream to `ZipArchive` - it will read it into a `MemoryStream`. That will only work if the data can fit in `MemoryStream`. I assume that this is because the Zip format requires seeking (directory, etc).\r\n\r\nHowever, this is *very* surprising and can cause both performance issues due to loading all contents to memory and unexpected failures if most of the data is \u003c 2GB. \r\n\r\nI\u0027m not sure if there is a way to fix this, given backward compact issues.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eayende\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.IO.Compression`, `tenet-performance`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-09-13T10:01:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42uDMX",
                                           "createdAt":  "2021-09-13T10:12:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "@carlossanlop this is something that we should consider for the .NET 7 Compression work as it\u0027s related to supporting large files (\u003e 2GB)",
                                           "updatedAt":  "2021-09-13T10:12:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42_JRb",
                                           "createdAt":  "2021-09-19T19:17:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jnm2",
                                           "body":  "This is particularly bad when the stream being passed to the ZipArchive constructor is a 10-15 minute download and you want to be processing the contents as they become available.\r\n\r\nPlease consider `ZipArchive.OpenAsync` or `zipArchive.GetEntriesAsync` to avoid blocking on I/O, too.\r\n\r\nThe first thing ZipArchive currently does with a seekable stream is `Seek(-18, SeekOrigin.End)`. I\u0027m hoping that can be avoided for non-seekable streams. I\u0027m rather worried that there\u0027s no help for it given that .zip files place the directory at the end of the stream. https://en.wikipedia.org/wiki/ZIP_(file_format)#Structure mentions that scanning for file entry headers isn\u0027t necessarily valid because a file may have been deleted from the directory. However, I would guess the vast majority of .zip files are built once and never deleted from, and thus would be packed with no unused space around the file entries.\r\n\r\nhttps://github.com/dotnet/runtime/blob/78593b9e095f974305b2033b465455e458e30267/src/libraries/System.IO.Compression/src/System/IO/Compression/ZipArchive.cs#L520-L522",
                                           "updatedAt":  "2021-09-19T20:34:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43Cp3w",
                                           "createdAt":  "2021-09-20T23:52:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jnm2",
                                           "body":  "https://pkware.cachefly.net/webdocs/casestudies/APPNOTE.TXT mentions streaming .zip files and says that every local file header must have an entry in the central directory. So that takes care of the deleted files concern and shows that streaming is a known use case.\r\n\r\n\u003e 4.3.2 Each file placed into a ZIP file MUST be preceded by  a \"local file header\" record for that file.  Each \"local file header\" MUST be accompanied by a corresponding \"central directory header\" record within the central directory section of the ZIP file.\r\n\r\n\u003e 4.3.5 File data MAY be followed by a \"data descriptor\" for the file.  Data descriptors are used to facilitate ZIP file streaming.  ",
                                           "updatedAt":  "2021-09-20T23:52:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43C7xT",
                                           "createdAt":  "2021-09-21T01:57:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEdNXWw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "hammypants",
                                                                               "createdAt":  "2022-11-15T23:16:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "nguerrera",
                                                                               "createdAt":  "2025-08-05T19:14:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jnm2",
                                           "body":  "To get myself unblocked, I created a proof of concept which successfully reads a streaming .zip file: \u003chttps://gist.github.com/jnm2/31bdf08357a44c91d01736ad43b9c447\u003e\r\n\r\n```cs\r\nawait using var reader = new StreamingZipReader(downloadStream);\r\n\r\nwhile (await reader.MoveToNextEntryAsync(skipDirectories: true, CancellationToken.None))\r\n{\r\n    Console.WriteLine($\"{reader.CurrentEntry.Name}: {reader.CurrentEntry.Length} bytes\");\r\n\r\n    using var stream = reader.GetCurrentEntryStream();\r\n    using var testReader = new StreamReader(stream);\r\n    var test = await testReader.ReadToEndAsync();\r\n    // (my test download had only text files, and they all looked right!)\r\n}\r\n```",
                                           "updatedAt":  "2021-09-21T01:59:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_FefK",
                                           "createdAt":  "2024-05-26T08:55:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEdNXaA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "jnm2",
                                                                               "createdAt":  "2024-05-26T15:58:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "jnm2",
                                                                               "createdAt":  "2024-05-26T15:58:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "nguerrera",
                                                                               "createdAt":  "2025-08-05T19:14:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "bjornharrtell",
                                           "body":  "FWIW with permission from @jnm2 I\u0027ve published StreamingZipReader as nuget https://www.nuget.org/packages/StreamingZipReader and recently fixed a bug with regard to ZIP64 support.",
                                           "updatedAt":  "2024-05-26T08:55:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6tDZpI",
                                           "createdAt":  "2025-05-23T05:55:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bjornharrtell",
                                           "body":  "Did https://github.com/dotnet/runtime/pull/114421 also fix this? I find it hard to fully understand the capabilities of that new stuff. @carlossanlop?",
                                           "updatedAt":  "2025-05-23T05:55:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6tlXjJ",
                                           "createdAt":  "2025-05-27T12:02:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "\u003e Did [#114421](https://github.com/dotnet/runtime/pull/114421) also fix this? I find it hard to fully understand the capabilities of that new stuff. [@carlossanlop](https://github.com/carlossanlop)?\n\n#114421 has introduced a set of new async APIs, but non-seekable inputs are still being loaded into memory",
                                           "updatedAt":  "2025-05-27T12:02:11Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "ZipArchive.Open will read non seakable stream to memory \u0026 fail with bad error on large streams",
        "labels":  [
                       "area-System.IO.Compression",
                       "tenet-performance"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/59591",
        "createdAt":  "2021-09-25T00:25:54Z",
        "number":  59591,
        "author":  "carlossanlop",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC2p4Cw==",
                          "nodes":  [
                                        {
                                            "content":  "HEART",
                                            "user":  "KirillOsenkov",
                                            "createdAt":  "2021-09-25T00:32:31Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "Rekkonnect",
                                            "createdAt":  "2021-09-25T01:32:30Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "giladfrid009",
                                            "createdAt":  "2021-09-25T01:48:47Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "ryank425",
                                            "createdAt":  "2021-09-25T02:59:28Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "rgwood",
                                            "createdAt":  "2021-09-25T05:23:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rgwood",
                                            "createdAt":  "2021-09-25T05:23:29Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "jnyrup",
                                            "createdAt":  "2021-09-25T05:54:07Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "bcronje",
                                            "createdAt":  "2021-09-25T07:15:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "grbell-ms",
                                            "createdAt":  "2021-09-25T17:35:14Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "manandre",
                                            "createdAt":  "2021-09-25T18:45:30Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "D3-LucaPiombino",
                                            "createdAt":  "2021-09-25T19:57:07Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "saucecontrol",
                                            "createdAt":  "2021-09-25T20:04:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "srxqds",
                                            "createdAt":  "2021-09-26T02:11:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "yigolden",
                                            "createdAt":  "2021-09-26T08:52:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lukeb1961",
                                            "createdAt":  "2021-09-27T08:15:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GerardSmit",
                                            "createdAt":  "2021-09-29T13:53:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jpapp05",
                                            "createdAt":  "2021-09-29T20:36:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "danielchalmers",
                                            "createdAt":  "2021-10-04T11:00:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GSPP",
                                            "createdAt":  "2021-10-12T05:32:23Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "GSPP",
                                            "createdAt":  "2021-10-12T05:32:23Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "AlgorithmsAreCool",
                                            "createdAt":  "2021-10-21T19:36:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dmpe",
                                            "createdAt":  "2022-01-03T21:56:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "HighPerfDotNet",
                                            "createdAt":  "2022-01-07T07:29:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "madelson",
                                            "createdAt":  "2022-01-09T18:04:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ptasev",
                                            "createdAt":  "2022-01-12T23:26:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "elubarsky-hs",
                                            "createdAt":  "2022-01-13T06:21:23Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "elubarsky-hs",
                                            "createdAt":  "2022-01-13T06:21:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0xfeeddeadbeef",
                                            "createdAt":  "2022-02-12T09:10:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aayjaychan",
                                            "createdAt":  "2022-05-21T14:27:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sfiruch",
                                            "createdAt":  "2022-06-06T16:36:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Cyan4973",
                                            "createdAt":  "2022-07-09T22:10:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Agagamand",
                                            "createdAt":  "2022-10-03T20:20:56Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "bill-poole",
                                            "createdAt":  "2023-01-05T00:12:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mossseank",
                                            "createdAt":  "2023-02-08T15:50:16Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "mossseank",
                                            "createdAt":  "2023-02-08T15:50:24Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "rganz",
                                            "createdAt":  "2023-05-25T13:17:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JamieMagee",
                                            "createdAt":  "2023-06-10T23:53:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ncagr",
                                            "createdAt":  "2023-08-19T17:47:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "exyi",
                                            "createdAt":  "2023-08-21T14:58:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rducom",
                                            "createdAt":  "2023-09-05T18:03:32Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "rducom",
                                            "createdAt":  "2023-09-05T18:03:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alexandrehtrb",
                                            "createdAt":  "2023-09-12T17:01:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kamronbatman",
                                            "createdAt":  "2023-11-08T20:28:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PanSzelescik",
                                            "createdAt":  "2023-11-28T15:35:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alexrp",
                                            "createdAt":  "2024-01-26T12:48:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "iamcarbon",
                                            "createdAt":  "2024-02-09T21:27:22Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "kchristman54",
                                            "createdAt":  "2024-02-12T20:28:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "arkadiuszwojcik",
                                            "createdAt":  "2024-02-13T12:03:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "krjw-eyev",
                                            "createdAt":  "2024-03-01T17:06:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "IEVin",
                                            "createdAt":  "2024-03-20T10:16:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "domsleee",
                                            "createdAt":  "2024-03-22T15:35:12Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "dimo-coremont",
                                            "createdAt":  "2024-03-26T15:50:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "YohanSciubukgian",
                                            "createdAt":  "2024-03-27T05:04:44Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "matthewteeter",
                                            "createdAt":  "2024-03-30T18:58:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "matthewteeter",
                                            "createdAt":  "2024-03-30T18:58:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "compujuckel",
                                            "createdAt":  "2024-04-01T19:57:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "zxcq544",
                                            "createdAt":  "2024-05-02T17:28:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fredeil",
                                            "createdAt":  "2024-05-06T08:42:33Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "fredeil",
                                            "createdAt":  "2024-05-06T08:42:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "virzak",
                                            "createdAt":  "2024-05-17T15:06:54Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "virzak",
                                            "createdAt":  "2024-05-17T15:06:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nikolai-mb",
                                            "createdAt":  "2024-05-30T19:44:03Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "QuinnDamerell",
                                            "createdAt":  "2024-05-30T23:52:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-05-31T00:44:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bgrainger",
                                            "createdAt":  "2024-05-31T12:48:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hickford",
                                            "createdAt":  "2024-06-11T10:48:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "guitarrapc",
                                            "createdAt":  "2024-06-18T02:15:57Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "guitarrapc",
                                            "createdAt":  "2024-06-18T02:15:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AigioL",
                                            "createdAt":  "2024-06-20T10:22:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "borland",
                                            "createdAt":  "2024-06-26T21:37:04Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "borland",
                                            "createdAt":  "2024-06-26T21:37:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "slang25",
                                            "createdAt":  "2024-07-12T11:27:47Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "slang25",
                                            "createdAt":  "2024-07-12T11:27:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fitdev",
                                            "createdAt":  "2024-07-29T20:57:25Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "hatsantos",
                                            "createdAt":  "2024-08-14T01:56:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AustinWise",
                                            "createdAt":  "2024-08-23T16:56:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "campersau",
                                            "createdAt":  "2024-09-06T11:21:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hirohira9119",
                                            "createdAt":  "2024-09-06T17:13:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Daniel-Svensson",
                                            "createdAt":  "2024-09-07T17:04:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "verdie-g",
                                            "createdAt":  "2024-09-15T15:39:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "issue-dispenser",
                                            "createdAt":  "2024-09-23T06:53:51Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "issue-dispenser",
                                            "createdAt":  "2024-09-23T06:58:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gabynevada",
                                            "createdAt":  "2024-09-26T12:13:41Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "gabynevada",
                                            "createdAt":  "2024-09-26T12:13:42Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "juwens",
                                            "createdAt":  "2024-09-26T23:24:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "juwens",
                                            "createdAt":  "2024-09-26T23:24:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mnadareski",
                                            "createdAt":  "2024-10-16T02:14:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DoCode",
                                            "createdAt":  "2024-10-17T19:00:48Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "DoCode",
                                            "createdAt":  "2024-10-17T19:00:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "EamonNerbonne",
                                            "createdAt":  "2024-11-18T13:11:27Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "lalakii",
                                            "createdAt":  "2025-01-11T20:29:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "k-wojcik",
                                            "createdAt":  "2025-01-20T08:37:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Sella-GH",
                                            "createdAt":  "2025-01-28T21:43:56Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "Sella-GH",
                                            "createdAt":  "2025-01-28T21:43:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "edwardneal",
                                            "createdAt":  "2025-02-03T20:07:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "omariom",
                                            "createdAt":  "2025-02-04T22:27:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lalakii",
                                            "createdAt":  "2025-02-08T21:38:58Z"
                                        },
                                        {
                                            "content":  "LAUGH",
                                            "user":  "lalakii",
                                            "createdAt":  "2025-02-08T21:39:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2025-02-14T14:04:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jodydonetti",
                                            "createdAt":  "2025-04-02T05:23:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fakefeik",
                                            "createdAt":  "2025-04-17T04:13:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sdukehart-omnesoft",
                                            "createdAt":  "2025-05-09T18:59:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xPaw",
                                            "createdAt":  "2025-05-09T20:13:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sgtfrankieboy",
                                            "createdAt":  "2025-05-12T18:28:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kronic",
                                            "createdAt":  "2025-05-13T16:55:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Shak-o",
                                            "createdAt":  "2025-05-21T08:39:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gkashiashvili",
                                            "createdAt":  "2025-05-21T09:05:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "george-chakhidze",
                                            "createdAt":  "2025-05-21T09:09:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "giochagelishvili",
                                            "createdAt":  "2025-05-21T09:40:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "OronDF343",
                                            "createdAt":  "2025-05-26T08:07:39Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "OronDF343",
                                            "createdAt":  "2025-05-26T08:07:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "samsosa",
                                            "createdAt":  "2025-05-29T14:05:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KeterSCP",
                                            "createdAt":  "2025-06-11T07:57:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bartecargo",
                                            "createdAt":  "2025-06-24T21:32:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "manfromarce",
                                            "createdAt":  "2025-07-02T20:23:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "BoundedChenn31",
                                            "createdAt":  "2025-07-17T02:44:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SbiCA",
                                            "createdAt":  "2025-07-28T06:16:01Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "SbiCA",
                                            "createdAt":  "2025-07-28T06:16:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Atulin",
                                            "createdAt":  "2025-08-11T08:01:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bollhals",
                                            "createdAt":  "2025-08-13T10:46:14Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2025-09-11T16:26:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jmbryan4",
                                            "createdAt":  "2025-09-13T01:46:00Z"
                                        }
                                    ],
                          "totalCount":  122
                      },
        "updatedAt":  "2025-09-17T10:58:49Z",
        "body":  "[Zstandard](https://en.wikipedia.org/wiki/Zstandard) (or Zstd) is a fast compression algorithm that was published by Facebook in 2015, and had its first stable release in May 2021.\r\n\r\nTheir official repo offers a C implementation. https://github.com/facebook/zstd\r\n\r\nData compression mechanism specification: https://datatracker.ietf.org/doc/html/rfc8478\r\n\r\nFeatures:\r\n\r\n- It is faster than Deflate, especially in decompression, while offering a similar compression ratio.\r\n- It\u0027s maximum compression level is similar to that of lzma and performs better than lza and bzip2.\r\n- It reached the [Pareto Frontier](https://en.wikipedia.org/wiki/Pareto_efficiency), as it decompresses faster than any other currently-available algorithm with similar or worse compression ratio.\r\n- It supports multi-threading.\r\n- It can be saved to a *.zst file.\r\n- It has a dual BSD+GPLv2 license. We would be using the BSD license.\r\n\r\nIt\u0027s used by:\r\n- The Linux Kernel as a compression option for btrfs and SquashFS since 2017.\r\n- FreeBSD for coredumps.\r\n- AWS RedShift for databases.\r\n- Canonical, Fedora and ArchLinux for their package managers.\r\n- Nintendo Switch to compress its files.\r\n\r\nWe could offer a stream-based class, like we do for Deflate with `DeflateStream` or `GZipStream`, but we should also consider offering a stream-less static class, since it\u0027s a common request.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOxNduuA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc43QJm9",
                                           "createdAt":  "2021-09-25T00:25:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io-compression\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n[Zstandard](https://en.wikipedia.org/wiki/Zstandard) (or Zstd) is a fast compression algorithm that was published by Facebook in 2015, and had its first stable release in May 2021.\r\n\r\nTheir official repo offers a C implementation. https://github.com/facebook/zstd\r\n\r\nData compression mechanism specification: https://datatracker.ietf.org/doc/html/rfc8478\r\n\r\nFeatures:\r\n\r\n- It is faster than Deflate, especially in decompression, while offering a similar compression ratio.\r\n- It\u0027s maximum compression level is similar to that of lzma and performs better than lza and bzip2.\r\n- It reached the [Pareto Frontier](https://en.wikipedia.org/wiki/Pareto_efficiency), as it decompresses faster than any other currently-available algorithm with similar or worse compression ratio.\r\n- It supports multi-threading.\r\n- It can be saved to a *.zst file.\r\n- It has a dual BSD+GPLv2 license. We would be using the BSD license.\r\n\r\nIt\u0027s used by:\r\n- The Linux Kernel as a compression option for btrfs and SquashFS since 2017.\r\n- FreeBSD for coredumps.\r\n- AWS RedShift for databases.\r\n- Canonical, Fedora and ArchLinux for their package managers.\r\n- Nintendo Switch to compress its files.\r\n\r\nWe could offer a stream-based class, like we do for Deflate with `DeflateStream`, but we should also consider offering a stream-less static class, since it\u0027s a common request.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ecarlossanlop\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.IO.Compression`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-09-25T00:25:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43aY1Z",
                                           "createdAt":  "2021-09-28T22:14:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEILG2w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2021-10-19T07:24:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "elubarsky-hs",
                                                                               "createdAt":  "2022-01-13T06:21:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "0xfeeddeadbeef",
                                                                               "createdAt":  "2025-03-02T16:45:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "manandre",
                                           "body":  "It would be a great enhancement for .Net, but also for the public visibility of this impressive compression algorithm.\r\nIf you accept it, I can contribute to make it happen.\r\nI already foresee multiple steps:\r\n- [ ] Design and review API proposal\r\n  * Stream-based API\r\n  * Static (and allocation-less?) API: Compressor and Decompressor\r\n- [ ] Port Facebook Zstandard C sources\r\n- [ ] Add Zstandard entrypoints to System.IO.Compression.Native (Windows \u0026 Unix)\r\n- [ ] Implement approved API in a new System.IO.Compression.Zstandard library project\r\n- [ ] Add unit tests\r\n  * StreamConformanceTests\r\n  * CompressionStreamUnitTests\r\n  * Custom Zstandard tests?\r\n    * Extend [dotnet/runtime-assets](https://github.com/dotnet/runtime-assets/tree/main/src/System.IO.Compression.TestData)?\r\n- [ ] Add performance tests in [dotnet/performance](https://github.com/dotnet/performance)\r\n\r\nOpen questions:\r\n- Support of training dictionaries? (see [Small Data compression](http://facebook.github.io/zstd/#small-data))\r\n- Support of advanced parameters? (see [zstd.h](https://github.com/facebook/zstd/blob/v1.5.0/lib/zstd.h#L269))\r\n- Mapping for CompressionLevel enum? Proposal:\r\n  * CompressionLevel.Optimal =\u003e 0 // Default (=3 currently)\r\n  * CompressionLevel.NoCompression =\u003e ZSTD_minCLevel() // ? Not supported but we have to chose a value here\r\n  * CompressionLevel.Fastest =\u003e ZSTD_minCLevel()\r\n  * CompressionLevel.SmallestSize =\u003e ZSTD_maxCLevel()",
                                           "updatedAt":  "2021-09-28T22:14:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43nV2Z",
                                           "createdAt":  "2021-10-04T00:28:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "carlossanlop",
                                           "body":  "Thank you, @manandre for your offer!\r\n\r\nLet\u0027s start by discussing the stream API.\r\n\r\nI think it makes sense for the stream class to look very similar to Deflate, since both would only wrap a compression _algorithm_ (unlike the Zip, GZip, ZLib APIs, which additionally represent a compression/archiving format).\r\n\r\nI am thinking we can avoid creating too many constructors by creating a separate `ZStandardOptions` class to specify the configuration values.\r\n\r\nThe `ZStandardOptions` class will allow specifying the compression level using an integer (and will throw if specifying an out-of-bounds value). This will help avoid falling into the typical `CompressionLevel` limitation of only 4 values. But, if the user desires to use it anyway, we can provide a constructor that takes a `CompressionLevel` and converts it to a predefined value from the compression level range allowed by ZStandard, which goes from 1 to [22](https://github.com/facebook/zstd/blob/14772d97be90af6a027adb6008c32ec21470c270/lib/compress/zstd_compress.c#L6178), with [3 being default](https://github.com/facebook/zstd/blob/1903d6a5a85898bf2db6a8c6a1a24c26627ecd7b/lib/zstd.h#L95). The user should also be able to specify negative levels, according to the [manual](https://github.com/facebook/zstd/blob/dev/doc/zstd_manual.html):\r\n\u003e The library supports regular compression levels from 1 up to ZSTD_maxCLevel(), which is currently 22. Levels \u003e= 20, labeled `--ultra`, should be used with caution, as they require more memory. The library also offers negative compression levels, which extend the range of speed vs. ratio preferences. The lower the level, the faster the speed (at the cost of compression).\r\n\r\n\r\n#### Questions\r\n\r\n- `WriteByte` is a method that we decided to override in `ZLibStream`, but not in `DeflateStream` or `GZipStream`. Do we need to override it here?\r\n- Naming: Do we want to use the full name `ZStandardStream|Options` or do we prefer the shorter word `ZstdStream|Options`? I\u0027m inclined for the first one.\r\n- The official C implementation specifies 3 as the default compression level, but other libraries have chosen a different value. For example, ZStandard.Net decided to use 6. Anyone has a reason not to use 3?\r\n- The namespace is System.IO.Compression. Do we wish to add ZStandard classes here as well, or should we create its own assembly like we did with Brotli? Say, System.IO.Compression.ZStandard? Why or why not?\r\n- If we allow the user to specify a negative compression level, should we ask the user to also manually specify `--fast` somehow, or should the class take care of that automatically?\r\n- The algorithm has [multithreading support](https://github.com/facebook/zstd/tree/dev/lib#multithreading-support). Should it affect the public API surface proposed below?\r\n- The options constructor that takes a `CompressionLevel` may not play well with having a public settable property for `int CompressionLevel`. What if the user specifies a value for both?:\r\n```cs\r\nvar options = new ZStandardOptions(level: CompressionLevel.SmallestSize) { Level = -5 };\r\n```\r\n- What does the community think about adding ZStandard as an in-box feature in System.IO.Compression, as opposed to contributing to an external existing library? I don\u0027t yet see one targeting .NET Core or newer. A couple of examples:\r\n  - [bp74/Zstandard.Net](https://github.com/bp74/Zstandard.Net), last updated 3 years ago. Targets .NET Standard 2.0 and .NET Framework 4.5.\r\n    - [skbkontur/ZstdNet](https://github.com/skbkontur/ZstdNet), last updated 1 year ago. Targets .NET Standard 2.0 and 2.1. It\u0027s a fork of the previous one.\r\n\r\n```cs\r\nnamespace System.IO.Compression\r\n{\r\n    public class ZStandardOptions\r\n    {\r\n        /// \u003csummary\u003eAllow mapping the CompressionLevel enum to predefined levels for ZStandard:\r\n        /// - CompressionLevel.NoCompression = 1, // Official normal minimum\r\n        /// - CompressionLevel.Fastest = 1,       // Official normal minimum\r\n        /// - CompressionLevel.Optimal = 3,       // Official default: ZSTD_CLEVEL_DEFAULT\r\n        /// - CompressionLevel.SmallestSize = 22  // Official maximum: ZSTD_MAX_CLEVEL\r\n        /// \u003c/summary\u003e\r\n        public ZStandardOptions(CompressionLevel level);\r\n        // Min = ZSTD_minCLevel() which can be negative, Max=ZSTD_maxCLevel()=22, Default=ZSTD_CLEVEL_DEFAULT=3, throw if out-of-bounds\r\n        int CompressionLevel { get; set; }\r\n        CompressionMode Mode { get; set; }\r\n        bool LeaveOpen { get; set; }\r\n        static int MaxCompressionLevel { get; } // P/Invoke for current maximum: 22\r\n    }\r\n\r\n    public class ZStandardStream : Stream\r\n    {\r\n        public ZStandardStream(Stream stream, ZStandardOptions? options); // If options null, then use default values\r\n        public Stream BaseStream { get; }\r\n        public override bool CanRead { get; }\r\n        public override bool CanSeek { get; }\r\n        public override bool CanWrite { get; }\r\n        public override long Length { get; }\r\n        public override long Position { get; set; }\r\n        public override IAsyncResult BeginRead(byte[] buffer, int offset, int count, AsyncCallback? asyncCallback, object? asyncState);\r\n        public override IAsyncResult BeginWrite(byte[] buffer, int offset, int count, AsyncCallback? asyncCallback, object? asyncState);\r\n        public override void CopyTo(Stream destination, int bufferSize);\r\n        public override Task CopyToAsync(Stream destination, int bufferSize, CancellationToken cancellationToken);\r\n        protected override void Dispose(bool disposing);\r\n        public override ValueTask DisposeAsync();\r\n        public override int EndRead(IAsyncResult asyncResult);\r\n        public override void EndWrite(IAsyncResult asyncResult);\r\n        public override void Flush();\r\n        public override Task FlushAsync(CancellationToken cancellationToken);\r\n        public override int Read(byte[] buffer, int offset, int count);\r\n        public override int Read(Span\u003cbyte\u003e buffer);\r\n        public override Task\u003cint\u003e ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken);\r\n        public override ValueTask\u003cint\u003e ReadAsync(Memory\u003cbyte\u003e buffer, CancellationToken cancellationToken = default(CancellationToken));\r\n        public override int ReadByte();\r\n        public override long Seek(long offset, SeekOrigin origin);\r\n        public override void SetLength(long value);\r\n        public override void Write(byte[] buffer, int offset, int count);\r\n        public override void Write(ReadOnlySpan\u003cbyte\u003e buffer);\r\n        public override void WriteByte(byte value); // ZLibStream overrides it, but not Deflate/GZipStream\r\n        public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken);\r\n        public override ValueTask WriteAsync(ReadOnlyMemory\u003cbyte\u003e buffer, CancellationToken cancellationToken = default(CancellationToken));\r\n    }\r\n}\r\n```",
                                           "updatedAt":  "2021-10-04T00:28:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43qTVo",
                                           "createdAt":  "2021-10-04T20:36:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "manandre",
                                           "body":  "- `WriteByte`: `ZlibStream` and `GZipStream` overrides are delegated to `DeflateStream` which does not override it. But `BrotliStream` does override it to route it directly to the overridden Span-based implementation. We should do the same...\r\n- I vote for `ZStandardStream|Options`\r\n- 3 seems fine. For information, `ZSTD_defaultCLevel()` (returning `ZSTD_CLEVEL_DEFAULT`) is available since version 1.5.0.\r\n- Brotli classes are in the `System.IO.Compression` namespace but grouped in a dedicated `System.IO.Compression.Brotli` assembly.  It seems the best compromise to make it easily accessible without forcing to load it in memory if not explicitly referenced.\r\n- We should automatically handle the full range of compression levels between (negative) min and max supported values. Why would we limit the algorithm possibilities here?\r\n- We should definitively propose multithreading support, we may propose its configuration in the `ZStandardStream|Options`, `WorkerCount` or `MaxDegreeOfParallelism` (as in `ParallelOptions`), with 0 as default value (or maybe `Environment.ProcessorCount`?).\r\n- CompressionLevel parameter in constructor should be optional, and, when set, native (int) compression level should always win.\r\n- What is the default value for `CompressionMode`? `CompressionMode.Decompress`?\r\n- What is the default value for `LeaveOpen`? `false`?\r\n- We could map `Compression.Fastest` to `ZSTD_minCLevel()` as \"The lower the level, the faster the speed\".\r\n- We could add `MinCompressionLevel` and `DefaultCompressionLevel` as static accessors aside the `MaxCompressionLevel` one.\r\n- What about a `BufferSize` configuration property (like in `FileStreamOptions`)? `ZSTD_CStreamOutSize()` and `ZSTD_DStreamOutSize()` could be used as the default value.",
                                           "updatedAt":  "2021-10-04T20:36:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44gsgQ",
                                           "createdAt":  "2021-10-20T22:52:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEFuUBw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AlgorithmsAreCool",
                                                                               "createdAt":  "2021-10-21T19:38:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "VSadov",
                                                                               "createdAt":  "2021-10-28T17:18:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lalakii",
                                                                               "createdAt":  "2025-02-08T21:40:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "agocke",
                                           "body":  "FYI @VSadov this may be particularly interesting to single-file compression as it is supposed to be very fast for decompression.\r\n\r\nThis might mean we would need deeper runtime integration to be usable during bundler loading.",
                                           "updatedAt":  "2021-10-20T22:52:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44hk5Y",
                                           "createdAt":  "2021-10-21T07:16:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GSPP",
                                           "body":  "How does the multi-threading work internally? Does it integrate somehow with the usual .NET infrastructure (`TaskScheduler` and such)? Or does the library start native threads?\r\n\r\nI wonder about that because sometimes you need threading to play nice with what else lives in the same process. In a web app, multi-threading could cause load spikes that crowd out request work from the CPU. Reducing the DOP is only a partial fix because multiple parallel compression jobs would again saturate all cores and cause the problem to reappear. Isolating such work onto a custom thread pool can be a solution and it would not work if the library starts its own threads.\r\n\r\nAnother concern would be startup overhead for multi-threading inside the library. Is there thread pooling?\r\n\r\n\u003chr\u003e\r\n\r\nIt seems to me that `CompressionMode` should be a mandatory constructor argument. There is no sensible default and without that argument the meaning of the code is unclear.\r\n\r\n`bool LeaveOpen` is about the stream, not about compression. In my opinion, it does not belong into the options class. It should be a constructor argument specific for the stream. This option would, for example, not apply for a static helper method `static byte[] Compress(byte[] data, ZStandardOptions? options)`. The options object would now carry around ignored options.",
                                           "updatedAt":  "2021-10-21T07:16:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44j9DV",
                                           "createdAt":  "2021-10-21T19:46:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "manandre",
                                           "body":  "About thread pooling, the [`zstd.h`](https://github.com/facebook/zstd/blob/v1.5.0/lib/zstd.h#L1571-L1584) header file contains:\r\n```c\r\n/* ! Thread pool :\r\n * These prototypes make it possible to share a thread pool among multiple compression contexts.\r\n * This can limit resources for applications with multiple threads where each one uses\r\n * a threaded compression mode (via ZSTD_c_nbWorkers parameter).\r\n * ZSTD_createThreadPool creates a new thread pool with a given number of threads.\r\n * Note that the lifetime of such pool must exist while being used.\r\n * ZSTD_CCtx_refThreadPool assigns a thread pool to a context (use NULL argument value\r\n * to use an internal thread pool).\r\n * ZSTD_freeThreadPool frees a thread pool, accepts NULL pointer.\r\n */\r\ntypedef struct POOL_ctx_s ZSTD_threadPool;\r\nZSTDLIB_API ZSTD_threadPool* ZSTD_createThreadPool(size_t numThreads);\r\nZSTDLIB_API void ZSTD_freeThreadPool (ZSTD_threadPool* pool);  /* accept NULL pointer */\r\nZSTDLIB_API size_t ZSTD_CCtx_refThreadPool(ZSTD_CCtx* cctx, ZSTD_threadPool* pool);\r\n\r\n```",
                                           "updatedAt":  "2021-10-21T19:46:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc443btB",
                                           "createdAt":  "2021-10-28T17:33:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODr12aw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "manandre",
                                                                               "createdAt":  "2021-10-28T18:22:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Agagamand",
                                                                               "createdAt":  "2024-07-28T07:39:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "VSadov",
                                           "body":  "Zstandard would be very useful to single-file compression. We currently use ZLib/Deflate as it is available in the runtime, but would prefer something faster as impact of decompression is very noticeable at start up.\r\n\r\nWe did examine lz4 and Zstd as alternative choices of which lz4 is faster at decompression, but Zstd would allow to keep the same compression ratio as with Deflate.\r\n\r\nIf there is Zstd support in the runtime, single-file compression will definitely switch to it.\r\n",
                                           "updatedAt":  "2021-10-28T17:33:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc445XFo",
                                           "createdAt":  "2021-10-29T08:42:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODOBsXA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Agagamand",
                                                                               "createdAt":  "2023-03-17T11:14:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "starrlingo",
                                                                               "createdAt":  "2023-11-30T08:31:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "GSPP",
                                           "body":  "Here are some interesting benchmarks: https://github.com/google/brotli/issues/553. ZStandard offers a really nice trade-off for speed and compression ratio.\r\n\r\n![image](https://user-images.githubusercontent.com/12032350/139404502-fe466a01-e1de-4108-b0e4-06b45ff18d4a.png)\r\n",
                                           "updatedAt":  "2021-10-29T08:42:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lv2qD",
                                           "createdAt":  "2023-09-05T17:45:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEdzImw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "manandre",
                                                                               "createdAt":  "2023-09-05T18:04:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rducom",
                                                                               "createdAt":  "2023-09-05T18:04:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "0xfeeddeadbeef",
                                                                               "createdAt":  "2023-09-05T19:10:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alexandrehtrb",
                                                                               "createdAt":  "2023-09-12T17:03:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Agagamand",
                                                                               "createdAt":  "2023-11-16T16:45:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PanSzelescik",
                                                                               "createdAt":  "2023-11-28T15:36:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "elubarsky-hs",
                                                                               "createdAt":  "2024-01-17T03:01:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "edwardneal",
                                                                               "createdAt":  "2024-02-12T05:21:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jods4",
                                                                               "createdAt":  "2024-03-13T23:44:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "brutaldev",
                                                                               "createdAt":  "2024-05-29T15:37:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "QuinnDamerell",
                                                                               "createdAt":  "2024-05-30T23:53:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AigioL",
                                                                               "createdAt":  "2024-06-20T10:24:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Atulin",
                                                                               "createdAt":  "2025-08-11T08:03:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  13
                                                         },
                                           "author":  "iamcarbon",
                                           "body":  "It looks like Chrome may also be getting support for decoding zstd encoded content, making this also relevant to web / cloud scenarios.\r\n\r\nhttps://chromestatus.com/feature/6186023867908096\r\n\r\nPutting in my vote or support, and hoping to see this prioritized in the .NET 9.0 planning.\r\n\r\nUPDATE: Chrome has confirmed that they are shipping zstd support in v123.\r\n\r\n\r\n",
                                           "updatedAt":  "2024-02-09T21:23:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mSxYj",
                                           "createdAt":  "2023-09-12T18:08:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEOqd8Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "elubarsky-hs",
                                                                               "createdAt":  "2024-01-17T03:01:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Agagamand",
                                                                               "createdAt":  "2024-02-04T14:11:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "edwardneal",
                                                                               "createdAt":  "2024-02-12T05:21:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kchristman54",
                                                                               "createdAt":  "2024-02-12T20:27:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bill-poole",
                                                                               "createdAt":  "2024-03-12T14:32:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "georg-jung",
                                                                               "createdAt":  "2024-03-15T11:15:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "IEVin",
                                                                               "createdAt":  "2024-03-20T10:24:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rducom",
                                                                               "createdAt":  "2024-03-27T17:02:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hatsantos",
                                                                               "createdAt":  "2024-08-14T01:59:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bollhals",
                                                                               "createdAt":  "2024-08-26T12:13:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hirohira9119",
                                                                               "createdAt":  "2024-09-06T17:13:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gabynevada",
                                                                               "createdAt":  "2024-09-26T12:14:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "fakefeik",
                                                                               "createdAt":  "2025-04-17T04:18:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  13
                                                         },
                                           "author":  "manandre",
                                           "body":  "I have open https://github.com/dotnet/aspnetcore/issues/50643 to support the zstd Content-Encoding in ASP .NET Core.\r\nIt is currently considered as blocked by the support of the ZStandard compression in the .NET Runtime.\r\n@carlossanlop Can we make it happen in .NET 9? Indeed I am still ready to help on this topic.",
                                           "updatedAt":  "2023-09-12T18:08:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rBZlq",
                                           "createdAt":  "2023-11-06T17:15:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODL7Xlw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "alxu-avpt",
                                                                               "createdAt":  "2023-11-06T17:25:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "bgrainger",
                                                                               "createdAt":  "2023-11-06T20:29:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "alexandrehtrb",
                                           "body":  "+1",
                                           "updatedAt":  "2023-11-06T17:15:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yxhsn",
                                           "createdAt":  "2024-02-04T05:21:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODxTsDA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kchristman54",
                                                                               "createdAt":  "2024-02-12T20:27:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bill-poole",
                                                                               "createdAt":  "2024-03-12T14:32:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "IEVin",
                                                                               "createdAt":  "2024-03-20T10:24:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rducom",
                                                                               "createdAt":  "2024-03-27T17:02:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "matthewteeter",
                                                                               "createdAt":  "2024-04-04T04:53:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hirohira9119",
                                                                               "createdAt":  "2024-09-06T17:13:24Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "dev-tony-hu",
                                           "body":  "Is there any plan to support it in Net 9.0?",
                                           "updatedAt":  "2024-02-04T05:21:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54hHe_",
                                           "createdAt":  "2024-03-27T05:11:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODz6qbA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rducom",
                                                                               "createdAt":  "2024-03-27T17:02:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "QINGCHARLES",
                                                                               "createdAt":  "2024-04-01T18:15:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "compujuckel",
                                                                               "createdAt":  "2024-04-01T19:57:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "matthewteeter",
                                                                               "createdAt":  "2024-04-04T04:53:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dev-tony-hu",
                                                                               "createdAt":  "2024-04-07T15:50:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "dev-tony-hu",
                                                                               "createdAt":  "2024-04-07T15:50:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "samsosa",
                                                                               "createdAt":  "2024-05-11T01:55:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "samsosa",
                                                                               "createdAt":  "2024-05-11T01:55:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "brutaldev",
                                                                               "createdAt":  "2024-05-29T15:37:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "QuinnDamerell",
                                                                               "createdAt":  "2024-05-30T23:52:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "virzak",
                                                                               "createdAt":  "2024-05-31T01:56:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "0xfeeddeadbeef",
                                                                               "createdAt":  "2024-05-31T09:51:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Agagamand",
                                                                               "createdAt":  "2024-05-31T10:37:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "rwasef1830",
                                                                               "createdAt":  "2024-06-19T14:36:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "borland",
                                                                               "createdAt":  "2024-06-26T21:36:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hirohira9119",
                                                                               "createdAt":  "2024-09-06T17:13:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "intelligide",
                                                                               "createdAt":  "2024-09-28T02:42:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  17
                                                         },
                                           "author":  "YohanSciubukgian",
                                           "body":  "Chrome 123 release support zstd \r\n- https://developer.chrome.com/blog/new-in-chrome-123#more\r\n- https://github.com/facebook/zstd/releases/tag/v1.5.6\r\n\r\nCould you consider it for .NET 9 ?",
                                           "updatedAt":  "2024-03-27T05:11:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_nWGp",
                                           "createdAt":  "2024-05-31T00:00:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEPNi9Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "borland",
                                                                               "createdAt":  "2024-06-26T21:36:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "matthewteeter",
                                                                               "createdAt":  "2024-07-04T19:20:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Agagamand",
                                                                               "createdAt":  "2024-07-11T10:36:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hirohira9119",
                                                                               "createdAt":  "2024-09-06T17:13:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "fallenwood",
                                                                               "createdAt":  "2025-04-22T11:37:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "QuinnDamerell",
                                           "body":  "It\u0027s super cool to see they released this in Chrome. I think the biggest motivating factor for getting this work done is that ASP.NET can support `zstd` as an out-of-the-box encoding option. \r\n\r\nIt looks like Facebook.com is already serving webpages with `zstd` compression; adding it to the dotnet webstack would be amazing!\r\n\r\nMost implementations bind to the native Facebook libs, but there are a few existing c# projects that are ports, like:\r\nhttps://github.com/oleg-st/ZstdSharp",
                                           "updatedAt":  "2024-05-31T00:02:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6EnSJd",
                                           "createdAt":  "2024-07-12T06:33:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODxTr1w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "manandre",
                                                                               "createdAt":  "2024-07-12T06:38:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Agagamand",
                                                                               "createdAt":  "2024-07-28T07:44:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Mrgaton",
                                                                               "createdAt":  "2024-07-29T23:49:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "0xfeeddeadbeef",
                                                                               "createdAt":  "2024-07-30T09:41:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hatsantos",
                                                                               "createdAt":  "2024-08-14T02:00:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hirohira9119",
                                                                               "createdAt":  "2024-09-06T17:12:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "rgueldenpfennig",
                                           "body":  "\u003e Chrome 123 release support zstd\r\n\u003e \r\n\u003e     * https://developer.chrome.com/blog/new-in-chrome-123#more\r\n\u003e \r\n\u003e     * https://github.com/facebook/zstd/releases/tag/v1.5.6\r\n\u003e \r\n\u003e \r\n\u003e Could you consider it for .NET 9 ?\r\n\r\nSince the 126 release Mozilla Firefox also supports zstd compression: https://www.mozilla.org/en-US/firefox/126.0/releasenotes/",
                                           "updatedAt":  "2024-07-12T06:33:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Gijws",
                                           "createdAt":  "2024-07-29T23:50:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD5qa4w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hatsantos",
                                                                               "createdAt":  "2024-08-14T02:00:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hirohira9119",
                                                                               "createdAt":  "2024-09-06T17:12:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Spacefish",
                                                                               "createdAt":  "2024-09-24T08:58:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "intelligide",
                                                                               "createdAt":  "2024-09-28T02:42:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Mrgaton",
                                                                               "createdAt":  "2024-10-17T18:14:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DoCode",
                                                                               "createdAt":  "2024-10-17T19:00:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Agagamand",
                                                                               "createdAt":  "2024-11-06T12:31:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "Mrgaton",
                                           "body":  "This for net 9 would be awesome, it would also be great for other algorithms like lzma2.",
                                           "updatedAt":  "2024-07-29T23:50:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6QQQi1",
                                           "createdAt":  "2024-10-17T18:02:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOES_r-g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "manandre",
                                                                               "createdAt":  "2024-10-17T18:06:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Mrgaton",
                                                                               "createdAt":  "2024-10-17T18:10:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "DoCode",
                                                                               "createdAt":  "2024-10-17T19:00:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Agagamand",
                                                                               "createdAt":  "2024-11-06T12:31:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "iraklib",
                                                                               "createdAt":  "2025-05-21T12:22:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "siyavash1984",
                                           "body":  "I noticed that this issue has been open for a few years now, and I was wondering if there are any plans to add Zstandard (Zstd) support to .NET. If not, I’d be happy to contribute to help implement this feature.\n\nGiven the performance benefits and the wide adoption of Zstd, I think it would be a great addition to the framework. If there are any steps or guidelines you can share, I’d love to assist in moving this forward.\n\nLooking forward to your feedback and guidance!\n\nThanks!",
                                           "updatedAt":  "2024-10-17T18:02:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6QQZYR",
                                           "createdAt":  "2024-10-17T18:11:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD2yhxg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "alxu-avpt",
                                                                               "createdAt":  "2024-10-17T18:12:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Mrgaton",
                                           "body":  "yes pls zstd lzma2 and 7z to net 9",
                                           "updatedAt":  "2024-10-17T18:13:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6QQbpb",
                                           "createdAt":  "2024-10-17T18:16:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "carlossanlop",
                                           "body":  "@siyavash1984 thank you! We still need to propose the APIs first. Here\u0027s the process: https://github.com/dotnet/runtime/blob/43813ac73242fa78c463d456bf755e3a6622b5d7/docs/project/api-review-process.md\n\nAt the moment we have this initial proposal https://github.com/dotnet/runtime/issues/59591#issuecomment-933059993 and [one reply](https://github.com/dotnet/runtime/issues/59591#issuecomment-933836136) discussing it. Additional feedback and discussion is welcome on these APIs (or additional proposed ones) to keep this moving.",
                                           "updatedAt":  "2024-10-17T18:16:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6UAvSM",
                                           "createdAt":  "2024-11-18T14:30:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEdYSLw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "slang25",
                                                                               "createdAt":  "2025-08-06T21:33:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "EamonNerbonne",
                                           "body":  "In terms of API proposal:\n\n - I\u0027d prefer using a PipeWriter/PipeReader based implementation.  This allows for lower-overhead usage, and part of the whole win for zstd is performance.  Additionally, PipeWriter/PipeReaders have `AsStream`  methods that allow stream-based usage over a pipe based implementation, so there\u0027s no (or barely any?) loss of generality. \n - Personally, I think supporting creating and consuming training dictionaries would be a _huge_ win.  This allows for _much_ more space efficient and faster (de)compression, and tends to have more impact than the underlying compression algorithm.  I once wrote a simple wrapper around dotnetzip to be able to use dictionaries with zlib (https://github.com/EamonNerbonne/ZlibWithDictionary); in my use case that outperformed even the best dictionary-less compression algorithms by a country mile. ZSTD would be much better, and  best of all the underlying library already supports dictionary-generation too, which removes the largest barrier to adoption.",
                                           "updatedAt":  "2024-11-18T14:33:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cvJzK",
                                           "createdAt":  "2025-02-02T23:13:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEFuUFg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lalakii",
                                                                               "createdAt":  "2025-02-08T21:41:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io-compression\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-02-02T23:13:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6lLnVI",
                                           "createdAt":  "2025-04-02T04:04:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOETJ4Ng==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jodydonetti",
                                                                               "createdAt":  "2025-04-02T06:06:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Agagamand",
                                                                               "createdAt":  "2025-04-03T15:12:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "God-damnit-all",
                                                                               "createdAt":  "2025-04-08T12:17:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Delacrowa",
                                                                               "createdAt":  "2025-04-21T10:37:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "fallenwood",
                                                                               "createdAt":  "2025-04-22T10:33:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "spacentropy",
                                                                               "createdAt":  "2025-05-22T09:16:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "tony-hu-avepoint",
                                           "body":  "Is there any plan to support it for now?",
                                           "updatedAt":  "2025-04-02T04:04:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6sZOzz",
                                           "createdAt":  "2025-05-19T21:24:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOET3Wrg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bgrainger",
                                                                               "createdAt":  "2025-05-19T22:05:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ptasev",
                                                                               "createdAt":  "2025-05-19T22:14:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jodydonetti",
                                                                               "createdAt":  "2025-05-19T23:04:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "fitdev",
                                                                               "createdAt":  "2025-05-20T07:21:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "YohanSciubukgian",
                                                                               "createdAt":  "2025-05-20T19:38:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "levanoz",
                                                                               "createdAt":  "2025-05-21T08:36:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gdodashvili-tbc",
                                                                               "createdAt":  "2025-05-21T08:37:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Shak-o",
                                                                               "createdAt":  "2025-05-21T08:40:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vmakharashvili",
                                                                               "createdAt":  "2025-05-21T08:48:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davmaisuradze-tbc",
                                                                               "createdAt":  "2025-05-21T08:49:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "iraklib",
                                                                               "createdAt":  "2025-05-21T08:50:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bkvariani-tbc",
                                                                               "createdAt":  "2025-05-21T08:50:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nichogovadze-tbc",
                                                                               "createdAt":  "2025-05-21T08:52:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gkashiashvili",
                                                                               "createdAt":  "2025-05-21T09:05:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lkloian-tbc",
                                                                               "createdAt":  "2025-05-21T09:05:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MurtazPachulia",
                                                                               "createdAt":  "2025-05-21T09:05:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tmatiashvili",
                                                                               "createdAt":  "2025-05-21T09:06:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Giorgi-T",
                                                                               "createdAt":  "2025-05-21T09:12:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "k1laba",
                                                                               "createdAt":  "2025-05-21T09:17:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bbulalauri",
                                                                               "createdAt":  "2025-05-21T09:20:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sdevnozashvili-tbc",
                                                                               "createdAt":  "2025-05-21T09:37:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "jpalelashvili-tbc",
                                                                               "createdAt":  "2025-05-21T09:42:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "shalvasvanidze",
                                                                               "createdAt":  "2025-05-21T09:43:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tkujoshvili-tbc",
                                                                               "createdAt":  "2025-05-21T09:51:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alkvantrishvili",
                                                                               "createdAt":  "2025-05-21T09:55:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "giorgi01",
                                                                               "createdAt":  "2025-05-21T10:03:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "annazakai",
                                                                               "createdAt":  "2025-05-21T10:06:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Kokooch",
                                                                               "createdAt":  "2025-05-21T10:20:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "shengela",
                                                                               "createdAt":  "2025-05-21T10:35:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "shengela",
                                                                               "createdAt":  "2025-05-21T10:35:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "tabsandze-tbc",
                                                                               "createdAt":  "2025-05-21T10:45:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tsotneabsandze",
                                                                               "createdAt":  "2025-05-21T10:45:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "llashkhi-tbc",
                                                                               "createdAt":  "2025-05-21T10:46:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ntchankvetadze-tbc",
                                                                               "createdAt":  "2025-05-21T10:56:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rducom",
                                                                               "createdAt":  "2025-05-21T17:07:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "rducom",
                                                                               "createdAt":  "2025-05-21T17:08:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "rducom",
                                                                               "createdAt":  "2025-05-21T17:08:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "spacentropy",
                                                                               "createdAt":  "2025-05-22T09:16:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "spacentropy",
                                                                               "createdAt":  "2025-05-22T09:16:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "spacentropy",
                                                                               "createdAt":  "2025-05-22T09:16:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ldaushvili-tbc",
                                                                               "createdAt":  "2025-05-23T12:02:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nishakarishvili-tbc",
                                                                               "createdAt":  "2025-05-23T12:06:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gugakurashvili",
                                                                               "createdAt":  "2025-05-23T12:06:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gturdziladze-tbc",
                                                                               "createdAt":  "2025-05-23T12:07:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lshishinashvili-tbc",
                                                                               "createdAt":  "2025-05-23T12:08:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alazishvili-tbc",
                                                                               "createdAt":  "2025-05-23T12:14:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "giochagelishvili",
                                                                               "createdAt":  "2025-05-23T12:18:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "IrakKapanadze-tbc",
                                                                               "createdAt":  "2025-05-24T17:57:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "OronDF343",
                                                                               "createdAt":  "2025-05-26T08:08:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "shmirtskhulava-tbc",
                                                                               "createdAt":  "2025-05-27T06:12:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hirohira9119",
                                                                               "createdAt":  "2025-05-28T14:00:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "0xfeeddeadbeef",
                                                                               "createdAt":  "2025-05-29T05:41:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "samsosa",
                                                                               "createdAt":  "2025-05-31T09:33:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kronic",
                                                                               "createdAt":  "2025-06-04T04:04:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "JamieMagee",
                                                                               "createdAt":  "2025-06-10T20:41:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dev-tony-hu",
                                                                               "createdAt":  "2025-06-17T08:59:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "dev-tony-hu",
                                                                               "createdAt":  "2025-06-17T08:59:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "dev-tony-hu",
                                                                               "createdAt":  "2025-06-17T08:59:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pkudrel",
                                                                               "createdAt":  "2025-07-03T04:09:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "billfreist",
                                                                               "createdAt":  "2025-07-20T08:13:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SbiCA",
                                                                               "createdAt":  "2025-07-29T07:35:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "slang25",
                                                                               "createdAt":  "2025-08-06T20:43:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "slang25",
                                                                               "createdAt":  "2025-08-06T20:43:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "slang25",
                                                                               "createdAt":  "2025-08-06T20:44:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "vahpetr",
                                                                               "createdAt":  "2025-08-09T20:23:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vahpetr",
                                                                               "createdAt":  "2025-08-09T20:25:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Atulin",
                                                                               "createdAt":  "2025-08-11T08:03:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bollhals",
                                                                               "createdAt":  "2025-08-13T10:47:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jmbryan4",
                                                                               "createdAt":  "2025-08-14T02:19:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rzikm",
                                                                               "createdAt":  "2025-09-02T14:13:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PaulusParssinen",
                                                                               "createdAt":  "2025-09-11T16:26:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  71
                                                         },
                                           "author":  "0xfeeddeadbeef",
                                           "body":  "\u003e [@siyavash1984](https://github.com/siyavash1984) thank you! We still need to propose the APIs first. Here\u0027s the process: https://github.com/dotnet/runtime/blob/43813ac73242fa78c463d456bf755e3a6622b5d7/docs/project/api-review-process.md\n\u003e \n\u003e At the moment we have this initial proposal [#59591 (comment)](https://github.com/dotnet/runtime/issues/59591#issuecomment-933059993) and [one reply](https://github.com/dotnet/runtime/issues/59591#issuecomment-933836136) discussing it. Additional feedback and discussion is welcome on these APIs (or additional proposed ones) to keep this moving.\n\n### Background and motivation\n\nHere\u0027s another take on Zstandard API that is basically a carbon copy of `System.IO.Compression.Brotli` with two additions:\n\n- Dictionary support (`ROM\u003cbyte\u003e` is useful for [pinning](https://learn.microsoft.com/en-us/dotnet/api/system.readonlymemory-1.pin), in order to load a dictionary by reference instead of copying it)\n- `GetMaxDecompressedLength` method on the decoder\n\nWe\u0027ve already implemented this API at @TBCBank (We use it to compress RabbitMQ message bodies and Redis cache entries), and, if approved, we can attempt to contribute a PR to the .NET Runtime.\n\n### API Proposal\n\n```csharp\nnamespace System.IO.Compression;\n\npublic struct ZstandardDecoder : System.IDisposable\n{\n    public ZstandardDecoder(System.ReadOnlyMemory\u003cbyte\u003e dictionary) { }\n    public System.Buffers.OperationStatus Decompress(System.ReadOnlySpan\u003cbyte\u003e source, System.Span\u003cbyte\u003e destination, out int bytesConsumed, out int bytesWritten) { }\n    public void Dispose() { }\n    public static int GetMaxDecompressedLength(System.ReadOnlySpan\u003cbyte\u003e data) { }\n    public static bool TryDecompress(System.ReadOnlySpan\u003cbyte\u003e source, System.Span\u003cbyte\u003e destination, out int bytesWritten) { }\n    public static bool TryDecompress(System.ReadOnlySpan\u003cbyte\u003e source, System.ReadOnlySpan\u003cbyte\u003e dictionary, System.Span\u003cbyte\u003e destination, out int bytesWritten) { }\n}\n\npublic struct ZstandardEncoder : System.IDisposable\n{\n    public ZstandardEncoder(int quality, int window) { }\n    public ZstandardEncoder(int quality, int window, System.ReadOnlyMemory\u003cbyte\u003e dictionary) { }\n    public System.Buffers.OperationStatus Compress(System.ReadOnlySpan\u003cbyte\u003e source, System.Span\u003cbyte\u003e destination, out int bytesConsumed, out int bytesWritten, bool isFinalBlock) { }\n    public void Dispose() { }\n    public System.Buffers.OperationStatus Flush(System.Span\u003cbyte\u003e destination, out int bytesWritten) { }\n    public static int GetMaxCompressedLength(int inputSize) { }\n    public static bool TryCompress(System.ReadOnlySpan\u003cbyte\u003e source, System.Span\u003cbyte\u003e destination, out int bytesWritten) { }\n    public static bool TryCompress(System.ReadOnlySpan\u003cbyte\u003e source, System.Span\u003cbyte\u003e destination, out int bytesWritten, int quality, int window) { }\n    public static bool TryCompress(System.ReadOnlySpan\u003cbyte\u003e source, System.ReadOnlySpan\u003cbyte\u003e dictionary, System.Span\u003cbyte\u003e destination, out int bytesWritten, int quality, int window) { }\n}\n\npublic sealed class ZstandardCompressionOptions\n{\n    public ZstandardCompressionOptions() { }\n    public ZstandardCompressionOptions(System.IO.Compression.CompressionLevel level) { }\n    public ZstandardCompressionOptions(System.ReadOnlyMemory\u003cbyte\u003e dictionary) { }\n    public ZstandardCompressionOptions(int quality) { }\n    public ZstandardCompressionOptions(System.IO.Compression.CompressionLevel level, System.ReadOnlyMemory\u003cbyte\u003e dictionary) { }\n    public ZstandardCompressionOptions(int quality, System.ReadOnlyMemory\u003cbyte\u003e dictionary) { }\n    public System.ReadOnlyMemory\u003cbyte\u003e Dictionary { get; }\n    public int Quality { get; }\n    public static int DefaultQuality { get; }\n    public static int MaxQuality { get; }\n    public static int MinQuality { get; }\n}\n\npublic sealed class ZstandardStream : System.IO.Stream\n{\n    public ZstandardStream(System.IO.Stream stream, System.IO.Compression.CompressionLevel compressionLevel) { }\n    public ZstandardStream(System.IO.Stream stream, System.IO.Compression.CompressionMode mode) { }\n    public ZstandardStream(System.IO.Stream stream, System.IO.Compression.CompressionLevel compressionLevel, bool leaveOpen) { }\n    public ZstandardStream(System.IO.Stream stream, System.IO.Compression.CompressionMode mode, bool leaveOpen) { }\n    public ZstandardStream(System.IO.Stream stream, System.IO.Compression.ZstandardCompressionOptions compressionOptions, bool leaveOpen = false) { }\n    public ZstandardStream(System.IO.Stream stream, System.IO.Compression.CompressionMode mode, int quality, System.ReadOnlyMemory\u003cbyte\u003e dictionary, bool leaveOpen) { }\n    public System.IO.Stream BaseStream { get; }\n    public override bool CanRead { get; }\n    public override bool CanSeek { get; }\n    public override bool CanWrite { get; }\n    public override long Length { get; }\n    public override long Position { get; set; }\n    public override System.IAsyncResult BeginRead(byte[] buffer, int offset, int count, System.AsyncCallback? callback, object? state) { }\n    public override System.IAsyncResult BeginWrite(byte[] buffer, int offset, int count, System.AsyncCallback? callback, object? state) { }\n    protected override void Dispose(bool disposing) { }\n    public override System.Threading.Tasks.ValueTask DisposeAsync() { }\n    public override int EndRead(System.IAsyncResult asyncResult) { }\n    public override void EndWrite(System.IAsyncResult asyncResult) { }\n    public override void Flush() { }\n    public override System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken cancellationToken) { }\n    public override int Read(System.Span\u003cbyte\u003e buffer) { }\n    public override int Read(byte[] buffer, int offset, int count) { }\n    public override System.Threading.Tasks.ValueTask\u003cint\u003e ReadAsync(System.Memory\u003cbyte\u003e buffer, System.Threading.CancellationToken cancellationToken = default) { }\n    public override System.Threading.Tasks.Task\u003cint\u003e ReadAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken) { }\n    public override int ReadByte() { }\n    public override long Seek(long offset, System.IO.SeekOrigin origin) { }\n    public override void SetLength(long value) { }\n    public override void Write(System.ReadOnlySpan\u003cbyte\u003e buffer) { }\n    public override void Write(byte[] buffer, int offset, int count) { }\n    public override System.Threading.Tasks.ValueTask WriteAsync(System.ReadOnlyMemory\u003cbyte\u003e buffer, System.Threading.CancellationToken cancellationToken = default) { }\n    public override System.Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken) { }\n    public override void WriteByte(byte value) { }\n}\n```\n\n### API Usage\n\n### Request decompression in ASP.NET Core\n\n```csharp\nusing System.IO.Compression;\nusing Microsoft.AspNetCore.RequestDecompression;\n\nnamespace Example;\n\n// See: https://learn.microsoft.com/en-us/aspnet/core/fundamentals/middleware/request-decompression\n\nsealed class ZstandardDecompressionProvider : IDecompressionProvider\n{\n    public Stream GetDecompressionStream(Stream stream) =\u003e new ZstandardStream(stream, CompressionMode.Decompress, leaveOpen: true);\n}\n\n// Register in Program.cs\n// ...\nbuilder.Services.AddRequestDecompression(x =\u003e\n{\n    x.DecompressionProviders.Add(\"zstd\", new ZstandardDecompressionProvider());\n});\n// ...\n```\n\n### Response compression in ASP.NET Core\n\n```csharp\nusing System.IO.Compression;\nusing Microsoft.AspNetCore.ResponseCompression;\nusing Microsoft.Extensions.Options;\nusing Microsoft.Extensions.Options;\n\nnamespace Example;\n\n// See: https://learn.microsoft.com/en-us/aspnet/core/performance/response-compression\n\nsealed class ZstandardCompressionProviderOptions : IOptions\u003cZstandardCompressionProviderOptions\u003e\n{\n    public CompressionLevel Level { get; set; } = CompressionLevel.Fastest;\n\n    ZstandardCompressionProviderOptions IOptions\u003cZstandardCompressionProviderOptions\u003e.Value =\u003e this;\n}\n\nsealed class ZstandardCompressionProvider : ICompressionProvider\n{\n    public ZstandardCompressionProvider(IOptions\u003cZstandardCompressionProviderOptions\u003e options)\n    {\n        Options = options.Value;\n    }\n\n    private ZstandardCompressionProviderOptions Options { get; }\n\n    public Stream CreateStream(Stream outputStream) =\u003e new ZstandardStream(outputStream, Options.Level, leaveOpen: true);\n\n    public string EncodingName { get; } = \"zstd\";\n    public bool SupportsFlush { get; } = true;\n}\n\n// Register in Program.cs:\n// ...\nbuilder.Services.AddOptions\u003cZstandardCompressionProviderOptions\u003e()\n    .Configure(zstd =\u003e\n    {\n        zstd.Level = CompressionLevel.Optimal;\n    });\n\nbuilder.Services.AddResponseCompression(x =\u003e\n{\n    x.EnableForHttps = true;\n    x.Providers.Add\u003cZstandardCompressionProvider\u003e();\n});\n```\n\n### Low-level APIs\n\n```csharp\nbyte[] source = new byte[256000];\nRandom.Shared.NextBytes(source);\n\nint maxLength = ZstandardEncoder.GetMaxCompressedLength(source.Length);\nvar resultBuffer = new byte[maxLength];\n\nAssert.True(ZstandardEncoder.TryCompress(source, resultBuffer, out int bytesWritten));\nAssert.True(maxLength \u003e= bytesWritten);\n\nint decompressedLength = ZstandardDecoder.GetMaxDecompressedLength(resultBuffer.AsSpan(0, bytesWritten));\nvar decompressedBuffer = new byte[decompressedLength];\n\nAssert.True(ZstandardDecoder.TryDecompress(resultBuffer.AsSpan(0, bytesWritten), decompressedBuffer.AsSpan(), out var bytesDecompressed));\nAssert.True(decompressedBuffer.AsSpan(0, bytesDecompressed).SequenceEqual(source.AsSpan()));\n```\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_",
                                           "updatedAt":  "2025-05-22T16:30:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BdJjk",
                                           "createdAt":  "2025-09-02T14:39:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEgk2dg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "0xfeeddeadbeef",
                                                                               "createdAt":  "2025-09-02T22:25:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "rzikm",
                                           "body":  "\u003e Dictionary support (ROM\u003cbyte\u003e is useful for [pinning](https://learn.microsoft.com/en-us/dotnet/api/system.readonlymemory-1.pin), in order to load a dictionary by reference instead of copying it)\n\nLooking at the zstd implementation, I notice a couple of things:\n- comments mention that loading a dictionary from the array of bytes is an expensive operation, and if the same dictionary is to be used multiple times, creating a prepared dictionary should be prefered\n- the prepared dictionary for compression (ZSTD_CDict) accepts `compressionLevel` parameter during creation, which supersedes any other `compressionLevel` value set by other APIs\n- There is a possibility to use multiple dictionaries for decompression, but there is no such possibility for compression API (yet), there are only super-low-level functions which allow you to create content compressed with multiple dictionaries, but leave the decision which dict to use each frame to user so these are not suitable for us.\n\nI suggest we add ZStandardDictionary class to represent this prepared dictionary (I think we can use a single class to represent a CDict and DDict pair), and accept that instead of plain ROM\u003cbyte\u003e. We can also remove overloads that accept both a dictionary and compressionLevel, as the compression level from the dictionary will supersede the other parameter.",
                                           "updatedAt":  "2025-09-02T14:39:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BdNZV",
                                           "createdAt":  "2025-09-02T14:44:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEh5nbQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ptasev",
                                                                               "createdAt":  "2025-09-02T15:43:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "0xfeeddeadbeef",
                                                                               "createdAt":  "2025-09-02T22:25:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "exyi",
                                                                               "createdAt":  "2025-09-04T12:32:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "edwardneal",
                                                                               "createdAt":  "2025-09-10T20:12:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "manandre",
                                                                               "createdAt":  "2025-09-11T19:20:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "rzikm",
                                           "body":  "```cs\n\nnamespace System.IO.Compression;\n\npublic ZStandardDictionary : System.IDisposable\n{\n    public static ZStandardDictionary Create(System.ReadOnlyMemory\u003cbyte\u003e buffer);\n    public static ZStandardDictionary Create(System.ReadOnlyMemory\u003cbyte\u003e buffer, int quality);\n}\n\npublic struct ZStandardDecoder : System.IDisposable\n{\n    public ZStandardDecoder(ZStandardDictionary dictionary) { }\n    public System.Buffers.OperationStatus Decompress(System.ReadOnlySpan\u003cbyte\u003e source, System.Span\u003cbyte\u003e destination, out int bytesConsumed, out int bytesWritten) { }\n    public void Dispose() { }\n    public static int GetMaxDecompressedLength(System.ReadOnlySpan\u003cbyte\u003e data) { }\n    public static bool TryDecompress(System.ReadOnlySpan\u003cbyte\u003e source, System.Span\u003cbyte\u003e destination, out int bytesWritten) { }\n    public static bool TryDecompress(System.ReadOnlySpan\u003cbyte\u003e source, ZStandardDictionary dictionary, System.Span\u003cbyte\u003e destination, out int bytesWritten) { }\n}\n\npublic struct ZStandardEncoder : System.IDisposable\n{\n    public ZStandardEncoder(int quality, int window) { }\n    public ZStandardEncoder(ZStandardDictionary dictionary, int window) { }\n    public System.Buffers.OperationStatus Compress(System.ReadOnlySpan\u003cbyte\u003e source, System.Span\u003cbyte\u003e destination, out int bytesConsumed, out int bytesWritten, bool isFinalBlock) { }\n    public void Dispose() { }\n    public System.Buffers.OperationStatus Flush(System.Span\u003cbyte\u003e destination, out int bytesWritten) { }\n    public static int GetMaxCompressedLength(int inputSize) { }\n    public static bool TryCompress(System.ReadOnlySpan\u003cbyte\u003e source, System.Span\u003cbyte\u003e destination, out int bytesWritten) { }\n    public static bool TryCompress(System.ReadOnlySpan\u003cbyte\u003e source, System.Span\u003cbyte\u003e destination, out int bytesWritten, int quality, int window) { }\n    public static bool TryCompress(System.ReadOnlySpan\u003cbyte\u003e source, System.Span\u003cbyte\u003e destination, out int bytesWritten, ZStandardDictionary dictionary, int window) { }\n}\n\npublic sealed class ZStandardCompressionOptions\n{\n    public ZStandardCompressionOptions() { }\n    public ZStandardCompressionOptions(System.IO.Compression.CompressionLevel level) { }\n    public ZStandardCompressionOptions(ZStandardDictionary dictionary) { }\n    public ZStandardCompressionOptions(int quality) { }\n    public ZStandardDictionary Dictionary { get; }\n    public int Quality { get; }\n    public static int DefaultQuality { get; }\n    public static int MaxQuality { get; }\n    public static int MinQuality { get; }\n}\n\npublic sealed class ZStandardStream : System.IO.Stream\n{\n    public ZStandardStream(System.IO.Stream stream, System.IO.Compression.CompressionLevel compressionLevel) { }\n    public ZStandardStream(System.IO.Stream stream, System.IO.Compression.CompressionMode mode) { }\n    public ZStandardStream(System.IO.Stream stream, System.IO.Compression.CompressionLevel compressionLevel, bool leaveOpen) { }\n    public ZStandardStream(System.IO.Stream stream, System.IO.Compression.CompressionMode mode, bool leaveOpen) { }\n    public ZStandardStream(System.IO.Stream stream, System.IO.Compression.ZStandardCompressionOptions compressionOptions, bool leaveOpen = false) { }\n    public System.IO.Stream BaseStream { get; }\n    public override bool CanRead { get; }\n    public override bool CanSeek { get; }\n    public override bool CanWrite { get; }\n    public override long Length { get; }\n    public override long Position { get; set; }\n    public override System.IAsyncResult BeginRead(byte[] buffer, int offset, int count, System.AsyncCallback? callback, object? state) { }\n    public override System.IAsyncResult BeginWrite(byte[] buffer, int offset, int count, System.AsyncCallback? callback, object? state) { }\n    protected override void Dispose(bool disposing) { }\n    public override System.Threading.Tasks.ValueTask DisposeAsync() { }\n    public override int EndRead(System.IAsyncResult asyncResult) { }\n    public override void EndWrite(System.IAsyncResult asyncResult) { }\n    public override void Flush() { }\n    public override System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken cancellationToken) { }\n    public override int Read(System.Span\u003cbyte\u003e buffer) { }\n    public override int Read(byte[] buffer, int offset, int count) { }\n    public override System.Threading.Tasks.ValueTask\u003cint\u003e ReadAsync(System.Memory\u003cbyte\u003e buffer, System.Threading.CancellationToken cancellationToken = default) { }\n    public override System.Threading.Tasks.Task\u003cint\u003e ReadAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken) { }\n    public override int ReadByte() { }\n    public override long Seek(long offset, System.IO.SeekOrigin origin) { }\n    public override void SetLength(long value) { }\n    public override void Write(System.ReadOnlySpan\u003cbyte\u003e buffer) { }\n    public override void Write(byte[] buffer, int offset, int count) { }\n    public override System.Threading.Tasks.ValueTask WriteAsync(System.ReadOnlyMemory\u003cbyte\u003e buffer, System.Threading.CancellationToken cancellationToken = default) { }\n    public override System.Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken) { }\n    public override void WriteByte(byte value) { }\n}\n```",
                                           "updatedAt":  "2025-09-04T12:23:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7Bg6AG",
                                           "createdAt":  "2025-09-02T20:04:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEgph_A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jl0pd",
                                                                               "createdAt":  "2025-09-03T10:17:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "Is `ZstandardDictionary` needed when `ZstandardCompressionOptions` exists? Couldn\u0027t that just have a `ROS/ROM` constructor for the dictionary?",
                                           "updatedAt":  "2025-09-02T20:04:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DQciH",
                                           "createdAt":  "2025-09-10T17:29:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEh1OYQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rzikm",
                                                                               "createdAt":  "2025-09-11T12:09:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "edwardneal",
                                           "body":  "ZStandard also supports the ability to reset its session via `ZSTD_CCtx_reset`, and this has performance benefits. This might be useful for cases where we\u0027re performing many compressions of small objects (perhaps when dealing with short HTTP response streams.) It seems sensible to add an instance `Reset` method to `ZStandardEncoder` and `ZStandardDecoder` so that we can make use of that functionality.\n\nInstantiating a new `ZStandardStream` would currently mean starting a new ZStandard session every time though. Could we allow users to pass an existing `ZStandardEncoder` or `ZStandardDecoder` instance to a pair of new constructors on the stream, and have the stream reset those xxcoder instances instead of creating new ones?",
                                           "updatedAt":  "2025-09-10T17:29:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DSPmG",
                                           "createdAt":  "2025-09-10T20:04:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEiCraw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Mrgaton",
                                                                               "createdAt":  "2025-09-10T20:05:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dev-tony-hu",
                                                                               "createdAt":  "2025-09-11T03:56:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rzikm",
                                                                               "createdAt":  "2025-09-11T12:09:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "chrarnoldus",
                                                                               "createdAt":  "2025-09-12T14:20:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "EamonNerbonne",
                                           "body":  "The proposed API does not appear to have any methods allowing dictionary generation; merely one to allow dictionary usage.  The ability to automatically pick a useful dictionary based on sample data is a particularly useful tool in zstd - without it, dictionary compression is much more difficult to use well.  Is there a technical reason to omit that, given the underlying library already implements a dictionary builder?",
                                           "updatedAt":  "2025-09-10T20:04:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DjIe7",
                                           "createdAt":  "2025-09-11T13:40:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEiHp8A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ptasev",
                                                                               "createdAt":  "2025-09-12T05:00:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "EamonNerbonne",
                                                                               "createdAt":  "2025-09-12T14:18:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "edwardneal",
                                                                               "createdAt":  "2025-09-12T15:30:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "YohanSciubukgian",
                                                                               "createdAt":  "2025-09-13T06:39:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "rzikm",
                                           "body":  "\u003e Is `ZstandardDictionary` needed when `ZstandardCompressionOptions` exists? Couldn\u0027t that just have a `ROS/ROM` constructor for the dictionary?\n\nCompressionOptions are only for compression/encoding, there still needs to be a way to pass the dictionary to ZStandardStream for decoding (and when working on WIP I realize there wasn\u0027t one)\n\n\u003e ZStandard also supports the ability to reset its session via `ZSTD_CCtx_reset`, and this has performance benefits. This might be useful for cases where we\u0027re performing many compressions of small objects (perhaps when dealing with short HTTP response streams.) It seems sensible to add an instance Reset method to ZStandardEncoder and ZStandardDecoder so that we can make use of that functionality.\n\nSounds reasonable.\n\n\u003e Instantiating a new ZStandardStream would currently mean starting a new ZStandard session every time though. Could we allow users to pass an existing ZStandardEncoder or ZStandardDecoder instance to a pair of new constructors on the stream, and have the stream reset those xxcoder instances instead of creating new ones?\n\nThis needs a bit of thinking about the lifetime of the Encoder/Decoder (and who is resetting the state between usages)? Having ZStandardStream reset them instead of disposing sounds reasonable to me (at least I can\u0027t think of any traps)\n\n\u003e The proposed API does not appear to have any methods allowing dictionary generation;\n\nThis was brought up internally as well. Truth is `ZSTD_createCDict` tries to be smart and looks for a magic constant at the start of the dictionary -- which signalize pre-processed, dictionary -- and if it is missing, treats the data from which to synthesize it\u0027s dictionary (as if it were a prefix of the data to compress). What would be missing then is to be able to export this trained dictionary to avoid processing multiple times.\n\nMany of these shortcomings have become apparent while working on the WIP implementation. I will attemt to address all your feedback during next iterations.",
                                           "updatedAt":  "2025-09-11T13:40:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7EEMrY",
                                           "createdAt":  "2025-09-14T10:39:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEiPl2w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "EamonNerbonne",
                                                                               "createdAt":  "2025-09-15T08:38:33Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ANahr",
                                           "body":  "Is there any particular reason why this should be part of the dotnet runtime repository instead of just getting it\u0027s own repo (maybe even outside dotnet) and nuget package?",
                                           "updatedAt":  "2025-09-14T10:39:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7EEa2L",
                                           "createdAt":  "2025-09-14T12:12:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEiV6kQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gabynevada",
                                                                               "createdAt":  "2025-09-14T13:58:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rducom",
                                                                               "createdAt":  "2025-09-14T18:36:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "EamonNerbonne",
                                                                               "createdAt":  "2025-09-15T08:36:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "exyi",
                                                                               "createdAt":  "2025-09-15T18:04:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jodydonetti",
                                                                               "createdAt":  "2025-09-15T20:10:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "One thing to consider is whether other components within the base libraries would depend on it.\nFor example HttpClient\u0027s automatic decompression would use this functionality - https://github.com/dotnet/runtime/issues/112075. ",
                                           "updatedAt":  "2025-09-14T12:12:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7E1264",
                                           "createdAt":  "2025-09-17T10:58:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEiyxFw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jodydonetti",
                                                                               "createdAt":  "2025-09-17T11:02:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rducom",
                                                                               "createdAt":  "2025-09-17T14:00:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "guitarrapc",
                                                                               "createdAt":  "2025-09-17T16:30:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bgrainger",
                                                                               "createdAt":  "2025-09-17T22:38:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rzikm",
                                                                               "createdAt":  "2025-09-18T08:23:22Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "neuecc",
                                           "body":  "I\u0027m currently working on bindings for Zstandard (and LZ4).\n(I originally started this in 2022, but I\u0027ve been actively working on completing it recently)\nhttps://github.com/Cysharp/NativeCompressions\n\nIn terms of API, I\u0027m following the pattern of BrotliEncoder/Decoder, so it will probably end up being quite similar.\nI consider adding Dictionary support essential, and that might also be similar in style.\n\nHowever, since I want to support netstandard2.1 (we mainly do game development, so Unity support is essential) and want to provide more raw options (for example, multi-threading nbWorkers), it won\u0027t necessarily be exactly the same.\nIt would be nice if having a symmetric LZ4 API could also serve as a differentiator...\n\nBy the way, the official name for Zstandard is \"Zstandard\", not \"ZStandard\".\nSince it\u0027s a proper noun, I think `ZstandardEncoder` would be better than `ZStandardEncoder`.\n\nAlso, while making the Encoder/Decoder resettable would be the natural approach, using struct seems challenging for lifetime management.\nIf this could be made into a class, I don\u0027t think there would be any particular issues.\n\nIf we\u0027re wrapping the handle in SafeFileHandle anyway (which involves a class allocation), then maybe the Encoder/Decoder doesn\u0027t need to be a struct.",
                                           "updatedAt":  "2025-09-17T10:58:49Z"
                                       }
                                   ],
                         "totalCount":  33
                     },
        "title":  "Add support for Zstandard to System.IO.Compression",
        "labels":  [
                       "api-suggestion",
                       "area-System.IO.Compression"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/60164",
        "createdAt":  "2021-10-08T09:41:25Z",
        "number":  60164,
        "author":  "matkov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-10-09T02:17:13Z",
        "body":  "### Description\n\nlibSystem.IO.Compression.Native.so for Linux is missing dependency on libm.so.6. \r\n\r\nAnyone who tries to use any classes from the System.IO.Compression.dll assembly on Linux from Unmanaged application (by loading .NET assemblies via libhostfxr.so) will encounter this issue.\r\n\n\n### Reproduction Steps\n\nTo reproduce the issue, you may try the libSystem.IO.Compression.Native.so library using dlopen() from any console application that doesn\u0027t have libm.so.6 among its dependencies.\n\n### Expected behavior\n\nlibSystem.IO.Compression.Native.so is loaded successfully\n\n### Actual behavior\n\nError on libSystem.IO.Compression.Native.so loading\n\n### Regression?\n\nNo\n\n### Known Workarounds\n\nAs a workaround, we patched libSystem.IO.Compression.Native.so:\r\npatchelf --add-needed libm.so.6 libSystem.IO.Compression.Native.so\n\n### Configuration\n\nThis issue is present in .NET Core3.1, .NET 5 and .NET 6 Preview.\r\nUbuntu 16.04, 18.04, 20.04 \r\narchitecture x64\r\n\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Dependency on libm.so.6 is missing in libSystem.IO.Compression.Native.so",
        "labels":  [
                       "area-System.IO.Compression",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/61325",
        "createdAt":  "2021-11-08T19:11:14Z",
        "number":  61325,
        "author":  "aromaa",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-16T14:06:59Z",
        "body":  "### Description\r\n\r\nDeserializing JSON from DeflateStream/ZLibStream with inner stream of CryptoStream seems to cause the CryptoStream to call Flush on its inner stream while disposing. If the inner stream does not permit writes (we are only supposed to be reading from it!), it can lead to a exception to be thrown.\r\n\r\nThis is most likely related to the breaking changed around [partial and zero-byte reads in DeflateStream, GZipStream, and CryptoStream](https://docs.microsoft.com/en-us/dotnet/core/compatibility/core-libraries/6.0/partial-byte-reads-in-streams).\r\n\r\n### Reproduction Steps\r\n\r\n```csharp\r\nusing System;\r\nusing System.IO;\r\nusing System.IO.Compression;\r\nusing System.Security.Cryptography;\r\nusing System.Text.Json;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\n\r\nstatic async Task\u003cMemoryStream\u003e Serialize\u003cT\u003e(T test)\r\n{\r\n\tMemoryStream stream = new();\r\n\r\n\tusing ToBase64Transform base64Transformer = new();\r\n\tawait using CryptoStream cryptoStream = new(stream, base64Transformer, CryptoStreamMode.Write, leaveOpen: true);\r\n\tawait using DeflateStream deflate = new(cryptoStream, CompressionMode.Compress);\r\n\r\n\tawait JsonSerializer.SerializeAsync(deflate, test);\r\n\r\n\treturn stream;\r\n}\r\n\r\nstatic async Task\u003cT\u003e Deserialize\u003cT\u003e(Stream stream)\r\n{\r\n\tusing FromBase64Transform base64Transformer = new();\r\n\tawait using CryptoStream cryptoStream = new(stream, base64Transformer, CryptoStreamMode.Read, leaveOpen: true);\r\n\tawait using DeflateStream deflate = new(cryptoStream, CompressionMode.Decompress);\r\n\r\n\treturn await JsonSerializer.DeserializeAsync\u003cT\u003e(deflate);\r\n}\r\n\r\nMemoryStream json = await Serialize(\"Hello World!\");\r\nstring output = await Deserialize\u003cstring\u003e(new WrapperStream(json));\r\n\r\nConsole.WriteLine(output);\r\n\r\npublic sealed class WrapperStream : MemoryStream\r\n{\r\n\tpublic WrapperStream(MemoryStream stream) : base(stream.ToArray())\r\n\t{\r\n\t}\r\n\r\n\tpublic override void Flush() =\u003e throw new NotSupportedException();\r\n\tpublic override Task FlushAsync(CancellationToken cancellationToken) =\u003e throw new NotSupportedException();\r\n}\r\n```\r\n\r\n### Expected behavior\r\n\r\nThe code should run just fine and not call Flush.\r\n\r\n### Actual behavior\r\n\r\nThe code calls Flush and throws NotSupportedException.\r\n\r\n### Regression?\r\n\r\nRegression from .NET 5.\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\nRunning on .NET 6.\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOxKHDNg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc45baV4",
                                           "createdAt":  "2021-11-08T19:11:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nDeserializing JSON from DeflateStream/ZLibStream with inner stream of CryptoStream seems to cause the CryptoStream to call Flush on its inner stream while disposing. If the inner stream does not permit writes (we are only supposed to be reading from it!), it can lead to a exception to be thrown.\r\n\r\nThis is most likely related to the breaking changed around [partial and zero-byte reads in DeflateStream, GZipStream, and CryptoStream](https://docs.microsoft.com/en-us/dotnet/core/compatibility/core-libraries/6.0/partial-byte-reads-in-streams).\n\n### Reproduction Steps\n\n```csharp\r\nusing System;\r\nusing System.IO;\r\nusing System.IO.Compression;\r\nusing System.Security.Cryptography;\r\nusing System.Text.Json;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\n\r\nstatic async Task\u003cMemoryStream\u003e Serialize\u003cT\u003e(T test)\r\n{\r\n\tMemoryStream stream = new();\r\n\r\n\tusing ToBase64Transform base64Transformer = new();\r\n\tawait using CryptoStream cryptoStream = new(stream, base64Transformer, CryptoStreamMode.Write, leaveOpen: true);\r\n\tawait using DeflateStream deflate = new(cryptoStream, CompressionMode.Compress);\r\n\r\n\tawait JsonSerializer.SerializeAsync(deflate, test);\r\n\r\n\treturn stream;\r\n}\r\n\r\nstatic async Task\u003cT\u003e Deserialize\u003cT\u003e(Stream stream)\r\n{\r\n\tusing FromBase64Transform base64Transformer = new();\r\n\tawait using CryptoStream cryptoStream = new(stream, base64Transformer, CryptoStreamMode.Read, leaveOpen: true);\r\n\tawait using DeflateStream deflate = new(cryptoStream, CompressionMode.Decompress);\r\n\r\n\treturn await JsonSerializer.DeserializeAsync\u003cT\u003e(deflate);\r\n}\r\n\r\nMemoryStream json = await Serialize(\"Hello World!\");\r\nstring output = await Deserialize\u003cstring\u003e(new WrapperStream(json));\r\n\r\nConsole.WriteLine(output);\r\n```\n\n### Expected behavior\n\nThe code should run just fine and not call Flush.\n\n### Actual behavior\n\nThe code calls Flush and throws NotSupportedException.\n\n### Regression?\n\nRegression from .NET 5.\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nRunning on .NET 6.\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003earomaa\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.IO`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-11-08T19:11:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45bxQ5",
                                           "createdAt":  "2021-11-08T21:16:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @bartonjs, @vcsjones, @krwq, @GrabYourPitchForks\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nDeserializing JSON from DeflateStream/ZLibStream with inner stream of CryptoStream seems to cause the CryptoStream to call Flush on its inner stream while disposing. If the inner stream does not permit writes (we are only supposed to be reading from it!), it can lead to a exception to be thrown.\r\n\r\nThis is most likely related to the breaking changed around [partial and zero-byte reads in DeflateStream, GZipStream, and CryptoStream](https://docs.microsoft.com/en-us/dotnet/core/compatibility/core-libraries/6.0/partial-byte-reads-in-streams).\r\n\r\n### Reproduction Steps\r\n\r\n```csharp\r\nusing System;\r\nusing System.IO;\r\nusing System.IO.Compression;\r\nusing System.Security.Cryptography;\r\nusing System.Text.Json;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\n\r\nstatic async Task\u003cMemoryStream\u003e Serialize\u003cT\u003e(T test)\r\n{\r\n\tMemoryStream stream = new();\r\n\r\n\tusing ToBase64Transform base64Transformer = new();\r\n\tawait using CryptoStream cryptoStream = new(stream, base64Transformer, CryptoStreamMode.Write, leaveOpen: true);\r\n\tawait using DeflateStream deflate = new(cryptoStream, CompressionMode.Compress);\r\n\r\n\tawait JsonSerializer.SerializeAsync(deflate, test);\r\n\r\n\treturn stream;\r\n}\r\n\r\nstatic async Task\u003cT\u003e Deserialize\u003cT\u003e(Stream stream)\r\n{\r\n\tusing FromBase64Transform base64Transformer = new();\r\n\tawait using CryptoStream cryptoStream = new(stream, base64Transformer, CryptoStreamMode.Read, leaveOpen: true);\r\n\tawait using DeflateStream deflate = new(cryptoStream, CompressionMode.Decompress);\r\n\r\n\treturn await JsonSerializer.DeserializeAsync\u003cT\u003e(deflate);\r\n}\r\n\r\nMemoryStream json = await Serialize(\"Hello World!\");\r\nstring output = await Deserialize\u003cstring\u003e(new WrapperStream(json));\r\n\r\nConsole.WriteLine(output);\r\n\r\npublic sealed class WrapperStream : MemoryStream\r\n{\r\n\tpublic WrapperStream(MemoryStream stream) : base(stream.ToArray())\r\n\t{\r\n\t}\r\n\r\n\tpublic override void Flush() =\u003e throw new NotSupportedException();\r\n\tpublic override Task FlushAsync(CancellationToken cancellationToken) =\u003e throw new NotSupportedException();\r\n}\r\n```\r\n\r\n### Expected behavior\r\n\r\nThe code should run just fine and not call Flush.\r\n\r\n### Actual behavior\r\n\r\nThe code calls Flush and throws NotSupportedException.\r\n\r\n### Regression?\r\n\r\nRegression from .NET 5.\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\nRunning on .NET 6.\r\n\r\n### Other information\r\n\r\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003earomaa\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Security`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-11-08T21:16:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45dn2x",
                                           "createdAt":  "2021-11-09T11:33:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GSPP",
                                           "body":  "Why is flush being called at all? Flushing is an expensive operation that is not automatically required. Normally, flushing should be initiated by application code. Only the application knows how to correctly orchestrate stream flushing.",
                                           "updatedAt":  "2021-11-09T11:33:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45ecYI",
                                           "createdAt":  "2021-11-09T15:52:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "Stream.Flush{Async} is expected to nop even when a stream has been used only for reads.  From the docs:\r\nhttps://docs.microsoft.com/en-us/dotnet/api/system.io.stream.flush?view=net-5.0#remarks\r\n\"In a class derived from Stream that doesn\u0027t support writing, Flush is typically implemented as an empty method to ensure full compatibility with other Stream types since it\u0027s valid to flush a read-only stream.\"\r\n\r\nThis also isn\u0027t a regression in CryptoStream or DeflateStream.  You can see, for example, this throws the same NotSupportedException on both .NET 5 and .NET Framework 4.8:\r\n```C#\r\nusing System;\r\nusing System.IO;\r\nusing System.IO.Compression;\r\nusing System.Security.Cryptography;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\n\r\ninternal class Program\r\n{\r\n    static void Main()\r\n    {\r\n        using (var base64Transformer = new FromBase64Transform())\r\n        using (var cryptoStream = new CryptoStream(new WrapperStream(new MemoryStream()), base64Transformer, CryptoStreamMode.Read, leaveOpen: true))\r\n        using (var deflate = new DeflateStream(cryptoStream, CompressionMode.Decompress))\r\n        {\r\n        }\r\n    }\r\n\r\n    public sealed class WrapperStream : MemoryStream\r\n    {\r\n        public WrapperStream(MemoryStream stream) : base(stream.ToArray()) { }\r\n        public override void Flush() =\u003e throw new NotSupportedException();\r\n        public override Task FlushAsync(CancellationToken cancellationToken) =\u003e throw new NotSupportedException();\r\n    }\r\n}\r\n```\r\n\r\nI believe what\u0027s different here in your example between .NET 5 and .NET 6 is that in .NET 5 JsonSerializer.DeserializeAsync was reading until EOF whereas in .NET 6 it doesn\u0027t appear to be doing so.  When it reads until EOF, that causes CryptoStream.Dispose to not follow the code path that flushes, but if it hasn\u0027t read until EOF, CryptoStream.Dispose will (and always has) flush.  You can see that by running this tweak to your repro... this outputs True on .NET 5 but False on .NET 6:\r\n```C#\r\nusing System.IO.Compression;\r\nusing System.Security.Cryptography;\r\nusing System.Text.Json;\r\n\r\nstatic async Task\u003cMemoryStream\u003e Serialize\u003cT\u003e(T test)\r\n{\r\n    MemoryStream stream = new();\r\n    using ToBase64Transform base64Transformer = new();\r\n    await using CryptoStream cryptoStream = new(stream, base64Transformer, CryptoStreamMode.Write, leaveOpen: true);\r\n    await using DeflateStream deflate = new(cryptoStream, CompressionMode.Compress);\r\n    await JsonSerializer.SerializeAsync(deflate, test);\r\n    return stream;\r\n}\r\n\r\nstatic async Task\u003cT\u003e Deserialize\u003cT\u003e(Stream stream)\r\n{\r\n    using FromBase64Transform base64Transformer = new();\r\n    using CryptoStream cryptoStream = new(stream, base64Transformer, CryptoStreamMode.Read, leaveOpen: true);\r\n    using DeflateStream deflate = new(cryptoStream, CompressionMode.Decompress);\r\n    return await JsonSerializer.DeserializeAsync\u003cT\u003e(deflate);\r\n}\r\n\r\nvar s = new TrackingStream(await Serialize(\"Hello World!\"));\r\nawait Deserialize\u003cstring\u003e(s);\r\nConsole.WriteLine(s.ReadToEof);\r\n\r\nclass TrackingStream : MemoryStream\r\n{\r\n    public bool ReadToEof;\r\n\r\n    public TrackingStream(MemoryStream stream) : base(stream.ToArray()) { }\r\n\r\n    public override async ValueTask\u003cint\u003e ReadAsync(Memory\u003cbyte\u003e buffer, CancellationToken cancellationToken = default)\r\n    {\r\n        int r = await base.ReadAsync(buffer, cancellationToken);\r\n        if (r == 0) ReadToEof = true;\r\n        return r;\r\n    }\r\n}\r\n```\r\n\r\ncc: @dotnet/area-system-text-json for comment on whether that change in reading is by design",
                                           "updatedAt":  "2021-11-09T15:54:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45ecbo",
                                           "createdAt":  "2021-11-09T15:52:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-json\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nDeserializing JSON from DeflateStream/ZLibStream with inner stream of CryptoStream seems to cause the CryptoStream to call Flush on its inner stream while disposing. If the inner stream does not permit writes (we are only supposed to be reading from it!), it can lead to a exception to be thrown.\r\n\r\nThis is most likely related to the breaking changed around [partial and zero-byte reads in DeflateStream, GZipStream, and CryptoStream](https://docs.microsoft.com/en-us/dotnet/core/compatibility/core-libraries/6.0/partial-byte-reads-in-streams).\r\n\r\n### Reproduction Steps\r\n\r\n```csharp\r\nusing System;\r\nusing System.IO;\r\nusing System.IO.Compression;\r\nusing System.Security.Cryptography;\r\nusing System.Text.Json;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\n\r\nstatic async Task\u003cMemoryStream\u003e Serialize\u003cT\u003e(T test)\r\n{\r\n\tMemoryStream stream = new();\r\n\r\n\tusing ToBase64Transform base64Transformer = new();\r\n\tawait using CryptoStream cryptoStream = new(stream, base64Transformer, CryptoStreamMode.Write, leaveOpen: true);\r\n\tawait using DeflateStream deflate = new(cryptoStream, CompressionMode.Compress);\r\n\r\n\tawait JsonSerializer.SerializeAsync(deflate, test);\r\n\r\n\treturn stream;\r\n}\r\n\r\nstatic async Task\u003cT\u003e Deserialize\u003cT\u003e(Stream stream)\r\n{\r\n\tusing FromBase64Transform base64Transformer = new();\r\n\tawait using CryptoStream cryptoStream = new(stream, base64Transformer, CryptoStreamMode.Read, leaveOpen: true);\r\n\tawait using DeflateStream deflate = new(cryptoStream, CompressionMode.Decompress);\r\n\r\n\treturn await JsonSerializer.DeserializeAsync\u003cT\u003e(deflate);\r\n}\r\n\r\nMemoryStream json = await Serialize(\"Hello World!\");\r\nstring output = await Deserialize\u003cstring\u003e(new WrapperStream(json));\r\n\r\nConsole.WriteLine(output);\r\n\r\npublic sealed class WrapperStream : MemoryStream\r\n{\r\n\tpublic WrapperStream(MemoryStream stream) : base(stream.ToArray())\r\n\t{\r\n\t}\r\n\r\n\tpublic override void Flush() =\u003e throw new NotSupportedException();\r\n\tpublic override Task FlushAsync(CancellationToken cancellationToken) =\u003e throw new NotSupportedException();\r\n}\r\n```\r\n\r\n### Expected behavior\r\n\r\nThe code should run just fine and not call Flush.\r\n\r\n### Actual behavior\r\n\r\nThe code calls Flush and throws NotSupportedException.\r\n\r\n### Regression?\r\n\r\nRegression from .NET 5.\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\nRunning on .NET 6.\r\n\r\n### Other information\r\n\r\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003earomaa\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.Json`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-11-09T15:52:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45haXH",
                                           "createdAt":  "2021-11-10T11:55:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "@stephentoub I ran your reproduction on the debugger, and it seems that it\u0027s an issue with `DeflateStream`. System.Text.Json will read the outer stream to EOF however [DeflateStream does not](https://github.com/dotnet/runtime/blob/e64cce6fbbde72d1ea61010bd08f11ba7b51afc9/src/libraries/System.IO.Compression/src/System/IO/Compression/DeflateZLib/DeflateStream.cs#L274). Likely introduced by #53644.\r\n\r\nHere\u0027s a reproduction demonstrating that this is the case:\r\n```C#\r\nusing System;\r\nusing System.IO;\r\nusing System.IO.Compression;\r\nusing System.Security.Cryptography;\r\nusing System.Text.Json;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\n\r\nvar memoryStream = new InstrumentedMemoryStream(await Serialize(\"x\"));\r\nmemoryStream.Position = 0;\r\n(InstrumentedDeflateStream deflateStream, _) = await Deserialize\u003cstring\u003e(memoryStream);\r\nConsole.WriteLine($\"{memoryStream.ReadToEof}, {deflateStream.ReadToEof}\"); // False, True\r\n\r\nstatic async Task\u003cMemoryStream\u003e Serialize\u003cT\u003e(T test)\r\n{\r\n    MemoryStream stream = new();\r\n    using ToBase64Transform base64Transformer = new();\r\n    await using CryptoStream cryptoStream = new(stream, base64Transformer, CryptoStreamMode.Write, leaveOpen: true);\r\n    await using DeflateStream deflate = new(cryptoStream, CompressionMode.Compress);\r\n    await JsonSerializer.SerializeAsync(deflate, test);\r\n    return stream;\r\n}\r\n\r\nstatic async Task\u003c(InstrumentedDeflateStream, T?)\u003e Deserialize\u003cT\u003e(Stream stream)\r\n{\r\n    using FromBase64Transform base64Transformer = new();\r\n    using CryptoStream cryptoStream = new(stream, base64Transformer, CryptoStreamMode.Read, leaveOpen: true);\r\n    using InstrumentedDeflateStream deflate = new(cryptoStream, CompressionMode.Decompress);\r\n    var result = await JsonSerializer.DeserializeAsync\u003cT\u003e(deflate);\r\n    return (deflate, result);\r\n}\r\n\r\nclass InstrumentedMemoryStream : MemoryStream\r\n{\r\n    public bool ReadToEof;\r\n\r\n    public InstrumentedMemoryStream(MemoryStream stream) : base(stream.ToArray()) { }\r\n\r\n    public override async ValueTask\u003cint\u003e ReadAsync(Memory\u003cbyte\u003e buffer, CancellationToken cancellationToken = default)\r\n    {\r\n        int r = await base.ReadAsync(buffer, cancellationToken);\r\n        if (r == 0) ReadToEof = true;\r\n        return r;\r\n    }\r\n}\r\n\r\nclass InstrumentedDeflateStream : DeflateStream\r\n{\r\n    public bool ReadToEof;\r\n\r\n    public InstrumentedDeflateStream(Stream stream, CompressionMode mode) : base(stream, mode) { }\r\n\r\n    public override async ValueTask\u003cint\u003e ReadAsync(Memory\u003cbyte\u003e buffer, CancellationToken cancellationToken = default)\r\n    {\r\n        int r = await base.ReadAsync(buffer, cancellationToken);\r\n        if (r == 0) ReadToEof = true;\r\n        return r;\r\n    }\r\n}\r\n```",
                                           "updatedAt":  "2021-11-10T11:55:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45haaL",
                                           "createdAt":  "2021-11-10T11:56:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io-compression\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nDeserializing JSON from DeflateStream/ZLibStream with inner stream of CryptoStream seems to cause the CryptoStream to call Flush on its inner stream while disposing. If the inner stream does not permit writes (we are only supposed to be reading from it!), it can lead to a exception to be thrown.\r\n\r\nThis is most likely related to the breaking changed around [partial and zero-byte reads in DeflateStream, GZipStream, and CryptoStream](https://docs.microsoft.com/en-us/dotnet/core/compatibility/core-libraries/6.0/partial-byte-reads-in-streams).\r\n\r\n### Reproduction Steps\r\n\r\n```csharp\r\nusing System;\r\nusing System.IO;\r\nusing System.IO.Compression;\r\nusing System.Security.Cryptography;\r\nusing System.Text.Json;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\n\r\nstatic async Task\u003cMemoryStream\u003e Serialize\u003cT\u003e(T test)\r\n{\r\n\tMemoryStream stream = new();\r\n\r\n\tusing ToBase64Transform base64Transformer = new();\r\n\tawait using CryptoStream cryptoStream = new(stream, base64Transformer, CryptoStreamMode.Write, leaveOpen: true);\r\n\tawait using DeflateStream deflate = new(cryptoStream, CompressionMode.Compress);\r\n\r\n\tawait JsonSerializer.SerializeAsync(deflate, test);\r\n\r\n\treturn stream;\r\n}\r\n\r\nstatic async Task\u003cT\u003e Deserialize\u003cT\u003e(Stream stream)\r\n{\r\n\tusing FromBase64Transform base64Transformer = new();\r\n\tawait using CryptoStream cryptoStream = new(stream, base64Transformer, CryptoStreamMode.Read, leaveOpen: true);\r\n\tawait using DeflateStream deflate = new(cryptoStream, CompressionMode.Decompress);\r\n\r\n\treturn await JsonSerializer.DeserializeAsync\u003cT\u003e(deflate);\r\n}\r\n\r\nMemoryStream json = await Serialize(\"Hello World!\");\r\nstring output = await Deserialize\u003cstring\u003e(new WrapperStream(json));\r\n\r\nConsole.WriteLine(output);\r\n\r\npublic sealed class WrapperStream : MemoryStream\r\n{\r\n\tpublic WrapperStream(MemoryStream stream) : base(stream.ToArray())\r\n\t{\r\n\t}\r\n\r\n\tpublic override void Flush() =\u003e throw new NotSupportedException();\r\n\tpublic override Task FlushAsync(CancellationToken cancellationToken) =\u003e throw new NotSupportedException();\r\n}\r\n```\r\n\r\n### Expected behavior\r\n\r\nThe code should run just fine and not call Flush.\r\n\r\n### Actual behavior\r\n\r\nThe code calls Flush and throws NotSupportedException.\r\n\r\n### Regression?\r\n\r\nRegression from .NET 5.\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\nRunning on .NET 6.\r\n\r\n### Other information\r\n\r\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003earomaa\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.IO.Compression`, `area-System.Text.Json`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-11-10T11:56:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7EoNQh",
                                           "createdAt":  "2025-09-16T13:51:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "iremyux",
                                           "body":  "Hello @aromaa , \nSince the `flush` call isn’t a bug and is expected for read-only streams, is there really anything left to address here? I don’t see a problem in the original issue description.\n\nRegarding the EOF behavior, I do notice it changed, but I’m not sure it requires any fix. If no one objects, I’ll proceed to close the issue, please share your thoughts if you object.\n",
                                           "updatedAt":  "2025-09-16T13:51:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7EocM2",
                                           "createdAt":  "2025-09-16T14:06:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aromaa",
                                           "body":  "I don\u0027t mind closing this issue, I have since contributed the fix to the 3th party library to correct their behavior to match the documentation where I originally hit this corner case.\n\nI have only left this open so the correct area owner can judge whatever the EOF changes are a bug or not. Presumably a new issue should be created if anyone hits this case, given that this behavior change has persisted multiple releases now.",
                                           "updatedAt":  "2025-09-16T14:06:59Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "CryptoStream calling flush when only reads have been performed",
        "labels":  [
                       "area-System.IO.Compression",
                       "in-pr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/62113",
        "createdAt":  "2021-11-28T16:21:06Z",
        "number":  62113,
        "author":  "AraHaan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODFCWrQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GSPP",
                                            "createdAt":  "2021-12-26T13:36:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "grbell-ms",
                                            "createdAt":  "2022-01-20T22:35:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2022-03-08T18:45:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AraHaan",
                                            "createdAt":  "2022-03-20T19:20:17Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2022-03-25T09:26:47Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "AraHaan",
                                            "createdAt":  "2022-09-10T19:25:49Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2024-03-13T00:50:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KeterSCP",
                                            "createdAt":  "2025-05-15T15:33:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jasper-d",
                                            "createdAt":  "2025-06-27T23:21:45Z"
                                        }
                                    ],
                          "totalCount":  9
                      },
        "updatedAt":  "2025-08-15T15:45:23Z",
        "body":  "### Background and motivation\r\n\r\nCurrently there is no non-stream based apis to zlib compression. As such I feel like an encoder / decoder implementation is needed similar to the Brotli implementation.\r\n\r\nThe brotli implementation also uses the encoder / decoder internally in the streams, which can help make the implementations of the zlib based streams (GZipStream, DeflateStream, and ZLibStream) better.\r\n\r\nA single ZlibEncoder and ZlibDecoder that takes a class of values (ZlibOptions), where ZlibOptions also has subclasses named DeflateOptions, and GZipOptions where only the window bits are different.\r\n\r\nThis issue partially addresses:\r\n- https://github.com/dotnet/runtime/issues/42820\r\n  - prerequisite of this is: https://github.com/dotnet/runtime/issues/42820#issuecomment-980830626 (Comment to the above issue)\r\n\r\nImplementing this issue *should* also resolve this one as well:\r\n- https://github.com/dotnet/runtime/issues/39327\r\n\r\nI currently have a baseline implementation locally of this ~~(except for the stream changes that would need to be done),~~ and it *should* be ready by the time .NET 7 goes into an api freeze (until .NET 8\u0027s development starts).\r\n\r\n### API Proposal\r\n\r\n```C#\r\nnamespace System.Buffers\r\n{\r\n    public enum OperationStatus\r\n    {\r\n        Error = 4,\r\n    }\r\n}\r\nnamespace System.IO.Compression\r\n{\r\n    public sealed class ZlibResult : System.IDisposable\r\n    {\r\n        public ZlibResult() { }\r\n        public bool IsDisposed { get { throw null; } }\r\n        public int LastBytesWritten { get { throw null; } }\r\n        public int LastBytesRead { get { throw null; } }\r\n        public int TotalBytesWritten { get { throw null; } }\r\n        public int TotalBytesRead { get { throw null; } }\r\n        public System.Buffers.OperationStatus Status { get { throw null; } }\r\n        public void Dispose() { throw null; }\r\n    }\r\n    public class ZlibEncoder\r\n    {\r\n        public ZlibEncoder() { }\r\n        public ZlibOptions? Options { get { throw null; } set { throw null; } }\r\n        public bool TryCompress(ref ZlibResult zlibResult, ReadOnlySpan\u003cbyte\u003e source, Span\u003cbyte\u003e dest) { throw null; }\r\n        public void Compress(ref ZlibResult zlibResult, ReadOnlySpan\u003cbyte\u003e source, Span\u003cbyte\u003e dest) { throw null; }\r\n#pragma warning disable CS3002 // Return type is not CLS-compliant\r\n        public uint CalculateChecksum(ReadOnlySpan\u003cbyte\u003e source) { throw null; }\r\n#pragma warning restore CS3002 // Return type is not CLS-compliant\r\n    }\r\n    public class ZlibDecoder\r\n    {\r\n        public ZlibDecoder() { }\r\n        public ZlibOptions? Options { get { throw null; } set { throw null; } }\r\n        public bool TryDecompress(ref ZlibResult zlibResult, ReadOnlySpan\u003cbyte\u003e source, Span\u003cbyte\u003e dest) { throw null; }\r\n        public void Decompress(ref ZlibResult zlibResult, ReadOnlySpan\u003cbyte\u003e source, Span\u003cbyte\u003e dest) { throw null; }\r\n#pragma warning disable CS3002 // Return type is not CLS-compliant\r\n        public uint CalculateChecksum(ReadOnlySpan\u003cbyte\u003e source) { throw null; }\r\n#pragma warning restore CS3002 // Return type is not CLS-compliant\r\n    }\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\n```C#\r\n// allocate source and dest arrays.\r\nvar zlibEncoder = new ZlibEncoder()\r\n{\r\n    Options = new ZlibOptions(ZlibCompressionLevel.Level5),\r\n};\r\nuint adler = zlibEncoder.CalculateChecksum(source);\r\nusing var zlibResult = new ZlibResult();\r\nbool result = zlibEncoder.TryCompress(ref zlibResult, source, dest);\r\nif (!result)\r\n{\r\n    Console.WriteLine(\"Compression failed.\");\r\n}\r\nelse\r\n{\r\n    Console.WriteLine($\"Adler-32: {adler}, Bytes Compressed: {zlibResult.LastBytesWritten}.\");\r\n}\r\n\r\n// allocate new source array to compare against the original one.\r\nvar zlibDecoder = new ZlibDecoder()\r\n{\r\n    Options = new ZlibOptions(),\r\n};\r\nusing var zlibResult2 = new ZlibResult();\r\nresult = zlibDecoder.TryDecompress(ref zlibResult2, dest, decSource);\r\nuint adler2 = zlibDecoder.CalculateChecksum(decSource);\r\nif (!result)\r\n{\r\n    Console.WriteLine(\"Decompression failed.\");\r\n}\r\nelse\r\n{\r\n    Console.WriteLine($\"Adler-32: {adler2}, Bytes Decompressed: {zlibResult2.LastBytesWritten}.\");\r\n}\r\n\r\nif (adler.Equals(adler2))\r\n{\r\n    Console.WriteLine(\"Decompressed contents verified to be correct.\");\r\n}\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\n~~I wanted to use the System.Buffers.OperationStatus enum, but I felt it lacked enough members to denote the zlib specific status codes (where they would be used for zlib, deflate, and gzip compression / decompression).~~ Likewise adler32\u0027s and the total_out member from zlib are represented as unsigned, I do not know if I should have the encoder / decoder output signed, or leave them unsigned and keep the CLS-Compliancy issues suppressed from it.\r\n\r\n### Risks\r\n\r\nMinimal\r\n\r\n### Changelog\r\n\r\n- Replaced ZlibOperationStatus with System.Buffers.OperationStatus.\r\n- Removed adler32 unsigned output parameter from (Try)Compress and (Try)Decompress and moved it to a separate ``CalculateChecksum`` method.\r\n- Removed ``bytesWritten`` unsigned output parameter from (Try)Compress and (Try)Decompress and moved it to a property that stores the last amount of bytes written by (Try)Compress and (Try)Decompress.\r\n- added public Options property that can get and change the options entirely in the encoder/decoder instance.\r\n- changed from structs to classes due to an issue with compiling.\r\n- Change LastBytesWritten in Encoder and Decoder from ``uint`` to ``int``.\r\n- Removed all properties in Encoder and Decoder except for the options property.\r\n- Added ZlibResult type that can be used with both Encoder and Decoder.\r\n- Remove Disposable interface on both Encoder and Decoder and make the ZlibResult type Disposable.\r\n- Modify TryDecompress/TryCompress to accept in an reference to the ZlibResult type that it will use for compressing or decompressing.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhMsz4A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc46epao",
                                           "createdAt":  "2021-11-28T16:21:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io-compression\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nCurrently there is no non-stream based apis to zlib compression. As such I feel like an encoder / decoder implementation is needed similar to the Brotli implementation.\r\n\r\nThe brotli implementation also uses the encoder / decoder internally in the streams, which can help make the implementations of the zlib based streams (GZipStream, DeflateStream, and ZLibStream) better.\r\n\r\nA single ZlibEncoder and ZlibDecoder that takes a class of values (ZlibOptions), where ZlibOptions also has subclasses named DeflateOptions, and GZipOptions where only the window bits are different.\r\n\r\nDependency issues that will need to be addressed before this:\r\nhttps://github.com/dotnet/runtime/issues/42820\r\n\r\nImplementing this issue *should* also resolve this one as well:\r\nhttps://github.com/dotnet/runtime/issues/39327\r\n\r\nI currently have a baseline implementation locally of this (except for the stream changes that would need to be done), and it *should* be ready by the time .NET 7 goes into an api freeze (until .NET 8\u0027s development starts).\n\n### API Proposal\n\n```C#\r\n    public enum ZlibOperationStatus\r\n    {\r\n        VersionError = -6,\r\n        BufError,\r\n        MemError,\r\n        DataError,\r\n        StreamError,\r\n        ErrorNo,\r\n        Ok,\r\n        Done = Ok,\r\n        StreamEnd,\r\n        NeedDictionary,\r\n        DestinationTooSmall,\r\n        OperationNotCompression,\r\n        OperationNotDecompression,\r\n        Disposed,\r\n    }\r\n    public struct ZlibEncoder : System.IDisposable\r\n    {\r\n        public ZlibEncoder(ZlibOptions options) { }\r\n        public bool IsDisposed { get { throw null; } }\r\n        public void Dispose() { throw null; }\r\n#pragma warning disable CS3001 // Argument type is not CLS-compliant\r\n        public bool TryCompress(System.ReadOnlySpan\u003cbyte\u003e source, System.Span\u003cbyte\u003e dest, out uint adler32, out uint bytesWritten) { throw null; }\r\n#pragma warning restore CS3001 // Argument type is not CLS-compliant\r\n#pragma warning disable CS3001 // Argument type is not CLS-compliant\r\n        public ZlibOperationStatus Compress(System.ReadOnlySpan\u003cbyte\u003e source, System.Span\u003cbyte\u003e dest, out uint adler32, out uint bytesWritten) { throw null; }\r\n#pragma warning restore CS3001 // Argument type is not CLS-compliant\r\n    }\r\n    public struct ZlibDecoder : System.IDisposable\r\n    {\r\n        public ZlibDecoder(ZlibOptions options) { }\r\n        public bool IsDisposed { get { throw null; } }\r\n        public void Dispose() { throw null; }\r\n#pragma warning disable CS3001 // Argument type is not CLS-compliant\r\n        public bool TryDecompress(ReadOnlySpan\u003cbyte\u003e source, Span\u003cbyte\u003e dest, out uint adler32, out uint bytesWritten, out uint avail) { throw null; }\r\n#pragma warning restore CS3001 // Argument type is not CLS-compliant\r\n#pragma warning disable CS3001 // Argument type is not CLS-compliant\r\n        public ZlibOperationStatus Decompress(ReadOnlySpan\u003cbyte\u003e source, Span\u003cbyte\u003e dest, out uint adler32, out uint bytesWritten, out uint avail) { throw null; }\r\n#pragma warning restore CS3001 // Argument type is not CLS-compliant\r\n    }\r\n```\r\n\n\n### API Usage\n\n```C#\r\n// allocate source and dest arrays.\r\nusing var zlibEncoder = new ZlibEncoder(new ZlibOptions(ZlibCompressionLevel.Level5));\r\nbool result = zlibEncoder.TryCompress(source, dest, out uint adler, out uint bytesWritten);\r\nif (!result)\r\n{\r\n    Console.WriteLine(\"Compression failed.\");\r\n}\r\nelse\r\n{\r\n    Console.WriteLine($\"Adler-32: {adler}, Bytes Compressed: {bytesWritten}.\");\r\n}\r\n\r\n// allocate new source array to compare against the original one.\r\nusing var zlibDecoder = new ZlibDecoder(new ZlibOptions());\r\nresult = zlibDecoder.TryDecompress(dest, decSource, out adler, out bytesWritten, out uint avail);\r\nif (!result)\r\n{\r\n    Console.WriteLine(\"Decompression failed.\");\r\n}\r\nelse\r\n{\r\n    Console.WriteLine($\"Adler-32: {adler}, Bytes Decompressed: {bytesWritten}, Available: {avail}.\");\r\n}\r\n```\r\n\n\n### Alternative Designs\n\nI wanted to use the System.Buffers.OperationStatus enum, but I felt it lacked enough members to denote the zlib specific status codes (where they would be used for zlib, deflate, and gzip compression / decompression). Likewise adler32\u0027s and the total_out member from zlib are represented as unsigned, I do not know if I should have the encoder / decoder output signed, or leave them unsigned and keepthe CLS-Compliancy issues suppressed from it.\n\n### Risks\n\nMinimal\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eAraHaan\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.IO.Compression`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-11-28T16:21:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46ho1c",
                                           "createdAt":  "2021-11-29T18:22:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AraHaan",
                                           "body":  "I have modified the proposal somewhat to add a few things I missed to ensure that TryDecompress will never throw or get exceptions that it would need to catch.",
                                           "updatedAt":  "2021-11-29T18:22:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46htty",
                                           "createdAt":  "2021-11-29T18:50:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "carlossanlop",
                                           "body":  "@AraHaan thank you so much for the detailed proposal.\r\n\r\nThis proposal would partially address both https://github.com/dotnet/runtime/issues/42820 and https://github.com/dotnet/runtime/issues/39327 . I don\u0027t think this PR depends on the first one, we can consider that one the _\"uber issue\"_, because it was attempting to address the same you\u0027re addressing, but for all compression stream classes.\r\n\r\nI see you added your own ZLib-specific operation status enums. Contrary to `BrotliDecoder`/`BrotliEncoder`, which reused `System.Buffers.OperationStatus`: https://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/libraries/System.Private.CoreLib/src/System/Buffers/OperationStatus.cs#L10\r\n\r\nSome feedback on the new enum values:\r\n\r\n- `Ok` and `Done` seem redundant. We should simply keep `Done`, just like `OperationStatus.Done`.\r\n- `DestinationTooSmall` seems fine. It\u0027s aligned to `OperationStatus.DestinationTooSmall` already.\r\n- I\u0027m not sure we need `OperationNotCompression`, `OperationNotDecompression`, `Disposed`, `InitError`, `ErrorNo`. Shouldn\u0027t those throw instead?\r\n- What does `VersionError` mean?\r\n- `DataError`, `StreamEnd`, `StreamError`, `BufError`, `MemError`,  `NeedDictionary`, could be aligned to `OperationStatus.InvalidData`.\r\n- I think `DataError` could be `OperationStatus.NeedMoreData`.\r\n\r\nWhat\u0027s preventing us from just reusing `OperationStatus`?",
                                           "updatedAt":  "2021-11-29T18:50:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46iJh0",
                                           "createdAt":  "2021-11-29T21:16:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AraHaan",
                                           "body":  "\u003e I\u0027m not sure we need OperationNotCompression, OperationNotDecompression, Disposed, InitError, ErrorNo. Shouldn\u0027t those throw instead?\r\n\r\n~~We would need these for ``TryDecompress`` / ``TryCompress`` where it would be expansive to throw and then \"catch\" the exception within the ``Try`` version.\r\nVersionError is an zlib error code for when the expected zlib version and the runtime zlib version does not match (on the major version I think).~~\r\n\r\nI guess OperationStatus could add an generic ``Error`` onto it at the end of it for these above (see edited proposal above).\r\n\r\nAccording to the Manual DataError is for when \"inflate detects an error in the zlib compressed data format, which means that either the data is not a zlib stream to begin with, or that the data was corrupted somewhere along the way since it was compressed.\"\r\n\r\nAlso in that manual StreamEnd is returned when inflate/deflate is at the end of the zlib/deflate/gzip stream.\r\n\r\nhttps://zlib.net/zlib_how.html is where I get some of the details as well too.\r\n\r\nAs for BufError, that might fall under ``NeedMoreData``.\r\n\r\nEdit: I have also removed ZlibOperationStatus with a minor change to System.Buffers.OperationStatus.\r\n\r\ncc: @carlossanlop I think this might just now be ready for review (hopefully).",
                                           "updatedAt":  "2021-12-11T06:52:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49kGjC",
                                           "createdAt":  "2022-02-08T17:29:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AraHaan",
                                           "body":  "cc: @dotnet/area-system-io-compression I think this is ready for review.",
                                           "updatedAt":  "2022-02-08T17:29:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-Kykj",
                                           "createdAt":  "2022-02-17T14:36:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AraHaan",
                                           "body":  "Anything else stalling this?",
                                           "updatedAt":  "2022-02-17T14:36:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BSLHc",
                                           "createdAt":  "2022-04-11T16:36:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCsAfYw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wegylexy",
                                                                               "createdAt":  "2022-05-23T08:59:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AraHaan",
                                                                               "createdAt":  "2022-09-10T19:25:55Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "rhuijben",
                                           "body":  "I would like to see some way how many bytes of the original source were read to generate the output, to allow the next decompress to continue right there. Currently the implementation only shows the output buffer results, while the input buffer is just as useful.\r\n\r\nThis is especially so in case some other information (e.g. not compressed) is written right after the zlib data, such as within Git package files.\r\nThe current implementation is nice if you have some outer frame handling that handles/hides overreading input for you, but the zlib streaming was designed to do the framing for you.",
                                           "updatedAt":  "2022-04-11T16:36:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BShci",
                                           "createdAt":  "2022-04-11T18:08:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AraHaan",
                                           "body":  "I think that can be accessed with the ``LastBytesWritten`` property (I think it gets changed on every pass).\r\n\r\nHowever I do agree with another thing as well, perhaps there should be an ``TotalBytesWritten`` as well for the total amount written in the instance of the Encoder/Decoder.\r\n\r\nAnd possibly an ``Reset`` function that can act as an way to reset those 2 get only properties for those who want to be able to reuse it to compress/decompress multiple different sets of input data.",
                                           "updatedAt":  "2022-04-17T08:13:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5C1JrX",
                                           "createdAt":  "2022-05-09T15:10:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rhuijben",
                                           "body":  "@AraHaan I also need the LastBytesRead for this case. (The NextInIndex/ next_in_index as it is called in most zlib wrappers), to allow continuing right after the input that was processed. Not just NextOut*.",
                                           "updatedAt":  "2022-05-09T15:10:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DnayW",
                                           "createdAt":  "2022-05-23T09:16:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wegylexy",
                                           "body":  "Using streams, we need to scavenge the input buffer for raw processing as GIT packs delimit compressed data with uncompressed headers without specifying the compressed size. See #61405 for a working hack.\r\n`Decompress()` in the proposed API would need to return the number of bytes read from the source and that written to the destination, along with the operation status.\r\n\r\n```cs\r\npublic sealed struct OperationResult\r\n{\r\n    public readonly OperationStatus Status;\r\n    public readonly int Read, Written;\r\n}\r\n```",
                                           "updatedAt":  "2022-05-23T09:16:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DpawJ",
                                           "createdAt":  "2022-05-23T17:09:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AraHaan",
                                           "body":  "Also we have to consider if Read/Written should be ``int``, ``uint``, ``long`` or, ``ulong`` for large data sets (since large files can also be compressed that would normally overflow an Int32 (some I think can even overflow an int64).\r\n\r\nHowever the native implementation I believe uses uint\u0027s for the sizes (``size_t`` or something along the lines of that).\r\n\r\nSo it is something to consider to support files over 2 gigabytes in length as well, however such support is tricky to get correct.\r\n\r\nAlso the implementation will also require that ``adler32`` be exposed (currently only ``crc32`` is exposed) in System.IO.Compression.Native to work (see https://github.com/AraHaan/runtime/commit/bebf43f63dbc7d9febf363c797b6428a99dd0269 for all the code changes that would need to be made in System.IO.Compression.Native and System.IO.Compression).\r\n\r\nI would love to move ZlibEncoder and ZlibDecoder to System.IO.Compression.ZlibEncoder but it would need ``InternalsVisibleTo`` on it to see types in ``System.IO.Compression``. A con to this would be that it would be another library to maintain in dotnet/runtime.",
                                           "updatedAt":  "2022-05-23T17:35:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DuP-l",
                                           "createdAt":  "2022-05-24T17:06:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rhuijben",
                                           "body":  "Both Stream and Span use Int as transfer format. ZLib uses an 32 bit value, which overflows in some well defined cases where third party code depends on.\r\n\r\nCrc32 is now also exposed via System.IO.Hashing, so maybe Adler32 belongs there too?\r\n(I see some minor sorting issues in the .def files in your current development version. Not sure if sorting adler before crc would be necessary, but it breaks the alphabetic ordering in that region)",
                                           "updatedAt":  "2022-05-24T17:06:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DunqB",
                                           "createdAt":  "2022-05-24T18:25:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AraHaan",
                                           "body":  "crc32 is exported in System.IO.Compression.Native as well, but with my changes I also added adler32 which is also a part of the native zlib impl as well.",
                                           "updatedAt":  "2022-05-24T18:26:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EFZyd",
                                           "createdAt":  "2022-05-31T15:14:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCsAfaw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wegylexy",
                                                                               "createdAt":  "2022-05-31T20:14:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AraHaan",
                                                                               "createdAt":  "2022-09-10T19:26:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "AraHaan",
                                           "body":  "I guess an option could be to replace the proposed ``LastBytesRead/LastBytesWritten`` properties on the encoder / decoder with an ``ZlibResult`` struct that is as follows:\r\n\r\n```cs\r\npublic sealed struct ZlibResult\r\n{\r\n    public readonly OperationStatus Status { get; } // internal setter.\r\n    public readonly int Read { get; } // internal setter.\r\n    public readonly int Written { get; } // internal setter.\r\n}\r\n```\r\n\r\nAnd then the operation function could return an instance of the struct that contains the information they need.",
                                           "updatedAt":  "2022-05-31T15:14:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EGrBv",
                                           "createdAt":  "2022-05-31T20:16:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOChkuDg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "rhuijben",
                                                                               "createdAt":  "2022-06-13T18:57:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "wegylexy",
                                           "body":  "That\u0027s what I said 8 days ago.\r\n",
                                           "updatedAt":  "2022-05-31T20:16:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HCqbs",
                                           "createdAt":  "2022-07-21T20:01:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AraHaan",
                                           "body":  "I am going to work on this a bit more and will consider moving the properties to an ``ZlibResult`` type that is Disposable instead so that way the Encoder and decoder types could be non-disposables..",
                                           "updatedAt":  "2022-07-21T20:01:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HDt7z",
                                           "createdAt":  "2022-07-22T04:05:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AraHaan",
                                           "body":  "Alright just got done with modifying the API locally.",
                                           "updatedAt":  "2022-07-22T04:05:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6EyzPg",
                                           "createdAt":  "2024-07-15T08:01:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AraHaan",
                                           "body":  "@carlossanlop\r\n\u003e     * What does `VersionError` mean?\r\n``if the zlib library version is incompatible with the version assumed by the caller`` can also happen when ``This can also occur if the size of the z_stream structure made in the C program using the description in zlib.h does not match the size of the compiled z_stream structure libz.so.1.`` from [here](https://stackoverflow.com/questions/35471091/cannot-initialize-zlib-deflate-z-version-error).",
                                           "updatedAt":  "2024-07-15T08:01:18Z"
                                       }
                                   ],
                         "totalCount":  18
                     },
        "title":  "[API Proposal]: Add ZlibEncoder and ZlibDecoder to System.IO.Compression.",
        "labels":  [
                       "api-suggestion",
                       "area-System.IO.Compression"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/62791",
        "createdAt":  "2021-12-14T18:02:03Z",
        "number":  62791,
        "author":  "AArnott",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-07-20T16:59:04Z",
        "body":  "I profiled the benchmarks with the event pipe profiler. [I\u0027ve attached two sample traces to this issue](https://github.com/dotnet/Nerdbank.GitVersioning/files/6899039/Nerdbank.GitVersioning.benchmarks.zip).\r\n\r\nWhat stands out is that on macOS, the `DeflateStream` constructor accounts for 38,7% inclusive time on macOS, whereas on Ubuntu it\u0027s only 13,6%.\r\n\r\nThere\u0027s also `Gen2GcCallback.Finalize` which accounts for 49,5% inclusive time on macOS and 1,5% on Ubuntu.\r\n\r\nmacOS:\r\n\r\n![macOS](https://user-images.githubusercontent.com/9918129/127457868-4d212deb-e348-4e70-b566-190270c6565a.png)\r\n\r\nUbuntu:\r\n\r\n![ubuntu](https://user-images.githubusercontent.com/9918129/127457959-75729ffa-9ebd-488a-b99a-1f573d192799.png)\r\n\r\n_Originally posted by @qmfrederik in https://github.com/dotnet/Nerdbank.GitVersioning/issues/635#issuecomment-888914496_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOO2JuHw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc47PMYG",
                                           "createdAt":  "2021-12-14T18:02:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-12-14T18:02:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47PSXR",
                                           "createdAt":  "2021-12-14T18:30:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io-compression\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nI profiled the benchmarks with the event pipe profiler. [I\u0027ve attached two sample traces to this issue](https://github.com/dotnet/Nerdbank.GitVersioning/files/6899039/Nerdbank.GitVersioning.benchmarks.zip).\r\n\r\nWhat stands out is that on macOS, the `DeflateStream` constructor accounts for 38,7% inclusive time on macOS, whereas on Ubuntu it\u0027s only 13,6%.\r\n\r\nThere\u0027s also `Gen2GcCallback.Finalize` which accounts for 49,5% inclusive time on macOS and 1,5% on Ubuntu.\r\n\r\nmacOS:\r\n\r\n![macOS](https://user-images.githubusercontent.com/9918129/127457868-4d212deb-e348-4e70-b566-190270c6565a.png)\r\n\r\nUbuntu:\r\n\r\n![ubuntu](https://user-images.githubusercontent.com/9918129/127457959-75729ffa-9ebd-488a-b99a-1f573d192799.png)\r\n\r\n_Originally posted by @qmfrederik in https://github.com/dotnet/Nerdbank.GitVersioning/issues/635#issuecomment-888914496_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eAArnott\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.IO.Compression`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-12-14T18:30:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47PWqL",
                                           "createdAt":  "2021-12-14T18:53:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "cc @stephentoub per https://github.com/dotnet/Nerdbank.GitVersioning/issues/635#issuecomment-991287427\r\n\r\nI don\u0027t suppose you can drill down further to look at what part of DeflateStream constructor takes longer?  Is this all in zlib?\r\n\r\n\u003e There\u0027s also Gen2GcCallback.Finalize which accounts for 49,5% inclusive time on macOS and 1,5% on Ubuntu\r\n\r\nThat\u0027s curious.  Could indicate someone is not disposing something on MacOs. ",
                                           "updatedAt":  "2021-12-14T18:53:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47YEDt",
                                           "createdAt":  "2021-12-16T20:16:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCHBNqQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AArnott",
                                                                               "createdAt":  "2021-12-17T00:29:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "I\u0027ve taken a quick look at the profile and uploaded the filtered version to speedscope and you can all see it by just clicking [this link](https://www.speedscope.app/#profileURL=https://gist.githubusercontent.com/adamsitnik/4497f298b45355f093f5da180b6f126f/raw/68849cbdbdd5ae928651ce7aa3858894215845f5/macos.speedscope) (I recommend to click on the Left Heavy tab)\r\n\r\nOn macOS, 80% of time is spent in the following call-stack:\r\n\r\n```log\r\nSystem.IO.Compression!System.IO.Compression.ZLibNative+ZLibStreamHandle.InflateInit2_(int32)\r\n\u003e System.IO.Compression!System.IO.Compression.Inflater.InflateInit(int32)\r\n\u003e System.IO.Compression!System.IO.Compression.DeflateStream..ctor(class System.IO.Stream,value class System.IO.Compression.CompressionMode,bool,int32,int64)\r\n\u003e NerdBank.GitVersioning!Nerdbank.GitVersioning.ManagedGit.ZLibStream..ctor(class System.IO.Stream,int64)\r\n```\r\n\r\nOn Linux, it\u0027s just 4% of total inclusive time for `InflateInit2_`\r\n\r\nit\u0027s just a managed wrapper for a call to `CompressionNative_InflateInit2_`:\r\n\r\nhttps://github.com/dotnet/runtime/blob/0e499ac03d4eacce9ce124f454d0ed4ac2cdafcd/src/native/libs/System.IO.Compression.Native/pal_zlib.c#L160-L173\r\n\r\nFrom a quick look I can\u0027t see any OS-specific `#if` defines that would be performing different work on macOS compared to Linux. To find out where the time is spent exactly I would need to install VTune on macOS (afaik it\u0027s the only profiler that can get us native call stack information on macOS) which would take _some_ time.\r\n\r\n@ericstj @carlossanlop is there any chance that we are compiling the native zlib implementation on macOS without the same optimizations applied as on Linux? It\u0027s my current best guess.\r\n\r\n\r\n\r\n",
                                           "updatedAt":  "2021-12-16T20:18:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47YKny",
                                           "createdAt":  "2021-12-16T21:01:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "It\u0027s been a while since I looked at this, but my recollection was that we actually used the platform zlib that\u0027s part of the operating system on both Linux and Mac.  The copy of ZLib that\u0027s checked into external was only used for Windows.  Not sure if that\u0027s still the case or not as I don\u0027t fully understand all these macros:  https://github.com/dotnet/runtime/blob/713c1524f414ebf4eb2f9225a3b90e4e2024b758/src/native/libs/System.IO.Compression.Native/CMakeLists.txt#L19",
                                           "updatedAt":  "2021-12-16T21:01:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47YL2r",
                                           "createdAt":  "2021-12-16T21:09:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "It\u0027s a bit clearer in 6.0 codebase where I suspect @AArnott is gathering these numbers: https://github.com/dotnet/runtime/blob/423936a520d560e217fa7253481ffff6f010ff2c/src/libraries/Native/Unix/System.IO.Compression.Native/extra_libs.cmake#L11\r\n\r\nAnd if I examine the dylib in our macos runtime I see: `/usr/lib/libz.1.dylib`\r\n\r\n",
                                           "updatedAt":  "2021-12-16T21:09:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47Ym4f",
                                           "createdAt":  "2021-12-17T00:31:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCHGDRA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ericstj",
                                                                               "createdAt":  "2021-12-17T02:45:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "qmfrederik",
                                                                               "createdAt":  "2021-12-17T13:18:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "AArnott",
                                           "body":  "I merely opened the issue and quoted @qmfrederik. The collection was back in July, and it was on .NET 5.",
                                           "updatedAt":  "2021-12-17T00:31:21Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "DeflateStream ctor is substantially slower on macOS than ubuntu",
        "labels":  [
                       "area-System.IO.Compression",
                       "tenet-performance"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/63155",
        "createdAt":  "2021-12-27T20:07:28Z",
        "number":  63155,
        "author":  "PJB3005",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC-0kfg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AlgorithmsAreCool",
                                            "createdAt":  "2021-12-27T20:10:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "stevehansen",
                                            "createdAt":  "2021-12-29T15:57:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Dolu-",
                                            "createdAt":  "2022-02-03T12:17:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "huoyaoyuan",
                                            "createdAt":  "2024-09-02T05:08:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "carlreinke",
                                            "createdAt":  "2025-02-06T06:44:14Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2022-08-02T04:48:30Z",
        "body":  "### Background and motivation\r\n\r\nRight now, `ZipArchive` only supports opening entries compressed with `Stored`, `Deflate` and `Deflate64`. While there are open issues about adding support for more specified methods such as LZMA, I would like to propose an orthogonal solution to this problem. \r\n\r\nAllow access to the raw compressed streams in the zip file, and the compression method flag in the entry.\r\nThis opens up a few possibilities:\r\n* Allows developers to use third-party compression libraries to get support for algorithms like zstd or LZMA themselves.\r\n* Can be used in advanced scenarios when, for example, copying between zip files, to avoid having to decompress and re-compress data.\r\n\r\nI am far from an expert on the zip file format, but from my rudimentary understanding of it, this should be possible?\r\n\r\n### API Proposal\r\n\r\n```C#\r\nnamespace System.IO.Compression\r\n{\r\n\tpublic class ZipArchiveEntry\r\n\t{\r\n\t\tpublic ZipCompressionMethod CompressionMethod { get; }\r\n\t\tpublic Stream OpenRaw();\r\n\t}\r\n\r\n\tpublic class ZipArchive\r\n\t{\r\n\t\tpublic ZipArchiveEntry CreateEntry(string entryName, ZipCompressionMethod compression);\r\n\t}\r\n\r\n\tpublic enum ZipCompressionMethod : short\r\n\t{\r\n\t\t// Corresponds to the compression method described by APPNOTE.TXT section 4.4.5\r\n\t\tStored = 0,\r\n\t\tDeflate = 8,\r\n\t\tBzip2 = 12,\r\n\t\tLzma = 14,\r\n\t\tZstd = 93\r\n\t}\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\nUsing third-party decompression streams with `ZipArchive`:\r\n\r\n```cs\r\nvar zipArchive = new ZipArchive(..., ZipArchiveMode.Read);\r\nvar entry = zipArchive.GetEntry(\"foo.json\");\r\nDebug.Assert(entry.CompressionMethod == ZipCompressionMethod.Zstd);\r\n\r\n// Imagine a ZstdStream from a third-party library.\r\nvar stream = new ZstdStream(entry.OpenRaw(), CompressionMode.Decompress);\r\n```\r\n\r\nCopying compressed blobs between zip files:\r\n\r\n```cs\r\nZipArchive a = ...;\r\nZipArchive b = ...;\r\n\r\nvar aEntry = a.GetEntry(\"foo.json\");\r\nvar bEntry = b.CreateEntry(\"foo.json\", aEntry.CompressionMethod);\r\n\r\naEntry.OpenRaw().CopyTo(bEntry.OpenRaw());\r\n```\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOR6VEVA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc47tRuF",
                                           "createdAt":  "2021-12-27T20:07:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io-compression\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nRight now, `ZipArchive` only supports opening entries compressed with `Stored`, `Deflate` and `Deflate64`. While there are open issues about adding support for more specified methods such as LZMA, I would like to propose an orthogonal solution to this problem. \r\n\r\nAllow access to the raw compressed streams in the zip file, and the compression method flag in the entry.\r\nThis opens up a few possibilities:\r\n* Allows developers to use third-party compression libraries to get support for algorithms like zstd or LZMA themselves.\r\n* Can be used in advanced scenarios when, for example, copying between zip files, to avoid having to decompress and re-compress data.\r\n\r\nI am far from an expert on the zip file format, but from my rudimentary understanding of it, this should be possible?\n\n### API Proposal\n\n```C#\r\nnamespace System.IO.Compression\r\n{\r\n\tpublic class ZipArchiveEntry\r\n\t{\r\n\t\tpublic ZipCompressionMethod CompressionMethod { get; }\r\n\t\tpublic Stream OpenRaw();\r\n\t}\r\n\r\n\tpublic class ZipArchive\r\n\t{\r\n\t\tpublic ZipArchiveEntry CreateEntry(string entryName, ZipCompressionMethod compression);\r\n\t}\r\n\r\n\tpublic enum ZipCompressionMethod : short\r\n\t{\r\n\t\t// Corresponds to the compression method described by APPNOTE.TXT section 4.4.5\r\n\t\tStored = 0,\r\n\t\tDeflate = 0,\r\n\t\tBzip2 = 12,\r\n\t\tLzma = 14,\r\n\t\tZstd = 93\r\n\t}\r\n}\r\n```\r\n\n\n### API Usage\n\nUsing third-party decompression streams with `ZipArchive`:\r\n\r\n```cs\r\nvar zipArchive = new ZipArchive(..., ZipArchiveMode.Read);\r\nvar entry = zipArchive.GetEntry(\"foo.json\");\r\nDebug.Assert(entry.CompressionMethod == ZipCompressionMethod.Zstd);\r\n\r\n// Imagine a ZstdStream from a third-party library.\r\nvar stream = new ZstdStream(entry.OpenRaw(), CompressionMode.Decompress);\r\n```\r\n\r\nCopying compressed blobs between zip files:\r\n\r\n```cs\r\nZipArchive a = ...;\r\nZipArchive b = ...;\r\n\r\nvar aEntry = a.GetEntry(\"foo.json\");\r\nvar bEntry = b.CreateEntry(\"foo.json\", aEntry.CompressionMode);\r\n\r\naEntry.OpenRaw().CopyTo(bEntry.OpenRaw());\r\n```\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ePJB3005\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.IO.Compression`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-12-27T20:07:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47tSUz",
                                           "createdAt":  "2021-12-27T20:13:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AlgorithmsAreCool",
                                           "body":  "I have a real-world use case for this also. I recently implemented my own incomplete parser for ZIP archives to use LibDeflate as the decompressor, which got me some nice speedups. It would be nice to be able to use the structure parsing with my own compression libs.",
                                           "updatedAt":  "2021-12-27T20:13:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47tS7m",
                                           "createdAt":  "2021-12-27T20:18:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "PJB3005",
                                           "body":  "My use cases are that I want to be able to use zip files (because it\u0027s a standard format) but with LZMA (significant space savings for my use case) while also being able to instantly dump these blobs into an SQLite DB (while still compressed). Another use case I have is that I want to basically use zip files as an object storage from an API and being able to use the compressed blobs to throw them over the wire directly would be great.\r\n\r\nThis would hit multiple birds with one stone.",
                                           "updatedAt":  "2021-12-27T20:18:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47tbAW",
                                           "createdAt":  "2021-12-27T21:12:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCH-9eg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "PJB3005",
                                                                               "createdAt":  "2021-12-27T21:23:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "\u003e Allows developers to use third-party compression libraries to get support for algorithms like zstd or LZMA themselves.\r\n\r\nHaving an enum that requires a third-party library to supply that compression algorithm is likely to cause confusion.\r\n\r\nAt least some compression libraries add a header to the compressed stream - that being the case, if the constructor instead took something like\r\n\r\n```csharp\r\npublic interface IZipCompressionStream {\r\n    public string CompressionMethod;\r\n    public ReadOnlySpan\u003cbyte\u003e Header;\r\n    public Stream Compress(Stream raw);\r\n    public bool TryDecompress(Stream compressed, out Stream raw);\r\n    public Stream Decompress(Stream compressed);\r\n}\r\n```\r\n... this would allow for arbitrary compression methods, including ones not currently envisioned",
                                           "updatedAt":  "2021-12-27T21:12:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47tb2D",
                                           "createdAt":  "2021-12-27T21:23:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "PJB3005",
                                           "body":  "\u003e Having an enum that requires a third-party library to supply that compression algorithm is likely to cause confusion.\r\n\r\nIt is a lower level API that simply exposes more information about the underlying zip file format. Python also exposes the `ZipInfo.compress_type` field in its `zipfile` module (but no ability to access the raw stream, AFAICT).\r\n\r\nLimiting the enum members to the compression methods supported by .NET today would be an option, which I suppose is closer to what Python does in this regard.\r\n\r\n\u003e At least some compression libraries add a header to the compressed stream - that being the case, if the constructor instead took something like\r\n\r\nRelying on such headers is silly for zip files, since they *already* have a standardized 2-byte entry field for compression method.\r\n\r\nThis entire `IZipCompressionStream` seems like a very complex solution and does not address the other point (access to raw blobs, although you could probably abuse it to achieve with many silly hoops).",
                                           "updatedAt":  "2021-12-27T21:23:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47tcRe",
                                           "createdAt":  "2021-12-27T21:29:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "svick",
                                           "body":  "@Clockwork-Muse I think the API should follow the standard (though which of the specified compression methods should be named members of the `enum` is up for debate), instead of inventing its own way of specifying the compression method, that may or may not be useful in the future. Or do you have an example where what you\u0027re proposing would be useful today?",
                                           "updatedAt":  "2021-12-27T21:30:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47tfLn",
                                           "createdAt":  "2021-12-27T22:14:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "\u003e Relying on such headers is silly for zip files, since they already have a standardized 2-byte entry field for compression method.\r\n\r\nAh, I was not aware that zip itself listed the possible methods, mybad.",
                                           "updatedAt":  "2021-12-27T22:14:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4717RP",
                                           "createdAt":  "2022-01-03T10:17:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "@carlossanlop what is your take on this? Would adding such API help to implement algorithms that are currently not supported OOTB?",
                                           "updatedAt":  "2022-01-03T10:17:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HpURU",
                                           "createdAt":  "2022-08-02T04:48:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCrPxpw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "AlgorithmsAreCool",
                                                                               "createdAt":  "2022-08-02T16:00:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "PaulusParssinen",
                                                                               "createdAt":  "2022-08-27T09:34:24Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "Thanks for this suggestion, @PJB3005. I\u0027m moving this to Future, but I\u0027ve also referenced it in #62658 so that we look at it alongside the LZMA and other potential investments during our .NET 8 planning.",
                                           "updatedAt":  "2022-08-02T04:48:20Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "[API Proposal]: Allow opening (raw) compressed archive entries in ZipArchiveEntry",
        "labels":  [
                       "api-suggestion",
                       "area-System.IO.Compression"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/64767",
        "createdAt":  "2022-02-03T20:53:12Z",
        "number":  64767,
        "author":  "carlossanlop",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-08T12:24:06Z",
        "body":  "Follow up of PR https://github.com/dotnet/runtime/pull/59442#discussion_r798959446\r\n\r\nThe byte array allocations can be potentially improved with ArrayPool.\r\n\r\nThis method is consumed by the Comment properties in ZipArchive and ZipArchiveEntry.\r\n\r\n@Jozkee @adamsitnik ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYLRaug==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc49W0Ns",
                                           "createdAt":  "2022-02-03T20:53:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io-compression\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nFollow up of PR https://github.com/dotnet/runtime/pull/59442/ (wait for it to be merged)\r\n\r\nThe byte array allocations can be potentially improved with ArrayPool.\r\n\r\nThis method is consumed by the Comment properties in ZipArchive and ZipArchiveEntry.\r\n\r\n@Jozkee @adamsitnik \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ecarlossanlop\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`enhancement`, `area-System.IO.Compression`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-02-03T20:53:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fu84Z",
                                           "createdAt":  "2023-06-25T16:01:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LeaFrock",
                                           "body":  "Is this what you want? Maybe I can make a PR.\r\n\r\n```csharp\r\n\r\n        internal static byte[] GetEncodedTruncatedBytesFromString(string? text, Encoding? encoding, int maxBytes, out bool isUTF8)\r\n        {\r\n            if (string.IsNullOrEmpty(text))\r\n            {\r\n                isUTF8 = false;\r\n                return Array.Empty\u003cbyte\u003e();\r\n            }\r\n\r\n            encoding ??= GetEncoding(text);\r\n            isUTF8 = encoding.CodePage == 65001;\r\n\r\n            if (maxBytes == 0) // No truncation\r\n            {\r\n                return encoding.GetBytes(text);\r\n            }\r\n\r\n            var byteCount = encoding.GetByteCount(text);\r\n            var buffer = ArrayPool\u003cbyte\u003e.Shared.Rent(byteCount);\r\n            try\r\n            {\r\n                encoding.GetBytes(text, 0, text.Length, buffer, 0);\r\n            }\r\n            catch (Exception)\r\n            {\r\n                ArrayPool\u003cbyte\u003e.Shared.Return(buffer);\r\n                throw;\r\n            }\r\n\r\n            byte[] bytes;\r\n            if (isUTF8)\r\n            {\r\n                int totalCodePoints = 0;\r\n                foreach (Rune rune in text.EnumerateRunes())\r\n                {\r\n                    if (totalCodePoints + rune.Utf8SequenceLength \u003e maxBytes)\r\n                    {\r\n                        break;\r\n                    }\r\n                    totalCodePoints += rune.Utf8SequenceLength;\r\n                }\r\n\r\n                Debug.Assert(totalCodePoints \u003e 0);\r\n                Debug.Assert(totalCodePoints \u003c= byteCount);\r\n\r\n                bytes = buffer[0..totalCodePoints];\r\n                ArrayPool\u003cbyte\u003e.Shared.Return(buffer);\r\n                return bytes;\r\n            }\r\n\r\n            bytes = buffer[0..Math.Min(maxBytes, byteCount)];\r\n            ArrayPool\u003cbyte\u003e.Shared.Return(buffer);\r\n            return bytes;\r\n        }\r\n\r\n```",
                                           "updatedAt":  "2023-06-25T16:01:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gtFq6",
                                           "createdAt":  "2023-07-05T20:14:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "carlossanlop",
                                           "body":  "Yes, I think that\u0027s what was being asked in the PR, @LeaFrock, thank you so much. Yes, if you can send a PR, that would be awesome. I\u0027ll assign the issue to you. Tag @ViktorHofer and I when it\u0027s up so we can review it.",
                                           "updatedAt":  "2023-07-05T20:14:09Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Improve how byte arrays are created in ZipHelper.GetEncodedTruncatedBytesFromString",
        "labels":  [
                       "enhancement",
                       "area-System.IO.Compression",
                       "help wanted",
                       "in-pr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/66449",
        "createdAt":  "2022-03-10T13:09:45Z",
        "number":  66449,
        "author":  "sschultze",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODJ7HkQ==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "Copilot",
                                            "createdAt":  "2025-08-05T13:51:43Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-08-11T09:01:11Z",
        "body":  "### Description\n\nIf you create a GZipStream CompressionMode.Compress and don\u0027t call the Write method (because there is no data), GZipStream writes nothing to the target stream.\n\n### Reproduction Steps\n\n```cs\r\nusing (var ms = new MemoryStream())\r\n{\r\n    using (var gzipStream = new GZipStream(ms, CompressionMode.Compress, leaveOpen: true))\r\n    {\r\n        // Write nothing.\r\n        // Workaround: gzipStream.Write(new byte[0]);\r\n    }\r\n\r\n    Console.WriteLine($\"Length: {ms.Length} bytes\");\r\n    foreach (var b in ms.ToArray())\r\n    {\r\n        Console.Write(b.ToString(\"x2\"));\r\n    }\r\n    Console.WriteLine();\r\n}\r\n```\n\n### Expected behavior\n\nGZipStream writes at least the GZIP signature (0x1f 0x8b) and some other required stuff to the target stream.\r\n\r\nIn the reproduction steps, if you enable to workaround, the output seems to be correct:\r\n\r\n```\r\nLength: 20 bytes\r\n1f8b080000000000001303000000000000000000\r\n```\n\n### Actual behavior\n\nNothing is written to the target stream (0 bytes).\n\n### Regression?\n\nI don\u0027t know.\n\n### Known Workarounds\n\nCall the Write method with an empty byte array (see workaround in reproduction steps).\n\n### Configuration\n\n* .NET 6.0.3\r\n* x64\r\n* macOS Monterey 12.0.1\n\n### Other information\n\nNode.js\u0027 `gzipSync` function works just fine with an empty buffer:\r\n\r\n```\r\nrequire(\u0027zlib\u0027).gzipSync(Buffer.from(\u0027\u0027, \u0027hex\u0027))\r\n\u003cBuffer 1f 8b 08 00 00 00 00 00 00 13 03 00 00 00 00 00 00 00 00 00\u003e\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOrXumLA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc4_a_ea",
                                           "createdAt":  "2022-03-10T13:09:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io-compression\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nIf you create a GZipStream CompressionMode.Compress and don\u0027t call the Write method (because there is no data), GZipStream writes nothing to the target stream.\n\n### Reproduction Steps\n\n```cs\r\nusing (var ms = new MemoryStream())\r\n{\r\n    using (var gzipStream = new GZipStream(ms, CompressionMode.Compress, leaveOpen: true))\r\n    {\r\n        // Write nothing.\r\n        // Workaround: gzipStream.Write(new byte[0]);\r\n    }\r\n\r\n    Console.WriteLine($\"Length: {ms.Length} bytes\");\r\n    foreach (var b in ms.ToArray())\r\n    {\r\n        Console.Write(b.ToString(\"x2\"));\r\n    }\r\n    Console.WriteLine();\r\n}\r\n```\n\n### Expected behavior\n\nGZipStream writes at least the GZIP signature (0x1f 0x8b) and some other required stuff to the target stream.\r\n\r\nIn the reproduction steps, if you enable to workaround, the output seems to be correct:\r\n\r\n```\r\nLength: 20 bytes\r\n1f8b080000000000001303000000000000000000\r\n```\n\n### Actual behavior\n\nNothing is written to the target stream (0 bytes).\n\n### Regression?\n\nI don\u0027t know.\n\n### Known Workarounds\n\nCall the Write method with an empty byte array (see workaround in reproduction steps).\n\n### Configuration\n\n* .NET 6.0.3\r\n* x64\r\n* macOS Monterey 12.0.1\n\n### Other information\n\nNode.js\u0027 `gzipSync` function works just fine with an empty buffer:\r\n\r\n```\r\nrequire(\u0027zlib\u0027).gzipSync(Buffer.from(\u0027\u0027, \u0027hex\u0027))\r\n\u003cBuffer 1f 8b 08 00 00 00 00 00 00 13 03 00 00 00 00 00 00 00 00 00\u003e\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003esschultze\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.IO.Compression`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-03-10T13:09:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_lU7U",
                                           "createdAt":  "2022-03-14T12:53:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "@carlossanlop what is your opinon on that? Should we always write the GZip signature?",
                                           "updatedAt":  "2022-03-14T12:53:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_lVE6",
                                           "createdAt":  "2022-03-14T12:53:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "@sschultze may I ask why are you interested in creating \"empty\" gzip files?",
                                           "updatedAt":  "2022-03-14T12:53:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_lcsW",
                                           "createdAt":  "2022-03-14T13:23:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCSyBUQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adamsitnik",
                                                                               "createdAt":  "2022-03-14T13:26:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "sschultze",
                                           "body":  "@adamsitnik My software compresses files provided by the user, and it is totally fine to hand over umcompressed 0-byte files to my software. I think there shouldn\u0027t be any special logic for 0-byte files.\r\n\r\nFurthermore, my software uses both .NET and Node.js, and both can decompress blobs generated by the other without any problems, except for the 0-byte case.\r\n\r\nTring to gunzip an empty blob (generated by .NET) with Node.js leads to an error, as one would expect:\r\n\r\n```\r\n\u003e require(\u0027zlib\u0027).gunzipSync(Buffer.from(\u0027\u0027, \u0027hex\u0027))\r\nUncaught Error: unexpected end of file\r\n    at Zlib.zlibOnError [as onerror] (node:zlib:190:17)\r\n    at Zlib.callbackTrampoline (node:internal/async_hooks:130:17)\r\n    at processChunkSync (node:zlib:456:12)\r\n    at zlibBufferSync (node:zlib:178:12)\r\n    at Object.syncBufferWrapper [as gunzipSync] (node:zlib:791:14)\r\n    at REPL6:1:17\r\n    at Script.runInThisContext (node:vm:129:12)\r\n    at REPLServer.defaultEval (node:repl:562:29)\r\n    at bound (node:domain:421:15)\r\n    at REPLServer.runBound [as eval] (node:domain:432:12) {\r\n  errno: -5,\r\n  code: \u0027Z_BUF_ERROR\u0027\r\n```",
                                           "updatedAt":  "2022-03-14T13:23:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_letg",
                                           "createdAt":  "2022-03-14T13:31:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sschultze",
                                           "body":  "By the way, the proposed bugfix would also make `GZipStream`\u0027s behavior consistent with the behavior of `CryptoStream`:\r\n\r\n```cs\r\nusing (var ms = new MemoryStream())\r\n{\r\n    var key = new byte[32];\r\n    RandomNumberGenerator.Fill(key);\r\n\r\n    var iv = new byte[16];\r\n    RandomNumberGenerator.Fill(iv);\r\n\r\n    using (var aes = Aes.Create())\r\n    {\r\n        aes.Key = key;\r\n        aes.IV = iv;\r\n\r\n        using (var encryptor = aes.CreateEncryptor())\r\n        {\r\n            using (var cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write, leaveOpen: true))\r\n            {\r\n                // Write nothing.\r\n            }\r\n        }\r\n    }\r\n\r\n    Console.WriteLine($\"Length: {ms.Length} bytes\");\r\n    foreach (var b in ms.ToArray())\r\n    {\r\n        Console.Write(b.ToString(\"x2\"));\r\n    }\r\n    Console.WriteLine();\r\n}\r\n```\r\n\r\nGenerates a 16-byte array. (Of course it\u0027s not 100% comparable as there is no signature.)",
                                           "updatedAt":  "2022-03-14T13:31:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_lqe-",
                                           "createdAt":  "2022-03-14T14:07:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCS2MdA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sschultze",
                                                                               "createdAt":  "2022-03-14T18:29:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "For reference:\r\nhttps://github.com/dotnet/runtime/blob/39fb7f7826270f00b856e3e9a13165c07dec87cc/src/libraries/System.IO.Compression/src/System/IO/Compression/DeflateZLib/DeflateStream.cs#L558-L562",
                                           "updatedAt":  "2022-03-14T14:07:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_m25k",
                                           "createdAt":  "2022-03-14T18:28:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sschultze",
                                           "body":  "@stephentoub Thank you for pointing to the comment! But if this is really by design, my workaround (`gzipStream.Write(new byte[0])`) should at least produce the same result, shouldn\u0027t it?\r\n\r\nIf the .NET team thinks that this is not worth fixing because it has always been this way and others might probably rely on the current behavior, I\u0027m personally totally fine with not fixing this. In this case, I wouldn\u0027t even use my workaround, but simply produce a fixed output (`1f8b080000000000001303000000000000000000`) in case of a zero-byte input.",
                                           "updatedAt":  "2022-03-14T18:28:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_m-zF",
                                           "createdAt":  "2022-03-14T19:05:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCS2--Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sschultze",
                                                                               "createdAt":  "2022-03-14T19:48:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "I\u0027m actually in favor of changing it to always output, but we\u0027d first need to understand what might break, e.g. if that cited ZipArchive issue still exists and why.\r\n\r\n\u003e But if this is really by design, my workaround (gzipStream.Write(new byte[0])) should at least produce the same result, shouldn\u0027t it?\r\n\r\nIt seems like this code is there to try for bug for bug compat with a previous implementation rather than it being a design goal to always have 0 output for 0 input. ",
                                           "updatedAt":  "2022-03-14T19:07:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6te6Ys",
                                           "createdAt":  "2025-05-26T20:07:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MarcosMeli",
                                           "body":  "The original workaround doesn\u0027t work any more due to this PR https://github.com/dotnet/runtime/pull/94433\n\nFor now, the only way to generate a valid gz file that 7zip and other tools can open is to manually write the gzip header with this sequence to the filestream (not the GzipStream, but the underlying filestream) before dispossing\n\nif (bytes written == 0)\n   _fileStream.Write(new byte[] { 0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 });",
                                           "updatedAt":  "2025-05-26T20:07:27Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "GZipStream doesn\u0027t write anything to the target stream when there was no write operation",
        "labels":  [
                       "area-System.IO.Compression",
                       "help wanted",
                       "in-pr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/72951",
        "createdAt":  "2022-07-27T17:34:57Z",
        "number":  72951,
        "author":  "steveisok",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-08T04:44:53Z",
        "body":  "Both [ExtractToDirectoryUnicode](https://github.com/dotnet/runtime/blob/c21ae04d923a1e5d2964fed61cc919571cce2efe/src/libraries/System.IO.Compression.ZipFile/tests/ZipFile.Extract.cs#L37-L46) and [ExtractToDirectoryExtension_Unicode](https://github.com/dotnet/runtime/blob/c21ae04d923a1e5d2964fed61cc919571cce2efe/src/libraries/System.IO.Compression.ZipFile/tests/ZipFileExtensions.ZipArchive.Extract.cs#L25-L33) fail comparing the file names extracted from `unicode.zip`.\r\n\r\nWhat\u0027s weird is that the expected and actual file names appear to be equal:\r\n\r\n```\r\nExpected: 한글.txt\r\n\r\nActual: 한글.txt\r\n```\r\nIf you take the strings from actual and expected and put them in a small test, they will be equal.  It seems like the values returned from the file system in https://github.com/dotnet/runtime/blob/c21ae04d923a1e5d2964fed61cc919571cce2efe/src/libraries/Common/tests/System/IO/Compression/ZipTestHelper.cs#L291-L292 are suspect.\r\n\r\nSkipping the tests for now.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOR1oUyA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5HWhTI",
                                           "createdAt":  "2022-07-27T17:35:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io-compression\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nBoth [ExtractToDirectoryUnicode](https://github.com/dotnet/runtime/blob/c21ae04d923a1e5d2964fed61cc919571cce2efe/src/libraries/System.IO.Compression.ZipFile/tests/ZipFile.Extract.cs#L37-L46) and [ExtractToDirectoryExtension_Unicode](https://github.com/dotnet/runtime/blob/c21ae04d923a1e5d2964fed61cc919571cce2efe/src/libraries/System.IO.Compression.ZipFile/tests/ZipFileExtensions.ZipArchive.Extract.cs#L25-L33) fail comparing the file names extracted from `unicode.zip`.\r\n\r\nWhat\u0027s weird is that the expected and actual file names appear to be equal:\r\n\r\n```\r\nExpected: 한글.txt\r\n\r\nActual: 한글.txt\r\n```\r\nIf you take the strings from actual and expected and put them in a small test, they will be equal.  It seems like the values returned from the file system in https://github.com/dotnet/runtime/blob/c21ae04d923a1e5d2964fed61cc919571cce2efe/src/libraries/Common/tests/System/IO/Compression/ZipTestHelper.cs#L291-L292 are suspect.\r\n\r\nSkipping the tests for now.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003esteveisok\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.IO.Compression`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-07-27T17:35:10Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[iOS] ZipArchive and ZipFile unicode test failures",
        "labels":  [
                       "area-System.IO.Compression",
                       "help wanted",
                       "os-ios"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/73391",
        "createdAt":  "2022-07-28T22:14:26Z",
        "number":  73391,
        "author":  "performanceautofiler",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-30T15:44:13Z",
        "body":  "### Run Information\r\n\r\nArchitecture | arm64\r\n-- | --\r\nOS | Windows 10.0.19041\r\nBaseline | [87aa786b3997a23501912abd4654e4fd9958230c](https://github.com/dotnet/runtime/commit/87aa786b3997a23501912abd4654e4fd9958230c)\r\nCompare | [55bf5d8a28f4a8c519dbc6edfc1d3d64519f530f](https://github.com/dotnet/runtime/commit/55bf5d8a28f4a8c519dbc6edfc1d3d64519f530f)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/87aa786b3997a23501912abd4654e4fd9958230c...55bf5d8a28f4a8c519dbc6edfc1d3d64519f530f)\r\n\r\n\r\n### Regressions in System.IO.Compression.Brotli\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[Compress - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_Windows 10.0.19041/System.IO.Compression.Brotli.Compress(level%3a%20Optimal%2c%20file%3a%20%22alice29.txt%22).html\u003e) | 57.21 μs | 2.64 ms | 46.07 | 0.54 | False | | |\r\n[Compress - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_Windows 10.0.19041/System.IO.Compression.Brotli.Compress(level%3a%20Optimal%2c%20file%3a%20%22TestDocument.pdf%22).html\u003e) | 38.71 μs | 513.81 μs | 13.27 | 0.57 | False | | |\r\n\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/07_28_2022/refs/heads/main_arm64_Windows%2010.0.19041_Regression/System.IO.Compression.Brotli_1.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/07_28_2022/refs/heads/main_arm64_Windows%2010.0.19041_Regression/System.IO.Compression.Brotli_2.png\u003e)\r\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/07_28_2022/refs/heads/main_arm64_Windows%2010.0.19041_Regression/System.IO.Compression.Brotli.html\u003e)\r\n\r\n### Repro\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net6.0 --filter \u0027System.IO.Compression.Brotli*\u0027\r\n```\r\n\u003cdetails\u003e\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-7c333c15-e4c2-45e0-bc52-9744c3ef51bc5be577a27ca4f45b0/0deb8ade-9bb3-4688-85fa-af638a3ccaab.zip?sv=2021-06-08\u0026se=2022-08-14T13%3A35%3A49Z\u0026sr=c\u0026sp=rl\u0026sig=CG8yvXLT8lODHUUuB%2B7K4dCFvIpeQCvQSQnyFN%2Bv0Ro%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-81639697-40ae-4194-aefc-ddfc81fe6b8bfeaf424aec24de9b4/ed5b720c-0cb4-476d-bdcd-0cce1de0f842.zip?sv=2021-06-08\u0026se=2022-08-15T05%3A58%3A56Z\u0026sr=c\u0026sp=rl\u0026sig=aedmPlxsOiKjr1PscWmhPTFHCx5xpb%2BUjZdT0LbIwbk%3D\u003e)\r\n### Histogram\r\n\r\n#### System.IO.Compression.Brotli.Compress(level: Optimal, file: \"alice29.txt\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 2.6358665277777775 \u003e 49.21159596309648.\r\nIsChangePoint: Marked as a change because one of 7/15/2022 6:44:31 PM, 7/18/2022 2:17:16 AM falls between 7/8/2022 10:31:34 AM and 7/18/2022 2:17:16 AM.\r\nIsRegressionStdDev: Marked as regression because -418.54307728663485 (T) = (0 -2613168.223104056) / Math.Sqrt((13561413.09071954 / (45)) + (334918084.80197054 / (9))) is less than -2.0066468050606243 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (45) + (9) - 2, .025) and -51.65213098762557 = (49630.81596295141 - 2613168.223104056) / 49630.81596295141 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```#### System.IO.Compression.Brotli.Compress(level: Optimal, file: \"TestDocument.pdf\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 513.8109302995392 \u003e 46.59669667875596.\r\nIsChangePoint: Marked as a change because one of 7/15/2022 6:44:31 PM, 7/18/2022 2:17:16 AM falls between 7/8/2022 10:31:34 AM and 7/18/2022 2:17:16 AM.\r\nIsRegressionStdDev: Marked as regression because -714.8751641957057 (T) = (0 -514246.41449052736) / Math.Sqrt((9051262.153242894 / (45)) + (2145381.6111228354 / (9))) is less than -2.0066468050606243 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (45) + (9) - 2, .025) and -11.756230764376724 = (40313.351489894725 - 514246.41449052736) / 40313.351489894725 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOuvkkAg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5H2tOx",
                                           "createdAt":  "2022-08-04T16:55:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io-compression\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Run Information\r\n\r\nArchitecture | arm64\r\n-- | --\r\nOS | Windows 10.0.19041\r\nBaseline | [87aa786b3997a23501912abd4654e4fd9958230c](https://github.com/dotnet/runtime/commit/87aa786b3997a23501912abd4654e4fd9958230c)\r\nCompare | [55bf5d8a28f4a8c519dbc6edfc1d3d64519f530f](https://github.com/dotnet/runtime/commit/55bf5d8a28f4a8c519dbc6edfc1d3d64519f530f)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/87aa786b3997a23501912abd4654e4fd9958230c...55bf5d8a28f4a8c519dbc6edfc1d3d64519f530f)\r\n\r\n\r\n### Regressions in System.IO.Compression.Brotli\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[Compress - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_Windows 10.0.19041/System.IO.Compression.Brotli.Compress(level%3a%20Optimal%2c%20file%3a%20%22alice29.txt%22).html\u003e) | 57.21 μs | 2.64 ms | 46.07 | 0.54 | False | | |\r\n[Compress - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_Windows 10.0.19041/System.IO.Compression.Brotli.Compress(level%3a%20Optimal%2c%20file%3a%20%22TestDocument.pdf%22).html\u003e) | 38.71 μs | 513.81 μs | 13.27 | 0.57 | False | | |\r\n\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/07_28_2022/refs/heads/main_arm64_Windows%2010.0.19041_Regression/System.IO.Compression.Brotli_1.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/07_28_2022/refs/heads/main_arm64_Windows%2010.0.19041_Regression/System.IO.Compression.Brotli_2.png\u003e)\r\n[Test Report](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/07_28_2022/refs/heads/main_arm64_Windows%2010.0.19041_Regression/System.IO.Compression.Brotli.html\u003e)\r\n\r\n### Repro\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net6.0 --filter \u0027System.IO.Compression.Brotli*\u0027\r\n```\r\n\u003cdetails\u003e\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-7c333c15-e4c2-45e0-bc52-9744c3ef51bc5be577a27ca4f45b0/0deb8ade-9bb3-4688-85fa-af638a3ccaab.zip?sv=2021-06-08\u0026se=2022-08-14T13%3A35%3A49Z\u0026sr=c\u0026sp=rl\u0026sig=CG8yvXLT8lODHUUuB%2B7K4dCFvIpeQCvQSQnyFN%2Bv0Ro%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-81639697-40ae-4194-aefc-ddfc81fe6b8bfeaf424aec24de9b4/ed5b720c-0cb4-476d-bdcd-0cce1de0f842.zip?sv=2021-06-08\u0026se=2022-08-15T05%3A58%3A56Z\u0026sr=c\u0026sp=rl\u0026sig=aedmPlxsOiKjr1PscWmhPTFHCx5xpb%2BUjZdT0LbIwbk%3D\u003e)\r\n### Histogram\r\n\r\n#### System.IO.Compression.Brotli.Compress(level: Optimal, file: \"alice29.txt\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 2.6358665277777775 \u003e 49.21159596309648.\r\nIsChangePoint: Marked as a change because one of 7/15/2022 6:44:31 PM, 7/18/2022 2:17:16 AM falls between 7/8/2022 10:31:34 AM and 7/18/2022 2:17:16 AM.\r\nIsRegressionStdDev: Marked as regression because -418.54307728663485 (T) = (0 -2613168.223104056) / Math.Sqrt((13561413.09071954 / (45)) + (334918084.80197054 / (9))) is less than -2.0066468050606243 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (45) + (9) - 2, .025) and -51.65213098762557 = (49630.81596295141 - 2613168.223104056) / 49630.81596295141 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```#### System.IO.Compression.Brotli.Compress(level: Optimal, file: \"TestDocument.pdf\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 513.8109302995392 \u003e 46.59669667875596.\r\nIsChangePoint: Marked as a change because one of 7/15/2022 6:44:31 PM, 7/18/2022 2:17:16 AM falls between 7/8/2022 10:31:34 AM and 7/18/2022 2:17:16 AM.\r\nIsRegressionStdDev: Marked as regression because -714.8751641957057 (T) = (0 -514246.41449052736) / Math.Sqrt((9051262.153242894 / (45)) + (2145381.6111228354 / (9))) is less than -2.0066468050606243 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (45) + (9) - 2, .025) and -11.756230764376724 = (40313.351489894725 - 514246.41449052736) / 40313.351489894725 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eperformanceautofiler[bot]\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003eDrewScoggins\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.IO.Compression`, `Regression`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-08-04T16:55:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5H2tQE",
                                           "createdAt":  "2022-08-04T16:55:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kunalspathak",
                                           "body":  "https://github.com/dotnet/runtime/pull/72266\r\n@stephentoub ",
                                           "updatedAt":  "2022-08-04T16:55:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5H3Ern",
                                           "createdAt":  "2022-08-04T18:27:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODPouQg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "jeffhandley",
                                                                               "createdAt":  "2022-08-09T09:51:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "theolivenbaum",
                                                                               "createdAt":  "2022-09-14T08:51:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "seanalexander",
                                                                               "createdAt":  "2023-12-14T18:44:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "This is a perf test bug.\r\ncc: @adamsitnik \r\n\r\nThe test is assuming that all work associated with a write happens during the write:\r\nhttps://github.com/dotnet/performance/blob/e03024567eb5b6c66e51751c08f0ae1f7f3d3059/src/benchmarks/micro/libraries/System.IO.Compression/CompressionStreamPerfTestBase.cs#L57-L64\r\nThat isn\u0027t the case.  In fact, the higher the compression algorithm, the larger the internal buffer will be used by Brotli, which means at the highest level of compression, the buffer is so large that basically no work happens in the Write call other than copying the data over to the native buffer.  And since the stream is never being disposed, the bulk of the work isn\u0027t actually happening, and so the test isn\u0027t actually measuring what it\u0027s supposed to be measuring.\r\n\r\nWith the test as is, when I run it locally I get similarly terrible-looking results:\r\n\r\n|   Method |  Runtime |   level |             file |         Mean | Ratio |\r\n|--------- |--------- |-------- |----------------- |-------------:|------:|\r\n| Compress | .NET 6.0 | Optimal | TestDocument.pdf |    15.755 us |  1.00 |\r\n| Compress | .NET 7.0 | Optimal | TestDocument.pdf |   467.284 us | 29.89 |\r\n|          |          |         |                  |              |       |\r\n| Compress | .NET 6.0 | Optimal |      alice29.txt |    35.456 us |  1.00 |\r\n| Compress | .NET 7.0 | Optimal |      alice29.txt | 2,202.550 us | 62.20 |\r\n\r\nBut, when I fix the test, by changing:\r\nhttps://github.com/dotnet/performance/blob/e03024567eb5b6c66e51751c08f0ae1f7f3d3059/src/benchmarks/micro/libraries/System.IO.Compression/CompressionStreamPerfTestBase.cs#L62\r\n```C#\r\nvar compressor = CreateStream(CompressedFile.CompressedDataStream, level);\r\n```\r\nto instead be:\r\n```C#\r\nusing var compressor = CreateStream(CompressedFile.CompressedDataStream, level);\r\n```\r\nand changing:\r\nhttps://github.com/dotnet/performance/blob/e03024567eb5b6c66e51751c08f0ae1f7f3d3059/src/benchmarks/micro/libraries/System.IO.Compression/Brotli.cs#L16\r\n```C#\r\npublic override Stream CreateStream(Stream stream, CompressionLevel level) =\u003e new BrotliStream(stream, level);\r\n```\r\nto instead be:\r\n```C#\r\npublic override Stream CreateStream(Stream stream, CompressionLevel level) =\u003e new BrotliStream(stream, level, leaveOpen: true);\r\n```\r\nI then get these results:\r\n\r\n|   Method |  Runtime |   level |             file |         Mean | Ratio |\r\n|--------- |--------- |-------- |----------------- |-------------:|------:|\r\n| Compress | .NET 6.0 | Optimal | TestDocument.pdf | 457,331.4 us | 1.000 |\r\n| Compress | .NET 7.0 | Optimal | TestDocument.pdf |   1,145.6 us | 0.003 |\r\n|          |          |         |                  |              |       |\r\n| Compress | .NET 6.0 | Optimal |      alice29.txt | 203,330.7 us |  1.00 |\r\n| Compress | .NET 7.0 | Optimal |      alice29.txt |   3,024.0 us |  0.02 |\r\n\r\nwhich is way more in line with the expected result of my PR.",
                                           "updatedAt":  "2022-08-04T18:27:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc66-P00",
                                           "createdAt":  "2025-07-30T15:40:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rokonec",
                                           "body":  "@adamsitnik @stephentoub It is little bit old. I wonder if this still an issue. Is it?",
                                           "updatedAt":  "2025-07-30T15:40:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc66-SQC",
                                           "createdAt":  "2025-07-30T15:44:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "Based just on the history in this issue, it looks like there\u0027s been an open pr for years to fix the tests:\nhttps://github.com/dotnet/performance/pull/2567",
                                           "updatedAt":  "2025-07-30T15:44:13Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Regressions in System.IO.Compression.Brotli",
        "labels":  [
                       "arch-arm64",
                       "area-System.IO.Compression",
                       "os-windows",
                       "tenet-performance",
                       "tenet-performance-benchmarks",
                       "test-bug"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/73389",
        "createdAt":  "2022-08-04T12:17:04Z",
        "number":  73389,
        "author":  "performanceautofiler",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-22T01:41:43Z",
        "body":  "### Run Information\r\n\r\nArchitecture | arm64\r\n-- | --\r\nOS | Windows 10.0.19041\r\nBaseline | [54c717a4ed822f46a23893479b8d4398596c041d](https://github.com/dotnet/runtime/commit/54c717a4ed822f46a23893479b8d4398596c041d)\r\nCompare | [1926f0939a855d6ef41593377c75ab4c31e9fcbb](https://github.com/dotnet/runtime/commit/1926f0939a855d6ef41593377c75ab4c31e9fcbb)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/54c717a4ed822f46a23893479b8d4398596c041d...1926f0939a855d6ef41593377c75ab4c31e9fcbb)\r\n\r\n\r\n### Regressions in System.IO.Compression.Gzip\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[Compress - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_Windows 10.0.19041/System.IO.Compression.Gzip.Compress(level%3a%20Fastest%2c%20file%3a%20%22TestDocument.pdf%22).html\u003e) | 2.85 ms | 3.00 ms | 1.05 | 0.00 | False | | |\r\n\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/08_04_2022/refs/heads/main_arm64_Windows%2010.0.19041_Regression/System.IO.Compression.Gzip_1.png\u003e)\r\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/08_04_2022/refs/heads/main_arm64_Windows%2010.0.19041_Regression/System.IO.Compression.Gzip.html\u003e)\r\n\r\n### Repro\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net6.0 --filter \u0027System.IO.Compression.Gzip*\u0027\r\n```\r\n\u003cdetails\u003e\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-fc0464b1-b86a-4da3-8871-3609afc3769d101f32ab245443aa2/84cdebad-2564-4ab2-b984-a2c942333cc2.zip?sv=2021-06-08\u0026se=2022-09-01T17%3A45%3A32Z\u0026sr=c\u0026sp=rl\u0026sig=rD0%2BFoWtRXz%2BAD8rL4YntLtNfVDU6qPjLDwthn16PhI%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-e1a7410d-1445-4cd3-887b-fb67ae3ee84c5c0c90309e7452990/5190109a-14d4-48e8-ae2e-91085c99e274.zip?sv=2021-06-08\u0026se=2022-09-02T09%3A57%3A26Z\u0026sr=c\u0026sp=rl\u0026sig=5BeDnVvFlD3DgFIsccCQe1H3dLSUD5w%2BCoiLt1YVIuM%3D\u003e)\r\n### Histogram\r\n\r\n#### System.IO.Compression.Gzip.Compress(level: Fastest, file: \"TestDocument.pdf\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 2.9996544642857135 \u003e 2.9892825729166663.\r\nIsChangePoint: Marked as a change because one of 5/9/2022 6:32:22 AM, 8/2/2022 9:32:02 PM, 8/4/2022 5:17:15 AM falls between 7/26/2022 2:47:26 PM and 8/4/2022 5:17:15 AM.\r\nIsRegressionStdDev: Marked as regression because -68.96288776311692 (T) = (0 -2997694.554906898) / Math.Sqrt((117543328.83053406 / (41)) + (7034096.18717764 / (4))) is less than -2.016692199226234 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (41) + (4) - 2, .025) and -0.052052518626114985 = (2849377.2904242603 - 2997694.554906898) / 2849377.2904242603 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n### Run Information\r\n\r\nArchitecture | arm64\r\n-- | --\r\nOS | Windows 10.0.19041\r\nBaseline | [54c717a4ed822f46a23893479b8d4398596c041d](https://github.com/dotnet/runtime/commit/54c717a4ed822f46a23893479b8d4398596c041d)\r\nCompare | [1926f0939a855d6ef41593377c75ab4c31e9fcbb](https://github.com/dotnet/runtime/commit/1926f0939a855d6ef41593377c75ab4c31e9fcbb)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/54c717a4ed822f46a23893479b8d4398596c041d...1926f0939a855d6ef41593377c75ab4c31e9fcbb)\r\n\r\n\r\n### Regressions in System.Buffers.Tests.NonStandardArrayPoolTests\u0026lt;Object\u0026gt;\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[RentNoReturn - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_Windows 10.0.19041/System.Buffers.Tests.NonStandardArrayPoolTests(Object).RentNoReturn(RentalSize%3a%2064%2c%20UseSharedPool%3a%20True).html\u003e) | 51.08 ns | 54.81 ns | 1.07 | 0.01 | False | | |\r\n\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/08_04_2022/refs/heads/main_arm64_Windows%2010.0.19041_Regression/System.Buffers.Tests.NonStandardArrayPoolTests(Object)_1.png\u003e)\r\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/08_04_2022/refs/heads/main_arm64_Windows%2010.0.19041_Regression/System.Buffers.Tests.NonStandardArrayPoolTests(Object).html\u003e)\r\n\r\n### Repro\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net6.0 --filter \u0027System.Buffers.Tests.NonStandardArrayPoolTests\u0026lt;Object\u0026gt;*\u0027\r\n```\r\n\u003cdetails\u003e\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-fc0464b1-b86a-4da3-8871-3609afc3769d101f32ab245443aa2/84cdebad-2564-4ab2-b984-a2c942333cc2.zip?sv=2021-06-08\u0026se=2022-09-01T17%3A45%3A32Z\u0026sr=c\u0026sp=rl\u0026sig=rD0%2BFoWtRXz%2BAD8rL4YntLtNfVDU6qPjLDwthn16PhI%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-e1a7410d-1445-4cd3-887b-fb67ae3ee84c5c0c90309e7452990/5190109a-14d4-48e8-ae2e-91085c99e274.zip?sv=2021-06-08\u0026se=2022-09-02T09%3A57%3A26Z\u0026sr=c\u0026sp=rl\u0026sig=5BeDnVvFlD3DgFIsccCQe1H3dLSUD5w%2BCoiLt1YVIuM%3D\u003e)\r\n### Histogram\r\n\r\n#### System.Buffers.Tests.NonStandardArrayPoolTests\u0026lt;Object\u0026gt;.RentNoReturn(RentalSize: 64, UseSharedPool: True)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 54.809619047619044 \u003e 53.66642539062501.\r\nIsChangePoint: Marked as a change because one of 5/7/2022 9:43:21 AM, 8/2/2022 9:32:02 PM, 8/4/2022 5:17:15 AM falls between 7/26/2022 2:47:26 PM and 8/4/2022 5:17:15 AM.\r\nIsRegressionStdDev: Marked as regression because -18.036614790113084 (T) = (0 -54.494937921626985) / Math.Sqrt((0.35170233208069396 / (41)) + (0.10175683495165423 / (4))) is less than -2.016692199226234 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (41) + (4) - 2, .025) and -0.06501357108349988 = (51.168303767421605 - 54.494937921626985) / 51.168303767421605 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n\r\n\r\n### Run Information\r\n\r\nArchitecture | arm64\r\n-- | --\r\nOS | Windows 10.0.19041\r\nBaseline | [54c717a4ed822f46a23893479b8d4398596c041d](https://github.com/dotnet/runtime/commit/54c717a4ed822f46a23893479b8d4398596c041d)\r\nCompare | [1926f0939a855d6ef41593377c75ab4c31e9fcbb](https://github.com/dotnet/runtime/commit/1926f0939a855d6ef41593377c75ab4c31e9fcbb)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/54c717a4ed822f46a23893479b8d4398596c041d...1926f0939a855d6ef41593377c75ab4c31e9fcbb)\r\n\r\n\r\n### Regressions in System.IO.Compression.ZLib\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[Compress - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_Windows 10.0.19041/System.IO.Compression.ZLib.Compress(level%3a%20Fastest%2c%20file%3a%20%22TestDocument.pdf%22).html\u003e) | 2.80 ms | 2.99 ms | 1.07 | 0.00 | False | | |\r\n[Compress - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_Windows 10.0.19041/System.IO.Compression.ZLib.Compress(level%3a%20Fastest%2c%20file%3a%20%22sum%22).html\u003e) | 440.94 μs | 469.89 μs | 1.07 | 0.00 | False | | |\r\n\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/08_04_2022/refs/heads/main_arm64_Windows%2010.0.19041_Regression/System.IO.Compression.ZLib_1.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/08_04_2022/refs/heads/main_arm64_Windows%2010.0.19041_Regression/System.IO.Compression.ZLib_2.png\u003e)\r\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/08_04_2022/refs/heads/main_arm64_Windows%2010.0.19041_Regression/System.IO.Compression.ZLib.html\u003e)\r\n\r\n### Repro\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net6.0 --filter \u0027System.IO.Compression.ZLib*\u0027\r\n```\r\n\u003cdetails\u003e\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-fc0464b1-b86a-4da3-8871-3609afc3769d101f32ab245443aa2/84cdebad-2564-4ab2-b984-a2c942333cc2.zip?sv=2021-06-08\u0026se=2022-09-01T17%3A45%3A32Z\u0026sr=c\u0026sp=rl\u0026sig=rD0%2BFoWtRXz%2BAD8rL4YntLtNfVDU6qPjLDwthn16PhI%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-e1a7410d-1445-4cd3-887b-fb67ae3ee84c5c0c90309e7452990/5190109a-14d4-48e8-ae2e-91085c99e274.zip?sv=2021-06-08\u0026se=2022-09-02T09%3A57%3A26Z\u0026sr=c\u0026sp=rl\u0026sig=5BeDnVvFlD3DgFIsccCQe1H3dLSUD5w%2BCoiLt1YVIuM%3D\u003e)\r\n### Histogram\r\n\r\n#### System.IO.Compression.ZLib.Compress(level: Fastest, file: \"TestDocument.pdf\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 2.989092638888889 \u003e 2.9355226614583327.\r\nIsChangePoint: Marked as a change because one of 5/9/2022 6:32:22 AM, 8/2/2022 9:32:02 PM, 8/4/2022 5:17:15 AM falls between 7/26/2022 2:47:26 PM and 8/4/2022 5:17:15 AM.\r\nIsRegressionStdDev: Marked as regression because -77.61854139659978 (T) = (0 -2990808.179372711) / Math.Sqrt((47550707.749999985 / (41)) + (19984158.008067783 / (4))) is less than -2.016692199226234 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (41) + (4) - 2, .025) and -0.06882161333651177 = (2798229.510008116 - 2990808.179372711) / 2798229.510008116 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```#### System.IO.Compression.ZLib.Compress(level: Fastest, file: \"sum\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 469.8932116596639 \u003e 461.38697743055553.\r\nIsChangePoint: Marked as a change because one of 6/15/2022 7:24:26 PM, 7/27/2022 2:14:42 PM, 8/2/2022 9:32:02 PM, 8/4/2022 5:17:15 AM falls between 7/26/2022 2:47:26 PM and 8/4/2022 5:17:15 AM.\r\nIsRegressionStdDev: Marked as regression because -15.066854202865196 (T) = (0 -469237.5212257106) / Math.Sqrt((34829965.80911427 / (41)) + (5512974.956863488 / (4))) is less than -2.016692199226234 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (41) + (4) - 2, .025) and -0.050337598102365544 = (446749.2376484259 - 469237.5212257106) / 446749.2376484259 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n\r\n\r\n### Run Information\r\n\r\nArchitecture | arm64\r\n-- | --\r\nOS | Windows 10.0.19041\r\nBaseline | [54c717a4ed822f46a23893479b8d4398596c041d](https://github.com/dotnet/runtime/commit/54c717a4ed822f46a23893479b8d4398596c041d)\r\nCompare | [1926f0939a855d6ef41593377c75ab4c31e9fcbb](https://github.com/dotnet/runtime/commit/1926f0939a855d6ef41593377c75ab4c31e9fcbb)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/54c717a4ed822f46a23893479b8d4398596c041d...1926f0939a855d6ef41593377c75ab4c31e9fcbb)\r\n\r\n\r\n### Regressions in System.IO.Compression.Deflate\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[Compress - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_Windows 10.0.19041/System.IO.Compression.Deflate.Compress(level%3a%20Fastest%2c%20file%3a%20%22TestDocument.pdf%22).html\u003e) | 2.75 ms | 2.94 ms | 1.07 | 0.00 | False | | |\r\n[Compress - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_Windows 10.0.19041/System.IO.Compression.Deflate.Compress(level%3a%20Fastest%2c%20file%3a%20%22sum%22).html\u003e) | 424.17 μs | 458.61 μs | 1.08 | 0.00 | False | | |\r\n\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/08_04_2022/refs/heads/main_arm64_Windows%2010.0.19041_Regression/System.IO.Compression.Deflate_1.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/08_04_2022/refs/heads/main_arm64_Windows%2010.0.19041_Regression/System.IO.Compression.Deflate_2.png\u003e)\r\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/08_04_2022/refs/heads/main_arm64_Windows%2010.0.19041_Regression/System.IO.Compression.Deflate.html\u003e)\r\n\r\n### Repro\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net6.0 --filter \u0027System.IO.Compression.Deflate*\u0027\r\n```\r\n\u003cdetails\u003e\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-fc0464b1-b86a-4da3-8871-3609afc3769d101f32ab245443aa2/84cdebad-2564-4ab2-b984-a2c942333cc2.zip?sv=2021-06-08\u0026se=2022-09-01T17%3A45%3A32Z\u0026sr=c\u0026sp=rl\u0026sig=rD0%2BFoWtRXz%2BAD8rL4YntLtNfVDU6qPjLDwthn16PhI%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-e1a7410d-1445-4cd3-887b-fb67ae3ee84c5c0c90309e7452990/5190109a-14d4-48e8-ae2e-91085c99e274.zip?sv=2021-06-08\u0026se=2022-09-02T09%3A57%3A26Z\u0026sr=c\u0026sp=rl\u0026sig=5BeDnVvFlD3DgFIsccCQe1H3dLSUD5w%2BCoiLt1YVIuM%3D\u003e)\r\n### Histogram\r\n\r\n#### System.IO.Compression.Deflate.Compress(level: Fastest, file: \"TestDocument.pdf\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 2.944779722222223 \u003e 2.8891870000000006.\r\nIsChangePoint: Marked as a change because one of 5/9/2022 6:32:22 AM, 8/2/2022 9:32:02 PM, 8/4/2022 5:17:15 AM falls between 7/26/2022 2:47:26 PM and 8/4/2022 5:17:15 AM.\r\nIsRegressionStdDev: Marked as regression because -91.72982329289043 (T) = (0 -2947826.1991567463) / Math.Sqrt((71882321.59658116 / (41)) + (11089664.504111752 / (4))) is less than -2.016692199226234 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (41) + (4) - 2, .025) and -0.07089152752181736 = (2752684.210676688 - 2947826.1991567463) / 2752684.210676688 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```#### System.IO.Compression.Deflate.Compress(level: Fastest, file: \"sum\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 458.6060171568628 \u003e 445.7794805743244.\r\nIsChangePoint: Marked as a change because one of 6/15/2022 7:24:26 PM, 7/27/2022 2:14:42 PM, 8/2/2022 9:32:02 PM, 8/4/2022 5:17:15 AM falls between 7/26/2022 2:47:26 PM and 8/4/2022 5:17:15 AM.\r\nIsRegressionStdDev: Marked as regression because -14.913874638375276 (T) = (0 -458959.1882002802) / Math.Sqrt((28626618.235419188 / (40)) + (10684463.222928915 / (4))) is less than -2.0180817028167235 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (40) + (4) - 2, .025) and -0.06360486089072237 = (431512.8720039151 - 458959.1882002802) / 431512.8720039151 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n\r\n\r\n### Run Information\r\n\r\nArchitecture | arm64\r\n-- | --\r\nOS | Windows 10.0.19041\r\nBaseline | [54c717a4ed822f46a23893479b8d4398596c041d](https://github.com/dotnet/runtime/commit/54c717a4ed822f46a23893479b8d4398596c041d)\r\nCompare | [1926f0939a855d6ef41593377c75ab4c31e9fcbb](https://github.com/dotnet/runtime/commit/1926f0939a855d6ef41593377c75ab4c31e9fcbb)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/54c717a4ed822f46a23893479b8d4398596c041d...1926f0939a855d6ef41593377c75ab4c31e9fcbb)\r\n\r\n\r\n### Regressions in System.Collections.CtorFromCollection\u0026lt;String\u0026gt;\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[ImmutableArray - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_Windows 10.0.19041/System.Collections.CtorFromCollection(String).ImmutableArray(Size%3a%20512).html\u003e) | 468.98 ns | 495.24 ns | 1.06 | 0.00 | False | | |\r\n\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/08_04_2022/refs/heads/main_arm64_Windows%2010.0.19041_Regression/System.Collections.CtorFromCollection(String)_1.png\u003e)\r\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/08_04_2022/refs/heads/main_arm64_Windows%2010.0.19041_Regression/System.Collections.CtorFromCollection(String).html\u003e)\r\n\r\n### Repro\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net6.0 --filter \u0027System.Collections.CtorFromCollection\u0026lt;String\u0026gt;*\u0027\r\n```\r\n\u003cdetails\u003e\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-fc0464b1-b86a-4da3-8871-3609afc3769d101f32ab245443aa2/84cdebad-2564-4ab2-b984-a2c942333cc2.zip?sv=2021-06-08\u0026se=2022-09-01T17%3A45%3A32Z\u0026sr=c\u0026sp=rl\u0026sig=rD0%2BFoWtRXz%2BAD8rL4YntLtNfVDU6qPjLDwthn16PhI%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-e1a7410d-1445-4cd3-887b-fb67ae3ee84c5c0c90309e7452990/5190109a-14d4-48e8-ae2e-91085c99e274.zip?sv=2021-06-08\u0026se=2022-09-02T09%3A57%3A26Z\u0026sr=c\u0026sp=rl\u0026sig=5BeDnVvFlD3DgFIsccCQe1H3dLSUD5w%2BCoiLt1YVIuM%3D\u003e)\r\n### Histogram\r\n\r\n#### System.Collections.CtorFromCollection\u0026lt;String\u0026gt;.ImmutableArray(Size: 512)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 495.243094848904 \u003e 487.6974805387518.\r\nIsChangePoint: Marked as a change because one of 8/2/2022 9:32:02 PM, 8/4/2022 5:17:15 AM falls between 7/26/2022 2:47:26 PM and 8/4/2022 5:17:15 AM.\r\nIsRegressionStdDev: Marked as regression because -18.059649380719744 (T) = (0 -498.1264953871379) / Math.Sqrt((27.368457010300922 / (41)) + (7.571560273277371 / (4))) is less than -2.016692199226234 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (41) + (4) - 2, .025) and -0.06158568436984263 = (469.22872333458963 - 498.1264953871379) / 469.22872333458963 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYgPBZg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5H2oh5",
                                           "createdAt":  "2022-08-04T16:37:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-08-04T16:37:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5H2o7M",
                                           "createdAt":  "2022-08-04T16:38:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "Zlib update https://github.com/dotnet/runtime/pull/73082 cc @GrabYourPitchforks (win-arm64)",
                                           "updatedAt":  "2022-08-04T16:38:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5H6pnO",
                                           "createdAt":  "2022-08-05T15:02:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io-compression\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Run Information\r\n\r\nArchitecture | arm64\r\n-- | --\r\nOS | Windows 10.0.19041\r\nBaseline | [54c717a4ed822f46a23893479b8d4398596c041d](https://github.com/dotnet/runtime/commit/54c717a4ed822f46a23893479b8d4398596c041d)\r\nCompare | [1926f0939a855d6ef41593377c75ab4c31e9fcbb](https://github.com/dotnet/runtime/commit/1926f0939a855d6ef41593377c75ab4c31e9fcbb)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/54c717a4ed822f46a23893479b8d4398596c041d...1926f0939a855d6ef41593377c75ab4c31e9fcbb)\r\n\r\n\r\n### Regressions in System.IO.Compression.Gzip\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[Compress - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_Windows 10.0.19041/System.IO.Compression.Gzip.Compress(level%3a%20Fastest%2c%20file%3a%20%22TestDocument.pdf%22).html\u003e) | 2.85 ms | 3.00 ms | 1.05 | 0.00 | False | | |\r\n\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/08_04_2022/refs/heads/main_arm64_Windows%2010.0.19041_Regression/System.IO.Compression.Gzip_1.png\u003e)\r\n[Test Report](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/08_04_2022/refs/heads/main_arm64_Windows%2010.0.19041_Regression/System.IO.Compression.Gzip.html\u003e)\r\n\r\n### Repro\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net6.0 --filter \u0027System.IO.Compression.Gzip*\u0027\r\n```\r\n\u003cdetails\u003e\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-fc0464b1-b86a-4da3-8871-3609afc3769d101f32ab245443aa2/84cdebad-2564-4ab2-b984-a2c942333cc2.zip?sv=2021-06-08\u0026se=2022-09-01T17%3A45%3A32Z\u0026sr=c\u0026sp=rl\u0026sig=rD0%2BFoWtRXz%2BAD8rL4YntLtNfVDU6qPjLDwthn16PhI%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-e1a7410d-1445-4cd3-887b-fb67ae3ee84c5c0c90309e7452990/5190109a-14d4-48e8-ae2e-91085c99e274.zip?sv=2021-06-08\u0026se=2022-09-02T09%3A57%3A26Z\u0026sr=c\u0026sp=rl\u0026sig=5BeDnVvFlD3DgFIsccCQe1H3dLSUD5w%2BCoiLt1YVIuM%3D\u003e)\r\n### Histogram\r\n\r\n#### System.IO.Compression.Gzip.Compress(level: Fastest, file: \"TestDocument.pdf\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 2.9996544642857135 \u003e 2.9892825729166663.\r\nIsChangePoint: Marked as a change because one of 5/9/2022 6:32:22 AM, 8/2/2022 9:32:02 PM, 8/4/2022 5:17:15 AM falls between 7/26/2022 2:47:26 PM and 8/4/2022 5:17:15 AM.\r\nIsRegressionStdDev: Marked as regression because -68.96288776311692 (T) = (0 -2997694.554906898) / Math.Sqrt((117543328.83053406 / (41)) + (7034096.18717764 / (4))) is less than -2.016692199226234 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (41) + (4) - 2, .025) and -0.052052518626114985 = (2849377.2904242603 - 2997694.554906898) / 2849377.2904242603 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n### Run Information\r\n\r\nArchitecture | arm64\r\n-- | --\r\nOS | Windows 10.0.19041\r\nBaseline | [54c717a4ed822f46a23893479b8d4398596c041d](https://github.com/dotnet/runtime/commit/54c717a4ed822f46a23893479b8d4398596c041d)\r\nCompare | [1926f0939a855d6ef41593377c75ab4c31e9fcbb](https://github.com/dotnet/runtime/commit/1926f0939a855d6ef41593377c75ab4c31e9fcbb)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/54c717a4ed822f46a23893479b8d4398596c041d...1926f0939a855d6ef41593377c75ab4c31e9fcbb)\r\n\r\n\r\n### Regressions in System.Buffers.Tests.NonStandardArrayPoolTests\u0026lt;Object\u0026gt;\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[RentNoReturn - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_Windows 10.0.19041/System.Buffers.Tests.NonStandardArrayPoolTests(Object).RentNoReturn(RentalSize%3a%2064%2c%20UseSharedPool%3a%20True).html\u003e) | 51.08 ns | 54.81 ns | 1.07 | 0.01 | False | | |\r\n\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/08_04_2022/refs/heads/main_arm64_Windows%2010.0.19041_Regression/System.Buffers.Tests.NonStandardArrayPoolTests(Object)_1.png\u003e)\r\n[Test Report](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/08_04_2022/refs/heads/main_arm64_Windows%2010.0.19041_Regression/System.Buffers.Tests.NonStandardArrayPoolTests(Object).html\u003e)\r\n\r\n### Repro\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net6.0 --filter \u0027System.Buffers.Tests.NonStandardArrayPoolTests\u0026lt;Object\u0026gt;*\u0027\r\n```\r\n\u003cdetails\u003e\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-fc0464b1-b86a-4da3-8871-3609afc3769d101f32ab245443aa2/84cdebad-2564-4ab2-b984-a2c942333cc2.zip?sv=2021-06-08\u0026se=2022-09-01T17%3A45%3A32Z\u0026sr=c\u0026sp=rl\u0026sig=rD0%2BFoWtRXz%2BAD8rL4YntLtNfVDU6qPjLDwthn16PhI%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-e1a7410d-1445-4cd3-887b-fb67ae3ee84c5c0c90309e7452990/5190109a-14d4-48e8-ae2e-91085c99e274.zip?sv=2021-06-08\u0026se=2022-09-02T09%3A57%3A26Z\u0026sr=c\u0026sp=rl\u0026sig=5BeDnVvFlD3DgFIsccCQe1H3dLSUD5w%2BCoiLt1YVIuM%3D\u003e)\r\n### Histogram\r\n\r\n#### System.Buffers.Tests.NonStandardArrayPoolTests\u0026lt;Object\u0026gt;.RentNoReturn(RentalSize: 64, UseSharedPool: True)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 54.809619047619044 \u003e 53.66642539062501.\r\nIsChangePoint: Marked as a change because one of 5/7/2022 9:43:21 AM, 8/2/2022 9:32:02 PM, 8/4/2022 5:17:15 AM falls between 7/26/2022 2:47:26 PM and 8/4/2022 5:17:15 AM.\r\nIsRegressionStdDev: Marked as regression because -18.036614790113084 (T) = (0 -54.494937921626985) / Math.Sqrt((0.35170233208069396 / (41)) + (0.10175683495165423 / (4))) is less than -2.016692199226234 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (41) + (4) - 2, .025) and -0.06501357108349988 = (51.168303767421605 - 54.494937921626985) / 51.168303767421605 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n\r\n\r\n### Run Information\r\n\r\nArchitecture | arm64\r\n-- | --\r\nOS | Windows 10.0.19041\r\nBaseline | [54c717a4ed822f46a23893479b8d4398596c041d](https://github.com/dotnet/runtime/commit/54c717a4ed822f46a23893479b8d4398596c041d)\r\nCompare | [1926f0939a855d6ef41593377c75ab4c31e9fcbb](https://github.com/dotnet/runtime/commit/1926f0939a855d6ef41593377c75ab4c31e9fcbb)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/54c717a4ed822f46a23893479b8d4398596c041d...1926f0939a855d6ef41593377c75ab4c31e9fcbb)\r\n\r\n\r\n### Regressions in System.IO.Compression.ZLib\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[Compress - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_Windows 10.0.19041/System.IO.Compression.ZLib.Compress(level%3a%20Fastest%2c%20file%3a%20%22TestDocument.pdf%22).html\u003e) | 2.80 ms | 2.99 ms | 1.07 | 0.00 | False | | |\r\n[Compress - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_Windows 10.0.19041/System.IO.Compression.ZLib.Compress(level%3a%20Fastest%2c%20file%3a%20%22sum%22).html\u003e) | 440.94 μs | 469.89 μs | 1.07 | 0.00 | False | | |\r\n\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/08_04_2022/refs/heads/main_arm64_Windows%2010.0.19041_Regression/System.IO.Compression.ZLib_1.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/08_04_2022/refs/heads/main_arm64_Windows%2010.0.19041_Regression/System.IO.Compression.ZLib_2.png\u003e)\r\n[Test Report](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/08_04_2022/refs/heads/main_arm64_Windows%2010.0.19041_Regression/System.IO.Compression.ZLib.html\u003e)\r\n\r\n### Repro\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net6.0 --filter \u0027System.IO.Compression.ZLib*\u0027\r\n```\r\n\u003cdetails\u003e\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-fc0464b1-b86a-4da3-8871-3609afc3769d101f32ab245443aa2/84cdebad-2564-4ab2-b984-a2c942333cc2.zip?sv=2021-06-08\u0026se=2022-09-01T17%3A45%3A32Z\u0026sr=c\u0026sp=rl\u0026sig=rD0%2BFoWtRXz%2BAD8rL4YntLtNfVDU6qPjLDwthn16PhI%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-e1a7410d-1445-4cd3-887b-fb67ae3ee84c5c0c90309e7452990/5190109a-14d4-48e8-ae2e-91085c99e274.zip?sv=2021-06-08\u0026se=2022-09-02T09%3A57%3A26Z\u0026sr=c\u0026sp=rl\u0026sig=5BeDnVvFlD3DgFIsccCQe1H3dLSUD5w%2BCoiLt1YVIuM%3D\u003e)\r\n### Histogram\r\n\r\n#### System.IO.Compression.ZLib.Compress(level: Fastest, file: \"TestDocument.pdf\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 2.989092638888889 \u003e 2.9355226614583327.\r\nIsChangePoint: Marked as a change because one of 5/9/2022 6:32:22 AM, 8/2/2022 9:32:02 PM, 8/4/2022 5:17:15 AM falls between 7/26/2022 2:47:26 PM and 8/4/2022 5:17:15 AM.\r\nIsRegressionStdDev: Marked as regression because -77.61854139659978 (T) = (0 -2990808.179372711) / Math.Sqrt((47550707.749999985 / (41)) + (19984158.008067783 / (4))) is less than -2.016692199226234 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (41) + (4) - 2, .025) and -0.06882161333651177 = (2798229.510008116 - 2990808.179372711) / 2798229.510008116 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```#### System.IO.Compression.ZLib.Compress(level: Fastest, file: \"sum\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 469.8932116596639 \u003e 461.38697743055553.\r\nIsChangePoint: Marked as a change because one of 6/15/2022 7:24:26 PM, 7/27/2022 2:14:42 PM, 8/2/2022 9:32:02 PM, 8/4/2022 5:17:15 AM falls between 7/26/2022 2:47:26 PM and 8/4/2022 5:17:15 AM.\r\nIsRegressionStdDev: Marked as regression because -15.066854202865196 (T) = (0 -469237.5212257106) / Math.Sqrt((34829965.80911427 / (41)) + (5512974.956863488 / (4))) is less than -2.016692199226234 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (41) + (4) - 2, .025) and -0.050337598102365544 = (446749.2376484259 - 469237.5212257106) / 446749.2376484259 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n\r\n\r\n### Run Information\r\n\r\nArchitecture | arm64\r\n-- | --\r\nOS | Windows 10.0.19041\r\nBaseline | [54c717a4ed822f46a23893479b8d4398596c041d](https://github.com/dotnet/runtime/commit/54c717a4ed822f46a23893479b8d4398596c041d)\r\nCompare | [1926f0939a855d6ef41593377c75ab4c31e9fcbb](https://github.com/dotnet/runtime/commit/1926f0939a855d6ef41593377c75ab4c31e9fcbb)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/54c717a4ed822f46a23893479b8d4398596c041d...1926f0939a855d6ef41593377c75ab4c31e9fcbb)\r\n\r\n\r\n### Regressions in System.IO.Compression.Deflate\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[Compress - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_Windows 10.0.19041/System.IO.Compression.Deflate.Compress(level%3a%20Fastest%2c%20file%3a%20%22TestDocument.pdf%22).html\u003e) | 2.75 ms | 2.94 ms | 1.07 | 0.00 | False | | |\r\n[Compress - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_Windows 10.0.19041/System.IO.Compression.Deflate.Compress(level%3a%20Fastest%2c%20file%3a%20%22sum%22).html\u003e) | 424.17 μs | 458.61 μs | 1.08 | 0.00 | False | | |\r\n\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/08_04_2022/refs/heads/main_arm64_Windows%2010.0.19041_Regression/System.IO.Compression.Deflate_1.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/08_04_2022/refs/heads/main_arm64_Windows%2010.0.19041_Regression/System.IO.Compression.Deflate_2.png\u003e)\r\n[Test Report](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/08_04_2022/refs/heads/main_arm64_Windows%2010.0.19041_Regression/System.IO.Compression.Deflate.html\u003e)\r\n\r\n### Repro\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net6.0 --filter \u0027System.IO.Compression.Deflate*\u0027\r\n```\r\n\u003cdetails\u003e\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-fc0464b1-b86a-4da3-8871-3609afc3769d101f32ab245443aa2/84cdebad-2564-4ab2-b984-a2c942333cc2.zip?sv=2021-06-08\u0026se=2022-09-01T17%3A45%3A32Z\u0026sr=c\u0026sp=rl\u0026sig=rD0%2BFoWtRXz%2BAD8rL4YntLtNfVDU6qPjLDwthn16PhI%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-e1a7410d-1445-4cd3-887b-fb67ae3ee84c5c0c90309e7452990/5190109a-14d4-48e8-ae2e-91085c99e274.zip?sv=2021-06-08\u0026se=2022-09-02T09%3A57%3A26Z\u0026sr=c\u0026sp=rl\u0026sig=5BeDnVvFlD3DgFIsccCQe1H3dLSUD5w%2BCoiLt1YVIuM%3D\u003e)\r\n### Histogram\r\n\r\n#### System.IO.Compression.Deflate.Compress(level: Fastest, file: \"TestDocument.pdf\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 2.944779722222223 \u003e 2.8891870000000006.\r\nIsChangePoint: Marked as a change because one of 5/9/2022 6:32:22 AM, 8/2/2022 9:32:02 PM, 8/4/2022 5:17:15 AM falls between 7/26/2022 2:47:26 PM and 8/4/2022 5:17:15 AM.\r\nIsRegressionStdDev: Marked as regression because -91.72982329289043 (T) = (0 -2947826.1991567463) / Math.Sqrt((71882321.59658116 / (41)) + (11089664.504111752 / (4))) is less than -2.016692199226234 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (41) + (4) - 2, .025) and -0.07089152752181736 = (2752684.210676688 - 2947826.1991567463) / 2752684.210676688 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```#### System.IO.Compression.Deflate.Compress(level: Fastest, file: \"sum\")\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 458.6060171568628 \u003e 445.7794805743244.\r\nIsChangePoint: Marked as a change because one of 6/15/2022 7:24:26 PM, 7/27/2022 2:14:42 PM, 8/2/2022 9:32:02 PM, 8/4/2022 5:17:15 AM falls between 7/26/2022 2:47:26 PM and 8/4/2022 5:17:15 AM.\r\nIsRegressionStdDev: Marked as regression because -14.913874638375276 (T) = (0 -458959.1882002802) / Math.Sqrt((28626618.235419188 / (40)) + (10684463.222928915 / (4))) is less than -2.0180817028167235 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (40) + (4) - 2, .025) and -0.06360486089072237 = (431512.8720039151 - 458959.1882002802) / 431512.8720039151 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n\r\n\r\n### Run Information\r\n\r\nArchitecture | arm64\r\n-- | --\r\nOS | Windows 10.0.19041\r\nBaseline | [54c717a4ed822f46a23893479b8d4398596c041d](https://github.com/dotnet/runtime/commit/54c717a4ed822f46a23893479b8d4398596c041d)\r\nCompare | [1926f0939a855d6ef41593377c75ab4c31e9fcbb](https://github.com/dotnet/runtime/commit/1926f0939a855d6ef41593377c75ab4c31e9fcbb)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/54c717a4ed822f46a23893479b8d4398596c041d...1926f0939a855d6ef41593377c75ab4c31e9fcbb)\r\n\r\n\r\n### Regressions in System.Collections.CtorFromCollection\u0026lt;String\u0026gt;\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[ImmutableArray - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_Windows 10.0.19041/System.Collections.CtorFromCollection(String).ImmutableArray(Size%3a%20512).html\u003e) | 468.98 ns | 495.24 ns | 1.06 | 0.00 | False | | |\r\n\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/08_04_2022/refs/heads/main_arm64_Windows%2010.0.19041_Regression/System.Collections.CtorFromCollection(String)_1.png\u003e)\r\n[Test Report](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/08_04_2022/refs/heads/main_arm64_Windows%2010.0.19041_Regression/System.Collections.CtorFromCollection(String).html\u003e)\r\n\r\n### Repro\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net6.0 --filter \u0027System.Collections.CtorFromCollection\u0026lt;String\u0026gt;*\u0027\r\n```\r\n\u003cdetails\u003e\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-fc0464b1-b86a-4da3-8871-3609afc3769d101f32ab245443aa2/84cdebad-2564-4ab2-b984-a2c942333cc2.zip?sv=2021-06-08\u0026se=2022-09-01T17%3A45%3A32Z\u0026sr=c\u0026sp=rl\u0026sig=rD0%2BFoWtRXz%2BAD8rL4YntLtNfVDU6qPjLDwthn16PhI%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-e1a7410d-1445-4cd3-887b-fb67ae3ee84c5c0c90309e7452990/5190109a-14d4-48e8-ae2e-91085c99e274.zip?sv=2021-06-08\u0026se=2022-09-02T09%3A57%3A26Z\u0026sr=c\u0026sp=rl\u0026sig=5BeDnVvFlD3DgFIsccCQe1H3dLSUD5w%2BCoiLt1YVIuM%3D\u003e)\r\n### Histogram\r\n\r\n#### System.Collections.CtorFromCollection\u0026lt;String\u0026gt;.ImmutableArray(Size: 512)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 495.243094848904 \u003e 487.6974805387518.\r\nIsChangePoint: Marked as a change because one of 8/2/2022 9:32:02 PM, 8/4/2022 5:17:15 AM falls between 7/26/2022 2:47:26 PM and 8/4/2022 5:17:15 AM.\r\nIsRegressionStdDev: Marked as regression because -18.059649380719744 (T) = (0 -498.1264953871379) / Math.Sqrt((27.368457010300922 / (41)) + (7.571560273277371 / (4))) is less than -2.016692199226234 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (41) + (4) - 2, .025) and -0.06158568436984263 = (469.22872333458963 - 498.1264953871379) / 469.22872333458963 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eperformanceautofiler[bot]\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-arm64`, `area-System.IO.Compression`, `tenet-performance`, `tenet-performance-benchmarks`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-08-05T15:02:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IE2ow",
                                           "createdAt":  "2022-08-09T10:59:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCqVMLg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adamsitnik",
                                                                               "createdAt":  "2022-08-10T08:38:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "The regression here is beyond our control at the moment. However, I\u0027m going to put this into the 8.0.0 milestone as we are going to be considering zlib options next year.",
                                           "updatedAt":  "2022-08-09T10:59:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IGQ2d",
                                           "createdAt":  "2022-08-09T16:24:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DrewScoggins",
                                           "body":  "Also regressed on\r\nwin-x64: https://github.com/dotnet/perf-autofiling-issues/issues/7165\r\nwin-x86: https://github.com/dotnet/perf-autofiling-issues/issues/7180\r\nwin-amd64: https://github.com/dotnet/perf-autofiling-issues/issues/7203",
                                           "updatedAt":  "2022-08-09T16:37:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iA8Fm",
                                           "createdAt":  "2023-07-20T18:38:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "carlossanlop",
                                           "body":  "We\u0027re not changing our zlib implementation at the moment, only taking updates on the native version. Moving to future as we are still exploring our options.",
                                           "updatedAt":  "2023-07-20T18:38:21Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Regressions in System.IO.Compression.Gzip",
        "labels":  [
                       "arch-arm64",
                       "area-System.IO.Compression",
                       "tenet-performance",
                       "tenet-performance-benchmarks"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/73770",
        "createdAt":  "2022-08-11T13:55:42Z",
        "number":  73770,
        "author":  "jnix-abk",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC4z6rw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "BenMcLean",
                                            "createdAt":  "2024-06-22T01:14:11Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-08-07T15:53:06Z",
        "body":  "### Background and motivation\r\n\r\nI am working with data that has packed objects that contain header bytes and then a ZLib blob.  The DeflateStream class has an internal buffer that advances the BaseStream to fetch data.  The problem is that the underlying Stream is then advanced past where the ZLib blob ends.  Currently, I have to use reflection to reach down into the object model to get the number of bytes that were not consumed in the buffer so I can re-wind the BaseStream to where the ZLib data ended.\r\nLike so:\r\n```csharp\r\n//Get the Available Bytes in the internal buffer\r\n//Reflection Path = deflateStream -\u003e _inflater / inflater -\u003e _zlibStream -\u003e AvailIn\r\nvar flags = BindingFlags.NonPublic | BindingFlags.Instance;\r\nvar inflater = deflateStream\r\n    .GetType()\r\n    .GetFields(flags)\r\n    .ToList()\r\n    .Find(x =\u003e x.Name == \"inflater\" || x.Name == \"_inflater\");\r\nvar inflaterInstance = inflater.GetValue(deflateStream);\r\nvar zlibStream = inflaterInstance.GetType().GetField(\"_zlibStream\", flags);\r\nvar zlibStreamInstance = zlibStream.GetValue(inflaterInstance);\r\nvar availIn = zlibStreamInstance.GetType().GetProperty(\"AvailIn\");\r\nvar availInValue = availIn.GetValue(zlibStreamInstance);\r\n\r\n//Rewind the BaseStream\r\ndeflateStream.BaseStream.Seek(-1 * (uint)availInValue, SeekOrigin.Current);\r\n```\r\n\r\n### API Proposal\r\n\r\nCan you add \r\n```csharp\r\n        public int AvailableInput =\u003e (int)_zlibStream.AvailIn;\r\n```\r\nbelow this:\r\nhttps://github.com/dotnet/runtime/blob/a3fb0d383adf98ee2fb2ab816c28735dc1caaba0/src/libraries/System.IO.Compression/src/System/IO/Compression/DeflateZLib/Inflater.cs#L43\r\n\r\nAnd then add \r\n```csharp\r\n        internal int RemainingBufferBytes\r\n        {\r\n            get\r\n            {\r\n                if (_inflater != null)\r\n                    return _inflater.AvailableInput;\r\n                else\r\n                    return -1;\r\n            }\r\n        }\r\n```\r\nhere:\r\nhttps://github.com/dotnet/runtime/blob/a3fb0d383adf98ee2fb2ab816c28735dc1caaba0/src/libraries/System.IO.Compression/src/System/IO/Compression/DeflateZLib/DeflateStream.cs#L120\r\n\r\nAnd then add \r\n```csharp\r\n        public int RemainingBufferBytes { get { throw null; } }\r\n```\r\nbelow:\r\nhttps://github.com/dotnet/runtime/blob/a3fb0d383adf98ee2fb2ab816c28735dc1caaba0/src/libraries/System.IO.Compression/ref/System.IO.Compression.cs#L131\r\n\r\nFinally add:\r\n```csharp\r\n        /// \u003csummary\u003eReturns the number of unused Input Buffer bytes.  This can be used to rewind the BaseStream when reading from mixed-use data.\u003c/summary\u003e\r\n        public int RemainingBufferBytes\r\n        {\r\n            get\r\n            {\r\n                if (_deflateStream != null)\r\n                    return _deflateStream.RemainingBufferBytes;\r\n                else\r\n                    return -1;\r\n            }\r\n        }\r\n```\r\nhere:\r\nhttps://github.com/dotnet/runtime/blob/d2c991effcdf543cc60632e5588984aa22dd6772/src/libraries/System.IO.Compression/src/System/IO/Compression/ZLibStream.cs#L66\r\n\r\nI have added these to a local copy and built the whole thing.  It works as expected.\r\n\r\n### API Usage\r\n\r\n```csharp\r\n//Read the compressed data\r\nZLibStream inflater = new ZLibStream(mixedUseStream, CompressionMode.Decompress, true);\r\nMemoryStream expandedContents = new MemoryStream();\r\ninflater.CopyTo(expandedContents);\r\n\r\n//Rewind the stream by the unused buffer bytes.\r\nmixedUseStream.Seek(-1 * inflater.RemainingBufferBytes, SeekOrigin.Current);\r\n\r\n//Close the stream\r\ninflater.Close();\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\nThere are no risks as this is simply exposing data to read that is already present.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvKMghA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5IPgbG",
                                           "createdAt":  "2022-08-11T13:55:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io-compression\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nI am working with data that has packed objects that contain header bytes and then a ZLib blob.  The DeflateStream class has an internal buffer that advances the BaseStream to fetch data.  The problem is that the underlying Stream is then advanced past where the ZLib blob ends.  Currently, I have to use reflection to reach down into the object model to get the number of bytes that were not consumed in the buffer so I can re-wind the BaseStream to where the ZLib data ended.\r\nLike so:\r\n```csharp\r\n//Get the Available Bytes in the internal buffer\r\n//Reflection Path = deflateStream -\u003e _inflater / inflater -\u003e _zlibStream -\u003e AvailIn\r\nvar flags = BindingFlags.NonPublic | BindingFlags.Instance;\r\nvar inflater = deflateStream\r\n    .GetType()\r\n    .GetFields(flags)\r\n    .ToList()\r\n    .Find(x =\u003e x.Name == \"inflater\" || x.Name == \"_inflater\");\r\nvar inflaterInstance = inflater.GetValue(deflateStream);\r\nvar zlibStream = inflaterInstance.GetType().GetField(\"_zlibStream\", flags);\r\nvar zlibStreamInstance = zlibStream.GetValue(inflaterInstance);\r\nvar availIn = zlibStreamInstance.GetType().GetProperty(\"AvailIn\");\r\nvar availInValue = availIn.GetValue(zlibStreamInstance);\r\n\r\n//Rewind the BaseStream\r\ndeflateStream.BaseStream.Seek(-1 * (uint)availInValue, SeekOrigin.Current);\r\n```\n\n### API Proposal\n\nCan you add \r\n```csharp\r\n        public int AvailableInput =\u003e (int)_zlibStream.AvailIn;\r\n```\r\nbelow this:\r\nhttps://github.com/dotnet/runtime/blob/a3fb0d383adf98ee2fb2ab816c28735dc1caaba0/src/libraries/System.IO.Compression/src/System/IO/Compression/DeflateZLib/Inflater.cs#L43\r\n\r\nAnd then add \r\n```csharp\r\n        internal int RemainingBufferBytes\r\n        {\r\n            get\r\n            {\r\n                if (_inflater != null)\r\n                    return _inflater.AvailableInput;\r\n                else\r\n                    return -1;\r\n            }\r\n        }\r\n```\r\nhere:\r\nhttps://github.com/dotnet/runtime/blob/a3fb0d383adf98ee2fb2ab816c28735dc1caaba0/src/libraries/System.IO.Compression/src/System/IO/Compression/DeflateZLib/DeflateStream.cs#L120\r\n\r\nAnd then add \r\n```csharp\r\n        public int RemainingBufferBytes { get { throw null; } }\r\n```\r\nbelow:\r\nhttps://github.com/dotnet/runtime/blob/a3fb0d383adf98ee2fb2ab816c28735dc1caaba0/src/libraries/System.IO.Compression/ref/System.IO.Compression.cs#L131\r\n\r\nFinally add:\r\n```csharp\r\n        /// \u003csummary\u003eReturns the number of unused Input Buffer bytes.  This can be used to rewind the BaseStream when reading from mixed-use data.\u003c/summary\u003e\r\n        public int RemainingBufferBytes\r\n        {\r\n            get\r\n            {\r\n                if (_deflateStream != null)\r\n                    return _deflateStream.RemainingBufferBytes;\r\n                else\r\n                    return -1;\r\n            }\r\n        }\r\n```\r\nhere:\r\nhttps://github.com/dotnet/runtime/blob/d2c991effcdf543cc60632e5588984aa22dd6772/src/libraries/System.IO.Compression/src/System/IO/Compression/ZLibStream.cs#L66\r\n\r\nI have added these to a local copy and built the whole thing.  It works as expected.\n\n### API Usage\n\n```csharp\r\n//Read the compressed data\r\nZLibStream inflater = new ZLibStream(mixedUseStream, CompressionMode.Decompress, true);\r\nMemoryStream expandedContents = new MemoryStream();\r\ninflater.CopyTo(expandedContents);\r\n\r\n//Rewind the stream by the unused buffer bytes.\r\nmixedUseStream.Seek(-1 * deflator.RemainingBufferBytes, SeekOrigin.Current);\r\n\r\n//Close the stream\r\ninflater.Close();\r\n```\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\nThere are no risks as this is simply exposing data to read that is already present.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejnix-abk\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.IO.Compression`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-08-11T13:55:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ISkOk",
                                           "createdAt":  "2022-08-12T07:43:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "@carlossanlop @Jozkee @stephentoub are there any reasons why we should not expose this data?",
                                           "updatedAt":  "2022-08-12T07:43:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JAsIN",
                                           "createdAt":  "2022-08-23T21:43:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jnix-abk",
                                           "body":  "Any update on this?",
                                           "updatedAt":  "2022-08-23T21:43:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Jm8dx",
                                           "createdAt":  "2022-09-02T00:45:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEdpJ8w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ericstj",
                                                                               "createdAt":  "2025-08-08T16:36:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e @stephentoub are there any reasons why we should not expose this data?\r\n\r\nI don\u0027t have fundamental objections to this, other than it \"feels\" strange.  If the goal is to avoid DeflateStream/GZipStream/ZLibStream consuming more of the source stream than actually contains the relevant data, could we have the streams seek backwards themselves once they\u0027re closed if the source is seekable?  Or would this be a better for fit https://github.com/dotnet/runtime/issues/39327 / https://github.com/dotnet/runtime/issues/62113 such that the developer is handling all of the interactions with the source stream themselves and knows exactly how many of the bytes were consumed by the decompression process?",
                                           "updatedAt":  "2022-09-02T00:45:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JvoHg",
                                           "createdAt":  "2022-09-05T15:38:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jnix-abk",
                                           "body":  "ZLib data does not have an easy size indicator that I could use to grab just the compressed data.  If I knew the size, I\u0027d just extract it and shove it in a MemoryStream.  That is why I need the above property exposed.",
                                           "updatedAt":  "2022-09-05T15:38:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CJ6xL",
                                           "createdAt":  "2024-06-22T01:15:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BenMcLean",
                                           "body":  "My current workaround for this is to catch and then ignore the `EndOfStreamException` which is thrown from attempting to read past the end of the stream.",
                                           "updatedAt":  "2024-06-22T01:16:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6i-nMN",
                                           "createdAt":  "2025-03-18T18:23:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jnix-abk",
                                           "body":  "\u003e My current workaround for this is to catch and then ignore the `EndOfStreamException` which is thrown from attempting to read past the end of the stream.\n\nHow does this solve the problem with needing to rewind the stream to go back to the unused part of the stream before it was consumed to buffering?",
                                           "updatedAt":  "2025-03-18T18:23:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6k5cdd",
                                           "createdAt":  "2025-03-31T15:02:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jnix-abk",
                                           "body":  "@adamsitnik , @stephentoub Can we get an update on this?",
                                           "updatedAt":  "2025-03-31T15:02:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6lLfoi",
                                           "createdAt":  "2025-04-02T03:31:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "@carlossanlop, what do you want to do here?",
                                           "updatedAt":  "2025-04-02T03:31:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6om21o",
                                           "createdAt":  "2025-04-24T20:17:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jnix-abk",
                                           "body":  "Using UnsafeAccessor was suggested, but since DeflateStream uses the Inflater class: https://github.com/dotnet/runtime/blob/cc777635b80459ab2ca8777f84c5cdeeac3e0edd/src/libraries/System.IO.Compression/src/System/IO/Compression/DeflateZLib/DeflateStream.cs#L21\nand Inflater is internal sealed:\nhttps://github.com/dotnet/runtime/blob/cc777635b80459ab2ca8777f84c5cdeeac3e0edd/src/libraries/System.IO.Compression/src/System/IO/Compression/DeflateZLib/Inflater.cs#L15\nthis code does not work since the class is not referencable:\n```csharp \n[UnsafeAccessor(UnsafeAccessorKind.Field, Name = \"_inflater\")]\nextern static ref System.IO.Compression.Inflater GetInflater(DeflateStream instance);\n```",
                                           "updatedAt":  "2025-04-24T20:17:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6uEGFO",
                                           "createdAt":  "2025-05-29T19:00:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jnix-abk",
                                           "body":  "Any update?",
                                           "updatedAt":  "2025-05-29T19:00:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68oyCE",
                                           "createdAt":  "2025-08-07T15:53:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jnix-abk",
                                           "body":  "@adamsitnik , @stephentoub Can we get an update on this?",
                                           "updatedAt":  "2025-08-07T15:53:06Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "[API Proposal]: System.IO.Compression: Exposing Remaining number of Input buffer bytes to support mixed data blocks.",
        "labels":  [
                       "api-suggestion",
                       "area-System.IO.Compression"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/82015",
        "createdAt":  "2023-02-12T18:34:46Z",
        "number":  82015,
        "author":  "atauenis",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-02-13T22:03:06Z",
        "body":  "### Description\n\nSeems that `System.Net.Http.HttpClient` in .NET 6.0 does not support HTTP compression algorithm `xpress` used by Microsoft WSUS servers (and not only). The WSUS servers are working over regular HTTP/HTTPS, so HttpClient can be used to access such servers. But in fact, it is not.\n\n### Reproduction Steps\n\nTry to download some metadata files from a WSUS server using .NET 6.0 app.\r\n\r\n```CS\r\nSocketsHttpHandler HTTPHandler = new();\r\nHttpClient HTTPClient = new(HTTPHandler);\r\nRequest = new HttpRequestMessage();\r\nRequest.RequestUri = \"http://WSUSSERVER/ClientWebService/client.asmx\";\r\nRequest.Method = new HttpMethod(\"POST\");\r\nRequest.Content = new StreamContent(RequestStream); //XML-SOAP file contents from Windows AU client\r\nRequest.Content.Headers.ContentType = \"text/xml\";\r\nvar resp = HTTPClient.SendAsync(Request);\r\nresp.Wait();\r\nreturn resp.Result;\r\n```\n\n### Expected behavior\n\nA correct `HttpResponseMessage` just like if use `HttpClient` with an other regular web server (Apache, Nginx, ASP.NET, etc).\n\n### Actual behavior\n\nGot an `AggregateException` with `System.IO.InvalidDataException: The archive entry was compressed using an unsupported compression method.` inside.\r\n\r\n```\r\n?ex.InnerException\r\n{\"The archive entry was compressed using an unsupported compression method.\"}\r\n    Data: {System.Collections.ListDictionaryInternal}\r\n    HResult: -2146233087\r\n    HelpLink: null\r\n    InnerException: null\r\n    Message: \"The archive entry was compressed using an unsupported compression method.\"\r\n    Source: \"System.IO.Compression\"\r\n    StackTrace: \"   at System.IO.Compression.Inflater.Inflate(FlushCode flushCode)\\r\\n   at System.IO.Compression.Inflater.ReadInflateOutput(Byte* bufPtr, Int32 length, FlushCode flushCode, Int32\u0026 bytesRead)\\r\\n   at System.IO.Compression.Inflater.ReadOutput(Byte* bufPtr, Int32 length, Int32\u0026 bytesRead)\\r\\n   at System.IO.Compression.Inflater.InflateVerified(Byte* bufPtr, Int32 length)\\r\\n   at System.IO.Compression.DeflateStream.CopyToStream.\u003cWriteAsyncCore\u003ed__10.MoveNext()\\r\\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter.GetResult()\\r\\n   at System.Net.Http.HttpConnection.\u003cCopyToContentLengthAsync\u003ed__112.MoveNext()\\r\\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\\r\\n   at System.Runti\r\nme.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult()\\r\\n   at System.Net.Http.HttpConnection.ContentLengthReadStream.\u003cCompleteCopyToAsync\u003ed__5.MoveNext()\\r\\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult()\\r\\n   at System.Net.Http.DecompressionHandler.DeflateDecompressedContent.ZLibOrDeflateStream.PeekFirstByteReadStream.\u003cCopyToAsync\u003ed__14.MoveNext()\\r\\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult()\\r\\n   at System.IO.Compression.DeflateStream.CopyToStream.\u003cCopyFromSourceToDestinationAsync\u003ed__6.MoveNext()\\r\\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult()\\r\\n   at System.Net.Http.DecompressionHandler.DeflateDecompressedContent.ZLibOrDeflateStream.\u003c\u003cCopyToAsync\u003eg__Core|11_0\u003ed.MoveNext()\\r\\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSucce\r\nssAndDebuggerNotification(Task task)\\r\\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult()\\r\\n   at System.Net.Http.DecompressionHandler.DecompressedContent.\u003cSerializeToStreamAsync\u003ed__6.MoveNext()\\r\\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult()\\r\\n   at System.Net.Http.HttpContent.\u003cLoadIntoBufferAsyncCore\u003ed__63.MoveNext()\\r\\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.\r\nGetResult()\\r\\n   at System.Net.Http.HttpClient.\u003c\u003cSendAsync\u003eg__Core|83_0\u003ed.MoveNext()\"\r\n    TargetSite: {ErrorCode Inflate(FlushCode)}\r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET 6.0.113, Windows, x64.\n\n### Other information\n\nTried to sniff the HTTP traffic and found that WSUS like to ignore the `Accept-Encoding` request header. \r\n\r\nIf the POSTed XML data is correct, it always return content with the `xpress` compression. Even if set `Accept-Encoding: gzip` or other well-spreaded, the server still returns content with the `xpress` compression algorithm. Also the original app which is designed to work with WSUS, the true Windows Update Client, specifies `Accept-Encoding: xpress`. Authors knew that WSUS won\u0027t return anything else.\r\n\r\nIf the XML data is incorrect, WSUS server returns a 500 error and understands `Accept-Encoding` header. This is why it\u0027s possible to get WSUS error message via any web browser.\r\n\r\nSo it is in half a WSUS bug (I\u0027m not a admin of the update server, so can\u0027t debug it). But, I think, .NET\u0027s HttpClient still should be able to work with such HTTP servers.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOVSkGIg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5VD9e5",
                                           "createdAt":  "2023-02-12T18:34:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nSeems that `System.Net.Http.HttpClient` in .NET 6.0 does not support HTTP compression algorithm `xpress` used by Microsoft WSUS servers (and not only). The WSUS servers are working over regular HTTP/HTTPS, so HttpClient can be used to access such servers. But in fact, it is not.\n\n### Reproduction Steps\n\nTry to download some metadata files from a WSUS server using .NET 6.0 app.\r\n\r\n```CS\r\nSocketsHttpHandler HTTPHandler = new();\r\nHttpClient HTTPClient = new(HTTPHandler);\r\nRequest = new HttpRequestMessage();\r\nRequest.RequestUri = \"http://WSUSSERVER/ClientWebService/client.asmx\";\r\nRequest.Method = new HttpMethod(\"POST\");\r\nRequest.Content = new StreamContent(RequestStream); //XML-SOAP file contents from Windows AU client\r\nRequest.Content.Headers.ContentType = \"text/xml\";\r\nvar resp = HTTPClient.SendAsync(Request);\r\nresp.Wait();\r\nreturn resp.Result;\r\n```\n\n### Expected behavior\n\nA correct `HttpResponseMessage` just like if use `HttpClient` with an other regular web server (Apache, Nginx, ASP.NET, etc).\n\n### Actual behavior\n\nGot an `AggregateException` with `System.IO.InvalidDataException: The archive entry was compressed using an unsupported compression method.` inside.\r\n\r\n```\r\n?ex.InnerException\r\n{\"The archive entry was compressed using an unsupported compression method.\"}\r\n    Data: {System.Collections.ListDictionaryInternal}\r\n    HResult: -2146233087\r\n    HelpLink: null\r\n    InnerException: null\r\n    Message: \"The archive entry was compressed using an unsupported compression method.\"\r\n    Source: \"System.IO.Compression\"\r\n    StackTrace: \"   at System.IO.Compression.Inflater.Inflate(FlushCode flushCode)\\r\\n   at System.IO.Compression.Inflater.ReadInflateOutput(Byte* bufPtr, Int32 length, FlushCode flushCode, Int32\u0026 bytesRead)\\r\\n   at System.IO.Compression.Inflater.ReadOutput(Byte* bufPtr, Int32 length, Int32\u0026 bytesRead)\\r\\n   at System.IO.Compression.Inflater.InflateVerified(Byte* bufPtr, Int32 length)\\r\\n   at System.IO.Compression.DeflateStream.CopyToStream.\u003cWriteAsyncCore\u003ed__10.MoveNext()\\r\\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter.GetResult()\\r\\n   at System.Net.Http.HttpConnection.\u003cCopyToContentLengthAsync\u003ed__112.MoveNext()\\r\\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\\r\\n   at System.Runti\r\nme.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult()\\r\\n   at System.Net.Http.HttpConnection.ContentLengthReadStream.\u003cCompleteCopyToAsync\u003ed__5.MoveNext()\\r\\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult()\\r\\n   at System.Net.Http.DecompressionHandler.DeflateDecompressedContent.ZLibOrDeflateStream.PeekFirstByteReadStream.\u003cCopyToAsync\u003ed__14.MoveNext()\\r\\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult()\\r\\n   at System.IO.Compression.DeflateStream.CopyToStream.\u003cCopyFromSourceToDestinationAsync\u003ed__6.MoveNext()\\r\\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult()\\r\\n   at System.Net.Http.DecompressionHandler.DeflateDecompressedContent.ZLibOrDeflateStream.\u003c\u003cCopyToAsync\u003eg__Core|11_0\u003ed.MoveNext()\\r\\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSucce\r\nssAndDebuggerNotification(Task task)\\r\\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult()\\r\\n   at System.Net.Http.DecompressionHandler.DecompressedContent.\u003cSerializeToStreamAsync\u003ed__6.MoveNext()\\r\\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult()\\r\\n   at System.Net.Http.HttpContent.\u003cLoadIntoBufferAsyncCore\u003ed__63.MoveNext()\\r\\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.\r\nGetResult()\\r\\n   at System.Net.Http.HttpClient.\u003c\u003cSendAsync\u003eg__Core|83_0\u003ed.MoveNext()\"\r\n    TargetSite: {ErrorCode Inflate(FlushCode)}\r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET 6.0.113, Windows, x64.\n\n### Other information\n\nTried to sniff the HTTP traffic and found that WSUS like to ignore the `Accept-Encoding` request header. \r\n\r\nIf the POSTed XML data is correct, it always return content with the `xpress` compression. Even if set `Accept-Encoding: gzip` or other well-spreaded, the server still returns content with the `xpress` compression algorithm. Also the original app which is designed to work with WSUS, the true Windows Update Client, specifies `Accept-Encoding: xpress`. Authors knew that WSUS won\u0027t return anything else.\r\n\r\nIf the XML data is incorrect, WSUS server returns a 500 error and understands `Accept-Encoding` header. This is why it\u0027s possible to get WSUS error message via any web browser.\r\n\r\nSo it is in half a WSUS bug (I\u0027m not a admin of the update server, so can\u0027t debug it). But, I think, .NET\u0027s HttpClient still should be able to work with such HTTP servers.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eatauenis\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net.Http`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-02-12T18:34:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VD-Zt",
                                           "createdAt":  "2023-02-12T18:52:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "It seems like this is a feature request to support a new compression algorithm.",
                                           "updatedAt":  "2023-02-12T18:52:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VD-9P",
                                           "createdAt":  "2023-02-12T19:01:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Is this format supported outside the Windows OS?\n\nhttps://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-xca/a8b7cb0a-92a6-4187-a23b-5e14273b96f8",
                                           "updatedAt":  "2023-02-12T19:01:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VD_zg",
                                           "createdAt":  "2023-02-12T19:18:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "HttpClientHandler / SocketsHttpHandler have built-in support for automatically decompressing responses compressed with the gzip, deflate, or brotli algorithms.  For anything else, you need to decompress manually: ensure the handler\u0027s AutomaticDecompression property is set to None (it should be by default), and then read the compressed data from the response stream and use whatever types are appropriate to decompress the data yourself.  As @davidfowl states, it\u0027s by design that other compression algorithms aren\u0027t implicitly used to decompress responses: if you\u0027re asking for additional algorithms to be used implicitly, that\u0027s a feature request.",
                                           "updatedAt":  "2023-02-12T19:18:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VGdoa",
                                           "createdAt":  "2023-02-13T11:11:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "atauenis",
                                           "body":  "Yes, this is a feature request. System.IO.Compression seems to not have implementation for any of three Xpress versions, so it isn\u0027t possible to decompress response even manually.",
                                           "updatedAt":  "2023-02-13T11:12:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VGf0I",
                                           "createdAt":  "2023-02-13T11:17:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e System.IO.Compression seems to not have implementation for any of three Xpress versions\r\n\r\nCorrect\r\n\r\n\u003e so it isn\u0027t possible to decompress response even manually\r\n\r\nIt is, just using a separate mplementation. Not every algorithm devs want to use need be or can be included in the core libraries. ",
                                           "updatedAt":  "2023-02-13T11:19:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VGgb8",
                                           "createdAt":  "2023-02-13T11:19:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io-compression\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nSeems that `System.Net.Http.HttpClient` in .NET 6.0 does not support HTTP compression algorithm `xpress` used by Microsoft WSUS servers (and not only). The WSUS servers are working over regular HTTP/HTTPS, so HttpClient can be used to access such servers. But in fact, it is not.\n\n### Reproduction Steps\n\nTry to download some metadata files from a WSUS server using .NET 6.0 app.\r\n\r\n```CS\r\nSocketsHttpHandler HTTPHandler = new();\r\nHttpClient HTTPClient = new(HTTPHandler);\r\nRequest = new HttpRequestMessage();\r\nRequest.RequestUri = \"http://WSUSSERVER/ClientWebService/client.asmx\";\r\nRequest.Method = new HttpMethod(\"POST\");\r\nRequest.Content = new StreamContent(RequestStream); //XML-SOAP file contents from Windows AU client\r\nRequest.Content.Headers.ContentType = \"text/xml\";\r\nvar resp = HTTPClient.SendAsync(Request);\r\nresp.Wait();\r\nreturn resp.Result;\r\n```\n\n### Expected behavior\n\nA correct `HttpResponseMessage` just like if use `HttpClient` with an other regular web server (Apache, Nginx, ASP.NET, etc).\n\n### Actual behavior\n\nGot an `AggregateException` with `System.IO.InvalidDataException: The archive entry was compressed using an unsupported compression method.` inside.\r\n\r\n```\r\n?ex.InnerException\r\n{\"The archive entry was compressed using an unsupported compression method.\"}\r\n    Data: {System.Collections.ListDictionaryInternal}\r\n    HResult: -2146233087\r\n    HelpLink: null\r\n    InnerException: null\r\n    Message: \"The archive entry was compressed using an unsupported compression method.\"\r\n    Source: \"System.IO.Compression\"\r\n    StackTrace: \"   at System.IO.Compression.Inflater.Inflate(FlushCode flushCode)\\r\\n   at System.IO.Compression.Inflater.ReadInflateOutput(Byte* bufPtr, Int32 length, FlushCode flushCode, Int32\u0026 bytesRead)\\r\\n   at System.IO.Compression.Inflater.ReadOutput(Byte* bufPtr, Int32 length, Int32\u0026 bytesRead)\\r\\n   at System.IO.Compression.Inflater.InflateVerified(Byte* bufPtr, Int32 length)\\r\\n   at System.IO.Compression.DeflateStream.CopyToStream.\u003cWriteAsyncCore\u003ed__10.MoveNext()\\r\\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter.GetResult()\\r\\n   at System.Net.Http.HttpConnection.\u003cCopyToContentLengthAsync\u003ed__112.MoveNext()\\r\\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\\r\\n   at System.Runti\r\nme.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult()\\r\\n   at System.Net.Http.HttpConnection.ContentLengthReadStream.\u003cCompleteCopyToAsync\u003ed__5.MoveNext()\\r\\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult()\\r\\n   at System.Net.Http.DecompressionHandler.DeflateDecompressedContent.ZLibOrDeflateStream.PeekFirstByteReadStream.\u003cCopyToAsync\u003ed__14.MoveNext()\\r\\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult()\\r\\n   at System.IO.Compression.DeflateStream.CopyToStream.\u003cCopyFromSourceToDestinationAsync\u003ed__6.MoveNext()\\r\\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult()\\r\\n   at System.Net.Http.DecompressionHandler.DeflateDecompressedContent.ZLibOrDeflateStream.\u003c\u003cCopyToAsync\u003eg__Core|11_0\u003ed.MoveNext()\\r\\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSucce\r\nssAndDebuggerNotification(Task task)\\r\\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult()\\r\\n   at System.Net.Http.DecompressionHandler.DecompressedContent.\u003cSerializeToStreamAsync\u003ed__6.MoveNext()\\r\\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult()\\r\\n   at System.Net.Http.HttpContent.\u003cLoadIntoBufferAsyncCore\u003ed__63.MoveNext()\\r\\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.\r\nGetResult()\\r\\n   at System.Net.Http.HttpClient.\u003c\u003cSendAsync\u003eg__Core|83_0\u003ed.MoveNext()\"\r\n    TargetSite: {ErrorCode Inflate(FlushCode)}\r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET 6.0.113, Windows, x64.\n\n### Other information\n\nTried to sniff the HTTP traffic and found that WSUS like to ignore the `Accept-Encoding` request header. \r\n\r\nIf the POSTed XML data is correct, it always return content with the `xpress` compression. Even if set `Accept-Encoding: gzip` or other well-spreaded, the server still returns content with the `xpress` compression algorithm. Also the original app which is designed to work with WSUS, the true Windows Update Client, specifies `Accept-Encoding: xpress`. Authors knew that WSUS won\u0027t return anything else.\r\n\r\nIf the XML data is incorrect, WSUS server returns a 500 error and understands `Accept-Encoding` header. This is why it\u0027s possible to get WSUS error message via any web browser.\r\n\r\nSo it is in half a WSUS bug (I\u0027m not a admin of the update server, so can\u0027t debug it). But, I think, .NET\u0027s HttpClient still should be able to work with such HTTP servers.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eatauenis\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.IO.Compression`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-02-13T11:19:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VIFOm",
                                           "createdAt":  "2023-02-13T15:53:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Did this work on .NET Framework?",
                                           "updatedAt":  "2023-02-13T15:53:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VIZcH",
                                           "createdAt":  "2023-02-13T16:41:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nSeems that `System.Net.Http.HttpClient` in .NET 6.0 does not support HTTP compression algorithm `xpress` used by Microsoft WSUS servers (and not only). The WSUS servers are working over regular HTTP/HTTPS, so HttpClient can be used to access such servers. But in fact, it is not.\n\n### Reproduction Steps\n\nTry to download some metadata files from a WSUS server using .NET 6.0 app.\r\n\r\n```CS\r\nSocketsHttpHandler HTTPHandler = new();\r\nHttpClient HTTPClient = new(HTTPHandler);\r\nRequest = new HttpRequestMessage();\r\nRequest.RequestUri = \"http://WSUSSERVER/ClientWebService/client.asmx\";\r\nRequest.Method = new HttpMethod(\"POST\");\r\nRequest.Content = new StreamContent(RequestStream); //XML-SOAP file contents from Windows AU client\r\nRequest.Content.Headers.ContentType = \"text/xml\";\r\nvar resp = HTTPClient.SendAsync(Request);\r\nresp.Wait();\r\nreturn resp.Result;\r\n```\n\n### Expected behavior\n\nA correct `HttpResponseMessage` just like if use `HttpClient` with an other regular web server (Apache, Nginx, ASP.NET, etc).\n\n### Actual behavior\n\nGot an `AggregateException` with `System.IO.InvalidDataException: The archive entry was compressed using an unsupported compression method.` inside.\r\n\r\n```\r\n?ex.InnerException\r\n{\"The archive entry was compressed using an unsupported compression method.\"}\r\n    Data: {System.Collections.ListDictionaryInternal}\r\n    HResult: -2146233087\r\n    HelpLink: null\r\n    InnerException: null\r\n    Message: \"The archive entry was compressed using an unsupported compression method.\"\r\n    Source: \"System.IO.Compression\"\r\n    StackTrace: \"   at System.IO.Compression.Inflater.Inflate(FlushCode flushCode)\\r\\n   at System.IO.Compression.Inflater.ReadInflateOutput(Byte* bufPtr, Int32 length, FlushCode flushCode, Int32\u0026 bytesRead)\\r\\n   at System.IO.Compression.Inflater.ReadOutput(Byte* bufPtr, Int32 length, Int32\u0026 bytesRead)\\r\\n   at System.IO.Compression.Inflater.InflateVerified(Byte* bufPtr, Int32 length)\\r\\n   at System.IO.Compression.DeflateStream.CopyToStream.\u003cWriteAsyncCore\u003ed__10.MoveNext()\\r\\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter.GetResult()\\r\\n   at System.Net.Http.HttpConnection.\u003cCopyToContentLengthAsync\u003ed__112.MoveNext()\\r\\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\\r\\n   at System.Runti\r\nme.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult()\\r\\n   at System.Net.Http.HttpConnection.ContentLengthReadStream.\u003cCompleteCopyToAsync\u003ed__5.MoveNext()\\r\\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult()\\r\\n   at System.Net.Http.DecompressionHandler.DeflateDecompressedContent.ZLibOrDeflateStream.PeekFirstByteReadStream.\u003cCopyToAsync\u003ed__14.MoveNext()\\r\\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult()\\r\\n   at System.IO.Compression.DeflateStream.CopyToStream.\u003cCopyFromSourceToDestinationAsync\u003ed__6.MoveNext()\\r\\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult()\\r\\n   at System.Net.Http.DecompressionHandler.DeflateDecompressedContent.ZLibOrDeflateStream.\u003c\u003cCopyToAsync\u003eg__Core|11_0\u003ed.MoveNext()\\r\\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSucce\r\nssAndDebuggerNotification(Task task)\\r\\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult()\\r\\n   at System.Net.Http.DecompressionHandler.DecompressedContent.\u003cSerializeToStreamAsync\u003ed__6.MoveNext()\\r\\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult()\\r\\n   at System.Net.Http.HttpContent.\u003cLoadIntoBufferAsyncCore\u003ed__63.MoveNext()\\r\\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.\r\nGetResult()\\r\\n   at System.Net.Http.HttpClient.\u003c\u003cSendAsync\u003eg__Core|83_0\u003ed.MoveNext()\"\r\n    TargetSite: {ErrorCode Inflate(FlushCode)}\r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET 6.0.113, Windows, x64.\n\n### Other information\n\nTried to sniff the HTTP traffic and found that WSUS like to ignore the `Accept-Encoding` request header. \r\n\r\nIf the POSTed XML data is correct, it always return content with the `xpress` compression. Even if set `Accept-Encoding: gzip` or other well-spreaded, the server still returns content with the `xpress` compression algorithm. Also the original app which is designed to work with WSUS, the true Windows Update Client, specifies `Accept-Encoding: xpress`. Authors knew that WSUS won\u0027t return anything else.\r\n\r\nIf the XML data is incorrect, WSUS server returns a 500 error and understands `Accept-Encoding` header. This is why it\u0027s possible to get WSUS error message via any web browser.\r\n\r\nSo it is in half a WSUS bug (I\u0027m not a admin of the update server, so can\u0027t debug it). But, I think, .NET\u0027s HttpClient still should be able to work with such HTTP servers.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eatauenis\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`, `feature-request`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-02-13T16:41:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VIZ0x",
                                           "createdAt":  "2023-02-13T16:42:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io-compression\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nSeems that `System.Net.Http.HttpClient` in .NET 6.0 does not support HTTP compression algorithm `xpress` used by Microsoft WSUS servers (and not only). The WSUS servers are working over regular HTTP/HTTPS, so HttpClient can be used to access such servers. But in fact, it is not.\n\n### Reproduction Steps\n\nTry to download some metadata files from a WSUS server using .NET 6.0 app.\r\n\r\n```CS\r\nSocketsHttpHandler HTTPHandler = new();\r\nHttpClient HTTPClient = new(HTTPHandler);\r\nRequest = new HttpRequestMessage();\r\nRequest.RequestUri = \"http://WSUSSERVER/ClientWebService/client.asmx\";\r\nRequest.Method = new HttpMethod(\"POST\");\r\nRequest.Content = new StreamContent(RequestStream); //XML-SOAP file contents from Windows AU client\r\nRequest.Content.Headers.ContentType = \"text/xml\";\r\nvar resp = HTTPClient.SendAsync(Request);\r\nresp.Wait();\r\nreturn resp.Result;\r\n```\n\n### Expected behavior\n\nA correct `HttpResponseMessage` just like if use `HttpClient` with an other regular web server (Apache, Nginx, ASP.NET, etc).\n\n### Actual behavior\n\nGot an `AggregateException` with `System.IO.InvalidDataException: The archive entry was compressed using an unsupported compression method.` inside.\r\n\r\n```\r\n?ex.InnerException\r\n{\"The archive entry was compressed using an unsupported compression method.\"}\r\n    Data: {System.Collections.ListDictionaryInternal}\r\n    HResult: -2146233087\r\n    HelpLink: null\r\n    InnerException: null\r\n    Message: \"The archive entry was compressed using an unsupported compression method.\"\r\n    Source: \"System.IO.Compression\"\r\n    StackTrace: \"   at System.IO.Compression.Inflater.Inflate(FlushCode flushCode)\\r\\n   at System.IO.Compression.Inflater.ReadInflateOutput(Byte* bufPtr, Int32 length, FlushCode flushCode, Int32\u0026 bytesRead)\\r\\n   at System.IO.Compression.Inflater.ReadOutput(Byte* bufPtr, Int32 length, Int32\u0026 bytesRead)\\r\\n   at System.IO.Compression.Inflater.InflateVerified(Byte* bufPtr, Int32 length)\\r\\n   at System.IO.Compression.DeflateStream.CopyToStream.\u003cWriteAsyncCore\u003ed__10.MoveNext()\\r\\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter.GetResult()\\r\\n   at System.Net.Http.HttpConnection.\u003cCopyToContentLengthAsync\u003ed__112.MoveNext()\\r\\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\\r\\n   at System.Runti\r\nme.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult()\\r\\n   at System.Net.Http.HttpConnection.ContentLengthReadStream.\u003cCompleteCopyToAsync\u003ed__5.MoveNext()\\r\\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult()\\r\\n   at System.Net.Http.DecompressionHandler.DeflateDecompressedContent.ZLibOrDeflateStream.PeekFirstByteReadStream.\u003cCopyToAsync\u003ed__14.MoveNext()\\r\\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult()\\r\\n   at System.IO.Compression.DeflateStream.CopyToStream.\u003cCopyFromSourceToDestinationAsync\u003ed__6.MoveNext()\\r\\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult()\\r\\n   at System.Net.Http.DecompressionHandler.DeflateDecompressedContent.ZLibOrDeflateStream.\u003c\u003cCopyToAsync\u003eg__Core|11_0\u003ed.MoveNext()\\r\\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSucce\r\nssAndDebuggerNotification(Task task)\\r\\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult()\\r\\n   at System.Net.Http.DecompressionHandler.DecompressedContent.\u003cSerializeToStreamAsync\u003ed__6.MoveNext()\\r\\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult()\\r\\n   at System.Net.Http.HttpContent.\u003cLoadIntoBufferAsyncCore\u003ed__63.MoveNext()\\r\\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.\r\nGetResult()\\r\\n   at System.Net.Http.HttpClient.\u003c\u003cSendAsync\u003eg__Core|83_0\u003ed.MoveNext()\"\r\n    TargetSite: {ErrorCode Inflate(FlushCode)}\r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET 6.0.113, Windows, x64.\n\n### Other information\n\nTried to sniff the HTTP traffic and found that WSUS like to ignore the `Accept-Encoding` request header. \r\n\r\nIf the POSTed XML data is correct, it always return content with the `xpress` compression. Even if set `Accept-Encoding: gzip` or other well-spreaded, the server still returns content with the `xpress` compression algorithm. Also the original app which is designed to work with WSUS, the true Windows Update Client, specifies `Accept-Encoding: xpress`. Authors knew that WSUS won\u0027t return anything else.\r\n\r\nIf the XML data is incorrect, WSUS server returns a 500 error and understands `Accept-Encoding` header. This is why it\u0027s possible to get WSUS error message via any web browser.\r\n\r\nSo it is in half a WSUS bug (I\u0027m not a admin of the update server, so can\u0027t debug it). But, I think, .NET\u0027s HttpClient still should be able to work with such HTTP servers.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eatauenis\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.IO.Compression`, `feature-request`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-02-13T16:42:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VJbQk",
                                           "createdAt":  "2023-02-13T19:30:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e Did this work on .NET Framework?\r\n\r\nNo",
                                           "updatedAt":  "2023-02-13T19:30:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VKQYi",
                                           "createdAt":  "2023-02-13T22:02:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I don\u0027t have the data but I\u0027m not sure why we\u0027d do anything with this in .NET (a cursory search didn\u0027t come up with much). Maybe the WinHttpHandler supports this out of the box?",
                                           "updatedAt":  "2023-02-13T22:03:06Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "HttpClient.SendAsync does not support server responses with xpress compression",
        "labels":  [
                       "area-System.IO.Compression",
                       "feature-request"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/83909",
        "createdAt":  "2023-03-24T22:34:33Z",
        "number":  83909,
        "author":  "RobSwDev",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-10-27T11:09:20Z",
        "body":  "### Description\n\nWe\u0027re in the process of upgrading from Net Framework 4.72 to Net6. \r\nUnfortunately, we\u0027ve come across one scenario where the performance in Net6 (or Net7) is terrible compared to Net Framework - in some cases taking 50-60 times as long\r\n\r\nI was able to hack a simple application together to reproduce something similar (Streams.zip attached). In this app, the slowdown seems to be x180 !!\r\n\r\n\u003e Using Net 4.0.30319.42000\r\n\u003e Writing 500000 lines took 00:00:00.8609345\r\n\u003e Reader 300000 lines took 00:00:00.1417714\r\n\u003e Using Net 6.0.15\r\n\u003e Writing 500000 lines took 00:00:00.4266431\r\n\u003e Reader 300000 lines took 00:00:25.5608638\r\n\u003e Using Net 7.0.4\r\n\u003e Writing 500000 lines took 00:00:00.4134467\r\n\u003e Reader 300000 lines took 00:00:23.6623887\r\n\u003e \r\n\r\n[Streams.zip](https://github.com/dotnet/runtime/files/11066943/Streams.zip)\r\n\n\n### Reproduction Steps\n\nCompile and run the attached project, both under Net472, Net6 and Net7.\n\n### Expected behavior\n\nPerformance on Net6 should be better than, or at least comparable to, that on Net472. That\u0027s what we have seen elsewhere.\n\n### Actual behavior\n\n\u003e Using Net 4.0.30319.42000\r\n\u003e Writing 500000 lines took 00:00:00.8609345\r\n\u003e Reader 300000 lines took 00:00:00.1417714\r\n\u003e Using Net 6.0.15\r\n\u003e Writing 500000 lines took 00:00:00.4266431\r\n\u003e Reader 300000 lines took 00:00:25.5608638\r\n\u003e Using Net 7.0.4\r\n\u003e Writing 500000 lines took 00:00:00.4134467\r\n\u003e Reader 300000 lines took 00:00:23.6623887\r\n\u003e \n\n### Regression?\n\nHuge performance regression in Net6/7 compared to NetFramework 4.72\n\n### Known Workarounds\n\nNone known. I would be very interested to learn any..\n\n### Configuration\n\nWindows 10 22H2 19045.2728\r\nComparing different versions of Net:\r\nNet472 vs Net 6.0.15 vs Net 7.0.4\r\nx64 configuration\r\n\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOkW79cQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5YbeRg",
                                           "createdAt":  "2023-03-24T23:44:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Wraith2",
                                           "body":  "I believe this is something which already has an open issue. If i\u0027m right then the reason is that the native code used to do the decompression changed to deal with large fast reads and it negatively impacted small reads. The workaround is to wrap the compression stream in a buffered stream which will buffer using larger reads.",
                                           "updatedAt":  "2023-03-24T23:44:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ybhox",
                                           "createdAt":  "2023-03-25T00:02:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io-compression\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nWe\u0027re in the process of upgrading from Net Framework 4.72 to Net6. \r\nUnfortunately, we\u0027ve come across one scenario where the performance in Net6 (or Net7) is terrible compared to Net Framework - in some cases taking 50-60 times as long\r\n\r\nI was able to hack a simple application together to reproduce something similar (Streams.zip attached). In this app, the slowdown seems to be x180 !!\r\n\r\n\u003e Using Net 4.0.30319.42000\r\n\u003e Writing 500000 lines took 00:00:00.8609345\r\n\u003e Reader 300000 lines took 00:00:00.1417714\r\n\u003e Using Net 6.0.15\r\n\u003e Writing 500000 lines took 00:00:00.4266431\r\n\u003e Reader 300000 lines took 00:00:25.5608638\r\n\u003e Using Net 7.0.4\r\n\u003e Writing 500000 lines took 00:00:00.4134467\r\n\u003e Reader 300000 lines took 00:00:23.6623887\r\n\u003e \r\n\r\n[Streams.zip](https://github.com/dotnet/runtime/files/11066943/Streams.zip)\r\n\n\n### Reproduction Steps\n\nCompile and run the attached project, both under Net472, Net6 and Net7.\n\n### Expected behavior\n\nPerformance on Net6 should be better than, or at least comparable to, that on Net472. That\u0027s what we have seen elsewhere.\n\n### Actual behavior\n\n\u003e Using Net 4.0.30319.42000\r\n\u003e Writing 500000 lines took 00:00:00.8609345\r\n\u003e Reader 300000 lines took 00:00:00.1417714\r\n\u003e Using Net 6.0.15\r\n\u003e Writing 500000 lines took 00:00:00.4266431\r\n\u003e Reader 300000 lines took 00:00:25.5608638\r\n\u003e Using Net 7.0.4\r\n\u003e Writing 500000 lines took 00:00:00.4134467\r\n\u003e Reader 300000 lines took 00:00:23.6623887\r\n\u003e \n\n### Regression?\n\nHuge performance regression in Net6/7 compared to NetFramework 4.72\n\n### Known Workarounds\n\nNone known. I would be very interested to learn any..\n\n### Configuration\n\nWindows 10 22H2 19045.2728\r\nComparing different versions of Net:\r\nNet472 vs Net 6.0.15 vs Net 7.0.4\r\nx64 configuration\r\n\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eRobSwDev\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.IO.Compression`, `untriaged`, `needs-area-label`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-03-25T00:02:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ybq8s",
                                           "createdAt":  "2023-03-25T01:03:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC4j78g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Wraith2",
                                                                               "createdAt":  "2023-03-25T01:21:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "RobSwDev",
                                                                               "createdAt":  "2023-03-25T10:07:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eminvergil",
                                                                               "createdAt":  "2023-03-26T11:28:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "Yes, this is a duplicate of https://github.com/dotnet/runtime/issues/39233.\r\n\r\nAs @Wraith2 says, a tradeoff was made in the underlying zlib implementation that significantly favors larger reads, and BinaryReader is doing very small reads.  I took your repro and turned it into a benchmarkdotnet repro.  When I run it locally, I get this:\r\n\r\n|         Method |            Runtime |        Mean |     Error |    StdDev |      Median | Ratio | RatioSD |\r\n|--------------- |------------------- |------------:|----------:|----------:|------------:|------:|--------:|\r\n| ReadUnbuffered |           .NET 7.0 | 1,457.49 ms | 33.427 ms | 94.828 ms | 1,485.36 ms |  6.90 |    0.71 |\r\n| ReadUnbuffered | .NET Framework 4.8 |   183.03 ms |  2.367 ms |  2.098 ms |   182.96 ms |  1.00 |    0.00 |\r\n|                |                    |             |           |           |             |       |         |\r\n|   ReadBuffered |           .NET 7.0 |    34.20 ms |  0.668 ms |  0.769 ms |    33.96 ms |  0.51 |    0.01 |\r\n|   ReadBuffered | .NET Framework 4.8 |    67.11 ms |  0.338 ms |  0.299 ms |    67.02 ms |  1.00 |    0.00 |\r\n\r\nMeaning, I don\u0027t see a 60x slowdown, but I do so an ~7x slowdown when tiny reads are performed, which is similar to the previously cited issue.  But then when a reasonably-sized reads are performed, in this repro by inserting a BufferedStream between the BinaryReader and the DeflateStream, the .NET 7 version ends up being twice as fast as the .NET Framework 4.8 version.  Net net, there\u0027s a significant performance benefit when the type is used as intended, even though there\u0027s unfortunately a slowdown when it\u0027s used in a manner not intended.  The workaround as cited is to ensure bigger reads are performed.  Note that both .NET Core and .NET Framework do a lot better when larger reads are performed, so it\u0027s a good practice, regardless.\r\n\r\n@jtkukunas, developers keep running into this, and I suspect it\u0027s likely only the tip of the iceberg, with more folks hitting it and just not realizing they\u0027re being significantly penalized.  Is there anything we can do about it in zlib to tweak that tradeoff?  It\u0027s a really big penalty to pay, even if we\u0027d prefer / encourage folks to perform larger reads.\r\n\r\n```C#\r\nusing BenchmarkDotNet.Attributes;\r\nusing BenchmarkDotNet.Running;\r\nusing System;\r\nusing System.IO;\r\nusing System.IO.Compression;\r\nusing System.Security.Cryptography;\r\n\r\npublic partial class Program\r\n{\r\n    static void Main(string[] args) =\u003e BenchmarkSwitcher.FromAssembly(typeof(Program).Assembly).Run(args);\r\n\r\n    private const int num = 500000;\r\n    private const int numRead = 300000;\r\n    private MemoryStream _ms;\r\n    private Encrypter _encrypter = new Encrypter();\r\n\r\n    [GlobalSetup]\r\n    public void Setup()\r\n    {\r\n        _ms = new MemoryStream();\r\n        using (var writeStream = _encrypter.CreateWriter(_ms))\r\n        using (var writer = new BinaryWriter(writeStream))\r\n        {\r\n            for (int i = 0; i \u003c num; i++)\r\n            {\r\n                writer.Write(true);\r\n                writer.Write(i);\r\n                writer.Write($\"abcdedcba{i}\");\r\n                writer.Write(i);\r\n            }\r\n        }\r\n    }\r\n\r\n    [Benchmark]\r\n    public void ReadUnbuffered()\r\n    {\r\n        _ms.Position = 0;\r\n        using (var readStream = _encrypter.CreateReader(_ms))\r\n        using (var reader = new BinaryReader(readStream))\r\n        {\r\n            for (int i = 0; i \u003c numRead; i++)\r\n            {\r\n                Read(reader, i);\r\n            }\r\n        }\r\n    }\r\n\r\n    [Benchmark]\r\n    public void ReadBuffered()\r\n    {\r\n        _ms.Position = 0;\r\n        using (var readStream = _encrypter.CreateReader(_ms))\r\n        using (var bufferedStream = new BufferedStream(readStream, 0x1000))\r\n        using (var reader = new BinaryReader(bufferedStream))\r\n        {\r\n            for (int i = 0; i \u003c numRead; i++)\r\n            {\r\n                Read(reader, i);\r\n            }\r\n        }\r\n    }\r\n\r\n    static void Read(BinaryReader reader, int expectedValue)\r\n    {\r\n        var b = reader.ReadBoolean();\r\n        b \u0026= reader.ReadInt32() == expectedValue;\r\n        reader.ReadString();\r\n        b \u0026= reader.ReadInt32() == expectedValue;\r\n        if (!b)\r\n            throw new InvalidOperationException();\r\n    }\r\n\r\n    public class Encrypter\r\n    {\r\n        private readonly Rijndael alg;\r\n\r\n        public Encrypter()\r\n        {\r\n            using (PasswordDeriveBytes passwordDeriveBytes = new PasswordDeriveBytes(\"To be or not to be\", null))\r\n            {\r\n                alg = Rijndael.Create();\r\n                alg.Key = passwordDeriveBytes.GetBytes(32);\r\n                alg.IV = passwordDeriveBytes.GetBytes(16);\r\n            }\r\n        }\r\n\r\n        public Stream CreateReader(Stream stream) =\u003e CreateStream(stream, true);\r\n        public Stream CreateWriter(Stream stream) =\u003e CreateStream(stream, false);\r\n\r\n        private Stream CreateStream(Stream stream, bool isRead)\r\n        {\r\n            ICryptoTransform transform = isRead ? this.alg.CreateDecryptor() : this.alg.CreateEncryptor();\r\n            var cryptoStream = new CryptoStream(stream, transform, isRead ? CryptoStreamMode.Read : CryptoStreamMode.Write, leaveOpen: true);\r\n            return new GZipStream(cryptoStream, isRead ? CompressionMode.Decompress : CompressionMode.Compress, leaveOpen: true);\r\n        }\r\n    }\r\n}\r\n```",
                                           "updatedAt":  "2023-03-25T01:03:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YcN_x",
                                           "createdAt":  "2023-03-25T10:47:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RobSwDev",
                                           "body":  "Ok - inserting the BufferedStream fixes the issue perfectly, and performance is then significantly better than Net6. \r\nEven Net472 performance is better than previous, so this is a change we should already have made.\r\nHappy to close the issue.\r\n\r\nI\u0027d question the 7x slowdown though: I ran your Benchmark and got the following:\r\n\r\n|         Method |     Mean |    Error |   StdDev |\r\n|--------------- |---------:|---------:|---------:|\r\n| ReadUnbuffered | 99.22 ms | 0.753 ms | 0.704 ms |\r\n|   ReadBuffered | 81.93 ms | 1.350 ms | 1.197 ms |\r\n\r\n|         Method |         Mean |      Error |     StdDev |\r\n|--------------- |-------------:|-----------:|-----------:|\r\n| ReadUnbuffered | 18,706.96 ms | 160.202 ms | 142.015 ms |\r\n|   ReadBuffered |     26.92 ms |   0.298 ms |   0.264 ms |\r\n\r\nGiving a 180x slowdown for unbuffered in Net7 vs Net472. Not sure if it\u0027s some quirk of my machine:\r\n\r\n\u003e BenchmarkDotNet=v0.13.5, OS=Windows 10 (10.0.19045.2728/22H2/2022Update)\r\n\u003e 11th Gen Intel Core i7-11850H 2.50GHz, 1 CPU, 16 logical and 8 physical cores\r\n\u003e .NET SDK=7.0.202\r\n\u003e   [Host]     : .NET 7.0.4 (7.0.423.11508), X64 RyuJIT AVX2\r\n\u003e   DefaultJob : .NET 7.0.4 (7.0.423.11508), X64 RyuJIT AVX2\r\n",
                                           "updatedAt":  "2023-03-25T10:47:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YcQvA",
                                           "createdAt":  "2023-03-25T11:47:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Do we have sufficiently discoverable breaking change doc for this? So some could self diagnose.",
                                           "updatedAt":  "2023-03-25T11:47:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Y9rpI",
                                           "createdAt":  "2023-03-31T20:19:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jtkukunas",
                                           "body":  "@stephentoub I\u0027m evaluating some ideas that might balance things out a bit. I guess we\u0027ll see.\r\n\r\nIn general though, I expect that the folks who actually care about performance aren\u0027t going to be doing these small operations anyway.",
                                           "updatedAt":  "2023-03-31T20:19:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZEjlE",
                                           "createdAt":  "2023-04-03T13:55:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e @stephentoub I\u0027m evaluating some ideas that might balance things\r\n\r\nThank you.\r\n\r\n\u003e I expect that the folks who actually care about performance aren\u0027t going to be doing these small operations anyway.\r\n\r\nOnce they\u0027re aware of the issue, maybe. The problem is we\u0027ve now seen a non-trivial number of real uses from devs reasonably interested in perf, where what they had before was sufficient but this change leads to an order of magnitude slowdown and it\u0027s no longer sufficient. I\u0027m concerned about them, and I\u0027m concerned about the likely many, many more folks that don\u0027t notice but that end up with much higher costs even so.",
                                           "updatedAt":  "2023-04-03T13:55:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fsQf8",
                                           "createdAt":  "2023-06-24T12:06:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "talanc",
                                           "body":  "I think I ran into the same underlying issue using ZipArchiveEntry.Open and then BinaryReader.\r\n\r\nMy code in production was taking an abnormally long time using .NET 6. I wrote a quick program to run and observed that .NET 6 took 18 seconds and .NET Framework took 0.5 seconds.\r\n\r\nI\u0027ve created a benchmark that demonstrates the issue:\r\nhttps://raw.githubusercontent.com/talanc/ZipBenchmarks/master/ZipBenchmarks.ZipArchiveEntryBenchmarks-20230624-204220.txt\r\nThe results here show that .NET 7/8 is 14x slower than .NET Framework.\r\n\r\nAs discovered above, wrapping the ZipArchiveEntry stream in a BufferedStream fixes the performance regression, and even gives .NET Framework slightly faster results too.\r\n\r\nI hope the underlying issue can be fixed. For now BufferedStream provides an easy workaround.",
                                           "updatedAt":  "2023-06-24T12:06:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fsdju",
                                           "createdAt":  "2023-06-24T13:22:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e I\u0027m evaluating some ideas that might balance things out a bit. I guess we\u0027ll see.\r\n\r\n@jtkukunas, how did this go? ",
                                           "updatedAt":  "2023-06-24T13:22:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gKahG",
                                           "createdAt":  "2023-06-29T15:02:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jtkukunas",
                                           "body":  "@stephentoub Not particularly well. At the end of the day, it\u0027s just the wrong tradeoff.\r\n\r\nIs there any way you can internally buffer things in the intermediate layers?",
                                           "updatedAt":  "2023-06-29T15:02:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gLc9_",
                                           "createdAt":  "2023-06-29T18:34:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Wraith2",
                                           "body":  "There is by using a `BufferedStream` but the users have to be aware that they need to make that change to avoid a performance regression.\r\n\r\nIs it possible to change the strategy of keeping the buffer full? At the moment if even a single byte is read the existing buffer will be shifted back and a new byte read in to keep it full. Could it be changed to re-fill the buffer only on a smaller number of course thresholds? perhaps a quarter? that should keep performance for large reads and avoid constant buffer copies for sequences of smaller reads.",
                                           "updatedAt":  "2023-06-29T18:34:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hqlTS",
                                           "createdAt":  "2023-07-17T17:14:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jtkukunas",
                                           "body":  "Let me rephrase what I\u0027m trying to say. You don\u0027t want to use an unbuffered stream here. You want a buffered stream, which will give you better performance. \r\n\r\nIf someone runs into this problem, it\u0027s highlighting an inefficiency in their code. Once they fix it, they\u0027ll get even better performance than before.\r\n\r\nI\u0027m sure you guys have channels for developer education.",
                                           "updatedAt":  "2023-07-17T17:14:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hrMQ0",
                                           "createdAt":  "2023-07-17T19:03:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEDsnlg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Wraith2",
                                                                               "createdAt":  "2023-07-17T19:17:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "talanc",
                                                                               "createdAt":  "2023-07-29T23:42:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TrayanZapryanov",
                                                                               "createdAt":  "2024-09-03T04:14:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "edwardneal",
                                                                               "createdAt":  "2025-01-23T06:10:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e If someone runs into this problem, it\u0027s highlighting an inefficiency in their code. Once they fix it, they\u0027ll get even better performance than before.\r\n\r\nThe problem is there are millions of developers out there with billions of lines of code.  They upgrade to .NET 6, and there\u0027s now an inefficiency that gets introduced into their application.  Yes, they should be doing it differently, but the only folks that will notice are the ones where it\u0027s so egregious that they seek out an answer.  My concern is that\u0027s the tip of the iceberg, and there\u0027s a much larger number of devs / apps that have or will just incur a meaningful performance regression silently, and not realize there was an existing opportunity to do better that is now costing them a whole lot more than it did before.",
                                           "updatedAt":  "2023-07-17T19:03:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6RblI2",
                                           "createdAt":  "2024-10-27T09:33:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "talanc",
                                           "body":  "I was curious about this in .NET 9 and it looks like it\u0027s been addressed.\n\nhttps://raw.githubusercontent.com/talanc/ZipBenchmarks/refs/heads/master/ZipBenchmarks.Summary-2024-10-27.txt\n\nUnlike net8, net9 is not an order of magnitude slower than net48.\nOverall net9 perf with zip (and no BufferedStream) is less than net48, but it allocs 90x less, so maybe it evens out...\n\nThere\u0027s some minor perf regressions from net8 to net9 but that just might be my workload.",
                                           "updatedAt":  "2024-10-27T09:33:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Rbv1x",
                                           "createdAt":  "2024-10-27T11:09:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Wraith2",
                                           "body":  "net 9 moves from using the no longer maintaned intel version of zlib to a newer and maintained version, see https://devblogs.microsoft.com/dotnet/performance-improvements-in-net-9/#compression\n\nIn some cases bufferedstream may still be a good idea but if you don\u0027t use it you will not have a really badly performing version on net9.",
                                           "updatedAt":  "2024-10-27T11:09:19Z"
                                       }
                                   ],
                         "totalCount":  15
                     },
        "title":  "Reading compressed encrypted Stream 60x slower on Net6 than Net Framework",
        "labels":  [
                       "area-System.IO.Compression"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/89445",
        "createdAt":  "2023-07-25T15:43:54Z",
        "number":  89445,
        "author":  "CarnaViire",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T10:40:42Z",
        "body":  "Discovered while fixing #86960. System.IO.Compression doesn\u0027t seem to utilize SafeHandle properly to have ref counts working during interop. See Stephen\u0027s comment below\r\n\r\n\u003e I took a peek. I\u0027m a little disheartened, not by your change, but by how SafeHandle is being used today in System.IO.Compression.  It\u0027s not really being used how it\u0027s intended to be used.  It\u0027s not storing a pointer to the data that\u0027s actually being used by the native code, so the SafeHandle isn\u0027t itself being passed through the LibraryImports, which means it\u0027s not being ref counted via DangerousAdd/Release the way it\u0027s meant to be as part of P/Invokes.  As such, using DangerousAdd/Release here isn\u0027t necessarily achieving the goal.\r\n\u003e\r\n\u003eWe might want to revert \"temporarily\" to your previous workaround, and then separately overhaul how SafeHandle is used by all of this code.\r\n\r\n_Originally posted by @stephentoub in https://github.com/dotnet/runtime/issues/87966#issuecomment-1620943952_\r\n \r\nAfter this issue is addressed, WebSockets should be updated to leverage DangerousAdd/Release",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYlphwg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5iWmHC",
                                           "createdAt":  "2023-07-25T15:45:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io-compression\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nDiscovered while fixing #86960. System.IO.Compression doesn\u0027t seem to utilize SafeHandle properly to have ref counts working during interop. See Stephen\u0027s comment below\r\n\r\n\u003e I took a peek. I\u0027m a little disheartened, not by your change, but by how SafeHandle is being used today in System.IO.Compression.  It\u0027s not really being used how it\u0027s intended to be used.  It\u0027s not storing a pointer to the data that\u0027s actually being used by the native code, so the SafeHandle isn\u0027t itself being passed through the LibraryImports, which means it\u0027s not being ref counted via DangerousAdd/Release the way it\u0027s meant to be as part of P/Invokes.  As such, using DangerousAdd/Release here isn\u0027t necessarily achieving the goal.\r\n\u003e\r\n\u003eWe might want to revert \"temporarily\" to your previous workaround, and then separately overhaul how SafeHandle is used by all of this code.\r\n\r\n_Originally posted by @stephentoub in https://github.com/dotnet/runtime/issues/87966#issuecomment-1620943952_\r\n \r\nAfter this issue is addressed, WebSockets should be updated to leverage DangerousAdd/Release\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eCarnaViire\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.IO.Compression`, `untriaged`, `needs-area-label`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-07-25T15:45:20Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Fix SafeHandle usage in System.IO.Compression",
        "labels":  [
                       "area-System.IO.Compression"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/91279",
        "createdAt":  "2023-08-29T02:04:16Z",
        "number":  91279,
        "author":  "Xyncgas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC6cqNQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Peter-Juhasz",
                                            "createdAt":  "2024-08-23T13:27:45Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-11-05T14:08:09Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nhttps://github.com/dotnet/aspnetcore/discussions/49276\r\nSystem.IO.Compression.Brotli not supported on Blazor webassembly\n\n### Describe the solution you\u0027d like\n\nCan we support System.IO.Compression.Brotli\n\n### Additional context\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOknb9Ng==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5lMlz2",
                                           "createdAt":  "2023-08-29T16:41:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io-compression\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nhttps://github.com/dotnet/aspnetcore/discussions/49276\r\nSystem.IO.Compression.Brotli not supported on Blazor webassembly\n\n### Describe the solution you\u0027d like\n\nCan we support System.IO.Compression.Brotli\n\n### Additional context\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eXyncgas\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `area-System.IO.Compression`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-29T16:41:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lMl5c",
                                           "createdAt":  "2023-08-29T16:42:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nhttps://github.com/dotnet/aspnetcore/discussions/49276\r\nSystem.IO.Compression.Brotli not supported on Blazor webassembly\n\n### Describe the solution you\u0027d like\n\nCan we support System.IO.Compression.Brotli\n\n### Additional context\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eXyncgas\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-29T16:42:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lM8so",
                                           "createdAt":  "2023-08-29T17:55:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lewing",
                                           "body":  "We left brotli out initially because there is relatively large unmanged component and it is available in the browser directly.  We could in theory make it work now when the workload is installed without increasing the default size.",
                                           "updatedAt":  "2023-08-29T17:55:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lM9Ec",
                                           "createdAt":  "2023-08-29T17:56:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lewing",
                                           "body":  "@Xyncgas can you explain your use case so we can help prioritize this issue?",
                                           "updatedAt":  "2023-08-29T17:56:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lPwlP",
                                           "createdAt":  "2023-08-30T07:20:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD5gUqQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nkast",
                                                                               "createdAt":  "2024-11-05T14:02:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Xyncgas",
                                           "body":  "I can use brotli in browser by sending bytes to javascript and as you know there\u0027s a bunch way in javascript to eat brotli, alternatively I can just write brotli myself or install a 3rd party library or I can simply not use brotli\r\n\r\nSo I don\u0027t really... well actually I have an app, that works on MAUI.Blazor but not blazor webassembly, so I used brotli, now I want to put it on the web, you know how MAUI and the browser are all cross platform technology, I should be able to use brotli and it\u0027s now the moment for me to decide the compression algorithm otherwise after I release the application everyone\u0027s data would break if I change the algorithm but don\u0027t worry about it\r\n\r\nI simply wanted for .NET to give me brotli so I don\u0027t have to grab it somewhere or not use it",
                                           "updatedAt":  "2023-08-31T03:20:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5l4js8",
                                           "createdAt":  "2023-09-07T01:19:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lyellick",
                                           "body":  "+1 for this issue. thanks",
                                           "updatedAt":  "2023-09-07T01:19:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Sdv02",
                                           "createdAt":  "2024-11-05T14:06:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nkast",
                                           "body":  "I\u0027ve added BrotliStream in a library to compress/decompress data files after seeing in the documentation that is [supported in .net6 \u0026 .net8](https://learn.microsoft.com/en-us/dotnet/api/system.io.compression.brotlistream?view=net-8.0#applies-to).  \nOnly to find out that the library will not work when I use it on the web and I am getting \u0027_ManagedError: System.IO.Compression.Brotli is not supported on this platform._\u0027 \n\nIs this planned to get fixed?",
                                           "updatedAt":  "2024-11-05T14:08:09Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "System.IO.Compression.Brotli not supported on Blazor webassembly, Can we support System.IO.Compression.Brotli",
        "labels":  [
                       "arch-wasm",
                       "area-System.IO.Compression"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/94465",
        "createdAt":  "2023-11-07T14:02:59Z",
        "number":  94465,
        "author":  "BaerMitUmlaut",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCz1QpQ==",
                          "nodes":  [
                                        {
                                            "content":  "ROCKET",
                                            "user":  "PabstMirror",
                                            "createdAt":  "2023-11-07T17:10:28Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-26T10:46:57Z",
        "body":  "### Description\n\nWhen unpacking certain ZIP files on Linux that were packed on Windows and had the \"pinned\" attribute set ([example file](https://github.com/dotnet/runtime/files/13280555/dotnet.zip)), `ZipFile.ExtractToDirectory` will cause the file to only have execute permissions (`------x---`).\n\n### Reproduction Steps\n\n- Pick any file\r\n- Set the \"pinned\" attribute through cmd: `attrib +p filename`\r\n- Pack as a ZIP file using 7zip (packing through Windows does not preserve the \"pinned\" attribute)\r\n- Unpack the file on Linux (or in a WSL owned folder like `/tmp`) using the following code:\r\n  ```cs\r\n  public class Program\r\n  {\r\n      private static void Main(string[] args)\r\n      {\r\n          ZipFile.ExtractToDirectory(args[0], args[0].Replace(\".zip\", \"\"), Encoding.UTF8);\r\n      }\r\n  }\r\n  ```\r\n- Verify the files permissions using `ls -l`:\r\n  ```\r\n  $ ls -l /tmp/dotnet\r\n  total 28\r\n  ------x--- 1 foobar foobar 24783 Nov  7 13:41 dotnet.jpg\r\n  ```\n\n### Expected behavior\n\nThe permissions should be `-rw-r--r--`, like any file that did not have the \"pinned\" attribute set when it was packed.\n\n### Actual behavior\n\nRead and write permissions are missing and an excutable permission is set (`------x---`).\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nRepacking the ZIP through the Windows packing tools or unsetting the \"pinned\" flag fixes the problem but cannot be done through code.\n\n### Configuration\n\n- .NET 6.0\r\n- Windows 10 / Ubuntu 20.04 in WSL\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHObssDEA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5rNC-E",
                                           "createdAt":  "2023-11-07T14:03:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io-compression\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nWhen unpacking certain ZIP files on Linux that were packed on Windows and had the \"pinned\" attribute set ([example file](https://github.com/dotnet/runtime/files/13280555/dotnet.zip)), `ZipFile.ExtractToDirectory` will cause the file to only have execute permissions (`------x---`).\n\n### Reproduction Steps\n\n- Pick any file\r\n- Set the \"pinned\" attribute through cmd: `attrib +p filename`\r\n- Pack as a ZIP file using 7zip (packing through Windows does not preserve the \"pinned\" attribute)\r\n- Unpack the file on Linux (or in a WSL owned folder like `/tmp`) using the following code:\r\n  ```cs\r\n  public class Program\r\n  {\r\n      private static void Main(string[] args)\r\n      {\r\n          ZipFile.ExtractToDirectory(args[0], args[0].Replace(\".zip\", \"\"), Encoding.UTF8);\r\n      }\r\n  }\r\n  ```\r\n- Verify the files permissions using `ls -l`:\r\n  ```\r\n  $ ls -l /tmp/dotnet\r\n  total 28\r\n  ------x--- 1 foobar foobar 24783 Nov  7 13:41 dotnet.jpg\r\n  ```\n\n### Expected behavior\n\nThe permissions should be `-rw-r--r--`, like any file that did not have the \"pinned\" attribute set when it was packed.\n\n### Actual behavior\n\nRead and write permissions are missing and an excutable permission is set (`------x---`).\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nRepacking the ZIP through the Windows packing tools or unsetting the \"pinned\" flag fixes the problem but cannot be done through code.\n\n### Configuration\n\n- .NET 6.0\r\n- Windows 10 / Ubuntu 20.04 in WSL\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eBaerMitUmlaut\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.IO.Compression`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-11-07T14:03:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rjNFd",
                                           "createdAt":  "2023-11-09T18:49:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gwell",
                                           "body":  "Also seeing this problem on Android when using `ZipFileExtensions.ExtractToFile(ZipArchiveEntry, String)`.",
                                           "updatedAt":  "2023-11-09T18:49:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5r3zoT",
                                           "createdAt":  "2023-11-14T08:59:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BaerMitUmlaut",
                                           "body":  "The fix looks fairly easy:\r\n- The `_versionMadeByPlatform` field needs a public getter property:\r\n  https://github.com/dotnet/runtime/blob/main/src/libraries/System.IO.Compression/src/System/IO/Compression/ZipArchiveEntry.cs#L22\r\n- This condition needs an additional check for the source platform:\r\n  https://github.com/dotnet/runtime/blob/main/src/libraries/System.IO.Compression.ZipFile/src/System/IO/Compression/ZipFileExtensions.ZipArchiveEntry.Extract.cs#L86\r\n\r\nI tried making a fix but was so far unable to get the tools completely running including a new test file, might try again later.",
                                           "updatedAt":  "2023-11-14T08:59:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5t3tww",
                                           "createdAt":  "2023-12-06T17:15:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "carlossanlop",
                                           "body":  "@BaerMitUmlaut thanks for trying to get a fix.\r\n\r\n\u003e I tried making a fix but was so far unable to get the tools completely running including a new test file, might try again later.\r\n\r\nWhere were you blocked? Can we help unblock you?\r\n\r\nI wonder if this issue is related to reparse points not being fully supported: https://learn.microsoft.com/en-us/windows/win32/fileio/reparse-points\r\n\r\nAt least one of the reparse points indicates that a file is from OneDrive.\r\n\r\n@dotnet/area-system-io have you folks worked with these files lately?\r\n",
                                           "updatedAt":  "2023-12-06T17:15:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5uyJQN",
                                           "createdAt":  "2023-12-16T00:32:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jozkee",
                                           "body":  "\u003e @dotnet/area-system-io have you folks worked with these files lately? \r\n\r\nNo, not really. But seems like P also means Sparse in older Windows versions https://superuser.com/questions/44812/windows-explorers-file-attribute-column-values/982721#982721.\r\n\r\n\u003e The permissions should be -rw-r--r--, like any file that did not have the \"pinned\"\r\n\r\nAre all other Windows attributes ignored when unzipping in Linux?",
                                           "updatedAt":  "2023-12-16T00:32:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5uywMQ",
                                           "createdAt":  "2023-12-16T11:46:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BaerMitUmlaut",
                                           "body":  "\u003e Are all other Windows attributes ignored when unzipping in Linux?\r\n\r\nI don\u0027t know, but there might be more that influence it. This one was just the one I found in the wild on a production system.",
                                           "updatedAt":  "2023-12-16T11:46:54Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "`ZipFile.ExtractToDirectory` causes faulty permissions with pinned files",
        "labels":  [
                       "area-System.IO.Compression"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/95909",
        "createdAt":  "2023-12-12T14:24:48Z",
        "number":  95909,
        "author":  "malaterre",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODBZk9Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MichalPetryka",
                                            "createdAt":  "2025-04-19T13:05:56Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-09-03T07:39:41Z",
        "body":  "### Background and motivation\n\nWe are using Zip as simple container for a bunch of image files (JPEG). We need to make sure that function only process STORE ZipArchiveEntry (aka NoCompression). Right now we compare `entry.CompressedLength` against `entry.Length` to deduce if the entry is really `STORE` (and not `DEFLATE`).\n\nIt would make sense to expose directly CompressionMethod as read-only for simplicity.\n\n### API Proposal\n\n```diff\npublic class ZipArchiveEntry\n{\n+        public CompressionMethodValues CompressionMethod { get; }\n}\n\n// also needs to expose the enum. Those are the currently used values in the codebase.\n+public enum CompressionMethodValues : ushort\n{\n+         Stored = 0x0,\n+         Deflate = 0x8,\n+         Deflate64 = 0x9,\n+         BZip2 = 0xC,\n+         Lzma = 0xE\n}\n\n```\n\n\n### API Usage\n\n```csharp\n        using var archive = ZipFile.Open(zipFileName, ZipArchiveMode.Read);\n        foreach (var entry in archive.Entries)\n        {\n            if (entry.CompressionMethod != CompressionMethodValues.Stored )\n              throw new NotImplementedException(\"Only process STORE type\")\n        }\n```\n\n\n### Alternative Designs\n\n```csharp\n        using var archive = ZipFile.Open(zipFileName, ZipArchiveMode.Read);\n        foreach (var entry in archive.Entries)\n        {\n            if (entry.CompressedLength != entry.Length)\n              throw new NotImplementedException(\"Only process STORE type\")\n        }\n```\n\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHObmViTQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5uZWJN",
                                           "createdAt":  "2023-12-12T14:24:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io-compression\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nWe are using Zip as simple container for a bunch of image files (JPEG). We need to make sure that function only process STORE ZipArchiveEntry (aka NoCompression). Right now we compare `entry.CompressedLength` against `entry.Length` to deduce if the entry is really `STORE` (and not `DEFLATE`).\r\n\r\nIt would make sense to expose directly CompressionMethod as read-only for simplicity.\n\n### API Proposal\n\n```csharp\r\nclass ZipArchiveEntry\r\n{\r\n  public CompressionMethodValues CompressionMethod\r\n        {\r\n            get { return _storedCompressionMethod; }\r\n        }\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\n        using var archive = ZipFile.Open(zipFileName, ZipArchiveMode.Read);\r\n        foreach (var entry in archive.Entries)\r\n        {\r\n            if (entry.CompressionMethod != CompressionMethodValues.Stored )\r\n              throw new NotImplementedException(\"Only process STORE type\")\r\n        }\r\n```\r\n\n\n### Alternative Designs\n\n```csharp\r\n        using var archive = ZipFile.Open(zipFileName, ZipArchiveMode.Read);\r\n        foreach (var entry in archive.Entries)\r\n        {\r\n            if (entry.CompressedLength != entry.Length)\r\n              throw new NotImplementedException(\"Only process STORE type\")\r\n        }\r\n```\r\n\n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emalaterre\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.IO.Compression`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-12-12T14:24:55Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[API Proposal]: Make ZipArchiveEntry.CompressionMethod public",
        "labels":  [
                       "api-suggestion",
                       "area-System.IO.Compression"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/101243",
        "createdAt":  "2024-04-18T14:42:37Z",
        "number":  101243,
        "author":  "PaulusParssinen",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODEnnhg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KalleOlaviNiemitalo",
                                            "createdAt":  "2024-04-19T04:58:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "am11",
                                            "createdAt":  "2024-04-19T10:22:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "scorteanucosmin",
                                            "createdAt":  "2024-04-20T13:35:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "insinfo",
                                            "createdAt":  "2024-04-23T16:42:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SirParser",
                                            "createdAt":  "2024-05-15T08:39:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "edwardneal",
                                            "createdAt":  "2024-05-18T13:29:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SommerEngineering",
                                            "createdAt":  "2024-08-06T12:50:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "reidmiller-geotab",
                                            "createdAt":  "2024-09-05T17:51:30Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "udlose",
                                            "createdAt":  "2024-10-08T20:19:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "udlose",
                                            "createdAt":  "2024-10-08T20:19:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KLuuKer",
                                            "createdAt":  "2024-10-15T08:14:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "LarinLive",
                                            "createdAt":  "2025-01-09T13:54:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "manfromarce",
                                            "createdAt":  "2025-06-24T12:20:43Z"
                                        }
                                    ],
                          "totalCount":  13
                      },
        "updatedAt":  "2025-03-13T16:58:13Z",
        "body":  "### Background and motivation\n\nTo unblock #1544, in the issue [@ericstj suggested adding this method overload](https://github.com/dotnet/runtime/issues/1544#issuecomment-468016815), I\u0027ll quote his good reasoning/background here:\n\n\u003e I\u0027ve noticed the same. In general ZipArchiveEntry.Open is very non-intuitive in its behavior.\n\u003e \n\u003e For read only / write only you get a wrapped DeflateStream which doesn\u0027t tell you the length of the stream nor permit you to seek it. For read/write (update) ZipArchiveEntry will read and decompress the entire entry into memory (in fact, into a memory stream backed by a single contiguous managed array) so that you have a seek-able representation of the file. Once opened for update the file is then written back to the archive when the archive itself is closed.\n\u003e \n\u003e I agree with @.qmfrederik here that we need a better API. Rather than rely solely on the archive\u0027s open mode we should allow for the individual call\u0027s to Open to specify what kind of stream they want. We can then check that against how the archive was opened in case it is incompatible and throw. Consider the addition:  \n\n### API Proposal\n\n```csharp\nnamespace System.IO.Compression;\n\npublic partial class ZipArchiveEntry\n{\n    public Stream Open(FileAccess access);\n}\n```\n\n\u003e For an archive opened with ZipArchiveMode.Update we could allow FileAccess.Read, FileAccess.Write, or FileAccess.ReadWrite, where only the latter would do the MemoryStream expansion. Read and write would be have as they did today. In addition to solving the OP issue, this would address the case where someone is opening an archive for Update and simply adding a single file: we shouldn\u0027t need to copy that uncompressed data into memory just to write it to the archive.\n\n### API Usage\n\nFor example, the blocked usage in #101238 would with this API be:\n\n```csharp\nusing FileStream zipToOpen = new FileStream(\"release.zip\", FileMode.OpenOrCreate);\nusing ZipArchive archive = new ZipArchive(zipToOpen, ZipArchiveMode.Update);\n\nZipArchiveEntry readmeEntry = archive.CreateEntry(\"Readme.txt\");\n// NEW: Avoid in-memory MemoryStream buffer by specifying the Stream operation is write-only.\nusing StreamWriter writer = new StreamWriter(readmeEntry.Open(FileAccess.Write));\n\nfor (int i = 0; i \u003c 250000000; i++)\n{\n    writer.WriteLine(\"Information about this package.\");\n    writer.WriteLine(\"========================\");\n}\n```\n\n### Alternative Designs\n\nI believe the original issue had discussion about \"fixing\" the parameterless overload to change behavior? Didn\u0027t read too much into that as it is the \"expensive\" alternative. This alternative would unblock the indirect OOB consumers though.  \n\n### Risks\n\nNone?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmcug2A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc57BxG8",
                                           "createdAt":  "2024-04-18T14:42:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io-compression\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-18T14:42:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Zy6DY",
                                           "createdAt":  "2025-01-09T13:57:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEKl56A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kcamp",
                                                                               "createdAt":  "2025-03-19T19:17:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "LarinLive",
                                           "body":  "Are there any news/plans about this proposal? The solution for the https://github.com/dotnet/Open-XML-SDK/issues/244 issue is still being **waited for seven years**.",
                                           "updatedAt":  "2025-01-09T13:58:46Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[API Proposal]: Add ZipArchiveEntry.Open overload",
        "labels":  [
                       "api-suggestion",
                       "area-System.IO.Compression"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/102127",
        "createdAt":  "2024-05-12T01:18:02Z",
        "number":  102127,
        "author":  "edwardneal",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-03T21:57:15Z",
        "body":  "This issue straddles System.IO.Compression and System.IO.Packaging, and is a behavioural regression between .NET and the .NET Framework.\r\n\r\nWe can use System.IO.Packaging to create a new `Package` and add `PackagePart`s to it, specifying a `CompressionOption` on these PackageParts. When we write the Package to a ZIP file via `ZipArchive`, the new PackagePart is turned into a `ZipArchiveEntry` and the PackagePart\u0027s CompressionOption is mapped to a `CompressionLevel`. ZipArchiveEntry then passes that through to create the correct deflation stream and to set bits 1 \u0026 2 in the file header\u0027s \"general purpose bit flags\". This behaviour works well.\r\n\r\nThe regression here comes when we load a Package from an existing stream and start to inspect each PackagePart\u0027s CompressionOption. In .NET Framework, Package [calls](https://referencesource.microsoft.com/#WindowsBase/Base/System/IO/Packaging/ZipPackage.cs,284) [`GetCompressionOptionFromZipFileInfo`](https://referencesource.microsoft.com/#WindowsBase/Base/System/IO/Packaging/ZipPackage.cs,595), which maps bits 1 \u0026 2 to a CompressionOption. Similarly, in .NET Package [calls](https://github.com/dotnet/runtime/blob/main/src/libraries/System.IO.Packaging/src/System/IO/Packaging/ZipPackage.cs#L171) [`GetCompressionOptionFromZipFileInfo`](https://github.com/dotnet/runtime/blob/main/src/libraries/System.IO.Packaging/src/System/IO/Packaging/ZipPackage.cs#L459). This always returns `CompressionOption.Normal`, because ZipArchiveEntry doesn\u0027t expose its CompressionLevel publicly.\r\n\r\nWhen the issue\u0027s closed, I\u0027d like to be able to persist a Package containing a PackagePart with a given CompressionOption, then be able to read that CompressionOption back upon reading it.\r\n\r\nThere are three parts to this issue:\r\n1. An API request: I\u0027d like ZipArchiveEntry to provide a read-only `CompressionLevel` property, and for the CompressionLevel enumeration to include a new member named `Fast`;\r\n2. Confirmation on the mapping from System.IO.Compression\u0027s CompressionLevel to System.IO.Packaging\u0027s CompressionOption;\r\n3. Discussion on the proposed new CompressionLevel member, and one CompressionOption/CompressionLevel mapping which is ambiguous without it.\r\n\r\n### API request\r\n\r\nThis request is primarily for a read-only CompressionLevel property on ZipArchiveEntry. I\u0027ve chosen not to make it read-write - `PackagePart.CompressionOption` is read-only, so it\u0027s not needed for this specific use case. It might also imply that a ZIP file would be flagged for decompression and recompression (or simply decompressed) by setting it: I\u0027m not sure how ZipArchiveEntry would handle a situation where the entry\u0027s header specifies one compression level, but the entry data is compressed with another; there\u0027d definitely be a problem if its compression level was changed to NoCompression!\r\n\r\nI\u0027ve also rolled in a new enumeration member on CompressionLevel to address an ambiguous CompressionOption/CompressionLevel mapping.\r\n\r\n```diff\r\nnamespace System.IO.Compression;\r\n\r\npublic class ZipArchiveEntry\r\n{\r\n+   public CompressionLevel CompressionLevel =\u003e _compressionLevel;\r\n}\r\n\r\npublic enum CompressionLevel\r\n{\r\n+   Fast = 4\r\n}\r\n```\r\n\r\n### CompressionLevel -\u003e CompressionOption mapping\r\n\r\nThis is different between .NET and .NET Framework, largely because .NET Framework has an extra member in its DeflateOptionEnum which doesn\u0027t neatly map to the current .NET equivalent of CompressionLevel at the moment.\r\n\r\nCurrently, the mapping from CompressionOption to CompressionLevel when writing a PackagePart is:\r\n\r\n| Specified CompressionOption | .NET CompressionLevel | .NET Standard CompressionLevel | .NET Framework DeflateOptionEnum |\r\n| -- | -- | -- | -- |\r\n| NotCompressed | NoCompression | NoCompression | None |\r\n| Normal | Optimal | Optimal | Normal |\r\n| Maximum | SmallestSize | Optimal | Maximum |\r\n| Fast | Fastest | Fastest | Fast |\r\n| SuperFast | Fastest | Fastest | SuperFast |\r\n\r\nIf the new CompressionLevel enumeration member is approved, I\u0027d change CompressionOption.Fast to map to CompressionLevel.Fast.\r\n\r\n.NET Standard has a different mapping for CompressionOption.Maximum to avoid introducing a breaking change for .NET Framework applications referencing System.IO.Packaging.\r\n\r\nThe mapping from CompressionLevel to CompressionOption when reading a Package needs to roughly correlate with the table above so that values roundtrip properly.\r\n\r\n| Read CompressionLevel | Resultant CompressionOption |\r\n| -- | -- | \r\n| Optimal | Normal |\r\n| Fast (if approved) | Fast |\r\n| Fastest | SuperFast |\r\n| NoCompression | NotCompressed |\r\n| SmallestSize | Maximum |\r\n\r\nTo continue to avoid a breaking change for .NET Framework applications, .NET Standard would continue to return Optimal in all cases.\r\n\r\n### New CompressionLevel member, otherwise-ambiguous CompressionOption/CompressionLevel mapping\r\n\r\nAt present, creating a PackagePart with a CompressionOption of Fast or SuperFast will result in a ZipArchiveEntry with a CompressionLevel of Fastest, setting general purpose bits 1 \u0026 2. This ambiguity means that somebody could create a PackagePart with a CompressionOption of Fast, and it would subsequently be read back with a CompressionOption of Fastest.\r\n\r\nThis ambiguity arises because the CompressionLevel enumeration doesn\u0027t have a member named Fast (or something similarly named, halfway between Optimal and Fastest.) This isn\u0027t ideal, so my API request asks for this new member.\r\n\r\nAdding a new CompressionLevel also requires selecting the correct ZLib compression level, and while I\u0027d guess that 4 would be a good compromise between Optimal (6) and Fastest (1), I don\u0027t have anything quantitative to back that. I\u0027m also not sure what impact the pending switch of ZLib implementation would have on this.\r\n\r\ncc @dotnet/area-system-io-compression @carlossanlop ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOfrLGvQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc59iDvk",
                                           "createdAt":  "2024-05-12T01:18:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io-compression\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-12T01:18:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-k59l",
                                           "createdAt":  "2024-05-21T23:47:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Why does this matter if the value was completely ignored by the underlying implementation?  Seems like a lot of effort just to flow an enum to pass a test.  What\u0027s is the material side effect of not having this?  What\u0027s broken?",
                                           "updatedAt":  "2024-05-21T23:47:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-moCS",
                                           "createdAt":  "2024-05-22T07:23:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "edwardneal",
                                           "body":  "It\u0027s definitely a corner case, but it\u0027s not solely to pass a test. This is the API proposal needed to fix two bugs, both of which are regressions between .NET Framework and .NET:\r\n1. When creating a package part, .NET Framework maps the part\u0027s CompressionOption to a CompressionLevel according to the OPC specification. .NET Core does not, because it doesn\u0027t have an appropriate CompressionLevel enumeration value to use. This is why I\u0027ve asked to add `CompressionLevel.Fast`.\r\n2. Although both .NET and .NET Framework support retrieving the package part\u0027s CompressionOption, only .NET Framework actually returns the real value. I\u0027d describe this as a bug - .NET\u0027s PackagePart.CompressionOption returns a misleading value to clients. I\u0027ve asked for a public `ZipArchiveEntry.CompressionLevel` property so that I can fix this.\r\n",
                                           "updatedAt":  "2024-05-22T07:23:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-q3vN",
                                           "createdAt":  "2024-05-22T16:06:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "\u003e  only .NET Framework actually returns the real value\r\n\r\nBut it\u0027s not actually a real value.  It\u0027s just a persisted value.  The implementation never honored it.",
                                           "updatedAt":  "2024-05-22T16:06:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-shWz",
                                           "createdAt":  "2024-05-22T19:30:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "cc @carlossanlop since he was helping with https://github.com/dotnet/runtime/pull/98278\r\n\r\nAt the end of the day I\u0027m not opposed to making things look more compatible - just making sure that we spend our energy in the places that matter most.  @edwardneal if you feel this is important and a good use of time we can help you get a proposal reviewed.",
                                           "updatedAt":  "2024-05-22T19:30:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-ssa9",
                                           "createdAt":  "2024-05-22T19:59:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODlXvCA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wstaelens",
                                                                               "createdAt":  "2024-06-12T08:53:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "edwardneal",
                                           "body":  "Thanks @ericstj. It\u0027s not preventing me from porting of anything from .NET Framework to .NET - although the constant value returned by PackagePart.CompressionOption is a bug, it\u0027s one which has been around since the original code was ported in 2015. I think it\u0027ll be slightly more noticeable now that the CompressionOption we specify when adding a PackagePart is mapped through to the correct bits in the ZIP entry.\r\n\r\nIf time\u0027s particularly short with .NET 9\u0027s release schedule then it can probably wait for .NET 10, or any \"washup\" API reviews. Given the choice of time from someone in the Packaging area, I\u0027d personally prioritise #97898 over this - it fixes a bug which completely prevents .NET applications from reading valid XPS packages, and which seems to be blocking a real-world application.",
                                           "updatedAt":  "2024-05-22T19:59:39Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "[API Proposal] Round-trip `PackagePart.CompressionOption`, add `CompressionLevel.Fast`",
        "labels":  [
                       "area-System.IO.Compression"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/102306",
        "createdAt":  "2024-05-16T07:04:25Z",
        "number":  102306,
        "author":  "dos-ise",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC6s94A==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "RenderMichael",
                                            "createdAt":  "2024-05-18T21:26:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "austinw-fineart",
                                            "createdAt":  "2024-06-13T08:51:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ImoutoChan",
                                            "createdAt":  "2024-09-02T12:44:40Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2024-07-24T17:27:48Z",
        "body":  "Now that dotnetzip is no longer maintained. We want to migrate to System.IO.Compression\r\nUnfortunately we are blocked by the missing support of SplitArchive.\r\n\r\nAre there any plans to add support for this?\r\n\r\n[DotNetZip](https://github.com/haf/DotNetZip.Semverd)\r\n[SplitArchives](https://github.com/eropple/dotnetzip/blob/master/Zip%20Tests/SplitArchives.cs)\r\n\r\nOh and the other missing feature is  the support of password proteced archives. :)\r\n[Password support](https://github.com/dotnet/runtime/issues/1545)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOfgSJ9Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5-BIn1",
                                           "createdAt":  "2024-05-16T07:04:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io-compression\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-16T07:04:50Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Add SplitArchive support to ZipArchive",
        "labels":  [
                       "area-System.IO.Compression",
                       "feature-request",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/104799",
        "createdAt":  "2024-07-12T14:45:11Z",
        "number":  104799,
        "author":  "jkotas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC5YuaQ==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "am11",
                                            "createdAt":  "2024-07-15T18:34:53Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-07-12T15:29:36Z",
        "body":  "See #104776 for context",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhKuBoA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Eqjy5",
                                           "createdAt":  "2024-07-12T14:45:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io-compression\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-12T14:45:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Eq4Gg",
                                           "createdAt":  "2024-07-12T15:29:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "cc @dotnet/samsung ",
                                           "updatedAt":  "2024-07-12T15:29:35Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[RISC-V] Turn on \"V\" in zlib-ng compilation",
        "labels":  [
                       "area-System.IO.Compression",
                       "arch-riscv"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/109064",
        "createdAt":  "2024-10-21T06:50:57Z",
        "number":  109064,
        "author":  "ekalchev",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODLMl4w==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Nevca",
                                            "createdAt":  "2024-10-21T08:13:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ericstj",
                                            "createdAt":  "2024-10-21T17:40:43Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "Copilot",
                                            "createdAt":  "2025-08-14T10:10:29Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2025-08-14T10:10:52Z",
        "body":  "I’ve encountered a significant limitation with the internal SubReadStream class in System.IO.Compression. When calling ZipArchiveEntry.Open() with a ZipArchive in ZipArchiveMode.Read, the returned SubReadStream instance is non-seekable. This behavior presents problems in specific scenarios, particularly when dealing with nested archives\n\n## Problem Details\nIn my use case, I have an [HttpStream ](https://github.com/espresso3389/HttpStream) class that inherits from Stream and uses HttpClient with byte range requests to fetch remote data. My task is to extract an AppxManifest.xml file from a .msix file stored within a .msixbundle file on an HTTP server. Both file types are essentially zip archives.\n\nCurrently, because SubReadStream is non-seekable, creating a new ZipArchive from a ZipArchiveEntry within a non-seekable stream results in the entire stream being copied into a new MemoryStream. This is highly inefficient over HTTP and impractical and defeat the whole purpose of using streams, especially when the target file is small (1 KB) and the containing archive is large.\n\n## Real-World Impact\n\n### Inefficiency\nThe entire stream must be read into memory, which can be resource-intensive and slow.\n\n### Performance\nThere’s a significant overhead when dealing with large files or archives, especially over network streams, because they must be first downloaded.\n\n## Workaround\nI was able to bypass this limitation using reflection to access private fields within SubReadStream to determine its bounds. This allowed me to create my own [BoundStream](https://github.com/jstedfast/MimeKit/blob/af2d2616fb9dbd4e6d759a00b8767bdae447b856/MimeKit/IO/BoundStream.cs#L42) that is seekable, then I create ZipArchive from this BoundStream using the SuperStream and the bounds from SubReadStream. Here’s a snippet of the workaround:\n\n```CSharp\nprivate (long, long) ReadSubStreamBounds(Stream subStream)\n{\n    long startInSuperStream;\n    long endInSuperStream;\n\n    Type subReadStreamType = subStream.GetType();\n    FieldInfo startField = subReadStreamType.GetField(\"_startInSuperStream\", BindingFlags.NonPublic | BindingFlags.Instance);\n    FieldInfo endField = subReadStreamType.GetField(\"_endInSuperStream\", BindingFlags.NonPublic | BindingFlags.Instance);\n\n    if (startField != null \u0026\u0026 endField != null)\n    {\n        startInSuperStream = (long)startField.GetValue(subStream);\n        endInSuperStream = (long)endField.GetValue(subStream);\n\n        return (startInSuperStream, endInSuperStream);\n    }\n\n    throw new Exception(\"The internal structure of the SubReadStream class has changed, and the expected fields are not present. \" +\n                \"This might be due to a change in the Microsoft internal implementation. \" +\n                \"Please review and update this code to align with the new internal details. \" +\n                \"Using reflection to access private fields is inherently fragile and should be used with caution.\");\n}\n\nprivate async Task\u003cStream\u003e GetAppxManifestStreamFromMsixOrBundleStreamAsync(Stream stream, string filePath, CancellationToken cancellationToken)\n{\n    Exception innerException;\n    string fileNameWithoutExtension = Path.GetFileNameWithoutExtension(filePath);\n    string fileNameExtension = Path.GetExtension(filePath);\n\n    if (fileNameExtension.Equals(\".msix\", StringComparison.OrdinalIgnoreCase))\n    {\n        return await GetAppxManifestStreamFromMsixStreamAsync(stream, cancellationToken).ConfigureAwait(false);\n    }\n\n    if (fileNameExtension.Equals(\".msixbundle\", StringComparison.OrdinalIgnoreCase) == false)\n    {\n        throw new InvalidOperationException($\"Unsupported file type: {fileNameExtension}. Expected \u0027msix\u0027 or \u0027msixbundle\u0027.\");\n    }\n\n    // Construct the expected entry name by changing the extension from the bundle\u0027s path\n    string expectedMsixEntryName = $\"{fileNameWithoutExtension}.msix\";\n    string expectedAppxEntryName = $\"{fileNameWithoutExtension}.appx\";\n\n    try\n    {\n        using (ZipArchive bundleArchive = new ZipArchive(stream, ZipArchiveMode.Read))\n        {\n            // Try to find the MSIX or APPX entry with the expected name\n            ZipArchiveEntry msixPackageEntry = bundleArchive.GetEntry(expectedMsixEntryName) ?? bundleArchive.GetEntry(expectedAppxEntryName);\n\n            if (msixPackageEntry != null)\n            {\n                using (Stream msixPackageStream = msixPackageEntry.Open())\n                {\n                    // Note: msixPackageStream is an instance of an internal sealed class SubReadStream,\n                    // which is conceptually similar to our BoundStream but is not seekable.\n                    // When ZipArchiveEntry encounters non-seekable streams like this, it attempts to copy\n                    // the entire content into a MemoryStream, leading to the unnecessary reading of the entire archive.\n                    // Unfortunately, we don\u0027t have direct access to the bounds of the SubReadStream, \n                    // which is why we employ a \"Giga Chad\" hack using reflection to extract these bounds.\n                    // We then use our own BoundStream, which is seekable, allowing efficient access \n                    // to just the needed part of the stream without reading the entire archive.\n\n                    (long startInSuperStream, long endInSuperStream) = ReadSubStreamBounds(msixPackageStream);\n\n                    using (Stream boundStream = new BoundStream(stream, startInSuperStream, endInSuperStream, true))\n                    {\n                        return await GetAppxManifestStreamFromMsixStreamAsync(boundStream, cancellationToken).ConfigureAwait(false);\n                    }\n                }\n            }\n        }\n\n        throw new InvalidOperationException($\"{expectedMsixEntryName} or {expectedAppxEntryName} not found in the bundle.\");\n    }\n    catch (Exception ex)\n    {\n        innerException = ex;\n    }\n\n    throw new InvalidOperationException($\"Failed to read {appxManifestFileName} from the bundle stream\", innerException);\n}\n\n        private async Task\u003cStream\u003e GetAppxManifestStreamFromMsixStreamAsync(Stream msixStream, CancellationToken cancellationToken)\n        {\n            Exception innerException;\n\n            try\n            {\n                // Open the memory stream as a ZIP archive.\n                using (ZipArchive archive = new ZipArchive(msixStream, ZipArchiveMode.Read))\n                {\n                    // Find the AppxManifest.xml entry.\n                    ZipArchiveEntry manifestEntry = archive.GetEntry(appxManifestFileName);\n\n                    if (manifestEntry != null)\n                    {\n                        using (Stream appxManifestStream = manifestEntry.Open())\n                        {\n                            MemoryStream appxManifestResultStream = new MemoryStream();\n                            appxManifestResultStream.Position = 0;\n#if NET45\n                            await appxManifestStream.CopyToAsync(appxManifestResultStream).ConfigureAwait(false);\n#else\n                            await appxManifestStream.CopyToAsync(appxManifestResultStream, cancellationToken).ConfigureAwait(false);\n#endif\n                            appxManifestResultStream.Position = 0;\n                            return appxManifestResultStream;\n                        }\n                    }\n                    else\n                    {\n                        throw new InvalidOperationException($\"{appxManifestFileName} not found in the archive\");\n                    }\n                }\n            }\n            catch (Exception ex)\n            {\n                innerException = ex;\n            }\n\n            throw new InvalidOperationException($\"Failed to read {appxManifestFileName} from MSIX stream\", innerException);\n        }\n```\n\nWhile this workaround functions, it involves reflection to access private fields, which is inherently fragile and not a long-term solution.\n\n### Proposed Solution\nI believe SubReadStream should be made seekable. Given its usage, I can’t identify a strong reason for it to remain non-seekable. Implementing seekability would align with the typical expectations of a stream and significantly improve performance and resource usage in scenarios with nested archives.\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOkK55Jg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6QlgOV",
                                           "createdAt":  "2024-10-21T06:51:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io-compression\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-21T06:51:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Qrnkm",
                                           "createdAt":  "2024-10-21T17:48:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "In most common cases it\u0027s [wrapped](https://github.com/dotnet/runtime/blob/741390a68500e54b11dc8958573ca900e76fd80d/src/libraries/System.IO.Compression/src/System/IO/Compression/ZipArchiveEntry.cs#L669) in a `DeflateStream` which is unseekable.  I take it that in your case your entry in the zip is stored with no compression (at least in the outer zip), in which case it\u0027s useful to have it be seekable.  This seems like a reasonable request.\n\nAnother related feature would be if we added API like was added in TAR that lets callers see the data offset of entries -- https://github.com/dotnet/runtime/issues/101314.",
                                           "updatedAt":  "2024-10-21T17:48:09Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "SubReadStream in System.IO.Compression is Non-Seekable, Limiting Efficient Data Access",
        "labels":  [
                       "area-System.IO.Compression",
                       "feature-request",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/110583",
        "createdAt":  "2024-12-10T08:13:17Z",
        "number":  110583,
        "author":  "performanceautofiler",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-11T18:32:44Z",
        "body":  "\u003c!-- DATA: {\"RunType\":{\"Repo\":\"dotnetruntime\",\"Branch\":\"refs/heads/main\",\"Arch\":\"x64\",\"Os\":\"Windows1022621\",\"Queue\":\"TigerWindows\",\"Frequency\":\"Weekly\",\"CoreClr\":true,\"Mono\":false,\"Wasm\":false,\"Maui\":false,\"Configs\":[\"CompilationMode:tiered\",\"RunKind:micro\"]},\"RegressionDate\":\"2024-12-06T00:52:57\",\"IsRegression\":true} --\u003e\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | Windows 10.0.22621\nQueue | TigerWindows\nBaseline | [052ad42c4e651f203da34f59eeca6432599aa8e9](https://github.com/dotnet/runtime/commit/052ad42c4e651f203da34f59eeca6432599aa8e9)\nCompare | [8fca0a156dcbb1eba5c79e387a6d8f924bfdd3a6](https://github.com/dotnet/runtime/commit/8fca0a156dcbb1eba5c79e387a6d8f924bfdd3a6)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/052ad42c4e651f203da34f59eeca6432599aa8e9...8fca0a156dcbb1eba5c79e387a6d8f924bfdd3a6)\nConfigs | CompilationMode:tiered, RunKind:micro\n\n\n### Regressions in System.IO.Compression.Brotli\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[Compress_WithState - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.22621/System.IO.Compression.Brotli.Compress_WithState(level%3a%20Optimal%2c%20file%3a%20%22alice29.txt%22).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.IO.Compression/Brotli.cs#L18-#L35\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACl1RUWvbMBB+D+Q/3Pwih3m2m26s9RBs7cpWRik0YXscmn2ONWTJSOc2Yd1/7yl29jAQJ3S6++77vjNIQBgIJHwUm0Mg7PPb+/za9YPHELSz+ZV3ZPS/1M8fmroNKcLU4COaCu4H0r0yGbTaYAWJMrrG9WVOe0pW4sNyYXiIagk9T2m4kcsxXZfrt2/OSj7b8qIqL6vzMn//bn12cV6+LsuqLFdzp8fBcaNoHFmkwo829p9wf3ll6y7+e2xD0aFqQtErbU8FtbOt3sXJB6t6Xad/RJSijSJWd+caFBUI0uixERmIh9F+07aJSa72TvyNRL4gfdWBnNe1Mp8VqehCxFFeB2dDGk2UMWSTVHmM2ZG9jCGbqcrpymZicrpWy8UzDN79xppgg15jyOBq1KbZsli2ux8y+K7MiHLLQ64du4D+AcNo6NMjerXD5aIonuGpYyEzArxicGIvAiQJuZt9bcYGkwSKAm72DGkQXBvXxlja7sCNvCgIx+ZIyKNteGvR77pTnuCJVUM6FcgTzX3tzNhb+T/dw5QP8sib60iTQSnYPmSnD/PzDlUYPfZoSaxeALEgb46QAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 266.36 ms | 290.52 ms | 1.09 | 0.01 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[Decompress_WithoutState - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.22621/System.IO.Compression.Brotli.Decompress_WithoutState(level%3a%20Fastest%2c%20file%3a%20%22alice29.txt%22).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.IO.Compression/Brotli.cs#L64-#L66\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACl1RXY/TMBB8r9T/sOTFrQhJ2iuCC7IE9wXodEK6VvCITLJpjBy7sjd3rTj+O+skfUGKbHmzMzsza5CAMBBI+Ci2p0DYZV+/ZdeuO3gMQTubXXlHRmc3WE3Fnz80ta6nLSnChcEnNCXcKcYGSqHRBktIlNEVri8zOlKyFB/mM8OTVEPoeVTNQNIdLtbFevNmVfC3K96XxWV5sc5Wm7er1bvN66Ioi2I5IT0eHANF7cgi5b63EX/m/eWVrdr432MT8hZVHfJOaXtuqJxt9D5OPlnV6WrxR0SL2ihiiw+uRlGCII0ea5GCeOztvbZ1LHK3d+JvFPIZ6YsO5LyulLlRpGIQkUd5HZwNi5iAHGMYrMrhTAf1Mh7pJFWOVzoJk+O1nM9e4ODdb6wItug1hhSuem3qHZvluLtDCt+V6VHueMi14xTQP2LoDX16Qq/2OJ/l+Qs8t2xkYoBXTE6cRYAkIXd7rExfY5JAnsPtkSkNgmvi2phL2z3wZkFBGMBRkEdb89Zi3lWrPMEzu4bF2CDPMo+VM31n5f9yT2M9yEE395Emg1JwfMhJn6bnA6rQe+zQklj+A1OHUoKVAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 627.35 μs | 673.58 μs | 1.07 | 0.01 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[Decompress - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.22621/System.IO.Compression.Brotli.Decompress(level%3a%20Optimal%2c%20file%3a%20%22alice29.txt%22).html\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACl1RXYvbMBB8D+Q/bP2ihLq2z9evuAja+6At5Ti4hPZZtdexiiwZaX2XcNf/3lXsvBTMCq1nRzOzBgkIA4GEz2J7DIR99v0+u3b94DEE7Wx25R0Znd1gPTdXBh/RVHA/kO6VSaHVBitIlNE1lpuMDpSsxaflwjC5agk9szeKkOG4Kovy7ZuLgr9d8bEqNtVlmZUfNu8u31+8LoqqKNbzpMfB8aBoHFmk3I82zp95f3tl6y7+99iGvEPVhLxX2p4BtbOt3seXj1b1ul49i+hKG0Xs6s41KCoQpNFjI1IQD6P9oW0Tm4z2TvyNQr4ifdOBnNe1MjeK1C9NXeRRXgdnwyqGJ2NJJ6vyVNOTehlLOkuV05HOwuR0rJeLFxi8+4M1wRa9xpDC1ahNs2OzW1L9kMJPZUaUO37k2nEK6B8wjIa+PKJXe1wu8vwFnjo2MjPAKyYnziJAkpC7PdRmbDBJIM/h9sCUBsG1cW3Mpe0e3MiLgnAajoI82oa3FvOuO+UJntg1rCaAPMs81M6MvZX/yz1O/SBPuhlHmgxKwfEhJ32cr3eowuixR0ti/Q+arqeMiAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 588.64 μs | 632.07 μs | 1.07 | 0.01 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[Compress_WithoutState - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.22621/System.IO.Compression.Brotli.Compress_WithoutState(level%3a%20Optimal%2c%20file%3a%20%22sum%22).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.IO.Compression/Brotli.cs#L55-#L58\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACl1RUWvbMBB+D+Q/3Pwih3mxk5Wyegi2dmUdoxSasD0OzT7HGrIUpFObsO6/7xQ7exiIEzrdffd93xkkIAwEEj6IzTEQDssvD8sbN+w9hqCdXV57R0b/S/34rql3kTakCHODT2hqeNiTHpQpoNMGa8hCHLKFeD+fGcZXHaHnAS03cBnm62p98WZV8dlW7+rqqn67Xl6sLleX1dXrqqqrajF1etw7bhStI4tU+mhT/xn3p1e26dO/xy6UPao2lIPS9lzQONvpXZp8tGrQTf5bJBXaKGJh965FUYMgjR5bUYB4jPartm1KcrV34k8i8hnpTgdyXjfKfFKkkgEJR3kdnA158k+mUIxS5SkWJ/YyhWKiKsermIjJ8VrMZy+w9+4XNgQb9BpDAddRm3bLYtnmYV/AN2Uiyi0PuXHsAvpHDNHQxyf0aofzWVm+wHPPQiYEeMXgxF4EyDJyt4fGxBazDMoSbg8MaRBcl9bFWNrugDcKCsKpORHyaFveWvK76ZUneGbVkI8F8kzz0DgTByv/p3sc80GeeHMdaTIoBduH7PRxet6jCtHjgJbE4i/RJvECiwIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 61.24 ms | 66.53 ms | 1.09 | 0.01 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[Decompress_WithState - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.22621/System.IO.Compression.Brotli.Decompress_WithState(level%3a%20Fastest%2c%20file%3a%20%22alice29.txt%22).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.IO.Compression/Brotli.cs#L37-#L53\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACl1RXY/TMBB8r9T/sOTFqQhJrsfHXZAluA84hE5I1woekUk2jZFjV/bmrhXHf2edpC9IkS1vdmZnZg0SEAYCCR/E5hgI+/zLt/za9XuPIWhn8yvvyOj8Buu5+POHpm5DijA1+Iimgk+KgYEyaLXBChJldI3ry5wOlKzE++XC8BjVEnqe0zCQdI/puly/fnVW8rctL6rysjpf52/evju7KNcvy7Iqy9WM9Lh3DBSNI4tU+MFG/In3l1e27uJ/j20oOlRNKHql7amhdrbVuzj5aFWv6/SPiP60UcT+7l2DogJBGj02IgPxMNiv2jaxyN3eib9RyGekOx3IeV0rc6NIxRQij/I6OBvSmICcYhityvHMRvUyHtksVU5XNguT07VaLp5h791vrAk26DWGDK4GbZotm+W4+30G35UZUG55yLXjFNA/YBgMfXxEr3a4XBTFMzx1bGRmgBdMTpxFgCQhd3uozdBgkkBRwO2BKQ2Ca+PamEvbHbiBFwVhBEdBHm3DW4t5153yBE/sGtKpQZ5kHmpnht7K/+Uep3qQo27uI00GpeD4kJM+zs97VGHw2KMlsfoHnftdCZICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 633.03 μs | 678.07 μs | 1.07 | 0.01 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[Decompress_WithoutState - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.22621/System.IO.Compression.Brotli.Decompress_WithoutState(level%3a%20Optimal%2c%20file%3a%20%22alice29.txt%22).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.IO.Compression/Brotli.cs#L64-#L66\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACl1RXWvcMBB8P7j/sPWL7qhrO06gjYugzQdNCSGQO9rHotrrs4osGWmd3NH0v3d19r0ExAqtdmdnZg0SEAYCCV/E5hAI++z7Y3bt+sFjCNrZ7Mo7Mjq7wXpO/vqpqXMjbUgRrgw+o6ngcSDdK5NCqw1WkCijaywvM9pTshaflwvDk1RL6HlUw41cjquyKC8+nBV8tsWnqriszsvsY3leFmcX74uiKor13OlxcNwoGkcWKfejjf0n3N9e2bqL/x7bkHeompD3SttTQe1sq3dx8sGqXtervyJK1EYRS3xwDYoKBGn02IgUxNNo77VtYpKrvRP/IpFvSHc6kPO6VuZGkYpGRBzldXA2rKKTMoZ0kiqPMT2ylzGkM1U5XelMTE7Xerl4hcG7P1gTbNBrDClcjdo0WxbLdvdDCj+UGVFueci1YxfQP2EYDX19Rq92uFzk+Su8dCxkRoB3DE7sRYAkIXe7r83YYJJAnsPtniENgmvj2hhL2x3wZkFBODZHQh5tw1uLfted8gQvrBpWU4E80dzXzoy9lW/pHqZ8kEfeXEeaDErB9iE7fZifD6jC6LFHS2L9H3t23K6VAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 533.64 μs | 576.22 μs | 1.08 | 0.01 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[Compress_WithoutState - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.22621/System.IO.Compression.Brotli.Compress_WithoutState(level%3a%20Optimal%2c%20file%3a%20%22alice29.txt%22).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.IO.Compression/Brotli.cs#L55-#L58\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACl1RUWvbMBB+D+Q/3Pwih3m263W09RBs7Uo3Rik0YXscmn2JNWTJSOc2Yd1/3yl29jAQJ3S6++77vjNIQBgIJHwQ60Mg7PMvD/mN6wePIWhn82vvyOh/qR/fNXVupDUpwtTgE5oaHgbSvTIZbLXBGhJldIPVVU57Slbi/XJheI7aEnoe1HIjl2NaldX5m7OSz6a8rMur+m2VX168O6vOL16XZV2Wq7nT4+C4UbSOLFLhRxv7T7g/vbJNF/89bkPRoWpD0SttTwWNs1u9i5MPVvW6SX+LqEYbRSzw3rUoahCk0WMrMhCPo/2qbRuTXO2d+BOJ3CF91oGc140ynxSpaETEUV4HZ0MafZQxZJNUeYzZkb2MIZupyunKZmJyulbLxQsM3v3ChmCNXmPI4HrUpt2wWLa7HzL4psyIcsNDbhy7gP4Rw2jo4xN6tcPloihe4LljITMCvGJwYi8CJAm5231jxhaTBIoCbvcMaRDcNq6NsbTdAW8WFIRjcyTk0ba8teh30ylP8MyqIZ0K5InmvnFm7K38n+5hygd55M11pMmgFGwfstOH+XmPKowee7QkVn8BftHt3ZMCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 268.14 ms | 290.64 ms | 1.08 | 0.01 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[Decompress - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.22621/System.IO.Compression.Brotli.Decompress(level%3a%20Fastest%2c%20file%3a%20%22alice29.txt%22).html\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACl1RXYvbMBB8D+Q/bP0ih7q2LylHz0XQ3kfboxyFS2ifVXsdq8hSkNZ3Cb3+91vZzktBSGg1O5qZNUhAGAgkfBLbUyDs8/sf+Y3rDx5D0M7m196R0fkt1nMxNfiEpoIviuGBMmi1wQoSZXSN66ucjpSsxMflwjC5agk9szeKkHSP6bpcv393UfLalR+q8qrabPJyXV5ebi7elmVVlqu50+PBcaNoHFmkwg829p95f3tl6y6+e2xD0aFqQtErbc+A2tlW7+PPJ6t6Xad/RXSljSJ29eAaFBUI0uixERmIx8F+17aJRUZ7J/5FIV+RvulAzutamVtF6pemLvIor4OzIY0JyCmG0aoc92xUL+OWzVLldGSzMDkdq+XiBQ7e/cGaYIteY8jgetCm2bHZLan+kMFPZQaUO/7kxnEK6B8xDIY+P6FXe1wuiuIFnjs2MjPAGyYnziJAkpC7O9ZmaDBJoCjg7siUBsG1cWzMpe0e3MCDgjA2R0EebcNTi3nXnfIEz+wa0gkgzzKPtTNDb+X/ck9TPchRN+NIk0EpOD7kpE/z9QFVGDz2aEmsXgExevSWiAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 689.03 μs | 734.38 μs | 1.07 | 0.01 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[Compress_WithState - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.22621/System.IO.Compression.Brotli.Compress_WithState(level%3a%20Optimal%2c%20file%3a%20%22sum%22).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.IO.Compression/Brotli.cs#L18-#L35\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACl1RYWvbMBD9Hsh/uPmLEurFbtOOzUOwtSvdGKXQhO3j0OxzrCFLRjq1Cev++06xsw8Dc0Lne0/vvTNIQBgIJHwQm0Mg7FdfHlY3rh88hqCdXV17R0b/a/34rqnbkCJcGHxCU8HDQLpXJodWG6wgC7HPluL9fGaYXLWEntkbBvAYLi7Ki8vX5yV/2/JtVb6r1uvV+Zv1VXlZnpVlVZbLCelxcAwUjSOLVPhoE/7E+9MrW3fpv8c2FB2qJhS90vY0UDvb6l16+WBVr+vFb5EsaKOIXd27BkUFgjR6bEQO4jHar9o2qcnT3ok/Scgd0mcdyHldK/NJkUruE4/yOjgbFik8mUo+WpXHmh/Vy1TySaocj3wSJsdjOZ+9wODdL6wJNug1hhyuozbNls1yzP2QwzdlIsotP3LjOAX0jxiioY9P6NUO57OieIHnjo1MDPCKyYmzCJBl5G73tYkNZhkUBdzumdIguDati7m03YGLvCgIR3AS5NE2vLWUd90pT/DMrmExDsiTzH3tTOyt/F/uYewHedTNc6TJoBQcH3LSh+l6jypEjz1aEsu/a91mZIgCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 61.22 ms | 66.60 ms | 1.09 | 0.01 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[Decompress_WithState - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.22621/System.IO.Compression.Brotli.Decompress_WithState(level%3a%20Optimal%2c%20file%3a%20%22alice29.txt%22).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.IO.Compression/Brotli.cs#L37-#L53\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACl1RXYvbMBB8D+Q/bP2ihLq262shcRG090FbynFwCe1jUe11rCJLRlrfJfT637uKnZeCWKHV7uzMrEECwkAg4aPYnQJhn319yG5cP3gMQTubXXtHRme3WM/Jnz80dTtShCuDT2gqeBhI98qk0GqDFSTK6BrLbUZHStbiw3JheIxqCT3PabiRy3FVFuW7N28LPvtiUxXb6uoqK7eb95tN+booqqJYz50eB8eNonFkkXI/2th/wf3lla27+O+xDXmHqgl5r7S9FNTOtvoQJ5+s6nW9+iOiPm0Usb5716CoQJBGj41IQTyO9pu2TUxytXfibyTyGemLDuS8rpW5VaSiCxFHeR2cDatoo4whnaTKc0zP7GUM6UxVTlc6E5PTtV4uXmDw7jfWBDv0GkMK16M2zZ7Fst39kMJ3ZUaUex5y49gF9I8YRkOfntCrAy4Xef4Czx0LmRHgFYMTexEgScjdHWszNpgkkOdwd2RIg+DauDbG0vYAbuRFQTg3R0IebcNbi37XnfIEz6waVlOBvNA81s6MvZX/0z1N+SDPvLmONBmUgu1Ddvo0P+9RhdFjj5bE+h/B3C0OkgIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 534.78 μs | 575.94 μs | 1.08 | 0.01 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/12_10_2024/refs/heads/main_x64_Windows%2010.0.22621_Regression/System.IO.Compression.Brotli_1.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/12_10_2024/refs/heads/main_x64_Windows%2010.0.22621_Regression/System.IO.Compression.Brotli_2.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/12_10_2024/refs/heads/main_x64_Windows%2010.0.22621_Regression/System.IO.Compression.Brotli_3.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/12_10_2024/refs/heads/main_x64_Windows%2010.0.22621_Regression/System.IO.Compression.Brotli_4.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/12_10_2024/refs/heads/main_x64_Windows%2010.0.22621_Regression/System.IO.Compression.Brotli_5.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/12_10_2024/refs/heads/main_x64_Windows%2010.0.22621_Regression/System.IO.Compression.Brotli_6.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/12_10_2024/refs/heads/main_x64_Windows%2010.0.22621_Regression/System.IO.Compression.Brotli_7.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/12_10_2024/refs/heads/main_x64_Windows%2010.0.22621_Regression/System.IO.Compression.Brotli_8.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/12_10_2024/refs/heads/main_x64_Windows%2010.0.22621_Regression/System.IO.Compression.Brotli_9.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/12_10_2024/refs/heads/main_x64_Windows%2010.0.22621_Regression/System.IO.Compression.Brotli_10.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/12_10_2024/refs/heads/main_x64_Windows%2010.0.22621_Regression/System.IO.Compression.Brotli.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n```cmd\ngit clone https://github.com/dotnet/performance.git\npy .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027System.IO.Compression.Brotli*\u0027\n```\n\n\u003cdetails\u003e\n\n### System.IO.Compression.Brotli.Compress_WithState(level: Optimal, file: \"alice29.txt\")\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.IO.Compression.Brotli.Decompress_WithoutState(level: Fastest, file: \"alice29.txt\")\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.IO.Compression.Brotli.Decompress(level: Optimal, file: \"alice29.txt\")\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.IO.Compression.Brotli.Compress_WithoutState(level: Optimal, file: \"sum\")\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.IO.Compression.Brotli.Decompress_WithState(level: Fastest, file: \"alice29.txt\")\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.IO.Compression.Brotli.Decompress_WithoutState(level: Optimal, file: \"alice29.txt\")\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.IO.Compression.Brotli.Compress_WithoutState(level: Optimal, file: \"alice29.txt\")\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.IO.Compression.Brotli.Decompress(level: Fastest, file: \"alice29.txt\")\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.IO.Compression.Brotli.Compress_WithState(level: Optimal, file: \"sum\")\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.IO.Compression.Brotli.Decompress_WithState(level: Optimal, file: \"alice29.txt\")\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | Windows 10.0.22621\nQueue | TigerWindows\nBaseline | [052ad42c4e651f203da34f59eeca6432599aa8e9](https://github.com/dotnet/runtime/commit/052ad42c4e651f203da34f59eeca6432599aa8e9)\nCompare | [8fca0a156dcbb1eba5c79e387a6d8f924bfdd3a6](https://github.com/dotnet/runtime/commit/8fca0a156dcbb1eba5c79e387a6d8f924bfdd3a6)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/052ad42c4e651f203da34f59eeca6432599aa8e9...8fca0a156dcbb1eba5c79e387a6d8f924bfdd3a6)\nConfigs | CompilationMode:tiered, RunKind:micro\n\n\n### Regressions in System.IO.Compression.Deflate\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[Compress - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.22621/System.IO.Compression.Deflate.Compress(level%3a%20Fastest%2c%20file%3a%20%22TestDocument.pdf%22).html\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACl1SUW/TMBB+r9T/cOTFrQhJVqYOgiwB6wYTmpDWCp5NcmmNHDuyL1srxn/fOUl5QLJs+Xz33fd9Z4MEhIFAwkexPQXCNrv7nl27tvMYgnY222BjFOG/2MLgI5oSbhVnB0qh0QZLSHZ82biqb9FS1tVNshQf5jPDDVRD6LlDzTCkW1ysitXlm4uC1654Vxbvy7dX2cVqfXm1Xr8uirIollOlx85xoagdWaTc9zbWn3F/eWWrQ3z32IT8gKoOeau0PSdUzjZ6HzufrGp1tfgjogrNeljZvatRlCBIo8dapCAeevtN2zoGOds78TcS+YL0VQdyXlfKbBSpn5oOEUd5HZwNi2iDHL0YpMphTwf2Mm7pRFWORzoRk+OxnM+eofPuN1YEW/QaQwqfe23qHYvdkmq7FH4o06OMHl87dgH9A4be0KdH9GqP81meP8PTgYVMCPCKwYm9CJAk5G6OlelrTBLIc7g5MqRBcE2cHWNpuwfX86AgDMWRkEdb89Si39VBeYInVg2LMUGeaR4rZ/rWyv/pnsZ4kANvziNNBqVg+5CdPk3Xe1Sh9xi/jFi+AMIQ39KMAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 1.38 ms | 1.53 ms | 1.10 | 0.02 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/12_10_2024/refs/heads/main_x64_Windows%2010.0.22621_Regression/System.IO.Compression.Deflate_1.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/12_10_2024/refs/heads/main_x64_Windows%2010.0.22621_Regression/System.IO.Compression.Deflate.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n```cmd\ngit clone https://github.com/dotnet/performance.git\npy .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027System.IO.Compression.Deflate*\u0027\n```\n\n\u003cdetails\u003e\n\n### System.IO.Compression.Deflate.Compress(level: Fastest, file: \"TestDocument.pdf\")\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvVKhFQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6W8KGP",
                                           "createdAt":  "2024-12-10T17:27:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LoopedBard3",
                                           "body":  "Either https://github.com/dotnet/runtime/pull/109707 or https://github.com/dotnet/runtime/pull/110378 in range https://github.com/dotnet/runtime/compare/5a5ea3ea91138f6d36691f1a0f6064481823583f...bf44aaab18b8f8281264b0ccdd47f8a621514aa2. FYI @jkoritzinsky.\n\nRelated Regression:\n* https://github.com/dotnet/perf-autofiling-issues/issues/46244",
                                           "updatedAt":  "2024-12-10T17:27:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6W--ps",
                                           "createdAt":  "2024-12-10T22:35:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "Brotli regressions are almost assuredly from #109707. The zlib one shouldn\u0027t be from #110378, but I\u0027ll look into it.",
                                           "updatedAt":  "2024-12-10T22:35:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6XOeyq",
                                           "createdAt":  "2024-12-11T20:57:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-infrastructure-libraries\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-12-11T20:57:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc63BRKQ",
                                           "createdAt":  "2025-07-14T18:28:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io-compression\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-14T18:28:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc63BRri",
                                           "createdAt":  "2025-07-14T18:29:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "@jkoritzinsky are you still planning to look at this one?",
                                           "updatedAt":  "2025-07-14T18:29:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc63BnSg",
                                           "createdAt":  "2025-07-14T19:04:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "I\u0027ll try, but I don\u0027t know if I\u0027ll get to it in .NET 10.\n\nIf I haven\u0027t posted an update here by next Monday, we can assume I won\u0027t have time for it.",
                                           "updatedAt":  "2025-07-14T19:04:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc63B1sR",
                                           "createdAt":  "2025-07-14T19:28:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Should we revert the build refactoring that introduced the perf regression so that we are not leaving perf on the table?",
                                           "updatedAt":  "2025-07-14T19:28:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc63FH8a",
                                           "createdAt":  "2025-07-15T01:08:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "We can revert it.\n\nI\u0027m trying a new approach anyway (which should fix the problems).\n\nI\u0027m curious if we\u0027re just missing a switch or something that would get the perf back. Just haven\u0027t had time to look.",
                                           "updatedAt":  "2025-07-15T01:08:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc69UEKU",
                                           "createdAt":  "2025-08-11T17:55:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "It looks like the majority of the original regressions filed above have been fixed or in the 1 - 2 % regression now. Some are now even lower than the baseline recorded above - yay.\n\nHowever, the \"Regressions in System.IO.Compression.Deflate\" one remains at approximately 10 % ([150 ms now](https://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows%2010.0.22621/System.IO.Compression.Deflate.Compress(level%3a%20Fastest%2c%20file%3a%20%22TestDocument.pdf%22).html) vs 153 ms here)\n\n",
                                           "updatedAt":  "2025-08-11T17:55:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc69UnGC",
                                           "createdAt":  "2025-08-11T18:28:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "The Deflate one may be from https://github.com/dotnet/runtime/pull/110378. Maybe we have different optimization settings for the CoreCLR build vs the libraries build? I don\u0027t think so, but that could explain the difference.",
                                           "updatedAt":  "2025-08-11T18:28:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc69UqEV",
                                           "createdAt":  "2025-08-11T18:32:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "Actually, I\u0027m not sure how it could be from #110378 as the changes there are only for NativeAOT and this is a CoreCLR microbenchmark.",
                                           "updatedAt":  "2025-08-11T18:32:44Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "[Perf] Windows/x64: System.IO.Compression.Brotli Regressions on 12/6/2024 12:52:57 AM",
        "labels":  [
                       "area-System.IO.Compression",
                       "os-windows",
                       "tenet-performance",
                       "tenet-performance-benchmarks",
                       "arch-x64",
                       "runtime-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/112656",
        "createdAt":  "2025-02-18T16:30:19Z",
        "number":  112656,
        "author":  "vsfeedback",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODEGPlw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "grbell-ms",
                                            "createdAt":  "2025-02-18T17:33:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "omariom",
                                            "createdAt":  "2025-02-18T22:40:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kronic",
                                            "createdAt":  "2025-03-20T04:34:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0xfeeddeadbeef",
                                            "createdAt":  "2025-03-31T02:05:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mdementyev",
                                            "createdAt":  "2025-06-16T06:39:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mdenhoedt",
                                            "createdAt":  "2025-06-17T15:11:18Z"
                                        }
                                    ],
                          "totalCount":  6
                      },
        "updatedAt":  "2025-08-14T11:27:41Z",
        "body":  "_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/Add-Support-for-Brotli-Compression-with-/10841129)._\n\n---\nThe current implementation of Brotli compression in .NET Core (`System.IO.Compression.BrotliEncoder`) lacks support for using shared dictionaries during compression and decompression.  \nThis feature is essential for scenarios where creating compressed diff files based on a shared dictionary (derived from another file) is necessary.\n\nA key scenario, for example, is when using [Compression Dictionary Transport](https://datatracker.ietf.org/doc/draft-ietf-httpbis-compression-dictionary/) feature (new browser feature) it is required to create brotli diff files (dcb) that can be sent to the client instead of the full compressed file payload. This helps reducing download time and therefore improve application performance.\n\nWithout this, the alternative for engineer to achieve that is to wrap the brotli cli tool or build a native DLL and creating binding to it from .Net code. Both a complex and have multiple downsides.\n\nPossible API extension could be similar to the `BrotliEncoder.Compress` API definition:  \n`BrotliEncoder.CompressWithDictionary (source, desination, dicitonary, ...)`\n\nLooking at the implementation of `BrotliEncoder.cs` it is unclear to me whether the [native library](https://github.com/dotnet/runtime/blob/main/src/libraries/Common/src/Interop/Interop.Brotli.cs#L11) that is used with interop supports shared dictionaries, so if not it needs to be updated to the latest brotli implementation (brotli 1.1.0).\n\nMore digging reveals that the native brotli linked [code](https://github.com/dotnet/runtime/tree/main/src/native/external/brotli) is recent and has the necessary support for shared dictionary. See for example [BrotliEncoderPrepareDictionary](https://github.com/dotnet/runtime/blob/main/src/native/external/brotli/c/enc/encode.c#L1707).\n\n---\n### Original Comments\n\n#### Feedback Bot on 2/4/2025, 01:11 AM: \n\n\u003cp\u003eWe have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.\u003c/p\u003e\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvga38w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6e63Uj",
                                           "createdAt":  "2025-02-18T16:30:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io-compression\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-02-18T16:30:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6feGgl",
                                           "createdAt":  "2025-02-21T20:21:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "@carlossanlop - this is similar to what we were talking about with ZStandard.",
                                           "updatedAt":  "2025-02-21T20:21:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fu8Th",
                                           "createdAt":  "2025-02-24T23:05:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "carlossanlop",
                                           "body":  "Needs an API proposal so we can advance this.",
                                           "updatedAt":  "2025-02-24T23:05:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6g_0tL",
                                           "createdAt":  "2025-03-05T14:20:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEW6xZQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mdenhoedt",
                                                                               "createdAt":  "2025-06-17T15:12:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "nhelfman",
                                           "body":  "@carlossanlop \n\nBelow is a proposal for extending the Brotli encoder API to support compressing with a shared dictionary buffer. This proposal builds on the existing API (as specified in the .NET documentation) while preserving backward compatibility.\n\n---\n\n## Overview\n\nThe goal of this proposal is to allow callers to provide a shared dictionary buffer that the `BrotliEncoder` can use to “prime” its compression state. This is especially useful when compressing multiple related data blocks, where a common dictionary can improve compression ratios by providing additional context.\n\n---\n\n## Proposed API Changes\n\nWe propose adding a new overload of the existing `Compress` method that accepts an additional parameter—a read-only span representing the shared dictionary. The new method signature is as follows:\n\n```csharp\npublic System.Buffers.OperationStatus Compress(\n    ReadOnlySpan\u003cbyte\u003e source,\n    Span\u003cbyte\u003e destination,\n    out int bytesConsumed,\n    out int bytesWritten,\n    bool isFinalBlock,\n    ReadOnlySpan\u003cbyte\u003e sharedDictionary);\n```\n\n### Parameter Details\n\n- **source**   `ReadOnlySpan\u003cbyte\u003e` \nA read-only span of bytes containing the source data to compress.\n\n- **destination**  `Span\u003cByte\u003e`\n When this method returns, a byte span where the compressed is stored.\n\n- **bytesConsumed**  `Int32`\n When this method returns, the total number of bytes that were read from `source`.\n\n- **bytesWritten**   `Int32`\n  When this method returns, the total number of bytes that were written to `destination`.\n\n- **isFinalBlock**  Boolean\n`true` to finalize the internal stream, which prevents adding more input data when this method returns; `false` to allow the encoder to postpone the production of output until it has processed enough input.\n\n- **sharedDictionary**  `ReadOnlySpan\u003cbyte\u003e` \n  A read-only span containing the dictionary data.  \n  - **Usage:** The provided dictionary buffer is used to initialize or update the encoder’s internal state before processing the current block.  \n  - **Requirements:**  \n    - The dictionary must be in a format compatible with Brotli’s expected shared dictionary format.  \n    - It is the caller’s responsibility to ensure that the dictionary remains valid (or is not mutated) during the operation.  \n    - If an empty span is provided, the encoder should operate as if no dictionary is provided.\n\n### Return Value\n\nThe method returns an `OperationStatus` which indicates the result of the compression operation (e.g., `Done`, `DestinationTooSmall`, or `NeedMoreData` or `InvalidSharedDictionary`).\n\n---\n\n## Backward Compatibility\n\n- **Existing Method Remains Unchanged:**  \n  The original `Compress` method (without a dictionary parameter) remains available for clients that do not require shared dictionary support.\n  \n- **Overload Resolution:**  \n  Clients wishing to use dictionary-based compression can opt-in by calling the new overload. This design avoids breaking changes while offering enhanced functionality.\n\n---\n\n## Behavior and Implementation Notes\n\n- **Dictionary Integration:**  \n  When a non-empty `sharedDictionary` is provided, the encoder should use its content to seed the compression state. This means that the dictionary will influence the compression context, potentially allowing for better matching when similar data appears in subsequent input.\n  \n- **Error Handling:**  \n  The method should validate the dictionary buffer:\n  - If the dictionary format is invalid or its size exceeds supported limits, the method should return an appropriate error status or throw an exception.\n  - If the dictionary is not required (i.e., an empty span), the method should behave identically to the original API.\n\n---\n\n## Example Usage\n\nBelow is an example illustrating how a caller might use the new API overload:\n\n```csharp\n// Prepare input data and shared dictionary.\nReadOnlySpan\u003cbyte\u003e inputData = GetInputData();\nReadOnlySpan\u003cbyte\u003e sharedDict = GetSharedDictionary();\n\n// Allocate a destination buffer.\nSpan\u003cbyte\u003e outputBuffer = new byte[expectedOutputSize];\n\n// Variables to capture operation status.\nint bytesConsumed;\nint bytesWritten;\n\n// Compress using the shared dictionary.\nvar status = brotliEncoder.Compress(\n    inputData,\n    outputBuffer,\n    out bytesConsumed,\n    out bytesWritten,\n    isFinalBlock: false,\n    sharedDictionary: sharedDict);\n\nif (status == System.Buffers.OperationStatus.Done)\n{\n    // Process the compressed output.\n}\nelse\n{\n    // Handle cases such as DestinationTooSmall or NeedMoreData.\n}\n```\n\n---\n\n## Conclusion\n\nThis proposal adds a new overload to the `BrotliEncoder` API that accepts a shared dictionary buffer. By introducing a `ReadOnlySpan\u003cbyte\u003e sharedDictionary` parameter, the encoder can now leverage pre-existing context to potentially improve compression performance for related data streams. This design maintains backward compatibility while providing additional functionality for advanced use cases.\n",
                                           "updatedAt":  "2025-03-05T14:27:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hKRzr",
                                           "createdAt":  "2025-03-06T13:16:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nhelfman",
                                           "body":  "Another consideration point - I couldn\u0027t find any open-source alternative in .Net which supports shared dictionary compression.\nThere are some older libraries with Brotli compression support but they don\u0027t support shared dictionary.\n\nE.g.:\nhttps://github.com/XieJJ99/brotli.net\nhttps://github.com/master131/BrotliSharpLib\n\nA widely used open source implementation of Brotli is the brotli cli (https://github.com/google/brotli/blob/master/c/tools/brotli.md ) which has support for shared dictionary based compression with the `-D` option.\n\nThe cli tool uses the same library that is ultimately used by `BrotliEncoder.Compress` with interop bindings. But the shared dictionary option is not exposed from the current .Net API as described in the item.\n\n\n\n",
                                           "updatedAt":  "2025-03-06T13:16:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-Brfz",
                                           "createdAt":  "2025-08-14T11:27:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rzikm",
                                           "body":  "On the native level, the dictionary is attached to the BrotliDecoderState and BrotliEncoderState, so the dictionary needs to be either:\n- passed in the constructor\n- attached via dedicated method\n\nIt is weird that either side has different APIs for specifying dictionaries:\n\nencoding side has a two-step process:\n\n```c\nBROTLI_ENC_API BrotliEncoderPreparedDictionary*\nBrotliEncoderPrepareDictionary(BrotliSharedDictionaryType type,\n    size_t data_size, const uint8_t data[BROTLI_ARRAY_PARAM(data_size)],\n    int quality,\n    brotli_alloc_func alloc_func, brotli_free_func free_func, void* opaque);\n\nBROTLI_ENC_API BROTLI_BOOL BrotliEncoderAttachPreparedDictionary(\n    BrotliEncoderState* state,\n    const BrotliEncoderPreparedDictionary* dictionary);\n```\n\ndecoding is more straightforward:\n\n```c\nBROTLI_DEC_API BROTLI_BOOL BrotliDecoderAttachDictionary(\n    BrotliDecoderState* state, BrotliSharedDictionaryType type,\n    size_t data_size, const uint8_t data[BROTLI_ARRAY_PARAM(data_size)]);\n```\n\nBoth sides require the data array to be kept alive.\n\nI will put up an API proposal so that this can move forward.",
                                           "updatedAt":  "2025-08-14T11:27:38Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Add Support for Brotli Compression with Shared Dictionaries in .NET",
        "labels":  [
                       "area-System.IO.Compression",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/113013",
        "createdAt":  "2025-02-28T13:15:42Z",
        "number":  113013,
        "author":  "hopix",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-05-19T19:25:30Z",
        "body":  "### Description\n\nCross-compiling .net 9 runtime for VFP Configuration ARM `vfpv4-d16` (`-mfpu=vfpv4-d16`) fails.\n\nFollowing doc at https://github.com/dotnet/runtime/blob/v9.0.2/docs/workflow/building/coreclr/cross-building.md#cross-compiling-coreclr-for-other-vfp-configurations\n\n### Reproduction Steps\n\nUsing build command line:\n```\ndocker run --rm -v /home/devix/dotnet-build/runtime9:/runtime -w /runtime -e ROOTFS_DIR=/crossrootfs/arm\n    mcr.microsoft.com/dotnet-buildtools/prereqs:azurelinux-3.0-net10.0-cross-arm\n    ./build.sh\n    --subset clr+host.native+libs.native+Clr.Aot\n    --os linux -runtimeFlavor CoreCLR --cross --arch arm\n    --hostConfiguration Release --librariesConfiguration Release --runtimeConfiguration Release\n    --verbosity detailed\n    --cmakeargs -DCLR_ARM_FPU_CAPABILITY=0x3 --cmakeargs -DCLR_ARM_FPU_TYPE=vfpv4-d16\n```\n\n### Expected behavior\n\nBuild should succeed.\n\n### Actual behavior\n\nBuild fails where 1st error in log is:\n`In file included from /runtime/src/native/external/zlib-ng/arch/arm/slide_hash_neon.c:12:\n         /runtime/src/native/external/zlib-ng/arch/arm/neon_intrins.h:38:28: error: expected identifier or \u0027(\u0027\n            38 | static inline uint16x8x4_t vld1q_u16_x4(uint16_t const *a) {`\n\nIt seems to wrongly compiling for `NEON` instead of `vfpv4-d16`.\nAnd few lines above error I can see:\n`* NEON_ADLER32, Support NEON instructions in adler32, using \"-mfpu=neon\"`\n\n### Regression?\n\nUsing this since .net 5, and I checked that clean compile still works in .net 8 branch.\n\n### Known Workarounds\n\nNone\n\n### Configuration\n\nVersion: .NET 9\nTarget architecture: ARM\nRunning build from WSL 2 Ubuntu with Docker Desktop.\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOoKc2dQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6gX7uk",
                                           "createdAt":  "2025-02-28T13:16:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @hoyosjs\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-02-28T13:16:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gaX8b",
                                           "createdAt":  "2025-02-28T18:13:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "You can likely workaround it by changing this line:\nhttps://github.com/dotnet/runtime/blob/main/src/native/external/zlib-ng/CMakeLists.txt#L104\n\nThe zlib-ng build includes some optimized code that\u0027s opportunistically enabled. .NET 8 and older didn\u0027t have the zlib-ng builds IIRC.",
                                           "updatedAt":  "2025-02-28T18:13:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ga8F8",
                                           "createdAt":  "2025-02-28T19:40:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hopix",
                                           "body":  "Build works ok, with workaround: `option(WITH_NEON \"Build with NEON intrinsics\" OFF)` . Thanks.\n\nIt would be great if you can make proper fix. Can you?\n\nI am going to verify if runtime works on HW, but I first need to update to `GLIBCXX_3.4.30` (from `GLIBCXX_3.4.29`) as .net9 requires.",
                                           "updatedAt":  "2025-02-28T19:40:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6geKxy",
                                           "createdAt":  "2025-03-01T14:38:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io-compression\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-03-01T14:38:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6geOEA",
                                           "createdAt":  "2025-03-01T15:12:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOESsY0A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ericstj",
                                                                               "createdAt":  "2025-05-19T19:25:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "\u003e It would be great if you can make proper fix. Can you?\n\nI assume this should be fixed [at the upstream repo](https://github.com/zlib-ng/zlib-ng).",
                                           "updatedAt":  "2025-03-01T15:12:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gpzZ1",
                                           "createdAt":  "2025-03-03T19:12:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "carlossanlop",
                                           "body":  "@hopix would you like to propose a PR to fix it?\n\ncc @jkoritzinsky ",
                                           "updatedAt":  "2025-03-03T19:12:05Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Cross-Compiling CoreCLR for ARM mfpu=vfpv4-d16 fails",
        "labels":  [
                       "area-System.IO.Compression"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/113058",
        "createdAt":  "2025-03-03T06:30:39Z",
        "number":  113058,
        "author":  "XmmShp",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-31T19:03:28Z",
        "body":  "### Background and motivation\n\nFor zip files, ZipFile allows the creation of archives with `\u0027\\\u0027` as the filename separator. However, in practice, entry paths are usually provided using a method similar to the following:\n\n```csharp\nvar zipEntryPath = Path.GetRelativePath(folderPath, filePath);\n```\n\nOn Windows platforms, this results in paths separated by `\u0027\\\u0027`. When the resulting .zip archive is moved to a Unix platform and extracted using ZipFile, issues arise, as mentioned in issue #98247 .\n\nI believe it would be beneficial to provide an API to normalize the path separators in the entries of the archive to ensure compatibility across different operating systems.\n\n---\n\nCurrently, when developers use `ZipFile` to create compressed files, inconsistencies in path separators across different operating systems can lead to issues. Specifically, .zip files created on Windows may use backslashes (`\\`) as path separators, while Unix-based systems expect forward slashes (`/`). This discrepancy can cause errors when moving and extracting .zip files across platforms.\n\nAlthough this issue can be resolved by manually replacing string separators, it is far from ideal. Ideally, there should be a direct and straightforward way to ensure consistent path separators, improving both user experience and code maintainability.\n\n### API Proposal\n\n```csharp\nnamespace System.IO.Compression;\n\npublic enum PathNormalizationOption\n{\n    None = 0, // No normalization of path separators.\n    NormalizeToForwardSlash = 1, // Converts all directory separators to \u0027/\u0027.\n}\n\npublic class ZipFile\n{\n    public static ZipArchive Open(string path, ZipArchiveMode mode, PathNormalizationOption option = PathNormalizationOption.None);\n}\n```\n\n\n### API Usage\n\n```csharp\nusing (var archive = ZipFile.Open(zipPath, ZipArchiveMode.Create, PathNormalizationOption.NormalizeToForwardSlash))\n{\n    // Do something with archive\n}\n```\n\nWith this approach, developers can easily choose whether to normalize path separators without manually performing string replacement operations.\n\n### Alternative Designs\n\nAnother possible design would be to add a boolean parameter to methods like `CreateEntryFromFile` to specify whether path separators should be normalized. However, this approach is less intuitive and centralized compared to setting the option directly when opening the archive.\n\n### Risks\n\nThe risk associated with this change is minimal, as it only involves adding a new enumeration type and an additional parameter to an existing method. Moreover, it does not affect existing behavior by default unless the path normalization option is explicitly specified.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOqOP_Dw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6gigf3",
                                           "createdAt":  "2025-03-03T06:31:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io-compression\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-03-03T06:31:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hYFe-",
                                           "createdAt":  "2025-03-07T20:58:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "@XmmShp -- have you tried doing this with existing APIs?  This seems like a pretty special purpose API, we don\u0027t even have it on Path but similar problems exist there when folks are dealing with path strings that might need to work cross-platform.  cc @dotnet/area-system-io. \n\nIf you can\u0027t do it today with existing APIs, then maybe you might want to consider making a more generalized API proposal like `ZipArchiveEntry.Rename` or similar?",
                                           "updatedAt":  "2025-03-07T20:58:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6haL40",
                                           "createdAt":  "2025-03-08T04:15:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "XmmShp",
                                           "body":  "\u003e [@XmmShp](https://github.com/XmmShp) -- have you tried doing this with existing APIs? \n\n@ericstj I solved it locally with a simple string.Replace(Path.DirectorySeparatorChar, \u0027/\u0027) method, but I believe a more directive solution should be provided for this issue. It might even be considered to set this as an Option for Open, because I think this problem could trouble many people using dotnet to manipulate Zip files across platforms.",
                                           "updatedAt":  "2025-03-08T04:15:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6h_Wqk",
                                           "createdAt":  "2025-03-12T12:33:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dovisutu",
                                           "body":  "It\u0027s not quite intuitive that callers are responsible for ensuring that forward slashes should be used as *directory separators* (dotnet documentations apparently did\u0027t mention it, and there are several instances of reporting it in this repo), so at least *some*thing needs to be done.\n\nTechnically noting the separator issue in the documentation is already ok, but I would still prefer to have this normalization (*optionally*, of course, as backslashes are *valid* in zip entries) in methods like `CreateFromFile`, where it\u0027s common to set the entry path to some sort of file-system-based relative path with potentially wrong separators, and having to replace it ourselves is somewhat awkward. So basically adding a bool argument that (well, it has to) defaults to false.\n\nA generalized `NormalizePath` method as proposed seems too overkill, though, unless normalizing paths turns out to be more common - and then we wouldn\u0027t put it in ZipArchive.\n\n",
                                           "updatedAt":  "2025-03-12T12:33:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6o4_8P",
                                           "createdAt":  "2025-04-27T15:31:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "XmmShp",
                                           "body":  "Thank you all for your attention and discussion on the previous proposal. After further consideration, I believe introducing an option (e.g., `PathNormalizationOption`) in the `ZipFile.Open` method to handle path separator normalization could be a more integrated and user-friendly solution. This approach not only simplifies the developer\u0027s workflow but also enhances cross-platform compatibility when working with .zip files.",
                                           "updatedAt":  "2025-04-27T15:31:51Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "[API Proposal]: Introduce PathNormalizationOption in ZipFile.Open for Cross-Platform Zip Entry Path Compatibility",
        "labels":  [
                       "api-suggestion",
                       "area-System.IO.Compression"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/115780",
        "createdAt":  "2025-05-20T12:30:51Z",
        "number":  115780,
        "author":  "jsakamoto",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-11T13:50:32Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nWhen using the `ZipArchiveEntry.Open()` method to read the stream of a zipped file in a Blazor WebAssembly application, the application will be forced to terminate at runtime. This issue only occurs when publishing the application in Release mode with runtime relinking enabled, and only with .NET 10 Preview 3 or 4. The issue does not occur with .NET 9 or earlier versions, nor with .NET 10 Preview 1 or 2. Additionally, the issue does not reproduce during development-time execution (i.e., `dotnet run` or `dotnet watch`).\n\nThe error appears in the browser\u0027s developer console as follows:\n\n```\n[MONO] * Assertion at /__w/1/s/src/runtime/src/mono/mono/metadata/method-builder-ilgen.c:631, condition `\u003cdisabled\u003e\u0027 not met\n```\n\nThis appears to be a regression introduced in .NET 10 Preview 3.\n\n### Expected Behavior\n\n`ZipArchiveEntry.Open()` should correctly return a readable stream for the contents of a zip entry, even in Release mode with runtime relinking enabled, without crashing the application.\n\n### Steps To Reproduce\n\n1. Install the .NET SDK version 10 Preview 4 and the `wasm-tools` workload with the `dotnet workload install wasm-tools` command. _[2025-08-01 Updated]_ \n2. Download the sample project: [BlazorWasmApp1.zip](https://github.com/user-attachments/files/20347418/BlazorWasmApp1.zip)\n3. Extract the contents to a working directory.\n4. Publish the project using the following command: `dotnet publish -f net10.0`\n5. Install the dotnet-serve tool (if not already installed): `dotnet tool install -g dotnet-serve`\n6. Serve the published application using: `dotnet serve -p 5000 -d .\\bin\\Release\\net10.0\\publish\\wwwroot\\`\n7. Open the browser and navigate to: `http://localhost:5000/`\n8. Click the \"Extract the sample.zip file\" button on the page.\n9. Observe that a yellow bar appears saying \"An unhandled error has occurred\".\n10. Open the browser\u0027s developer console, and you will see the following error:\n```\n[MONO] * Assertion at /__w/1/s/src/runtime/src/mono/mono/metadata/method-builder-ilgen.c:631, condition `\u003cdisabled\u003e\u0027 not met\n```\n\n![Image](https://github.com/user-attachments/assets/9118e3bd-c00a-4022-910f-f5ed7991ccda)\n\n\n\n### Exceptions (if any)\n\n```\n[MONO] * Assertion at /__w/1/s/src/runtime/src/mono/mono/metadata/method-builder-ilgen.c:631, condition `\u003cdisabled\u003e\u0027 not met\n```\n\n### .NET Version\n\n10.0.100-preview.4.25258.110 and `wasm-tools` workload. _[2025-08-01 Updated]_\n\n### Anything else?\n\nThis issue does not occur under the following conditions:\n\n- When publishing with .NET 9:\n\n```\ndotnet publish -f net9.0\ndotnet serve -p 5000 -d .\\bin\\Release\\net9.0\\publish\\wwwroot\\\n```\n\n- When publishing with .NET 10 Preview 4, but with runtime relinking disabled via the `UsingBrowserRuntimeWorkload` MSBuild property:\n\n```\ndotnet publish -f net10.0 -p:UsingBrowserRuntimeWorkload=false\ndotnet serve -p 5000 -d .\\bin\\Release\\net10.0\\publish\\wwwroot\\\n```\n\n![Image](https://github.com/user-attachments/assets/dc0f948d-5385-4d72-8261-6a0ac43dddbb)\n\nThe `UsingBrowserRuntimeWorkload=false` workaround is not viable for real-world applications because runtime relinking is essential for reducing the download size of Blazor WebAssembly apps and for enabling interop with WebAssembly-native modules written in C/C++ or Rust.\n\nThis issue seems to be a regression introduced in .NET 10 Preview 3 and needs to be addressed to maintain the functionality and performance of Blazor WebAssembly applications that depend on `System.IO.Compression`.\n\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOw41kNw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6shISI",
                                           "createdAt":  "2025-05-20T13:13:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io-compression\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-05-20T13:13:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6tkWsz",
                                           "createdAt":  "2025-05-27T10:21:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sofiageo",
                                           "body":  "I have the same issue since preview 4 released, thanks for the workaround.\n\nFrom the title of this issue I assume for my case this is caused by `new GZipStream(s, CompressionMode.Decompress)`\n\np.s I believe it used to work fine with preview 3",
                                           "updatedAt":  "2025-05-27T10:28:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6t6jSb",
                                           "createdAt":  "2025-05-28T23:05:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Removing compression label.  Please only apply a single area-* label.  If you need compression owners to have a look at this apply that label (or if it\u0027s just for review you can use @dotnet/area-system-io-compression)",
                                           "updatedAt":  "2025-05-28T23:05:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6xfR8T",
                                           "createdAt":  "2025-06-16T19:06:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lewing",
                                           "body":  "@ericstj this regression appears to have been caused by changes to system.io.compression in net10",
                                           "updatedAt":  "2025-06-16T19:06:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6yaZD1",
                                           "createdAt":  "2025-06-21T02:33:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io-compression\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-21T02:33:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc67Lpyx",
                                           "createdAt":  "2025-07-31T15:23:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEczL1g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "jsakamoto",
                                                                               "createdAt":  "2025-08-01T12:41:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "rzikm",
                                           "body":  "@jsakamoto Can you try reproducing the issue with latest .NET 10 preview? I just tried with preview 6 and I cannot reproduce the issue locally.",
                                           "updatedAt":  "2025-07-31T15:23:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc67b4YS",
                                           "createdAt":  "2025-08-01T13:44:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jsakamoto",
                                           "body":  "@rzikm I’m very sorry, I realized that the prerequisites I initially provided were not complete. Just installing the .NET SDK was not enough to reproduce the issue. It was also necessary to install the wasm-tools workload in advance using the following command:\n\n```\ndotnet workload install wasm-tools\n```\n\nI will edit and update the Issue report later to correct this.\n\nAlso, unfortunately, this problem still happens with .NET SDK 10 Preview 6. Today, I built a new virtual machine with a clean install of Windows 11. Then, I only installed .NET SDK 10 Preview 6 and the wasm-tools workload. After that, I followed the same steps written in this Issue. As a result, I saw the same error again.",
                                           "updatedAt":  "2025-08-01T13:44:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc67cGXE",
                                           "createdAt":  "2025-08-01T14:05:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEc2Uiw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jsakamoto",
                                                                               "createdAt":  "2025-08-01T19:49:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "sofiageo",
                                           "body":  "I can confirm what @jsakamoto is saying, I just tried a release build that worked, then I realized I didn\u0027t have the latest wasm-tools. After installing wasm-tools and deploying a release build for a second time, the error occured like with .NET preview 4\n\n\u003e Assertion at /__w/1/s/src/runtime/src/mono/mono/metadata/method-builder-ilgen.c:631, condition `\u003cdisabled\u003e\u0027 not met",
                                           "updatedAt":  "2025-08-01T14:05:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc69xA8N",
                                           "createdAt":  "2025-08-13T12:37:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jsakamoto",
                                           "body":  "[FYI] I have just tried again with the newly released .NET 10 Preview 7 SDK, and the issue still reproduces. As the status of this issue remains Open, this result is of course expected, but I wanted to confirm and report it just in case.",
                                           "updatedAt":  "2025-08-13T12:37:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_Bh5L",
                                           "createdAt":  "2025-08-20T08:38:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maraf",
                                           "body":  "The issue is caused by native relink. When running `dotnet run -p:WasmBuildNative=true`, the exception is\n\n```\ncrit: Microsoft.AspNetCore.Components.WebAssembly.Rendering.WebAssemblyRenderer[100]\n      Unhandled exception rendering component: ZLibErrorDLLLoadError\nSystem.IO.Compression.ZLibException: ZLibErrorDLLLoadError\n ---\u003e System.ApplicationException: Cannot marshal nonblittlable types without marshal-ilgen.\n   at System.IO.Compression.ZLibNative.ZLibStreamHandle.InflateInit2_(Int32 windowBits)\n   at System.IO.Compression.ZLibNative.CreateZLibStreamForInflate(ZLibStreamHandle\u0026 zLibStreamHandle, Int32 windowBits)\n   at System.IO.Compression.Inflater.InflateInit(Int32 windowBits)\n   Exception_EndOfInnerExceptionStack\n   at System.IO.Compression.Inflater.InflateInit(Int32 windowBits)\n   at System.IO.Compression.Inflater..ctor(Int32 windowBits, Int64 uncompressedSize)\n   at System.IO.Compression.DeflateStream..ctor(Stream stream, CompressionMode mode, Boolean leaveOpen, Int32 windowBits, Int64 uncompressedSize)\n   at System.IO.Compression.DeflateStream..ctor(Stream stream, CompressionMode mode, Int64 uncompressedSize)\n   at System.IO.Compression.ZipArchiveEntry.GetDataDecompressor(Stream compressedStreamToRead)\n   at System.IO.Compression.ZipArchiveEntry.OpenInReadModeGetDataCompressor(Int64 offsetOfCompressedData)\n   at System.IO.Compression.ZipArchiveEntry.OpenInReadMode(Boolean checkOpenable)\n   at System.IO.Compression.ZipArchiveEntry.Open()\n   at BlazorWasmApp1.App.OnClickButton() in /Users/marekfisera/Development/samples/BlazorWasmZipEntry/BlazorWasmApp1/App.razor:line 45\n   at Microsoft.AspNetCore.Components.ComponentBase.CallStateHasChangedOnAsyncCompletion(Task task)\n   at Microsoft.AspNetCore.Components.RenderTree.Renderer.GetErrorHandledTask(Task taskToHandle, ComponentState owningComponentState)\n```\n\nRunning marshalling scanner doesn\u0027t result in including `marshal-ilgen` mono component https://github.com/dotnet/runtime/blob/main/src/mono/wasm/build/WasmApp.Common.targets#L585-L591. Manually including the component results in working build output. Nothing in the targets changed in .NET 10.\n\n@rolfbjarne Is it connected to https://github.com/dotnet/runtime/pull/112981? Using .NET 9 version of `MarshalingPInvokeScanner` results in expected output",
                                           "updatedAt":  "2025-08-20T09:03:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_CcIx",
                                           "createdAt":  "2025-08-20T09:21:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEe9feQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maraf",
                                                                               "createdAt":  "2025-08-20T13:06:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "rolfbjarne",
                                           "body":  "\u003e [@rolfbjarne](https://github.com/rolfbjarne) Is it connected to [#112981](https://github.com/dotnet/runtime/pull/112981)? Using .NET 9 version of `MarshalingPInvokeScanner` results in expected output\n\nIt\u0027s entirely possible my fix uncovered other bugs, I found many issues in the area when I was looking at this.\n\nI believe this is what\u0027s happening:\n\n1. The P/Invoke signature in question doesn\u0027t actually have any non-blittable types, it has an enum as a return type, a pointer and an int: https://github.com/dotnet/runtime/blob/3376cbd4d130ff45ac6ac2871180b1712bc12f7d/src/libraries/Common/src/Interop/Interop.zlib.cs#L26-L27\n2. I suspect the enum is being incorrectly detect as non-blittable here: https://github.com/dotnet/runtime/blob/3376cbd4d130ff45ac6ac2871180b1712bc12f7d/src/mono/mono/component/marshal-ilgen-stub.c#L30-L50\n3. My fix uncovered this, because previously any `[DisableRuntimeMarshalling]` attributes on the `System.IO.Compression` assembly would not be seen, and thus the `marshal-ilgen` component would always be included.\n\nFeel free to revert my PR if need be, my use case needed other bug fixes which weren\u0027t implemented (https://github.com/dotnet/runtime/issues/112982), so I can\u0027t use `MarshalingPInvokeScanner` anyway.\n",
                                           "updatedAt":  "2025-08-20T09:21:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_HMRj",
                                           "createdAt":  "2025-08-20T13:24:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maraf",
                                           "body":  "Thank you!\n\nThe build-time [MinimalMarshalingTypeCompatibilityProvider.cs](https://github.com/dotnet/runtime/blob/3376cbd4d130ff45ac6ac2871180b1712bc12f7d/src/tasks/MonoTargetsTasks/MarshalingPInvokeScanner/MinimalMarshalingTypeCompatibilityProvider.cs#L100-L113) states that enums are compatible, but on runtime [marshal-ilgen-stub.c](https://github.com/dotnet/runtime/blob/3376cbd4d130ff45ac6ac2871180b1712bc12f7d/src/mono/mono/component/marshal-ilgen-stub.c#L30-L50) doesn\u0027t.\n\nPrinting the `t-\u003etype` produces value `17`, which is not in the `MONO_TYPE_` list of constants.",
                                           "updatedAt":  "2025-08-20T18:39:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DVXx4",
                                           "createdAt":  "2025-09-11T02:36:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jsakamoto",
                                           "body":  "Hello @lewing,\n \nI tested this issue again with the latest .NET 10 SDK RC 1 (version 10.0.100-rc.1.25451.107). On my local machines, the problem appears to be resolved. I tested it on both Windows 11 Pro 24H2 and Ubuntu 25.04 on WSL.\n\nHowever, when I deployed the same app to GitHub Pages, the issue came back. The app crashes when calling `ZipArchiveEntry.Open()` in the published app with runtime relinking.\n\nI also tried publishing the app inside GitHub Codespaces using the following steps:\n\n```shell\nwget https://dot.net/v1/dotnet-install.sh -O dotnet-install.sh\nchmod +x ./dotnet-install.sh\n./dotnet-install.sh --version 10.0.100-rc.1.25451.107\ndotnet workload install wasm-tools\ndotnet publish -f net10.0\ndnx dotnet-serve --default-extensions:html -d:./bin/Release/net10.0/publish/wwwroot/\n```\n\nThe error occurred again in this environment as well.\n\nI have uploaded the whole project and GitHub Actions workflow here:\n\nhttps://github.com/sample-by-jsakamoto/Blazor-Issue115780-ZipArchiveEntry.Open\n\nI am not sure if this is a new issue or still related to the original one. However, since the crash still occurs in real-world deployments, I kindly ask that you consider reopening this issue.\n\nThank you very much for your time and support.\n",
                                           "updatedAt":  "2025-09-11T02:36:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DjUMh",
                                           "createdAt":  "2025-09-11T13:47:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "The app is deployed [here](https://sample-by-jsakamoto.github.io/Blazor-Issue115780-ZipArchiveEntry.Open/)\n\nIt fails with \n```\n* Assertion at /__w/1/s/src/runtime/src/mono/mono/metadata/method-builder-ilgen.c:631, condition `\u003cdisabled\u003e\u0027 not met\n```\n\nAnd I see in the binary that workload was `10.0.0-rc.1.25451.107`",
                                           "updatedAt":  "2025-09-11T13:47:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DjWQ3",
                                           "createdAt":  "2025-09-11T13:48:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEh7ThQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jsakamoto",
                                                                               "createdAt":  "2025-09-11T23:44:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "the 10.0 backport https://github.com/dotnet/runtime/pull/119296 was too late for RC1 so it makes sense that you still see it there, not sure why you don\u0027t see it locally though\n\nyou could try an RC2 build, e.g. 10.0.0-rc.2.25460.104",
                                           "updatedAt":  "2025-09-11T13:50:32Z"
                                       }
                                   ],
                         "totalCount":  15
                     },
        "title":  "Blazor WebAssembly - `ZipArchiveEntry.Open` causes unexpected termination at runtime in published app on .NET 10 Preview 3 and 4",
        "labels":  [
                       "area-System.IO.Compression",
                       "regression-from-last-release"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/116227",
        "createdAt":  "2025-06-02T20:27:03Z",
        "number":  116227,
        "author":  "Mrgaton",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-04T08:49:41Z",
        "body":  "It would be awesome that you could specify the window size from BrotliCompressionOptions just like BrotliEncoder and support large window sizes like the native brotli encoder.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOrsp_Jg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6uyG2R",
                                           "createdAt":  "2025-06-02T20:27:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Mrgaton",
                                           "body":  "![Image](https://github.com/user-attachments/assets/b34e5215-321e-4d6f-a10b-4b630ccbfb83)\n\n![Image](https://github.com/user-attachments/assets/705aa4e1-3f88-452b-a966-8401b3f3edfe)",
                                           "updatedAt":  "2025-06-02T20:27:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6uyn8m",
                                           "createdAt":  "2025-06-02T21:12:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io-compression\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-02T21:12:05Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Be able to specify window size in BrotliCompressionOptions and let use large window size as native brotli encoder",
        "labels":  [
                       "api-suggestion",
                       "area-System.IO.Compression",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117285",
        "createdAt":  "2025-07-03T18:29:01Z",
        "number":  117285,
        "author":  "Gamecock",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODJLUVw==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "rokonec",
                                            "createdAt":  "2025-07-30T15:37:03Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-29T17:07:36Z",
        "body":  "https://nvd.nist.gov/vuln/detail/CVE-2023-45853\n\nThe experimental MiniZip package for zlib is vulnerable to a memory corruption issue due to the presence of a heap-based buffer overflow flaw in the zipOpenNewFileInZip4_64() function that can occur as a result of an integer overflow.\n\nAn attacker could supply a crafted ZIP file with a long filename, comment, size_extrafield_local or size_extrafield_global value to an application using MiniZip in order to trigger the integer overflow issue and cause a buffer overflow to occur. Such overflows could potentially be abused to lead to serious confidentiality, integrity or availability impacts.\n\nNote: MiniZip is an unofficial, third party contribution for the zlib library and is thus not fully supported.\n\nIs there a way to tell if Microsoft.xx.xx or Azure.xx.xx packages are using MiniZip, or a plan to upgrade version to 1.3.1?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOusNSnQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc60_-4S",
                                           "createdAt":  "2025-07-04T15:19:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "I am not sure why blackduck flagged this, since we do not bundle minizip with our product. You can confirm this for yourself by looking at our copy of the zlib code:\n\nhttps://github.com/dotnet/runtime/tree/v8.0.15/src/native/external/zlib\n\nWe don\u0027t copy the \"contrib\" folder (which contains minizip and other experimental features) from the upstream sources.",
                                           "updatedAt":  "2025-07-04T15:19:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc61AHsP",
                                           "createdAt":  "2025-07-04T15:30:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEcgxaQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ericstj",
                                                                               "createdAt":  "2025-07-07T16:37:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rokonec",
                                                                               "createdAt":  "2025-07-30T15:33:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "blowdart",
                                           "body":  "@Gamecock Which version of Blackduck are you seeing this with? And would it be possible to share the complete output?",
                                           "updatedAt":  "2025-07-04T15:30:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc61AHsW",
                                           "createdAt":  "2025-07-04T15:30:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "That said, the feature team should consider leaving this issue open to track bumping the dependency version. Though there\u0027s no vulnerability present, it would benefit folks if we could get ahead of potential future false positive reports here.",
                                           "updatedAt":  "2025-07-04T15:30:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc61CLUH",
                                           "createdAt":  "2025-07-04T21:13:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Gamecock",
                                           "body":  "Thanks for the quick response.  I can get the version Monday, and see what else I\u0027m allowed to share.",
                                           "updatedAt":  "2025-07-04T21:13:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc61huaB",
                                           "createdAt":  "2025-07-07T14:55:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Gamecock",
                                           "body":  "Black Duck Version:  2024.10.0",
                                           "updatedAt":  "2025-07-07T14:55:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc61hwAr",
                                           "createdAt":  "2025-07-07T14:57:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Gamecock",
                                           "body":  "![Image](https://github.com/user-attachments/assets/2979b70e-8a8f-4a38-b10f-3173ef590b16)",
                                           "updatedAt":  "2025-07-07T14:57:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc61hwyg",
                                           "createdAt":  "2025-07-07T14:58:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Gamecock",
                                           "body":  "![Image](https://github.com/user-attachments/assets/518e7de8-85bb-4d08-91df-fad35b79daea)",
                                           "updatedAt":  "2025-07-07T14:58:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc61i7DK",
                                           "createdAt":  "2025-07-07T16:27:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "Turns out 8.0.15 already pulls in the 1.3.1 sources. Check the top of the changelog:\n\nhttps://github.com/dotnet/runtime/blob/v8.0.15/src/native/external/zlib/ChangeLog\n\nSo it looks like this is just a false positive within Black Duck.",
                                           "updatedAt":  "2025-07-07T16:27:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc61jEKf",
                                           "createdAt":  "2025-07-07T16:37:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "I wonder if any more information / diagnostics can be shared to understand what the scanner is actually seeing?  ",
                                           "updatedAt":  "2025-07-07T16:37:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc64U6q1",
                                           "createdAt":  "2025-07-19T18:09:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Gamecock",
                                           "body":  "@ericstj   Sorry, I was travelling last week.  What  information are you looking for?",
                                           "updatedAt":  "2025-07-19T18:09:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc64-eeR",
                                           "createdAt":  "2025-07-22T15:28:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "We\u0027ve pointed out that this appears to be a false positive since the code base mentioned uses a newer zlib.  For us to do anything to make progress we would need diagnostic information from the tool about what it\u0027s seeing that appears to be out of date, or simplified repro steps to see the error ourselves (without purchasing or signing up for some 3rd party software).\n\nIf there is anything like a verbose diagnostic log from this software that shows what it\u0027s detecting (including all inputs) we can take a look at it.  Without that we\u0027d just say \"false positive / external\" and recommend you report the issue against black duck.",
                                           "updatedAt":  "2025-07-22T15:28:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc66w1Kd",
                                           "createdAt":  "2025-07-29T17:07:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Gamecock",
                                           "body":  "Black Duck is finding it in two places:\n\n\u003cimg width=\"1516\" height=\"112\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/b1262df3-411d-442e-a58f-89b3c3efe8e6\" /\u003e\nSystem.IO.Compression.Native.dll\nMicrosoft.DiaSymReader.Native.amd64.dll\n\nIt looks like the 2nd copies it in here:\nhttps://github.com/dotnet/runtime/blob/main/eng/DiaSymReaderNative.targets",
                                           "updatedAt":  "2025-07-29T17:07:21Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "Black Duck Detects CVE-2023-45853 from madler/zlib:v1.2.13 in dotnet 8.0.15",
        "labels":  [
                       "area-System.IO.Compression",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118784",
        "createdAt":  "2025-08-15T15:26:13Z",
        "number":  118784,
        "author":  "rzikm",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODMeVLw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nhelfman",
                                            "createdAt":  "2025-08-25T08:22:52Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-09-02T12:28:12Z",
        "body":  "### Background and motivation\n\nRelated to #112656 \nDraft implementation PR #118783\n\nBrotli is a flexible compression algorithm which allows specifying custom dictionary to achieve better compression performance on particular types of data. One of the possible uses for this is https://datatracker.ietf.org/doc/draft-ietf-httpbis-compression-dictionary/.\n\n#### Technical background\n\nWhen attaching a dictionary to encoder/decoder, `brotli` library does not copy the provided dictionary data, so our implementation will have to ensure that\n1) the dictionary data is kept alive and (preferably) unmodified\n2) the dictionary data is pinned and is not moved by GC\n\nFor the above reason, this proposal creates a new class `BrotliDictionary` which user can construct, and then reuse across multiple encoder/decoder/streams.\n\nWhen constructing a dictionary, the native API accepts an enum specifying the dictionary type\n\nhttps://github.com/dotnet/runtime/blob/5fe72c12cd557197824c2485748c9e9a4af36b46/src/native/external/brotli/c/include/brotli/shared_dictionary.h#L35-L43\n\nIn theory, more than one dictionary formats may be supported in the future, so creating BrotliDictionary instances via factory method is preferred.\n\nThe way how a dictionary is attached to an encoder or decoder is assymetrical:\n\nEncoder side accepts a separately constructed `BrotliEncoderPreparedDictionary` object.\n\n```c\nBROTLI_ENC_API BrotliEncoderPreparedDictionary*\nBrotliEncoderPrepareDictionary(BrotliSharedDictionaryType type,\n    size_t data_size, const uint8_t data[BROTLI_ARRAY_PARAM(data_size)],\n    int quality,\n    brotli_alloc_func alloc_func, brotli_free_func free_func, void* opaque);\n\nBROTLI_ENC_API BROTLI_BOOL BrotliEncoderAttachPreparedDictionary(\n    BrotliEncoderState* state,\n    const BrotliEncoderPreparedDictionary* dictionary);\n```\n\nDecoder side accepts a byte array.\n\n```c\nBROTLI_DEC_API BROTLI_BOOL BrotliDecoderAttachDictionary(\n    BrotliDecoderState* state, BrotliSharedDictionaryType type,\n    size_t data_size, const uint8_t data[BROTLI_ARRAY_PARAM(data_size)]);\n```\n\nBoth sides require the data array to be kept alive.\n\nFor simplicity, this proposal seeks to add the same signature for either side.\n\n### API Proposal\n\n```diff\n+    public sealed class BrotliDictionary : System.IDisposable\n+    {\n+        internal BrotliDictionary() { }\n           // Alternative name: CreateFromRawBytes or just Create\n+        public static System.IO.Compression.BrotliDictionary CreateFromBytes(System.ReadOnlySpan\u003cbyte\u003e buffer) { throw null; }\n\n          // The underlying native API also accepts a quality parameter, but only for Encoder path (Decoder part hardcodes MAX quality when attaching dictionary.\n+        public static System.IO.Compression.BrotliDictionary CreateFromBytes(System.ReadOnlySpan\u003cbyte\u003e buffer, int quality) { throw null; }\n+        public void Dispose() { }\n+    }\n\n     public struct BrotliDecoder : System.IDisposable\n     {\n+        public void AttachDictionary(System.IO.Compression.BrotliDictionary dictionary) { }\n     }\n\n\n     public struct BrotliEncoder : System.IDisposable\n     {\n+        public void AttachDictionary(System.IO.Compression.BrotliDictionary dictionary) { }\n     }\n\n     public class BrotliStream\n     {\n+        public void AttachDictionary(System.IO.Compression.BrotliDictionary dictionary) { }\n     }\n```\n\n\n### API Usage\n\n```csharp\nBrotliDictionary dictionary = BrotliDictionary.CreateFromBuffer(RawDictionaryData);\n\nBrotliStream stream = new BrotliStream(....);\nstream.AttachDictionary(dictionary);\n\n// use stream as usual\n```\n\n\n### Alternative Designs\n\nAccepting dictionaries in Encoder/Decoder ctor would also be possible, but then we need to introduce many constructor overloads (especially for BrotliStream). Also, keep in mind that it is possible to attach multiple dictionaries in Brotli, so additional overloads accepting a dictionary collection might be needed.\n\nAn approach requiring fewer allocations is possible for decoders, as the native API only requires a reference to an array (that must be kept alive/pinned for the lifetime of the Decoder). But the design is more complicated and error prone, and if we assume that dictionaries are going to be long-lived and reused, does not offer enough savings.\n\n### Risks\n\nLifetime management of the BrotliDictionary (more specificly, the native memory held by the safe handle within) can be tricky. since brotli does not do any internal refcounting to ensure the dictionary will be alive long enough, we need to perform the refcounting in Managed code on the relevant SafeHandle types.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwWyDpA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6-Pxwp",
                                           "createdAt":  "2025-08-15T15:26:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-collections\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-15T15:26:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-PyTF",
                                           "createdAt":  "2025-08-15T15:27:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io-compression\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-15T15:27:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BbIOk",
                                           "createdAt":  "2025-09-02T12:28:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rzikm",
                                           "body":  "@dotnet/area-system-io-compression Can you folks take a look? If there are no concerns I would put this to the API review queue.",
                                           "updatedAt":  "2025-09-02T12:28:12Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[API Proposal]: custom dictionary support for Brotli",
        "labels":  [
                       "api-suggestion",
                       "area-System.IO.Compression"
                   ]
    }
]
