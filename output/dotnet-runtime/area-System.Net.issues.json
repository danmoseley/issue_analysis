[
    {
        "url":  "https://github.com/dotnet/runtime/issues/909",
        "createdAt":  "2016-08-07T12:02:12Z",
        "number":  909,
        "author":  "ohadschn",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC70WQA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xplicit",
                                            "createdAt":  "2016-10-31T05:16:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DecaTec",
                                            "createdAt":  "2017-03-19T10:49:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "FinnNk",
                                            "createdAt":  "2017-05-13T14:49:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dad045",
                                            "createdAt":  "2017-06-19T18:01:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jerone",
                                            "createdAt":  "2019-01-29T12:53:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "IanKemp",
                                            "createdAt":  "2019-11-22T06:57:16Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "dzmitry-lahoda",
                                            "createdAt":  "2020-01-14T12:56:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hauntingEcho",
                                            "createdAt":  "2020-06-19T15:09:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "wjrogers",
                                            "createdAt":  "2022-04-19T12:33:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tbrillet",
                                            "createdAt":  "2023-01-18T10:32:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ldeluigi",
                                            "createdAt":  "2023-01-26T17:20:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jmoralesv",
                                            "createdAt":  "2023-04-27T19:01:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "silkfire",
                                            "createdAt":  "2023-09-23T09:56:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JohnKiller",
                                            "createdAt":  "2023-09-23T13:30:18Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "IEvangelist",
                                            "createdAt":  "2023-11-16T20:40:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "thepirat000",
                                            "createdAt":  "2024-09-27T23:54:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "markusroessler",
                                            "createdAt":  "2024-10-14T21:30:21Z"
                                        }
                                    ],
                          "totalCount":  17
                      },
        "updatedAt":  "2025-02-25T02:27:08Z",
        "body":  "Any reason why it\u0027s internal? Perhaps it\u0027s all the unsafe stuff going on at _HttpKnownHeaderNames.TryGetHeaderName.cs_ but at least the constants could be factored out and exposed - they can be very useful. See for example: http://stackoverflow.com/questions/11037004/asp-mvc-are-there-any-constants-for-the-default-http-headers.\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOn8ETbA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI4NDExNDI2Ng==",
                                           "createdAt":  "2017-03-04T01:22:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "The file is here: [HttpKnownHeaderNames.TryGetHeaderNames.cs](https://github.com/dotnet/corefx/blob/30f2f877c01940904b85691a09da5f91352ffad9/src/Common/src/System/Net/HttpKnownHeaderNames.TryGetHeaderName.cs)\r\n\r\nNext step: We need formal API proposal - i.e. API shape (trivial) with motivation and use cases for it to be public API.",
                                           "updatedAt":  "2017-03-04T01:22:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzNjMyNDM4OQ==",
                                           "createdAt":  "2018-11-06T16:50:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "yringler",
                                           "body":  "@ohadschn @karelz,  I think this could be closed?\r\n\r\nThe header name strings are now availaible at [Microsoft.Net.Http.Headers](https://docs.microsoft.com/en-us/dotnet/api/microsoft.net.http.headers.headernames?view=aspnetcore-2.0)",
                                           "updatedAt":  "2018-11-06T16:50:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzNjMyNzA1Ng==",
                                           "createdAt":  "2018-11-06T16:57:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Looks like ASP.NET extension, not something part of .NET Core platform / BCL itself.",
                                           "updatedAt":  "2018-11-06T16:57:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzNjMyODI0MQ==",
                                           "createdAt":  "2018-11-06T17:00:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC6vdsg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "karelz",
                                                                               "createdAt":  "2018-11-06T17:02:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jmoralesv",
                                                                               "createdAt":  "2023-04-27T19:02:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "davidsh",
                                           "body":  "@Tratcher - What is the plan for Microsoft.Net.Http.Headers?  It would be good to converge on a single API for this instead of .NET Core also exposing a similar/duplicative API surface as Microsoft.Net.Http.Headers.",
                                           "updatedAt":  "2018-11-06T17:00:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzNjMyOTAyMg==",
                                           "createdAt":  "2018-11-06T17:02:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC6vdvA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "IanKemp",
                                                                               "createdAt":  "2019-04-30T13:23:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "jmoralesv",
                                                                               "createdAt":  "2023-04-27T19:03:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "The theory was that it could eventually be contributed back to corefx but there\u0027s no official plan or schedule to do so.",
                                           "updatedAt":  "2018-11-06T17:02:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4ODU1NDE4MA==",
                                           "createdAt":  "2019-05-02T05:04:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "IanKemp",
                                           "body":  "\u003e The theory was that it could eventually be contributed back to corefx but there\u0027s no official plan or schedule to do so.\r\n\r\nWhy not?",
                                           "updatedAt":  "2019-05-02T05:04:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4ODU1ODY2OQ==",
                                           "createdAt":  "2019-05-02T05:41:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "Microsoft.Net.Http.Headers duplicated many of the types in System.Net.Http.Headers but then made many breaking changes to improve how they work. CoreFx is strongly against taking breaking changes so re-unifying is going to be very hard.\r\n\r\nThe HeaderNames class would be one of the easiest since CoreFx doesn\u0027t have that type, but moving it would breaking existing AspNetCore customers.",
                                           "updatedAt":  "2019-05-02T05:41:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4ODU1ODk2MQ==",
                                           "createdAt":  "2019-05-02T05:43:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "IanKemp",
                                           "body":  "\u003e Microsoft.Net.Http.Headers duplicated many of the types in System.Net.Http.Headers but then made many breaking changes to improve how they work. CoreFx is strongly against taking breaking changes so re-unifying is going to be very hard.\r\n\u003e \r\n\u003e The HeaderNames class would be one of the easiest since CoreFx doesn\u0027t have that type, but moving it would breaking existing AspNetCore customers.\r\n\r\nCouldn\u0027t you forward that type?",
                                           "updatedAt":  "2019-05-02T05:43:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4ODU2MDU2Mw==",
                                           "createdAt":  "2019-05-02T05:55:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "Type forwards have limits, like you can\u0027t change the namespace.",
                                           "updatedAt":  "2019-05-02T05:55:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4ODY0ODEwMQ==",
                                           "createdAt":  "2019-05-02T12:08:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e but then made many breaking changes to improve how they work. CoreFx is strongly against taking breaking changes so re-unifying is going to be very hard.\r\n\r\nCan you enumerate what the breaking changes are? Are they all API signature changes? Internal details that change behavior? A mix? We should evaluate the changes individually; it\u0027s possible some of the breaks could be tolerable, depending on what they are ",
                                           "updatedAt":  "2019-05-02T12:09:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4OTc0MDA4OA==",
                                           "createdAt":  "2019-05-06T19:13:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "@stephentoub MediaTypeHeaderValue makes a good example:\r\nhttps://github.com/dotnet/corefx/blob/master/src/System.Net.Http/src/System/Net/Http/Headers/MediaTypeHeaderValue.cs\r\nhttps://github.com/aspnet/AspNetCore/blob/master/src/Http/Headers/src/MediaTypeHeaderValue.cs\r\n\r\nBreaking Changes: Constructors, properties, and parsers changed from string to StringSegment to reduce allocations. The constructors and parsers can be reconciled via overloads, but the properties can\u0027t be without duplicating each property.\r\n\r\nNon-breaking additions:\r\n- Strict vs lax parsing.\r\n- New properties for more granular access (Type, SubType, etc.).\r\n- New ReadOnly mode for safe re-usability.\r\n- Matching functionality (IsSubsetOf).",
                                           "updatedAt":  "2019-05-06T19:13:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NTcyODYxOQ==",
                                           "createdAt":  "2019-11-19T21:41:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC6vd3g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "dzmitry-lahoda",
                                                                               "createdAt":  "2020-01-14T12:56:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "jmoralesv",
                                                                               "createdAt":  "2023-04-27T19:03:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "scalablecory",
                                           "body":  "triage: we are okay with this but need an API proposal.",
                                           "updatedAt":  "2019-11-19T21:41:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3NDE2MzYyMw==",
                                           "createdAt":  "2020-01-14T13:03:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dzmitry-lahoda",
                                           "body":  "Lacks https://en.wikipedia.org/wiki/X-Forwarded-For . Would send patch as soon as API ready.",
                                           "updatedAt":  "2020-01-14T13:03:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMDAzNzkzMA==",
                                           "createdAt":  "2021-04-30T11:45:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TheBrambleShark",
                                           "body":  "\u003e \r\n\u003e \r\n\u003e Lacks https://en.wikipedia.org/wiki/X-Forwarded-For . Would send patch as soon as API ready.\r\n\r\nIf we\u0027re adding things, we\u0027re also missing `X-RateLimit-*`. These headers are currently in draft, but it seems there is already pretty widespread adoption. Not sure how we want to handle that - waiting for them to be standardized, marking them somehow as drafts, or some other option.\r\n\r\nhttps://tools.ietf.org/id/draft-polli-ratelimit-headers-00.html",
                                           "updatedAt":  "2021-04-30T11:45:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMDAzODE5NA==",
                                           "createdAt":  "2021-04-30T11:46:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TheBrambleShark",
                                           "body":  "@jkotas Are you still working on this? If not, I would be interested in picking up where you left off.\r\nEdit: Also @MichalStrehovsky. I might have misread the reference.",
                                           "updatedAt":  "2021-04-30T11:47:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMDA0NDAwNA==",
                                           "createdAt":  "2021-04-30T11:58:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "If you\u0027re referring to this:\r\n\r\n![MichalStrehovsky pushed a commit to MichalStrehovsky/runtime that referenced this issue 21 days ago](https://user-images.githubusercontent.com/13110571/116692018-fc314d00-a9bb-11eb-9ac6-5fea5faef501.png)\r\n\r\nI don\u0027t know why it\u0027s mentioned on this issue. It\u0027s unrelated. Neither Jan or I are working on this issue. Github works in mysterious ways.",
                                           "updatedAt":  "2021-04-30T11:58:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMDA0NDU4NQ==",
                                           "createdAt":  "2021-04-30T11:59:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TheBrambleShark",
                                           "body":  "\u003e \r\n\u003e \r\n\u003e If you\u0027re referring to this:\r\n\u003e \r\n\u003e ![MichalStrehovsky pushed a commit to MichalStrehovsky/runtime that referenced this issue 21 days ago](https://user-images.githubusercontent.com/13110571/116692018-fc314d00-a9bb-11eb-9ac6-5fea5faef501.png)\r\n\u003e \r\n\u003e I don\u0027t know why it\u0027s mentioned on this issue. It\u0027s unrelated. Neither Jan or I are working on this issue. Github works in mysterious ways.\r\n\r\nI see.\r\n\r\nIn that case, I\u0027ll write up an API proposal and reference this issue.",
                                           "updatedAt":  "2021-04-30T11:59:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Tw9IX",
                                           "createdAt":  "2023-01-26T17:21:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODxih3g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jmoralesv",
                                                                               "createdAt":  "2023-04-27T19:02:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "seangwright",
                                                                               "createdAt":  "2023-09-27T19:58:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "IfZen",
                                                                               "createdAt":  "2024-08-27T12:16:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rzhewskiy",
                                                                               "createdAt":  "2024-09-09T15:17:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "ldeluigi",
                                           "body":  "Any news on this?",
                                           "updatedAt":  "2023-01-26T17:21:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fwRNs",
                                           "createdAt":  "2025-02-25T02:27:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mguinness",
                                           "body":  "Seems like this issue is as dead as a dodo.  The consensus online seems to be to use `Microsoft.Net.Http.Headers.HeaderNames`.  But it\u0027s confusing having both `System.Net.Http.Headers.HeaderNames` and `Microsoft.Net.Http.Headers.HeaderNames` namespaces.  Another case in point is `MediaTypeHeaderValue` class which exists in both, but the former is missing the useful `Type` and `SubType` properties (amongst others).  Notwithstanding, the fact that this issue hasn\u0027t been resolved in nine years isn\u0027t really encouraging.",
                                           "updatedAt":  "2025-02-25T02:27:07Z"
                                       }
                                   ],
                         "totalCount":  19
                     },
        "title":  "Make HttpKnownHeaderNames public",
        "labels":  [
                       "api-suggestion",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/19436",
        "createdAt":  "2016-11-21T22:10:54Z",
        "number":  19436,
        "author":  "CIPop",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-31T23:06:38Z",
        "body":  "Per offline SCRUM discussion: add e2e NTLM/Kerberos testing for SmtpClient authentication.\r\nExample:\r\nhttps://github.com/dotnet/corefx/blob/master/src/System.Net.Security/tests/FunctionalTests/NegotiateStreamKerberosTest.cs\r\n\r\n/cc: @karelz @Priya91 \r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhs3O5Q==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI4ODU3MjY5Nw==",
                                           "createdAt":  "2017-03-22T23:37:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CIPop",
                                           "body":  "Testing this would require Nego infrastructure (Active Directory, a SMTP server that understands NTLM/Kerberos, etc).",
                                           "updatedAt":  "2017-03-22T23:37:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNzY0NzE3NA==",
                                           "createdAt":  "2019-10-02T19:38:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: This will likely fall out of @davidsh\u0027s enterprise scenarios testing effort which is under way.",
                                           "updatedAt":  "2019-10-02T19:38:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FWROy",
                                           "createdAt":  "2022-06-22T18:26:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "In the prototype branch for issue #70909 I added a test that runs against the fake Negotiate / NTLM server inside the loopback server. Obviously that\u0027s not going to cover Kerberos but it seems like an easiest path to get some coverage for the authentication code paths.",
                                           "updatedAt":  "2022-06-22T18:26:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GsZQS",
                                           "createdAt":  "2024-07-31T06:41:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "@jborean93 created a proof-of-concept for testing against custom local KDC much like we already do on Linux/macOS - https://github.com/jborean93/LocalKdc. Unlike the Unix-based system it needs admin access to run but that\u0027s still way better than needing separate infrastructure or restarting the machine.\r\n\r\nDo we have some outerloop test infrastructure that is run with admin rights? I am looking for some prior art.\r\n\r\nEven if we can make this working only for local testing it would be a huge improvement.\r\n\r\n/cc @wfurt ",
                                           "updatedAt":  "2024-07-31T06:41:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Gsloz",
                                           "createdAt":  "2024-07-31T07:15:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODsOFrQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "jborean93",
                                                                               "createdAt":  "2024-07-31T07:32:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "Turns out, with fixed realm and 4 DNS records I can make this work as non-admin too: https://github.com/filipnavara/LocalKdc/pull/new/filipnavara-dev\r\n\r\nI setup the following DNS records to point to localhost:\r\n```\r\ndc01                     \t3600\tIN A    \t127.0.0.1\r\n_kerberos._tcp           \t3600\tIN SRV  \t1 1 88 dc01.filipnavara.dev.\r\n_kerberos._tcp.dc._msdcs \t3600\tIN SRV  \t1 1 88 dc01.filipnavara.dev.\r\n_ldap._tcp.dc._msdcs     \t3600\tIN SRV  \t1 1 389 dc01.filipnavara.dev.\r\n```",
                                           "updatedAt":  "2024-07-31T07:15:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GsyrT",
                                           "createdAt":  "2024-07-31T07:50:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jborean93",
                                           "body":  "@SteveSyfuhs I know this is a long shot but is there any way at all to replicate how a domain joined computer account gets its ticket for authentication? I’m hoping there is so we can test out the acceptor/inbound context through SSPI with something like the local KDC setup. I know there is an auth package to list/purge tickets as exposed through `klist.exe` but that seems to be about it.",
                                           "updatedAt":  "2024-07-31T07:50:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GuWNX",
                                           "createdAt":  "2024-07-31T11:26:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jborean93",
                                           "body":  "Looks like it is possible with an undocumented credential type `SEC_WINNT_AUTH_DATA_TYPE_KEYTAB`. I\u0027ve created a test that follows the workflow of https://github.com/SteveSyfuhs/DelegatedAuthentication/blob/1b099b53bf1b966b364ceab0245f658ae8e641bb/src/Shared/KeytabCredential.cs. The acceptor can use the keytab bytes as the packed credential data and is able to process the output token from the initiator.\r\n\r\nDefinitely not documented but it could be worthwhile for testing purposes.\r\n\r\nAlso credit to James Forshaw for pointing out that example from Steve’s delegation repo.",
                                           "updatedAt":  "2024-07-31T11:31:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GyWg6",
                                           "createdAt":  "2024-07-31T20:01:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SteveSyfuhs",
                                           "body":  "`..._KEYTAB` is a supported mechanism but it\u0027s actually not how Windows does machine accounts. Machine accounts are functionally just normal user accounts that call LsaLogonUser. We have a supported mechanism to configure that using `ksetup.exe /setcomputerpassword`: https://github.com/MicrosoftDocs/windowsserverdocs/blob/main/WindowsServerDocs/administration/windows-commands/ksetup.md",
                                           "updatedAt":  "2024-07-31T20:01:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GyZRc",
                                           "createdAt":  "2024-07-31T20:08:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jborean93",
                                           "body":  "\u003e ..._KEYTAB is a supported mechanism but it\u0027s actually not how Windows does machine accounts\r\n\r\nIs is possible to have this documented officially, would love to use it officially in some of my libraries that call SSPI.\r\n\r\n\u003e We have a supported mechanism to configure that using ksetup.exe /setcomputerpassword:\r\n\r\nThanks for the info. Does that mean theoretically I could just provide in the `SEC_WINNT_AUTH_IDENTITY_W` with the service\u0027s SPN and password to use as an inbound credential for `AcceptSecurityContext`? In this case I\u0027m looking into ways to test out the acceptor scenario without necessarily be running as SYSTEM/machine account. The keytab method works but is a bit more complex than just providing the password which I\u0027m generating manually in the test KDC.\r\n\r\nEdit: Just tested that and it does not work, the `AcceptSecurityContext` call fails with `SEC_E_NO_CREDENTIALS`. Must be some step missing in the SSPI calls that Windows does for a computer account on logon to work with this scenario. I\u0027ll continue to use the keytab setup for my testing.",
                                           "updatedAt":  "2024-07-31T20:42:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Gzc7l",
                                           "createdAt":  "2024-07-31T23:06:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SteveSyfuhs",
                                           "body":  "You will also have to disable PAC validation since your KDC doesn\u0027t have a netlogon endpoint. You will have to run as SYSTEM still though.\r\n\r\nUltimately your approach works fine and it might be less hassle in the long run since you don\u0027t have to deal with key normalization.",
                                           "updatedAt":  "2024-07-31T23:06:37Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "SmtpClient NTLM and Kerberos testing",
        "labels":  [
                       "area-System.Net",
                       "test-enhancement"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/19443",
        "createdAt":  "2016-11-22T19:26:08Z",
        "number":  19443,
        "author":  "MichaCo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODH6D7g==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jnm2",
                                            "createdAt":  "2016-11-22T20:20:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "CIPop",
                                            "createdAt":  "2016-11-22T20:56:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "agnauck",
                                            "createdAt":  "2016-12-18T12:53:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "FranklinYu",
                                            "createdAt":  "2019-01-03T14:59:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "iinuwa",
                                            "createdAt":  "2019-01-30T16:50:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "iSazonov",
                                            "createdAt":  "2020-10-21T03:31:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aayjaychan",
                                            "createdAt":  "2021-02-24T09:30:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hez2010",
                                            "createdAt":  "2021-03-03T12:34:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JamesNK",
                                            "createdAt":  "2021-04-18T00:24:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sigv",
                                            "createdAt":  "2021-06-23T16:52:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "paule96",
                                            "createdAt":  "2021-12-01T20:39:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kjpgit",
                                            "createdAt":  "2022-04-06T00:57:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "filipnavara",
                                            "createdAt":  "2022-06-24T06:26:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "7Sovaren",
                                            "createdAt":  "2022-10-19T07:08:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MihaZupan",
                                            "createdAt":  "2023-01-26T18:58:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ais",
                                            "createdAt":  "2023-07-10T09:37:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pedoc",
                                            "createdAt":  "2023-09-08T09:46:41Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "pierrecdn",
                                            "createdAt":  "2023-10-18T09:10:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "coolhome",
                                            "createdAt":  "2023-12-12T20:33:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AlgorithmsAreCool",
                                            "createdAt":  "2024-03-27T19:20:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "WGroenestein",
                                            "createdAt":  "2024-06-27T10:03:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alienwareone",
                                            "createdAt":  "2024-09-20T13:18:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "wfurt",
                                            "createdAt":  "2025-05-15T02:17:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "WeihanLi",
                                            "createdAt":  "2025-07-22T04:24:56Z"
                                        }
                                    ],
                          "totalCount":  24
                      },
        "updatedAt":  "2024-06-11T16:59:05Z",
        "body":  "In `System.Net.NameResolution` the `DNS` class gives us a simple API to get the host name and addresses by using the internals of Windows or Linux.\r\n\r\nWhat is missing is an interface to query actual DNS servers (custom endpoints/ports) and get more information then just the IP or local host name.\r\n\r\n# Use Case\r\nOne use case could be accessing service discovery (e.g. Consul) to ask for available services by name via DNS:\r\nA local Consul DNS endpoint runs on port 8600 and you\u0027d either query with qtype `SRV` or `A`.\r\nTo query for a service by name in consul, you use `\u003cservicename\u003e.service.consul`.\r\n\r\nExample query and answers with dig asking for the consul service itself:\r\n```\r\n$ dig @127.0.0.1 -p 8600 consul.service.consul SRV\r\n\r\n;; QUESTION SECTION:\r\n;consul.service.consul.         IN      SRV\r\n\r\n;; ANSWER SECTION:\r\nconsul.service.consul.  0       IN      SRV     1 1 8300 hostname.node.dc1.consul.\r\n\r\n;; ADDITIONAL SECTION:\r\nhostname.node.dc1.consul. 0     IN      A       127.0.0.1\r\n\r\n```\r\nThe SRV answer gives me the port the service instance is running on, the additional answer gives me the IP address. The result can contain multiple instances.\r\n\r\n# Why another API?\r\n\r\nThere are a few other implementations for .NET today, but none of which are really maintained as far as I know nor do they have support for netstandard1.x.\r\n\r\n# Proposed API\r\n\r\n## Usage\r\n\r\nCreating a lookup client with different overloads:\r\n``` CSharp\r\n// create a client using the dns server configured by your network interfaces\r\nvar lookup = new LookupClient();\r\n\r\n// create a client using a DNS server by IP on default port 53\r\nvar lookup = new LookupClient(IPAddress.Parse(\"127.0.0.1\"));\r\n\r\n// create a client using a DNS server on port 8600\r\nvar endpoint = new IPEndPoint(IPAddress.Parse(\"127.0.0.1\"), 8600);\r\nvar lookup = new LookupClient(endpoint);\r\n\r\n```\r\n\r\nUsing the client to query for standard qtypes:\r\n``` CSharp\r\n// query for google.com with qtype ANY\r\nDnsQueryResponse result = await lookup.QueryAsync(\"google.com\", QueryType.ANY);\r\n\r\n// qtype A and explicitly setting the qclass of the query\r\nDnsQueryResponse result = await lookup.QueryAsync(\"google.com\", QueryType.A, QueryClass.IN);\r\n\r\n// reverse query the host name of an IP Address using arpa\r\nDnsQueryResponse result = await lookup.QueryReverseAsync(IPAddress.Parse(\"192.168.1.1\"));\r\n```\r\n\r\nThe result in all cases would contain the response header information, the list of resource records and the question.\r\n\r\n## API\r\n\r\nLookupClient:\r\n\r\n``` CSharp\r\npublic class LookupClient\r\n{\r\n        // dis/enables caching of responses (TTL would be driven by the server\u0027s response)\r\n\tbool UseCache { get; set; }\r\n\r\n\tpublic LookupClient();\r\n\tpublic LookupClient(params IPEndPoint[] nameServers);\r\n\tpublic LookupClient(params IPAddress[] nameServers);\r\n\tpublic LookupClient(DnsMessageHandler messageHandler, ICollection\u003cIPEndPoint\u003e nameServers)\r\n\r\n\tpublic Task\u003cDnsQueryResponse\u003e QueryAsync(string query, QueryType queryType);\r\n\tpublic Task\u003cDnsQueryResponse\u003e QueryAsync(string query, QueryType queryType, QueryClass queryClass);\r\n\tpublic Task\u003cDnsQueryResponse\u003e QueryAsync(string query, QueryType queryType, CancellationToken cancellationToken);\r\n\tpublic Task\u003cDnsQueryResponse\u003e QueryAsync(string query, QueryType queryType, QueryClass queryClass, CancellationToken cancellationToken);\r\n\tpublic Task\u003cDnsQueryResponse\u003e QueryReverseAsync(IPAddress ipAddress);\r\n\tpublic Task\u003cDnsQueryResponse\u003e QueryReverseAsync(IPAddress ipAddress, CancellationToken cancellationToken);\r\n}\r\n\r\n// message handler could be implemented with UDP or TCP, or cool channels or what ever ;)\r\npublic class DnsMessageHandler \r\n{\r\n       public Task\u003cDnsResponseMessage\u003e QueryAsync(IPEndPoint server, DnsRequestMessage request, CancellationToken cancellationToken);\r\n\r\n       // processes the query and generates the actual data to send to the server\r\n       public virtual byte[] GetRequestData(DnsRequestMessage request)\r\n\r\n       // processes the raw response data\r\n       public virtual DnsResponseMessage GetResponseMessage(byte[] responseData)\r\n}\r\n\r\n// the request message\r\npublic class DnsRequestMessage\r\n{\r\n    public DnsRequestHeader Header { get; }\r\n    public DnsQuestion[] Questions { get; }\r\n}\r\n\r\n// the request header\r\npublic class DnsRequestHeader\r\n{\r\n\tpublic DnsHeaderFlag HeaderFlags {get;}\r\n\tpublic int Id { get; }\r\n\tpublic DnsOpCode OpCode {get;}\r\n\tpublic int QuestionCount { get; }\r\n\tpublic bool UseRecursion {get;}\r\n}\r\n\r\n// Question contains the actual query, used by response and request\r\npublic class DnsQuestion\r\n{\r\n\tpublic DnsName QueryName { get; }\r\n\tpublic QueryClass QuestionClass { get; }\r\n\tpublic QueryType QuestionType { get; \r\n}\r\n\r\n// the response object returned by the lookup client\r\npublic class DnsQueryResponse\r\n{\r\n\tpublic IReadOnlyCollection\u003cDnsResourceRecord\u003e Additionals { get; }\r\n\tpublic IReadOnlyCollection\u003cDnsResourceRecord\u003e AllRecords\t\r\n\tpublic IReadOnlyCollection\u003cDnsResourceRecord\u003e Answers { get; }\r\n\tpublic IReadOnlyCollection\u003cDnsResourceRecord\u003e Authorities { get; }\r\n\tpublic string ErrorMessage { get; }\r\n\tpublic bool HasError { get; }\r\n\tpublic DnsResponseHeader Header { get; }\r\n\tpublic IReadOnlyCollection\u003cDnsQuestion\u003e Questions { get; }\r\n}\r\n\r\n// see https://tools.ietf.org/html/rfc1035#section-3.2.2 and 3.2.3\r\npublic enum QueryType : short\r\n{\r\n        A = 1,\r\n        NS = 2,\r\n        ...\r\n}\r\n\r\n// see https://tools.ietf.org/html/rfc1035#section-3.2.4\r\npublic enum QueryClass : short\r\n{\r\n\tIN = 1,\r\n\tCS = 2,\r\n\tCH = 3,\r\n\tHS = 4\r\n}\r\n```\r\n\r\nThere are some more types like return codes / errors etc.\r\n\r\n### RFC References\r\nBase RFC https://tools.ietf.org/html/rfc1035\r\n\r\nRequest and response header share the same RFC https://tools.ietf.org/html/rfc6895#section-2. But only some fields / flags are used in the request, others in the response.\r\nThe length is always 12 bytes.\r\n\r\n```\r\n                                            1  1  1  1  1  1\r\n              0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5\r\n             +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\r\n             |                      ID                       |\r\n             +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\r\n             |QR|   OpCode  |AA|TC|RD|RA| Z|AD|CD|   RCODE   | \r\n             +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\r\n             |                QDCOUNT/ZOCOUNT                |\r\n             +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\r\n             |                ANCOUNT/PRCOUNT                |\r\n             +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\r\n             |                NSCOUNT/UPCOUNT                |\r\n             +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\r\n             |                    ARCOUNT                    |\r\n             +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\r\n```\r\n\r\nThe request or response data follows the header data...\r\n\r\nI will not list all the details, only the in my opinion most important qtypes/RRs \r\n\r\nA:  https://tools.ietf.org/html/rfc1035#section-3.4.1\r\n\r\nNS: https://tools.ietf.org/html/rfc1035\r\n\r\nAAAA: https://tools.ietf.org/html/rfc3596#section-2.2\r\n\r\nPTR (for reverse queries): https://tools.ietf.org/html/rfc1035#section-3.3.12\r\n\r\nSRV: https://tools.ietf.org/html/rfc2782\r\n\r\nMX: https://tools.ietf.org/html/rfc1035#section-3.3.9\r\n\r\nTXT: https://tools.ietf.org/html/rfc1035#section-3.3.14\r\n\r\nSOA: https://tools.ietf.org/html/rfc1035#section-3.3.13\r\n\r\n# Implementation\r\n\r\nI couldn\u0027t help and did a reference/example implementation of the whole thing here: https://github.com/MichaCo/DnsClient.NET.\r\n\r\nIf we come up with a better API which goes into corefx I\u0027m happy to discontinue that project. But I needed the functionality now ;)\r\n\r\n@CIPop I\u0027m creating this proposal as mentioned in dotnet/runtime#19351 \r\n\r\nThanks,\r\nM",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZgF93g==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2MjM2MzQyMw==",
                                           "createdAt":  "2016-11-22T20:57:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CIPop",
                                           "body":  "@davidsh @terrajobst @stephentoub PTAL\r\n/cc @karelz ",
                                           "updatedAt":  "2016-11-22T20:57:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2MjM2NDI3Mw==",
                                           "createdAt":  "2016-11-22T21:01:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CIPop",
                                           "body":  "\u003e // query for google.com with qtype ANY\r\n\u003e var result = await lookup.QueryAsync(\"google.com\", QueryType.ANY);\r\n\r\nIn general we don\u0027t use `var` when we cannot infer the type from the same line of code. It\u0027s best if you could update with the actual type returned.",
                                           "updatedAt":  "2016-11-22T21:01:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2MjM2NTM3NA==",
                                           "createdAt":  "2016-11-22T21:05:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichaCo",
                                           "body":  "@CIPop yup np, done",
                                           "updatedAt":  "2016-11-22T21:05:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2MjM2NTUyNg==",
                                           "createdAt":  "2016-11-22T21:06:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CIPop",
                                           "body":  "\u003e There are some more types like return codes / errors etc.\r\n\r\nFor now, I think this is enough for an initial review but in the final spec we will require the following fully defined `DnsResponseMessage`, `QueryType`, `DnsHeaderFlag`, `DnsOpCode`, `DnsName`, `DnsResourceRecord`, `DnsResponseHeader`.\r\n",
                                           "updatedAt":  "2016-11-22T21:06:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2MjM2NjA4MQ==",
                                           "createdAt":  "2016-11-22T21:08:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAFqixg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jnm2",
                                                                               "createdAt":  "2016-12-28T01:02:19Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "CIPop",
                                           "body":  "Thanks @MichaCo! LGTM\r\n\r\nMaybe not a good place to discuss this but: have you investigated ways to implement the features using OS-level APIs or are you proposing a managed-only (Sockets-based) DNS implementation. (If the latter, would it include DNSSec?)",
                                           "updatedAt":  "2016-11-22T21:08:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2MjM2NzcyOQ==",
                                           "createdAt":  "2016-11-22T21:15:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@CIPop @davidsh please submit the API for review after it is complete from your point of view (feel free to update the original API proposal post or work with @MichaCo) -- simple LGTM agreement from each of view is sufficient.\r\nGiven that it is larger API and domain specific, please review it first yourself, before submitting it for formal API review.\r\n\r\ncc: @Priya91 @geoffkizer @stephentoub",
                                           "updatedAt":  "2016-11-22T21:15:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2MjM3MzkxMA==",
                                           "createdAt":  "2016-11-22T21:40:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichaCo",
                                           "body":  "@CIPop I was actually looking at [DnsQuery](https://msdn.microsoft.com/en-us/library/windows/desktop/ms682016(v=vs.85).aspx), but I had no time playing with it. I also have no idea about the Linux equivalent so that\u0027s why my [implementation](https://github.com/MichaCo/DnsClient.NET) is managed code only.\r\n\r\nRegarding DNSSec, the signature would be transferred as another RR with the response, which can easily be supported with the API. Question is if the API also has to validate the signature against a public key. For my use case right now, I don\u0027t need it. \r\n\r\nAnother option for security would be DNS Cookies https://tools.ietf.org/html/rfc7873 I guess.",
                                           "updatedAt":  "2016-11-22T21:40:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2MjUwNzI3Mg==",
                                           "createdAt":  "2016-11-23T13:03:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "martincostello",
                                           "body":  "Would the ```Question``` property on the ```DnsRequestMessage``` class be better as an ```ICollection\u003cDnsQuestion\u003e``` or ```IList\u003cDnsQuestion\u003e```? Then calling code could create an instance and then add things to the property, rather than do that separately and then create an array?\r\n\r\n**As-is**\r\n\r\n```csharp\r\nvar questions = new List\u003cDnsQuestion\u003e();\r\n\r\nfor (int i = 0; i \u003c 10; i++)\r\n{\r\n    // Do something real and interesting that conditionally creates the questions\r\n    questions.Add(new DnsQuestion());\r\n}\r\n\r\nvar message = new DnsRequestMessage();\r\nmessage.Questions = questions.ToArray();\r\n```\r\n\r\n**Proposed**\r\n\r\n```csharp\r\nvar message = new DnsRequestMessage();\r\n\r\nfor (int i = 0; i \u003c 10; i++)\r\n{\r\n    // Do something real and interesting that conditionally creates the questions\r\n    message.Questions.Add(new DnsQuestion());\r\n}\r\n```",
                                           "updatedAt":  "2016-11-23T13:03:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2MjY2NDEyMw==",
                                           "createdAt":  "2016-11-24T00:43:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichaCo",
                                           "body":  "@CIPop Regarding a native implementation. I did some tests with both [DnsQuery](https://github.com/MichaCo/DnsClient.NET/blob/dev/samples/MiniDig/Interop.DnsQuery.cs) and [DnsQueryEx](https://github.com/MichaCo/DnsClient.NET/blob/dev/samples/MiniDig/Interop.DnsQueryEx.cs) - [docs](https://msdn.microsoft.com/en-us/library/windows/desktop/hh447188(v=vs.85).aspx). \r\n\r\nThe implementation is 99% from pinvoke.net (not cleaned up or anything)\r\n\r\nDnsQuery works great but uses the standard network interfaces only. There is no option to set server/port. Performance is much faster than my managed code but only if I query the same name over and over. There could still be some caching although I did set the bypass cache flag.\r\nWhen running random queries against different domains then there is no performance difference at all.\r\n\r\nThe DnsQueryEx actually supports setting the IPAddress and Port, unfortunately, setting the port other than 53 always results in an error (connection was closed by the remote host). I don\u0027t know why and if there is a way to work around though ~~\r\n\r\nDid look so promising... Let me know if someone has some hints ;)",
                                           "updatedAt":  "2016-11-24T00:43:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2NDM0MDc3MQ==",
                                           "createdAt":  "2016-12-02T00:43:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CIPop",
                                           "body":  "\u003e The DnsQueryEx actually supports setting the IPAddress and Port, unfortunately, setting the port other than 53 always results in an error (connection was closed by the remote host). I don\u0027t know why and if there is a way to work around though ~\r\n\r\n@MichaCo  I\u0027ve talked to the DNS team owning the API and they were able to use it against a custom port. They recommend ensuring that the DNS server is working with a different client such as dig. E.g: `dig -p 5353 @\u003cdns server ip\u003e bing.com`\r\n\r\n",
                                           "updatedAt":  "2016-12-02T00:43:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2NDM0NzgwMA==",
                                           "createdAt":  "2016-12-02T01:26:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichaCo",
                                           "body":  "@CIPop thanks for the followup! I figured it was actually a bug with the port. NetworkOrder from int gave 0, had to cast to `short` first... my bad ~~\r\n\r\nThe performance of the native code is not any better than using UDP directly\r\nExample\r\n```\r\ndotnet run perf -s 127.0.0.1 -p 8600 consul.service.consul -c 10 -r 500\r\n...\r\n;; Managed run took 495ms for 10 clients 500 queries: 10.101 queries per second.\r\n;; DnsQueryEx run took 672ms for 10 clients 500 queries: 7.440 queries per second.\r\n```\r\n\r\nRegarding security, I don\u0027t see anything that the DnsQuery/Ex does that for you, so that part would up to use anyways right?\r\n",
                                           "updatedAt":  "2016-12-02T01:26:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2NDUzMTA4Mw==",
                                           "createdAt":  "2016-12-02T18:48:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CIPop",
                                           "body":  "\u003e @CIPop thanks for the followup! I figured it was actually a bug with the port\r\n\r\nGlad you found the bug!\r\n\r\n\u003e Regarding security, I don\u0027t see anything that the DnsQuery/Ex does that for you\r\n\r\nI\u0027d personally prefer to leave the system-level drivers and services to handle what they already do and implement new code only where absolutely necessary. There are several advantages such as security updates, future protocol support and reducing the code/tests that we have to maintain in two different places (.Net and the OSs).\r\n\r\nDoes Linux/iOS have a similar API that could be reused?",
                                           "updatedAt":  "2016-12-02T18:48:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2NDUzMzIwNA==",
                                           "createdAt":  "2016-12-02T18:56:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CIPop",
                                           "body":  "While I\u0027m not very familiar with the API, it looks like since Win7, the OS supports DNSSec:\r\n\r\nhttps://technet.microsoft.com/en-us/library/dn593685(v=ws.11).aspx",
                                           "updatedAt":  "2016-12-02T18:56:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2ODMwOTIyNQ==",
                                           "createdAt":  "2016-12-20T17:46:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CIPop",
                                           "body":  "@MichaCo I will need to continue my ramp-up to the DNS RFCs and protocols before I review the API proposal. I have been switched to other high-priority items and won\u0027t be able to make progress until at least mid-January next year.\r\nThe API review shouldn\u0027t block the prototyping/implementation efforts.\r\n",
                                           "updatedAt":  "2016-12-20T17:46:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2ODMyNTUxNQ==",
                                           "createdAt":  "2016-12-20T18:52:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichaCo",
                                           "body":  "@CIPop no worries, same here ;) I was looking for Linux equivalents to the windows\u0027 DnsQuery/Ex. Didn\u0027t really made much progress on that either. Have to check res_query.",
                                           "updatedAt":  "2016-12-20T18:52:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0OTExNDM5MA==",
                                           "createdAt":  "2017-12-04T21:38:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jcdickinson",
                                           "body":  "Has this stalled? I might pick this up.\r\n\r\nThis isn\u0027t very idiotmatic right now - the nomenclature and patterns deviate quite strongly from what you\u0027d expect in .Net. Some suggestions:\r\n\r\n```c#\r\npublic class DnsClient\r\n{\r\n\tpublic bool UseCache { get; set; }\r\n\r\n    public bool UseMulticast { get; set; }\r\n\r\n\tpublic DnsClient();\r\n\tpublic DnsClient(params IPEndPoint[] nameServers);\r\n\tpublic DnsClient(params IPAddress[] nameServers);\r\n\r\n\tpublic ValueTask\u003cDnsResponse\u003e QueryAsync(string query, QueryType queryType);\r\n\tpublic ValueTask\u003cDnsResponse\u003e QueryAsync(string query, QueryType queryType, QueryClass queryClass);\r\n\tpublic ValueTask\u003cDnsResponse\u003e QueryAsync(string query, QueryType queryType, CancellationToken cancellationToken);\r\n\tpublic ValueTask\u003cDnsResponse\u003e QueryAsync(string query, QueryType queryType, QueryClass queryClass, CancellationToken cancellationToken);\r\n\r\n\tpublic ValueTask\u003cDnsResponse\u003e ReverseQueryAsync(IPAddress ipAddress);\r\n\tpublic ValueTask\u003cDnsResponse\u003e ReverseQueryAsync(IPAddress ipAddress, CancellationToken cancellationToken);\r\n}\r\n\r\n// Removed. We don\u0027t see other classes in corelib doing this.\r\n// public class DnsMessageHandler\r\n\r\n// Removed. Internal implementation details.\r\n// public class DnsRequestMessage\r\n// public class DnsRequestHeader\r\n// public class DnsQuestion\r\n\r\n// the response object returned by the lookup client\r\n// Change name to DnsResponse - DnsQueryResponse is anagolous to DnsRequestResponse, which is strange.\r\n// Should this be changed to a struct?\r\npublic readonly struct DnsResponse\r\n{\r\n\tpublic DnsResourceList Additionals { get; }\r\n\tpublic DnsResourceList AllRecords { get; }\r\n\tpublic DnsResourceList Answers { get; }\r\n\tpublic DnsResourceList Authorities { get; }\r\n\r\n    // Removed. Makes no sense to echo this back to the query.\r\n\t// public IReadOnlyList\u003cDnsQuestion\u003e Questions { get; }\r\n\r\n    // Removed. Inline the fields from this directly into the struct/class.\r\n    // public DnsResponseHeader Header { get; }\r\n    // ...\r\n\r\n    // Removed. However much I agree that Exceptions are awful, they are \r\n    // idiomatic in .Net.\r\n    // public string ErrorMessage { get; }\r\n\t// public bool HasError { get; }\r\n}\r\n\r\npublic readonly struct DnsResourceList : IReadOnlyList\u003cDnsResource\u003e\r\n{\r\n    private readonly ReadOnlyMemory\u003cbyte\u003e _memory;\r\n    private readonly int[] _offsets;\r\n}\r\n\r\npublic class DnsException : ExternalException\r\n{\r\n    public DnsError DnsErrorCode { get; }\r\n}\r\n\r\npublic enum DnsError\r\n{\r\n    Default = 0,\r\n\r\n    FormatError = 1,\r\n    ServerFailure = 2,\r\n    NameError = 3,\r\n    // NotImplemented = 4, // NotImplementedException?\r\n    Refused = 5\r\n}\r\n\r\n// see https://tools.ietf.org/html/rfc1035#section-3.2.2 and 3.2.3\r\npublic enum QueryType // : short\r\n{\r\n    /// \u003csummary\u003eThe \u003cc\u003eA\u003c/c\u003e record.\u003c/summary\u003e\r\n    Address = 1,\r\n    /// \u003csummary\u003eThe \u003cc\u003eNS\u003c/c\u003e record.\u003c/summary\u003e\r\n    NameServer = 2,\r\n    /// \u003csummary\u003e...\u003c/summary\u003e\r\n    CanonicalName = 5,\r\n    StartOfZoneAuthority = 6,\r\n    WellKnownService = 11,\r\n    Pointer = 12,\r\n    HostInformation = 13,\r\n    MailboxInformation = 14,\r\n    MailListInformation = 14,\r\n    MailExchange = 15,\r\n    Text = 16,\r\n    AddressV6 = 28\r\n    //...\r\n}\r\n\r\n// see https://tools.ietf.org/html/rfc1035#section-3.2.4\r\npublic enum QueryClass // : short\r\n{\r\n    /// \u003csummary\u003eThe \u003cc\u003eIN\u003c/c\u003e class.\u003c/summary\u003e\r\n\tInternet = 1,\r\n    /// \u003csummary\u003e...\u003c/summary\u003e\r\n\tCSNet = 2,\r\n\tChaos = 3,\r\n\tHesiod = 4\r\n}\r\n```",
                                           "updatedAt":  "2017-12-04T21:38:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1MTA4MDc2Nw==",
                                           "createdAt":  "2017-12-12T15:14:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jnm2",
                                           "body":  "Looks like you mixed tabs and spaces.",
                                           "updatedAt":  "2017-12-12T15:14:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1MTE3NDc2NQ==",
                                           "createdAt":  "2019-01-03T15:21:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "FranklinYu",
                                           "body":  "Any progress? I read through this thread and think the current blocker is\r\n\r\n\u003e Does Linux/iOS have a similar API that could be reused?\r\n\r\nIs that right?\r\n\r\nAlso @jcdickinson why `ValueTask` instead of `Task`?",
                                           "updatedAt":  "2019-01-03T17:21:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxMzAxOTIxNw==",
                                           "createdAt":  "2020-10-20T17:25:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "scalablecory",
                                           "body":  "I think we should revisit this for .NET 6.\r\n\r\n[SVCB](https://tools.ietf.org/html/draft-schwartz-svcb-dns-01)/[HTTPSSVC](https://tools.ietf.org/html/draft-ietf-dnsop-svcb-httpssvc-03) are useful for HttpClient -- they will significantly reduce the time it takes to establish an HTTP/3 connection, as well as supply data needed for ECH, Alt-Svc, and HSTS-like features.\r\n\r\n`getaddrinfo` does not provide us with this data; we need a proper DNS API.",
                                           "updatedAt":  "2020-10-20T17:37:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2ODUzODY2Mg==",
                                           "createdAt":  "2021-01-27T19:56:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCuF-UQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "D3-LucaPiombino",
                                                                               "createdAt":  "2021-01-28T14:49:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "kenleese",
                                                                               "createdAt":  "2021-02-23T10:01:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "paule96",
                                                                               "createdAt":  "2021-10-17T11:39:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "7Sovaren",
                                                                               "createdAt":  "2022-10-19T07:24:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "geoffkizer",
                                           "body":  "I think we should revisit this too.\r\n\r\nBeyond the SVCB issue, there\u0027s also the issue of TTLs -- we can\u0027t get these through the current API. HttpClient would very much like to know DNS TTLs so that it can discard connections appropriately when DNS changes. We\u0027ve heard this ask from customers multiple times, and the best answer we have today is \"use PooledConnectionLifetime\" which is far from ideal.\r\n\r\n",
                                           "updatedAt":  "2021-01-27T19:56:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mAUaO",
                                           "createdAt":  "2023-09-08T09:24:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODcJd3Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2023-09-08T09:28:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "agnauck",
                                                                               "createdAt":  "2023-09-08T09:38:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "7Sovaren",
                                                                               "createdAt":  "2023-09-08T12:37:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "jnm2",
                                                                               "createdAt":  "2023-09-08T13:31:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "ais",
                                                                               "createdAt":  "2023-09-09T13:23:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "sandersaares",
                                                                               "createdAt":  "2023-09-14T20:41:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MichaCo",
                                                                               "createdAt":  "2024-02-12T08:15:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "AlgorithmsAreCool",
                                                                               "createdAt":  "2024-03-27T19:22:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  8
                                                         },
                                           "author":  "karelz",
                                           "body":  "Given latest increased need from higher-level libraries, this is most likely going to happen 9.0 in some form.\r\ncc @filipnavara",
                                           "updatedAt":  "2023-09-08T09:24:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mAX3e",
                                           "createdAt":  "2023-09-08T09:36:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "FWIW our use case involves lookups of SRV, TXT and MX records. These are heavily used for various service discovery protocols (Exchange Autodiscover, Kerberos, IMAP/POP3/SMTP/CalDAV server endpoint discovery). Notably, this would also benefit Kerberos.NET which may eventually be used for client authentication scenarios on platforms that don\u0027t have native Kerberos support (Android, tvOS).\r\n\r\nWe currently depend on our own library. On Windows it uses `DnsQuery` API. On macOS we rely on Bonjour system APIs (`DNSService*` in `/usr/lib/system/libsystem_dnssd.dylib`). On mobile platforms we fallback to a managed implementation and get addresses of DNS servers from the system. This provides reasonable balance between respecting system overrides, caches, and portability.",
                                           "updatedAt":  "2023-09-08T09:36:07Z"
                                       }
                                   ],
                         "totalCount":  22
                     },
        "title":  "Proposal for DNS client and custom DNS queries",
        "labels":  [
                       "api-suggestion",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/19752",
        "createdAt":  "2016-12-22T20:06:02Z",
        "number":  19752,
        "author":  "Priya91",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC5IKtQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "csrakowski",
                                            "createdAt":  "2017-09-20T10:37:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sharkfoo",
                                            "createdAt":  "2017-10-02T22:12:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bearpawmaxim",
                                            "createdAt":  "2017-10-12T07:55:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JensNordenbro",
                                            "createdAt":  "2017-12-17T20:49:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Tiberriver256",
                                            "createdAt":  "2018-04-15T02:43:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "martin-frydl",
                                            "createdAt":  "2018-11-02T10:09:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jeremymcgee73",
                                            "createdAt":  "2018-11-19T17:47:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "StanislavPrusac",
                                            "createdAt":  "2019-04-17T18:24:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cbhp",
                                            "createdAt":  "2019-05-11T20:32:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MathieuMorrissette",
                                            "createdAt":  "2019-09-23T13:21:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "s-rayleigh",
                                            "createdAt":  "2020-03-30T12:51:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ericmutta",
                                            "createdAt":  "2020-12-29T21:08:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ivanjx",
                                            "createdAt":  "2021-01-12T08:43:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "r01k",
                                            "createdAt":  "2021-06-20T00:00:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "russcam",
                                            "createdAt":  "2021-10-21T05:33:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fbrosseau",
                                            "createdAt":  "2021-11-19T21:51:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jamesivie",
                                            "createdAt":  "2021-12-10T00:22:45Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "tomrus88",
                                            "createdAt":  "2022-01-09T20:33:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tapizquent",
                                            "createdAt":  "2022-01-26T18:52:24Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "tapizquent",
                                            "createdAt":  "2022-01-26T18:52:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "calin-ciobanu",
                                            "createdAt":  "2022-04-06T15:29:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "superware",
                                            "createdAt":  "2022-07-04T13:33:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "droyad",
                                            "createdAt":  "2022-09-09T05:59:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "freddyrios",
                                            "createdAt":  "2023-02-13T16:14:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "blaze6950",
                                            "createdAt":  "2023-04-30T16:17:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "BenderVano",
                                            "createdAt":  "2023-09-05T03:43:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ilonatommy",
                                            "createdAt":  "2024-07-04T12:40:45Z"
                                        }
                                    ],
                          "totalCount":  27
                      },
        "updatedAt":  "2024-09-09T20:13:34Z",
        "body":  "This requires a mechanism to get the ssl certificate info to use on the port of httplistener connection. \r\n\r\nPossible solutions:\r\n\r\n- Expose an API that gets the cert filename on Unix and throws PNSE on Windows.\r\n- Create a tool to maintain/create/delete httplistener certs, mimicking windows httpcfg.\r\n\r\nCurrent behavior:\r\n\r\n- Connections drop on https.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOisOhdw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxMzU0Njc0Mg==",
                                           "createdAt":  "2017-07-06T23:29:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CIPop",
                                           "body":  "/cc @davidsh @DavidGoll \r\n@Priya91 on Mono, HttpListener is searching for certs in a hardcoded path: https://github.com/mono/mono/blob/3f779475e3fc982e312212d5dbbd86515eddfc0c/mcs/class/System/System.Net/HttpListener.Mono.cs#L64\r\n(also see this [Stack Overflow discussion](https://stackoverflow.com/questions/23243224/how-to-use-ssl-with-httplistener-with-an-mkbundled-mono-app)).\r\n\r\nI couldn\u0027t find any documentation on how this could be achieved on Xamarin.\r\n",
                                           "updatedAt":  "2017-07-06T23:29:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxMzU2ODMwOQ==",
                                           "createdAt":  "2017-07-07T02:10:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Priya91",
                                           "body":  "@CIPop Yes, that\u0027s the second bullet in the description. We could re-use the dotnet crypto cert-store for this purpose, similar to mono, instead the hardcoded path here will be some custom dotnet path.",
                                           "updatedAt":  "2017-07-07T02:10:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxNDUyNzM2Mw==",
                                           "createdAt":  "2017-07-11T18:11:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DavidGoll",
                                           "body":  "@davidsh Document this as a compat issue for UWP6.0. This will require significant design for a cross-plat implementation.",
                                           "updatedAt":  "2017-07-11T18:11:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxNDkwMzk4MA==",
                                           "createdAt":  "2017-07-12T21:34:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAV8EXw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "chrisranney",
                                                                               "createdAt":  "2018-04-30T17:14:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidsh",
                                           "body":  "Added documentation to https://github.com/dotnet/corefx/wiki/ApiCompat",
                                           "updatedAt":  "2017-07-12T21:34:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzNjg0MDEzNQ==",
                                           "createdAt":  "2017-10-16T10:01:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODFuoYQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pablocar80",
                                                                               "createdAt":  "2019-03-25T23:15:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rtf-const",
                                                                               "createdAt":  "2020-09-28T13:27:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "freddyrios",
                                                                               "createdAt":  "2023-02-13T16:15:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "BenderVano",
                                                                               "createdAt":  "2023-09-05T03:44:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "dabretin",
                                           "body":  "Any news on this ?",
                                           "updatedAt":  "2017-10-16T10:01:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5MzY5ODYyOA==",
                                           "createdAt":  "2018-05-31T22:16:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODodL0g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "boeremak",
                                                                               "createdAt":  "2018-07-24T05:47:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "quintindk",
                                                                               "createdAt":  "2018-08-08T07:59:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gitmhill",
                                                                               "createdAt":  "2018-09-26T16:27:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "martin-frydl",
                                                                               "createdAt":  "2018-11-02T10:09:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pablocar80",
                                                                               "createdAt":  "2019-03-25T23:14:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pillepalle1",
                                                                               "createdAt":  "2019-10-02T11:10:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "russcam",
                                                                               "createdAt":  "2020-02-11T22:58:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "s-rayleigh",
                                                                               "createdAt":  "2020-03-30T12:52:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "swoga",
                                                                               "createdAt":  "2020-04-18T23:15:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rtf-const",
                                                                               "createdAt":  "2020-09-28T13:27:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ericmutta",
                                                                               "createdAt":  "2020-12-29T21:09:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "r01k",
                                                                               "createdAt":  "2021-06-20T00:01:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tomrus88",
                                                                               "createdAt":  "2022-01-06T11:02:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jchristn",
                                                                               "createdAt":  "2022-05-02T22:19:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "freddyrios",
                                                                               "createdAt":  "2023-02-13T16:15:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "blaze6950",
                                                                               "createdAt":  "2023-04-30T16:17:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ArchangelWTF",
                                                                               "createdAt":  "2023-08-23T07:44:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "BenderVano",
                                                                               "createdAt":  "2023-09-05T03:44:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Jozhden",
                                                                               "createdAt":  "2024-07-05T03:33:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  19
                                                         },
                                           "author":  "m5x",
                                           "body":  "It would be great if it was possible to supply the certificate as a stream. It would remove additional steps that are required on each OS to install the certficate and at the same time it would allow developers to control themselves how and where is the certificate stored.\r\n",
                                           "updatedAt":  "2018-05-31T22:16:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47_aq0",
                                           "createdAt":  "2022-01-06T11:02:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODFuobw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vmal-altium",
                                                                               "createdAt":  "2023-07-13T18:15:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "BenderVano",
                                                                               "createdAt":  "2023-09-05T03:44:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "tomrus88",
                                           "body":  "Just add an API that accepts a path to certificate file to use for all OS. We don\u0027t need any special tools like httpcfg, this only makes using HttpListener much worse experience. Let developers have full control over certificates (where and how they are stored) without need to use external tools.",
                                           "updatedAt":  "2022-01-06T11:26:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CfH_u",
                                           "createdAt":  "2022-05-02T23:13:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODFuogQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "freddyrios",
                                                                               "createdAt":  "2023-02-13T16:17:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "BenderVano",
                                                                               "createdAt":  "2023-09-05T03:45:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jchristn",
                                           "body":  "Are there any formal/informal timelines on when we could expect a resolution to this?  Or at minimum a reasonable workaround?  Thanks!",
                                           "updatedAt":  "2022-05-02T23:13:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VMbDh",
                                           "createdAt":  "2023-02-14T08:26:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODvJaAw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "Roald87",
                                                                               "createdAt":  "2024-08-21T19:55:19Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "freddyrios",
                                           "body":  "As it stands today the documentation for this class is very misleading https://learn.microsoft.com/en-us/dotnet/api/system.net.httplistener?view=net-7.0.\r\n\r\nFirst, it provides no indication https is only supported on windows. Some people may begin building something with plain http and then face the missing support by the time they were expecting to simply enable https.\r\n\r\nSecond, it provides no indication the class is soft deprecated.\r\n\r\n",
                                           "updatedAt":  "2023-02-14T08:26:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc53U77y",
                                           "createdAt":  "2024-03-16T12:46:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RicardoSSB",
                                           "body":  "Hello, \r\n\r\nwhy not implementing a delegate to let the user decide to use it,\r\n\r\n```\r\npublic delegate X509Certificate LoadCertificateAndKeyHandler(IPAddress addr, int port);\r\n    public partial class HttpListener\r\n    {\r\n\r\n        public static LoadCertificateAndKeyHandler? LoadCertificateAndKeyHandler { get; set; }\r\n        internal static SslStream CreateSslStream(Stream innerStream, bool ownsStream, RemoteCertificateValidationCallback callback)\r\n        {\r\n            return new SslStream(innerStream, ownsStream, callback);\r\n        }\r\n\r\n#pragma warning disable IDE0060\r\n        internal static X509Certificate? LoadCertificateAndKey(IPAddress addr, int port)\r\n        {\r\n            if(LoadCertificateAndKeyHandler!=null) return LoadCertificateAndKeyHandler(addr, port);\r\n\r\n            // TODO https://github.com/dotnet/runtime/issues/19752: Implement functionality to read SSL certificate.\r\n            return null;\r\n        }\r\n#pragma warning restore IDE0060\r\n    }\r\n```",
                                           "updatedAt":  "2024-03-16T12:48:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Kw6F3",
                                           "createdAt":  "2024-09-04T07:04:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Cangjier",
                                           "body":  "啥时候能支持啊....HttpListener挺好用的，如果能支持HTTPS就更加好了。",
                                           "updatedAt":  "2024-09-04T07:04:39Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "Implement https connection support for the managed HttpListener",
        "labels":  [
                       "enhancement",
                       "area-System.Net",
                       "os-linux"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/21808",
        "createdAt":  "2017-05-19T02:29:30Z",
        "number":  21808,
        "author":  "hughbe",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-04-08T10:56:21Z",
        "body":  "The following tests are disabled with this issue:\r\n\r\n- [x] CloseResponseEntity_SendToClosedConnection_DoesNotThrow\r\n- [x] CloseResponseEntity_ChunkedSentHeaders_DoesNotModifyContentLength\r\n- [x] CloseResponseEntity_NotChunkedSentHeaders_SendsEntityWithoutModifyingContentLength\r\n- [x] CloseResponseEntity_AllContentLengthAlreadySent_DoesNotSendEntity\r\n- [ ] Abort_Invoke_ForciblyTerminatesConnection",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMJ4N5A==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwMzU2NjUyMg==",
                                           "createdAt":  "2017-05-23T23:31:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "Fixed:\r\nCloseResponseEntity_SendToClosedConnection_DoesNotThrow\r\nCloseResponseEntity_ChunkedSentHeaders_DoesNotModifyContentLength\r\nCloseResponseEntity_NotChunkedSentHeaders_SendsEntityWithoutModifyingContentLength\r\n\r\nUnrelated:\r\nCloseResponseEntity_AllContentLengthAlreadySent_DoesNotSendEntity is now part of dotnet/corefx#20201\r\n\r\nRemaining:\r\nAbort_Invoke_ForciblyTerminatesConnection",
                                           "updatedAt":  "2017-05-23T23:36:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNDEzNTI1NA==",
                                           "createdAt":  "2017-05-25T21:55:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "I think we can punt on the remaining Abort_Invoke_ForciblyTerminatesConnection case for 2.0.  The issue is that when you Abort a Response, on Windows then writing to the Response (generally) ends up throwing ObjectDisposedException, whereas on Unix it essentially nops.  The Windows implementation does so because Abort doesn\u0027t actually mark the response as closed, and rather disposes of the request; then writing to the response sometimes happens to query the request, and that\u0027s what generates the ObjectDisposedException... it seems like it\u0027s almost by accident.",
                                           "updatedAt":  "2017-05-25T21:55:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxMjM0MDM3NQ==",
                                           "createdAt":  "2018-08-12T12:43:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ViktorHofer",
                                           "body":  "@hughbe does the behavioral difference still apply?",
                                           "updatedAt":  "2018-08-12T12:43:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNTY2NDYxMg==",
                                           "createdAt":  "2021-04-08T10:55:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hughbe",
                                           "body":  "~Looking at the test the active issue is commented out... Perhaps this can be fixed now~ Oh wait it is still an issue due to the conditionalfact\r\n```\r\n        // The managed implementation should also dispose the OutputStream after calling Abort.\r\n        [ConditionalFact(nameof(Helpers) + \".\" + nameof(Helpers.IsWindowsImplementation))] // [ActiveIssue(\"https://github.com/dotnet/runtime/issues/21808\", TestPlatforms.AnyUnix)]\r\n        public async Task Abort_Invoke_ForciblyTerminatesConnection()\r\n        {\r\n            Client.Send(Factory.GetContent(\"1.1\", \"POST\", null, \"Give me a context, please\", null, headerOnly: false));\r\n            HttpListenerContext context = await Factory.GetListener().GetContextAsync();\r\n            HttpListenerResponse response = context.Response;\r\n            Stream ouputStream = response.OutputStream;\r\n            response.Abort();\r\n\r\n            // Aborting the response should dispose the response.\r\n            Assert.Throws\u003cObjectDisposedException\u003e(() =\u003e response.ContentType = null);\r\n\r\n            // The output stream should be not be disposed.\r\n            // NOTE: using Assert.Throws\u003cObjectDisposedException\u003e(() =\u003e ...) doesn\u0027t work here as XUnit internally\r\n            // throws an ObjectDisposedException after we have caught the ObjectDisposedException.\r\n            bool threwObjectDisposedException = false;\r\n            try\r\n            {\r\n                ouputStream.Write(SimpleMessage, 0, SimpleMessage.Length);\r\n            }\r\n            catch (ObjectDisposedException)\r\n            {\r\n                threwObjectDisposedException = true;\r\n            }\r\n            Assert.True(threwObjectDisposedException);\r\n\r\n            // The connection should be forcibly terminated.\r\n            Assert.Throws\u003cSocketException\u003e(() =\u003e GetClientResponse(120));\r\n\r\n            // Extra calls to Abort, Close or Dispose are nops.\r\n            response.Abort();\r\n            response.Close();\r\n            ((IDisposable)response).Dispose();\r\n        }\r\n\r\n```",
                                           "updatedAt":  "2021-04-08T10:56:21Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[HttpListener] [Managed] HttpListenerResponse should align with Windows behaviour for Close(byte[], bool)",
        "labels":  [
                       "bug",
                       "area-System.Net",
                       "disabled-test",
                       "os-linux"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/21940",
        "createdAt":  "2017-05-24T15:37:55Z",
        "number":  21940,
        "author":  "danmoseley",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-06-15T13:50:04Z",
        "body":  "https://ci.dot.net/job/dotnet_corefx/job/master/job/ubuntu14.04_debug_prtest/8257/consoleFull#130661499679494335-f7bd-47d0-8771-8661e00c2db2 \r\n\r\n```\r\n22:05:43   Finished running tests. End time=05:05:43. Return value was 0\r\n23:44:38 \r\nBuild timed out (after 120 minutes). Marking the build as aborted.\r\n23:44:38 \r\nBuild was aborted\r\n23:44:38 [xUnit] [INFO] - Starting to record.\r\n23:44:38 [xUnit] [INFO] - Processing xUnit.Net-v2 (default)\r\n23:44:38 \r\nMSBUILD : error MSB4166: Child node \"2\" exited prematurely. Shutting down. Diagnostic information may be found in files in the temporary files directory named MSBuild_*.failure.txt.\r\n23:44:38 [xUnit] [INFO] - [xUnit.Net-v2 (default)] - 155 test report file(s) were found with the pattern \u0027bin/**/testResults.xml\u0027 relative to \u0027/mnt/j/workspace/dotnet_corefx/master/ubuntu14.04_debug_prtest\u0027 for the testing framework \u0027xUnit.Net-v2 (default)\u0027.\r\n23:44:38 /mnt/j/workspace/dotnet_corefx/master/ubuntu14.04_debug_prtest/Tools/tests.targets(345,5): warning MSB5021: \"sh\" and its child processes are being terminated in order to cancel the build. [/mnt/j/workspace/dotnet_corefx/master/ubuntu14.04_debug_prtest/src/System.Net.HttpListener/tests/System.Net.HttpListener.Tests.csproj]\r\n23:44:39 Command execution failed with exit code 143.\r\n```\r\n\r\nNot actionable based on this information, but starting an issue.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOImu1TQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwMzgzNzUyNA==",
                                           "createdAt":  "2017-05-24T20:10:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "fyi @hughbe @stephentoub note these are in master.",
                                           "updatedAt":  "2017-05-24T20:10:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwMzgzNzU2MA==",
                                           "createdAt":  "2017-05-24T20:10:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Debian \u0026 Ubuntu:\r\nhttps://mc.dot.net/#/user/mmitche/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fportable~2Fcli~2F/6c6eb50345329c470db608fef70710e52270c507/workItem/System.Net.HttpListener.Tests",
                                           "updatedAt":  "2017-05-24T22:08:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwMzg2NTczNA==",
                                           "createdAt":  "2017-05-24T22:08:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Questions:\r\n* Does it happen only on Linux/Mac (product issue), or also on Windows (test issue)",
                                           "updatedAt":  "2017-05-24T22:08:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwMzg4NTcyMA==",
                                           "createdAt":  "2017-05-25T00:01:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mellinoe",
                                           "body":  "If we see this actively hung in any CI jobs, please let me know and I will try to debug it. Bonus points to anyone who logs into a machine and attaches a debugger before the process terminates 😄",
                                           "updatedAt":  "2017-05-25T00:01:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwMzkyNDMxOA==",
                                           "createdAt":  "2017-05-25T05:12:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "All the time now.\r\nhttps://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fportable~2Fcli~2F/build/20170525.01/workItem/System.Net.HttpListener.Tests/wilogs",
                                           "updatedAt":  "2017-05-25T05:12:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwMzkyNjIyNg==",
                                           "createdAt":  "2017-05-25T05:28:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "Managed to catch one in CI.  At least in the one I saw, it appears to be hanging here:\r\nhttps://github.com/dotnet/corefx/blob/bbb63de0aac837895542e1b126ef71b3ba1a51aa/src/System.Net.HttpListener/tests/HttpRequestStreamTests.cs#L68\r\n\r\n@geoffkizer, looks like this might be the same hang you\u0027re investigating locally...",
                                           "updatedAt":  "2017-05-25T05:29:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwMzkyNjQ5MQ==",
                                           "createdAt":  "2017-05-25T05:30:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "geoffkizer",
                                           "body":  "Yep, that\u0027s exactly what I see locally.",
                                           "updatedAt":  "2017-05-25T05:30:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNDA0MTUwMw==",
                                           "createdAt":  "2017-05-25T15:34:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fportable~2Fcli~2F/build/20170525.02/workItem/System.Net.HttpListener.Tests/wilogs",
                                           "updatedAt":  "2017-05-25T15:34:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNDA2MTY1Mw==",
                                           "createdAt":  "2017-05-25T16:52:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@stephentoub @geoffkizer does this mean if we disable Read_FullLengthAsynchronous_Success it will avoid this hang? If so could one of you please disable it?\r\nThere is no need to go through CI for this, as it\u0027s so impactful I suggest hitting merge immediately.",
                                           "updatedAt":  "2017-05-25T16:52:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNDA2NTY4NQ==",
                                           "createdAt":  "2017-05-25T17:08:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e does this mean if we disable Read_FullLengthAsynchronous_Success it will avoid this hang?\r\n\r\nI don\u0027t think so; I think there are several (not sure how many) tests that hit the same underlying issue or issues.  I don\u0027t believe it\u0027s a problem with a specific test, but rather with something in the implementation (or something systemic to many tests via code that\u0027s shared between them).  It\u0027s possible we could find and disable enough tests to avoid the hangs.\r\n\r\n@geoffkizer has been investigating...",
                                           "updatedAt":  "2017-05-25T17:20:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNDA2OTI1MQ==",
                                           "createdAt":  "2017-05-25T17:22:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "But I\u0027ll see if I can temporarily disable enough to minimize the impact...",
                                           "updatedAt":  "2017-05-25T17:22:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNDExMjA3Nw==",
                                           "createdAt":  "2017-05-25T20:15:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "A bunch of tests have been temporarily disabled.  Just search for 20246 to find them.  Let\u0027s try to get to the bottom of this asap.  Hopefully I disabled enough to prevent the hangs in CI.",
                                           "updatedAt":  "2017-05-25T20:15:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNDE4MzMwMw==",
                                           "createdAt":  "2017-05-26T03:43:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Helix run failed again but I don\u0027t know whether it contained that change.\r\nhttps://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20170526.01/workItem/System.Net.HttpListener.Tests/wilogs",
                                           "updatedAt":  "2017-05-26T03:43:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNTEwMTk0Mg==",
                                           "createdAt":  "2017-05-31T06:57:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KristinXie1",
                                           "body":  "Failed again here: https://mc.dot.net/#/product/netcore/200/source/official~2Fcorefx~2Frelease~2F2.0.0~2F/type/test~2Ffunctional~2Fportable~2Fcli~2F/build/20170531.01/workItem/System.Net.HttpListener.Tests/wilogs",
                                           "updatedAt":  "2017-05-31T06:57:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNTEwNDc2NQ==",
                                           "createdAt":  "2017-05-31T07:10:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@mellinoe was there any progress on tracking down the root cause of the hangs?",
                                           "updatedAt":  "2017-05-31T07:10:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNTI5MjIyOQ==",
                                           "createdAt":  "2017-05-31T19:29:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mellinoe",
                                           "body":  "@karelz I think @stephentoub had caught this (or a related test) under a debugger at one point. I was not able to successfully get a local repro despite running the tests in a loop for a long time.",
                                           "updatedAt":  "2017-05-31T19:29:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNTI5MjQ1OQ==",
                                           "createdAt":  "2017-05-31T19:30:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "@geoffkizer and I fixed the issues we knew about.  It\u0027s possible there\u0027s another lurking.",
                                           "updatedAt":  "2017-05-31T19:30:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNTQxNDExNQ==",
                                           "createdAt":  "2017-06-01T07:37:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KristinXie1",
                                           "body":  "Failed again: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20170601.05/workItem/System.Net.HttpListener.Tests/wilogs",
                                           "updatedAt":  "2017-06-01T07:37:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNTYzNzMxOQ==",
                                           "createdAt":  "2017-06-01T22:23:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Hung again. OSX.  Last 3 were all OSX.\r\n\r\nhttps://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20170601.06/workItem/System.Net.HttpListener.Tests/wilogs",
                                           "updatedAt":  "2017-06-01T22:23:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNTYzNzY4Mg==",
                                           "createdAt":  "2017-06-01T22:25:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "Might be worth running the tests in a loop on macOS for a while and seeing if we can get something to hang.",
                                           "updatedAt":  "2017-06-01T22:25:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNTYzOTYyMg==",
                                           "createdAt":  "2017-06-01T22:36:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@mellinoe can you please help? (if you don\u0027t have Mac, we could ask @wfurt to run it on his Mac ...)",
                                           "updatedAt":  "2017-06-01T22:36:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNTY0MTI2OA==",
                                           "createdAt":  "2017-06-01T22:45:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAJ_Gdg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "karelz",
                                                                               "createdAt":  "2017-06-01T23:02:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "danmoseley",
                                                                               "createdAt":  "2017-06-02T01:57:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "mellinoe",
                                           "body":  "I borrowed a MacBook and will try running the tests in a loop here, once I\u0027ve got my environment sync\u0027d up.",
                                           "updatedAt":  "2017-06-01T22:45:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNTY2ODM2OA==",
                                           "createdAt":  "2017-06-02T01:58:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "This is now the most impactful of all corefx test issues.",
                                           "updatedAt":  "2017-06-02T01:58:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNTkyODM1OA==",
                                           "createdAt":  "2017-06-02T23:05:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mellinoe",
                                           "body":  "@stephentoub and I spent several hours debugging this earlier today, and we weren\u0027t able to identify the exact problem yet. We saw some strange things that made us doubt the validity of the info coming from lldb/SOS, and ended up stumped for now.\r\n\r\nAt the very least, the MacBook I\u0027m using is able to reproduce the issue almost every single time I run the tests. So further investigations should be easy to do.",
                                           "updatedAt":  "2017-06-02T23:05:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNjM2MzMwMQ==",
                                           "createdAt":  "2017-06-06T02:24:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KristinXie1",
                                           "body":  "Failed again: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20170606.01/workItem/System.Net.HttpListener.Tests/wilogs",
                                           "updatedAt":  "2017-06-06T02:24:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNjQwMzc4NQ==",
                                           "createdAt":  "2017-06-06T07:22:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KristinXie1",
                                           "body":  "This issue is repro on Core Tests (2.0.0), detail: https://mc.dot.net/#/product/netcore/200/source/official~2Fcorefx~2Frelease~2F2.0.0~2F/type/test~2Ffunctional~2Fcli~2F/build/20170605.01/workItem/System.Net.HttpListener.Tests/wilogs",
                                           "updatedAt":  "2017-06-06T07:22:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNjY5ODM4NQ==",
                                           "createdAt":  "2017-06-07T06:21:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KristinXie1",
                                           "body":  "Failed again on Core Tests (Master) in build 20170607.01, detail: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20170607.01/workItem/System.Net.HttpListener.Tests/wilogs",
                                           "updatedAt":  "2017-06-07T06:21:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNzcwNDI5NQ==",
                                           "createdAt":  "2017-06-12T06:49:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KristinXie1",
                                           "body":  "Failed again, detail: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20170612.01/workItem/System.Net.HttpListener.Tests",
                                           "updatedAt":  "2017-06-12T06:49:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNzk2MDMwMw==",
                                           "createdAt":  "2017-06-12T23:09:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Priya91",
                                           "body":  "@mellinoe Can you share the repro that you used for this.. Did you run the httplistener tests in loop or full test run? Were you able to identify the test that\u0027s hanging?",
                                           "updatedAt":  "2017-06-12T23:10:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNzk5MTA4OQ==",
                                           "createdAt":  "2017-06-13T02:47:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mellinoe",
                                           "body":  "@Priya91 There are several tests that hang. It repros on your laptop every time, just doing a regular run of the test project by itself.",
                                           "updatedAt":  "2017-06-13T02:47:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwODMyODA1NA==",
                                           "createdAt":  "2017-06-14T06:01:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KristinXie1",
                                           "body":  "Failed again: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20170614.01/workItem/System.Net.HttpListener.Tests/wilogs",
                                           "updatedAt":  "2017-06-14T06:01:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwODYwNzIyMg==",
                                           "createdAt":  "2017-06-15T02:01:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KristinXie1",
                                           "body":  "This issue is repro on Core Tests (2.0.0), detail: https://mc.dot.net/#/product/netcore/200/source/official~2Fcorefx~2Frelease~2F2.0.0~2F/type/test~2Ffunctional~2Fcli~2F/build/20170615.01/workItem/System.Net.HttpListener.Tests/wilogs",
                                           "updatedAt":  "2017-06-15T02:01:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxMjE4NjY3Nw==",
                                           "createdAt":  "2017-06-30T06:29:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KristinXie1",
                                           "body":  "This issue is repro on OSX.1013, detail: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20170630.01/workItem/System.Net.HttpListener.Tests/wilogs",
                                           "updatedAt":  "2017-06-30T06:29:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxMjMxNTUyNQ==",
                                           "createdAt":  "2017-06-30T16:38:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Need an update from @mellinoe who has been investigating this.",
                                           "updatedAt":  "2017-06-30T16:38:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxMjMzNTAyNg==",
                                           "createdAt":  "2017-06-30T18:03:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mellinoe",
                                           "body":  "I\u0027ve debugged through a few repros at this point, but I haven\u0027t identified a root cause. One repro was hung in this method, https://github.com/dotnet/corefx/blob/master/src/System.Net.HttpListener/src/System/Net/Managed/HttpListenerRequest.Managed.cs#L302, in what could potentially be an infinite loop. That\u0027s the closest we\u0027ve gotten to the bottom of this.",
                                           "updatedAt":  "2017-06-30T18:03:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxMjcwOTI1Nw==",
                                           "createdAt":  "2017-07-03T18:25:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Per @karelz moving to 2.0\r\n•\tOSX only\r\n•\tNot clear it\u0027s a product bug.\r\n•\tHttpListener is compat API only (we do not plan to evolve it)\r\n•\tASP.NET does not depend on it\r\n•\tIf it is test bug, we can fix it in servicing branch.\r\n•\tIf it is product bug we can service.\r\n",
                                           "updatedAt":  "2017-07-03T18:25:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxNTY1NjY2Mg==",
                                           "createdAt":  "2017-07-17T02:18:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KristinXie1",
                                           "body":  "Failed again: https://mc.dot.net/#/product/netcore/200/source/official~2Fcorefx~2Frelease~2F2.0.0~2F/type/test~2Ffunctional~2Fcli~2F/build/20170717.01/workItem/System.Net.HttpListener.Tests/wilogs\r\n\r\n~~~\r\n2017-07-16 17:48:30,946: INFO: proc(54): run_and_log_output: Output:    System.Net.Tests.HttpListenerResponseHeadersTests.ProtocolVersion_SetInvalid_ThrowsArgumentNullException(major: 2, minor: 0) [FAIL]\r\n2017-07-16 17:48:30,947: INFO: proc(54): run_and_log_output: Output:       System.Net.Sockets.SocketException : Too many open files in system\r\n2017-07-16 17:48:30,950: INFO: proc(54): run_and_log_output: Output:       Stack Trace:\r\n2017-07-16 17:48:30,952: INFO: proc(54): run_and_log_output: Output:    [FATAL] System.IO.FileLoadException\r\n2017-07-16 17:48:30,953: INFO: proc(54): run_and_log_output: Output:       System.IO.FileLoadException : Could not load file or assembly \u0027System.Text.RegularExpressions, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\u0027. A device attached to the system is not functioning.\\n (Exception from HRESULT: 0x8007001F)\r\n2017-07-16 17:48:35,471: INFO: proc(54): run_and_log_output: Output:    System.Net.Tests.HttpListenerResponseTests.CloseResponseEntity_SendMoreThanContentLength_ThrowsInvalidOperationException [SKIP]\r\n2017-07-16 17:48:35,471: INFO: proc(54): run_and_log_output: Output:       Condition(s) not met: \\\"IsWindowsImplementationAndNotUap\\\"\r\n2017-07-16 17:48:36,261: INFO: proc(54): run_and_log_output: Output:    System.Net.Tests.HttpListenerResponseTests.CloseResponseEntity_AllContentLengthAlreadySent_DoesNotSendEntity [SKIP]\r\n2017-07-16 17:48:36,261: INFO: proc(54): run_and_log_output: Output:       Condition(s) not met: \\\"IsWindowsImplementationAndNotUap\\\"\r\n2017-07-16 17:48:36,796: INFO: proc(54): run_and_log_output: Output:    System.Net.Tests.HttpListenerResponseTests.Abort_Invoke_ForciblyTerminatesConnection [SKIP]\r\n2017-07-16 17:48:36,796: INFO: proc(54): run_and_log_output: Output:       Condition(s) not met: \\\"IsWindowsImplementationAndNotUap\\\"\r\n2017-07-16 17:48:52,172: INFO: proc(54): run_and_log_output: Output:    System.Net.Tests.HttpResponseStreamTests.Write_TooMuch_ThrowsProtocolViolationException [SKIP]\r\n2017-07-16 17:48:52,172: INFO: proc(54): run_and_log_output: Output:       Condition(s) not met: \\\"IsWindowsImplementationAndNotUap\\\"\r\n2017-07-16 17:48:52,350: INFO: proc(54): run_and_log_output: Output:    System.Net.Tests.HttpResponseStreamTests.Write_TooLittleSynchronouslyAndClose_ThrowsInvalidOperationException [SKIP]\r\n2017-07-16 17:48:52,350: INFO: proc(54): run_and_log_output: Output:       Condition(s) not met: \\\"IsWindowsImplementationAndNotUap\\\"\r\n~~~",
                                           "updatedAt":  "2018-06-08T17:38:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5NTY0MTY5OQ==",
                                           "createdAt":  "2018-06-08T04:17:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAXrrSw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "karelz",
                                                                               "createdAt":  "2018-06-08T17:40:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "wfurt",
                                           "body":  "I think the last association is incorrect: [UPDATE] The referenced comment was hidden as off-topic by @karelz\r\n\u003e 2017-07-16 17:48:30,947: INFO: proc(54): run_and_log_output: Output:       System.Net.Sockets.SocketException : Too many open files in system\r\n\r\nThis seems to be clearly environmental issues.\r\nAs far as I can tell, we have no seen this one in long time.\r\nI suggest to close it @karelz and we can open it back (or create new one) if it ever happens again. ",
                                           "updatedAt":  "2018-06-08T17:39:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5NTgzNDU5Mg==",
                                           "createdAt":  "2018-06-08T17:40:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Closing per @wfurt\u0027s analysis above.",
                                           "updatedAt":  "2018-06-08T17:40:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3NzQ4NDEwOQ==",
                                           "createdAt":  "2020-01-23T03:05:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "There are two tests disabled against this issue:\r\nhttps://github.com/dotnet/runtime/blob/04f22268efb4434b7cd81e8ae2c3354be99fd4a7/src/libraries/System.Net.HttpListener/tests/HttpResponseStreamTests.cs#L380-L385\r\nhttps://github.com/dotnet/runtime/blob/04f22268efb4434b7cd81e8ae2c3354be99fd4a7/src/libraries/System.Net.HttpListener/tests/HttpResponseStreamTests.cs#L419-L424",
                                           "updatedAt":  "2020-01-23T03:05:07Z"
                                       }
                                   ],
                         "totalCount":  40
                     },
        "title":  "[HttpListener] Hang of System.Net.HttpListener.Tests in CI",
        "labels":  [
                       "area-System.Net",
                       "disabled-test",
                       "os-mac-os-x",
                       "test-run-core"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/22000",
        "createdAt":  "2017-05-26T17:09:39Z",
        "number":  22000,
        "author":  "caesar-chen",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-11-07T14:00:42Z",
        "body":  "In .Net Core: The WebSocket is only supposed to transition to Closed when the connection is closed, e.g. as part of CloseAsync after a close frame has been both sent and received.\r\n\r\nBut in .Net Framework, if WebSocket is in CloseSent/CloseReceived state and receive/send a close packet, it will immediately transit into Close state (don\u0027t wait for CloseAsync). Causes test failure here: https://github.com/dotnet/corefx/blob/master/src/System.Net.WebSockets.Client/tests/CloseTest.cs#L285",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOksPpMA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxNDI4OTQ3MA==",
                                           "createdAt":  "2017-07-11T00:40:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Diego-Perez-Botero",
                                           "body":  "The UWP ClientWebSocket implementation ([WinRTWebSocket.cs](https://github.com/dotnet/corefx/blob/472b8d8ec212c2afb107dea305b4624c4989a79f/src/System.Net.WebSockets.Client/src/System/Net/WebSockets/WinRTWebSocket.cs)) was modeled after .NET Framework and fails the same CloseTest test case in a similar way.",
                                           "updatedAt":  "2017-07-11T00:40:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxNDYxMzUzMw==",
                                           "createdAt":  "2017-07-12T00:55:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Diego-Perez-Botero",
                                           "body":  "Based on the [MSDN documentation](https://msdn.microsoft.com/en-us/library/system.net.websockets.websocketstate(v=vs.110).aspx), the .NET Framework behavior (also followed by UWP ClientWebSocket) may be the most accurate:\r\n\r\nClosed | Indicates the WebSocket close handshake completed gracefully.\r\n-- | --",
                                           "updatedAt":  "2017-07-12T01:55:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxNDg4Njg3NA==",
                                           "createdAt":  "2017-07-12T20:27:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAjH9Pg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "caesar-chen",
                                                                               "createdAt":  "2017-07-12T20:32:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dadude999",
                                                                               "createdAt":  "2019-02-11T23:59:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "Diego-Perez-Botero",
                                           "body":  "**Tl;DR:** Non-UWP .NET Core should be fixed to adopt the same _WebSocketState.Closed_ behavior as .NET Framework.\r\n\r\nFrom this morning\u0027s discussion:\r\n\r\n1. ClientWebSocket sends out a close frame whenever **CloseOutputAsync** or **CloseAsync** are called.\r\n\r\n2. When **CloseOutputAsync** is called in non-UWP .NET Core, the close frame is sent out and the websocket\u0027s state transitions to _CloseSent_, even if a close frame had already been received from the server before the **CloseOutputAsync** call (i.e., websocket\u0027s state was _CloseReceived_). If a close frame is received from the server after that, the websocket\u0027s state becomes _CloseReceived_, which doesn\u0027t make it clear whether or not a close frame had previously been sent by the client.\r\n\r\n3. When **CloseAsync** is called in non-UWP .NET Core, the close frame is sent out (if it hasn\u0027t been sent yet) and the socket wait for the server\u0027s close frame to arrive (if it hasn\u0027t already). On success, the websocket\u0027s state becomes _Closed_.\r\n\r\nNote that _Closed_ state is supposed to be dependent on the websocket close handshake\u0027s status. In .NET Framework and UWP .NET Core, (1) and (3) are the same. However, (2) is less ambiguous: after **CloseOutputAsync**, the websocket\u0027s state automatically transitions to _Closed_ if the server\u0027s close frame is received (or was received already). That way, the _Closed_ state\u0027s semantics are respected and there is no weird back-and-forth between _CloseReceived_ and _CloseSent_ states.",
                                           "updatedAt":  "2017-07-12T20:27:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxNDg4ODQzOA==",
                                           "createdAt":  "2017-07-12T20:33:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "It\u0027s not clear to me from the description whether the change being proposed would only impact what\u0027s returned from properties on the WebSocket class or whether it would impact what\u0027s done on the wire.  If the latter, have you validated this against a test framework like https://github.com/crossbario/autobahn-testsuite?  I\u0027d previously validated the managed implementation we use on Unix and which ASP.NET uses on all platforms and got it to 100% passing (not including the tests for things not implemented, like websockets compression).  I don\u0027t know if this will impact it, but the suite had lots of tests around close behavior, and I know we had to make a few fixes to pass those tests, so I just want to make sure we don\u0027t regress there.\r\n\r\ncc: @anurse ",
                                           "updatedAt":  "2017-07-12T20:33:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxNDg4OTcwMg==",
                                           "createdAt":  "2017-07-12T20:38:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Diego-Perez-Botero",
                                           "body":  "The change being proposed is limited to the _ClientWebSocketState_ transitions (i.e., property value returned to the app). What\u0027s being sent/received down the wire should remain as-is.",
                                           "updatedAt":  "2017-07-12T20:39:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxNDg4OTc0MQ==",
                                           "createdAt":  "2017-07-12T20:39:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidsh",
                                           "body":  "+1 on the autobahn test suite.  We used it extensively when we first implemented websocket protocol across many components in Windows and .NET Framework.",
                                           "updatedAt":  "2017-07-12T20:39:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxNDkyODQ5Ng==",
                                           "createdAt":  "2017-07-12T23:43:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "analogrelay",
                                           "body":  "The .NET Framework behavior sounds like the correct behavior to me, and it shouldn\u0027t affect autobahn compliance. Obviously it should be re-verified after the change to ensure it remains compliant. Are the autobahn tests part of the automated tests for this component?",
                                           "updatedAt":  "2017-07-12T23:43:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2MjU0NTkwOA==",
                                           "createdAt":  "2019-02-12T00:03:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dadude999",
                                           "body":  "Any updates on prioritization here? Scenario 2 as described by @Diego-Perez-Botero is pretty difficult to handle without throwing in extra flags to indicate whether the client already got a close request from the server:\r\n\r\n\u003e When **CloseOutputAsync** is called in non-UWP .NET Core, the close frame is sent out and the websocket\u0027s state transitions to _CloseSent_, even if a close frame had already been received from the server before the **CloseOutputAsync** call (i.e., websocket\u0027s state was _CloseReceived_). If a close frame is received from the server after that, the websocket\u0027s state becomes _CloseReceived_, which doesn\u0027t make it clear whether or not a close frame had previously been sent by the client.",
                                           "updatedAt":  "2019-02-12T00:03:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2MjU1Mjg5OQ==",
                                           "createdAt":  "2019-02-12T00:24:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidsh",
                                           "body":  "@karelz ",
                                           "updatedAt":  "2019-02-12T00:24:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2Mjg2MDAyNg==",
                                           "createdAt":  "2019-02-12T17:44:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidsh",
                                           "body":  "\u003eThe change being proposed is limited to the _ClientWebSocketState_ transitions (i.e., property value returned to the app). What\u0027s being sent/received down the wire should remain as-is.\r\n\r\nAs noted above, the fix needed in this issue in a fix to .NET Core System.Net.WebSockets.Client (non-UWP version). Specifically, it is a fix needed in the value of the state variable, _ClientWebSocketState_.\r\n\r\n\u003eAny updates on prioritization here?\r\n\r\nDue to the large number of backlogged issues, this issue has not been prioritized higher.  But if you have a PR with a fix (and a test), we will gladly accept it.",
                                           "updatedAt":  "2019-02-12T17:44:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2MzAyMTQwMw==",
                                           "createdAt":  "2019-02-13T01:51:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dadude999",
                                           "body":  "\u003e As noted above, the fix needed in this issue in a fix to .NET Core System.Net.WebSockets.Client (non-UWP version). Specifically, it is a fix needed in the value of the state variable, _ClientWebSocketState_.\r\n\r\nRight, that\u0027s what I\u0027m referring to as well.\r\n\r\n\u003e Due to the large number of backlogged issues, this issue has not been prioritized higher. But if you have a PR with a fix (and a test), we will gladly accept it.\r\n\r\nI\u0027m afraid I can\u0027t do that for legal reasons related to my job. Otherwise I\u0027d be happy to.",
                                           "updatedAt":  "2019-02-13T01:51:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4NzY2MTI1Ng==",
                                           "createdAt":  "2019-04-29T17:02:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAoCRdQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dadude999",
                                                                               "createdAt":  "2019-05-04T05:53:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidsh",
                                           "body":  "This is fixed now as of PR dotnet/corefx#36975",
                                           "updatedAt":  "2019-04-29T17:02:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3NzQ4NDM4OA==",
                                           "createdAt":  "2020-01-23T03:06:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "@davidsh, there\u0027s still a test disabled against this:\r\nhttps://github.com/dotnet/runtime/blob/04f22268efb4434b7cd81e8ae2c3354be99fd4a7/src/libraries/System.Net.WebSockets.Client/tests/CloseTest.cs#L263-L266",
                                           "updatedAt":  "2020-01-23T03:06:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Sw-kw",
                                           "createdAt":  "2024-11-07T14:00:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "Tests are disabled against this issue",
                                           "updatedAt":  "2024-11-07T14:00:29Z"
                                       }
                                   ],
                         "totalCount":  14
                     },
        "title":  "WebSocket state difference when waiting for Close",
        "labels":  [
                       "bug",
                       "area-System.Net",
                       "disabled-test",
                       "tenet-compatibility"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/22014",
        "createdAt":  "2017-05-27T04:31:56Z",
        "number":  22014,
        "author":  "hughbe",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-11-23T09:32:46Z",
        "body":  "Following tests are disabled with this issue:\r\n\r\n- SendAsync_Disposed_ThrowsObjectDisposedException\r\n- ReceiveAsync_Disposed_ThrowsObjectDisposedException\r\n\r\n```\r\n\r\n   System.Net.Tests.HttpListenerWebSocketTests.SendAsync_Disposed_ThrowsObjectDisposedException [FAIL]\r\n      Assert.Throws() Failure\r\n      Expected: typeof(System.ObjectDisposedException)\r\n      Actual:   typeof(System.Net.WebSockets.WebSocketException): The WebSocket is in an invalid state (\u0027Closed\u0027) for this operation. Valid states are: \u0027Open, CloseReceived\u0027\r\n      Stack Trace:\r\n            at System.Net.WebSockets.WebSocketValidate.ThrowIfInvalidState(WebSocketState currentState, Boolean isDisposed, WebSocketState[] validStates)\r\n            at System.Net.WebSockets.ManagedWebSocket.SendAsync(ArraySegment`1 buffer, WebSocketMessageType messageType, Boolean endOfMessage, CancellationToken cancellationToken)\r\n         --- End of stack trace from previous location where exception was thrown ---\r\n            at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n            at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\r\nSystem.Net.Tests.HttpListenerWebSocketTests.ReceiveAsync_Disposed_ThrowsObjectDisposedException [FAIL]\r\n      Assert.Throws() Failure\r\n      Expected: typeof(System.ObjectDisposedException)\r\n      Actual:   typeof(System.Net.WebSockets.WebSocketException): The WebSocket is in an invalid state (\u0027Closed\u0027) for this operation. Valid states are: \u0027Open, CloseSent\u0027\r\n      Stack Trace:\r\n            at System.Net.WebSockets.WebSocketValidate.ThrowIfInvalidState(WebSocketState currentState, Boolean isDisposed, WebSocketState[] validStates)\r\n            at System.Net.WebSockets.ManagedWebSocket.ReceiveAsync(ArraySegment`1 buffer, CancellationToken cancellationToken)\r\n         --- End of stack trace from previous location where exception was thrown ---\r\n            at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n            at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOOjGg6g==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNDUzNDExMg==",
                                           "createdAt":  "2017-05-28T19:12:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Is it difference against Desktop?",
                                           "updatedAt":  "2017-05-28T19:12:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNDU1ODY5OQ==",
                                           "createdAt":  "2017-05-29T02:18:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hughbe",
                                           "body":  "This is a difference of the managed implementation from Desktop, yes. However, the Windows netcoreapp implementation has the same  behaviour as desktop, so this issue tracks aligning the managed implementation with Windows netcoreapp and Desktop.",
                                           "updatedAt":  "2017-05-29T02:18:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNTAzMjQzMA==",
                                           "createdAt":  "2017-05-30T22:59:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@stephentoub did you set Future milestone based on impact?",
                                           "updatedAt":  "2017-05-30T22:59:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNTA0NTU2MQ==",
                                           "createdAt":  "2017-05-31T00:19:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e did you set Future milestone based on impact\r\n\r\nYes.  The issue is that if you use the websocket after it\u0027s already been disposed, you get an exception, it\u0027s just not the same type of exception.",
                                           "updatedAt":  "2017-05-31T00:19:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNTA1MDMxMg==",
                                           "createdAt":  "2017-05-31T00:52:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Got it, that makes sense, thanks!",
                                           "updatedAt":  "2017-05-31T00:52:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMyMDM1MjgyMQ==",
                                           "createdAt":  "2017-08-04T21:04:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "caesar-chen",
                                           "body":  "We should add a check `ThrowIfDisposed()` before checking for InvalidState in managed implementation.\r\n\r\nSomething like [this](https://github.com/dotnet/corefx/blob/f81984bcd0843e05e51a9280573ec67a28fc41f4/src/System.Net.HttpListener/src/System/Net/Windows/WebSockets/WebSocketBase.cs#L307)",
                                           "updatedAt":  "2017-08-04T21:04:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMyMTI4Mzg3Mw==",
                                           "createdAt":  "2017-08-09T15:06:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "Reverted dotnet/corefx#22977, so reopening.",
                                           "updatedAt":  "2017-08-09T15:06:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMyMTQwMDk0Ng==",
                                           "createdAt":  "2017-08-09T22:39:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "caesar-chen",
                                           "body":  "We should check if the **internal state for the websocket is `Disposed`**, not if the websocket has been disposed or not. \r\n\r\n```c#\r\n         private void ThrowIfDisposed()\r\n         {\r\n             if (_disposed) // not correct here\r\n             {\r\n                 throw new ObjectDisposedException(GetType().ToString());\r\n             }\r\n         }\r\n```\r\n\r\nThis can cause problem like dotnet/corefx#23038 because after we do `CancellationTokenSource.Cancel()`, the websocket state will be turn into `Aborted` (not `Disposed`). Since we do perform the dispose() operation (after `ThrowIfNotConnected()` check in `ClientWebSocket`), which causes the `_disposed` = true. If we add the `ThrowIfDisposed()` method in ManagedWebSocket, the `ObjectDisposedException` will be incorrectly thrown.\r\n\r\nThe correct approach to solve this issue is described here: [dotnet/corefx#23027](https://github.com/dotnet/corefx/issues/23027)",
                                           "updatedAt":  "2021-11-23T09:30:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46MYmr",
                                           "createdAt":  "2021-11-23T09:26:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "raffaeler",
                                           "body":  "Could you please publicly expose whether the websocket is disposed or not?\r\nI want to avoid Object Disposed Exception which I currently can\u0027t control after a normal closure (on Windows)",
                                           "updatedAt":  "2021-11-23T09:32:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46MaDq",
                                           "createdAt":  "2021-11-23T09:32:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@raffaeler please file a new issue with motivation and sample code ideally.\r\nIt is only remotely related to this specific issue. I will mark both my and your comments as off-topic here.",
                                           "updatedAt":  "2021-11-23T09:32:46Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "[HttpListener][Managed] HttpListenerWebSocketContext.WebSocket.Receive/Close should throw ObjectDisposedException after disposal",
        "labels":  [
                       "area-System.Net",
                       "os-linux",
                       "tenet-compatibility"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/1487",
        "createdAt":  "2017-06-19T05:28:55Z",
        "number":  1487,
        "author":  "davkean",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-03-06T00:52:00Z",
        "body":  "We\u0027re relying on `Uri` in the http://github.com/dotnet/project-system, to represent paths. Testing our path handling code, I found that Uri throws IndexOutOfRangeException (instead of UriFormatException) in the following situations:\r\n\r\n``` C#\r\nnew Uri(\"/\\\\‎//\", UriKind.Absolute);\r\nnew Uri(\"\\\\/\\u200e\", UriKind.Absolute);\r\nnew Uri(\"/\\\\\\\\-Ā\\r\", UriKind.Absolute);\r\nnew Uri(\"\\\\\\\\\\\\\\\\\\\\‎\", UriKind.Absolute);\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOoQ_fzw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwOTQ4NzIzMA==",
                                           "createdAt":  "2017-06-19T16:06:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@davkean none of these throw anything (including UFE) on Desktop for me..?\r\n\r\nClearly this isa bug though as they throw IOORE on Core.\r\n```\r\nUnhandled Exception: System.IndexOutOfRangeException: Index was outside the bounds of the array.\r\n   at System.Uri.CreateUriInfo(Flags cF)\r\n   at System.Uri.EnsureUriInfo()\r\n   at System.Uri.ParseRemaining()\r\n   at System.Uri.EnsureParseRemaining()\r\n   at System.Uri.InitializeUri(ParsingError err, UriKind uriKind, UriFormatException\u0026 e)\r\n   at System.Uri.CreateThis(String uri, Boolean dontEscape, UriKind uriKind)\r\n   at System.Uri..ctor(String uriString, UriKind uriKind)\r\n   at ConsoleApp1.Program.Main(String[] args) in C:\\dotnet\\1\\Program.cs:line 13\r\n```\r\n\r\n@karelz is this the right label for Uri? Please consider whether this is a 2.0 issue.",
                                           "updatedAt":  "2017-06-19T16:06:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwOTUwMjU3MA==",
                                           "createdAt":  "2017-06-19T17:00:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@Priya91 fyi",
                                           "updatedAt":  "2017-06-19T17:00:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwOTUwMjY3MA==",
                                           "createdAt":  "2017-06-19T17:01:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "My guess: these are not mainstream enough cases to churn Uri further for 2.0.",
                                           "updatedAt":  "2017-06-19T17:01:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwOTUwNDE0MQ==",
                                           "createdAt":  "2017-06-19T17:06:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "It\u0027s a good label. @Priya91 can you please help with this one?",
                                           "updatedAt":  "2017-06-19T17:06:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwOTUwNDgwNA==",
                                           "createdAt":  "2017-06-19T17:08:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Priya91",
                                           "body":  "@davkean These are invalid URIs?  Will look into this.",
                                           "updatedAt":  "2017-06-19T17:08:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwOTU5MDM3Ng==",
                                           "createdAt":  "2017-06-19T22:23:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davkean",
                                           "body":  "@danmosemsft Are you testing under 4.5+? Uri was changed in 4.5. I just verified and they all repro for me under desktop. \r\n\r\n@Priya91 TBH, I\u0027ve not done the legwork to figure out if they are invalid according to spec - they were generated for me by Pex. I don\u0027t need them for 2.0.",
                                           "updatedAt":  "2017-06-19T22:23:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwOTU5MzI0Nw==",
                                           "createdAt":  "2017-06-19T22:38:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@davkean ah, no I used csc out of the v4.0 folder...",
                                           "updatedAt":  "2017-06-19T22:38:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwOTU5MzUyMA==",
                                           "createdAt":  "2017-06-19T22:40:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davkean",
                                           "body":  "Yeah, you\u0027ll go down the 4.0 path.",
                                           "updatedAt":  "2017-06-19T22:40:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxMDQ2MDIwMA==",
                                           "createdAt":  "2017-06-22T18:15:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Does not look like 2.0 bug, moving to Future for further consideration.",
                                           "updatedAt":  "2017-06-22T18:15:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4NjA3NjM0OA==",
                                           "createdAt":  "2018-05-02T18:31:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rmkerr",
                                           "body":  "It looks like all of these are failing because they contain the Unicode LTR control character. Historically we have stripped control characters out of URIs, and that behavior is causing the issue here. We calculate the index of the end of the path and then strip out the control character, shortening the string and causing the index to fall beyond the end of the string.\r\n\r\nThe fix here is non-trivial, as the change will have to be made to some fairly complex unsafe code. I\u0027ll keep the issue assigned to me but don\u0027t have an ETA on this.",
                                           "updatedAt":  "2018-05-10T20:31:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNTg2Mjc4Mg==",
                                           "createdAt":  "2019-08-28T18:17:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidsh",
                                           "body":  "As of .NET Core 3.0 Preview 8 these\r\n\r\n``` C#\r\nnew Uri(\"/\\\\‎//\", UriKind.Absolute);\r\nnew Uri(\"\\\\/\\u200e\", UriKind.Absolute);\r\nnew Uri(\"\\\\\\\\\\\\\\\\\\\\‎\", UriKind.Absolute);\r\n```\r\n\r\nare still throwing IndexOutOfRangeException.  So, we still have a bug to fix.",
                                           "updatedAt":  "2019-08-28T18:17:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NjQwMjYwOQ==",
                                           "createdAt":  "2020-08-19T13:58:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBN82UA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "karelz",
                                                                               "createdAt":  "2020-08-20T12:18:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "CarnaViire",
                                           "body":  "As it was mentioned before, the problem is caused by Unicode bidi chars (characters that say that the string should be printed right-to-left, or with right alignment, etc.). These chars are removed from the authority part of a uri during the parsing.\r\n\r\nAt first I thought that the presence of bidi chars always breaks the parsing, but now I found out it\u0027s not the case. Here are examples of uri with bidi chars that are parsed perfectly fine with our current code:\r\n\r\n```\r\n\"scheme://user\\u200Einfo@ho\\u200Est:1234/pa\\u200Eth?que\\u200Ery#fragment\"\r\n\"scheme://\\u200E\"\r\n\"scheme://ab\\u200E\"\r\n\"scheme://ab\\u200Ecd\"\r\n\"scheme://\\u200E//\"\r\n\"scheme://\\u200E//ab\"\r\n\"\\\\\\\\ab\\u200E\"\r\n\"\\\\\\\\\\u200Ecd\"\r\n\"\\\\\\\\ab\\u200E//\"\r\n\"\\\\\\\\ab\\u200E//ab\"\r\n```\r\n\r\nAnd here are the examples where current parsing breaks with IOORE\r\n\r\n```\r\n\"\\\\\\\\\\u200E\"\r\n\"\\\\\\\\\\u200E:1234\"\r\n\"\\\\\\\\\\u200E//\"\r\n\"\\\\\\\\\\u200E//ab\"\r\n```\r\n\r\nThese all seem to be some corner cases where host ends up being empty AND when scheme is \"file\".\r\n\r\nSo we can\u0027t fix the issue by simply adjusting the internal parsing index on bidi chars removal. It will actually break all the cases in the first list - last symbols of the host will start to appear as if they were first symbols of the query.\r\n\r\n@MihaZupan sees this as one of the problems stemming from the complexity in Uri around re-creating internal uri string representation when non ascii characters are present. The logic is sprinkled around all over the place and clearly hard to reason about. So we think it might be better to deal with this by extracting out the re-writing logic from the shared parsing path. However, this is much broader change than just this particular bug.",
                                           "updatedAt":  "2020-08-19T13:58:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fHGyw",
                                           "createdAt":  "2025-02-19T18:25:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of our [issue cleanup automation](https://github.com/dotnet/runtime/blob/main/docs/issue-cleanup.md).\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-02-19T18:25:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hD9_P",
                                           "createdAt":  "2025-03-05T21:57:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "This issue will now be closed since it had been marked `no-recent-activity` but received no further activity in the past 14 days. It is still possible to reopen or comment on the issue, but please note that the issue will be locked if it remains inactive for another 30 days.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-03-05T21:57:29Z"
                                       }
                                   ],
                         "totalCount":  14
                     },
        "title":  "[Uri] Uri(String, UriKind) throws IndexOutOfRangeException for certain inputs",
        "labels":  [
                       "bug",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/23428",
        "createdAt":  "2017-09-02T23:23:37Z",
        "number":  23428,
        "author":  "davidsh",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-11-07T14:00:46Z",
        "body":  "## Types of failures\r\n\r\nError messages (ExtendedSocketException text)\r\n* Linux: No such device or address\r\n* OSX: Device not configured\r\n\r\nBuild 20170902.01:\r\n```\r\nSystem.Net.Internals.SocketExceptionFactory+ExtendedSocketException : No such device or address\r\nat   System.Net.Dns.InternalGetHostByName(String hostName, Boolean includeIPv6) in   /root/corefx-966039/src/System.Net.NameResolution/src/System/Net/DNS.cs:line   46\r\nSystem.Net.Dns.ResolveCallback(Object context) in   /root/corefx-966039/src/System.Net.NameResolution/src/System/Net/DNS.cs:line   290\r\n--- End of stack trace from previous location where exception was   thrown ---\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Net.Dns.HostResolutionEndHelper(IAsyncResult asyncResult) in   /root/corefx-966039/src/System.Net.NameResolution/src/System/Net/DNS.cs:line   420\r\nSystem.Net.Dns.EndGetHostEntry(IAsyncResult asyncResult) in   /root/corefx-966039/src/System.Net.NameResolution/src/System/Net/DNS.cs:line   562\r\nSystem.Threading.Tasks.TaskFactory`1.FromAsyncCoreLogic(IAsyncResult iar,   Func`2 endFunction, Action`1 endAction, Task`1 promise, Boolean   requiresSynchronization)\r\n--- End of stack trace from previous location   where exception was thrown ---\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task   task)\r\nat System.Net.Tests.WebProxyTest.\u003cBypassOnLocal_MemberData\u003ed__10.MoveNext()\r\nat   System.Linq.Enumerable.SelectEnumerableIterator`2.MoveNext() in   /root/corefx-966039/src/System.Linq/src/System/Linq/Select.cs:line 129\r\n```\r\n\r\n## History of failures (before disabling on 2017/9/2)\r\n\r\nNote: The test was renamed in https://github.com/dotnet/corefx/commit/cd7ae0572ed600eb7c0ae3350a6f08653fc20946 (on 2017/6/29) from `BypassOnLocal_MatchesExpected` to `WebProxy_BypassOnLocal_MatchesExpected`\r\n\r\nDay | Build | OS\r\n-- | -- | --\r\n5/7 | 20170507.02 | Ubuntu16.04\r\n5/28 | 20170528.02 | OSX10.12\r\n6/9 | 20170609.01 | Ubuntu16.04\r\n6/12 | 20170612.02 | Ubuntu16.04\r\n6/17 | 20170617.01 | Ubuntu14.04\r\n6/23 | 20170623.02 | Debian90\r\n6/26 | 20170626.03 | Debian90\r\n6/27 | 20170627.01 | Debian90\r\n6/27 | 20170627.01 | Suse42.2\r\n6/27 | 20170627.02 | Suse42.2\r\n7/2 | 20170702.02 | OSX10.12\r\n7/18 | 20170718.02 | Debian87\r\n7/20 | 20170720.92 | OSX10.12\r\n8/2 | 20170802.02 | Debian87\r\n8/4 | 20170804.03 | Debian90\r\n8/15 | 20170815.02 | Ubuntu14.04\r\n8/16 | 20170816.01 | Suse42.2\r\n8/20 | 20170820.02 | SLES12\r\n8/21 | 20170821.01 | OSX10.12\r\n8/21 | 20170821.02 | OSX10.12\r\n8/23 | 20170823.06 | OSX10.12\r\n8/24 | 20170824.02 | Debian90\r\n8/30 | 20170830.01 | Debian90\r\n9/2 | 20170902.01 | SLES12\r\n\r\n\r\n# Original report\r\n\r\nTest failed during PR run:\r\nhttps://mc.dot.net/#/user/davidsh/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/169daaad2062ab623fdafa738c3fdbc778d3652e\r\n\r\nUnhandled Exception of Type System.Net.Internals.SocketExceptionFactory+ExtendedSocketException\r\nMessage :\r\nSystem.Net.Internals.SocketExceptionFactory+ExtendedSocketException : No such device or address\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOksPpog==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4NzI5NzQ2NQ==",
                                           "createdAt":  "2019-04-27T15:57:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidsh",
                                           "body":  "Related to dotnet/runtime#19288",
                                           "updatedAt":  "2019-04-27T15:57:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Sw-mi",
                                           "createdAt":  "2024-11-07T14:00:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "Tests are disabled against this issue",
                                           "updatedAt":  "2024-11-07T14:00:33Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Test failed: WebProxy_BypassOnLocal_MatchesExpected",
        "labels":  [
                       "area-System.Net",
                       "disabled-test",
                       "os-linux",
                       "test-run-core"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/1488",
        "createdAt":  "2017-09-30T02:13:22Z",
        "number":  1488,
        "author":  null,
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-12T22:30:08Z",
        "body":  "## Type of failures\r\n\r\nAffected tests:\r\n* `System.Net.NameResolution.Tests.GetHostByNameTest` (both always fail together)\r\n  * `DnsObsoleteGetHostByName_EmptyString_ReturnsHostName`\r\n  * `DnsObsoleteBeginEndGetHostByName_EmptyString_ReturnsHostName`\r\n* `System.Net.NameResolution.Tests.GetHostEntryTest` (both always fail together)\r\n  * `Dns_GetHostEntry_HostString_Ok`\r\n  * `Dns_GetHostEntryAsync_HostString_Ok`\r\n\r\nFailure text:\r\n* OSX: **Device not configured**\r\n* Linux: **No such device or address**\r\n```\r\nSystem.Net.Internals.SocketExceptionFactory+ExtendedSocketException : Device not configured\r\nOR\r\nSystem.Net.Internals.SocketExceptionFactory+ExtendedSocketException : No such device or address\r\n\r\nat System.Net.Dns.InternalGetHostByName(String hostName, Boolean includeIPv6) in /Users/buildagent/agent/_work/34/s/corefx/src/System.Net.NameResolution/src/System/Net/DNS.cs:line 46\r\nat System.Net.Dns.GetHostByName(String hostName) in /Users/buildagent/agent/_work/34/s/corefx/src/System.Net.NameResolution/src/System/Net/DNS.cs:line 41\r\nat System.Net.NameResolution.Tests.GetHostByNameTest.DnsObsoleteGetHostByName_EmptyString_ReturnsHostName() in /Users/buildagent/agent/_work/34/s/corefx/src/System.Net.NameResolution/tests/FunctionalTests/GetHostByNameTest.cs:line 108\r\n```\r\n\r\nNote:\r\n * `Dns_GetHostEntryAsync_HostString_Ok` fails almost always with same error twice, wrapped in `System.AggregateException`.\r\n\r\n### Older failure on OSX (prior to 2017/9/15)\r\n\r\n```\r\nAssert.Contains() Failure\r\nNot found: DCI-Mac-Build-068.local\r\nIn value:  dci-mac-build-068.local\r\nat System.Net.NameResolution.Tests.GetHostByNameTest.DnsObsoleteGetHostByName_EmptyString_ReturnsHostName() in /Users/buildagent/agent/_work/30/s/corefx/src/System.Net.NameResolution/tests/FunctionalTests/GetHostByNameTest.cs:line 108\r\n```\r\n\r\n## History of failures\r\n\r\nEach test couple always fails or passes - maybe bad machine setup?\r\n\r\nDay | Build | OS | Test\r\n-- | -- | -- | --\r\n9/6 | 20170906.01 | OSX10.12 | DnsObsolete*\r\n9/10 | 20170910.01 | Ubuntu14.04 | DnsObsolete* \u0026 Dns_GetHostEntry*\r\n9/13 | 20170913.02 | OSX10.12 | DnsObsolete*\r\n9/15 | 20170915.01 | OSX10.12 | DnsObsolete*\r\n9/20 | 20170920.03 | Debian90 | DnsObsolete* \u0026 Dns_GetHostEntry*\r\n9/30 | 20170930.01 | OSX10.12 | DnsObsolete* \u0026 Dns_GetHostEntry*\r\n10/2 | 20171002.01 | Debian87 | DnsObsolete* \u0026 Dns_GetHostEntry*\r\n10/21 | 20171021.01 | Debian87 | DnsObsolete* \u0026 Dns_GetHostEntry*\r\n10/26 | 20171026.01 | Suse42.2 | DnsObsolete* \u0026 Dns_GetHostEntry*\r\n11/13 | 20171113.03 | OSX10.12 | DnsObsolete* \u0026 Dns_GetHostEntry*\r\n11/16 | 20171116.51 | SLES12 | DnsObsolete* \u0026 Dns_GetHostEntry*\r\n11/26 | 20171126.02 | Suse42.2 | DnsObsolete* \u0026 Dns_GetHostEntry*\r\n\r\nSimilar failures to dotnet/corefx#20245, but at different times (probably runs on different worker machine).\r\n\u003c!-- runfo report start --\u003e\r\nRunfo Tracking Issue: [dnsobsoletegethostbyname_emptystring_returnshostname](https://runfo.azurewebsites.net/tracking/issue/48)\r\n|Build|Definition|Kind|Run Name|\r\n|---|---|---|---|\r\n\r\n\r\n\r\nBuild Result Summary\r\n|Day Hit Count|Week Hit Count|Month Hit Count|\r\n|---|---|---|\r\n|0|0|0|\r\n\r\n\u003c!-- runfo report end --\u003e\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONBXY8w==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzOTUyOTg5NA==",
                                           "createdAt":  "2017-10-26T02:17:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Sunny-pu",
                                           "body":  "[EDIT] Test failure included in history in top post.",
                                           "updatedAt":  "2017-12-28T21:13:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1NDM1ODg2Nw==",
                                           "createdAt":  "2017-12-28T21:14:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Updated test failure history in top post.",
                                           "updatedAt":  "2017-12-28T21:14:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4MjYyODQzMg==",
                                           "createdAt":  "2018-04-19T06:45:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Sunny-pu",
                                           "body":  "failed again:\r\nhttps://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180419.01/workItem/System.Net.NameResolution.Functional.Tests",
                                           "updatedAt":  "2018-04-19T06:45:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2NjgwNzY3OQ==",
                                           "createdAt":  "2019-02-24T19:22:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "benaadams",
                                           "body":  "Seen in https://github.com/dotnet/corefx/pull/35267\r\n\r\nDebian.8.Amd64.Open-x64-Release\r\n\r\n```\r\nMessage :\r\nSystem.Net.Internals.SocketExceptionFactory+ExtendedSocketException : Name or service not known\r\nStack Trace :\r\n   at System.Net.Dns.InternalGetHostByName(String hostName) in /__w/1/s/src/System.Net.NameResolution/src/System/Net/DNS.cs:line 68\r\n   at System.Net.Dns.GetHostByName(String hostName) in /__w/1/s/src/System.Net.NameResolution/src/System/Net/DNS.cs:line 41\r\n   at System.Net.NameResolution.Tests.GetHostByNameTest.DnsObsoleteGetHostByName_EmptyString_ReturnsHostName() in /__w/1/s/src/System.Net.NameResolution/tests/FunctionalTests/GetHostByNameTest.cs:line 108\r\n```",
                                           "updatedAt":  "2019-02-24T19:22:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwMjk3NDMxNg==",
                                           "createdAt":  "2019-06-18T06:59:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AriNuer",
                                           "body":  "Same test failed with similar exception:\r\n\r\nFailed test:\r\n`System.Net.NameResolution.Tests.GetHostByNameTest/DnsObsoleteBeginEndGetHostByName_EmptyString_ReturnsHostName`\r\n\r\nMessage:\r\n```\r\nSystem.Net.Internals.SocketExceptionFactory+ExtendedSocketException : Name or service not known\r\n```\r\nStack Trace :\r\n```\r\n   at System.Net.Dns.InternalGetHostByName(String hostName) in /_/src/System.Net.NameResolution/src/System/Net/DNS.cs:line 68\r\n   at System.Net.Dns.ResolveCallback(Object context) in /_/src/System.Net.NameResolution/src/System/Net/DNS.cs:line 218\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw(Exception source) in /_/src/System.Private.CoreLib/shared/System/Runtime/ExceptionServices/ExceptionDispatchInfo.cs:line 69\r\n   at System.Net.Dns.HostResolutionEndHelper(IAsyncResult asyncResult) in /_/src/System.Net.NameResolution/src/System/Net/DNS.cs:line 361\r\n   at System.Net.Dns.EndGetHostByName(IAsyncResult asyncResult) in /_/src/System.Net.NameResolution/src/System/Net/DNS.cs:line 383\r\n   at System.Net.NameResolution.Tests.GetHostByNameTest.DnsObsoleteBeginEndGetHostByName_EmptyString_ReturnsHostName() in /_/src/System.Net.NameResolution/tests/FunctionalTests/GetHostByNameTest.cs:line 119\r\n```\r\nBuild: -[20190617.81](https://mc.dot.net/#/user/dotnet-bot/pr~2Fdotnet~2Fcorefx~2Frefs~2Fheads~2Fmaster/test~2Ffunctional~2Fcli~2Finnerloop~2F/20190617.81)(Master)\r\nFailing configurations:\r\n\r\n- RedHat.6.Amd64.Open-x64-Release \r\n- Debian.9.Amd64.Open-x64-Release\r\n\r\nDetails:\r\nhttps://mc.dot.net/#/user/dotnet-bot/pr~2Fdotnet~2Fcorefx~2Frefs~2Fheads~2Fmaster/test~2Ffunctional~2Fcli~2Finnerloop~2F/20190617.81/workItem/System.Net.NameResolution.Functional.Tests/analysis/xunit/System.Net.NameResolution.Tests.GetHostByNameTest~2FDnsObsoleteBeginEndGetHostByName_EmptyString_ReturnsHostName",
                                           "updatedAt":  "2019-06-18T06:59:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNzYyODQ3Mg==",
                                           "createdAt":  "2019-10-02T18:46:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: We should know why DNS resolution does not work sometimes -- we know it is not cached on Linux/Mac, but why does it happen so often in CI? Is it network flakiness? Or busy machine?\r\n\r\nPlan: Add production diagnostics into DNS, then make runs with those changes to catch it. It will be useful also for production diagnostic by customers.",
                                           "updatedAt":  "2019-10-02T18:47:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3OTQzNjA4Mg==",
                                           "createdAt":  "2020-01-28T20:18:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "no failure on Linux for 90 days. Some tests are still disabled on  OSX and ARM64 (tracked by #27622). ",
                                           "updatedAt":  "2020-04-03T23:09:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3OTY3Mzc3NA==",
                                           "createdAt":  "2020-01-29T09:40:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@wfurt do we have any tests disabled against this specific bug? If not, let\u0027s close it.",
                                           "updatedAt":  "2020-01-29T09:40:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3OTkxNjk5MQ==",
                                           "createdAt":  "2020-01-29T19:21:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "We have four tests disabled at this moment for OSX and the same for ARM64 (tracked in #27622).\r\n\r\nI suspect most of the failures are not product bugs and are caused by test environment.   \r\nAFAIK we changed our macOS infrastructure as well as ARM64 support matured. \r\nHow about moving the test to Outerloop? That would allow us to collect some stability data without impacting everyone\u0027s PRs. That also seems appropriate since tests do have a dependency on external service.\r\n\r\ncc: @dotnet/ncl in case somebody has a better suggestion.",
                                           "updatedAt":  "2020-04-03T23:09:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4NzY5NjY5NQ==",
                                           "createdAt":  "2020-02-18T19:22:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ViktorHofer",
                                           "body":  "A bunch of NameResolution tests failed again (including the ones mentioned in this issue): https://dnceng.visualstudio.com/public/_build/results?buildId=525372\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=16621996\u0026resultId=137716\u0026paneView=debug\r\n\r\n@wfurt @davish suggestions for mitigation?",
                                           "updatedAt":  "2020-02-18T19:22:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4NzcwMjgyMg==",
                                           "createdAt":  "2020-02-18T19:26:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidsh",
                                           "body":  "\u003e@wfurt @davish suggestions for mitigation?\r\n\r\nDoing name resolution in a CI environment will always be flaky most likely.\r\n\u003eSystem.Net.Internals.SocketExceptionFactory+ExtendedSocketException : Name or service not known\r\n\r\nPerhaps we should consider an approach being done here in #32501 and only run these tests on a less regular basis. I.e.:\r\n\r\n```c#\r\n[Trait(XunitConstants.Category, XunitConstants.IgnoreForCI)] // DNS is flaky\r\n```\r\n\r\nFWIW, Our DNS APIs have been relatively stable from a product perspective and don\u0027t see a lot of risk running these tests less often.",
                                           "updatedAt":  "2020-02-18T19:27:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4NzcwNTg4Nw==",
                                           "createdAt":  "2020-02-18T19:28:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "We should work towards stabilizing core services (like DNS) in CI. ",
                                           "updatedAt":  "2020-02-18T19:28:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4Nzc2NjYyNw==",
                                           "createdAt":  "2020-02-18T20:09:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ViktorHofer",
                                           "body":  "What about leveraging the `RetryHelper` for DNS tests which are inherently flaky?",
                                           "updatedAt":  "2020-02-18T20:09:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4NzgzMjExNw==",
                                           "createdAt":  "2020-02-18T20:54:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidsh",
                                           "body":  "\u003eWe should work towards stabilizing core services (like DNS) in CI.\r\n\r\n\u003eWhat about leveraging the RetryHelper for DNS tests which are inherently flaky?\r\n\r\nDo we understand whether the problem is intermittent (i.e. retrying tests will help) or due to a mis-configuration of some kind in CI (which retrying tests will not help).",
                                           "updatedAt":  "2020-02-18T20:55:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4NzgzOTMxNg==",
                                           "createdAt":  "2020-02-18T20:59:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ViktorHofer",
                                           "body":  "\u003e Do we understand whether the problem is intermittent (i.e. retrying tests will help) or due to a mis-configuration of some kind in CI (which retrying tests will not help).\r\n\r\nI assumed it\u0027s intermittent but how would we find that out?",
                                           "updatedAt":  "2020-02-18T20:59:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4Nzk0MDA3MQ==",
                                           "createdAt":  "2020-02-18T22:39:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidsh",
                                           "body":  "\u003eI assumed it\u0027s intermittent but how would we find that out?\r\n\r\nLet\u0027s add some RetryHelper logic to some of the tests. Then run it in CI. If we see a significant improvement in test reliability, then we will know that the problem is intermittent.",
                                           "updatedAt":  "2020-02-18T22:39:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4NjA3Njg2NA==",
                                           "createdAt":  "2021-02-25T17:36:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Anipik",
                                           "body":  "failed again here https://dev.azure.com/dnceng/public/_build/results?buildId=1011268\u0026view=logs\u0026j=b9b7de4d-2126-5581-6453-1576f9aaac5f\u0026t=db048d48-40e8-5399-9b14-d587763f33ff",
                                           "updatedAt":  "2021-02-25T17:36:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4NjMwMDI1NQ==",
                                           "createdAt":  "2021-02-25T23:26:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "Here too: https://helixre8s23ayyeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-48667-merge-af809879612c4371b8/System.Net.NameResolution.Functional.Tests/console.826d39cc.log?sv=2019-07-07\u0026se=2021-03-17T22%3A53%3A24Z\u0026sr=c\u0026sp=rl\u0026sig=qfUTGHjOCkAigQRcROLrLRTtq5MphSvppEvcO8QVJUU%3D",
                                           "updatedAt":  "2021-02-25T23:26:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4NjMwMTIwMQ==",
                                           "createdAt":  "2021-02-25T23:27:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ViktorHofer",
                                           "body":  "Tests were disabled on SLES with https://github.com/dotnet/runtime/pull/48759.",
                                           "updatedAt":  "2021-02-25T23:27:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2ODE1NDYyNA==",
                                           "createdAt":  "2021-06-25T02:28:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VincentBu",
                                           "body":  "Failed again in [runtime 20210624.123](https://dev.azure.com/dnceng/public/_build/results?buildId=1205090\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=36061046\u0026resultId=145963\u0026paneView=debug)\r\n\r\nFailed tests:\r\n```\r\nnet6.0-Linux-Release-x64-CoreCLR_release-SLES.12.Amd64.Open\r\n\r\n- System.Net.NameResolution.Tests.GetHostEntryTest.Dns_GetHostEntry_HostString_Ok(hostName: \\\"\\\")\r\n\r\nError message\r\nSystem.Exception : Failed for empty hostname.\r\nDns.GetHostName() == a000AID\r\ngetHostEntryException==System.Net.Internals.SocketExceptionFactory+ExtendedSocketException (00000005, 0xFFFDFFFF): Name or service not known\r\nat System.Net.Dns.GetHostEntryOrAddressesCore(String hostName, Boolean justAddresses, AddressFamily addressFamily) in //src/libraries/System.Net.NameResolution/src/System/Net/Dns.cs:line 403\r\nat System.Net.Dns.GetHostEntryCore(String hostName, AddressFamily addressFamily) in //src/libraries/System.Net.NameResolution/src/System/Net/Dns.cs:line 384\r\nat System.Net.Dns.GetHostEntry(String hostNameOrAddress, AddressFamily family) in //src/libraries/System.Net.NameResolution/src/System/Net/Dns.cs:line 91\r\nat System.Net.Dns.GetHostEntry(String hostNameOrAddress) in //src/libraries/System.Net.NameResolution/src/System/Net/Dns.cs:line 60\r\nat System.Net.NameResolution.Tests.GetHostEntryTest.Dns_GetHostEntry_HostString_Ok(String hostName) in /_/src/libraries/System.Net.NameResolution/tests/FunctionalTests/GetHostEntryTest.cs:line 45\r\netcHostsException==\r\n/etc/host ==\r\n\r\nhosts         This file describes a number of hostname-to-address\r\nmappings for the TCP/IP subsystem.  It is mostly\r\nused at boot time, when no name servers are running.\r\nOn small systems, this file can be used instead of a\r\n\"named\" name server.\r\nSyntax:\r\nIP-Address  Full-Qualified-Hostname  Short-Hostname\r\n127.0.0.1\tlocalhost\r\n\r\nspecial IPv6 addresses\r\n::1             localhost ipv6-localhost ipv6-loopback\r\n\r\nfe00::0         ipv6-localnet\r\n\r\nff00::0         ipv6-mcastprefix\r\nff02::1         ipv6-allnodes\r\nff02::2         ipv6-allrouters\r\nff02::3         ipv6-allhosts\r\n\r\nAdded by SMT registration do not remove, retain comment as well\r\n52.148.152.22\tsmt-azure.susecloud.net\tsmt-azure\r\n\r\n---- System.Net.Internals.SocketExceptionFactory+ExtendedSocketException : Name or service not known\r\n\r\n\r\nStack trace\r\n   at System.Net.NameResolution.Tests.GetHostEntryTest.Dns_GetHostEntry_HostString_Ok(String hostName) in /_/src/libraries/System.Net.NameResolution/tests/FunctionalTests/GetHostEntryTest.cs:line 64\r\n--- End of stack trace from previous location ---\r\n----- Inner Stack Trace -----\r\n   at System.Net.Dns.GetHostEntryOrAddressesCore(String hostName, Boolean justAddresses, AddressFamily addressFamily) in /_/src/libraries/System.Net.NameResolution/src/System/Net/Dns.cs:line 403\r\n   at System.Net.Dns.GetHostEntryCore(String hostName, AddressFamily addressFamily) in /_/src/libraries/System.Net.NameResolution/src/System/Net/Dns.cs:line 384\r\n   at System.Net.Dns.GetHostEntry(String hostNameOrAddress, AddressFamily family) in /_/src/libraries/System.Net.NameResolution/src/System/Net/Dns.cs:line 91\r\n   at System.Net.Dns.GetHostEntry(String hostNameOrAddress) in /_/src/libraries/System.Net.NameResolution/src/System/Net/Dns.cs:line 60\r\n   at System.Net.NameResolution.Tests.GetHostEntryTest.\u003c\u003ec__DisplayClass1_0.\u003cDns_GetHostEntry_HostString_Ok\u003eb__0() in /_/src/libraries/System.Net.NameResolution/tests/FunctionalTests/GetHostEntryTest.cs:line 33\r\n   at System.Net.NameResolution.Tests.GetHostEntryTest.TestGetHostEntryAsync(Func`1 getHostEntryFunc) in /_/src/libraries/System.Net.NameResolution/tests/FunctionalTests/GetHostEntryTest.cs:line 88\r\n   at System.Net.NameResolution.Tests.GetHostEntryTest.Dns_GetHostEntry_HostString_Ok(String hostName) in /_/src/libraries/System.Net.NameResolution/tests/FunctionalTests/GetHostEntryTest.cs:line 33\r\n```\r\n```\r\nnet6.0-Linux-Release-x64-CoreCLR_release-SLES.12.Amd64.Open\r\n\r\n- System.Net.NameResolution.Tests.GetHostByNameTest.DnsObsoleteGetHostByName_EmptyString_ReturnsHostName\r\n- System.Net.NameResolution.Tests.GetHostByNameTest.DnsObsoleteBeginEndGetHostByName_EmptyString_ReturnsHostName\r\n\r\nnet6.0-Linux-Release-x64-Mono_release-SLES.12.Amd64.Open\r\n\r\n- System.Net.NameResolution.Tests.GetHostByNameTest.DnsObsoleteGetHostByName_EmptyString_ReturnsHostName\r\n- System.Net.NameResolution.Tests.GetHostByNameTest.DnsObsoleteBeginEndGetHostByName_EmptyString_ReturnsHostName\r\n\r\nError message\r\nSystem.Net.Internals.SocketExceptionFactory+ExtendedSocketException : Name or service not known\r\n\r\n\r\nStack trace\r\n   at System.Net.Dns.GetHostEntryOrAddressesCore(String hostName, Boolean justAddresses, AddressFamily addressFamily) in /_/src/libraries/System.Net.NameResolution/src/System/Net/Dns.cs:line 403\r\n   at System.Net.Dns.GetHostEntryCore(String hostName, AddressFamily addressFamily) in /_/src/libraries/System.Net.NameResolution/src/System/Net/Dns.cs:line 384\r\n   at System.Net.Dns.GetHostByName(String hostName) in /_/src/libraries/System.Net.NameResolution/src/System/Net/Dns.cs:line 271\r\n   at System.Net.NameResolution.Tests.GetHostByNameTest.DnsObsoleteGetHostByName_EmptyString_ReturnsHostName() in /_/src/libraries/System.Net.NameResolution/tests/FunctionalTests/GetHostByNameTest.cs:line 109\r\n```\r\n```\r\nnet6.0-Linux-Release-x64-CoreCLR_release-SLES.12.Amd64.Open\r\n\r\n- System.Net.NameResolution.Tests.GetHostEntryTest.Dns_GetHostEntryAsync_HostString_Ok(hostName: \\\"\\\")\r\n\r\nError message\r\nSystem.AggregateException : One or more errors occurred. (One or more errors occurred. (Name or service not known)) (One or more errors occurred. (Name or service not known))\r\n---- System.AggregateException : One or more errors occurred. (Name or service not known)\r\n-------- System.Net.Internals.SocketExceptionFactory+ExtendedSocketException : Name or service not known\r\n---- System.AggregateException : One or more errors occurred. (Name or service not known)\r\n-------- System.Net.Internals.SocketExceptionFactory+ExtendedSocketException : Name or service not known\r\n\r\n\r\nStack trace\r\n   at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks) in /_/src/libraries/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs:line 80\r\n   at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks, Int32 millisecondsTimeout) in /_/src/libraries/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs:line 49\r\n   at System.Net.NameResolution.Tests.GetHostEntryTest.TestGetHostEntryAsync(Func`1 getHostEntryFunc) in /_/src/libraries/System.Net.NameResolution/tests/FunctionalTests/GetHostEntryTest.cs:line 91\r\n   at System.Net.NameResolution.Tests.GetHostEntryTest.Dns_GetHostEntryAsync_HostString_Ok(String hostName) in /_/src/libraries/System.Net.NameResolution/tests/FunctionalTests/GetHostEntryTest.cs:line 80\r\n--- End of stack trace from previous location ---\r\n----- Inner Stack Trace #1 (System.AggregateException) -----\r\n\r\n----- Inner Stack Trace -----\r\n   at System.Net.Dns.GetHostEntryOrAddressesCore(String hostName, Boolean justAddresses, AddressFamily addressFamily) in /_/src/libraries/System.Net.NameResolution/src/System/Net/Dns.cs:line 403\r\n   at System.Net.Dns.GetHostEntryCore(String hostName, AddressFamily addressFamily) in /_/src/libraries/System.Net.NameResolution/src/System/Net/Dns.cs:line 384\r\n   at System.Net.Dns.\u003c\u003ec.\u003cGetHostEntryOrAddressesCoreAsync\u003eb__33_1(Object s) in /_/src/libraries/System.Net.NameResolution/src/System/Net/Dns.cs:line 591\r\n   at System.Net.Dns.\u003c\u003ec__DisplayClass39_0`1.\u003cRunAsync\u003eb__0(Task \u003cp0\u003e, Object \u003cp1\u003e) in /_/src/libraries/System.Net.NameResolution/src/System/Net/Dns.cs:line 688\r\n   at System.Threading.Tasks.ContinuationResultTaskFromTask`1.InnerInvoke() in /_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/TaskContinuation.cs:line 94\r\n   at System.Threading.Tasks.Task.\u003c\u003ec.\u003c.cctor\u003eb__284_0(Object obj) in /_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs:line 2369\r\n   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(Thread threadPoolThread, ExecutionContext executionContext, ContextCallback callback, Object state) in /_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs:line 268\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(Thread threadPoolThread, ExecutionContext executionContext, ContextCallback callback, Object state) in /_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs:line 293\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task\u0026 currentTaskSlot, Thread threadPoolThread) in /_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs:line 2331\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks) in /_/src/libraries/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs:line 63\r\n----- Inner Stack Trace #2 (System.AggregateException) -----\r\n\r\n----- Inner Stack Trace -----\r\n   at System.Net.Dns.GetHostEntryOrAddressesCore(String hostName, Boolean justAddresses, AddressFamily addressFamily) in /_/src/libraries/System.Net.NameResolution/src/System/Net/Dns.cs:line 403\r\n   at System.Net.Dns.GetHostEntryCore(String hostName, AddressFamily addressFamily) in /_/src/libraries/System.Net.NameResolution/src/System/Net/Dns.cs:line 384\r\n   at System.Net.Dns.\u003c\u003ec.\u003cGetHostEntryOrAddressesCoreAsync\u003eb__33_1(Object s) in /_/src/libraries/System.Net.NameResolution/src/System/Net/Dns.cs:line 591\r\n   at System.Net.Dns.\u003c\u003ec__DisplayClass39_0`1.\u003cRunAsync\u003eb__0(Task \u003cp0\u003e, Object \u003cp1\u003e) in /_/src/libraries/System.Net.NameResolution/src/System/Net/Dns.cs:line 688\r\n   at System.Threading.Tasks.ContinuationResultTaskFromTask`1.InnerInvoke() in /_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/TaskContinuation.cs:line 94\r\n   at System.Threading.Tasks.Task.\u003c\u003ec.\u003c.cctor\u003eb__284_0(Object obj) in /_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs:line 2369\r\n   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(Thread threadPoolThread, ExecutionContext executionContext, ContextCallback callback, Object state) in /_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs:line 268\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(Thread threadPoolThread, ExecutionContext executionContext, ContextCallback callback, Object state) in /_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs:line 293\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task\u0026 currentTaskSlot, Thread threadPoolThread) in /_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs:line 2331\r\n```",
                                           "updatedAt":  "2021-07-26T10:44:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3Mzg0NzAyNw==",
                                           "createdAt":  "2021-07-05T06:41:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VincentBu",
                                           "body":  "Failed again in [runtime 20210704.33](https://dev.azure.com/dnceng/public/_build/results?buildId=1220226\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=36373108\u0026resultId=148164\u0026paneView=debug)\r\n\r\nFailed tests:\r\n```\r\nnet6.0-Linux-Release-x64-CoreCLR_release-SLES.12.Amd64.Open\r\n\r\n- System.Net.NameResolution.Tests.GetHostByNameTest.DnsObsoleteGetHostByName_EmptyString_ReturnsHostName\r\n- System.Net.NameResolution.Tests.GetHostByNameTest.DnsObsoleteBeginEndGetHostByName_EmptyString_ReturnsHostName\r\n- System.Net.NameResolution.Tests.GetHostEntryTest.Dns_GetHostEntry_HostString_Ok(hostName: \\\"\\\")\r\n- System.Net.NameResolution.Tests.GetHostEntryTest.Dns_GetHostEntryAsync_HostString_Ok(hostName: \\\"\\\")\r\n```\r\n\r\n**One of Error messages:**\r\n```\r\nSystem.Net.Internals.SocketExceptionFactory+ExtendedSocketException : Name or service not known\r\n\r\n\r\nStack trace\r\n   at System.Net.Dns.GetHostEntryOrAddressesCore(String hostName, Boolean justAddresses, AddressFamily addressFamily) in /_/src/libraries/System.Net.NameResolution/src/System/Net/Dns.cs:line 403\r\n   at System.Net.Dns.GetHostEntryCore(String hostName, AddressFamily addressFamily) in /_/src/libraries/System.Net.NameResolution/src/System/Net/Dns.cs:line 384\r\n   at System.Net.Dns.GetHostByName(String hostName) in /_/src/libraries/System.Net.NameResolution/src/System/Net/Dns.cs:line 271\r\n   at System.Net.NameResolution.Tests.GetHostByNameTest.DnsObsoleteGetHostByName_EmptyString_ReturnsHostName() in /_/src/libraries/System.Net.NameResolution/tests/FunctionalTests/GetHostByNameTest.cs:line 109\r\n```",
                                           "updatedAt":  "2021-07-26T10:43:54Z"
                                       }
                                   ],
                         "totalCount":  21
                     },
        "title":  "Tests failures: System.Net.NameResolution.Tests / DnsObsolete* \u0026 Dns_GetHostEntry*",
        "labels":  [
                       "area-System.Net",
                       "disabled-test",
                       "os-linux",
                       "os-mac-os-x",
                       "test-run-core"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/23798",
        "createdAt":  "2017-10-10T22:20:42Z",
        "number":  23798,
        "author":  "wfurt",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-11-07T14:01:41Z",
        "body":  "I bump to this while running test on FreeBSD, however this issue is not OS specific. \r\nSome tests make silent assumption about IPv6 and they fail if system is not configured to meet that. \r\nThis is unpleasant for anybody from community to run tests and get good pass. \r\n\r\nThe easy repro for Linux is:\r\nsysctl -w net.ipv6.conf.all.disable_ipv6=1\r\n./build-tests.sh\r\n\r\nThe expected behavior would be that tests needing IPv6 would be skipped.\r\nRight now, some tests even hang for very long time. ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOeTFrww==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3MTk0NjA2Mw==",
                                           "createdAt":  "2018-03-09T21:11:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MarcoRossignoli",
                                           "body":  "The idea to add ConditionalAttribute with OSSupportsIPv6 check on fail tests could be a solution?Is this similar to this [PR](https://github.com/dotnet/corefx/pull/27558#issuecomment-369666566)?",
                                           "updatedAt":  "2018-03-09T21:13:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3MTk4MzU4Nw==",
                                           "createdAt":  "2018-03-10T00:29:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "Genrally, yes @MarcoRossignoli. I would expect tests to be skipped if they cannot execute correctly. \r\nAt some point we may consider it also for IPv6 only systems. That is probably more work and less common right now.",
                                           "updatedAt":  "2018-03-10T00:29:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3MjAxMTU1Nw==",
                                           "createdAt":  "2018-03-10T08:00:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MarcoRossignoli",
                                           "body":  "\u003eAt some point we may consider it also for IPv6 only systems\r\n\r\ndo you mean skip tests with IPv4 \"parameters\"?",
                                           "updatedAt":  "2018-03-10T08:00:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3MjA2MzM0NQ==",
                                           "createdAt":  "2018-03-10T20:25:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MarcoRossignoli",
                                           "body":  "@wfurt i did some tests and OSSupportsIPv6 = true also if ipv6 is disabled.\r\nWhat do you think about...\r\n```csharp\r\n       public static bool IPv6Enabled {get;} = IsIPv6Enabled();\r\n       private static bool IsIPv6Enabled()\r\n        {\r\n            try\r\n            {\r\n                using (Socket host = new Socket(AddressFamily.InterNetworkV6, SocketType.Stream, ProtocolType.Tcp))\r\n                {                \r\n                    host.Bind(new IPEndPoint(IPAddress.IPv6Loopback, 0));\r\n                }            \r\n                return true;\r\n            }\r\n            catch(SocketException ex)\r\n            {            \r\n                if(ex.SocketErrorCode == SocketError.AddressNotAvailable)\r\n                    return false;\r\n                    \r\n                throw ex;\r\n            }            \r\n        }\r\n\r\n``` \r\n\r\n EADDRNOTAVAIL A nonexistent interface was requested or the requested addres was not local",
                                           "updatedAt":  "2018-03-10T20:32:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3MjA4NTU4NQ==",
                                           "createdAt":  "2018-03-11T03:02:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAUH1Eg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MarcoRossignoli",
                                                                               "createdAt":  "2018-03-20T09:50:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "wfurt",
                                           "body":  "I don\u0027t undersatnd your point @MarcoRossignoli. Are you suggesting that OSSupportsIPv6 value is incorrect? Even if OS can do IPv6, given address family may or may not be configured. For example you can disable IPv6 on \u0027lo\u0027 and leave it on \u0027eth0\u0027.\r\nI think for tests them selves we would check both OSSupportsIPv6 as well as loopback configured. ",
                                           "updatedAt":  "2018-03-11T03:02:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3MjA5NzIwMg==",
                                           "createdAt":  "2018-03-11T08:09:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MarcoRossignoli",
                                           "body":  "@wfurt  i get it\r\n\r\n\u003e as well as loopback configured\r\n\r\n Is It correct my way to check \"loopback configuration\"?\r\n\r\n\u003eI think for tests them selves we would check both\r\n\r\nWe can use two condition for ConditionalAttribute for tests failing, or AND OSSupportIPv6 with new check, which would you prefer?",
                                           "updatedAt":  "2018-03-11T08:09:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5MzY1NTg4OQ==",
                                           "createdAt":  "2018-05-31T19:44:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidsh",
                                           "body":  "\u003eI bump to this while running test on FreeBSD, however this issue is not OS specific.\r\n\r\nI also ran into this.  I have a Windows machine running Docker for Windows.  In my Linux containers, there is no IPv6 at all.  That is a limitation of Docker for Windows.  When I run the System.Net.Sockets tests or System.Net.Http tests, for example, I get failures since it assumes IPv6 is there.  It would be nice to fix this.",
                                           "updatedAt":  "2018-05-31T19:44:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5MzY2MTQ5NQ==",
                                           "createdAt":  "2018-05-31T20:01:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MarcoRossignoli",
                                           "body":  "\u003e In my Linux containers...\r\n\r\n@davidsh Do you use containers for testing/dev?\r\n\r\n\u003e  It would be nice to fix this.\r\n\r\nI\u0027m working on other PR right now, if nobody grab this i\u0027ll try a PR",
                                           "updatedAt":  "2018-06-04T10:42:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5MzY2NDIzNQ==",
                                           "createdAt":  "2018-05-31T20:10:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "That would be nice @MarcoRossignoli.It would be nice to have it as xunit trait instead of adding check it each test function. \r\n\r\nAs far as the implementation, Your code would actually test presence of IPv6 loopback address. \r\nI think the OSSupportIPv6 only tries to create IPv6 socket. So from test prospective, I think test for the address is better. \r\nI don\u0027t know if we have any tests reaching to public servers via IPv6. If so, it would be nice to have test for reachability e.g. routers \u0026 ISP working right. But I think priority on this one is much lower. \r\nFixing IPv6 loopback tests would be good improvement. ",
                                           "updatedAt":  "2018-05-31T20:10:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5MzY2NjIxNw==",
                                           "createdAt":  "2018-05-31T20:18:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MarcoRossignoli",
                                           "body":  "\u003e It would be nice to have it as xunit trait instead of adding check it each test function.\r\n\r\nCan you clarify?\r\nIs there a way to pass trait to test runner depending on plat?\r\n\r\n\u003eIf so, it would be nice to have test for reachability e.g. routers \u0026 ISP working right\r\n\r\nDo you mean use a \"real ipv6 address\"?If so is there some sample on codebase?\r\n(EDIT: Sorry...I don\u0027t know if we have any tests reaching to public servers via IPv6...understood,  already answered)",
                                           "updatedAt":  "2018-05-31T20:26:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5MzY3MTQ3OQ==",
                                           "createdAt":  "2018-05-31T20:37:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "look at PlatformSupportsUnixDomainSockets under src/System.Net.Sockets/tests/FunctionalTests\r\nThat adds Xunit condition so we would (not) run the test when appropriate. \r\n\r\nAs oposite you can take a look at ReceiveMessageFrom.cs and use of Socket.OSSupportsIPv6.\r\nThose test would always pass even if they did not really run. \r\n\r\nI did look at properties under src/Common/tests/System/Net/Configuration* and it does not seems like we have explicit IPv6 host. There are DNS names which can possibly resolve to either AF but I would not worry about it now. @rmkerr is working on fast fail path - at least for HTTP dotnet/corefx#29792",
                                           "updatedAt":  "2018-05-31T20:37:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5Njg3MzczMQ==",
                                           "createdAt":  "2018-06-13T09:24:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MarcoRossignoli",
                                           "body":  "\u003e it does not seems like we have explicit IPv6 host\r\n\r\n@wfurt i did some test with https://developers.google.com/speed/public-dns/docs/using google dns ipv6 2001:4860:4860::8888...with socket UDP Connect on port 53...throws \"unreachable\" with ipv6 enabled and with IPv6 disabled i get correct exception/return code(like ping in terminal `Cannot assign requested address`).\r\n\r\n\u003e look at PlatformSupportsUnixDomainSockets under src/System.Net.Sockets/tests/FunctionalTests\r\nThat adds Xunit condition so we would (not) run the test when appropriate.\r\n\r\nIf i understood well you mean Conditional/Fact,Theory, some methods that fail already use this attributes...and seems(maybe i\u0027m wrong) it\u0027s not possible AND conditions es. https://github.com/dotnet/buildtools/blob/master/src/xunit.netcore.extensions/Attributes/ConditionalFactAttribute.cs, so maybe we can\r\n* add `if` on failing tests  \r\n* replicate conditions on new helper type(to share helper in on all tests classes, es. `IPv6SupportHelper`), but i don\u0027t like it. \r\n* replicate new ipv6 check where needed and use `[ConditionalX]`.   \r\n\r\nWe could also fill issue to buildtools(could be useful AND conditions).",
                                           "updatedAt":  "2018-06-13T09:24:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc55MWvD",
                                           "createdAt":  "2024-04-02T23:34:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of our [issue cleanup automation](https://github.com/dotnet/runtime/blob/main/docs/issue-cleanup.md).\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-02T23:34:03Z"
                                       }
                                   ],
                         "totalCount":  13
                     },
        "title":  "Unit tests are failing if IPv6 is not configured",
        "labels":  [
                       "area-System.Net",
                       "test-bug",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/25440",
        "createdAt":  "2018-03-13T22:04:13Z",
        "number":  25440,
        "author":  "davidsh",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-11-20T09:14:45Z",
        "body":  "While working on dotnet/runtime#24965, I noticed that the following test will fail. There seems to be a problem with the close frame exchange and final TCP socket close when going thru a proxy.\r\n\r\nRepro test (not yet in repo):\r\n\r\n```c#\r\n[OuterLoop] // TODO: Issue dotnet/runtime#18406\r\n[ConditionalTheory(nameof(WebSocketsSupported)), MemberData(nameof(EchoServers))]\r\npublic async Task Proxy_ConnectThruProxy_Success(Uri server)\r\n{\r\n    IWebProxy proxy = new WebProxy(new Uri(\"http://localhost:8080/\"));\r\n    using (ClientWebSocket cws = await WebSocketHelper.GetConnectedWebSocket(\r\n        server,\r\n        TimeOutMilliseconds,\r\n        _output,\r\n        default(TimeSpan),\r\n        proxy))\r\n    {\r\n        var cts = new CancellationTokenSource(TimeOutMilliseconds);\r\n        Assert.Equal(WebSocketState.Open, cws.State);\r\n\r\n        var closeStatus = WebSocketCloseStatus.NormalClosure;\r\n        string closeDescription = \"Normal Closure\";\r\n\r\n        await cws.CloseAsync(closeStatus, closeDescription, cts.Token);\r\n\r\n        // Verify a clean close frame handshake.\r\n        Assert.Equal(WebSocketState.Closed, cws.State); // *** FAILS HERE ***\r\n        Assert.Equal(closeStatus, cws.CloseStatus);\r\n        Assert.Equal(closeDescription, cws.CloseStatusDescription);\r\n    }\r\n}\r\n```\r\n\r\nFails with error:\r\n\r\n```\r\n    System.Net.WebSockets.Client.Tests.ClientWebSocketOptionsTests.Proxy_SecureConnectThruProxy_Success(server: ws://corefx-net.cloudapp.net/WebSocket/EchoWeb\r\n  Socket.ashx) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: Closed\r\n        Actual:   Aborted\r\n        Stack Trace:\r\n           s:\\GitHub\\corefx\\src\\System.Net.WebSockets.Client\\tests\\ClientWebSocketOptionsTests.cs(90,0): at System.Net.WebSockets.Client.Tests.ClientWebSocketO\r\n  ptionsTests.Proxy_SecureConnectThruProxy_Success(Uri server)\r\n           --- End of stack trace from previous location where exception was thrown ---\r\n     System.Net.WebSockets.Client.Tests.ClientWebSocketOptionsTests.Proxy_SecureConnectThruProxy_Success(server: wss://corefx-net.cloudapp.net/WebSocket/EchoWe\r\n  bSocket.ashx) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: Closed\r\n        Actual:   Aborted\r\n        Stack Trace:\r\n           s:\\GitHub\\corefx\\src\\System.Net.WebSockets.Client\\tests\\ClientWebSocketOptionsTests.cs(90,0): at System.Net.WebSockets.Client.Tests.ClientWebSocketO\r\n  ptionsTests.Proxy_SecureConnectThruProxy_Success(Uri server)\r\n           --- End of stack trace from previous location where exception was thrown ---\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOlDohaA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3MjgzNDg3Nw==",
                                           "createdAt":  "2018-03-13T22:06:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidsh",
                                           "body":  "cc: @dotnet/ncl ",
                                           "updatedAt":  "2018-03-13T22:06:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3NTA0MTUyOA==",
                                           "createdAt":  "2018-03-21T18:04:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidsh",
                                           "body":  "It seems that the behavior differs depending on which proxy is used. Using the test \u0027HappySockets\u0027 proxy server, we get a RST back after the close frame (which causes this test failure). Using Fiddler, we get a FIN.\r\n\r\nHowever, the test passes using .NET Framework and \u0027HappySockets\u0027 proxy server.\r\n\r\nNeed to investigate further to determine whether or not this is a test bug (proxy server shouldn\u0027t be sending back RST) or a difference between .NET Core and .NET Framework.",
                                           "updatedAt":  "2018-03-21T18:04:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3NzUwMDA5OA==",
                                           "createdAt":  "2020-01-23T04:36:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "@davidsh, there\u0027s still a test disabled against this issue:\r\nhttps://github.com/dotnet/runtime/blob/ccf6aedb63c37ea8e10e4f5b5d9d23a69bdd9489/src/libraries/System.Net.WebSockets.Client/tests/ClientWebSocketOptionsTests.cs#L65-L68",
                                           "updatedAt":  "2020-01-23T04:36:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6UOiFo",
                                           "createdAt":  "2024-11-19T21:58:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of our [issue cleanup automation](https://github.com/dotnet/runtime/blob/main/docs/issue-cleanup.md).\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-11-19T21:58:51Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "ClientWebSocket aborts on closes when going thru a proxy",
        "labels":  [
                       "bug",
                       "area-System.Net",
                       "disabled-test"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/25782",
        "createdAt":  "2018-04-05T18:24:49Z",
        "number":  25782,
        "author":  "caesar-chen",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-02-16T17:24:01Z",
        "body":  "Here are the issues in Uri with IPv6 address we may want to fix:\r\n\r\n1. **[Pending discussion]** `Uri.IdnHost` should include `[]` around IPv6 address.\r\n    * Currently it returns `::1234`, it should return `[::1234]`.\r\n2. [Originally done with PR dotnet/corefx#29829 but reverted with dotnet/corefx#30062]  `Uri.Host` LLA (Link-local address) IPv6 address doesn\u0027t contain `%number` part.\r\n    * Currently it returns `[fe80::e077:c9a3:eeba:b8e9]`, it should return `[fe80::e077:c9a3:eeba:b8e9%18]`.\r\n    * Note: `Uri.IdnHost` correctly contains the `%number` part.\r\n\r\nIf we choose to fix these problems, we can undo workarounds in dotnet/corefx#28740, dotnet/corefx#28578, dotnet/corefx#28849 and dotnet/corefx#28971.\r\n\r\n/cc: @dotnet/ncl ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOdCqF_A==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3OTEwMzQyMA==",
                                           "createdAt":  "2018-04-05T23:11:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "This issue is marked as future, but isn\u0027t there a bug here in SocketsHttpHandler we need to fix in 2.1? That we\u0027re incorrectly dropping the scope from a link-local address?",
                                           "updatedAt":  "2018-04-05T23:11:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3OTEwNTA0MQ==",
                                           "createdAt":  "2018-04-05T23:21:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "caesar-chen",
                                           "body":  "\u003e  but isn\u0027t there a bug here in SocketsHttpHandler we need to fix in 2.1? \r\n\r\nYes, we have dotnet/runtime#25726 opened for it, I will be working on it. Opened this issue to track future Uri work.",
                                           "updatedAt":  "2018-04-05T23:21:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3OTExNDExMw==",
                                           "createdAt":  "2018-04-06T00:20:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "Ah, ok.",
                                           "updatedAt":  "2018-04-06T00:20:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4MjUxNzIzMA==",
                                           "createdAt":  "2018-04-18T20:23:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MarcoRossignoli",
                                           "body":  "@caesar1995 one question LLA start with `fe:` or `fe80:` ?",
                                           "updatedAt":  "2018-04-18T20:23:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4MjU0NDE5NQ==",
                                           "createdAt":  "2018-04-18T22:05:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "caesar-chen",
                                           "body":  "IPv6 LLA starts with `fe80`. See [RFC 4291](https://tools.ietf.org/html/rfc4291#section-2.5.6):\r\n\r\n```\r\nLink-Local addresses have the following format:\r\n\r\n   |   10     |\r\n   |  bits    |         54 bits         |          64 bits           |\r\n   +----------+-------------------------+----------------------------+\r\n   |1111111010|           0             |       interface ID         |\r\n   +----------+-------------------------+----------------------------+\r\n```\r\n\r\nIPv6 notation will be like: FE80::/10",
                                           "updatedAt":  "2018-04-18T22:05:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4MjYzMTgyNw==",
                                           "createdAt":  "2018-04-19T07:01:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MarcoRossignoli",
                                           "body":  "\u003eCurrently it returns [fe::ee:b8e9], it should return [fe::ee:b8e9%18].\r\n\r\n@caesar1995 ok i ask this because in you sample for LLA on issue address start with `fe`.\r\n\r\nAfter this change i think we need also to update sample on docs https://msdn.microsoft.com/en-us/library/system.uri.dnssafehost(v=vs.110).aspx#Anchor_3, again porting on netfx?",
                                           "updatedAt":  "2018-04-19T07:38:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4MjgwMDc0Mw==",
                                           "createdAt":  "2018-04-19T16:35:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "caesar-chen",
                                           "body":  "\u003e ok i ask this because in you sample for LLA on issue address start with fe.\r\n\r\nOops, corrected in sample to avoid confusion. Thanks!\r\n\r\n\u003e After this change i think...\r\n\r\nThis is a proposal which need investigation (so don\u0027t start working on it yet). If we choose to accept it, then yes we need to do those following steps.",
                                           "updatedAt":  "2018-04-19T16:35:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4MzA3NTEzOA==",
                                           "createdAt":  "2018-04-20T12:05:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAViZWw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "caesar-chen",
                                                                               "createdAt":  "2018-04-20T17:12:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MarcoRossignoli",
                                           "body":  "@caesar1995 i did a pass through parsing code, let me know if i can try a PR(if this proposal success).",
                                           "updatedAt":  "2018-04-20T12:05:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4ODE3NzA3Mg==",
                                           "createdAt":  "2018-05-10T20:34:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAWZDcw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "karelz",
                                                                               "createdAt":  "2018-05-10T20:39:19Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "rmkerr",
                                           "body":  "Hey @MarcoRossignoli if you\u0027d like to take this issue in two segments I\u0027m confident that we would accept a fix to part 2 here, since that behavior is clearly a bug. Part 1 requires a little more discussion, so I think splitting the fix up would be best.",
                                           "updatedAt":  "2018-05-10T20:34:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4ODIxODg4NA==",
                                           "createdAt":  "2018-05-10T23:48:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAWZfeg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "rmkerr",
                                                                               "createdAt":  "2018-05-11T00:03:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "karelz",
                                                                               "createdAt":  "2018-05-11T00:10:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "MarcoRossignoli",
                                           "body":  "@rmkerr sure! I\u0027ll work on it! Thank\u0027s for consideration!",
                                           "updatedAt":  "2018-05-10T23:48:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4OTY2MDQ2MA==",
                                           "createdAt":  "2018-05-16T20:48:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MarcoRossignoli",
                                           "body":  "@rmkerr i\u0027m working on issue and when compile i get compile error \r\n\r\n`UriRelativeResolutionTest.cs(26,116): error CS0117: \u0027PlatformDetection\u0027 does not contain a definition for \u0027IsNetfx472OrNewer\u0027`\r\n\r\ni\u0027m able to go on if remove field, any idea?",
                                           "updatedAt":  "2018-05-16T20:48:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4OTY2MjEzNg==",
                                           "createdAt":  "2018-05-16T20:54:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAWpQUw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MarcoRossignoli",
                                                                               "createdAt":  "2018-05-16T21:00:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "caesar-chen",
                                           "body":  "Did you try to `clean \u0026\u0026 sync \u0026\u0026 build` the entire corefx project? That attribute is introduced recently.",
                                           "updatedAt":  "2018-05-16T20:54:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4OTY2MjI4NA==",
                                           "createdAt":  "2018-05-16T20:54:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAWpQTQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MarcoRossignoli",
                                                                               "createdAt":  "2018-05-16T20:59:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "rmkerr",
                                           "body":  "I would pull the latest version of the repo, then clean and build the whole project again. You can find more info on that here: [developer guide](https://github.com/dotnet/corefx/blob/master/Documentation/project-docs/developer-guide.md). You probably last built the test utilities before [this PR](https://github.com/dotnet/corefx/pull/29663/files) was merged, adding the property you mentioned.\r\n\r\n",
                                           "updatedAt":  "2018-05-16T20:54:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4OTc4MTk5OQ==",
                                           "createdAt":  "2018-05-17T08:08:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MarcoRossignoli",
                                           "body":  "@caesar1995 @rmkerr my fault...i work on more host, i was convinced to work on updated repo, it all ok!",
                                           "updatedAt":  "2018-05-17T08:08:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5MDI5OTc5Mg==",
                                           "createdAt":  "2018-05-18T18:52:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "cc @wfurt, this is also related: https://github.com/dotnet/corefx/issues/27529",
                                           "updatedAt":  "2018-05-18T18:52:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5MDM4NTI1NA==",
                                           "createdAt":  "2018-05-19T07:05:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MarcoRossignoli",
                                           "body":  "@caesar1995 we\u0027ve  merged fix to part 2 you could update issue description.",
                                           "updatedAt":  "2018-05-19T20:45:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5MDQxNzk3OQ==",
                                           "createdAt":  "2018-05-19T16:55:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAWxcSw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MarcoRossignoli",
                                                                               "createdAt":  "2018-05-19T17:51:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "karelz",
                                           "body":  "Thanks @MarcoRossignoli! Top post updated.",
                                           "updatedAt":  "2018-05-19T16:55:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5Mzk3MTg0MQ==",
                                           "createdAt":  "2018-06-01T18:35:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "This last change is now failing in Kestrel tests and we need to make sure we have a consistent story (https://github.com/aspnet/KestrelHttpServer/issues/2637). Note these tests don\u0027t use HttpClient directly, only System.Uri and Sockets.\r\n\r\nDo you expect the various http clients to send this scope id in the Host header? Walking the spec has an interesting history here.\r\n\r\nhttps://tools.ietf.org/html/rfc7230#section-5.4\r\nHost = uri-host [ \":\" port ] ; Section 2.7.1\r\nuri-host = \u003chost, see [RFC3986], Section 3.2.2\u003e\r\nhttps://tools.ietf.org/html/rfc3986#section-3.2.2\r\nhost = IP-literal / IPv4address / reg-name\r\nIP-literal = \"[\" ( IPv6address / IPvFuture  ) \"]\"\r\nIPv6address = {... long and messy, but without scope ids ...}\r\n   A host identified by an IPv6 literal address is represented inside\r\n   the square brackets without a preceding version flag.  The ABNF\r\n   provided here is a translation of the text definition of an IPv6\r\n   literal address provided in [RFC3513].  This syntax does not support\r\n   IPv6 scoped addressing zone identifiers.\r\n\r\nSo no, but...\r\n\r\nUpdated by https://tools.ietf.org/html/rfc6874#section-2\r\n      IP-literal = \"[\" ( IPv6address / IPv6addrz / IPvFuture  ) \"]\"\r\n      ZoneID = 1*( unreserved / pct-encoded )\r\n      IPv6addrz = IPv6address \"%25\" ZoneID\r\n\r\nSo yes, but then https://tools.ietf.org/html/rfc6874#section-4\r\n   An HTTP client, proxy, or other intermediary MUST remove any ZoneID\r\n   attached to an outgoing URI, as it has only local significance at the\r\n   sending host.\r\n\r\nThat looks like a pretty definitive No for putting them in Host headers.\r\n\r\nChrome, IE, and Edge do not accept scope Ids in the address bar so they won\u0027t send one. Curl.exe (windows) allows the scope but strips it from the Host. HttpClient currently does send a scope id in the Host and the request is rejected by Kestrel with a 400. That looks like a bug you\u0027ll need to address either in HttpClient or System.Uri.",
                                           "updatedAt":  "2018-06-01T18:41:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5Mzk3NDc5OQ==",
                                           "createdAt":  "2018-06-01T18:45:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidsh",
                                           "body":  "\u003eDo you expect the various http clients to send this scope id in the Host header?\r\n\r\nWhat does .NET Framework HttpWebRequest / HttpClient do?",
                                           "updatedAt":  "2018-06-01T18:45:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5Mzk3NjE4OA==",
                                           "createdAt":  "2018-06-01T18:50:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  ".NET 4.6.1 HttpClient strips the scope id from the Host header.",
                                           "updatedAt":  "2018-06-01T18:50:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5Mzk5Mzk2Mw==",
                                           "createdAt":  "2018-06-01T20:02:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "With this URI change getting the host without the scopeid is a bit obnoxious.\r\n```c#\r\ninternal static string GetHost(Uri requestUri)\r\n        {\r\n            var authority = requestUri.Authority;\r\n            if (requestUri.HostNameType == UriHostNameType.IPv6)\r\n            {\r\n                // Make sure there\u0027s no % scope id. https://github.com/aspnet/KestrelHttpServer/issues/2637\r\n                var address = IPAddress.Parse(requestUri.Host);\r\n                address = new IPAddress(address.GetAddressBytes()); // Drop scope Id.\r\n                authority = $\"[{address}]:{requestUri.Port.ToString(CultureInfo.InvariantCulture)}\";\r\n            }\r\n            return authority;\r\n        }\r\n```",
                                           "updatedAt":  "2021-10-22T10:47:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5Mzk5NjI1NQ==",
                                           "createdAt":  "2018-06-01T20:12:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidsh",
                                           "body":  "I think we may need to revert dotnet/corefx#29829 in the Master branch right away and reconsider how best to solve the overall problems.",
                                           "updatedAt":  "2018-06-01T20:12:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5NDAzMDQ1NQ==",
                                           "createdAt":  "2018-06-01T22:57:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rmkerr",
                                           "body":  "I don\u0027t know if we need to revert this immediately or not, but we should definitely discuss the approach. It seems like a case where what\u0027s best from a pure URI standpoint conflicts with what\u0027s best for the HTTP stack. I\u0027m inclined to say that the HTTP stack takes precedence, but I\u0027d like to hear what others think.",
                                           "updatedAt":  "2018-06-01T22:57:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5NDAzMTEwMg==",
                                           "createdAt":  "2018-06-01T23:02:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "What\u0027s best for Uri is what\u0027s best for it\u0027s consumers. What other consumers use Host, Authority, IdnHost, and what are their requirements?\r\nHttp can work around it if needed.",
                                           "updatedAt":  "2018-06-01T23:02:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5NDAzMzk3NQ==",
                                           "createdAt":  "2018-06-01T23:22:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidsh",
                                           "body":  "\u003e I\u0027m inclined to say that the HTTP stack takes precedence\r\n\r\nI tend to agree with this.  I think perhaps if we really want a Uri property to return the host portion with scope-ids we might need a new property to do it. Otherwise, we risk breaking more things.",
                                           "updatedAt":  "2018-06-01T23:22:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5NDExNDIyMw==",
                                           "createdAt":  "2018-06-02T20:16:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MarcoRossignoli",
                                           "body":  "\u003e I think perhaps if we really want a Uri property to return the host portion with scope-ids we might need a new property to do it\r\n\r\nThis could be the safest choice...even if i think it would be a \"strange\" property, may lead to confusion.  \r\n\r\nEDIT: \r\n\u003e Otherwise, we risk breaking more things.\r\n\r\nI mean you have a \"big picture\" if it\u0027s highly likely issues other than \"HttpClients\"  that\u0027s okay IMO.",
                                           "updatedAt":  "2018-06-04T07:13:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5NDQzMDY4NQ==",
                                           "createdAt":  "2018-06-04T17:15:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "Hmm, I just realized this changed the output of ToString as well. .NET ToString does not include the scope, but now core does.",
                                           "updatedAt":  "2018-06-04T17:15:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5NDQzMTg3OA==",
                                           "createdAt":  "2018-06-04T17:19:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidsh",
                                           "body":  "\u003eHmm, I just realized this changed the output of ToString as well. .NET ToString does not include the scope, but now core does.\r\n\r\nI don\u0027t think that\u0027s necessarily a bad thing.  The .OriginalString still has the scope-id.  In fact, we\u0027ve seen an interesting interop issue using UWP apps when System.Uri needs to get converted at the lower layers to WinRT Windows.Foundation.Uri.  These uri\u0027s with scope-id that are valid System.Uri are broken when Windows.Foundation.Uri tries to re-create them (using .OriginalString).  That is a WinRT bug tracking also in GitHub corefx.",
                                           "updatedAt":  "2018-06-04T17:19:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5NDQ0MzYxMw==",
                                           "createdAt":  "2018-06-04T17:57:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rmkerr",
                                           "body":  "Agreed -- ideally I think the scope ID should be included in ToString. It\u0027s a meaningful part of the URI, and by removing it we change the meaning. Obviously we do have to consider app compat though, so it is worth considering what use cases we might break.",
                                           "updatedAt":  "2018-06-04T17:57:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNzYxMzY1Mw==",
                                           "createdAt":  "2019-10-02T18:08:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: We may not be able to fix it at all, the goal is to decide in 5.0 timeframe.",
                                           "updatedAt":  "2019-10-02T18:08:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3ODU5NDk1MA==",
                                           "createdAt":  "2020-01-27T05:16:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "scalablecory",
                                           "body":  "Ran into this one today!\r\n\r\nCC @MihaZupan ",
                                           "updatedAt":  "2020-01-27T05:16:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3ODg2MDQ2OA==",
                                           "createdAt":  "2020-01-27T17:28:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "I was thinking about it more and I\u0027m not sure this is a problem other than surprise. According to documentation:\r\n\r\n\u003e The RFC 3490 compliant International Domain Name of the host, using Punycode as appropriate. This string, after being unescaped if necessary, is safe to use for DNS resolution.\r\n\r\nIf we put scopeID or \u0027[]` the value will no longer be safe to use for DNS IMHO and additional work would be needed by the caller to make it passable to NameResolution API. \r\n\r\nI\u0027m wondering what was the original intention for this property. \r\n",
                                           "updatedAt":  "2020-01-27T17:28:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DAhtF",
                                           "createdAt":  "2022-05-11T19:33:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODXE8Wg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MihaZupan",
                                                                               "createdAt":  "2024-02-16T17:19:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "wfurt",
                                           "body":  "I\u0027m wondering if we should just close this @stephentoub @MihaZupan \r\nWhile the existing behavior may be suboptimal, changing it is going to be major breaking change IMHO.\r\nI\u0027m not sure we would be ever brave enough to do it and this sits here long time with no use. \r\nIf feels like we would be better off to document current behavior and feel with it in SocketsHttpHandler. ",
                                           "updatedAt":  "2022-05-11T19:33:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50KoX8",
                                           "createdAt":  "2024-02-16T17:23:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "I doubt we\u0027ll be changing the behavior here given how long we\u0027ve been sitting with this behavior, but we should at least document it better.",
                                           "updatedAt":  "2024-02-16T17:23:52Z"
                                       }
                                   ],
                         "totalCount":  34
                     },
        "title":  "[Uri] Fix IPv6 address format",
        "labels":  [
                       "documentation",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/927",
        "createdAt":  "2018-04-09T08:20:12Z",
        "number":  927,
        "author":  "iSazonov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCyOvpQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SteveL-MSFT",
                                            "createdAt":  "2019-11-04T17:31:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rjmholt",
                                            "createdAt":  "2020-06-16T15:05:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vexx32",
                                            "createdAt":  "2020-06-20T13:16:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tgrandgent",
                                            "createdAt":  "2020-07-08T16:17:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "patrickfnielsen",
                                            "createdAt":  "2020-09-21T06:18:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jantari",
                                            "createdAt":  "2021-01-11T17:02:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "BorisWilhelms",
                                            "createdAt":  "2021-10-21T16:06:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "romfir",
                                            "createdAt":  "2023-08-28T19:11:14Z"
                                        }
                                    ],
                          "totalCount":  8
                      },
        "updatedAt":  "2023-03-14T19:11:56Z",
        "body":  "Related https://github.com/dotnet/corefx/issues/9350\r\n\r\nIn PowerShell repo we port [TestConnection cmdlet](https://github.com/PowerShell/PowerShell/blob/master/src/Microsoft.PowerShell.Commands.Management/commands/management/TestConnectionCommand.cs) and catch some problems in the ping API.\r\n\r\nThe problems documented in the [cmdlet tests](https://github.com/PowerShell/PowerShell/blob/master/test/powershell/Modules/Microsoft.PowerShell.Management/Test-Connection.Tests.ps1) - see comments and `if (!isWindows)` blocks.\r\n\r\nBelow short list:\r\n\r\n1. Dontfragment doesn\u0027t work on Unixes\r\nThis definitely should work on Linux and on [MacOs too](http://www.hackaapl.com/mazimum-transmission-unit-mtu-frame-size-in-os-x/)\r\n2. `PingReply.Buffer` is empty on Unix. Expected - a buffer we send.\r\n3. Ping unreachable host returns ErrorCode 6  (Handle is invalid) on Unix. Expected (as on Windows) - 11001 (Host not found).\r\n4. API always returns Options based on default PingOptions() constructor (Ttl=128, DontFragment = false).\r\nPingReply.Options.DontFragment:\r\n- on Windows always returns false. Expected - real value from ping request.\r\n- on Unix always returns null. Expected - real value from ping request (or false if not implemented).\r\n\r\nPingReply.Options.Ttl - always 128.  Expected - real value from ping request.\r\nPingReply.Options.Status - always Success (if we expect \u0027TtlExpired\u0027). Expected - real status.\r\n\r\n5. PingReply doesn\u0027t return ScopeId in IPAddress \r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOV4pdWA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5MDc4MDY3Ng==",
                                           "createdAt":  "2018-05-21T20:58:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Related to #17587",
                                           "updatedAt":  "2020-02-20T15:32:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5MDc4NDQwMg==",
                                           "createdAt":  "2018-05-21T21:12:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "We should be able to populate `PingReply.Options` when we use raw sockets:\r\n\r\nWe should be able to parse the TTL from IP header via raw sockets here:\r\nhttps://github.com/dotnet/corefx/blob/7ce4889d1de78d251d7e536ee174ff8640fa8583/src/System.Net.Ping/src/System/Net/NetworkInformation/Ping.Unix.cs#L107-L131\r\n\r\nIf we use ping utility, then we can\u0027t get to the information:\r\nhttps://github.com/dotnet/corefx/blob/7ce4889d1de78d251d7e536ee174ff8640fa8583/src/System.Net.Ping/src/System/Net/NetworkInformation/Ping.Unix.cs#L202",
                                           "updatedAt":  "2018-05-21T21:12:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5NDUxODQ2Nw==",
                                           "createdAt":  "2018-06-04T22:18:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAXdYFg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "iSazonov",
                                                                               "createdAt":  "2018-06-05T04:30:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tdinucci",
                                           "body":  "I\u0027d be happy to take this one but would prefer to wait until https://github.com/dotnet/corefx/pull/30000 is closed to avoid any conflicts.\r\n\r\nThere was some debate in dotnet/corefx#9350 about whether it would be better to introduce a breaking change and throw an exception if options are provided and the operation is executed as a non-root user - as opposed to having subtly different behavior depending on the user.  I just want to confirm that the answer in this debate is to just ignore the options when running as non-root?\r\n ",
                                           "updatedAt":  "2018-06-04T22:18:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5NDU4MDAzNA==",
                                           "createdAt":  "2018-06-05T04:44:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAXe9IQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tdinucci",
                                                                               "createdAt":  "2018-06-05T13:58:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "iSazonov",
                                           "body":  "@tdinucci I\u0027ll happy to get this! I left a comment about the breaking change in the related issue.",
                                           "updatedAt":  "2018-06-05T04:44:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5NDcxOTI2Nw==",
                                           "createdAt":  "2018-06-05T13:58:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tdinucci",
                                           "body":  "@iSazonov I\u0027m not quite clear, are you saying that you\u0027re working on this issue?\r\n\r\nI saw your comment on the other issue.  I just wasn\u0027t clear what the agreed approach was.",
                                           "updatedAt":  "2018-06-05T13:58:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5NDc3NzQxNw==",
                                           "createdAt":  "2018-06-05T16:37:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAXftkw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "tdinucci",
                                                                               "createdAt":  "2018-06-05T17:02:22Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "iSazonov",
                                           "body":  "@tdinucci I don\u0027t work on this. This fix is required for PowerShell Core to work properly on Unix.",
                                           "updatedAt":  "2018-06-05T16:37:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNDg2ODg4NA==",
                                           "createdAt":  "2019-08-26T13:52:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAvQIKA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "iSazonov",
                                                                               "createdAt":  "2019-08-26T14:08:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vexx32",
                                           "body":  "@tdinucci looks like dotnet/corefx#30000 is all merged and sorted. Any chance we can revisit this one at some point soonish? 🙂 ",
                                           "updatedAt":  "2019-08-26T13:52:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNTcwNzEzMw==",
                                           "createdAt":  "2019-08-28T11:42:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAvbbUQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vexx32",
                                                                               "createdAt":  "2019-08-28T12:29:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tdinucci",
                                           "body":  "@vexx32 - I didn\u0027t want to put a PR in for this back at the time because I didn\u0027t get any confirmation as to whether the PR would be considered or not.  I\u0027m just a contributor and my understanding of the general process with this project is to get approval before starting work and then submit a PR.\r\n\r\nEven if approval was given now for work to start I\u0027m afraid I don\u0027t have any spare time to dedicate to this in the short term.",
                                           "updatedAt":  "2019-08-28T11:42:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNTcyMzc5Mw==",
                                           "createdAt":  "2019-08-28T12:31:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vexx32",
                                           "body":  "Appreciate you taking the time to respond nonetheless! 😊 \r\n\r\nI\u0027d love to have this sorted out for .NET Core 3 GA, but unfortunately I have a very limited understanding of what really needs to happen to make all this work.",
                                           "updatedAt":  "2019-08-28T12:31:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNTc5MTE3Nw==",
                                           "createdAt":  "2019-08-28T15:14:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAvchzw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vexx32",
                                                                               "createdAt":  "2019-08-28T15:26:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "karelz",
                                           "body":  "Just to set expectations: 3.0 is locking down and the bar is high already. Change like this would not meet the bar.\r\nMaster branch is opened for 5.0 though.",
                                           "updatedAt":  "2019-08-28T15:14:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNTc5NjU3Ng==",
                                           "createdAt":  "2019-08-28T15:27:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vexx32",
                                           "body":  "Yeah, I figured as much. Appreciate the clarification, thanks! 😄 ",
                                           "updatedAt":  "2019-08-28T15:27:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0MTMwODMyNA==",
                                           "createdAt":  "2019-10-12T09:49:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "iSazonov",
                                           "body":  "Currently in PowerShell repo we are trying to refresh Test-Connection cmdlet and again are blocked by these bugs.\r\nIt will be great to fix them and backport to 3.1 LTS. Otherwise PowerShell Core will have broken cmdlet for a few more years.",
                                           "updatedAt":  "2019-10-12T09:49:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0MTMyNDQxMg==",
                                           "createdAt":  "2019-10-12T13:19:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@isazonov are there any of the list that are particularly affecting your customers? As @karelz says, our focus is 5.0 but if something is particularly impactful maybe we could do something more.",
                                           "updatedAt":  "2019-10-12T13:19:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0MTMyOTU4OQ==",
                                           "createdAt":  "2019-10-12T14:25:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "iSazonov",
                                           "body":  "First point about Dontfragment is critical for traceroute and MTU size detect.ion scenarios\r\nRest is about PingReply. It is important for all scenarios because we return PingReply to users and they could be very confusing and moreover - scripts could is not cross-platform stable.\r\n\r\nWindows PowerShell has Test-Connection cmdlet. PowerShell Core was released without the cmdlet and late we add new ported Test-Connection cmdlet based on .Net Core API. It turned out that the API has some issues... (I am afraid that there are other issues in the API because we did not full testing the API on all platforms).\r\n\r\nCurrent MSFT PowerShell team plan is to follow .Net Core and to release PowerShell 7.0 as LTS version based on .Net Core 3.1 LTS. I hope you see why I am raising this issue now.\r\n\r\nI think .Net Core could freely backport the API fixes to 3.1 because it is very difficult to break the API - it is already in the state.",
                                           "updatedAt":  "2019-10-12T14:39:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0MTMzMDQ5OA==",
                                           "createdAt":  "2019-10-12T14:36:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vexx32",
                                           "body":  "For traceroutes, the fact that the only available responses on Unix are `IPStatus.TimedOut` or `IPStatus.Success` makes them impossible. Under Windows, the `IPStatus.TtlExpired` status response gives information about the intermediate hop point (mainly the address and a few other bits of information) which is necessary in order to provide useful information to the user about the routers in the connection path.\r\n\r\nFor determining MTU size we have a similar issue; the Unix API throws an `AggregateException` \r\n in certain situations (seems like I see this _mainly_ under container scenarios like Docker) containing a response that indicates the packet is too large. Despite this, in WSL and in native Linux environments we can only get `IPStatus.TimedOut`; the exception itself is swallowed somewhere, so we\u0027re not reliably able to use even that. On Windows this is internally handled (I assume?) by .NET Core and instead we get a `PingReply` with `IPStatus.PacketTooBig`. \r\n\r\nAgreed on the DontFragment issue there; I\u0027m not sure what logic is used, but the `PingReply` returns back the `PingOptions` we input... except they are frequently not actually what was requested, so I don\u0027t know if options are being actively ignored (I haven\u0027t been able to find any documentation regarding this) or if the options simply aren\u0027t being returned correctly.\r\n\r\nAlso, I don\u0027t know if this is a bug or just how the ICMP spec actually works, but `IPStatus.TtlExpired` responses on Windows behave differently to normal pings: 1) their `RoundtripTime` values are _way_ out of whack compared to a normal ping (0-2ms for a router that typically takes ~50ms to ping properly), and 2) their buffer information is discarded. Either way, I don\u0027t see this documented in the API anywhere so I don\u0027t really know if it\u0027s a bug or by design.",
                                           "updatedAt":  "2019-10-12T14:39:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0MjAzMTU4Nw==",
                                           "createdAt":  "2019-10-15T04:32:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@karelz, thoughts?\r\n\r\nIt seems none of this is requiring new API, so (given timeframe) an option is to service anything required here into 3.1 (ie. 3.1.1)",
                                           "updatedAt":  "2019-10-15T04:32:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0MjAzMTc0Ng==",
                                           "createdAt":  "2019-10-15T04:33:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Setting milestone for now.",
                                           "updatedAt":  "2019-10-15T04:33:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0MjA3MDA4Nw==",
                                           "createdAt":  "2019-10-15T07:04:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "iSazonov",
                                           "body":  "@danmosemsft Many thanks! \r\nAlso there is a question about Windows behavior as @vexx32 mentioned.",
                                           "updatedAt":  "2019-10-15T07:04:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NDcwNDIzNQ==",
                                           "createdAt":  "2019-11-17T04:43:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vexx32",
                                           "body":  "@danmosemsft Tests in PowerShell Core seem to show that the `Ping.Send` and `SendAsync` APIs have regressed since the 3.0 release. `PingReply` objects do not seem to be returning the same PingOptions requested from the ping; it\u0027s looking like  all PingOptions are just ignored and then a default PingOptions is returned instead of giving the same options back in the reply that were asked for.\r\n\r\nRepro:\r\n\r\n```csharp\r\nvar sender = new Ping();\r\nvar options = new PingOptions(128, dontFragment: true);\r\nvar reply = sender.Send(\u00271.1.1.1\u0027, 1000, new byte[10], options);\r\nConsole.WriteLine(reply.Options.DontFragment.ToString()); // should be True but is False\r\n```\r\n\r\nSimilarly, the TTL value requested is also quietly ignored. Not sure how the new TTL is determined but I\u0027m seeing values in the mid-50s, usually around 55-56, it\u0027s not a set value for whatever reason.\r\n\r\n---\r\n\r\nFor clarity, this has always been the behaviour on Unix systems, this has never worked. This _did_ used to work on Windows, though, even under .NET Core 2.x and 3.0 releases.",
                                           "updatedAt":  "2019-11-17T04:47:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NDcwNjkyNw==",
                                           "createdAt":  "2019-11-17T05:26:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@vexx32 is anything other than.NET Core changed? As we made very few changes in networking in 3.1 as far as I remember. @wfurt ",
                                           "updatedAt":  "2019-11-17T05:26:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NDcwNzQ5Ng==",
                                           "createdAt":  "2019-11-17T05:35:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vexx32",
                                           "body":  "Nothing else that I can think would impact the Ping APIs themselves, unless something changed on an OS level that affected the API functionality. 😕 ",
                                           "updatedAt":  "2019-11-17T05:36:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NDcxNTI5OQ==",
                                           "createdAt":  "2019-11-17T05:54:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@vexx32 32 it possible for you to put a breakpoint on the OS call to compare the two cases? Maybe at https://github.com/dotnet/corefx/blob/d3911035f2ba3eb5c44310342cc1d654e42aa316/src/System.Net.Ping/src/System/Net/NetworkInformation/Ping.Windows.cs#L172",
                                           "updatedAt":  "2019-11-17T05:54:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NDc1NDQ1NQ==",
                                           "createdAt":  "2019-11-17T15:07:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA1OS4g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "iSazonov",
                                                                               "createdAt":  "2019-11-17T18:14:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vexx32",
                                           "body":  "I\u0027ll have to see if I can get this project to build for me. I\u0027ve taken several stabs at it, but it always comes up short, giving me errors about MSBuild or Arcade, and no amount of finagling has thus far let me actually build coreFX as yet. 😅 \r\n\r\nI\u0027ll have to see about giving it another go, I suppose 🙂 ",
                                           "updatedAt":  "2019-11-17T15:07:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NDc1OTk5Ng==",
                                           "createdAt":  "2019-11-17T16:00:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "It should not be necessary to build it in order to set a breakpoint and inspect the parameters. The symbols should be on the public symbol server. If not, the Windows symbols are and those will work for the native call.",
                                           "updatedAt":  "2019-11-17T16:00:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NDc3NzMyOQ==",
                                           "createdAt":  "2019-11-17T19:22:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA1Oo1g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "vexx32",
                                                                               "createdAt":  "2019-11-17T23:01:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "wfurt",
                                           "body":  "I can take a look next week. It should be easy enough to run fragment of the code above on windows and check actual packet going out as well as reply coming in. ",
                                           "updatedAt":  "2019-11-17T19:22:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MDQ5OTMyNA==",
                                           "createdAt":  "2020-06-27T05:43:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCgZIQA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ibejoeb",
                                                                               "createdAt":  "2022-06-06T15:09:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vexx32",
                                           "body":  "Do we have any idea when this will get sorted?",
                                           "updatedAt":  "2020-06-27T05:43:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MDUwMDI3Mg==",
                                           "createdAt":  "2020-06-27T05:50:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC30qDg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vexx32",
                                                                               "createdAt":  "2020-06-27T05:54:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "fMichaleczek",
                                                                               "createdAt":  "2020-07-01T15:11:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tgrandgent",
                                                                               "createdAt":  "2020-07-08T16:17:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "polnisenblat",
                                                                               "createdAt":  "2020-07-22T08:15:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "patrickfnielsen",
                                                                               "createdAt":  "2020-09-21T06:18:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xoozoo",
                                                                               "createdAt":  "2020-12-28T20:58:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jantari",
                                                                               "createdAt":  "2021-01-11T17:02:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "BorisWilhelms",
                                                                               "createdAt":  "2021-10-21T16:00:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ibejoeb",
                                                                               "createdAt":  "2022-06-06T15:08:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "doctordns",
                                                                               "createdAt":  "2023-03-14T19:11:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  10
                                                         },
                                           "author":  "iSazonov",
                                           "body":  "It is very amazing that the API is broken on Unix-s for years. If no plans exist to fix the API in 5.0/6.0 please indicates this and we will use an alternative library in PowerShell that is highly undesirable and will lead to inevitable breaking changes in the future.\r\n",
                                           "updatedAt":  "2020-06-27T05:50:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EZlGu",
                                           "createdAt":  "2022-06-06T15:09:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ibejoeb",
                                           "body":  "Coming up on 2 years since the last update, and this still appears to be broken in .NET 6. Is this just a WNF?",
                                           "updatedAt":  "2022-06-06T15:09:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EaSZa",
                                           "createdAt":  "2022-06-06T18:15:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCgruNQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "iSazonov",
                                                                               "createdAt":  "2022-06-07T03:48:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tgrandgent",
                                                                               "createdAt":  "2022-06-07T21:15:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "vexx32",
                                           "body":  "It definitely looks like this won\u0027t have sufficient priority to actually get fixed, judging by this issue at least. I understand there are probably other big ticket items to deal with, but having -some- amount of communication on this would be very much appreciated.",
                                           "updatedAt":  "2022-06-06T18:15:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Xil1Y",
                                           "createdAt":  "2023-03-14T19:11:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "doctordns",
                                           "body":  "Any news on a fix for this API?\r\n",
                                           "updatedAt":  "2023-03-14T19:11:55Z"
                                       }
                                   ],
                         "totalCount":  30
                     },
        "title":  "[Ping] Unix - some problems in ping API",
        "labels":  [
                       "bug",
                       "area-System.Net",
                       "tenet-compatibility",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/27399",
        "createdAt":  "2018-09-14T18:50:29Z",
        "number":  27399,
        "author":  "karelz",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCmjbQQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fredeil",
                                            "createdAt":  "2018-09-17T18:37:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "experdot",
                                            "createdAt":  "2019-07-10T07:42:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "agsimmons",
                                            "createdAt":  "2022-07-13T18:47:16Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2023-11-16T19:25:38Z",
        "body":  "Based on .NET Framework bug report: https://developercommunity.visualstudio.com/content/problem/89895/uri-constructor-not-encode-character-after-net-45.html\r\nReproduced on .NET Core 2.1 (and .NET Framework 4.7.2 which is out of scope here - just for completeness)\r\n\r\n```c#\r\nstatic void Main()\r\n{\r\n    Console.WriteLine(new Uri(@\"C:\\##\\%20\").AbsoluteUri); // Prints: file:///C:/%23%23/%2520\r\n    Console.WriteLine(new Uri(@\"C:\\Ã\\%20\").AbsoluteUri);  // Prints: file:///C:/%C3%83/%20\r\n\r\n    // Works fine for other sequences, e.g. %23\r\n    Console.WriteLine(new Uri(@\"C:\\Ã\\%23\").AbsoluteUri);  // Prints: file:///C:/%C3%83/%2523\r\n    // It is consistent for http URIs:\r\n    Console.WriteLine(new Uri(@\"http://my.com/  /%20\").AbsoluteUri); // Prints: http://my.com/%20%20/%20\r\n    Console.WriteLine(new Uri(@\"http://my.com/Ã/%20\").AbsoluteUri);  // Prints: http://my.com/%C3%83/%20\r\n}\r\n```\r\n\r\nNote that treating of %20 is **inconsistent** in the first 2 URIs - first one gets % encoded (%2520), second one gets % kept as is (%20). The difference seems to be just usage of multi-byte Unicode char in 2nd case.\r\nAs the additional 3 cases above show, http URIs are fine and so are file URIs with other sequences like %23.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHObDFdiw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyMTQ1NjA0OA==",
                                           "createdAt":  "2018-09-14T19:08:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rmkerr",
                                           "body":  "I think that this should be a pretty simple fix, though like all URI changes it will require some extra testing. It can likely be tracked down by looking for references to the URI reserved character set in the implicit file path parsing section. It is likely that in some case we are checking for reserved characters, but do not consider an encoded space \"%20\".",
                                           "updatedAt":  "2018-09-14T19:08:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyMTgzMDA3Mg==",
                                           "createdAt":  "2018-09-16T20:43:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAcKAiQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "karelz",
                                                                               "createdAt":  "2018-09-17T16:35:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "fredeil",
                                           "body":  "Would like to take this ☝️ ",
                                           "updatedAt":  "2018-09-16T20:43:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyMjA3OTkyNA==",
                                           "createdAt":  "2018-09-17T16:21:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAcKAhQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "karelz",
                                                                               "createdAt":  "2018-09-17T16:35:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "rmkerr",
                                           "body":  "Awesome 😄\r\n\r\nI\u0027ll assign you the issue. Feel free to reach out if you have any questions.",
                                           "updatedAt":  "2018-09-17T16:21:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyMjEyNDA1Mw==",
                                           "createdAt":  "2018-09-17T18:37:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fredeil",
                                           "body":  "How would you lay out the Unit tests for this @rmkerr?\r\nSeems like they should be located in `UriEscapingTest.cs` within the Functional tests",
                                           "updatedAt":  "2018-09-17T18:37:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyMjEyNzgwOA==",
                                           "createdAt":  "2018-09-17T18:48:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAcLFkw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "fredeil",
                                                                               "createdAt":  "2018-09-17T22:04:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "rmkerr",
                                           "body":  "`UriEscapingTests.cs` looks like an appropriate location. I would add the tests to the file URI escaping section, and would try to stay consistent with the existing tests there. https://github.com/dotnet/corefx/blob/99211937b4f1735b7912f0a064b91ba60c8e9ca9/src/System.Private.Uri/tests/FunctionalTests/UriEscapingTest.cs#L443-L445",
                                           "updatedAt":  "2018-09-17T18:48:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyMzQyNTQzNw==",
                                           "createdAt":  "2018-09-21T06:16:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fredeil",
                                           "body":  "Seems like the UriHelper is trying to escape \"%\" characters, see https://github.com/dotnet/corefx/blob/99211937b4f1735b7912f0a064b91ba60c8e9ca9/src/System.Private.Uri/src/System/UriHelper.cs#L183\r\n\r\nWhen changing this test to `else if (ch == \u0027%\u0027)` the result of `Uri(@\"C:\\##\\%20\").AbsoluteUri` is `file:///C:/%23%23/%20`.\r\n\r\nTwo Unit tests fails with this change, \r\n`System.PrivateUri.Tests.IriRelativeFileResolutionTest.IriRelativeResolution_CompareImplcitAndExplicitFileWithUnicodeAndReservedCharIriOn_AllPropertiesTheSame` \r\n\r\n`System.PrivateUri.Tests.IriRelativeFileResolutionTest.IriRelativeResolution_CompareImplcitAndExplicitFileWithReservedChar_AllPropertiesTheSame`\r\n\r\nIf you have any tips or hints @rmkerr it would be much appreciated 👍 ",
                                           "updatedAt":  "2018-09-21T10:14:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyMzYxMTIxMA==",
                                           "createdAt":  "2018-09-21T17:20:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAd4gKw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "fredeil",
                                                                               "createdAt":  "2018-10-24T10:43:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "rmkerr",
                                           "body":  "Those tests are verifying the behavior of explicit (starting with \"file://\") and implicit (starting with a drive name, ie \"C:\\\"). They\u0027re encoding the same path explicitly and implicitly, then testing each property to see if it matches between the two. \r\n\r\nInterestingly, the test actually expects some properties to be different! I think it\u0027s worth manually checking the failed test cases to see what changed. It\u0027s possible that those tests are encoding some undesirable behavior that we actually do want to change. On the other hand, it may be that this change has unexpected side effects, and in that case we may not be able to make a fix for compat reasons.",
                                           "updatedAt":  "2018-09-21T17:20:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1MzgzNDU1NQ==",
                                           "createdAt":  "2019-01-13T14:31:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fredeil",
                                           "body":  "What should be the expected output here @karelz?\r\n\r\n```csharp\r\nConsole.WriteLine(new Uri(@\"C:\\##\\%20\").AbsoluteUri); // Prints: file:///C:/%23%23/%2520\r\nConsole.WriteLine(new Uri(@\"C:\\Ã\\%20\").AbsoluteUri);  // Prints: file:///C:/%C3%83/%20\r\n```\r\n\r\nShould both of them produce `file://C:/.../%20`, are Dos file paths supposed to be double encoded and not http/urls? ",
                                           "updatedAt":  "2019-01-13T15:47:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1Mzg0MjkzNA==",
                                           "createdAt":  "2019-01-13T16:17:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Both of them should produce `%2520` at the end IMO\r\nBut I let @rmkerr to make final judgement - he\u0027s the expert on Uris ;)",
                                           "updatedAt":  "2019-01-13T16:18:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNzIzMjkzOA==",
                                           "createdAt":  "2019-10-01T21:12:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@fredeil do you have any update / energy to move it forward? (I unassigned you for now)",
                                           "updatedAt":  "2019-10-01T21:12:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNzMzODY1Nw==",
                                           "createdAt":  "2019-10-02T05:12:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAx2OUg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "karelz",
                                                                               "createdAt":  "2019-10-02T16:41:55Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "fredeil",
                                           "body":  "Hi @karelz! I did try to solve this a few times.\r\n\r\nThe findings was a bit odd, often the results would print out just fine when debugging the code (walking through literally every step) and when running it without a debugger it would yield the wrong results.\r\n\r\nWhenever I found a solution that produced the right results on every run for this particular problem something else would break.\r\n\r\nI would still really like to solve this but I got stuck. So if you have any tips to offer me it would be greatly appreciated!\r\n\r\nBtw loved your talk on NDC Oslo 👍 ",
                                           "updatedAt":  "2019-10-02T05:12:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNzU4Nzc0Ng==",
                                           "createdAt":  "2019-10-02T17:03:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Glad you liked my talk :)\r\nSorry that the issue caused you such troubles, we will have someone taking a look hopefully sooner. Thanks!",
                                           "updatedAt":  "2019-10-02T17:03:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzOTYxOTM4Nw==",
                                           "createdAt":  "2019-10-08T17:29:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAyTnSg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "fredeil",
                                                                               "createdAt":  "2019-10-09T08:10:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "karelz",
                                           "body":  "We had troubles to reproduce the same symptoms. @fredeil can you please ping me directly on gitter, Twitter, or via email? (see my GH profile for contacts) Thanks!",
                                           "updatedAt":  "2019-10-08T17:29:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0MzM4MzUxMA==",
                                           "createdAt":  "2019-10-17T22:13:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAzA_XQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ManickaP",
                                                                               "createdAt":  "2019-10-18T08:26:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "karelz",
                                           "body":  "To wrap up, @fredeil confirmed offline that he cannot reproduce the problem anymore. cc @ManickaP ",
                                           "updatedAt":  "2019-10-17T22:13:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5sMV2L",
                                           "createdAt":  "2023-11-16T19:25:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agr",
                                           "body":  "The issue described in https://github.com/dotnet/runtime/issues/23738 is still around in .NET 8",
                                           "updatedAt":  "2023-11-16T19:25:37Z"
                                       }
                                   ],
                         "totalCount":  15
                     },
        "title":  "[Uri] Inconsistent treatment of %20 in file Uri with/without unicode chars",
        "labels":  [
                       "bug",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/27622",
        "createdAt":  "2018-10-12T22:51:49Z",
        "number":  27622,
        "author":  "weshaggard",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-18T16:46:03Z",
        "body":  "https://mc.dot.net/#/user/weshaggard/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/fdfc526a83091617be7978de875969f48d2666bf/workItem/System.Net.NameResolution.Pal.Tests/analysis/xunit/System.Net.NameResolution.PalTests.NameResolutionPalTests~2FTryGetAddrInfo_HostName\r\n\r\n```\r\nMessage :\r\nAssert.Equal() Failure\r\nExpected: Success\r\nActual:   TryAgain\r\nStack Trace :\r\n   at System.Net.NameResolution.PalTests.NameResolutionPalTests.TryGetAddrInfo_HostName() in /mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Release+AGroup_arm64+TestOuter_false_prtest/src/System.Net.NameResolution/tests/PalTests/NameResolutionPalTests.cs:line 54\r\n```\r\n\r\n\r\nhttps://mc.dot.net/#/user/weshaggard/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/fdfc526a83091617be7978de875969f48d2666bf/workItem/System.Net.NameResolution.Pal.Tests/analysis/xunit/System.Net.NameResolution.PalTests.NameResolutionPalTests~2FTryGetAddrInfo_HostName_TryGetNameInfo\r\n\r\n\r\n```\r\nMessage :\r\nAssert.Equal() Failure\r\nExpected: Success\r\nActual:   TryAgain\r\nStack Trace :\r\n   at System.Net.NameResolution.PalTests.NameResolutionPalTests.TryGetAddrInfo_HostName_TryGetNameInfo() in /mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Release+AGroup_arm64+TestOuter_false_prtest/src/System.Net.NameResolution/tests/PalTests/NameResolutionPalTests.cs:line 112\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOHjMNMA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzNDA5MTI4MQ==",
                                           "createdAt":  "2018-10-29T21:40:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@karelz broke CI again\r\nhttps://mc.dot.net/#/user/danmosemsft/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/5651b5c2b7134c8ab662c5594b10f86db7f3cb9c\r\n\r\nCan we please make it outer loop or disable for ARM until someone has time to robustify it?",
                                           "updatedAt":  "2018-10-29T21:40:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzNDEwMDIwMw==",
                                           "createdAt":  "2018-10-29T22:12:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@wfurt @rmkerr how often does it fail?\r\n@wfurt is in process to enable us debug test failures ...",
                                           "updatedAt":  "2018-10-29T22:12:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzNDExMjU0OQ==",
                                           "createdAt":  "2018-10-29T23:02:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rmkerr",
                                           "body":  "It doesn\u0027t appear to be failing at all in the daily runs, but it is failing regularly on PRs. It\u0027s failing ten to fifteen times a day, so we should fix it or move it to outerloop ASAP. ",
                                           "updatedAt":  "2018-10-29T23:02:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzNDQxNDAzNA==",
                                           "createdAt":  "2018-10-30T18:18:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "note that OSX has similar issues. For one, when OS returns EAGAIN do not retry. \r\nBut I have seen cases when OS simply returns \"host not found\".",
                                           "updatedAt":  "2018-10-30T18:18:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzNTQ3Mjc4OQ==",
                                           "createdAt":  "2018-11-02T18:43:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Failing PR again\r\nhttps://mc.dot.net/#/user/dotnet-maestro-bot/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/22c651c43edc1bda66ff93535eef073530f6b941/workItem/System.Net.NameResolution.Pal.Tests\r\n\r\n@rmkerr can you please \"move it to outerloop ASAP.\" 😺 ",
                                           "updatedAt":  "2018-11-02T18:43:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzNTQ5NzIyMw==",
                                           "createdAt":  "2018-11-02T20:20:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rmkerr",
                                           "body":  "Yep, I\u0027ll do that now.",
                                           "updatedAt":  "2018-11-02T20:20:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2MDQ2MTcwNg==",
                                           "createdAt":  "2019-02-04T23:59:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@wfurt we re-enabled these tests on ARM in https://github.com/dotnet/corefx/pull/34962, unfortunately this and another failed again there.\r\n\r\nhttps://mc.dot.net/#/user/dotnet-bot/pr~2Fdotnet~2Fcorefx~2Frefs~2Fpull~2F35056~2Fmerge/test~2Ffunctional~2Fcli~2F/20190204.11/workItem/System.Net.NameResolution.Pal.Tests\r\n\r\n\r\n```\r\nUbuntu.1604.Arm64.Open-arm64-Release\r\nGet Repro environment\r\nUnhandled Exception of Type Xunit.Sdk.EqualException\r\nMessage :\r\nAssert.Equal() Failure\r\nExpected: Success\r\nActual:   TryAgain\r\nStack Trace :\r\n   at System.Net.NameResolution.PalTests.NameResolutionPalTests.TryGetAddrInfo_HostName_TryGetNameInfo() in /__w/1/s/src/System.Net.NameResolution/tests/PalTests/NameResolutionPalTests.cs:line 132\r\n```\r\n\r\nsame for `TryGetAddrInfo_HostName`",
                                           "updatedAt":  "2019-02-04T23:59:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2MDQ2MzA5NQ==",
                                           "createdAt":  "2019-02-05T00:05:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "yes, I know. I\u0027ve been trying to work out with @ulisesh to make some infrastructure changes. I was hoping we can get it done quickly to avoid another disable/enable cycle.\r\n(see notes in dotnet/corefx#34934) \r\nIf too noisy, I can disable them again and retry to enable them later.  ",
                                           "updatedAt":  "2019-02-05T00:05:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2MDQ2NTA5NQ==",
                                           "createdAt":  "2019-02-05T00:15:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Is it possible to make them outer loop so they don\u0027t break CI jobs? Unless you have a reason for them to be inner loop. You can still request outer loop in CI for testing, of course...",
                                           "updatedAt":  "2019-02-05T00:15:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2MDc3NjQ0MQ==",
                                           "createdAt":  "2019-02-05T19:43:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BruceForstall",
                                           "body":  "Another failure:\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_ubuntu16.04_corefx_jitstress1_tst/113/consoleFull\r\n",
                                           "updatedAt":  "2019-02-05T19:43:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2MjAxMjIyNQ==",
                                           "createdAt":  "2019-02-09T04:22:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "Changes to container configuration was made. Last failure was at 2019-02-06 04:18:16 (~2days ago)\r\nkeeping fingers crossed. ",
                                           "updatedAt":  "2019-02-09T04:22:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2MjkxMDIzOA==",
                                           "createdAt":  "2019-02-12T19:55:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "After 5 day passes it failed again today for pr/dotnet/corefx/refs/pull/34931/merge\r\n\r\nAre we sure we updated all machines @ulisesh ?\r\nThis is Ubuntu.1604.Arm64.Open vs Ubuntu.1604.Arm64 used for official builds. ",
                                           "updatedAt":  "2019-02-12T19:55:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2Mzc3ODE2OQ==",
                                           "createdAt":  "2019-02-14T20:18:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ulisesh",
                                           "body":  "Right now, Ubuntu.1604.Arm64.Open doesn\u0027t run on containers, it runs on Centriq servers. We will move Ubuntu.1604.Arm64.Open to run on containers early next week",
                                           "updatedAt":  "2019-02-14T20:18:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3NzM5NjkxNA==",
                                           "createdAt":  "2019-03-28T00:28:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "I did not see failure for almost month after infrastructure changes. Closing for now.",
                                           "updatedAt":  "2019-03-28T00:28:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwMzI4Nzk1MQ==",
                                           "createdAt":  "2019-06-18T19:58:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e I did not see failure for almost month after infrastructure changes. Closing for now.\r\n\r\nThat\u0027s because the test is disabled.",
                                           "updatedAt":  "2019-06-18T19:58:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwNjY2MjE5Mg==",
                                           "createdAt":  "2019-06-28T09:05:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Seems like test issue, no need to have it in 3.0. cc @wfurt",
                                           "updatedAt":  "2019-06-28T09:05:12Z"
                                       }
                                   ],
                         "totalCount":  16
                     },
        "title":  "NameResolutionPalTest failing intermittently on Linux Arm64",
        "labels":  [
                       "arch-arm64",
                       "area-System.Net",
                       "disabled-test",
                       "os-linux",
                       "test-bug",
                       "test-run-core"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/29248",
        "createdAt":  "2019-04-12T17:34:01Z",
        "number":  29248,
        "author":  "xforever1313",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCjpg4A==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kennedy",
                                            "createdAt":  "2019-10-03T18:53:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dcuomo",
                                            "createdAt":  "2021-03-02T22:00:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GhostKilllaX",
                                            "createdAt":  "2022-06-24T20:13:52Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2025-01-29T19:01:40Z",
        "body":  "Summary\r\n========\r\n\r\nOn the Windows command line, while sending a ping, one is able to specify the \"source address\" via the \u0027-S\u0027 parameter, as show in the example below:\r\n\r\n```\r\nPS C:\\\u003e ping 192.168.1.2 -S 192.168.3.2 -w 120000\r\n\r\nPinging 192.168.1.2 from 192.168.3.2 with 32 bytes of data:\r\nReply from 192.168.1.2: bytes=32 time=7056ms TTL=126\r\nReply from 192.168.1.2: bytes=32 time=7855ms TTL=126\r\nReply from 192.168.1.2: bytes=32 time=7753ms TTL=126\r\nReply from 192.168.1.2: bytes=32 time=7866ms TTL=126\r\n\r\nPing statistics for 192.168.1.2:\r\n    Packets: Sent = 4, Received = 4, Lost = 0 (0% loss),\r\nApproximate round trip times in milli-seconds:\r\n    Minimum = 7056ms, Maximum = 7866ms, Average = 7632ms\r\n```\r\n\r\nOn Linux, it appears as it behaves similarly, where the command is ```ping -S sourceIp destIp```\r\n\r\nThe source address allows one to specify which network interface to send the ping out of.\r\nThis is incredilby useful when doing network testing, where there are multiple networks attached to a test server.\r\n\r\nHowever, C#\u0027s Ping class doesn\u0027t seem to be able to set a source address.\r\nThis means that if we are on Windows, for example, one needs to call the [IcmpSendEcho2Ex](https://docs.microsoft.com/en-us/windows/win32/api/icmpapi/nf-icmpapi-icmpsendecho2ex)\r\nfunction in iphlpapi.dll and provide it the source address that way.\r\nIts not the end-of-the-world to do that, but it would be nice if one could configure the source address in the C# layer so one doesn\u0027t have to invoke native methods.\r\n\r\nProposed Api Changes\r\n========\r\n\r\nSpecifying the Source Address\r\n-----\r\nThere are 2 possible ways to get the Source address down to the function that actually performs the Ping, either add more functions to [Ping.cs](https://github.com/dotnet/corefx/blob/master/src/System.Net.Ping/src/System/Net/NetworkInformation/Ping.cs) that have source IPAddress as\r\na parameter, or tack it on to [PingOptions](https://github.com/dotnet/corefx/blob/master/src/System.Net.Ping/src/System/Net/NetworkInformation/PingOptions.cs).\r\n\r\nOf the two, I feel like adding another property to PingOptions is probably the better of the two.  For one, if more functions were added, that\u0027s 8 new functions to write to get all of the different flavors to include a source address (that\u0027s not counting the async ones). Second, PingOptions is already passed down deep into the Ping classes, having to *also* pass a source address around that deep sounds like it will make a mess of the existing API.\r\n\r\nSo with that, PingOptions would get a new Property that is of type [IpAddress](https://docs.microsoft.com/en-us/dotnet/api/system.net.ipaddress?view=netcore-3.0).  By default, it could be set to null.  If it is null, it means the user does NOT want to specify a source address, while if it IS specified, it means the user would like to specify one.\r\n\r\nChanges to the PingOptions class could be as simple adding one line of code:\r\n```C#\r\npublic IpAddress SourceAddress { get; set; }\r\n```\r\n\r\nand the usage can be:\r\n\r\n```C#\r\nPingOptions options = new PingOptions{ SourceAddress = IpAddress.Parse( \"192.168.1.1\" ) };\r\n```\r\n\r\nOpen Questions:\r\n * There are two constructors in PingOptions right now. There is a default one, and one that specifies both the TTL and DontFragment.  Does it make sense to add a third one that specifies all 3, or don\u0027t bother with adding one, and to set the SourceAddress at construction, use the example specified above?\r\n\r\nWindows Changes\r\n-----\r\nRight now, [Ping.Windows.cs](https://github.com/dotnet/corefx/blob/master/src/System.Net.Ping/src/System/Net/NetworkInformation/Ping.Windows.cs) uses\r\n[IcmpSendEcho2](https://docs.microsoft.com/en-us/windows/win32/api/icmpapi/nf-icmpapi-icmpsendecho2) to send an Ipv4 ping.  However, IcmpSendEcho2 does not\r\nallow one to specify the source IP Address.  A similar function, [IcmpSendEcho2Ex](https://docs.microsoft.com/en-us/windows/win32/api/icmpapi/nf-icmpapi-icmpsendecho2ex),\r\ndoes, however.  As far as I can tell, the functions perform the same thing, except IcmpSendEcho2Ex allows one to specify a source address.\r\n\r\nThe Windows implementation would have to call the different function if the source address is not null from PingOptions.  If it is null, call the old function.\r\n\r\n```C#\r\n            if (!_ipv6)\r\n            {\r\n                if(pingOptions.SourceAddress == null)\r\n                {\r\n                    return (int)Interop.IpHlpApi.IcmpSendEcho2(\r\n                        _handlePingV4,\r\n                        GetWaitHandle(isAsync),\r\n                        IntPtr.Zero,\r\n                        IntPtr.Zero,\r\n#pragma warning disable CS0618 // Address is marked obsolete\r\n                        (uint)address.Address,\r\n#pragma warning restore CS0618\r\n                        _requestBuffer,\r\n                        (ushort)buffer.Length,\r\n                        ref ipOptions,\r\n                        _replyBuffer,\r\n                        MaxUdpPacket,\r\n                        (uint)timeout);\r\n                }\r\n                else\r\n                {\r\n                    return (int)Interop.IpHlpApi.IcmpSendEcho2Ex(\r\n                        _handlePingV4,\r\n                        GetWaitHandle(isAsync),\r\n                        IntPtr.Zero,\r\n                        IntPtr.Zero,\r\n#pragma warning disable CS0618 // Address is marked obsolete\r\n                        (uint)sourceAddress.Address,\r\n                        (uint)address.Address,\r\n#pragma warning restore CS0618\r\n                        _requestBuffer,\r\n                        (ushort)buffer.Length,\r\n                        ref ipOptions,\r\n                        _replyBuffer,\r\n                        MaxUdpPacket,\r\n                        (uint)timeout);\r\n                }\r\n            }\r\n```\r\n\r\nFor IPv6, it looks like Ping uses the native function [Icmp6SendEcho2](https://docs.microsoft.com/en-us/windows/win32/api/icmpapi/nf-icmpapi-icmp6sendecho2).\r\nAt the moment, the source address is just a byte array of size 28.  If the source IP address is null, this can stay as is, but if the source address is specified, pass that in.  An example could be:\r\n\r\n```C#\r\nIPEndPoint ep = new IPEndPoint(address, 0);\r\nInternals.SocketAddress remoteAddr = IPEndPointExtensions.Serialize(ep);\r\n\r\n// Start New Code\r\nbyte[] sourceAddrBuffer;\r\nif (options.SourceAddress == null)\r\n{\r\n    sourceAddrBuffer = new byte[28];\r\n}\r\nelse\r\n{\r\n    IPEndPoint sourceEp = new IPEndPoint(options.SourceAddress, 0);\r\n    Internals.SocketAddress sourceAddr = IPEndPointExtensions.Serialize(sourceEp);\r\n    sourceAddrBuffer = sourceAddr.Buffer;\r\n}\r\n// End New Code\r\n\r\nreturn (int)Interop.IpHlpApi.Icmp6SendEcho2(\r\n    _handlePingV6,\r\n    GetWaitHandle(isAsync),\r\n    IntPtr.Zero,\r\n    IntPtr.Zero,\r\n    sourceAddrBuffer,\r\n    remoteAddr.Buffer,\r\n    _requestBuffer,\r\n    (ushort)buffer.Length,\r\n    ref ipOptions,\r\n    _replyBuffer,\r\n    MaxUdpPacket,\r\n    (uint)timeout);\r\n```\r\n\r\nWindows Uap Changes\r\n-----\r\nIt doesn\u0027t look like anything would have to change in [Ping.Windows.Uap.cs](https://github.com/dotnet/corefx/blob/master/src/System.Net.Ping/src/System/Net/NetworkInformation/Ping.Windows.Uap.cs) since SendPingCore just throws a PlatformNotSupportedException.\r\n\r\nUnix Changes\r\n-----\r\nInside of [Ping.Unix.cs](https://github.com/dotnet/corefx/blob/master/src/System.Net.Ping/src/System/Net/NetworkInformation/Ping.Unix.cs), it looks like if the process is running as root (or the user has permission), a raw socket is used, otherwise the \"ping\" command is called as a subprocess.\r\n\r\nWhen ping is being called from the command line, \"-S sourceAddress\" needs to be added to the arguments.  [UnixCommandLinePing.ConstructCommandLine](https://github.com/dotnet/corefx/blob/ecad65740b41b1502188ac6b412ade53fb54ba3e/src/Common/src/System/Net/NetworkInformation/UnixCommandLinePing.cs#L73) would have to be modified to take an optional SourceAddress, probably defaulted to null.\r\n\r\n```C#\r\npublic static string ConstructCommandLine(int packetSize, string address, bool ipv4, int ttl = 0, PingFragmentOptions fragmentOption = PingFragmentOptions.Default, IpAddress sourceAddress = null)\r\n{\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.Append(\"-c 1\"); // Just send a single ping (\"count = 1\")\r\n\r\n    // Start new code\r\n    if(sourceAddress != null)\r\n    {\r\n        sb.Append( \" -S \" + sourceAddress.ToString() );\r\n    }\r\n    // End new code\r\n\r\n    // ...\r\n\r\n    return sb.ToString();\r\n}\r\n```\r\nThe only thing to be mindful of is this: is \"-S\" the same for all the unix platforms?\r\n\r\nWhen using a raw socket, the socket needs to be told about the source address.  To be honest, this is where my networking knowledge is hazy, but I *think* the only thing that needs to be set on the Socket object to do this is [Socket.LocalEndPoint](https://docs.microsoft.com/en-us/dotnet/api/system.net.sockets.socket.localendpoint?view=netcore-3.0).  Which means, GetRawSocket can be modified to look like:\r\n\r\n```C#\r\nprivate Socket GetRawSocket(SocketConfig socketConfig)\r\n{\r\n    IPEndPoint ep = (IPEndPoint)socketConfig.EndPoint;\r\n\r\n    // Setting Socket.DontFragment and .Ttl is not supported on Unix, so socketConfig.Options is ignored.\r\n    AddressFamily addrFamily = ep.Address.AddressFamily;\r\n    Socket socket = new Socket(addrFamily, SocketType.Raw, socketConfig.ProtocolType);\r\n    socket.ReceiveTimeout = socketConfig.Timeout;\r\n    socket.SendTimeout = socketConfig.Timeout;\r\n    if (socketConfig.Options != null \u0026\u0026 socketConfig.Options.Ttl \u003e 0)\r\n    {\r\n        socket.Ttl = (short)socketConfig.Options.Ttl;\r\n    }\r\n\r\n    if (socketConfig.Options != null \u0026\u0026 addrFamily == AddressFamily.InterNetwork)\r\n    {\r\n        socket.DontFragment = socketConfig.Options.DontFragment;\r\n    }\r\n\r\n    // Start new code\r\n    if (socketConfig.Options != null \u0026\u0026 socketConfig.Options.SourceAddress != null)\r\n    {\r\n        IPEndPoint sourceEp = new IPEndPoint(socketConfig.Options.SourceAddress, 0);\r\n        socket.LocalEndPoint = sourceEp;\r\n    }\r\n    // End new code\r\n\r\n    // ...\r\n    return socket;\r\n```\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOev3I8w==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNzIxNzkwMQ==",
                                           "createdAt":  "2019-10-01T20:34:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: Sounds reasonable. We need API proposal.\r\n\r\nIs it something you\u0027re willing to help with @xforever1313?",
                                           "updatedAt":  "2019-10-01T20:34:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNzIyMTYxNQ==",
                                           "createdAt":  "2019-10-01T20:43:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xforever1313",
                                           "body":  "Yes, absolutely!",
                                           "updatedAt":  "2019-10-01T20:43:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNzI4ODQ4MA==",
                                           "createdAt":  "2019-10-02T00:47:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Cool, here\u0027s API process: https://github.com/dotnet/corefx/blob/master/Documentation/project-docs/api-review-process.md",
                                           "updatedAt":  "2019-10-02T00:47:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzODE5NzkyOA==",
                                           "createdAt":  "2019-10-04T02:05:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xforever1313",
                                           "body":  "I updated the top-level comment with a proposal of what I think would need to change.",
                                           "updatedAt":  "2019-10-04T02:05:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzODIxNDE4MA==",
                                           "createdAt":  "2019-10-04T03:30:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "\u003e However, IcmpSendEcho2 does not\r\nallow one to specify the source IP Address. A similar function, IcmpSendEcho2Ex,\r\ndoes, however. As far as I can tell, the functions perform the same thing, except IcmpSendEcho2Ex allows one to specify a source address.\r\n\r\nLooking at Windows sources, IcmpSendEcho2 is implemented as a call to IcmpSendEcho2Ex passing `0` for the `SourceAddress`. ",
                                           "updatedAt":  "2019-10-04T03:30:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc55Xrcq",
                                           "createdAt":  "2024-04-04T05:59:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODc_rqA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "xforever1313",
                                                                               "createdAt":  "2024-04-04T12:33:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of our [issue cleanup automation](https://github.com/dotnet/runtime/blob/main/docs/issue-cleanup.md).\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-04T05:59:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc56_cjz",
                                           "createdAt":  "2024-04-18T09:39:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "This issue will now be closed since it had been marked `no-recent-activity` but received no further activity in the past 14 days. It is still possible to reopen or comment on the issue, but please note that the issue will be locked if it remains inactive for another 30 days.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-18T09:39:26Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "[Ping] Consider adding a way to specify a \"Source\" address while sending a ping.",
        "labels":  [
                       "api-suggestion",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/29560",
        "createdAt":  "2019-05-15T15:17:57Z",
        "number":  29560,
        "author":  "dbeinder",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOA4EZTA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Vort",
                                            "createdAt":  "2019-12-29T07:53:40Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-11-04T16:59:06Z",
        "body":  "When the Windows TCP connections table changes rapidly, the [Windows API call GetTcpTable](https://docs.microsoft.com/en-us/windows/desktop/api/iphlpapi/nf-iphlpapi-gettcptable#return-value) can return STATUS_UNSUCCESSFUL (0xc0000001). This return value is [currently used by .NET to throw a generic NetworkInformationException](https://github.com/dotnet/corefx/blob/master/src/System.Net.NetworkInformation/src/System/Net/NetworkInformation/SystemIPGlobalProperties.cs#L128-L165) which, when printed, only displays `Unknown error (0xc0000001)`.\r\n\r\n`GetTcpTable` is used internally by .NET in the System.Net assembly:\r\n`IPGlobalProperties.GetActiveTcpConnections()`\r\n`IPGlobalProperties.GetActiveTcpListeners()`\r\n\r\nThe WinAPI documentation for `GetTcpTable` is short on guarantees, but recommends simply repeating the call.\r\nCan someone with deeper knowledge of the Windows API comment if it would be safe for .NET to retry until the call succeeds?\r\nIf that risks major lock-ups, NetworkInformationException should be extended to give users a flag  to allow them to implement their own retry logic. For now, this can be done by checking the `ErrorCode` of the exception manually against against 0xc0000001.\r\n\r\nThe same issue exists in .NET Core and .NET Framework, since the code is virtually identical.\r\n\r\nCuriously, the WinApi documentation does not mention this behaviour for similar calls, like `GetExtendedTcpTable`, `GetUdpTable`, `GetExtendedUdpTable` which are also used by .NET - again, it would be great to know if these functions are safe, or if it is simply an oversight in the documentation.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOklfibQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5NDAyNTc4MA==",
                                           "createdAt":  "2019-05-20T15:03:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huangbq4gh",
                                           "body":  "I got the same error also in \u0027high load\u0027 situation (10k+ connections and frequently changing). \r\n\r\n\u003e 2019-01-08 08:23:52,658 Unknown error (0xc0000001), Traceback=   at System.Net.NetworkInformation.SystemIPGlobalProperties.GetAllTcpConnections()\r\n\u003e    at System.Net.NetworkInformation.SystemIPGlobalProperties.GetActiveTcpConnections()\r\n\r\nThis error is not consistent, which makes it kinda annoying to troubleshoot. \r\n\r\n```\r\n        public static int GetAvailablePort(int startingPort)\r\n        {\r\n            IPEndPoint[] endPoints;\r\n            List\u003cint\u003e portArray = new List\u003cint\u003e();\r\n\r\n            IPGlobalProperties properties = IPGlobalProperties.GetIPGlobalProperties();\r\n\r\n            //getting active connections\r\n            TcpConnectionInformation[] connections = properties.GetActiveTcpConnections();\r\n            portArray.AddRange(from n in connections\r\n                               where n.LocalEndPoint.Port \u003e= startingPort\r\n                               select n.LocalEndPoint.Port);\r\n...\r\n```",
                                           "updatedAt":  "2019-05-20T15:03:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwMTQ5ODQyMQ==",
                                           "createdAt":  "2019-06-13T00:03:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "scalablecory",
                                           "body":  "I\u0027m betting the error you\u0027re getting is an optimistic concurrency check. If so, it should be safe to call in a loop without negatively impacting the system. Are you able to try it and see?\r\n\r\nWill throw out some feelers to get a more specific answer.",
                                           "updatedAt":  "2019-06-13T00:03:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwMTY3MjM4MA==",
                                           "createdAt":  "2019-06-13T11:59:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAqizlg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "scalablecory",
                                                                               "createdAt":  "2019-06-14T00:50:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "dbeinder",
                                           "body":  "I have not been successful in triggering this behavior by creating artificial loads - but I have now started a test program that will keep polling until it gets the exception and will then count the number of retries and the time it takes on a server where I have seen the issue before.",
                                           "updatedAt":  "2019-06-13T11:59:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwMzc0NTUxOA==",
                                           "createdAt":  "2019-06-19T21:02:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dbeinder",
                                           "body":  "It took 3 days of polling GetActiveTcpConnections() for the issue to crop up again.\r\nAfter detecting a 0xc0000001 exception, a repeat following immediately was successful.\r\n\r\n\r\nSo I guess there are two options to resolve this:\r\n\r\n1.  Build the repeat-after-failure behavior directly into the [.NET implementation](https://github.com/dotnet/corefx/blob/master/src/System.Net.NetworkInformation/src/System/Net/NetworkInformation/SystemIPGlobalProperties.cs#L128-L137)\r\n2. Extend `NetworkInformationException` to give a more actionable error message and mention in the .NET IPGlobalProperties documentation that this high load exception is possible\r\n\r\nI believe the second option would simply lead to everyone copying boilerplate retry code whenever they want to use one of the `IPGlobalProperties .GetXyzConnections()` functions. I can\u0027t think of a scenario when I wouldn\u0027t want to retry immediately but rather abandon the attempt to get those connections.\r\n\r\nIf we can get a slightly stronger guarantee from someone with WinApi knowledge that retrying is not going to end up in a endless loop, I think we should definitely opt for option 1.",
                                           "updatedAt":  "2019-06-19T21:04:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwMzc1MDk1NQ==",
                                           "createdAt":  "2019-06-19T21:20:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "scalablecory",
                                           "body":  "If we add a loop, we\u0027d have it give up after some tries, so the exception might still happen. Because of this, I think documentation needs to be updated either way.",
                                           "updatedAt":  "2019-06-19T21:20:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwMzc1OTg3NA==",
                                           "createdAt":  "2019-06-19T21:50:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dbeinder",
                                           "body":  "That would depend on how GetTcpTable is implemented behind the scenes, if it is really just multiple cores competing fairly for access to the table, then the worst case chance of \u0027winning\u0027 may be as high as 1/NR_OF_CORES. In that case retrying without limit might be justified if it is all but guaranteed to work out after 4-16 attempts.\r\n\r\nIf it is more complicated than that, you\u0027re right a limit or better yet a timeout would become necessary - and the case for leaving retrying up to the user becomes much stronger.\r\n\r\nIf we do expand `NetworkInformationException` to include a more specific flag for a high load condition - so that it isn\u0027t just an error string - that would have to be adapted on all the OS specific implementations and would make this a much larger fix.",
                                           "updatedAt":  "2019-06-19T21:52:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwMzc3MzUxNQ==",
                                           "createdAt":  "2019-06-19T22:43:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "scalablecory",
                                           "body":  "\u003e if it is really just multiple cores competing fairly for access to the table, then the worst case chance of \u0027winning\u0027 may be as high as 1/NR_OF_CORES. In that case retrying without limit might be justified if it is all but guaranteed to work out after 4-16 attempts.\r\n\r\nThis assumes too much about the state of the system. *Someone* is winning, but without a fair ticketing system it might never be you. Load, priority, etc. might affect this.",
                                           "updatedAt":  "2019-06-19T22:43:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyMzEwODkxMg==",
                                           "createdAt":  "2019-08-20T17:11:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CIPop",
                                           "body":  "+1 I have captured a full-mem dump.",
                                           "updatedAt":  "2019-08-20T17:11:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyMzY5MDA1Nw==",
                                           "createdAt":  "2019-08-21T23:41:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "scalablecory",
                                           "body":  "Looking at the code, this makes some more sense:\r\n\r\n\u003e If you receive this return code then calling the function again is usually enough to clear the issue and get the desired result. This return code can be a consequence of the system being under high load. For example, if the size of the TCP connection table changes by more than 2 additional items 3 consecutive times.\r\n\r\nIf true, we will need to add 3 new table entries at just the right moment, 3 times in a row to trigger this. However, the code doesn\u0027t actually seem to be returning `STATUS_UNSUCCESSFUL` when this happens so I\u0027m not 100% convinced this documentation is correct. Will work on a repro.",
                                           "updatedAt":  "2019-08-21T23:41:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNzIxNzAwMg==",
                                           "createdAt":  "2019-10-01T20:32:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: Looks like something we should document that we can throw out of that API `IPGlobalProperties.GetActiveTcpConnections`.",
                                           "updatedAt":  "2019-10-01T20:32:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6SV-Jt",
                                           "createdAt":  "2024-11-04T16:59:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jjxtra",
                                           "body":  "Issues still exists in .NET 8.",
                                           "updatedAt":  "2024-11-04T16:59:05Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "IPGlobalProperties throws generic Exception on \u0027high load\u0027 error code from WinAPI GetTcpTable()",
        "labels":  [
                       "documentation",
                       "area-System.Net",
                       "os-windows"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/29839",
        "createdAt":  "2019-06-10T21:17:45Z",
        "number":  29839,
        "author":  "hyspace",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCxKqYQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "domenic",
                                            "createdAt":  "2019-06-11T13:41:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sideshowbarker",
                                            "createdAt":  "2019-06-11T17:39:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "FlorianRappl",
                                            "createdAt":  "2019-06-11T19:33:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Gnbrkm41",
                                            "createdAt":  "2019-06-13T14:56:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0xfeeddeadbeef",
                                            "createdAt":  "2021-04-24T08:50:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tjosepo",
                                            "createdAt":  "2022-11-21T00:31:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AUSBird",
                                            "createdAt":  "2023-07-07T10:12:04Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "AUSBird",
                                            "createdAt":  "2023-07-07T10:12:07Z"
                                        }
                                    ],
                          "totalCount":  8
                      },
        "updatedAt":  "2021-05-12T15:38:05Z",
        "body":  "Hi all,\r\n\r\nWe noticed that `System.Private.Uri` is not following [the WHATWG living standard of URL](https://url.spec.whatwg.org/), which results in some different parsing result comparing to major browsers.\r\n\r\nFor [example](https://url.spec.whatwg.org/#example-url-parsing):\r\n```cs\r\nUri.TryCreate(\"http:////example.com///\", UriKind.Absolute, out var uri)\r\n```\r\nwill return `false`, but the *Standard* is considering `http:////example.com///` as valid input and will correct it to `http://example.com///`.\r\nIf you try this example URL in any major browser you will get same result as *Standard* defined.\r\n\r\nThis type of difference made it difficult to use *.NET* and *C#* in web browsing related scenarios, like Crawlers or HTML Parsers.\r\n\r\nThe [AngleSharp](https://github.com/AngleSharp/AngleSharp) project is one of the most commonly used *C#* HTML Parser. Today, they have to implement their own `Url` Class to be able to parse URL in the way *Stardard* defined. I think it will be much better if *C#* core library can handle it correctly.\r\n\r\nAlone with the *Standard*, there is a [set of test cases about URL](https://github.com/web-platform-tests/wpt/blob/master/url/resources/urltestdata.json) for browsers or web developers to verify their implementation of the *Standard*. Today `System.Private.Uri` is failing many tests from it, including the example above.\r\n\r\nIs there any plan to let `System.Private.Uri` following WHATWG URL Standard?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMg91Ag==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwMDY1NjA5Nw==",
                                           "createdAt":  "2019-06-11T01:57:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidsh",
                                           "body":  "In general, the System.Uri class of .NET Framework and .NET Core aligns with the IETF RFC 3986 and RFC 3987.  The WHATWG URL Standard is not something that we have considered at this point.\r\n\r\nWe can consider it in the future as that standard becomes more mainstream. I also don\u0027t understand why WHATWG is not incorporating these interesting updates into the official IETF RFC standards.",
                                           "updatedAt":  "2019-06-11T01:57:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwMDY1NjE4Ng==",
                                           "createdAt":  "2019-06-11T01:57:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidsh",
                                           "body":  "@karelz @wtgodbe ",
                                           "updatedAt":  "2019-06-11T01:57:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwMDY2Mzk1Mw==",
                                           "createdAt":  "2019-06-11T02:36:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAqWNJw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "domenic",
                                                                               "createdAt":  "2019-06-11T13:41:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sideshowbarker",
                                                                               "createdAt":  "2019-06-11T17:40:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "hyspace",
                                           "body":  "\u003e I also don\u0027t understand why WHATWG is not incorporating these interesting updates into the official IETF RFC standards.\r\n\r\nIn short, releasing of RFC is too slow comparing to fast evolving web technology today\u003csup\u003e1\u003c/sup\u003e.\r\n\r\nBefore the new URL standard becomes RFC, all major browsers may have already implemented WHATWG Standard for years.\r\n\r\nThe WHATWG Standard have already became the factual standard today. Being left behind of the standard may result in security vulnerabilities for C# applications. For example, consider a program using `System.Uri` to detect malware link in web pages. Today, intentionally malformed links will be considered \"invalid\" by `System.Uri`, but actually it can be correctly opened by browsers. If this program want to parse those links correctly, they need to stop using `System.Uri`.\r\n\r\nFollowing WHATWG Living URL Standard will be very different from implementing RFC. RFC is fixed until new one come out, on the other hand living standard is changing over time. To implement living standard, we need to publish updates frequently to catch up with standard. At this perspective, I\u0027m not sure if `.Net Frameworks` or `.Net Core` should really choose this approach. Letting the community to implement WHATWG Standard on their own is not unacceptable, but it will become a burden for them.\r\n\r\nThere should not be any compatibility concern to follow WHATWG Standard. One major principles of WHATWG Standard is backward compatibility. Usually only new features are added when standard updates.\r\n\r\n\u003csup\u003e1\u003c/sup\u003e [History](https://html.spec.whatwg.org/multipage/introduction.html#history-2)\r\n\r\n\r\n",
                                           "updatedAt":  "2019-06-11T03:25:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwMTAzOTM3MQ==",
                                           "createdAt":  "2019-06-11T21:59:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "scalablecory",
                                           "body":  "Are there any specific use cases you\u0027re targeting that current `Uri` does not support?",
                                           "updatedAt":  "2019-06-11T21:59:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwMTEyNzg1Mg==",
                                           "createdAt":  "2019-06-12T05:37:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBqUL-A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sideshowbarker",
                                                                               "createdAt":  "2019-06-12T05:46:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "scalablecory",
                                                                               "createdAt":  "2021-05-11T01:09:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "hyspace",
                                           "body":  "@scalablecory \r\nGenerally there are 2 use cases we are targeting that current `Uri` does not support.\r\n\r\n### We want to validate whether an URL is able to be opened in major browsers.\r\n\r\nI would like to use same example in the issue:\r\n```\r\nhttp:////example.com///\r\n```\r\nBrowser is able to open it, but `Uri` says it is invalid.\r\n\r\n### We want to know if two URLs is actually pointing to same destination. \r\nExample\r\n```\r\nhttp://example.com/path\r\nhttp://example.com/\\tpath\r\nhttp:////example.com/path\r\nhttp://examp\\nle.com/path\r\n```\r\nAre those URLs same or not? \r\n`Uri` says first 2 are valid but different, last 2 are not valid\r\nBut actually, browser will open same page for all 4 URLs.\r\n(`\\t` and `\\n` means `TAB` and `CR` in my case)\r\n\r\nHow should URL class parse those URLs is clearly defined in the WHATWG URL Living standard today.\r\n\r\nBy the way, we are a team under *Experiences and Devices*, I have shared detailed use cases internally.",
                                           "updatedAt":  "2019-06-12T06:43:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwMzAxNDI1NA==",
                                           "createdAt":  "2019-06-18T08:59:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GSPP",
                                           "body":  "I, too, have noticed that `Uri` is not good enough for certain web workloads where you deal with dirty data.\r\n\r\nTo me, it seems that the dirtiness of the real web cannot be captured reasonably in `Uri`. This should stay out of scope.\r\n\r\nIt is correct and good that AngleSharp implements its own Uri class. Their idea of what constitutes a Uri is quite different from what the framework should implement.\r\n",
                                           "updatedAt":  "2019-06-18T08:59:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNzIxMzYwNw==",
                                           "createdAt":  "2019-10-01T20:24:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: Should be part of overall Uri modernization effort. Sounds like reasonable direction to follow.",
                                           "updatedAt":  "2019-10-01T20:24:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNzI5NzY2Mw==",
                                           "createdAt":  "2019-10-02T01:32:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hyspace",
                                           "body":  "@karelz Could you provide more information about plan of \"Uri modernization\"?",
                                           "updatedAt":  "2019-10-02T01:32:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNzMwNDgxMQ==",
                                           "createdAt":  "2019-10-02T02:07:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@hyspace we don\u0027t have more information or plans at the moment -- we just know we need to modernize the space, fix bugs, look at new standards, etc.",
                                           "updatedAt":  "2019-10-02T02:07:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNjk0NTI3Ng==",
                                           "createdAt":  "2021-05-10T16:43:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SergioBenitez",
                                           "body":  "Note that `http:////example.com///` is a valid absolute URI according to RFC 3986, so this is in fact a bug, not a feature request. Here is the production:\r\n\r\n```\r\nscheme\r\n    ALPHA \u0027h\u0027\r\n    *ALPHA \u0027t\u0027 \u0027t\u0027 \u0027p\u0027\r\n\u0027:\u0027\r\nhier-part\r\n    \"//\"\r\n    authority\r\n        host\r\n            *regname\r\n    path-abempty\r\n        \"/\"\r\n        \"/\"\r\n        \"/\"\r\n        \"/\" segment\r\n            *pchar\r\n                \"e\" \"x\" \"a\" \"m\" \"p\" \"l\" \"e\" \".\" \"c\" \"o\" \"m\"\r\n        \"/\"\r\n        \"/\"\r\n        \"/\"\r\n```\r\n\r\nHere\u0027s the consolidated and relevant grammar from RFC 3896, for reference.\r\n\r\n```\r\nabsolute-URI  = scheme \":\" hier-part [ \"?\" query ]\r\n\r\nscheme        = ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\r\n\r\nhier-part     = \"//\" authority path-abempty\r\n             / path-absolute\r\n             / path-rootless\r\n             / path-empty\r\n\r\nquery         = *( pchar / \"/\" / \"?\" )\r\n\r\nauthority     = [ userinfo \"@\" ] host [ \":\" port ]\r\nuserinfo      = *( unreserved / pct-encoded / sub-delims / \":\" )\r\nhost          = IP-literal / IPv4address / reg-name\r\nport          = *DIGIT\r\n\r\nreg-name      = *( unreserved / pct-encoded / sub-delims )\r\n\r\npath-abempty  = *( \"/\" segment )\r\n\r\nsegment       = *pchar\r\n\r\npchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\r\n\r\nunreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\r\npct-encoded   = \"%\" HEXDIG HEXDIG\r\nsub-delims    = \"!\" / \"$\" / \"\u0026\" / \"\u0027\" / \"(\" / \")\"\r\n             / \"*\" / \"+\" / \",\" / \";\" / \"=\"\r\n```",
                                           "updatedAt":  "2021-05-10T16:43:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzOTg3Mzc5NA==",
                                           "createdAt":  "2021-05-12T15:38:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KevinCathcart",
                                           "body":  "Specific URI schemes are allowed to place further restrictions on the generic grammar of RFC3896. The HTTP(s) schemes are registered in RFC7230 which states:\r\n\r\n\u003e A sender MUST NOT generate an \"http\" URI with an empty host identifier.  A recipient that processes such a URI reference MUST reject it as invalid.\r\n\r\nIndeed, RFC3896 explicitly mentions that the http scheme considers empty host value invalid.\r\n\r\nTherefore per the RFCs, System.Uri is correct to reject such for the https scheme. If you change the scheme in that url to something like \"bogus\", then System.Uri will not do such additional validation, and will parse it as you show.\r\n\r\nEven the WHATWG URL standard does not consider \"http:////example.com///\" to be a valid URL string, but it does specify an algorithm for how to parse such invalid URLs. That said, the WHATWG standard is a bit weird in that it admits the existence of some URLs that have no valid equivalent (since it considers username and password to never be allowed in a valid URL string).",
                                           "updatedAt":  "2021-05-12T15:38:04Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "[Uri] Support WHATWG URL standard",
        "labels":  [
                       "enhancement",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/30276",
        "createdAt":  "2019-07-16T12:08:50Z",
        "number":  30276,
        "author":  "atifaziz",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-10-01T16:17:34Z",
        "body":  "Under .NET Framework, [`HttpWebResponse.Headers`](https://docs.microsoft.com/en-us/dotnet/api/system.net.httpwebresponse.headers) can deliver the `Set-Cookie` header value as _multiple values_, where each value represents one cookie. `HttpWebResponse.Headers` is a [`WebHeaderCollection`](https://docs.microsoft.com/en-us/dotnet/api/system.net.webheadercollection) and invoking [`GetValues(\"Set-Cookie\")`](https://docs.microsoft.com/en-us/dotnet/api/system.net.webheadercollection.getvalues#System_Net_WebHeaderCollection_GetValues_System_String_) returns an array of strings where each string is a single cookie. In .NET Core, however, the same returns the entire header as a single string; that is `GetValues(\"Set-Cookie\")` _always_ returns an array of one string with comma-separated cookies. This seems to be a **compatibility bug** that yields different results at run-time when the same code is executed under .NET Framework and .NET Core.\r\n\r\nI have created a self-contained program to demonstrate the issue:\r\n\r\n```c#\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Diagnostics;\r\nusing System.IO;\r\nusing System.Linq;\r\nusing System.Net;\r\nusing System.Runtime.InteropServices;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\n\r\n#if !NETFX\r\nusing Microsoft.AspNetCore;\r\nusing Microsoft.AspNetCore.Builder;\r\nusing Microsoft.AspNetCore.Hosting;\r\nusing Microsoft.AspNetCore.Hosting.Server.Features;\r\nusing Microsoft.AspNetCore.Http;\r\nusing Microsoft.Extensions.DependencyInjection;\r\n#endif\r\n\r\nstatic class Program\r\n{\r\n    static async Task\u003cint\u003e Main(string[] args)\r\n    {\r\n        try\r\n        {\r\n            Console.WriteLine((RuntimeInformation.FrameworkDescription + \" \").PadRight(70, \u0027-\u0027));\r\n            await Wain(args);\r\n            return 0;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            Console.Error.WriteLine(e);\r\n            return 1;\r\n        }\r\n    }\r\n\r\n    // The following client code is identical between .NET Core and .NET\r\n    // Framework versions.\r\n\r\n    static class Client\r\n    {\r\n        public static void Run(Uri url)\r\n        {\r\n            var request = WebRequest.CreateHttp(url);\r\n\r\n            using var response = (HttpWebResponse) request.GetResponse();\r\n            Console.WriteLine((int)response.StatusCode + \" \" + response.StatusDescription);\r\n\r\n            var headers =\r\n                from i in Enumerable.Range(0, response.Headers.Count)\r\n                select (Name: response.Headers.GetKey(i), Values: response.Headers.GetValues(i)) into h\r\n                from v in h.Values\r\n                select (h.Name, v);\r\n\r\n            foreach (var (name, value) in headers)\r\n                Console.WriteLine(name + \": \" + value);\r\n\r\n            Console.WriteLine();\r\n\r\n            using var stream = response.GetResponseStream();\r\n            using var reader = new StreamReader(stream);\r\n            Console.WriteLine(reader.ReadToEnd());\r\n        }\r\n    }\r\n\r\n#if NETFX\r\n\r\n    // Under .NET Framework, just run the client.\r\n\r\n    static Task Wain(string[] args)\r\n    {\r\n        if (args.Length == 0)\r\n            throw new Exception(\"Missing URL argument.\");\r\n        Client.Run(new Uri(args[0]));\r\n        return Task.CompletedTask;\r\n    }\r\n\r\n#else\r\n\r\n    // The server that responds with a plain text message and two cookies.\r\n\r\n    static class Server\r\n    {\r\n        public static IWebHost Build(string[] args) =\u003e\r\n            WebHost\r\n                .CreateDefaultBuilder(args)\r\n                .Configure(app =\u003e\r\n                {\r\n                    app.Run(async (context) =\u003e\r\n                    {\r\n                        var response = context.Response;\r\n                        var cookies = response.Cookies;\r\n                        cookies.Append(\"foo\", \"bar\");\r\n                        cookies.Append(\"bar\", \"baz\");\r\n                        response.ContentType = \"text/plain\";\r\n                        await response.WriteAsync(\"Hello World!\\n\");\r\n                    });\r\n                })\r\n                .Build();\r\n    }\r\n\r\n    // Under .NET Core, runs:\r\n    // - the web server\r\n    // - then the .NET Core client\r\n    // - then the .NET Framework client indirectly via `dotnet run`\r\n\r\n    static async Task Wain(string[] args)\r\n    {\r\n        var host = Server.Build(args);\r\n        host.Start();\r\n\r\n        try\r\n        {\r\n            var addresses = host.ServerFeatures.Get\u003cIServerAddressesFeature\u003e();\r\n            var url = addresses.Addresses\r\n                               .Select(addr =\u003e new Uri(addr))\r\n                               .First(url =\u003e url.Scheme == Uri.UriSchemeHttp);\r\n\r\n            Client.Run(url);\r\n\r\n            // Find the project directory and run the .NET Framework version\r\n            // via `dotnet run`, re-directing standard output and error here.\r\n\r\n            var appDir = new DirectoryInfo(AppContext.BaseDirectory);\r\n            var projectDir = appDir.Ascendants().First(dir =\u003e dir.EnumerateFiles(\"*.csproj\").Any());\r\n\r\n            var psi = new ProcessStartInfo(\"dotnet\", \"run --framework net471 \" + url)\r\n            {\r\n                CreateNoWindow = true,\r\n                UseShellExecute = false,\r\n                WorkingDirectory = projectDir.FullName,\r\n                RedirectStandardOutput = true,\r\n                RedirectStandardError = true,\r\n            };\r\n\r\n            using var process = Process.Start(psi);\r\n\r\n            static DataReceivedEventHandler CreateDataReceiverFor(TextWriter writer) =\u003e (_, e) =\u003e\r\n            {\r\n                if (e.Data is string line)\r\n                    writer.WriteLine(line);\r\n            };\r\n\r\n            process.OutputDataReceived += CreateDataReceiverFor(Console.Out);\r\n            process.ErrorDataReceived  += CreateDataReceiverFor(Console.Error);\r\n\r\n            process.BeginOutputReadLine();\r\n            process.BeginErrorReadLine();\r\n            process.WaitForExit();\r\n\r\n            if (process.ExitCode != 0)\r\n                throw new Exception($\"The .NET Framework version of the program exited with a non-zero code of {process.ExitCode}.\");\r\n        }\r\n        finally\r\n        {\r\n            // Stop the web server.\r\n\r\n            var cts = new CancellationTokenSource(TimeSpan.FromSeconds(10));\r\n            await host.StopAsync(cts.Token);\r\n        }\r\n    }\r\n\r\n    static IEnumerable\u003cDirectoryInfo\u003e Ascendants(this DirectoryInfo dir)\r\n    {\r\n        for (var parent = dir.Parent; parent != null; parent = parent.Parent)\r\n            yield return parent;\r\n    }\r\n\r\n#endif\r\n}\r\n```\r\n\r\nWhen run as a .NET Core 2.2 application, this program will do the following:\r\n\r\n1. It will run a web server ([Kestrel](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/kestrel?view=aspnetcore-2.2)) that responds with a plain text message (that reads “Hello World!”) and two cookies (`foo=bar` and `bar=baz`).\r\n2. It will then issue an HTTP request and dump the response status, headers and body as text.\r\n3. It will do the same as 2, but under .NET Framework. This step is done by running the same project via `dotnet run` but with the `--framework net471` option.\r\n\r\nThe output of the program shows the difference in behaviour:\r\n\r\n```\r\n.NET Core 4.6.27817.03 -----------------------------------------------\r\n200 OK\r\nDate: Tue, 16 Jul 2019 12:04:59 GMT\r\nServer: Kestrel\r\nTransfer-Encoding: chunked\r\nSet-Cookie: foo=bar; path=/, bar=baz; path=/\r\nContent-Type: text/plain\r\n\r\nHello World!\r\n\r\n.NET Framework 4.7.3416.0 --------------------------------------------\r\n200 OK\r\nTransfer-Encoding: chunked\r\nContent-Type: text/plain\r\nDate: Tue, 16 Jul 2019 12:05:01 GMT\r\nSet-Cookie: foo=bar; path=/\r\nSet-Cookie: bar=baz; path=/\r\nServer: Kestrel\r\n\r\nHello World!\r\n\r\n```\r\n\r\nSpecifically, under .NET Core, we see a single `Set-Cookie` line with both cookies:\r\n\r\n    Set-Cookie: foo=bar; path=/, bar=baz; path=/\r\n\r\nwhereas under .NET Framework, we see two, one per cookie:\r\n\r\n    Set-Cookie: foo=bar; path=/\r\n    Set-Cookie: bar=baz; path=/\r\n\r\nI have uploaded a ZIP archive with the full project:\r\n\r\n📎 [`CookiesBugDemo.zip`](https://github.com/dotnet/corefx/files/3396887/CookiesBugDemo.zip)\r\n\r\nSimply unzip and execute the `run.cmd` batch script included.\r\n\r\n## More Information\r\n\r\n`dotnet --info` says:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.204\r\n Commit:    8757db13ec\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.204\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview7-27902-19\r\n  Commit:  fbe9466ddd\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.14 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.507 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.508 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.604 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.700 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.701 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.204 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.301 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview7-012802 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview7.19353.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview7-27902-19 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview7-27902-19 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjj43LA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxMTc5MDE0MQ==",
                                           "createdAt":  "2019-07-16T12:13:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "cc: @davidsh",
                                           "updatedAt":  "2019-07-16T12:13:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxMTc5MjM5OA==",
                                           "createdAt":  "2019-07-16T12:20:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "atifaziz",
                                           "body":  "Cross-referencing dotnet/runtime#27764 since it also seems to be related to differences in handling of cookies between .NET Core and .NET Framework when using `HttpWebRequest`/`HttpWebResponse` API family.",
                                           "updatedAt":  "2019-07-16T12:20:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxMTkwMjM3MQ==",
                                           "createdAt":  "2019-07-16T17:04:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "atifaziz",
                                           "body":  "Re-opening due to accidental close of the wrong issue. Sorry.",
                                           "updatedAt":  "2019-07-16T17:04:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzMDkzODA1Mw==",
                                           "createdAt":  "2019-09-12T18:00:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODd1SAw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "nikoudel",
                                                                               "createdAt":  "2021-02-11T20:12:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "Tim-Schmelter",
                                                                               "createdAt":  "2024-04-11T13:05:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "karelz",
                                           "body":  "This seems like a regression from the fact the implementation of HttpWebRequest is different. It is technical breaking change, but semantically the behavior is correct.\r\nGiven we have only 1 complaint, this does not seem to be high-value enough to fix it. Closing.",
                                           "updatedAt":  "2019-09-12T18:00:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzMDk1MTM4OQ==",
                                           "createdAt":  "2019-09-12T18:34:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODd1SZw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Tim-Schmelter",
                                                                               "createdAt":  "2024-04-11T13:06:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "atifaziz",
                                           "body":  "\u003e but semantically the behavior is correct.\r\n\r\nHow is it semantically correct?\r\n\r\n\u003e Given we have only 1 complaint\r\n\r\nHow many do you need? It\u0027s a shame that I took quite some trouble, I think, to provide a comprehensive issue report with code to reproduce the regression and it gets closed after 2 months as not important enough. If you\u0027re not going to fix it then, at the very least, it would have been good to:\r\n\r\n1. Post a workaround that future visitors can run with.\r\n2. Add a compatibility note to the [`HttpWebResponse.Headers`](https://docs.microsoft.com/en-us/dotnet/api/system.net.httpwebresponse.headers) documentation. /cc @KathleenDollard \r\n",
                                           "updatedAt":  "2019-09-12T18:34:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzMTAzMTcxNQ==",
                                           "createdAt":  "2019-09-12T22:31:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAwhWuQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "karelz",
                                                                               "createdAt":  "2019-09-13T06:07:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidsh",
                                           "body":  "\u003eHow is it semantically correct?\r\n\r\nAccording to [RFC 6265](https://tools.ietf.org/html/rfc6265), there is no order dependencies of cookies received by \u0027Set-Cookie\u0027 headers. So, a user-agent (client) should process the cookies the same way regardless of the order they appear within one or more \u0027Set-Cookie\u0027 response headers.\r\n\r\n\u003eThis seems like a regression from the fact the implementation of HttpWebRequest is different. \r\n\r\nIn .NET Core, the HttpWebRequest API is built on top of the HttpClient API. HttpClient coalesces all the \u0027Set-Cookie\u0027 response headers into a single array of cookies. And that is why it appears as a single \u0027Set-Cookie\u0027 header as viewed by the HttpWebRequest API. This is different from the .NET Framework implementation of HttpWebRequest. But in practice, we haven\u0027t seen any broken applications due to this since according to the RFC, a client shouldn\u0027t expect the cookies to be ordered in any particular way from the server.\r\n\r\n\u003eAdd a compatibility note to the HttpWebResponse.Headers documentation. /cc @KathleenDollard\r\n\r\nThis is a good point. Feel free to open an issue in https://github.com/dotnet/dotnet-api-docs/issues. Or you can even submit a PR to change the documentation to add more info about this. The \u0027Remarks\u0027 section of the API docs is where we currently put compatibility notes like this.",
                                           "updatedAt":  "2019-09-12T22:32:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzMTc0ODk5Mw==",
                                           "createdAt":  "2019-09-16T12:06:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "atifaziz",
                                           "body":  "\u003e In .NET Core, the HttpWebRequest API is built on top of the HttpClient API. HttpClient coalesces all the \u0027Set-Cookie\u0027 response headers into a single array of cookies. And that is why it appears as a single \u0027Set-Cookie\u0027 header as viewed by the HttpWebRequest API.\r\n\r\nRight, that\u0027s the explanation and what I suspected was happening.\r\n\r\n\u003e This is different from the .NET Framework implementation of HttpWebRequest.\r\n\r\nThat\u0027s the only issue being reported here. It\u0027s not about ordering.\r\n\r\n\u003e But in practice, we haven\u0027t seen any broken applications due to this since according to the RFC\r\n\r\nWell, it certainly broke our applications.\r\n\r\n\u003e a client shouldn\u0027t expect the cookies to be ordered in any particular way from the server.\r\n\r\nAgain, it\u0027s not about ordering. It\u0027s simply that the same collection is delivering `Set-Cookie` as a single string (multiple `Set-Cookie` folded into one and separated by commas) and the other delivering multiple values for the same header. The latter requires less parsing. Returning the `Set-Cookie` header as a single string is, in fact incorrect, because the header value [syntax is invalid per RFC 6265](https://tools.ietf.org/html/rfc6265#section-4.1.1):\r\n\r\n```\r\n4.1.1.  Syntax\r\n\r\n   Informally, the Set-Cookie response header contains the header name\r\n   \"Set-Cookie\" followed by a \":\" and a cookie.  Each cookie begins with\r\n   a name-value-pair, followed by zero or more attribute-value pairs.\r\n   Servers SHOULD NOT send Set-Cookie headers that fail to conform to\r\n   the following grammar:\r\n\r\n set-cookie-header = \"Set-Cookie:\" SP set-cookie-string\r\n set-cookie-string = cookie-pair *( \";\" SP cookie-av )\r\n cookie-pair       = cookie-name \"=\" cookie-value\r\n```\r\n\r\nWhat\u0027s worse, the same collection returns _different_ results depending on the `GetValues` overload used! For example, try the following:\r\n\r\n```c#\r\nvar request = WebRequest.CreateHttp(\"https://my.visualstudio.com/\");\r\nusing var response = request.GetResponse();\r\nvar headers = response.Headers;\r\nvar i = Array.IndexOf(headers.AllKeys, \"Set-Cookie\");\r\nif (i \u003c 0)\r\n    throw new Exception(\"Set-Cookie header is absent.\");\r\n\r\nforeach (var v in headers.GetValues(i)) // returns all cookies in one string\r\n    Console.WriteLine(\"Set-Cookie: \" + v);\r\n\r\nConsole.WriteLine();\r\n\r\nforeach (var v in headers.GetValues(\"Set-Cookie\")) // returns cookies as separate strings\r\n    Console.WriteLine(\"Set-Cookie: \" + v);\r\n```\r\n\r\nThe output should be as follows:\r\n\r\n```\r\nSet-Cookie: buid=AQABAAEAAAAP0wLlqdLVToOpA4kwzSnxB9ifhMzWnEktRTgnB23g5k0aFCzDcvv_M1GLFDswsPBG15PkjNZPK1EZ_ZRhFPABtvQIkPetS-ikrW1MdjdGhN9fDn_UO5VRnUrI_4oZgT0gAA; expires=Wed, 16-Oct-2019 12:02:10 GMT; path=/; secure; HttpOnly, fpc=Atc8k94GbTlPs266cvYW0e7dicmqAQAAAMJwEdUOAAAA; expires=Wed, 16-Oct-2019 12:02:10 GMT; path=/; secure; HttpOnly, esctx=AQABAAAAAAAP0wLlqdLVToOpA4kwzSnxLej6lcOGTIwDU1w0V4yZP3cj4JEUSzfg2K7MI5yoD_muzd2Q7Uj7PvIdSUiuVMqaYyR3Wmhl4Ly86EkDJC4s0yvhbQrveTFisym6WNTz-k9txMoFCYZtlrRxdXOEyJA_gkc8pS5GYMvZQqIuigd89HvWDKZrblUAZVk2kwmec30gAA; domain=.login.microsoftonline.com; path=/; secure; HttpOnly, x-ms-gateway-slice=prod; path=/; secure; HttpOnly, stsservicecookie=ests; path=/; secure; HttpOnly\r\n\r\nSet-Cookie: buid=AQABAAEAAAAP0wLlqdLVToOpA4kwzSnxB9ifhMzWnEktRTgnB23g5k0aFCzDcvv_M1GLFDswsPBG15PkjNZPK1EZ_ZRhFPABtvQIkPetS-ikrW1MdjdGhN9fDn_UO5VRnUrI_4oZgT0gAA; expires=Wed, 16-Oct-2019 12:02:10 GMT; path=/; secure; HttpOnly\r\nSet-Cookie: fpc=Atc8k94GbTlPs266cvYW0e7dicmqAQAAAMJwEdUOAAAA; expires=Wed, 16-Oct-2019 12:02:10 GMT; path=/; secure; HttpOnly\r\nSet-Cookie: esctx=AQABAAAAAAAP0wLlqdLVToOpA4kwzSnxLej6lcOGTIwDU1w0V4yZP3cj4JEUSzfg2K7MI5yoD_muzd2Q7Uj7PvIdSUiuVMqaYyR3Wmhl4Ly86EkDJC4s0yvhbQrveTFisym6WNTz-k9txMoFCYZtlrRxdXOEyJA_gkc8pS5GYMvZQqIuigd89HvWDKZrblUAZVk2kwmec30gAA; domain=.login.microsoftonline.com; path=/; secure; HttpOnly\r\nSet-Cookie: x-ms-gateway-slice=prod; path=/; secure; HttpOnly\r\nSet-Cookie: stsservicecookie=ests; path=/; secure; HttpOnly\r\n```\r\n\r\nSo the API is even inconsistent with itself, which is more than a regression bug!\r\n",
                                           "updatedAt":  "2019-09-16T12:06:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzMTg0ODMxMg==",
                                           "createdAt":  "2019-09-16T16:13:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KathleenDollard",
                                           "body":  "@mairaw A compatibility note in the docs would be useful on this. ",
                                           "updatedAt":  "2019-09-16T16:13:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzMTg5MjI4OQ==",
                                           "createdAt":  "2019-09-16T18:09:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAwtyJQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "atifaziz",
                                                                               "createdAt":  "2019-09-17T05:55:22Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidsh",
                                           "body":  "\u003eReturning the Set-Cookie header as a single string is, in fact incorrect, because the header value syntax is invalid per RFC 6265.\r\n\r\n\u003eand separated by commas\r\n\r\nYou are correct that using comma as the delimiter between cookies in the single \u0027Set-Cookie\u0027 header is incorrect. The delimiter in that case should be a semicolon.\r\n\r\nWe will investigate if we can at least correct the delimiter problem even if we still have to have a single \u0027Set-Cookie\u0027 header.",
                                           "updatedAt":  "2019-09-16T18:09:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzMTkwMDIzMg==",
                                           "createdAt":  "2019-09-16T18:29:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mairaw",
                                           "body":  "What exactly do we want to say in the docs for this? I can talk about the different implementation on which each framework is built on top of, that ordering is not guaranteed, but what about the bug he\u0027s reporting? Do we need the investigation to be concluded before we update the docs?",
                                           "updatedAt":  "2019-09-16T18:29:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzMTkwMTc1MQ==",
                                           "createdAt":  "2019-09-16T18:33:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAwrtJQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mairaw",
                                                                               "createdAt":  "2019-09-16T18:34:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidsh",
                                           "body":  "\u003eDo we need the investigation to be concluded before we update the docs?\r\n\r\n@mairaw \r\nYes.  Let\u0027s wait on any doc changes for now until we finish investigating. We will open a separate doc issue in the dotnet/dotnet-api-docs repo once that is done.",
                                           "updatedAt":  "2019-09-16T18:33:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzMjA3NDE3Nw==",
                                           "createdAt":  "2019-09-17T06:07:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA88wSQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "scalablecory",
                                                                               "createdAt":  "2019-09-17T20:51:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "joonaojapalo",
                                                                               "createdAt":  "2020-03-02T12:02:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "atifaziz",
                                           "body":  "@davidsh Thanks for [reconsidering this](https://github.com/dotnet/corefx/issues/39527#event-2637326421).\r\n\r\n\u003e The delimiter in that case should be a semicolon.\r\n\r\nThis won\u0027t be helpful as semi-colon (`;`) is already taken in the cookie syntax to delimit attribute-value pairs ([per section 4.1.1 of RFC 6252](https://tools.ietf.org/html/rfc6265#section-4.1.1)):\r\n\r\n    set-cookie-string = cookie-pair *( \";\" SP cookie-av )\r\n\r\n\u003e We will investigate if we can at least correct the delimiter problem even if we still have to have a single \u0027Set-Cookie\u0027 header.\r\n\r\nWhy try so hard to return a single header when [`GetValues(header)`][gvh] does the right thing already and returns each `Set-Cookie` header separately as an array of strings? It\u0027s just [`GetValues(index)`][gvi] that\u0027s the problem. Even if the docs add a compatibility note (thanks @KathleenDollard and @mairaw for taking note), no one in their right mind would use the overload with the regression.\r\n\r\n[gvh]: https://docs.microsoft.com/en-us/dotnet/api/system.net.webheadercollection.getvalues?view=netframework-4.8#System_Net_WebHeaderCollection_GetValues_System_String_\r\n[gvi]: https://docs.microsoft.com/en-us/dotnet/api/system.net.webheadercollection.getvalues?view=netframework-4.8#System_Net_WebHeaderCollection_GetValues_System_Int32_\r\n",
                                           "updatedAt":  "2019-09-17T06:36:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzMjM5ODE4NQ==",
                                           "createdAt":  "2019-09-17T20:54:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBPMYDw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "atifaziz",
                                                                               "createdAt":  "2019-09-19T07:50:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Drenskin",
                                                                               "createdAt":  "2020-09-02T12:02:55Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "scalablecory",
                                           "body":  "I don\u0027t think we\u0027re trying hard to keep it the same way -- it is more that we try hard to not make changes without fully understanding their scope.\r\n\r\nThe current implementation is clearly broken, so I think we need to make *some* change that will break anyone depending on a comma being there.\r\n\r\nI\u0027m leaning towards reverting to the old behavior of returning separately.",
                                           "updatedAt":  "2019-09-17T20:54:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzMzAxMjYzOQ==",
                                           "createdAt":  "2019-09-19T07:52:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "atifaziz",
                                           "body":  "\u003e I don\u0027t think we\u0027re trying hard to keep it the same way -- it is more that we try hard to not make changes without fully understanding their scope.\r\n\r\nI can completely appreciate that.\r\n\r\n\u003e I\u0027m leaning towards reverting to the old behavior of returning separately.\r\n\r\nCan\u0027t say I don\u0027t second that. 😉 ",
                                           "updatedAt":  "2019-09-19T07:52:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3MzE4NzkxMQ==",
                                           "createdAt":  "2020-01-10T20:12:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA402gQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "onchuner",
                                                                               "createdAt":  "2020-01-11T15:41:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vfedonkin",
                                           "body":  "Just in case, as a workaround: \r\nImplementation of HttpResponseMessage doesn\u0027t have this issue and can be used instead of HttpWebResponse. So you have two choices:\r\n\r\n1. Use HttpClient.GetAsync() instead of HttpWebRequest.GetResponseAsync(). Something like this:\r\n\r\n```c#\r\n            HttpClient client = new HttpClient();\r\n            var resp = await client.GetAsync(your_url);\r\n            var headerValues = resp.Headers.GetValues(\"Set-Cookie\");\r\n```\r\n\r\n2. Retrieve HttpResponseMessage from the HttpWebResponse private field. It\u0027s ugly but someone may use it as temporally solution. Like this:\r\n\r\n```c#\r\n        internal static IEnumerable\u003cstring\u003e GetSetCookieHeaderValues(HttpWebResponse response)\r\n        {\r\n            if (response == null || !response.Headers.AllKeys.Contains(\"set-cookie\", StringComparer.OrdinalIgnoreCase))\r\n            {\r\n                return null;\r\n            }\r\n            string headerName = response.Headers.AllKeys.First(k =\u003e string.Equals(k, \"set-cookie\", StringComparison.OrdinalIgnoreCase));\r\n            BindingFlags bindFlags = BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic\r\n                | BindingFlags.Static;\r\n            FieldInfo field = response.GetType().GetField(\"_httpResponseMessage\", bindFlags);\r\n            return (field.GetValue(response) as HttpResponseMessage)?.Headers.GetValues(headerName);\r\n        }\r\n```",
                                           "updatedAt":  "2020-01-10T20:55:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3Nzc2MTg4Nw==",
                                           "createdAt":  "2021-02-11T20:17:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODYKN0Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "danielstenson",
                                                                               "createdAt":  "2021-03-26T09:33:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "chiwanpark",
                                                                               "createdAt":  "2021-04-25T16:50:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tidusjar",
                                                                               "createdAt":  "2021-09-27T14:22:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "twitthoeft-gls",
                                                                               "createdAt":  "2024-02-25T20:04:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "nikoudel",
                                           "body":  "Apparently this issue breaks Azure Function Proxies: https://github.com/Azure/azure-functions-host/issues/4486\r\nBrowsers (e.g. currently latest Chrome and Firefox) ignore all other cookies but the first one.\r\nThis is not a small issue.",
                                           "updatedAt":  "2021-02-11T20:17:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc51AbdD",
                                           "createdAt":  "2024-02-25T20:07:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "twitthoeft-gls",
                                           "body":  "Ouchie.  Trying to get a .NET 6 V4 http triggered Azure Function to return multiple set-cookie headers and nothing is working, including using a `HttpResponseMessage` return type.   It works locally, but not when deployed.   This is painful.  ",
                                           "updatedAt":  "2024-02-25T20:07:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6OPUN0",
                                           "createdAt":  "2024-10-01T15:49:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD0RrWw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jensgh",
                                                                               "createdAt":  "2024-10-01T16:07:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Elvarorn",
                                                                               "createdAt":  "2024-10-01T16:13:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "SGudbrandsson",
                                           "body":  "This is still a relevant issue.\r\n\r\nRight now, we\u0027re thinking of adding a proxy in front of our services that restores the cookie functionality.\r\nThe proxy will be written in something else than C#, unfortunately.\r\n\r\nI\u0027m amazed that the dotnet core team is okay with all Azure functions having a broken functionality ..\r\nI\u0027d love to write a PR for this, but I don\u0027t know where to start, tbh.",
                                           "updatedAt":  "2024-10-01T15:49:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6OPjcs",
                                           "createdAt":  "2024-10-01T16:17:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SGudbrandsson",
                                           "body":  "Looking at the kestrel code naively, I would probably implement this cookie handling on these three lines https://github.com/dotnet/aspnetcore/blob/fe0fbff040c9f129ba3f5ee8cf15c8f6d96fb50e/src/Servers/Kestrel/Core/src/Internal/Http/HttpProtocol.cs#L959\r\nhttps://github.com/dotnet/aspnetcore/blob/fe0fbff040c9f129ba3f5ee8cf15c8f6d96fb50e/src/Servers/Kestrel/Core/src/Internal/Http/HttpProtocol.cs#L971\r\nhttps://github.com/dotnet/aspnetcore/blob/fe0fbff040c9f129ba3f5ee8cf15c8f6d96fb50e/src/Servers/Kestrel/Core/src/Internal/Http/HttpProtocol.cs#L978\r\n\r\n![image](https://github.com/user-attachments/assets/f4c75951-ff07-4120-87d6-259ccf962e98)",
                                           "updatedAt":  "2024-10-01T16:17:33Z"
                                       }
                                   ],
                         "totalCount":  19
                     },
        "title":  "HttpWebResponse returns different \"Set-Cookie\" header value than under .NET Framework",
        "labels":  [
                       "bug",
                       "area-System.Net",
                       "tenet-compatibility"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/30925",
        "createdAt":  "2019-09-23T13:53:00Z",
        "number":  30925,
        "author":  "andrau",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODAKI3A==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "BadLiveware",
                                            "createdAt":  "2025-03-17T09:10:56Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-09-05T13:29:46Z",
        "body":  "When reading an URI or even several URIs from configuration files as strings and instantiating them using new Uri(string), it would be helpful if the exception for invalid URIs (e.g. because of typos) would include the offending Uri (especially if the exception is in a logfile of a production system where debugging is not an easily available option). \r\n\r\nThis would save the need to do a try-catch around every new Uri() and pretty-print the log message and allow safeguarding an entire initialization section with a more general try - catch(Exception) block without losing any information.\r\n\r\nExample Code:\r\n\r\n```c#\r\n    static void UriFormatExceptionWithoutOffendingUri()\r\n    {\r\n      try\r\n      {\r\n        var uri1 = new Uri(\"http://www.valid.com\");\r\n        var uri2 = new Uri(\"foo//invalid\");\r\n        var uri3 = new Uri(\"https://www.secure.org\");\r\n      }\r\n      catch (UriFormatException ex)\r\n      {\r\n        Console.WriteLine(ex.Message);\r\n      }\r\n    }\r\n```\r\n\r\nyields: \"Invalid URI: The format of the URI could not be determined.\"\r\n\r\nSo we cannot easily determine which URI was invalid\r\n\r\ndesired: \"Invalid URI: The format of the URI \u0027foo//invalid\u0027 could not be determined.\"\r\n\r\nWould that be safe or do you think this would disclose too much information?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOivrEEQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNDEyMjc1MA==",
                                           "createdAt":  "2019-09-23T14:25:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Wraith2",
                                           "body":  "Is this not what [Uri.TryCreate](https://apisof.net/catalog/System.Uri.TryCreate(String,UriKind,Uri)) is for?",
                                           "updatedAt":  "2019-09-23T14:25:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNDEzMzYwMg==",
                                           "createdAt":  "2019-09-23T14:49:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "andrau",
                                           "body":  "Well, it\u0027s a little better than using try-catch but still would require plastering the code with explicit checks while the intention is only to be able to see what went wrong in the logs if somebody breaks the configuration. \r\n\r\nOf course you could argue that proper defensive programming does require explicit checks but even then the exception would be more helpful with the broken URI in the message when someone decides against the check (or simply forgets to implement one).",
                                           "updatedAt":  "2019-09-23T14:49:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNDE4ODgxMA==",
                                           "createdAt":  "2019-09-23T16:57:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidsh",
                                           "body":  "\u003edesired: \"Invalid URI: The format of the URI \u0027foo//invalid\u0027 could not be determined.\"\r\nWould that be safe or do you think this would disclose too much information?\r\n\r\nI don\u0027t think there are any issues about \u0027safety\u0027 or disclosure here. We already have error message text that shows things like \"invalid header X\" for our Http APIs (where \u0027X\u0027 represents the invalid header itself). I think this would be an ok enhancement to our error message text.\r\n\r\nFeel free to submit a PR for a change like this.",
                                           "updatedAt":  "2019-09-23T16:57:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNDE5MDk5Ng==",
                                           "createdAt":  "2019-09-23T17:02:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "scalablecory",
                                           "body":  "This could result in some of those old http://user:password@foo.com URLs getting logged, but that is probably a rare case.",
                                           "updatedAt":  "2019-09-23T17:02:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6K-auu",
                                           "createdAt":  "2024-09-05T12:58:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Anderman",
                                           "body":  "Can I still create a PR for this issue",
                                           "updatedAt":  "2024-09-05T12:58:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6K-sQR",
                                           "createdAt":  "2024-09-05T13:29:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "What about exposing potentially sensitive querystring parameters?\r\n\r\nThere\u0027s been a recent set of changes across many libraries including OpenTelemetry ones to redact query string values by default as that was considered a security vulnerability.\r\n\r\nThere is also this:\r\n- https://github.com/dotnet/runtime/issues/93221",
                                           "updatedAt":  "2024-09-05T13:29:45Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Message of UriFormatException does not include offending URI",
        "labels":  [
                       "enhancement",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/31173",
        "createdAt":  "2019-10-15T16:55:59Z",
        "number":  31173,
        "author":  "stephentoub",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-03-01T00:19:16Z",
        "body":  "PR https://github.com/dotnet/corefx/pull/41772 rewrote EscapeString with safe code, and it not only removed unsafe code from a key networking-exposed area of the system, it also resulting in performance benefits and cleaner code.  We should look at doing the same thing for the other direction with UnescapeString.  It\u0027s likely to be a bit more challenging, as it currently has more modes for configuration.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOkon8IA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Sifwg",
                                           "createdAt":  "2024-11-06T01:23:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of our [issue cleanup automation](https://github.com/dotnet/runtime/blob/main/docs/issue-cleanup.md).\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-11-06T01:23:54Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[Uri] Rewrite UriHelper.UnescapeString to remove unsafe code and improve perf",
        "labels":  [
                       "enhancement",
                       "area-System.Net",
                       "reduce-unsafe"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/1475",
        "createdAt":  "2019-10-21T14:04:17Z",
        "number":  1475,
        "author":  "onatm",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODBIrVA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cimdalli",
                                            "createdAt":  "2019-10-21T14:14:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "yidov",
                                            "createdAt":  "2019-10-21T14:16:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "idursun",
                                            "createdAt":  "2019-10-21T14:21:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cjheppell",
                                            "createdAt":  "2019-10-21T14:58:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TheEadie",
                                            "createdAt":  "2019-10-21T14:59:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Greg-Smulko",
                                            "createdAt":  "2019-10-21T15:02:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "allymparker",
                                            "createdAt":  "2019-10-21T15:27:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "skynyrd",
                                            "createdAt":  "2019-10-21T20:33:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ozanberk",
                                            "createdAt":  "2019-10-21T20:38:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "am11",
                                            "createdAt":  "2019-10-29T05:07:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MichaCo",
                                            "createdAt":  "2025-04-12T07:25:27Z"
                                        }
                                    ],
                          "totalCount":  11
                      },
        "updatedAt":  "2024-05-14T02:43:17Z",
        "body":  "Currently, `System.Net.NetworkInformation.IPInterfaceProperties.DnsSuffix` property returns only the `search` keyword\u0027s value from `resolv.conf` when there is exactly one entry on the line where `search` is present.\r\n\r\nAccording to [resolv.conf](https://linux.die.net/man/5/resolv.conf) manual, there could be multiple entries for a given search keyword.\r\n\r\nFollowing the documentation, you can also see that the `domain` keyword could be used as the first search domain when specified.\r\n\r\nAdditionally, when both of the keywords are specified, the last one will be used as the search domain:\r\n\r\n\u003e The domain and search keywords are mutually exclusive. If more than one instance of these keywords is present, the last instance wins.\r\n\r\nReturning multiple search domain entries (DNS suffixes) would break the backward compatibility. However, there should be a way for Unix family OSes to acquire this data somehow and the `domain` keyword should be used as well.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOfbdnGA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0NDY4NDMwNg==",
                                           "createdAt":  "2019-10-21T20:05:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "onatm",
                                           "body":  "@davidsh could you also add `os-mac-os-x` label as well?",
                                           "updatedAt":  "2019-10-21T20:05:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0NzEzOTY2NQ==",
                                           "createdAt":  "2019-10-28T20:49:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "I agree that `domain` should be supported and it probably should take precedence over `search` as well. \r\nAs far as list of all domains DNS is willing to search: that would need new API. Also current structure assumes that this is per interface.  However that is not true in practice on Unix systems where DNS resolver is global per system (or container) ",
                                           "updatedAt":  "2019-10-28T20:49:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0NzIwNTAwNg==",
                                           "createdAt":  "2019-10-29T00:33:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "note that OSX allows per interface configuration\r\n```\r\nnetworksetup -listallnetworkservices\r\nnetworksetup -getsearchdomains \u003cnetworkservice\u003e\r\n```\r\nBut we currently do not use that interface so we fall back to processing /etc/resolv.conf. \r\n",
                                           "updatedAt":  "2019-10-29T00:33:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5WtKxf",
                                           "createdAt":  "2023-03-04T09:46:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "onatm",
                                           "body":  "Since I am the author of this issue, I\u0027d like to take part in tackling this issue. However, I need some guidance if someone from the team could point me to the right direction.",
                                           "updatedAt":  "2023-03-04T09:46:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59t2cY",
                                           "createdAt":  "2024-05-14T02:43:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "Are you still interested in taking this @onatm? If not, it seems easy enough to just get it done. \r\n\r\nhttps://github.com/dotnet/runtime/tree/main/docs/workflow#build-requirements may be good start. \r\nMake sure you can build and run tests before making code changes. \r\n\r\nYou can perhaps extend https://github.com/dotnet/runtime/blob/b88972ab585fa4c9b9d4a97045c514b0e8571e52/src/libraries/System.Net.NetworkInformation/tests/FunctionalTests/DnsParsingTests.cs#L15  to have example with `domain`. But it seems like we are missing coverage for cases when there are multiple domains as well multiple `search` directives. I did not find documentation about precedence of `domain` vs  `search`. Perhaps some empiric tests.\r\n\r\nhttps://www.man7.org/linux/man-pages/man5/resolv.conf.5.html\r\n\r\nwhat at it it may be nice to close the test gap as well.  \r\n\r\n",
                                           "updatedAt":  "2024-05-14T02:43:16Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "System.Net.NetworkInformation.IPInterfaceProperties.DnsSuffix is not working as expected on Unix family OSes",
        "labels":  [
                       "enhancement",
                       "area-System.Net",
                       "os-linux",
                       "os-mac-os-x",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/31300",
        "createdAt":  "2019-10-25T13:20:46Z",
        "number":  31300,
        "author":  "FailedShack",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODAkhIA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "spazmodius",
                                            "createdAt":  "2025-03-27T15:37:50Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-08-20T13:34:45Z",
        "body":  "I was looking to use `System.Uri` to remove empty segments from URLs as its [documentation](https://docs.microsoft.com/en-us/dotnet/api/system.uri?view=netframework-4.8#remarks) claims.\r\n\r\n\u003e As part of canonicalization in the constructor for some schemes, dot-segments and empty segments (/./, /../, and //) are compacted (in other words, they are removed). The schemes for which URI will compact these sequences include http, https, tcp, net.pipe, and net.tcp.\r\n\r\nHowever, it appears that empty segments introduced by two consecutive slashes are not removed.\r\n\r\n![SystemUri](https://user-images.githubusercontent.com/39192928/67574125-273d3f80-f73a-11e9-8087-efcc26e6df29.png)\r\n\r\nAn URL like `http://example.com//oops////` should become `http://example.com/oops`.\r\nThis is reproducible on the latest version of .NET Core (3.0.100) as well as .NET Framework 4.5.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOiQYaug==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0NjQ4MTUyOA==",
                                           "createdAt":  "2019-10-25T19:24:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "antiufo",
                                           "body":  "It seems like browsers also leave empty segments (`//`) intact, while resolving/simplifying `.` and `..` segments. `System.Uri` behaves in the same way.",
                                           "updatedAt":  "2019-10-25T19:24:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0NzM2NzEwNA==",
                                           "createdAt":  "2019-10-29T11:01:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "FailedShack",
                                           "body":  "@antiufo I believe it actually does make sense for browsers to leave them in, as this kind of URI normalization does technically change semantics and it\u0027s up to the server to handle it in some way or another. I would however [hope no-one relies on that kind of behavior](https://xkcd.com/1172/).\r\n\r\nI think it\u0027s desirable to be able to perform this normalization in some way, given that that the most common choice is to handle these URIs the same way, Apache2 does it by default, for example.\r\nThe truth is that while they it is valid to have empty path segments in an URL, they are usually the result of bugs in client-side code. They are also against the recommendations of [RFC 1630](https://www.ietf.org/rfc/rfc1630.txt), which and I quote states:\r\n\r\n\u003e The path is interpreted in a manner dependent on the protocol being used.  However, when it contains slashes, these must imply a hierarchical structure.\r\n\r\n`///` does not imply a hierarchical structure, you would have empty folder names.\r\n\r\nIn any case, the documentation is incorrect in stating that this normalization is applied.",
                                           "updatedAt":  "2019-10-29T11:01:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0NzQ0MTg1Nw==",
                                           "createdAt":  "2019-10-29T14:16:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "antiufo",
                                           "body":  "On the other hand, normalizing empty segments would mean that .NET would be unable to represent URLs that browsers are able to represent.\r\n\r\nWhile the RFC might recommend against empty segments, they are sometimes used, and not just by erroneous client software.\r\n\r\n[https://en.wikipedia.org/wiki///](https://en.wikipedia.org/wiki///) (disambiguation page for double slash character on Wikipedia) is for example a valid URL that contains two empty segments.\r\n\r\n",
                                           "updatedAt":  "2019-10-29T14:16:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0Nzk2NzgwMA==",
                                           "createdAt":  "2019-10-30T15:34:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "FailedShack",
                                           "body":  "I agree the documentation should probably just be amended here.\r\nHowever, it would be nice if there was a utility method available to perform this normalization if desired. Otherwise, you have to rely on a workaround like this:\r\n```cs\r\nvar parts = uri.PathAndQuery.Split(new char[] { \u0027?\u0027 }, 2);\r\nparts[0] = Regex.Replace(parts[0], \"/+\", \"/\");\r\nuri.PathAndQuery = string.Join(\"?\", parts);\r\n```\r\nIt\u0027s not terrible but it feels a little roundabout and it\u0027s not entirely obvious.",
                                           "updatedAt":  "2019-10-30T15:34:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3MTc4NjE5MQ==",
                                           "createdAt":  "2020-01-07T21:41:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOELwIaA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "spazmodius",
                                                                               "createdAt":  "2025-03-27T15:37:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: We should decide if the update docs, or fix it ...",
                                           "updatedAt":  "2020-01-07T21:41:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3MjEyODE4OA==",
                                           "createdAt":  "2020-01-08T15:44:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "antiufo",
                                           "body":  "@FailedShack Out of curiosity, what is the context where you see yourself needing to remove empty segments? Do you have external data that erroneously contains double slashes? Are you composing URLs by concatenating path components?\r\n\r\nIt might be counter-intuitive to some, but not any more than typing \"https://www.reddit.com/r//programming\" in your browser\u0027s address bar and ending up with a 404 page...",
                                           "updatedAt":  "2020-01-08T15:44:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3MjE0Nzc3Ng==",
                                           "createdAt":  "2020-01-08T16:26:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "FailedShack",
                                           "body":  "\u003e \r\n\u003e \r\n\u003e @FailedShack Out of curiosity, what is the context where you see yourself needing to remove empty segments? Do you have external data that erroneously contains double slashes? Are you composing URLs by concatenating path components?\r\n\u003e \r\n\u003e It might be counter-intuitive to some, but not any more than typing \"https://www.reddit.com/r//programming\" in your browser\u0027s address bar and ending up with a 404 page...\r\n\r\nIt\u0027s a mix of both, I\u0027m handling requests from an external application that improperly concatenates path components and you end up with instances of double slashes. My application routes requests in a way similar to Flask or Spring Boot, so in cases where requests contain double slashes, patterns fail to match.\r\n\r\nYou can see an example of routing [here](https://github.com/FailedShack/USBHelperLauncher/blob/a9b4d9fe2876f98337f596f8ea00a6612918c06f/USBHelperLauncher/Net/ContentEndpoint.cs). Routing patterns are glob-like.\r\n[Here](https://github.com/FailedShack/USBHelperLauncher/blob/a9b4d9fe2876f98337f596f8ea00a6612918c06f/USBHelperLauncher/Net/Proxy.cs#L88)\u0027s where we currently fitted our normalization code cited in my previous comment.\r\n\r\n",
                                           "updatedAt":  "2020-01-08T16:26:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JBhq6",
                                           "createdAt":  "2024-08-20T13:34:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "@FailedShack \r\n\u003e ...I\u0027m handling requests from an external application that improperly concatenates path components...\r\n\r\nWould it be possible to fix the improper concatenation at the source then?",
                                           "updatedAt":  "2024-08-20T13:34:36Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "[Uri] System.Uri does not compact empty path segments",
        "labels":  [
                       "bug",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/1895",
        "createdAt":  "2020-01-18T01:50:49Z",
        "number":  1895,
        "author":  "jaredpar",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-12-05T15:54:18Z",
        "body":  "The test `ConnectAsync_NotWebSocketServer_ThrowsWebSocketExceptionWithMessage` is failing and blocking the libraries linux outerloop jobs. \r\n\r\nFailure stack:\r\n\r\n```\r\n    System.Net.WebSockets.Client.Tests.ConnectTest.ConnectAsync_NotWebSocketServer_ThrowsWebSocketExceptionWithMessage(server: ws://2a026e6b-eb9b-43f4-afcf-a1a94b87027e/, exceptionMessage: \"Unable to connect to the remote server\", errorCode: Faulted) [FAIL]\r\n      Assert.Throws() Failure\r\n      Expected: typeof(System.Net.WebSockets.WebSocketException)\r\n      Actual:   typeof(System.Threading.Tasks.TaskCanceledException): The operation was canceled.\r\n      ---- System.Threading.Tasks.TaskCanceledException : The operation was canceled.\r\n      Stack Trace:\r\n        /_/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/ConnectHelper.cs(117,0): at System.Net.Http.ConnectHelper.ConnectEventArgs.OnCompleted(SocketAsyncEventArgs _)\r\n        /_/src/libraries/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEventArgs.cs(650,0): at System.Net.Sockets.SocketAsyncEventArgs.FinishConnectByNameAsyncFailure(Exception exception, Int32 bytesTransferred, SocketFlags flags)\r\n        /_/src/libraries/System.Net.Sockets/src/System/Net/Sockets/MultipleConnectAsync.cs(339,0): at System.Net.Sockets.MultipleConnectAsync.AsyncFail(Exception e)\r\n        /_/src/libraries/System.Net.Sockets/src/System/Net/Sockets/MultipleConnectAsync.cs(402,0): at System.Net.Sockets.MultipleConnectAsync.CallAsyncFail(Object ignored)\r\n        /_/src/libraries/System.Net.Sockets/src/System/Net/Sockets/MultipleConnectAsync.cs(361,0): at System.Net.Sockets.MultipleConnectAsync.\u003cCancel\u003eb__20_0(Object s)\r\n        /_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs(2380,0): at System.Threading.Tasks.Task.InnerInvoke()\r\n        /_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs(2359,0): at System.Threading.Tasks.Task.\u003c\u003ec.\u003c.cctor\u003eb__274_0(Object obj)\r\n        /_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs(300,0): at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(Thread threadPoolThread, ExecutionContext executionContext, ContextCallback callback, Object state)\r\n        /_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs(2333,0): at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task\u0026 currentTaskSlot, Thread threadPoolThread)\r\n        /_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs(2258,0): at System.Threading.Tasks.Task.ExecuteEntryUnsafe(Thread threadPoolThread)\r\n        /_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs(2243,0): at System.Threading.Tasks.Task.ExecuteFromThreadPool(Thread threadPoolThread)\r\n        /_/src/libraries/System.Private.CoreLib/src/System/Threading/ThreadPool.cs(659,0): at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n        /_/src/coreclr/src/System.Private.CoreLib/src/System/Threading/ThreadPool.CoreCLR.cs(29,0): at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()\r\n        --- End of stack trace from previous location ---\r\n        /_/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/ConnectHelper.cs(55,0): at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)\r\n        /_/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs(661,0): at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)\r\n        /_/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs(665,0): at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n        /_/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs(331,0): at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n        /_/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs(523,0): at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n        /_/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/RedirectHandler.cs(33,0): at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n        /_/src/libraries/System.Net.WebSockets.Client/src/System/Net/WebSockets/WebSocketHandle.Managed.cs(171,0): at System.Net.WebSockets.WebSocketHandle.ConnectAsyncCore(Uri uri, CancellationToken cancellationToken, ClientWebSocketOptions options)\r\n        /_/src/libraries/System.Net.WebSockets.Client/src/System/Net/WebSockets/ClientWebSocket.cs(152,0): at System.Net.WebSockets.ClientWebSocket.ConnectAsyncCore(Uri uri, CancellationToken cancellationToken)\r\n        ----- Inner Stack Trace -----\r\n        /_/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/ConnectHelper.cs(117,0): at System.Net.Http.ConnectHelper.ConnectEventArgs.OnCompleted(SocketAsyncEventArgs _)\r\n        /_/src/libraries/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEventArgs.cs(650,0): at System.Net.Sockets.SocketAsyncEventArgs.FinishConnectByNameAsyncFailure(Exception exception, Int32 bytesTransferred, SocketFlags flags)\r\n        /_/src/libraries/System.Net.Sockets/src/System/Net/Sockets/MultipleConnectAsync.cs(339,0): at System.Net.Sockets.MultipleConnectAsync.AsyncFail(Exception e)\r\n        /_/src/libraries/System.Net.Sockets/src/System/Net/Sockets/MultipleConnectAsync.cs(402,0): at System.Net.Sockets.MultipleConnectAsync.CallAsyncFail(Object ignored)\r\n        /_/src/libraries/System.Net.Sockets/src/System/Net/Sockets/MultipleConnectAsync.cs(361,0): at System.Net.Sockets.MultipleConnectAsync.\u003cCancel\u003eb__20_0(Object s)\r\n        /_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs(2380,0): at System.Threading.Tasks.Task.InnerInvoke()\r\n        /_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs(2359,0): at System.Threading.Tasks.Task.\u003c\u003ec.\u003c.cctor\u003eb__274_0(Object obj)\r\n        /_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs(300,0): at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(Thread threadPoolThread, ExecutionContext executionContext, ContextCallback callback, Object state)\r\n        /_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs(2333,0): at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task\u0026 currentTaskSlot, Thread threadPoolThread)\r\n        /_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs(2258,0): at System.Threading.Tasks.Task.ExecuteEntryUnsafe(Thread threadPoolThread)\r\n        /_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs(2243,0): at System.Threading.Tasks.Task.ExecuteFromThreadPool(Thread threadPoolThread)\r\n        /_/src/libraries/System.Private.CoreLib/src/System/Threading/ThreadPool.cs(659,0): at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n        /_/src/coreclr/src/System.Private.CoreLib/src/System/Threading/ThreadPool.CoreCLR.cs(29,0): at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()\r\n        --- End of stack trace from previous location ---\r\n        /_/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/ConnectHelper.cs(55,0): at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)\r\n        /_/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs(661,0): at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)\r\n        /_/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs(665,0): at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n        /_/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs(331,0): at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n        /_/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs(523,0): at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n        /_/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/RedirectHandler.cs(33,0): at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n        /_/src/libraries/System.Net.WebSockets.Client/src/System/Net/WebSockets/WebSocketHandle.Managed.cs(171,0): at System.Net.WebSockets.WebSocketHandle.ConnectAsyncCore(Uri uri, CancellationToken cancellationToken, ClientWebSocketOptions options)\r\n        /_/src/libraries/System.Net.WebSockets.Client/src/System/Net/WebSockets/ClientWebSocket.cs(152,0): at System.Net.WebSockets.ClientWebSocket.ConnectAsyncCore(Uri uri, CancellationToken cancellationToken)\r\n  Finished:    System.Net.WebSockets.Client.Tests\r\n```\r\n\r\nThis test has been failing for 2+ days. \r\n\r\nExample Builds: \r\n- https://dev.azure.com/dnceng/9ee6d478-d288-47f7-aacc-f6e6d082ae6d/_apis/build/Builds/487498\r\n- https://dev.azure.com/dnceng/9ee6d478-d288-47f7-aacc-f6e6d082ae6d/_apis/build/Builds/485926",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOlj5h8w==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3NTg1NDgyMQ==",
                                           "createdAt":  "2020-01-18T01:51:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "Note this failure seems to come only in the following queues:\r\n- netcoreapp5.0-Linux-Release-arm-(Debian.9.Arm32.Open)Ubuntu.1804.ArmArch.Open\r\n- netcoreapp5.0-Linux-Release-arm64-(Ubuntu.1804.ArmArch.Open)Ubuntu.1804.ArmArch.Open\r\n",
                                           "updatedAt":  "2020-01-18T01:51:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5MDAxMTYzNQ==",
                                           "createdAt":  "2020-02-23T00:11:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "The test was disabled on all platforms in PR #1896 ...",
                                           "updatedAt":  "2020-02-23T00:11:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6WPmHz",
                                           "createdAt":  "2024-12-05T15:44:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of our [issue cleanup automation](https://github.com/dotnet/runtime/blob/main/docs/issue-cleanup.md).\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-12-05T15:44:11Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "ConnectAsync_NotWebSocketServer_ThrowsWebSocketExceptionWithMessage failing",
        "labels":  [
                       "area-System.Net",
                       "disabled-test",
                       "test-run-core"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/31628",
        "createdAt":  "2020-02-02T12:58:45Z",
        "number":  31628,
        "author":  "AgnesAarthy",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCKMTOQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "shooresh-golzari-cko",
                                            "createdAt":  "2022-01-17T11:38:33Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2022-01-17T11:59:06Z",
        "body":  "I am running the same code for getting the network informations in .Netcore 3.0. The Property System.Net.NetworkInformation.LinuxIPv4InterfaceProperties.get_IsDhcpEnabled() givs me the result wen it is Run in Windows Platform but throws the below issue in Linux Platform\r\n**Exception :**\r\nGetNetworkInterfaceInfo Failed: \u0027System.PlatformNotSupportedException: \r\nThe information requested is unavailable on the current platform.\r\n   \r\nat System.Net.NetworkInformation.LinuxIPv4InterfaceProperties.get_IsDhcpEnabled()",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOI6nO4g==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MTU4NzIzNw==",
                                           "createdAt":  "2020-02-03T19:50:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "The depends on the particular distribution and it is not trivial to keep up with all of them. Furthermore, somebody can just start DHCP client on an interface and that would be even more difficult to detect. \r\n\r\ncc: @tmds ",
                                           "updatedAt":  "2020-02-03T19:50:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5ODI3MzkwMA==",
                                           "createdAt":  "2020-03-12T16:10:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: It is useful information for developers. Unclear if it is possible to do -- as next step, we need someone with Linux expertise to do investigation if it is achievable at least on some distros and how.\r\n\r\nAnyone interested to do the research?",
                                           "updatedAt":  "2020-03-12T16:10:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5ODI4OTkwMQ==",
                                           "createdAt":  "2020-03-12T16:40:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "You need to integrate with whatever is managing the network. For many distros it is [NetworkManager](https://wiki.gnome.org/Projects/NetworkManager). NetworkManager has a D-Bus API which you can use from .NET with [Tmds.DBus](https://github.com/tmds/Tmds.DBus). The example on the repo readme is using NetworkManager. ",
                                           "updatedAt":  "2020-03-12T16:40:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5ODMwNDg2Mw==",
                                           "createdAt":  "2020-03-12T17:08:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e The depends on the particular distribution and it is not trivial to keep up with all of them. Furthermore, somebody can just start DHCP client on an interface and that would be even more difficult to detect.\r\n\r\nI agree, it cannot be implemented in a generic way on Linux.",
                                           "updatedAt":  "2020-03-12T17:08:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5ODMzMTEwNg==",
                                           "createdAt":  "2020-03-12T17:45:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA9_EaA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "karelz",
                                                                               "createdAt":  "2020-03-12T17:46:33Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "wfurt",
                                           "body":  "Even if that is not complete, it may be an improvement if we can talk to NetworkManager via API.  Embedded and unsupported distros can keep throwing PNSP.  ",
                                           "updatedAt":  "2020-03-12T17:45:30Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "LinuxIPv4InterfaceProperties.get_IsDhcpEnabled throws NotSupportedException",
        "labels":  [
                       "enhancement",
                       "area-System.Net",
                       "os-linux"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/31680",
        "createdAt":  "2020-02-03T21:04:24Z",
        "number":  31680,
        "author":  "Davilink",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-03-01T22:31:24Z",
        "body":  "After a few hours of investigation of why my request was proxified, i manage to find that the reason was because in my NO_PROXY variable i had only \"localhost\", but the request host was 127.0.0.1\r\nso i change my NO_PROXY variable to \"localhost,127.0.0.1\" and the request stopped to be proxyfied.\r\n\r\nhttps://github.com/dotnet/runtime/blob/60f6129b3eaef088f4b1ddc30d3320a68f396d85/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpEnvironmentProxy.cs#L231-L262\r\n\r\nmy suggestion will look like this:\r\n```csharp\r\nprivate bool IsMatchInBypassList(Uri input)\r\n{\r\n    if (_bypass != null)\r\n    {\r\n        foreach (string s in _bypass)\r\n        {\r\n            if (s[0] == \u0027.\u0027)\r\n            {\r\n                // This should match either domain it self or any subdomain or host\r\n                // .foo.com will match foo.com it self or *.foo.com\r\n                if ((s.Length - 1) == input.Host.Length \u0026\u0026\r\n                    string.Compare(s, 1, input.Host, 0, input.Host.Length, StringComparison.OrdinalIgnoreCase) == 0)\r\n                {\r\n                    return true;\r\n                }\r\n                else if (input.Host.EndsWith(s, StringComparison.OrdinalIgnoreCase))\r\n                {\r\n                    return true;\r\n                }\r\n\r\n            }\r\n            else if (string.Equals(s, input.Host, StringComparison.OrdinalIgnoreCase))\r\n            {\r\n                return true;\r\n            }\r\n            else if (string.Equals(s, \"localhost\", StringComparison.OrdinalIgnoreCase))\r\n            {\r\n                if(IPAddress.TryParse(input.Host, out var ipAddress))\r\n                {\r\n                    return IPAddress.IsLoopback(ipAddress);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n```\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPvAgjw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MzY3ODEwMw==",
                                           "createdAt":  "2020-02-08T00:53:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "scalablecory",
                                           "body":  "Does this behavior differ from how wininet/winhttp uses the wininet exception list?\r\n\r\nNote that \"localhost\" can technically be mapped to a non-loopback address, though that would be weird.",
                                           "updatedAt":  "2020-02-08T00:53:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MzY3ODk1Mw==",
                                           "createdAt":  "2020-02-08T00:59:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "I agree with @scalablecory.  This concerns me in two ways.  First, anything can be mapped to 127.0.0.1, so even if we special-case \"localhost\", we wouldn\u0027t be catching any other such mapping.  Second, \"localhost\" can be mapped to other addresses instead, and in fact some tools do that as part of simulating local access while actually doing a form of remote debugging; it seems potentially problematic for the implementation to just always assume they\u0027re related.\r\n\r\ncc: @wfurt",
                                           "updatedAt":  "2020-02-08T00:59:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MzY4NjY1OA==",
                                           "createdAt":  "2020-02-08T01:44:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Davilink",
                                           "body":  "If i want to \"NO_PROXY\" every loopback address because i use an script that\nwill dynamicly bind to any loopback ip address how will i proceed to do it?\n\nLe ven. 7 févr. 2020 19 h 59, Stephen Toub \u003cnotifications@github.com\u003e a\nécrit :\n\n\u003e I agree with @scalablecory \u003chttps://github.com/scalablecory\u003e. This\n\u003e concerns me in two ways. First, anything can be mapped to 127.0.0.1, so\n\u003e even if we special-case \"localhost\", we wouldn\u0027t be catching any other such\n\u003e mapping. Second, \"localhost\" can be mapped to other addresses instead, and\n\u003e in fact some tools do that as part of simulating local access while\n\u003e actually doing a form of remote debugging; it seems potentially problematic\n\u003e for the implementation to just always assume they\u0027re related.\n\u003e\n\u003e cc: @wfurt \u003chttps://github.com/wfurt\u003e\n\u003e\n\u003e —\n\u003e You are receiving this because you authored the thread.\n\u003e Reply to this email directly, view it on GitHub\n\u003e \u003chttps://github.com/dotnet/runtime/issues/31680?email_source=notifications\u0026email_token=AALN6NBRD4GOWA3JA2O3UIDRBX7XHA5CNFSM4KPMBCHKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOELFDX2I#issuecomment-583678953\u003e,\n\u003e or unsubscribe\n\u003e \u003chttps://github.com/notifications/unsubscribe-auth/AALN6NABHMHEMXHXQGXWPW3RBX7XHANCNFSM4KPMBCHA\u003e\n\u003e .\n\u003e\n",
                                           "updatedAt":  "2020-02-08T01:44:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4Mzc2ODEzOQ==",
                                           "createdAt":  "2020-02-08T19:17:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Davilink",
                                           "body":  "According to https://tools.ietf.org/html/rfc2606#section-2\r\n` The \".localhost\" TLD has traditionally been statically defined in\r\n      host DNS implementations as having an A record pointing to the\r\n      loop back IP address and is reserved for such use.  Any other use\r\n      would conflict with widely deployed code which assumes this use.\r\n`\r\nit seem acceptable to consider that \"localhost\" should be interpreted has loopback ip addresses, but we could use \"*.localhost\" instead\r\n\r\n```csharp\r\nprivate bool IsMatchInBypassList(Uri input)\r\n{\r\n    if (_bypass != null)\r\n    {\r\n        foreach (string s in _bypass)\r\n        {\r\n            if (s[0] == \u0027.\u0027)\r\n            {\r\n                // This should match either domain it self or any subdomain or host\r\n                // .foo.com will match foo.com it self or *.foo.com\r\n                if ((s.Length - 1) == input.Host.Length \u0026\u0026\r\n                    string.Compare(s, 1, input.Host, 0, input.Host.Length, StringComparison.OrdinalIgnoreCase) == 0)\r\n                {\r\n                    return true;\r\n                }\r\n                else if (input.Host.EndsWith(s, StringComparison.OrdinalIgnoreCase))\r\n                {\r\n                    return true;\r\n                }\r\n\r\n            }\r\n            else if (string.Equals(s, input.Host, StringComparison.OrdinalIgnoreCase))\r\n            {\r\n                return true;\r\n            }\r\n            else if (string.Equals(s, \"*.localhost\", StringComparison.OrdinalIgnoreCase))\r\n            {\r\n                if(IPAddress.TryParse(input.Host, out var ipAddress))\r\n                {\r\n                    return IPAddress.IsLoopback(ipAddress);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n```\r\n\r\n",
                                           "updatedAt":  "2020-02-08T19:20:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4Mzc5NTA1MA==",
                                           "createdAt":  "2020-02-09T01:41:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "I\u0027m wondering if there is an opportunity to improve diagnostic. It would be nice if it is easy to diagnose issues like this. \r\n\r\nIt seems strange that for \"loopback\" we would try to find all addresses but we would not do it for other names. ",
                                           "updatedAt":  "2020-02-09T01:41:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4NDE1MjE3MA==",
                                           "createdAt":  "2020-02-10T14:36:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Davilink",
                                           "body":  "I find (by googling) this page, maybe some inspiration can be taken: \r\nhttps://developer.mozilla.org/en-US/docs/Archive/Misc_top_level/No_Proxy_For_configuration\r\nLike allowing the use of ip address with CIDR to support range of ip adress in the NO_PROXY",
                                           "updatedAt":  "2020-02-10T14:41:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5NTMzMDk1Mg==",
                                           "createdAt":  "2020-03-05T16:48:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: We should find out what WinHttp and curl do and probably try to match that behavior.\r\n\r\n@Davilink is it something you can help us investigate please?",
                                           "updatedAt":  "2020-03-05T16:48:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5NTgzMzU3Ng==",
                                           "createdAt":  "2020-03-06T15:58:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Davilink",
                                           "body":  "@karelz i will try",
                                           "updatedAt":  "2020-03-06T15:58:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5Nzg4OTgyMw==",
                                           "createdAt":  "2020-03-11T21:35:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Davilink",
                                           "body":  "According to the source code of curl, the no_proxy doesn\u0027t support IP address whitelist by CIDR neither interpret localhost as go to no proxy all the loopback ip address\r\nhttps://github.com/curl/curl/blob/1d1e9e8ad7a5f35818dc7072e6fbe8a76a93e018/lib/url.c#L2044-L2116",
                                           "updatedAt":  "2020-03-11T21:35:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49qSRw",
                                           "createdAt":  "2022-02-10T05:00:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "slaneyrw",
                                           "body":  "Ruby and Go both support CIDR blocks in their no_proxy settings, so parts of the industry are already ahead of the standards in this regard.\r\n\r\nThis is become more of an issue since the deprecation of HttpClientHandler ( and the DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER env variable ).  A lot of corporate env use proxy servers and VPNs, a simple IP Address is not sufficient to cover case.",
                                           "updatedAt":  "2022-02-10T05:00:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49zrkH",
                                           "createdAt":  "2022-02-12T02:44:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "I\u0027m not sure how that relates to the original problem @slaneyrw. I would suggest to open separate issue with all related details. It seems like this could be good improvement.\r\nOut of curiosity: I\u0027m not sure how curl handler would fix this",
                                           "updatedAt":  "2022-02-12T02:44:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-8CCP",
                                           "createdAt":  "2022-03-01T22:31:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCQ8onA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wfurt",
                                                                               "createdAt":  "2022-03-02T00:08:11Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "slaneyrw",
                                           "body":  "\u003e I find (by googling) this page, maybe some inspiration can be taken: https://developer.mozilla.org/en-US/docs/Archive/Misc_top_level/No_Proxy_For_configuration Like allowing the use of ip address with CIDR to support range of ip adress in the NO_PROXY\r\n\r\n@wfurt Responding to this",
                                           "updatedAt":  "2022-03-01T22:31:24Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "Should IsMatchInBypassList accept localhost has any IP address loopback?",
        "labels":  [
                       "enhancement",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/32606",
        "createdAt":  "2020-02-20T16:56:47Z",
        "number":  32606,
        "author":  "NinoFloris",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODDAnoQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "scalablecory",
                                            "createdAt":  "2020-02-21T18:55:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Tratcher",
                                            "createdAt":  "2020-02-21T21:34:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ilmax",
                                            "createdAt":  "2020-02-22T10:03:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ikesnowy",
                                            "createdAt":  "2022-01-04T03:38:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bugproof",
                                            "createdAt":  "2022-04-21T17:24:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mariusz96",
                                            "createdAt":  "2023-04-05T10:05:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0xced",
                                            "createdAt":  "2023-05-24T16:04:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pantosha",
                                            "createdAt":  "2023-06-02T11:43:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Socolin",
                                            "createdAt":  "2023-12-22T21:20:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nozzlegear",
                                            "createdAt":  "2023-12-22T21:21:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "christianrondeau",
                                            "createdAt":  "2023-12-25T14:57:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jcoqueret",
                                            "createdAt":  "2024-01-03T08:54:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tbiplanday",
                                            "createdAt":  "2024-02-08T09:11:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "palhal",
                                            "createdAt":  "2024-03-03T15:09:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lilinus",
                                            "createdAt":  "2025-05-11T06:12:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xackus",
                                            "createdAt":  "2025-05-30T14:49:59Z"
                                        }
                                    ],
                          "totalCount":  16
                      },
        "updatedAt":  "2023-04-06T08:23:45Z",
        "body":  "Today we have UriBuilder accepting a string through `UriBuilder().Query` however as far as I know there are no tools in the framework to help you build such a string.\r\n\r\nNow if you do this as a literal it\u0027s fairly easy to prove correct but when dynamically building it you have to be mindful that query string keys and values should be properly escaped.\r\n\r\nUnder the AspNetCore namespace there\u0027s QueryHelpers https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.webutilities.queryhelpers?view=aspnetcore-3.1\r\nI would have expected something like this to be built in. It\u0027s after all an http-centric world we live in.\r\n\r\nEDIT: Hmm apparently System.Web.HttpUtility is actually available on .net core (even though System.Web itself isn\u0027t) though it seems to have bugs and isn\u0027t really modern.\r\n\r\nRelated https://github.com/dotnet/runtime/issues/31147 which was closed as a duplicate of https://github.com/dotnet/runtime/issues/29736 though I see no mention of query string apis in the latter issue.\r\n\r\nIt seems to be time to create new modern http url manipulation apis.\r\n\r\nTo clarify, I wouldn\u0027t want to have to reference AspNetCore as a framework reference in libraries.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOWUeyiw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4OTc4NzE4NQ==",
                                           "createdAt":  "2020-02-21T18:55:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA8QN-g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MihaZupan",
                                                                               "createdAt":  "2020-02-21T20:56:55Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "scalablecory",
                                           "body":  "CC @MihaZupan ",
                                           "updatedAt":  "2020-02-21T18:55:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4OTc5NDE3Nw==",
                                           "createdAt":  "2020-02-21T19:13:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidsh",
                                           "body":  "@GrabYourPitchforks ",
                                           "updatedAt":  "2020-02-21T19:13:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4OTc5NjgyNg==",
                                           "createdAt":  "2020-02-21T19:20:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "So, as a strawman, a `QueryStringBuilder` type that\u0027s kind of like a `Dictionary\u003cstring, string\u003e` but whose `ToString()` output is `\"?key1=value1\u0026key2=value2\u0026...\"`?",
                                           "updatedAt":  "2020-02-21T19:20:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4OTgwNDI2OA==",
                                           "createdAt":  "2020-02-21T19:39:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NinoFloris",
                                           "body":  "Yes! Though not to forget methods for parsing a query string as well. \r\n\r\nIcing on the cake would be designing it to be used without needing to allocate a bunch of tiny strings.\r\n\r\nAside: \r\n`System.Uri/Builder` is already plenty allocatey. It too could use a refresh, exposing more of its functionality via static methods. Primarily I miss light weight ways of interrogating urls for simple facts like `IsDefaultPort`, `IsLoopback`, `Scheme` ad-hoc parsing usually results in bugs.",
                                           "updatedAt":  "2020-02-21T19:39:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4OTgwNjQ3MA==",
                                           "createdAt":  "2020-02-21T19:45:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "cc @Tratcher ",
                                           "updatedAt":  "2020-02-21T19:45:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4OTg5NzA3Mw==",
                                           "createdAt":  "2020-02-22T00:56:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "I don\u0027t know if we would worry too much right now about a proposed `QueryBuilder` being allocate-y. If this is intended to be a simple API for users to call with minimal effort and minimal ceremony around the call sites, a simple `Dictionary\u003cstring, string\u003e`-like type is hard to beat in terms of usability and reliability.\r\n\r\nStatic high-performance APIs on `System.Uri` to answer the questions you had called out are an interesting idea. If you have a particular list you\u0027d like to see implemented go ahead and open a new issue in this repo so that we can track it separately. Thanks! :)",
                                           "updatedAt":  "2020-02-22T00:56:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4OTg5ODM3OQ==",
                                           "createdAt":  "2020-02-22T01:05:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "\u003e a simple `Dictionary\u003cstring, string\u003e`-like type\r\n\r\nPerhaps a `Dictionary\u003cstring, List\u003cstring\u003e\u003e`-like type to support arrays: `?foo[]=bar\u0026foo[]=baz`.",
                                           "updatedAt":  "2020-02-22T01:05:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4OTkwNjQxNw==",
                                           "createdAt":  "2020-02-22T02:12:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC5omZA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mariusz96",
                                                                               "createdAt":  "2023-04-11T18:08:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "scalablecory",
                                           "body":  "I don\u0027t think we would add explicit array support -- they are to my knowledge not a defined feature of URIs, with some platforms recognizing `foo=1\u0026foo=2\u0026foo=3` and others using the `[]` syntax.\r\n\r\nWe would want to design the API so that users could do either, though.",
                                           "updatedAt":  "2020-02-22T02:12:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4OTkzNzM5MA==",
                                           "createdAt":  "2020-02-22T09:34:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "It depends on the given library, how values are bound to the target type, In libraries where `foo=x\u0026foo=y` is considered as an array `foo[]=x\u0026foo[]=y` will likely map to two-dimensional arrays.\r\n\r\nThough my comment was about having multiple values for a key.",
                                           "updatedAt":  "2020-02-22T09:34:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5NTMzMzE2OQ==",
                                           "createdAt":  "2020-03-05T16:53:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODQZ6vg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nozzlegear",
                                                                               "createdAt":  "2023-12-22T21:21:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: Sounds reasonable and valuable. It would help us obsolete some of the \u0027bad\u0027 APIs on `Uri` itself.",
                                           "updatedAt":  "2020-03-05T16:53:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZR7KL",
                                           "createdAt":  "2023-04-05T17:35:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODQf8Yg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "0xced",
                                                                               "createdAt":  "2023-05-24T16:06:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Socolin",
                                                                               "createdAt":  "2023-12-22T21:20:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nozzlegear",
                                                                               "createdAt":  "2023-12-22T21:21:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "christianrondeau",
                                                                               "createdAt":  "2023-12-25T14:59:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "mariusz96",
                                           "body":  "+1, it is very weird that there\u0027s no elegant, built-in way to construct query strings for `HttpClient` without `AspNetCore` dependency",
                                           "updatedAt":  "2023-04-06T08:23:45Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "[Uri] Add QueryHelpers type",
        "labels":  [
                       "api-suggestion",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/33378",
        "createdAt":  "2020-03-09T15:42:31Z",
        "number":  33378,
        "author":  "scalablecory",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBMbVlw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "geoffkizer",
                                            "createdAt":  "2020-08-05T03:49:16Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2022-06-02T07:21:44Z",
        "body":  "*Edit by @antonfirsov:*\r\n\r\nthis issue has been reopened to track the missing feature, and the related disabled test (see #70089). We should not use `getaddrinfo_a` as proposed by the original opening comment, since it turned out to be sub-optimal (see #48666).\r\n\r\n-------\r\n\r\nWe should use [getaddrinfo_a](https://linux.die.net/man/3/getaddrinfo_a) on Linux for async name resolution. It supports cancellation as well, bringing us in line with Windows support. See [sample code](https://github.com/scalablecory/getaddrinfo_a/blob/master/test.c) for a usage example.\r\n\r\nNote: Today we do async over sync on Linux.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORDgzbQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5NjYwODMyNA==",
                                           "createdAt":  "2020-03-09T15:42:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t add an area label to this Issue.\r\n\r\nCheckout [this](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md) page to find out which area owner to ping, or please add exactly one area label to help train me in the future.",
                                           "updatedAt":  "2020-03-09T15:42:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5ODI2OTY4NQ==",
                                           "createdAt":  "2020-03-12T16:02:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "up-for-grabs: We just need to add function to our PAL layer. Then call it from the C# code.\r\nShould be fairly straightforward -- the Linux code will be very similar to Windows code.",
                                           "updatedAt":  "2020-03-12T16:02:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwNzU0MDU1Ng==",
                                           "createdAt":  "2020-04-01T23:34:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA_3QVg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "scalablecory",
                                                                               "createdAt":  "2020-04-02T00:37:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "karelz",
                                                                               "createdAt":  "2020-04-02T01:03:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "gfoidl",
                                           "body":  "I\u0027d like to give this a try. ",
                                           "updatedAt":  "2020-04-01T23:34:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwOTQxNzMyMw==",
                                           "createdAt":  "2020-04-05T13:31:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gfoidl",
                                           "body":  "I have a question regarding the workflow for testing the native parts.\r\n\r\nSteps I\u0027ve done (on linux):\r\n\r\n1. [building](https://github.com/dotnet/runtime/blob/master/docs/workflow/building/libraries/README.md)\r\n1. `$ cd src/libraries/System.Net.NameResolution/tests/PalTests`\r\n1. `$ pushd ../../src \u0026 dotnet build \u0026 popd \u0026 dotnet build /t:test`\r\n1. verify tests pass\r\n1. make changes in native code\r\n\r\nin a second shell:\r\n1. `$ cd /src/libraries/Native`\r\n1. `$ ./build-native.sh debug x64`\r\n1. make sure build is OK\r\n\r\nWhen I test then the changes in native code aren\u0027t picked up. Even if i delete `libSystem.Native.so` then the test pass -- I\u0027d expect them to fail without the native counterpart.\r\n\r\nHow can I ensure the current `libSystem.Native.so` is used?\r\n\r\nAdditional info:\r\n.NET Core 5 SDK was installed before a build of the repo was done.\r\nNo custom environment variables got set or any of the default variables got overwritten.",
                                           "updatedAt":  "2020-04-05T13:31:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwOTQ1NjA5MA==",
                                           "createdAt":  "2020-04-05T17:53:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gfoidl",
                                           "body":  "```bash\r\nLD_DEBUG=libs dotnet build /t:test 2\u003e\u00261 \u003e /dev/null | grep System.Native\r\n```\r\noutputs\r\n```\r\n       678:\tcalling init: /home/runtime/.dotnet/shared/Microsoft.NETCore.App/5.0.0-preview.3.20169.1/libSystem.Native.so\r\n       701:\tcalling init: /home/runtime/.dotnet/shared/Microsoft.NETCore.App/5.0.0-preview.3.20169.1/libSystem.Native.so\r\n       701:\tcalling fini: /home/runtime/.dotnet/shared/Microsoft.NETCore.App/5.0.0-preview.3.20169.1/libSystem.Native.so [0]\r\n       678:\tcalling fini: /home/runtime/.dotnet/shared/Microsoft.NETCore.App/5.0.0-preview.3.20169.1/libSystem.Native.so [0]\r\n```\r\nso the native-libs get loaded from the shared installations (from the build) and not from the `artifacts`-location.\r\n\r\nWith some hacks* this could be solved, but is there a \"nice way\" to use the currently built native libraries in the managed tests?\r\n\r\n\\* even `LD_PRELOAD` doesn\u0027t do the job",
                                           "updatedAt":  "2020-04-05T19:01:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwOTQ1ODMyMg==",
                                           "createdAt":  "2020-04-05T18:08:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBALgtA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gfoidl",
                                                                               "createdAt":  "2020-04-05T18:19:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "I agree it\u0027d be nice if there were a better solution (and there may be... @ViktorHofer?), but I always just copy the built binaries into the testhost shared folder after building them.",
                                           "updatedAt":  "2020-04-05T18:08:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ELCI8",
                                           "createdAt":  "2022-06-01T15:16:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCftp3g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "antonfirsov",
                                                                               "createdAt":  "2022-06-01T16:20:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "rzikm",
                                           "body":  "Opening as the async name resolution implementation introduced in #34633 was reverted in https://github.com/dotnet/runtime/pull/48666",
                                           "updatedAt":  "2022-06-01T15:19:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EODNt",
                                           "createdAt":  "2022-06-02T07:21:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ViktorHofer",
                                           "body":  "\u003e so the native-libs get loaded from the shared installations (from the build) and not from the artifacts-location.\r\n\r\nThat looks like a bug as the testhost should be the single point of truth. @gfoidl can you please open a separate issue for that with repro steps so that we can take a look? ",
                                           "updatedAt":  "2022-06-02T07:21:44Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "Use async name resolution on Linux",
        "labels":  [
                       "enhancement",
                       "area-System.Net",
                       "os-linux",
                       "tenet-performance",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/33746",
        "createdAt":  "2020-03-19T04:08:44Z",
        "number":  33746,
        "author":  "Bio2hazard",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-04-06T15:59:25Z",
        "body":  "I encountered the inconsistency on .net core 3.1 running on windows.\r\n\r\nThis is probably related to https://github.com/dotnet/runtime/issues/30474 but I wanted to point out a few more inconsistencies that make it feel like a bug.\r\n\r\nIn the RFC1035 Spec, Section 2.3.4 ( https://tools.ietf.org/html/rfc1035#section-2.3.4 ) it states the size limits as:\r\nlabels          63 octets or less\r\nnames           255 octets or less\r\n\r\n.net core correctly identifies the label size limit.\r\n\r\n63 Characters results in the HostNameType being identified as Dns...\r\n```\r\nUri.TryCreate($\"https://aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.com\", UriKind.Absolute, out var uri);\r\n// uri.HostNameType = Dns\r\n```\r\n\r\nWhile 64 Characters results in the HostNameType being identified as Basic\r\n```\r\nUri.TryCreate($\"https://aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.com\", UriKind.Absolute, out var uri);\r\n// uri.HostNameType = Basic\r\n```\r\n\r\nWhen the HostNameType is identified as Basic, it enforces a maximum length of 256 characters:\r\n\r\nThis is 256 characters and works.\r\n```\r\nUri.TryCreate($\"https://aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.com\", UriKind.Absolute, out var uri);\r\n// uri.HostNameType = Basic\r\n```\r\n\r\nThis is 257 characters and does not work.\r\n```\r\nUri.TryCreate($\"https://aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.com\", UriKind.Absolute, out var uri);\r\n// Uri.TryCreate returns false.\r\n```\r\n\r\nThis also applies to multiple labels, so long as a single label is at least 64 characters. In this example we have 263 characters across 4 x 64 character labels ( + .com ):\r\n```\r\nUri.TryCreate($\"https://aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.com\", UriKind.Absolute, out var uri);\r\n// Uri.TryCreate returns false.\r\n```\r\n\r\nThis is all well and good, but the behavior changes completely once all labels are below 64 characters per label.\r\n\r\nThis is 259 characters ( 4 * 63 character labels + .com ) and should not be a valid DNS based on the RFC Spec, and yet: \r\n```\r\nUri.TryCreate($\"https://aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.com\", UriKind.Absolute, out var uri);\r\n// uri.HostNameType = Dns\r\n```\r\n\r\nAnd as an extreme example to drive the point home:\r\n\r\nThis is 65475 characters ( 1023 * 63 character labels + .com ) and should most definitely not be a valid DNS based on the RFC Spec, but also succeeds and is identified as a Dns entry.\r\n```\r\nUri.TryCreate($\"https://aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.com\", UriKind.Absolute, out var uri);\r\n// uri.HostNameType = Dns\r\n```\r\n\r\nThe behavior that it correctly differentiates between DNS and Basic based on the label size, but then only enforces the overall maximum length for Basic feels like a bug. Why impose an ( almost correct ) size limit on basic, but not DNS ?\r\n\r\nUri.TryCreate seems to correctly handle special characters and formatting of the Uri, even fairly obtuse edge cases, which further makes the lack of the length check seem uncharacteristic for the method.\r\n\r\nI also wonder if this could be exploitable if a site is using Uri.TryCreate to validate a user-entered hostname. A bad actor would have the opportunity to submit a much larger payload than the developer might intend or expect.\r\n\r\nEither way, I was very surprised by this behavior and as such wanted to report it. 👍 ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOQP7Cdg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwMDk5NDU2MQ==",
                                           "createdAt":  "2020-03-19T05:22:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "We should respect the length restrictions, marking #30474 as a duplicate of this.",
                                           "updatedAt":  "2020-03-19T05:22:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwMTI2Nzc0Nw==",
                                           "createdAt":  "2020-03-19T16:09:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: If it does not complicate code too much and if the parsing perf overhead is negligible, we would be ok with taking such change.\r\nIt will be a technical breaking change. Unclear if there are scenarios where the Uri is not used for HTTP connection - which would throw.\r\nHaving early validation is in general useful.",
                                           "updatedAt":  "2020-03-19T16:09:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5A_sJ2",
                                           "createdAt":  "2022-04-06T15:59:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "poenn",
                                           "body":  "System.Uri also handles local file system paths with the file:// scheme, applying a length limit would potentially break this usage.",
                                           "updatedAt":  "2022-04-06T15:59:25Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[Uri] Domain name length restrictions are not always enforced",
        "labels":  [
                       "bug",
                       "area-System.Net",
                       "breaking-change"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/34399",
        "createdAt":  "2020-04-01T14:40:53Z",
        "number":  34399,
        "author":  "maxthedread",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC9PcpQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "moeshin",
                                            "createdAt":  "2023-03-23T02:57:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lostmsu",
                                            "createdAt":  "2024-12-06T04:51:08Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-02-19T19:47:13Z",
        "body":  "dotnet --version\r\n3.1.201\r\n\r\n`_httpListener.Prefixes.Add(\"http://[::1]:54321/meow/\");`\r\n\r\nworks fine on Windows but fails on linux-x64 (WSL, Ubuntu)\r\n\r\nexception: System.Net.HttpListenerException (400): Invalid port in prefix.\r\n   at System.Net.HttpEndPointManager.AddPrefixInternal(String p, HttpListener listener)\r\n   at System.Net.HttpEndPointManager.AddListener(HttpListener listener)\r\n   at System.Net.HttpListener.Start()\r\n\r\nAdditionally the behavior in regards of IPv4 IPv6 on Windows and Linux is different. With the prefix:\r\nhttp://localhost:54321/meow/\r\n\r\nHttpListener binds both to IPv4 and IPv6 on Windows. But not on Linux.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnx6lDw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwNzI5MDAyNg==",
                                           "createdAt":  "2020-04-01T14:40:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "### Area Owners\n@dotnet/ncl",
                                           "updatedAt":  "2020-04-01T14:40:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwNzMxMDkwMw==",
                                           "createdAt":  "2020-04-01T15:16:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidsh",
                                           "body":  "\u003eworks fine on Windows but fails on linux-x64 (WSL, Ubuntu)\r\n\r\nFYI, the implementation of HttpListener on Linux is substantially different than Windows.  Windows uses the original .NET Framework (ported to .NET Core) implemented layered on top of http.sys. Linux uses a separate implementation originally from Mono.",
                                           "updatedAt":  "2020-04-01T15:16:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KwMGZ",
                                           "createdAt":  "2022-09-21T19:39:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "josemoliver",
                                           "body":  "Similar issue here, works fine in Windows 11 (.net 6.0.401) but fails in Raspberry Pi OS (linux-arm 6.0.401)\r\n_System.Net.HttpListenerException (400): Invalid path._\r\n\r\n`listener.Prefixes.Add(\"http://*:\"+port+\"/\"+path);`\r\n\r\nhttps://github.com/josemoliver/WeatherServer/blob/main/Program.cs",
                                           "updatedAt":  "2022-09-21T19:39:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fHqUP",
                                           "createdAt":  "2025-02-19T19:37:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEO-T3g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "anigo333",
                                                                               "createdAt":  "2025-02-19T19:54:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "kjpgit",
                                                                               "createdAt":  "2025-04-20T01:30:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "shapea",
                                           "body":  "This was reported nearly 5 years ago?\n\nThe issue here is a clear bug in the .NET code under `src/System/Net/Managed/HttpEndPointManager.cs` in `AddPrefixInternal`. This method is used for all HttpListener prefixes on non-Windows hosts and uses very basic string parsing which isn\u0027t capable of handling IPv6 addresses in any form due to simply treating the first `:` character as the beginning of the port, which obviously doesn\u0027t work for IPv6 addresses which contain `:` characters.\n\nSee: https://github.com/dotnet/runtime/blob/0ddd0c4062471fc3623b5963a8f9461c5308a82b/src/libraries/System.Net.HttpListener/src/System/Net/Managed/HttpEndPointManager.cs#L80",
                                           "updatedAt":  "2025-02-19T19:47:13Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "IPv6 System.Net.HttpListenerException (400): Invalid port in prefix.",
        "labels":  [
                       "bug",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/34856",
        "createdAt":  "2020-04-11T18:06:37Z",
        "number":  34856,
        "author":  "sakno",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODJkrNw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NN---",
                                            "createdAt":  "2021-02-09T21:50:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0xfeeddeadbeef",
                                            "createdAt":  "2025-08-01T20:47:07Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2022-06-08T18:35:20Z",
        "body":  "Explanation: MTU = [Maximum Transmission Unit](https://en.wikipedia.org/wiki/Maximum_transmission_unit)\r\n\r\nI\u0027m using `Ping` class for path MTU discovery using one of the proving method described [here](https://tools.ietf.org/html/rfc4821). My [implementation](https://gist.github.com/sakno/d348b772f0842d0336a655df69e6bbf8) sending packets with different MTU in a loop. Each iteration requires allocation of byte array in the heap. As a result, it produces a lot of garbage. It would be great to have Memory- and Span-friendly overloads that allow to reuse the same buffer.\r\n\r\n```csharp\r\npublic class Ping\r\n{\r\n  public void SendAsync(String hostNameOrAddress, TimeSpan timeout, ReadOnlyMemory\u003cbyte\u003e buffer, PingOptions options, object userToken);\r\n  public void SendAsync(IPAddress address, TimeSpan timeout, ReadOnlyMemory\u003cbyte\u003e buffer, PingOptions options, object userToken);\r\n  public void SendAsync(string hostNameOrAddress, TimeSpan timeout, ReadOnlyMemory\u003cbyte\u003e buffer, object userToken);\r\n  public void SendAsync(IPAddress address, TimeSpan timeout, ReadOnlyMemory\u003cbyte\u003e buffer, object userToken);\r\n  public PingReply Send(string hostNameOrAddress, TimeSpan timeout, ReadOnlySpan\u003cbyte\u003e buffer, PingOptions options);\r\n  public PingReply Send(IPAddress address, TimeSpan timeout, ReadOnlySpan\u003cbyte\u003e buffer, PingOptions options);\r\n  public PingReply Send(string hostNameOrAddress, TimeSpan timeout, ReadOnlySpan\u003cbyte\u003e buffer);\r\n  public PingReply Send(IPAddress address, TimeSpan timeout, ReadOnlySpan\u003cbyte\u003e buffer);\r\n  public Task\u003cPingReply\u003e SendPingAsync(string hostNameOrAddress, TimeSpan timeout, ReadOnlyMemory\u003cbyte\u003e buffer, PingOptions options);\r\n  public Task\u003cPingReply\u003e SendPingAsync(IPAddress address, TimeSpan timeout, ReadOnlyMemory\u003cbyte\u003e buffer, PingOptions options);\r\n  public Task\u003cPingReply\u003e SendPingAsync(string hostNameOrAddress, TimeSpan timeout, ReadOnlyMemory\u003cbyte\u003e buffer);\r\n  public Task\u003cPingReply\u003e SendPingAsync(IPAddress address, TimeSpan timeout, ReadOnlyMemory\u003cbyte\u003e buffer);  \r\n}\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORI-N5w==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxMjQ3OTcyOA==",
                                           "createdAt":  "2020-04-11T18:06:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. Please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-04-11T18:06:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxMjQ4MTc5NA==",
                                           "createdAt":  "2020-04-11T18:16:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sakno",
                                           "body":  "I\u0027m ready to fix that and create pull request if you will mark this issue with up-for-grabs label.",
                                           "updatedAt":  "2020-04-11T18:16:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxMjQ4MzA4NA==",
                                           "createdAt":  "2020-04-11T18:22:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidsh",
                                           "body":  "Thank you for the issue. It looks like you are proposing several new APIs for the Ping class. Before you can submit a PR, these new APIs need to be reviewed and approved with our API review [process](https://github.com/dotnet/runtime/blob/master/docs/project/api-review-process.md).\r\n",
                                           "updatedAt":  "2020-04-11T18:22:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxMjQ4MzE3OQ==",
                                           "createdAt":  "2020-04-11T18:23:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging @dotnet/ncl as an [area owner](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md). If you would like to be tagged for a label, please notify danmosemsft.",
                                           "updatedAt":  "2020-04-11T18:23:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxMjQ4MzI0NQ==",
                                           "createdAt":  "2020-04-11T18:23:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidsh",
                                           "body":  "@scalablecory ",
                                           "updatedAt":  "2020-04-11T18:23:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxMjQ4NzU1MA==",
                                           "createdAt":  "2020-04-11T18:44:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sakno",
                                           "body":  "@davidsh , I need to wait for approve, right? ",
                                           "updatedAt":  "2020-04-11T18:44:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxMjQ5OTk5NA==",
                                           "createdAt":  "2020-04-11T19:46:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidsh",
                                           "body":  "\u003e@davidsh , I need to wait for approve, right?\r\n\r\nYes. It needs to be formally reviewed and marked as \"api-approved\".",
                                           "updatedAt":  "2020-04-11T19:46:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxMjY2MjI3OA==",
                                           "createdAt":  "2020-04-12T19:09:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@sakno could you give a sample usage? How is this better than just pooling the buffers you pass in? Are you trying to pass views over one large buffer?",
                                           "updatedAt":  "2020-04-12T19:09:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxMjY3MDMzNw==",
                                           "createdAt":  "2020-04-12T20:17:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBA29eQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "danmoseley",
                                                                               "createdAt":  "2020-04-12T21:52:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "sakno",
                                           "body":  "@danmosemsft , the example in my gist which is specified in the original post. Path MTU discovery algorithm uses half-interval search between lowest and highest possible MTU values. As a result, it\u0027s not possible to pre-allocate byte arrays. `ArrayPool\u003cbyte\u003e` can\u0027t help me because I need precise length of the array. These overloads can help me because then I able to use `ArrayPool\u003cbyte\u003e` and allocate buffer once and pass slices of the same array between iterations.",
                                           "updatedAt":  "2020-04-12T20:17:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxMjY3NjU5Nw==",
                                           "createdAt":  "2020-04-12T21:12:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "svick",
                                           "body":  "* Is there a reason for including `SendAsync` overloads, when we have `SendPingAsync`?\r\n* Should the new overloads of `SendPingAsync` return `ValueTask\u003cPingReply\u003e`? It has the potential to avoid `Task`-related allocations.",
                                           "updatedAt":  "2020-04-12T21:12:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxMjY4NjQwNw==",
                                           "createdAt":  "2020-04-12T22:34:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sakno",
                                           "body":  "@svick , usage of `ValueTask` is useless due to request-reply nature of ICMP Echo. When using sockets, sending requests and waiting for the reply in 99,9999% cases will never be completed synchronously. Under the hood, the current implementation uses `Socket.ReceiveFromAsync` which has `Task` return type. Of course, you can derive from `SocketAsyncEventArgs` and use `ManualResetValueTaskSourceCore` to organize pool of such instances. IMHO, this approach adds a lot of complexity. Holding pool of `SocketAsyncEventArgs` probable have the same memory pressure as `Task` allocation.",
                                           "updatedAt":  "2020-04-12T22:34:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxMjc2NTQyNQ==",
                                           "createdAt":  "2020-04-13T06:03:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "svick",
                                           "body":  "@sakno `ValueTask`-returning `Socket.ReceiveFromAsync` has been accepted (https://github.com/dotnet/runtime/issues/33418), so it\u0027s likely it will be in .Net 5. And while using `ManualResetValueTaskSourceCore` manually does add some complexity, if the return type is `Task`, you close that door forever. Also, if https://github.com/dotnet/runtime/issues/13633 is enabled, implementing allocation-avoiding `ValueTask` methods becomes trivial.",
                                           "updatedAt":  "2020-04-13T06:03:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxMjc4MjQzNg==",
                                           "createdAt":  "2020-04-13T07:09:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBLyZwA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2020-07-29T10:53:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "sakno",
                                           "body":  "@svick , I think that `ReceiveMessageFromAsync` with `ValueTask` can be completed synchronously only if the incoming packet has been received and already placed to OS packet scheduler. In case of ICMP echo it will always be false just because CPU is faster that network and at the time of `ReceiveMessageFromAsync` call, the response is not yet received.\r\n\r\nIn other words, `ReceiveMessageFromAsync` can be completed synchronously if you are receiving stream of packets (RTP or UDP) and speed of such reading is equal or less than speed of packets arrival.",
                                           "updatedAt":  "2020-04-13T07:15:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxMzAzMTYyMA==",
                                           "createdAt":  "2020-04-13T18:34:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Just a heads up that Ping on Linux will spin off a new process per call if you are not admin:\r\nhttps://github.com/dotnet/runtime/blob/f498a3171b65215ae3176598869233fee8e4da58/src/libraries/System.Net.Ping/src/System/Net/NetworkInformation/Ping.Unix.cs#L25-L29\r\nIn such scenario, I don\u0027t think the perf overhead of an allocation matters.\r\n\r\nIn general, I wonder how common is the scenario where the overloads would benefit. I am a bit torn between adding more APIs for very corner-case scenarios vs. easy to add. @wfurt @scalablecory what are your thoughts?",
                                           "updatedAt":  "2020-04-13T18:34:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxMzA1NTAwNA==",
                                           "createdAt":  "2020-04-13T19:27:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "scalablecory",
                                           "body":  "I\u0027d be okay with some spannified overloads here for consistency with rest of BCL.\r\n\r\nI would remove the `SendAsync` overloads, and consider (if implementation allows) removing the `timeout` parameter in favor of a `CancellationToken`.",
                                           "updatedAt":  "2020-04-13T19:27:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyODc0NDk3MQ==",
                                           "createdAt":  "2020-05-14T16:26:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: We would love to see some more data how important this is in the scenarios -- even if it is mostly for Windows / elevated Linux.\r\n@sakno can you share how much it showed up in your cases? Which OS do you use? Windows or elevated Linux?",
                                           "updatedAt":  "2020-05-14T16:26:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyODc5MjQ0Mg==",
                                           "createdAt":  "2020-05-14T17:52:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sakno",
                                           "body":  "@karelz , my primary OS is Linux.\r\n\r\nI agree with @scalablecory  that `CancellationToken` should be preferred over timeout. According with my work in #35461 I see no blockers, even for unprivileged user on Linux. However, it requires a lot of work.",
                                           "updatedAt":  "2020-05-14T17:52:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MzQxOTM3NA==",
                                           "createdAt":  "2020-07-03T08:20:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBJUOsw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KalleOlaviNiemitalo",
                                                                               "createdAt":  "2020-07-03T11:04:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "GSPP",
                                           "body":  "Should the timeout parameters be `TimeSpan`? If not it might be better to put the unit in the parameter name (e.g. `timeoutMilliseconds`).",
                                           "updatedAt":  "2020-07-03T08:20:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MzYxNTA4Ng==",
                                           "createdAt":  "2020-07-03T16:26:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sakno",
                                           "body":  "@GSPP , the proposed API is updated. Thanks!",
                                           "updatedAt":  "2020-07-03T16:26:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ej43n",
                                           "createdAt":  "2022-06-08T18:35:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "deeprobin",
                                           "body":  "Any things that need to be clarified or can we mark this as ready-for-review?",
                                           "updatedAt":  "2022-06-08T18:35:20Z"
                                       }
                                   ],
                         "totalCount":  20
                     },
        "title":  "Proposal: Memory and Span friendly overloads in Ping class",
        "labels":  [
                       "api-suggestion",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/34967",
        "createdAt":  "2020-04-14T19:19:11Z",
        "number":  34967,
        "author":  "Martin11175",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCsGvdQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mostafanou7",
                                            "createdAt":  "2023-01-04T12:57:46Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2021-05-04T13:45:14Z",
        "body":  "Hi all,\r\n\r\nI seem to be running into an issue with .NET Core 3.1 not negotiating NTLM credentials on receiving a redirect.\r\nUsing .NET Framework 4.5.1 (recorded in wireshark):\r\n![image](https://user-images.githubusercontent.com/2590156/79264255-305ace00-7e8c-11ea-99c7-c33b784097c2.png)\r\n\r\nWhereas in .NET Core 3.1:\r\n![image](https://user-images.githubusercontent.com/2590156/79264352-56806e00-7e8c-11ea-8342-8a0a1fb32f80.png)\r\n\r\nIn both cases, the code is as follows:\r\n```csharp\r\nusing (var client = new System.Net.WebClient())\r\n{\r\n    client.Credentials = CredentialCache.DefaultCredentials;\r\n    using (var response = client.OpenRead(URL))\r\n    {\r\n        // Process results\r\n    }\r\n}\r\n```\r\nIf we replace the `URL` with the host the original request is redirected to though, the negotiate handshake goes off properly and the request succeeds in both instances.\r\nIs there a new flag we\u0027re missing somewhere, or is this a bug in .NET Core as I\u0027ve seen similar issues with `WebClient` such as #17545 during my investigation (as we also enable Kerberos and NTLM).\r\n\r\nThanks for your help and please don\u0027t hesitate to reach out if we can provide any further information,\r\n\r\nMartin\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOJ6bg-g==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxMzYzMzUxOA==",
                                           "createdAt":  "2020-04-14T19:19:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nNotify danmosemsft if you want to be subscribed.",
                                           "updatedAt":  "2020-04-14T19:19:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxMzYzNzQ2MA==",
                                           "createdAt":  "2020-04-14T19:28:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidsh",
                                           "body":  "In general, credentials are dropped during redirects. That is done for security reasons.  So, it is by-design.\r\n\r\nBut if you want to preserve credentials during a redirect, you can use a CredentialCache object and store the default credentials against a specific uri.\r\n\r\n```c#\r\nvar cache = new CredentialCache();\r\ncache.Add(new Uri(\"http://example.com\"), \"Negotiate\", CredentialCache.DefaultCredentials);\r\nclient.Credentials = cache;\r\n```",
                                           "updatedAt":  "2020-04-14T19:28:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxMzYzOTI3Mw==",
                                           "createdAt":  "2020-04-14T19:32:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidsh",
                                           "body":  "On a further note, I will say that the behavior difference between .NET Framework and .NET Core probably still needs to be investigated/fixed.  .NET Framework would remove credentials during redirects but only if redirecting to a different hostname:port in the Uri.  For redirections within the same \u0027authority\u0027 portion of the Uri, it would preserve credentials.\r\n\r\n.NET Core, however, seems to drop credentials on any redirect regardless of where the destination uri is. That is probably an app-compat difference that needs to be addressed.",
                                           "updatedAt":  "2020-04-14T19:32:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyODc0NjMwNg==",
                                           "createdAt":  "2020-05-14T16:28:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: We should likely fix that in 5.0 to make migration from .NET Framework easier.",
                                           "updatedAt":  "2020-05-14T16:28:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2NTI0Nzk5NA==",
                                           "createdAt":  "2020-07-28T19:57:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCyFdfw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "mostafanou7",
                                                                               "createdAt":  "2023-01-04T12:57:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: Only 1 customer, there is workaround - handle the redirect yourself. Sadly, not enough time to fix it in 5.0, moving to Future.",
                                           "updatedAt":  "2020-07-28T19:57:13Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "WebClient Negotiate DefaultCredentials not handled on redirect",
        "labels":  [
                       "bug",
                       "area-System.Net",
                       "tenet-compatibility"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/35174",
        "createdAt":  "2020-04-19T07:48:06Z",
        "number":  35174,
        "author":  "ArjunVachhani",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-09-13T13:34:20Z",
        "body":  "WebSocket.ReceiveAsync returns the chunk/part of the web socket frame. ReceiveAsync should also expose the payload size of the frame. Current implementation returns Count, MessageType, and EndOfMessage. while allocating memory, it would really helpful knowing the size of the frame.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSjuAEA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxNjA2ODk5Nw==",
                                           "createdAt":  "2020-04-19T07:48:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nNotify danmosemsft if you want to be subscribed.",
                                           "updatedAt":  "2020-04-19T07:48:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxNjE0ODA4Mw==",
                                           "createdAt":  "2020-04-19T14:30:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidsh",
                                           "body":  "\u003eIt would really helpful knowing the size of the frame.\r\n\r\nWhat scenario do you have where this information would be useful?",
                                           "updatedAt":  "2020-04-19T14:30:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxNjMyODA0OQ==",
                                           "createdAt":  "2020-04-20T05:57:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ArjunVachhani",
                                           "body":  "clients can send data variable in length. allocating less or more memory leads to pressure on garbage collector.  below is sample code to read a whole frame from web-socket.\r\n\r\n\r\n```csharp\r\nvar framePayload = new Memory\u003cbyte\u003e(new byte[4 * 1000]);// \u003c-- how to allocate efficiently\r\nvar buffer = new Memory\u003cbyte\u003e(new byte[1000]);\r\nint framePayloadSize = 0;\r\ndo\r\n{\r\n\tresult = await socket.ReceiveAsync(buffer, cancellationTokenSource.Token);\r\n\tvar data = buffer.Slice(0, result.Count);\r\n\tdata.CopyTo(framePayload.Slice(framePayloadSize, result.Count));\r\n\tframePayloadSize += result.Count;\r\n} while (!result.EndOfMessage);\r\n```\r\n\r\nIf there is a property which tells size of frame then while reading first chunk of a frame we can initialize framePayload with correct size.\r\n",
                                           "updatedAt":  "2020-04-20T06:06:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxNjYwODYyMg==",
                                           "createdAt":  "2020-04-20T14:58:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "This would actually be a very nice API to add. It would require you to incur another API call though (to basically read the frame header).  \r\n\r\n- If we exposed another API to get a header information, we\u0027d need to figure out how it would interact with the existing API and what misuse looks like.\r\n- Would this API be used before every single read, or once per logical message (end of message true)? \r\n\r\n@ArjunVachhani Can you say how you\u0027d want to use this API? What would your ideal code look like?\r\n\r\ncc @BrennanConroy ",
                                           "updatedAt":  "2020-04-20T14:58:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxNjk3MDE3OA==",
                                           "createdAt":  "2020-04-21T06:00:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ArjunVachhani",
                                           "body":  "Right now `MessageType` frame level property is exposed via `WebSocketReceiveResult` class, so I think you could either expose frame payload size in `WebSocketReceiveResult` or expose a method/property on `WebSocket` which will return frame payload size and `MessageType` property.\r\n\r\n\r\n",
                                           "updatedAt":  "2020-04-21T06:00:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxNjk3MTE5NA==",
                                           "createdAt":  "2020-04-21T06:03:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "\u003e Right now MessageType frame level property is exposed via WebSocketReceiveResult class, so I think you could either expose frame payload size in WebSocketReceiveResult or expose a method/property on WebSocket which will return frame payload size and MessageType property.\r\n\r\nCan you write out some pseudo code for what this would look like? Also what do you think about the questions above? What would happen if you call it at the wrong time (ReceiveHeader twice in a row for example, does it return the same value until the message is fully consumed?)",
                                           "updatedAt":  "2020-04-21T06:03:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxODIyMzYzNQ==",
                                           "createdAt":  "2020-04-23T07:12:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ArjunVachhani",
                                           "body":  "I can think of 2 ways to read from `WebSocket`. Option 1 is closer to current implementation. Option 2 looks easier for developer and is probably more efficient as it would not require copying data around.\r\n\r\n**Option 1**\r\n```csharp \r\nwhile (socket.State == WebSocketState.Open)\r\n{\r\n\tint chunksRecieved = 0;\r\n\tint framePayloadSize = 0;\r\n\tMemory\u003cbyte\u003e framePayload = null;\r\n\tvar buffer = new Memory\u003cbyte\u003e(new byte[1000]);\r\n\tdo\r\n\t{\r\n\t\tresult = await socket.ReceiveAsync(buffer, cancellationTokenSource.Token);\r\n\r\n\t\tif (chunksRecieved == 0)\r\n\t\t\tframePayload = new Memory\u003cbyte\u003e(new byte[result.PayloadSize]); //initialize with proper size\r\n\r\n\t\tvar data = buffer.Slice(0, result.Count);\r\n\t\tdata.CopyTo(framePayload.Slice(framePayloadSize, result.Count));\r\n\t\tframePayloadSize += result.Count;\r\n\t\tchunksRecieved++;\r\n\t} while (!result.EndOfMessage);\r\n\r\n\t//process frame here\r\n}\r\n```\r\n**Option 2**\r\n```csharp\r\nwhile (socket.State == WebSocketState.Open)\r\n{\r\n\tint framePayloadReceived = 0;\r\n\tvar headerResult = await socket.ReceiveHeaderAsync(cancellationTokenSource.Token); //this will wait until frame is received. headerResult will hold MessageType \u0026 PayloadSize\r\n\tMemory\u003cbyte\u003e framePayload = new Memory\u003cbyte\u003e(new byte[headerResult.PayloadSize]); //initialize with proper size.\r\n\tdo\r\n\t{\r\n\t\tvar buffer = framePayload.Slice(framePayloadReceived, framePayload.Length - framePayloadReceived);\r\n\t\tresult = await socket.ReceiveAsync(buffer, cancellationTokenSource.Token);\r\n\t\tframePayloadReceived += result.Count;\r\n\t} while (!result.EndOfMessage);\r\n\t//process frame here\r\n}\r\n```\r\n\r\nReceiveHeaderAsync should probably return header of current frame. If there no pending frame to be read then it should wait. calling it multiple times should return same result for same frame.\r\n\r\nPlease let me know if i missed/misunderstood anything, \r\n\r\ncheers :)\r\n",
                                           "updatedAt":  "2020-04-23T07:12:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxODU4MTc4NQ==",
                                           "createdAt":  "2020-04-23T18:41:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "@stephentoub Thoughts? I haven\u0027t thought through what happens when you get continuation frames but that should work I guess.",
                                           "updatedAt":  "2020-04-23T18:41:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxOTI1Nzc2NQ==",
                                           "createdAt":  "2020-04-24T22:03:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "It seems reasonable.  The biggest roadblock is probably that `WebSocket` is abstract, and there\u0027s no good way to implement this on top of any of the existing APIs, so a new `ReceiveHeaderAsync` method would need to be `virtual` and probably throw a `NotSupportedException`.  It could then be implemented by the various implementations, e.g. `ManagedWebSocket` as returned from `WebSocket.CreateFromStream`, but there might also need to be a capability API `SupportsReceiveHeaderAsync` (not only because of the abstract thing, but also because I expect we might have trouble implementing this API on top of other websockets OS APIs when necessary). We\u0027d also need to work out the semantics for how ReceiveHeaderAsync behaves when we\u0027ve split a frame due to a previous ReceiveAsync call not providing a large enough buffer to store the whole thing or us not having received the whole payload yet.",
                                           "updatedAt":  "2020-04-24T22:03:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyODc0OTI5NA==",
                                           "createdAt":  "2020-05-14T16:34:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBEdaWQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ArjunVachhani",
                                                                               "createdAt":  "2020-05-17T06:07:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: We would be open to take this if we have proof of concept -- @ArjunVachhani is it something you would be interested in helping us with?",
                                           "updatedAt":  "2020-05-14T16:34:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMjEyNjI0Ng==",
                                           "createdAt":  "2021-05-04T17:47:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "zlatanov",
                                           "body":  "Now that WebSockets support compression, I want to point out that this API is incompatible (or at least makes no sense) when the message is compressed. The reason for this is that the payload length in this case represents the compressed data, but the user actually wants to know the uncompressed (final) size.\r\n\r\n@davidfowl what do you think?",
                                           "updatedAt":  "2021-05-04T17:47:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMzE1MjU3NA==",
                                           "createdAt":  "2021-05-06T01:09:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "I agree compression is a snag. What are the options? Dry run inflate to determine the output buffer size? Seems wasteful. Don\u0027t support this for compressed WebSockets? I\u0027m not an deflate expert so maybe there\u0027s an easy option I\u0027m not aware of.",
                                           "updatedAt":  "2021-05-06T01:09:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNjUxNjYyNQ==",
                                           "createdAt":  "2021-05-10T10:18:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "zlatanov",
                                           "body":  "@halter73 Dry run isn\u0027t possible, because it would have to receive everything and decompress it using private buffers, which would defeat the purpose of this API - knowing how much buffer size we need to receive the message in the first place.\r\n\r\nConditionally supporting this seems wrong to me, because the name of the method `ReceiveHeaderAsync` doesn\u0027t give the impression it would not work if the next message is compressed.\r\n\r\nWhat seems possible however is that the `length` information returned from this method to be nullable. Something like:\r\n\r\n```c#\r\nreadonly struct WebSocketMessageHeader\r\n{\r\n    public WebSocketMessageType MessageType { get; }\r\n    public bool IsFragment { get; }\r\n    public bool IsCompressed { get; }\r\n    public long? PayloadLength { get; } // null when IsCompressed == true\r\n}\r\n```",
                                           "updatedAt":  "2021-05-10T10:18:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNjY1NTMzMQ==",
                                           "createdAt":  "2021-05-10T12:45:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ArjunVachhani",
                                           "body":  "@zlatanov does the WebSocket decompress the message before it returns? if it decompress the frame data then what you are saying makes sense. but if it does not decompress then I believe we should return payload/size of frame and not the decompressed size. along with frame size we should return other possible frame header information also like extension.\r\n\r\nAny thoughts on this?",
                                           "updatedAt":  "2021-05-10T12:45:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNjY1ODIwNw==",
                                           "createdAt":  "2021-05-10T12:48:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "zlatanov",
                                           "body":  "\u003e does the WebSocket decompress the message before it returns?\r\n\r\nYes. The payload is automatically decompressed before returned to the user.",
                                           "updatedAt":  "2021-05-10T12:48:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KO3T5",
                                           "createdAt":  "2022-09-13T13:24:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MeTitus",
                                           "body":  "\u003e This would actually be a very nice API to add. It would require you to incur another API call though (to basically read the frame header).\r\n\u003e \r\n\u003e * If we exposed another API to get a header information, we\u0027d need to figure out how it would interact with the existing API and what misuse looks like.\r\n\u003e * Would this API be used before every single read, or once per logical message (end of message true)?\r\n\u003e \r\n\u003e @ArjunVachhani Can you say how you\u0027d want to use this API? What would your ideal code look like?\r\n\u003e \r\n\u003e cc @BrennanConroy\r\n\r\nWell this code snipped is obviously wrong but then again so is the inner implementation. It leaves it open for messages to received different WebSocketMessageType which should not happen.  Mixing message payload types with states (Close) is just nonsense really, especially when EndOfMessage is already present in the result. No idea how and why something this quality makes it out.",
                                           "updatedAt":  "2022-09-13T13:34:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KO4AQ",
                                           "createdAt":  "2022-09-13T13:26:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MeTitus",
                                           "body":  "\u003e @halter73 Dry run isn\u0027t possible, because it would have to receive everything and decompress it using private buffers, which would defeat the purpose of this API - knowing how much buffer size we need to receive the message in the first place.\r\n\u003e \r\n\u003e Conditionally supporting this seems wrong to me, because the name of the method `ReceiveHeaderAsync` doesn\u0027t give the impression it would not work if the next message is compressed.\r\n\u003e \r\n\u003e What seems possible however is that the `length` information returned from this method to be nullable. Something like:\r\n\u003e \r\n\u003e ```cs\r\n\u003e readonly struct WebSocketMessageHeader\r\n\u003e {\r\n\u003e     public WebSocketMessageType MessageType { get; }\r\n\u003e     public bool IsFragment { get; }\r\n\u003e     public bool IsCompressed { get; }\r\n\u003e     public long? PayloadLength { get; } // null when IsCompressed == true\r\n\u003e }\r\n\u003e ```\r\n\r\nDoes it seem ok to you then, that the same data split in two different messages can use different WebSocketMessageType? That should not be left for clients to manage. Obviously the right right is to have a leading packages and payload ones which belong to the same initial leading one.  ",
                                           "updatedAt":  "2022-09-13T13:26:56Z"
                                       }
                                   ],
                         "totalCount":  17
                     },
        "title":  "Websocket how to get size of frame with ReceiveAsync?",
        "labels":  [
                       "api-suggestion",
                       "area-System.Net",
                       "tenet-performance"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/35369",
        "createdAt":  "2020-04-23T22:09:51Z",
        "number":  35369,
        "author":  "gattimassimo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC_AGiQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DJB9k",
                                            "createdAt":  "2020-04-23T22:16:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lolodi",
                                            "createdAt":  "2020-04-24T20:55:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "billybooth",
                                            "createdAt":  "2025-02-12T02:34:43Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2025-02-11T18:39:51Z",
        "body":  ".NET is currently providing only chiper-text logging enabling this network diagnostics feature:\r\nhttps://docs.microsoft.com/en-us/dotnet/framework/network-programming/how-to-configure-network-tracing\r\n\r\nThis is unfortunately not providing clear text logging, hence it is not useful at all for troubleshooting and pushes the user to use Fiddler/wireshark to get better logging.\r\n\r\n**In test environments wireshark/fiddler is welcome, but when it comes to production servers, these tools cannot be used.**\r\n\r\nOther options are:\r\n\"netsh trace start\" + Message Analyzer, however it won\u0027t decrypt the payload unless you have the cert and the cert password, so it is not an option in case you are a client connecting to a server which you don\u0027t own.\r\n\r\nhttps://support.citrix.com/article/CTX214599\r\n\r\nhttps://docs.microsoft.com/en-us/message-analyzer/decrypting-tls-and-ssl-encrypted-data#decrypting-trace-data\r\n\r\n\r\nAt this stage,\r\nthe only option is to have each application implement some sort of logging to log plain text payloads on demand, which will be expensive and writing same logic everywhere, when the infra is already sort of available and explained here: https://docs.microsoft.com/en-us/dotnet/framework/network-programming/how-to-configure-network-tracing and it just needs to be extended for plain text logging.\r\n\r\nThis would really make the difference in day to day production troubleshooting of many components.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOng2Sjw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxODY5NzU2Ng==",
                                           "createdAt":  "2020-04-23T22:09:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nNotify danmosemsft if you want to be subscribed.",
                                           "updatedAt":  "2020-04-23T22:09:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxODc5MzQ4OQ==",
                                           "createdAt":  "2020-04-24T04:22:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "You really talking about SslStream and possibly Negotiate, right? If on windows you may get what you want using schannel tracing.   ",
                                           "updatedAt":  "2020-04-24T04:22:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eDEWF",
                                           "createdAt":  "2025-02-11T17:58:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "billybooth",
                                           "body":  "We are still _very_ interested in this.",
                                           "updatedAt":  "2025-02-11T17:58:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eDSs0",
                                           "createdAt":  "2025-02-11T18:26:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "What is your use case @billybooth ? The ask is possibly quite dangerous as it can reveal secrets unintentionally. With .NET 9, you can decrypt TLS on Linux. (schannel on Windows does not provide session keys) And there are sill other hooks besides global switch.  ",
                                           "updatedAt":  "2025-02-11T18:26:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eDZKP",
                                           "createdAt":  "2025-02-11T18:39:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "billybooth",
                                           "body":  "\u003e What is your use case @billybooth ? The ask is possibly quite dangerous as it can reveal secrets unintentionally. With .NET 9, you can decrypt TLS on Linux. (schannel on Windows does not provide session keys) And there are sill other hooks besides global switch.  \n\nOur application provides a dev console that supports network request/response logging in order to assist in debugging issues between a desktop client and an arbitrary number of web services (some of which we control, and some of which we don\u0027t), but we are forced to implement the logging ourselves for our various connector implementations (not all run through HttpClient and happily take an ILogger).\n\nI suppose the use case is the same as in the original ask. In order to debug complex/unclear failures between a desktop client that makes many connections to discrete endpoints, app-level network tracing is ideal, but only if cleartext payloads can be captured.",
                                           "updatedAt":  "2025-02-11T18:39:50Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  ".NET should provide clear text network tracing capabilities",
        "labels":  [
                       "enhancement",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/36849",
        "createdAt":  "2020-05-21T22:19:01Z",
        "number":  36849,
        "author":  "antonfirsov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-14T20:42:11Z",
        "body":  "A follow-up on the discussion in #36072.\r\n\r\n### Problem\r\n\r\ndotnet/corefx#41764 implemented a consistent solution to match Windows behavior when `Dns.GetHostEntry(hostName)` or related methods are invoked with `\"\"` or the systems hostname on Unix, but it only works on Unix systems which are configured to successfully resolve their own hostname. Although most of the time this is true, there are some exceptions, eg. our 10.14 CI macs don\u0027t do it. I\u0027m not sure about the root cause on mac, but it\u0027s relatively easy to \"misconfigure\" Ubuntu 18.04, see last paragraph.  On these systems the shell command `hostname | nslookup` (and the matching libc call chain) fails, which makes our current `System.Net.Dns` implementation throw. This does not conform our [documentation](https://docs.microsoft.com/en-us/dotnet/api/system.net.dns.gethostentry?view=netcore-3.1):\r\n\u003e If an empty string is passed as the hostNameOrAddress argument, then this method returns the IPv4 and IPv6 addresses of the local host.\r\n\r\n### Suggestion\r\n\r\nIn `pal_networking.c` we are already handling `hostname` as a special case:\r\nhttps://github.com/dotnet/runtime/blob/3fda6ef73cf359b4bb3780a339a831e261b1c732/src/libraries/Native/Unix/System.Native/pal_networking.c#L318-L326\r\nWe should return the same result, even if the underlying OS name resolution (`getaddrinfo`) fails.\r\n\r\nDespite it\u0027s name, the `System.Net.Dns` class is a universal name resolver that goes behind the DNS resolution rules, implementing a .NET-specific logic for name resolution. It\u0027s better to aim for cross-platform consistency, instead of matching the behavior of `nslookup` / `getaddrinfo` (which is not being matched anyways since dotnet/corefx#41764)\r\n\r\nNote: on Windows and \"properly configured\" Unixes, `Dns.GetHostEntry(\"\")` and `Dns.GetHostEntry(\"my-hostname\")` are essentially the same, we should not change this behavior IMO.\r\n\r\nCC @wfurt @scalablecory @davidsh\r\n\r\n### Reproduction on Ubuntu 18.04\r\n\r\nIn `/etc/nsswitch.conf`:\r\n```diff\r\n- hosts:          files mdns4_minimal [NOTFOUND=return] dns myhostname\r\n+ hosts:          files dns\r\n```\r\n\r\nIn `/etc/resolv.conf`:\r\n```diff\r\n- nameserver 127.0.0.53\r\n+ nameserver 8.8.8.8\r\n```\r\n\r\nIn `/etc/hosts`:\r\n\r\n```diff\r\n- 127.0.1.1 \u003chostname\u003e\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKDNfqg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzMjM3NTM1Mw==",
                                           "createdAt":  "2020-05-21T22:19:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nNotify danmosemsft if you want to be subscribed.",
                                           "updatedAt":  "2020-05-21T22:19:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzMjQ0ODkyOA==",
                                           "createdAt":  "2020-05-22T02:50:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "scalablecory",
                                           "body":  "This seems like very corner-case thing, to the point where if someone configured their system in such a way I might assume it was intentional.\r\n\r\nWe have `Dns.GetHostEntry(\"\")` documented as returning the current system\u0027s IPs, but I don\u0027t know if we should extend it to also work if you happen to give the system\u0027s hostname as a string too.",
                                           "updatedAt":  "2020-05-22T02:50:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzMjQ1MjU5Ng==",
                                           "createdAt":  "2020-05-22T03:04:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBFGz1A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "scalablecory",
                                                                               "createdAt":  "2020-05-22T05:06:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "antonfirsov",
                                                                               "createdAt":  "2020-05-22T13:15:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "karelz",
                                                                               "createdAt":  "2020-05-22T16:00:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "wfurt",
                                           "body":  "We actually already do in SystemNative_GetHostEntryForName()\r\n\r\nhttps://github.com/dotnet/runtime/blob/46b430aa0c90698cedd90f71fcad53312c08b732/src/libraries/Native/Unix/System.Native/pal_networking.c#L318-L325\r\n\r\nAnd it actually may work that way on some Linuxes with systems.\r\n\r\nhttps://www.freedesktop.org/software/systemd/man/systemd-resolved.service.html\r\n\r\nThe problem is that if getaddrinfo() fails, we never get to that part of the code. ",
                                           "updatedAt":  "2020-05-22T03:04:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzMjY5MTExNQ==",
                                           "createdAt":  "2020-05-22T13:29:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBHKTbA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "karelz",
                                                                               "createdAt":  "2020-05-22T16:00:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vexx32",
                                                                               "createdAt":  "2020-06-11T21:53:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "antonfirsov",
                                           "body":  "\u003e This seems like very corner-case thing, to the point where if someone configured their system in such a way I might assume it was intentional.\r\n\r\nThis was never the case with the issues we encountered our CI, and it\u0027s more likely that we get user complaints for not being able to resolve `hostname` or `\"\"` than for the opposite. As of @wfurt\u0027s last comment, to me this doesn\u0027t look like a radical change in our existing behavior, it\u0027s more about making it more consistent and robust.",
                                           "updatedAt":  "2020-05-22T13:29:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0MzMyMzI0NQ==",
                                           "createdAt":  "2020-06-12T15:06:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "antonfirsov",
                                           "body":  "An open question:\r\nSince we won\u0027t be able to return `ai_canonname` when `gethostname` fails, we need to decide what to return in `IPHostEntry.HostName`. It can be either `null` or or just mirror the input `hostName`.",
                                           "updatedAt":  "2020-06-12T15:06:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0MzM4Mjg3OA==",
                                           "createdAt":  "2020-06-12T16:56:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBHZczg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "antonfirsov",
                                                                               "createdAt":  "2020-06-15T11:46:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "wfurt",
                                           "body":  "I would suggest to return hostName it self to prevent issues with null.",
                                           "updatedAt":  "2020-06-12T16:56:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NDQ1NTQ2Ng==",
                                           "createdAt":  "2020-08-15T22:59:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mjsabby",
                                           "body":  "So does .NET have its own resolution for dns to ip or does it use the glibc/musl API? We should actually follow what the [Go community did](https://github.com/golang/go/pull/29661) and parse resolv.conf and not use glibc/musl at all.\r\n\r\nReason: https://github.com/kubernetes/kubernetes/issues/62628\r\n\r\nThe K8s world loves to add proxies and sidecars for many things, and they use iptables a lot. Combined with iptables and IPv6 being enabled, glibc and musl do parallel DNS requests which expose a race condition in the netfilter kernel module. This causes timeouts which are 5-seconds by default.\r\n\r\nIn glibc you can configure that the request should be done in serial order, but apparently that is not supported in musl.\r\n\r\nSo, if this issue is we should implement our own resolv.conf parser (I recall seeing some code in the repo for that?) and use that then it would solve this other problem too and make .NET resilient to this dns timeout issue.",
                                           "updatedAt":  "2020-08-15T23:05:07Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "System.Net.Dns does not always resolve \"\" and the system\u0027s own hostname on Unix",
        "labels":  [
                       "enhancement",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/37655",
        "createdAt":  "2020-06-09T16:35:31Z",
        "number":  37655,
        "author":  "davidsh",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-04-09T15:07:28Z",
        "body":  "See: https://github.com/dotnet/runtime/issues/37428#issuecomment-641330667\r\n\r\n\u003eIt is true that some of the previously ported \"Microsoft-System-Net-\" events we have are a mess and are inconsistent. I think we can address that. But I would prefer to do that with a separate discussion/issue and not bottleneck on getting this telemetry focused events/counters into dotnet/runtime.\r\nDo we have an issue tracking cleaning that up? It really is a mess.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOT_qSRw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0MTQxOTg4Mg==",
                                           "createdAt":  "2020-06-09T16:35:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nNotify danmosemsft if you want to be subscribed.",
                                           "updatedAt":  "2020-06-09T16:35:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NDk0OTY4OQ==",
                                           "createdAt":  "2020-06-16T18:52:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@davidsh is it something we should tackle in 5.0? Is it going to help end to end scenarios with YARP significantly?",
                                           "updatedAt":  "2020-06-16T18:52:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NDk1MTQ2OQ==",
                                           "createdAt":  "2020-06-16T18:56:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidsh",
                                           "body":  "\u003e@davidsh is it something we should tackle in 5.0? Is it going to help end to end scenarios with YARP significantly?\r\n\r\nYARP scenarios will benefit from the new telemetry-focused events/counters being added in new namespaces: System.Net.Http, System.Net.Sockets, etc.\r\n\r\nThese existing events in the \"Microsoft-System-Net-*\" namespaces are targeted more for debugging/diagnosing. I don\u0027t think this is a must have for 5.0.\r\n\r\n@stephentoub might have more comments on this since he asked for a tracking issue for this.",
                                           "updatedAt":  "2020-06-16T18:56:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NTAxMTEyMw==",
                                           "createdAt":  "2020-06-16T21:04:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "It\u0027s not required for .NET 5, unless its presence is interfering with the actual telemetry we want developers consuming (either from a performance perspective or noise perspective).  The majority of the existing tracing is, in my opinion, of very little value and when enabled has overheads, plus it muddies up the codebase.",
                                           "updatedAt":  "2023-04-09T15:07:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NTA3NzMzNA==",
                                           "createdAt":  "2020-06-17T00:25:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@davidsh if you can confirm that it does not interfere with end to end telemetry, please move it to Future milestone. Thanks!",
                                           "updatedAt":  "2020-06-17T00:25:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NTA4MDg4Nw==",
                                           "createdAt":  "2020-06-17T00:38:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBHpbeg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "karelz",
                                                                               "createdAt":  "2020-06-17T07:24:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidsh",
                                           "body":  "\u003e@davidsh if you can confirm that it does not interfere with end to end telemetry, please move it to Future milestone. Thanks!\r\n\r\nIt\u0027s not going to interfere with telemetry. For that scenario we want customers to only use the new event namespaces that will have our new events/counters.",
                                           "updatedAt":  "2020-06-17T00:38:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5P-nzA",
                                           "createdAt":  "2022-12-08T00:50:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "samsp-msft",
                                           "body":  "@MihaZupan @karelz - didn\u0027t this get resolved with the new events that we added in 6/7?",
                                           "updatedAt":  "2022-12-08T00:50:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5P-pJH",
                                           "createdAt":  "2022-12-08T00:58:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "This issue is referring to the very verbose events we use for diagnostics ourselves (networking team), not the telemetry we added and encourage users to actually use.\r\n[They\u0027re still around](https://grep.app/search?q=NetEventSource.\u0026filter[repo][0]=dotnet/runtime), we just [renamed](https://github.com/dotnet/runtime/pull/40781) them (e.g. `Microsoft-System-Net-Http` =\u003e `Private.InternalDiagnostics.System.Net.Http`) to make it clear they\u0027re actually different.\r\n",
                                           "updatedAt":  "2022-12-08T00:59:45Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "Consider cleaning up Microsoft-System-Net-* diagnostic tracing",
        "labels":  [
                       "enhancement",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/38754",
        "createdAt":  "2020-07-03T13:04:40Z",
        "number":  38754,
        "author":  "alnikola",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBJWcnQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "stephentoub",
                                            "createdAt":  "2020-07-03T13:07:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "scalablecory",
                                            "createdAt":  "2020-07-03T19:29:01Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2021-05-06T18:37:51Z",
        "body":  "It appears that new Telemetry logging/tracing does generally the same thing as existing NetEventSources. We need to consider merge them to improve Telemetry\u0027s user experience.\r\n\r\nSee dicsussions:\r\n- [discussion_r447776811](https://github.com/dotnet/runtime/pull/38620#discussion_r447776811)\r\n- [issuecomment-639164431](https://github.com/dotnet/runtime/issues/37428#issuecomment-639164431)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKEXqYw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MzUzODg1Mg==",
                                           "createdAt":  "2020-07-03T13:04:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nNotify danmosemsft if you want to be subscribed.",
                                           "updatedAt":  "2020-07-03T13:04:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NzQxMjYzOQ==",
                                           "createdAt":  "2020-07-13T08:41:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "A little background on this area. To the best of my knowledge Vance kicked off the pattern of creating new EventSources when he proposed creating \"System.Runtime\" EventSource in addition to the \"Microsoft-Windows-DotNetRuntime\" EventSource we\u0027ve had for a long time.  I assume he put some thought into it but I never heard what the rationale was. Personally I have mixed feelings about these renames. The biggest advantages I see are:\r\n1. Branding - we are trying to push .Net Core as crossplatform so tutorials/command-lines that refer to event sources with \"Windows\" in the name conflict with that message.\r\n2. Discoverability - I expect it is easier to find EventSources that reuse namespace names vs. EventSources that use \"Microsoft-Windows-something\"\r\n3. Consistency? - Now that we already made new EventSources in some places we could say we are being consistent with our (recent) past decisions. (Of course we\u0027re also being inconsistent with our further past decisions so this can cut both ways)\r\n\r\nCons:\r\n1. Confusion - Users who are aware of multiple event sources now need to pick between them or understand which functionality is where.\r\n2. Maintainance - Now we have two EventSources and have to maintain both\r\n3. Performance - There is a small startup overhead to initialize a new EventSource and check if it is enabled\r\n\r\nBelow is the guidance I suggested to @davidsh when he asked earlier. It was my best attempt to rationalize where we are:\r\n\r\n\u003e 1. If we have brand new scenarios that can stand alone (such as counters), make an EventSource named identical to the type/namespace with dots as a naming separator. The move to System.Runtime and Microsoft.AspNetCore.Hosting was deliberate.\r\n\u003e 2. If we are adding new events and those events are clearly related to existing events on an existing provider, or the scenarios that would use the new events would also need to use existing events on the existing provider, then add the new events to the existing provider.\r\n\u003e 3. Don\u0027t rename existing EventSources or existing events, that will cause compat headaches that far outweigh any benefits we\u0027d get from the naming.\r\n\r\nGiven some time to do a diff of events on old and proposed new EventSource types I might be able to offer a more tailored suggestion but wanted to share where I am at so far. Hope it helps.",
                                           "updatedAt":  "2020-07-13T08:41:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NzQzNzQyOA==",
                                           "createdAt":  "2020-07-13T09:23:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alnikola",
                                           "body":  "@noahfalk \r\n1. Counters is only part of the new telemetry we are implementing. It will also introduce activities which in the nutshell track the same events as the original NetEventSource.Enter/Exit, so if we leaved the original Enter/Exit logging in place, it would lead to a duplication.\r\n2. Our event logging is supposed to work on different platforms, but as you mentioned above existing events has \"Windows\" in their namespaces which in my opinion will look quite confusing for people using .NET Core on Linux and other platforms.\r\n3. It\u0027s believed that almost nobody is actually listening to current NetEventSource events, so keeping them around will lead to a confusion because there is no clear distinction in the use cases between the old ones and the new telemetry.",
                                           "updatedAt":  "2020-07-13T09:23:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NzQ3MTY3NA==",
                                           "createdAt":  "2020-07-13T10:19:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "\u003e It\u0027s believed that almost nobody is actually listening to current NetEventSource events\r\n\r\nAre we confident enough in that assessment that there is a plan to remove the pre-existing code? My impression from the original issue is that the question was whether or not to merge the new EventSource into the old one. If we are instead contemplating removing the old one entirely that shifts the discussion a bit : )\r\n\r\n\u003e as you mentioned above existing events has \"Windows\" in their namespaces\r\n\r\nFWIW I checked and the existing sockets EventSource doesn\u0027t have this particular problem. It is named \"Microsoft-System-Net-Sockets.\"\r\n\r\nThanks!",
                                           "updatedAt":  "2020-07-13T10:19:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NzQ4NzY1Mw==",
                                           "createdAt":  "2020-07-13T10:51:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alnikola",
                                           "body":  "\"Merge\" here means - \"merge old NetEventSources into the new telemetry and delete unnecessary parts\".\r\n\r\nEven if we decide to keep the old one around, we must delete some events (like Enter/Exit in the PR mentioned above) because they are duplicates to the new Start/Stop. That means the existing code must be changed anyways.\r\n\r\nOr, could suggest any way on how to easily and unambiguously describe to the users the difference between the old logging and new telemetry in the documentation? For me the main driver to delete the old one is an absence of clear distinction between those two leading to confusion.",
                                           "updatedAt":  "2020-07-13T10:51:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1ODA5MTIyOQ==",
                                           "createdAt":  "2020-07-14T10:00:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "Can we back up to \"It\u0027s believed that almost nobody is actually listening to current NetEventSource events\"? I don\u0027t intend to contradict but I want to learn what evidence we have behind it. The level of confidence makes a big difference in how much design freedom we have. Thanks!",
                                           "updatedAt":  "2020-07-14T10:00:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1ODE0MDUwMw==",
                                           "createdAt":  "2020-07-14T12:02:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "Super noisy and terribly inconsistent events that make them close to useless for any real investigation.\r\n\r\nA total of one hit (outside of dotnet/runtime and clones) on all of GitHub for the event source names and guids, and that one being in a tool that\u0027s just logging all networking event sources.\r\n\r\nThat same one hit via grep.app.\r\n\r\nZero discussions with developers about the consumption of these events.\r\n\r\nZero docs outside of dotnet/runtime about these events.\r\n\r\nDifferent source names/guids from netfx, so any use there is irrelevant.",
                                           "updatedAt":  "2020-07-14T12:02:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1ODE0NTk5Ng==",
                                           "createdAt":  "2020-07-14T12:16:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "(To be clear, I\u0027m fine keeping the existing sources, deleting the useless stuff, and adding new stuff to them. What I want to avoid is splitting the events effectively arbitrarily across two sources. It\u0027s confusing and pointless from a consumer perspective.)",
                                           "updatedAt":  "2020-07-14T13:03:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1ODE1MDIwNg==",
                                           "createdAt":  "2020-07-14T12:26:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alnikola",
                                           "body":  "@stephentoub Could you please clarify whether you suggest to **keep the old types**? I believed we decided to delete them and move valuable things to the new telemetry. Am I wrong?",
                                           "updatedAt":  "2020-07-14T12:26:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1ODE2NjM2Nw==",
                                           "createdAt":  "2020-07-14T13:03:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "I don\u0027t have a strong opinion on which ones to keep. I do care that:\r\n- We only have one per assembly.\r\n- We get rid of useless events.\r\n- The tracing is useful and consistent, and follows best practices.\r\n- The above happens for .NET 5.",
                                           "updatedAt":  "2020-07-14T13:04:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1ODIwODMzMA==",
                                           "createdAt":  "2020-07-14T14:20:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alnikola",
                                           "body":  "I see. Taking into account the [above comment](https://github.com/dotnet/runtime/issues/38754#issuecomment-658140503), I still believe we should delete old NetEventSources.",
                                           "updatedAt":  "2020-07-14T14:20:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1ODY5MzUxMg==",
                                           "createdAt":  "2020-07-15T10:40:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "Thanks! Yeah that seems like pretty good evidence to me that the existing EventSource won\u0027t be missed : ) I also took a look through the events and saw that most of the usage was treating EventSource as an unstructured logging provider which would make it much harder for a customer to have created a useful automated consumption scenario.\r\n\r\nIn that case we could delete the old provider and we\u0027ve got freedom to name the new provider as we please + put whatever events in it we believe are useful. Are there any events you\u0027d plan to preserve from the old provider right away? I also think it would be fine to eliminate all the old events since they haven\u0027t proven historically valuable and consider restoring them in the new EventSource in the future if/when a clear need is identified.",
                                           "updatedAt":  "2020-07-15T10:43:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1ODY5NDY1Mg==",
                                           "createdAt":  "2020-07-15T10:42:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "@brianrob - does this plan to eliminate the pre-existing networking EventSource provider raise any concerns for you? ",
                                           "updatedAt":  "2020-07-15T10:42:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1ODcyNjQ1MA==",
                                           "createdAt":  "2020-07-15T12:00:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alnikola",
                                           "body":  "Our plan is to firstly implement new event/activities and then go through the old ones to delete/move them. However, some pieces have been already deleted. In example @stephentoub helped us recently by deleting obviously redundant Enter/Exits.",
                                           "updatedAt":  "2020-07-15T12:00:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1OTA1MTE0Ng==",
                                           "createdAt":  "2020-07-15T22:40:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "Probably the sooner you can delete the old stuff the better so that you can flush out any issues that might be lurking. I imagine @stephentoub would be bummed if we added the new EventSource and then later discovered that we couldn\u0027t delete the old ones for some unexpected reason.",
                                           "updatedAt":  "2020-07-15T22:40:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1OTA2MTg3NA==",
                                           "createdAt":  "2020-07-15T23:13:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "brianrob",
                                           "body":  "No concerns on removing this one.  I am not aware of any tools out there that use it, including PerfView.  Thanks for checking.",
                                           "updatedAt":  "2020-07-15T23:13:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NTY3MDYyNw==",
                                           "createdAt":  "2020-08-18T19:30:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Moving remaining work to 6.0.",
                                           "updatedAt":  "2020-08-18T19:30:43Z"
                                       }
                                   ],
                         "totalCount":  17
                     },
        "title":  "Merge new Telemetry logging with existing NetEventSources",
        "labels":  [
                       "enhancement",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/38988",
        "createdAt":  "2020-07-09T08:01:20Z",
        "number":  38988,
        "author":  "MaximLipnin",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-11-07T11:02:17Z",
        "body":  "Since we don\u0027t have access to the network cards on browser/WASM, the entire System.Net.NetworkInformation assembly is going to be PNSE excepting tho methods:\r\n- NetworkInterface.GetIsNetworkAvailable\r\n- NetworkChange.NetworkAvailabilityChanged\r\n\r\nThese two methods could probably be implemented on top of https://developer.mozilla.org/en-US/docs/Web/API/NavigatorOnLine/onLine",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORpWzvw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NTk3Mjc1OQ==",
                                           "createdAt":  "2020-07-09T08:01:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nNotify danmosemsft if you want to be subscribed.",
                                           "updatedAt":  "2020-07-09T08:01:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5D1NJK",
                                           "createdAt":  "2022-05-26T00:45:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lewing",
                                           "body":  "https://developer.mozilla.org/en-US/docs/Web/API/Network_Information_API",
                                           "updatedAt":  "2022-05-26T00:45:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GlH-Z",
                                           "createdAt":  "2022-07-14T08:12:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maraf",
                                           "body":  "How should the .NET API behave when the browser API is not available?\r\n\r\nWe have several situations that can happen\r\n- The browser API is not available for NodeJS/V8.\r\n- This browser API is well supported on all new browsers, but if we speak in general, it could happen, that the API we are relying on is missing/disabled/monkey patched etc.\r\n\r\nWe could deal with it in these ways\r\n- Silently do nothing (not ideal, but for things like this, it won\u0027t fail the application)\r\n  - Pros: app always \"works\"\r\n  - Cons: developer doesn\u0027t know if it works or not\r\n- Let it fail in javascript (like `Cannot read properties of undefined (reading \u0027onLine\u0027)` when navigator is not there)\r\n  - Pros: no hardcoded condition in runtime\r\n  - Cons: hard to understand error message for .NET developer\r\n- On runtime (when running the code) check for the API and when it\u0027s missing, throw in .NET (probably `NotSupportedException`)\r\n  - Pros: works when the API is there on any platform\r\n  - Cons: we don\u0027t have a way to tell the developer that is could throw this way\r\n- Hardcoded condition where we support it and where we don\u0027t\r\n  - Cons: the API could still be missing on user\u0027s browser; we aren\u0027t able show this to the developer (via analyzer)\r\n- Anything from above + provide a way for the developer to implement a polyfill.\r\n\r\ncc @lewing @pavelsavara @kg ",
                                           "updatedAt":  "2022-07-14T08:12:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GlbO_",
                                           "createdAt":  "2022-07-14T09:29:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kg",
                                           "body":  "For `NetworkInterface.GetIsNetworkAvailable`:\r\n* In any case where we cannot return a valid yes/no answer, we should throw. The developer and user may develop false expectations otherwise. This will be cases where the host doesn\u0027t have the API or the API has been disabled/monkeypatched. We should not produce speculative values like \"well, this is a blazor app, so they\u0027re probably connected to the network, unless it\u0027s on 127.x.x.x\"\r\n* It seems like there is no explicit spec for how `navigator.onLine` works, so we\u0027re just hoping that it\u0027s close enough to what we want. The MDN pages at least suggest it is, so that\u0027s good. But we should be wary of making existing good code do strange things by redefining the meaning of this information.\r\n\r\nFor the `NetworkChange.NetworkAvailabilityChanged` event I think as long as it is theoretically possible for the event to ever fire, it should be fine to subscribe to it, but we should throw `NSE` or `PNSE` if it\u0027s never going to work. We would want to use the `online`/`offline` events for this.\r\n\r\nKeep in mind that both of these are probably at risk of getting killed by browser anti-fingerprinting measures or something like that.",
                                           "updatedAt":  "2022-07-14T09:29:39Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[wasm] Implement NetworkInterface.GetIsNetworkAvailable and NetworkChange.NetworkAvailabilityChanged",
        "labels":  [
                       "arch-wasm",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/40328",
        "createdAt":  "2020-08-04T19:08:00Z",
        "number":  40328,
        "author":  "antonfirsov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-02-13T01:26:34Z",
        "body":  "This is a follow-up on #26141. In #39250 and #39781 we implemented fixes for path and domain related problems reported in in the original issue. With this, we unblocked most users, however we can\u0027t claim RFC 6265 conformance yet, there are still many deviations and obsolete behaviors we need to investigate and change.\n\nIn many cases browsers also deviate from RFC. In these cases we need to make decisions about desired behavior before implementing changes.\n\nThe topics I identified so far:\n\n## 1. Deal with deprecated attributes\n\n`Cookie` properties belonging to attributes which are not required by RFC 6265:\n`Version`, `Port`, `Comment`, `CommentUri`, `Discard` (... more?)\n\nCurrently `Version` and `Port` are being used to pick a value for [`CookieVariant`](https://github.com/dotnet/runtime/blob/21ea59f90044f4f662117fc43022f07eafb485cd/src/libraries/System.Net.Primitives/src/System/Net/Cookie.cs#L14-L21) as following (analysis by @CarnaViire):\n- `CookieVariant.Unknown` - unused - was used in headers check (Set-Cookie vs Set-Cookie2) which is not actually executed now afaik\n- `CookieVariant.Plain` - no version or explicit version=0\n- `CookieVariant.Rfc2109` - version=1 or higher and port property not set\n- `CookieVariant.Rfc2965` - port property is set (auto-assigns version to 1 as well)\n\nThe value is then being used to multiplex between different behaviors, where only `CookieVariant.Plain` path is RFC 6265-conformant. If the client sends cookies with obsolte attributes, our logic will deviate from the standard which may lead to issues similar to #19746 and #20942. Additionally, they obfuscate our code and tests a lot, creating technical debt.\n\n### Suggested action plan\n- Investigate if presence of `Version` or `Port` does change browser behavior in any way. (Likely not.)\n- Make a decision whether we should keep any of those old behaviors\n- Ideally, the answer would be \"no\". In that case:\n  - Remove `CookieVariant` and related logic. Note: the type is not public, it\u0027s not in the reference assemblies, but we should be careful to not break serialization compatiblity.\n  - File an API proposal obsoleting all old properties \n\n## 2. Further cases with leading dot in Domain\n\nAccording to [Section 5.2.3](https://tools.ietf.org/html/rfc6265#section-5.2.3) of the RFC, clients should also include a logic to remove the leading dot when sent by `Set-Cookie`:\n\u003e If the first character of the attribute-value string is %x2E (\".\"):\n\u003e       Let cookie-domain be the attribute-value without the leading %x2E\n\u003e       (\".\") character.\n\nHowever browsers are typically ignoring this rule except for one-component domains. In some cases even adding a dot. From https://github.com/dotnet/runtime/pull/39781#issuecomment-663110072:\n\nSet-Cookie | CookieContainer | Chrome | Edge | RFC\n-- | -- | -- | -- | --\nlocalhost (*implicit*) | localhost | localhost | localhost | localhost *(?)*\nlocalhost | localhost | localhost | localhost | localhost\n.localhost | .localhost | localhost | \u003ci\u003ecookie rejected\u003c/i\u003e | localhost\nxample.com (*implicit*) | xample.com | xample.com | xample.com | xample.com *(?)*\nxample.com | xample.com | .xample.com | xample.com | xample.com\n.xample.com | .xample.com | .xample.com | .xample.com | xample.com\n\nNote:\n*implicit* means, that `Set-Cookie` did not set any value for `domain`, and a default value has been defined by the host name in the URL. I\u0027m not sure if my current understanding is correct, but I see a chance browsers are actually non-conformant by defaulting the Domain attribute in this case. (See [section 4.1.2.3](https://tools.ietf.org/html/rfc6265#section-4.1.2.3) for more details.) This needs further clarification.\n\n### UPDATE: we decided to leave current behavior as-is.\n\n*Edit 2023: We should try to harmonize explicit/implicit domain cases like the one discovered in #84820.*\n\n## 3. Ordering cookies\n\nOur cookie order doesn’t seem to match the one in browsers, and it likely doesn’t conform to the new RFC. We need to investigate this, and decide if we want to implement any changes.\n\n/CC @CarnaViire @geoffkizer @karelz ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnkDgdw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2ODc3MzE0OA==",
                                           "createdAt":  "2020-08-04T19:08:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-08-04T19:08:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2ODc3NTI2MQ==",
                                           "createdAt":  "2020-08-04T19:13:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBMZo9w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "antonfirsov",
                                                                               "createdAt":  "2020-08-04T20:50:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "geoffkizer",
                                           "body":  "Re (2), I think it will be hard to change this behavior in the future. So we should make sure that we think what we are doing today is correct.\r\n\r\nRe (1) and (3), I think we can deal with these in a future release.",
                                           "updatedAt":  "2020-08-04T19:13:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eQOB3",
                                           "createdAt":  "2025-02-12T23:17:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "antonfirsov",
                                           "body":  "We should take into consideration Chromium\u0027s [CookieMonster](https://www.chromium.org/developers/design-documents/network-stack/cookiemonster/) doc:\n\n\u003e [RFC 6265](http://datatracker.ietf.org/doc/rfc6265/) is currently controlling, and supersedes [RFC 2965](http://datatracker.ietf.org/doc/rfc2965/). However, most browsers do not actually follow those RFCs, and Chromium has compatibility with existing browsers as a higher priority than RFC compliance. An RFC that more closely describes how browsers normally handles cookies is being considered by the RFC; it is available at http://tools.ietf.org/html/draft-ietf-httpstate-cookie.\n\nWeirdly, the doc it references is an older draft of RFC 6265. The current WIP update of the cookie standard is here: https://datatracker.ietf.org/doc/draft-ietf-httpbis-rfc6265bis",
                                           "updatedAt":  "2025-02-13T01:26:34Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "RFC 6265 for Cookies - remaining issues",
        "labels":  [
                       "enhancement",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/40390",
        "createdAt":  "2020-08-05T16:38:10Z",
        "number":  40390,
        "author":  "alnikola",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-05-04T13:45:59Z",
        "body":  "1.\tSimulate failures of external services (e.g. DNS) and network. Lost packets, failed connections, different server timeout\r\n2.\tImplement Socket-based TCP and UDP tests\r\n3.\tReference the nightly Asp.NET Core build\r\n4.\tStreamline private build testing\r\n5.\tImplement a higher-level scenario stress testing: gRPC (especially DuplexStreaming), HttpClientFactory\r\n6.\tSetup continuous test execution on dedicated VMs with different performance level (ultralow/standard/ultrahigh)\r\n7.\tAdd testing under high GC rate",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOJ-S4GA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2OTMwMDc2MA==",
                                           "createdAt":  "2020-08-05T16:38:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-08-05T16:38:12Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Extend HttStress and SslStress test suites capabilities",
        "labels":  [
                       "area-System.Net",
                       "test-enhancement"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/41523",
        "createdAt":  "2020-08-28T16:12:39Z",
        "number":  41523,
        "author":  "CarnaViire",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-05-06T18:39:29Z",
        "body":  "ConnectionListener.AcceptAsync() was allowed to return null in #41304.\r\n\r\nThere\u0027s test code here that implements this API: https://github.com/dotnet/runtime/blob/8b5467e1ea0aa2bc5aa4a4281b71e5299d8c0af1/src/libraries/Common/tests/System/Net/VirtualNetwork/VirtualNetworkConnectionListenerFactory.cs#L56\r\n\r\nThis code is used in Connection tests, possibly elsewhere.\r\n\r\nI assume this didn\u0027t break because it\u0027s just a nullability change, but we should fix it regardless. And we should fix the behavior of the test code to return null when disposed and validate this.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKLLdjA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4MjgxMDc2NA==",
                                           "createdAt":  "2020-08-28T16:12:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-08-28T16:12:42Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Address ConnectionListener.AcceptAsync nullability in tests",
        "labels":  [
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/44272",
        "createdAt":  "2020-11-05T03:53:22Z",
        "number":  44272,
        "author":  "alexsku",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-17T12:37:18Z",
        "body":  "### Description\r\n\r\nWebSocket.Abort method is documented that it\r\n\u003e Aborts the WebSocket connection and cancels any pending IO operations.\r\n\r\nHowever it appears that when i have a pending ReceiveAsync call on that websocket and then call Abort it doesn\u0027t cancel the pending ReceiveAsync call. The call would stay pending until the other side of the connection closes the connection on their end. Instead of this I would expect ReceiveAsync to throw after Abort is called.\r\n\r\n[Here](https://github.com/alexsku/WebsocketAbort/blob/master/WebsocketAbort/Controllers/WebsocketController.cs#L31) is the sample code reproducing the issue.\r\n\r\nI was using  wscat -c wss://localhost:5001/websocket --no-check to simulate a client.\r\n\r\n### Configuration\r\n\r\nI reproduce the issue running netcoreapp3.1 in Kestrel on a windows machine. I also observed the issue running on Linux.\r\n\r\n### Regression?\r\n\r\nI think the issue is related to https://github.com/dotnet/runtime/issues/27735. Ultimately that issue was occurring because Abort that was called when the passed CancellationToken is cancelled didn\u0027t interrupt pending ReceiveAsync call. And while the fix fixed the particular problem with the CancellationToken it didn\u0027t fix the root problem that Abort doesn\u0027t interrupt pending ReceiveAsync calls.\r\n\r\n### Other information\r\n\r\nI think it is a pretty serious issue for a server platform. The server code should be tolerant to misbehaving clients and it should be able to interrupt connection in case if client doesn\u0027t follow the protocol. Calling Abort would be a reasonable thing to do in such cases but with this issue Abort would not interrupt the connection thus preventing the resources from being freed.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOt82xYA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyMjEyNTIwNw==",
                                           "createdAt":  "2020-11-05T03:53:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-11-05T03:53:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyMjM0NDI0OA==",
                                           "createdAt":  "2020-11-05T12:21:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "ManagedWebSocket.Abort works by disposing the Stream it wraps,  and it expects that will interrupt any pending operations.  @halter73, we\u0027ve talked about this case with Kestrel in the past; was the stream Kestrel provides ever fixed to do that?",
                                           "updatedAt":  "2020-11-05T12:21:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyMjQzNzQ2OQ==",
                                           "createdAt":  "2020-11-05T15:08:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-11-05T15:08:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyMjQzOTkyMw==",
                                           "createdAt":  "2020-11-05T15:12:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "(I expect this issue should be moved to dotnet/aspnetcore, but we can discuss first.)",
                                           "updatedAt":  "2020-11-05T15:12:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyMjY4NjQ3NQ==",
                                           "createdAt":  "2020-11-05T22:39:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "\u003e @halter73, we\u0027ve talked about this case with Kestrel in the past; was the stream Kestrel provides ever fixed to do that?\r\n\r\nNo it wasn\u0027t. We recommend calling HttpContext.Abort() instead for now. \r\n\r\nWe\u0027ve experimented with aborting the request when the upgrade Stream is disposed, but this causes unwanted truncation of the output during what should have been graceful closes. We can look at doing a \"soft abort\" instead which would cancel pending reads and/or writes facing backpressure without dropping bytes already in Kestrel\u0027s output buffers. It wouldn\u0027t be super straightforward, but it should be possible.\r\n\r\n@Tratcher has also suggested the possibility of adding an API to ManagedWebSocket.CreateFromConnectedStream that accepts an abort-specific callback. This has the advantage of allowing us to immediately abort the underlying connection like HttpContext.Abort() does when ManagedWebSocket.Abort() is called.\r\n",
                                           "updatedAt":  "2020-11-05T22:52:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyNjIxMTc0NA==",
                                           "createdAt":  "2020-11-12T17:09:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: Looks like this will require a new API overload on `CreateFromStream` -- @halter73 @Tratcher is it something you need to make this work on ASP.NET?",
                                           "updatedAt":  "2020-11-12T17:09:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyNjIxMzU2OQ==",
                                           "createdAt":  "2020-11-12T17:12:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBWoIKg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "halter73",
                                                                               "createdAt":  "2020-11-12T20:32:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "Yes, a new API is the best proposal so far. Stream.Dispose is too ambiguous between success and failure scenarios.",
                                           "updatedAt":  "2020-11-12T17:12:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczOTYxODY0NA==",
                                           "createdAt":  "2020-12-07T02:01:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been automatically marked as no recent activity because it has been marked as needing more info but has not had any activity for 14 days. It will be closed if no further activity occurs within 7 more days.",
                                           "updatedAt":  "2021-01-15T11:14:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczOTYxODkyMg==",
                                           "createdAt":  "2020-12-07T02:03:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "@danmosemsft, @msftbot, do not close this.",
                                           "updatedAt":  "2021-01-15T11:14:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczOTYxOTA3NQ==",
                                           "createdAt":  "2020-12-07T02:03:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "@danmosemsft, are we going to have to comment on every issue we want to keep open every 14 days?  How do we tell the bot \"go away\"?",
                                           "updatedAt":  "2021-01-15T11:14:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0MDg3MjAxNg==",
                                           "createdAt":  "2020-12-08T19:09:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "In the aspnetcore repo, we only do this if the issue is labeled with \"Needs: Author Feedback\". I wonder if Fabric Bot treating the \"needs more info\" label the same way in the runtime repo. I don\u0027t currently have permissions to view the Fabric Bot rules for the runtime repo, so I cannot check myself.",
                                           "updatedAt":  "2021-01-15T11:15:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc63zbFg",
                                           "createdAt":  "2025-07-17T11:32:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of our [issue cleanup automation](https://github.com/dotnet/runtime/blob/main/docs/issue-cleanup.md).\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-17T11:32:14Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "ManagedWebSocket.Abort() doesn\u0027t interrupt currently pending ReceiveAsync",
        "labels":  [
                       "api-suggestion",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/44719",
        "createdAt":  "2020-11-16T08:21:09Z",
        "number":  44719,
        "author":  "ptzremote",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBW5ldg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AmrAlSayed0",
                                            "createdAt":  "2020-11-16T09:53:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ptzremote",
                                            "createdAt":  "2020-11-16T14:13:13Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-01-09T21:59:43Z",
        "body":  "### Description\r\n\r\nI try to use Uri class to validate and extract host from URL.\r\nWhere are two cases:\r\n\r\n- `Uri.TryCreate(\"http://_contoso._com\", UriKind.Absolute, out _)` returns `true`\r\n- `Uri.TryCreate(\"http://_c._contoso._com\", UriKind.Absolute, out _)` returns `false`\r\n\r\nBased on [Top Level Domain Name Specification](https://tools.ietf.org/id/draft-liman-tld-names-00.html#rfc.section.2):\r\n\r\n\u003e A TLD label MUST be at least two characters long and MAY be as long as 63 characters - not counting any leading or trailing periods (.). It MUST consist of only ASCII characters from the groups \"letters\" (A-Z), \"digits\" (0-9) and \"hyphen\" (-), and it MUST start with an ASCII \"letter\", and it MUST NOT end with a \"hyphen\". Upper and lower case MAY be mixed at random, since DNS lookups are case-insensitive.\r\n\r\nSo, looks like `http://_contoso._com` is invalid absolute URI.\r\n\r\n### Configuration\r\nC# (.NET Framework 4.8)\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcEmCvQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyNzgxNzM0MQ==",
                                           "createdAt":  "2020-11-16T08:21:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in area-owners.md if you want to be subscribed.\u003cdetails\u003e\n  \u003csummary\u003eIssue Details\u003c/summary\u003e\n  \u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eDescription:\u003c/th\u003e\n    \u003ctd\u003e\n\n### Description\r\n\r\nI try to use Uri class to validate and extract host from URL.\r\nWhere are two cases:\r\n\r\n- `Uri.TryCreate(\"http://_contoso._com\", UriKind.Absolute, out _)` returns `true`\r\n- `Uri.TryCreate(\"http://_c._contoso._com\", UriKind.Absolute, out _)` returns `false`\r\n\r\nBased on [Top Level Domain Name Specification](https://tools.ietf.org/id/draft-liman-tld-names-00.html#rfc.section.2):\r\n\r\n\u003e A TLD label MUST be at least two characters long and MAY be as long as 63 characters - not counting any leading or trailing periods (.). It MUST consist of only ASCII characters from the groups \"letters\" (A-Z), \"digits\" (0-9) and \"hyphen\" (-), and it MUST start with an ASCII \"letter\", and it MUST NOT end with a \"hyphen\". Upper and lower case MAY be mixed at random, since DNS lookups are case-insensitive.\r\n\r\nSo, looks like `http://_contoso._com` is invalid absolute URI.\r\n\r\n### Configuration\r\nC# (.NET Framework 4.8)\r\n\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eptzremoute\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003c/table\u003e\n  \u003c/details\u003e",
                                           "updatedAt":  "2020-11-16T08:21:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyODA4ODY5OQ==",
                                           "createdAt":  "2020-11-16T14:15:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Fails also on .NET 5 - here\u0027s minimal repro poking at various variants:\r\n```c#\r\n    static void Main()\r\n    {\r\n        PrintAbsoluteUri_IsValid(\"http://a.com\");\r\n        PrintAbsoluteUri_IsValid(\"http://a._com\");\r\n        PrintAbsoluteUri_IsValid(\"http://a.b._com\");\r\n        PrintAbsoluteUri_IsValid(\"http://a.c_m\");\r\n        PrintAbsoluteUri_IsValid(\"http://a.b.c_m\");\r\n        PrintAbsoluteUri_IsValid(\"http://a.com_\");\r\n        PrintAbsoluteUri_IsValid(\"http://a.b.com_\");\r\n        PrintAbsoluteUri_IsValid(\"http://a_b.com\");\r\n        PrintAbsoluteUri_IsValid(\"http://_a.com\");\r\n        PrintAbsoluteUri_IsValid(\"http://a_.com\");\r\n        PrintAbsoluteUri_IsValid(\"http://a._b.com\");\r\n        PrintAbsoluteUri_IsValid(\"http://a.b_.com\");\r\n        PrintAbsoluteUri_IsValid(\"http://a.a_b.com\");\r\n        PrintAbsoluteUri_IsValid(\"http://_a.b.com\");\r\n    }\r\n    static void PrintAbsoluteUri_IsValid(string uri)\r\n    {\r\n        Console.WriteLine(uri + \" ... \" + Uri.TryCreate(uri, UriKind.Absolute, out _));\r\n    }\r\n```\r\n\r\n```\r\nhttp://a.com ... True\r\nhttp://a._com ... True\r\nhttp://a.b._com ... False\r\nhttp://a.c_m ... True\r\nhttp://a.b.c_m ... True\r\nhttp://a.com_ ... True\r\nhttp://a.b.com_ ... True\r\nhttp://a_b.com ... True\r\nhttp://_a.com ... True\r\nhttp://a_.com ... True\r\nhttp://a._b.com ... True\r\nhttp://a.b_.com ... True\r\nhttp://a.a_b.com ... True\r\nhttp://_a.b.com ... True\r\n```\r\n\r\n@MihaZupan any thoughts?",
                                           "updatedAt":  "2020-11-16T14:15:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyODIyOTI5Nw==",
                                           "createdAt":  "2020-11-16T18:03:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "While original RFC did not allow \u0027_\u0027, it is commonly used. \r\nThe other part is fact that DNS is only one mechanism for name resolution. URL processing is not necessarily  linked to that and I don\u0027t think URL is setup to enforce full DNS validation.",
                                           "updatedAt":  "2020-11-16T18:03:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczNTc0NzgwNA==",
                                           "createdAt":  "2020-11-30T12:09:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "I agree with Tomas, \u0027_\u0027 is historically in use, there\u0027s no point in avoiding it outright.\r\n\r\nIt isn\u0027t as simple as being accepted by Uri or not, the input examples also differ by HostNameType:\r\n```\r\nDns   http://a.com\r\nBasic http://a._com\r\n      http://a.b._com\r\nDns   http://a.c_m\r\nDns   http://a.b.c_m\r\nDns   http://a.com_\r\nDns   http://a.b.com_\r\nDns   http://a_b.com\r\nBasic http://_a.com\r\nDns   http://a_.com\r\nBasic http://a._b.com\r\nDns   http://a.b_.com\r\nDns   http://a.a_b.com\r\nBasic http://_a.b.com\r\n```\r\n\r\nDns will be matched first if possible. Every input that contains a label where _ is the first character is not matched by it. Specifically because of [this `IsASCIILetterOrDigit` check](https://github.com/dotnet/runtime/blob/c8a97ff77957202323b64b8513f363366010343f/src/libraries/System.Private.Uri/src/System/DomainNameHelper.cs#L186).\r\n\r\nThe rest are matched by [UNC](https://github.com/dotnet/runtime/blob/c8a97ff77957202323b64b8513f363366010343f/src/libraries/System.Private.Uri/src/System/UncNameHelper.cs#L39), which shows up as \u0027basic\u0027 in `Uri.HostNameType`.\r\n\r\nThe interesting case here is that `a._com` is matched, while `a.b._com` is not. I believe this specific case is a bug as it looks like we\u0027re not properly resetting the `validShortName` flag between labels in UNC validation.\r\n",
                                           "updatedAt":  "2020-11-30T12:09:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Todgj",
                                           "createdAt":  "2023-01-25T05:28:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "Is there something we should do here @MihaZupan? If not, we should perhaps close it. While the DNS my not allow it, URL does not necessarily depend on it (e.g. it is only subset) ",
                                           "updatedAt":  "2023-01-25T05:28:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5X2MzV",
                                           "createdAt":  "2023-03-17T13:13:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pimvd",
                                           "body":  "Any updates on this? I\u0027m facing this same issue in our use case where we are trying to create a URI object for (example) URL \"http://test.test._test.pimvandijk.eu\". This is an example-url, but we will use it like this a lot (the underscore at the third part of the url).\r\n\r\nError is: Invalid URI: The hostname could not be parsed.\r\n\r\n\r\nYou can check it via this small piece of code:\r\n`    [Fact]\r\n    public void Test()\r\n    {\r\n        string domain = \"http://test.test._test.pimvandijk.eu\";\r\n        var uri = new Uri(domain);\r\n    }\r\n`\r\n\r\nThe url works when I\u0027m checking the txt-records via Google Dig:\r\n![image](https://user-images.githubusercontent.com/1193635/225914584-a5eb3757-1ce1-4413-80af-ebf8ddd050c1.png)\r\n\r\nChecked on .net 7 \u0026 C# 11\r\n\r\nInteresting is that, as @MihaZupan mentioned, \"http://test._test.test.pimvandijk.eu\" is working perfect, but putting the underscore on the next part of the url fails.",
                                           "updatedAt":  "2023-03-17T13:29:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5X2qF8",
                                           "createdAt":  "2023-03-17T14:39:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pimvd",
                                           "body":  "I found what\u0027s happening. Let\u0027s take http://test1.test2._test3.pimvandijk.eu for example.\r\n\r\nIn the UncNameHelper.IsValid it will first check \"test1.\". This is valid and will take us to the next for-loop. Here it checks \"test2.\" and at the check of the . it will set validShortName to false. Coming to the _ of _test3, which will return false at https://github.com/dotnet/runtime/blob/9260c249140ef90b4299d0fe1aa3037e25228518/src/libraries/System.Private.Uri/src/System/UncNameHelper.cs#L92.\r\n\r\nAs mentioned in the comment on line 77 (\"Subsequent segments must start with a letter or a digit\") I think we have to add underscore to this check, but only if there are coming a letter or digit after the underscore.",
                                           "updatedAt":  "2023-03-17T14:39:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wSYK9",
                                           "createdAt":  "2024-01-09T21:59:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MullenStudio",
                                           "body":  "I recently hit this issue as well. As previous comments pointed out, the issue happens when the third or later segment of the URL starts with \u0027\\_\u0027, like `a.b._c.d`.\r\nBased on the code, such URL would fail `DomainNameHelper.IsValidByIri` first since this method checks if the first letter of any segment is a letter or digit (which is a weird check in my opinion).\r\nThen it would run the `UncNameHelper.IsValid` check. In this check, the comment in the code says the first segment allows \u0027\\_\u0027 but following segments don\u0027t. However, if follow the comments, the URL like `a._b.c` should be invalid but the method would return true, The reason is `validShortName` is not reset to false after checking the first segment.\r\nHowever, the question is what the expected design should be (should the examples like `a.b._c.d` and `a._b.c` considered as valid or invalid?). I feel that while `UncNameHelper` has issue (comment and behavior are not inconsistent), `DomainNameHelper` may also need change.",
                                           "updatedAt":  "2024-01-09T21:59:41Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "C# Uri with underscore",
        "labels":  [
                       "bug",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/47586",
        "createdAt":  "2021-01-28T17:06:23Z",
        "number":  47586,
        "author":  "antonfirsov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-16T18:43:06Z",
        "body":  "Following up on https://github.com/dotnet/runtime/pull/47058#issuecomment-763036857 and offline discussions:\r\n\r\nCurrently our use of dual-stack sockets is inconsistent and depends on historical factors. (See #46724 as an example.)\r\nWe should prefer Dual Stack whenever possible, and implement #47583 to provide a workaround for cases when it leads to a problem.\r\n\r\nAlternatively, we may implement Happy Eyeballs (#861, #26177), and migrate to it in our socket usages, but it\u0027s a much bigger change and may bring compatibility issues. ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwVjB4w==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2OTIzMTA2OA==",
                                           "createdAt":  "2021-01-28T17:06:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nFollowing up on https://github.com/dotnet/runtime/pull/47058#issuecomment-763036857 and offline discussions:\r\n\r\nCurrently our use of dual-stack sockets is inconsistent and depends on historical factors. (See #46724 as an example.)\r\nWe should prefer Dual Stack whenever possible, and implement #47583 to provide a workaround for cases when it leads to a problem.\r\n\r\nAlternatively, we may implement Happy Eyeballs (#861, #26177), and migrate to it in our socket usages, but it\u0027s a much bigger change and may bring compatibility issues. \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eantonfirsov\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net.Sockets`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-01-28T17:06:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2OTIzMTMzNw==",
                                           "createdAt":  "2021-01-28T17:06:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nFollowing up on https://github.com/dotnet/runtime/pull/47058#issuecomment-763036857 and offline discussions:\r\n\r\nCurrently our use of dual-stack sockets is inconsistent and depends on historical factors. (See #46724 as an example.)\r\nWe should prefer Dual Stack whenever possible, and implement #47583 to provide a workaround for cases when it leads to a problem.\r\n\r\nAlternatively, we may implement Happy Eyeballs (#861, #26177), and migrate to it in our socket usages, but it\u0027s a much bigger change and may bring compatibility issues. \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eantonfirsov\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-01-28T17:06:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4MDEwOTk0Mw==",
                                           "createdAt":  "2021-02-16T20:51:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: Nice to have, removes some duplicate code\r\nWe\u0027re committed to DualMode sockets (starting with `SocketsHttpHandler`)\r\nMay be better to do in larger PR rather than one by one.",
                                           "updatedAt":  "2021-02-16T20:51:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-qmH4",
                                           "createdAt":  "2025-08-19T00:47:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of our [issue cleanup automation](https://github.com/dotnet/runtime/blob/main/docs/issue-cleanup.md).\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-19T00:47:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BWMHj",
                                           "createdAt":  "2025-09-02T05:22:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "This issue will now be closed since it had been marked `no-recent-activity` but received no further activity in the past 14 days. It is still possible to reopen or comment on the issue, but please note that the issue will be locked if it remains inactive for another 30 days.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-02T05:22:36Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Use DualMode sockets consistently in BCL",
        "labels":  [
                       "enhancement",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/48123",
        "createdAt":  "2021-02-10T20:54:47Z",
        "number":  48123,
        "author":  "codybartfast",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC4YWoA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "23W",
                                            "createdAt":  "2021-07-21T16:34:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DmitryBk",
                                            "createdAt":  "2021-07-21T18:51:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "idrisnacer",
                                            "createdAt":  "2021-10-20T13:00:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "thscott",
                                            "createdAt":  "2023-11-29T23:45:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gamemann",
                                            "createdAt":  "2024-06-04T18:44:11Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2023-05-18T14:45:31Z",
        "body":  "SendAsync can complete successfully when the message has not, and cannot, be sent to the server.\r\n\r\nThis may be by design given the only exceptions documented appear to be ones that would be raised before starting to send, but my naive expectation was that an exception would be raised (WebSocketException?).\r\n\r\nThe behaviour can be recreated by disabling transport after a connection has been opened and then sending messages before the connection times out (30-ish seconds?).\r\n\r\nIt happens with .net \"5.0.102\" on the current release version of x64 Windows 20H2 (including Feb updates).\r\n\r\nSample Code:\r\n\r\n```c#\r\nusing System;\r\nusing System.Net.WebSockets;\r\nusing System.Text;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace WebSocketClient\r\n{\r\n    class Program\r\n    {\r\n        static Encoding encoding = UTF8Encoding.UTF8;\r\n        static ClientWebSocket webSocket = new ClientWebSocket();\r\n\r\n        static async Task Main()\r\n        {\r\n            await webSocket.ConnectAsync(new Uri(\"wss://echo.websocket.org/\"), CancellationToken.None);\r\n            var rcvTask = Task.Run(Receive);\r\n\r\n            await SendAsync(\"One\");\r\n            await Task.Delay(500);\r\n\r\n            Console.Write(\"Break transport ...? \");\r\n            // Manually disable transport here.  E.g., unplug router or disable laptop wifi.\r\n            Console.ReadLine();\r\n\r\n            await SendAsync(\"Two\");\r\n            await Task.Delay(500);\r\n            await SendAsync(\"Three\");\r\n            await Task.Delay(500);\r\n            Console.WriteLine(\"All Done\");\r\n        }\r\n\r\n        static async Task SendAsync(string msg)\r\n        {\r\n            var sndBuff = encoding.GetBytes(msg);\r\n            await webSocket.SendAsync(sndBuff, WebSocketMessageType.Text, true, CancellationToken.None);\r\n            Console.WriteLine($\"Sent message: {msg}\");\r\n        }\r\n\r\n        static void Receive()\r\n        {\r\n            var rcvBuff = new byte[1 \u003c\u003c 10];\r\n            while (true)\r\n            {\r\n                var rcvMessage = webSocket.ReceiveAsync(rcvBuff, CancellationToken.None).Result;\r\n                if (rcvMessage.MessageType == WebSocketMessageType.Text)\r\n                {\r\n                    var rcvText = encoding.GetString(rcvBuff, 0, rcvMessage.Count);\r\n                    Console.WriteLine($\"Received message: \\\"{rcvText}\\\"\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nSample output if transport is disabled (e.g., unplug router or disable laptop wifi):\r\n\r\n```\r\n    Sent message: One\r\n    Received message: \"One\"\r\n    Break transport ...? YES\r\n    Sent message: Two\r\n    Sent message: Three\r\n    All Done\r\n```\r\n\r\nSample output if transport is not disabled:\r\n\r\n```\r\n    Sent message: One\r\n    Received message: \"One\"\r\n    Break transport ...? NO\r\n    Sent message: Two\r\n    Received message: \"Two\"\r\n    Sent message: Three\r\n    Received message: \"Three\"\r\n    All Done\r\n```\r\n**Update**:  To expand on my naive expectation... given that TCP is a \u0027reliable\u0027 protocol I expected that the SendAsync task would not complete until the message had been successfully transported (or an exception raised).  But I don\u0027t have the knowledge of WebSockets or TCP to know if that would be \u0027normal\u0027, practical, or even possible behaviour.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOXJOOXQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3NzAyOTE5NQ==",
                                           "createdAt":  "2021-02-10T20:54:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nSendAsync can complete successfully when the message has not, and cannot, be sent to the server.\r\n\r\nThis may be by design given the only exceptions documented appear to be ones that would be raised before starting to send, but my naive expectation was that an exception would be raised (WebSocketException?).\r\n\r\nThe behaviour can be recreated by disabling transport after a connection has been opened and then sending messages before the connection times out (30-ish seconds?).\r\n\r\nIt happens with .net \"5.0.102\" on the current release version of x64 Windows 20H2 (including Feb updates).\r\n\r\nSample Code:\r\n\r\n```\r\nusing System;\r\nusing System.Net.WebSockets;\r\nusing System.Text;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace WebSocketClient\r\n{\r\n    class Program\r\n    {\r\n        static Encoding encoding = UTF8Encoding.UTF8;\r\n        static ClientWebSocket webSocket = new ClientWebSocket();\r\n\r\n        static async Task Main()\r\n        {\r\n            await webSocket.ConnectAsync(new Uri(\"wss://echo.websocket.org/\"), CancellationToken.None);\r\n            var rcvTask = Task.Run(Receive);\r\n\r\n            await SendAsync(\"One\");\r\n            await Task.Delay(500);\r\n\r\n            Console.Write(\"Break transport ...? \");\r\n            // Manually disable transport here.  E.g., unplug router or disable laptop wifi.\r\n            Console.ReadLine();\r\n\r\n            await SendAsync(\"Two\");\r\n            await Task.Delay(500);\r\n            await SendAsync(\"Three\");\r\n            await Task.Delay(500);\r\n            Console.WriteLine(\"All Done\");\r\n        }\r\n\r\n        static async Task SendAsync(string msg)\r\n        {\r\n            var sndBuff = encoding.GetBytes(msg);\r\n            await webSocket.SendAsync(sndBuff, WebSocketMessageType.Text, true, CancellationToken.None);\r\n            Console.WriteLine($\"Sent message: {msg}\");\r\n        }\r\n\r\n        static void Receive()\r\n        {\r\n            var rcvBuff = new byte[1 \u003c\u003c 10];\r\n            while (true)\r\n            {\r\n                var rcvMessage = webSocket.ReceiveAsync(rcvBuff, CancellationToken.None).Result;\r\n                if (rcvMessage.MessageType == WebSocketMessageType.Text)\r\n                {\r\n                    var rcvText = encoding.GetString(rcvBuff, 0, rcvMessage.Count);\r\n                    Console.WriteLine($\"Received message: \\\"{rcvText}\\\"\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nSample output if transport is disabled (e.g., unplug router or disable laptop wifi):\r\n\r\n```\r\n    Sent message: One\r\n    Received message: \"One\"\r\n    Break transport ...? YES\r\n    Sent message: Two\r\n    Sent message: Three\r\n    All Done\r\n```\r\n\r\nSample output if transport is not disabled:\r\n\r\n```\r\n    Sent message: One\r\n    Received message: \"One\"\r\n    Break transport ...? NO\r\n    Sent message: Two\r\n    Received message: \"Two\"\r\n    Sent message: Three\r\n    Received message: \"Three\"\r\n    All Done\r\n```\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ecodybartfast\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-02-10T20:54:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4MDExMTk4NQ==",
                                           "createdAt":  "2021-02-16T20:55:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: We need investigation -- if there is exception on socket, we should bubble it up. If we don\u0027t get error from OS, then there is nothing we can do.",
                                           "updatedAt":  "2021-02-16T20:55:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40tcuF",
                                           "createdAt":  "2021-07-21T16:36:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "23W",
                                           "body":  "I see the same bug in .Net Framework on Windows 10 (target framework is 4.6.2).\r\n@karelz \r\nDo you have some news about fixing the bug?",
                                           "updatedAt":  "2021-07-21T16:43:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40tdRq",
                                           "createdAt":  "2021-07-21T16:39:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@23W let\u0027s not mix .NET Framework here. We do not track those bugs in this repo and also, the implementation is ENTIRELY different -- relying on OS native implementation.\r\n\r\nThis particular bug on .NET Core is not addressed yet and does not have ETA. Are you hitting it on .NET Core also?",
                                           "updatedAt":  "2021-07-21T16:43:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40tdox",
                                           "createdAt":  "2021-07-21T16:42:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "23W",
                                           "body":  "@karelz \r\nNo, I meant .Net Framework only.",
                                           "updatedAt":  "2021-07-21T16:43:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40tdx1",
                                           "createdAt":  "2021-07-21T16:43:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "OK, I will hide the comments then as they are unrelated to this bug.",
                                           "updatedAt":  "2021-07-21T16:43:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cPu2P",
                                           "createdAt":  "2023-05-15T10:49:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "andersonhwang",
                                           "body":  "It looks the bug still not fixed, I used a heartbeat count to check disconnect now:D",
                                           "updatedAt":  "2023-05-15T10:49:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ck45d",
                                           "createdAt":  "2023-05-18T14:45:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CarnaViire",
                                           "body":  "Looks like this could benefit from https://github.com/dotnet/runtime/issues/48729",
                                           "updatedAt":  "2023-05-18T14:45:31Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "ClientWebSocket.SendAsync does not raise an exception when message cannot be sent",
        "labels":  [
                       "bug",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/48246",
        "createdAt":  "2021-02-12T16:13:12Z",
        "number":  48246,
        "author":  "denniskrq",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-19T15:18:30Z",
        "body":  "### Description\r\n\r\nI have a WebSocket client using the ClientWebSocket class, it has a public Send method, a private Poll method that dispatches an event upon receiving something, and a private Connect method. Code fragment:\r\n```c#\r\npublic async Task SendMessage(string message)\r\n{\r\n    using (await sendLock.LockAsync())\r\n    {\r\n        if (webSocketClient == null || webSocketClient.State != WebSocketState.Open)\r\n        {\r\n            await ConnectToWebSocket();\r\n        }\r\n\r\n        try\r\n        {\r\n            await webSocketClient.SendAsync(\r\n                new ArraySegment\u003cbyte\u003e(System.Text.Encoding.UTF8.GetBytes(message)),\r\n                WebSocketMessageType.Text,\r\n                true,\r\n                cts.Token);\r\n        }\r\n        catch (OperationCanceledException)\r\n        {\r\n            logger.LogInformation($\"SendMessage - cancellation received, aborting send...\");\r\n        }\r\n        catch (ObjectDisposedException odEx)\r\n        {\r\n            logger.LogError(\r\n                $\"SendMessage - WebSocket unexpectedly closed during sending, exception: {odEx.Message}\");\r\n            throw;\r\n        }\r\n        catch (InvalidOperationException ioEx)\r\n        {\r\n            logger.LogError($\"SendMessage - WebSocket not connected, exception: {ioEx.Message}\");\r\n            throw;\r\n        }\r\n        catch (WebSocketException wsEx)\r\n        {\r\n            logger.LogError($\"SendMessage - Unexpected WebSocket error, exception: {wsEx.Message}\");\r\n            throw;\r\n        }\r\n    }            \r\n    // PollMessage is pretty similar, except with Close message handling \u0026 event dispatch when ReceiveAsync returns\r\n    // Connect method is a wrapper around ConnectAsync that has some null \u0026 state checks on webSocketClient, and an exponential backoff retry in case the server isn\u0027t up\r\n}\r\n```\r\n\r\nThe problem... The WS server went down abruptly, so there was no close handshake, the WebSocketException ` The remote party closed the WebSocket connection without completing the close handshake.` was thrown in a client-side SendMessage call which was thrown up to the caller and logged. However, It seems that the webSocketClient.State property was **not** set to Closed because by the time the next SendMessage call was made, `ConnectToWebSocket()` was not called as I expect it to.\r\n\r\nMy question... Is this the expected behaviour when abrupt closures happen? Should I manually dispose the client object when I catch exceptions during send \u0026 receive?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvs4yzw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3ODQ1NTQ3NQ==",
                                           "createdAt":  "2021-02-12T21:07:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nI have a WebSocket client using the ClientWebSocket class, it has a public Send method, a private Poll method that dispatches an event upon receiving something, and a private Connect method. Code fragment:\r\n```\r\npublic async Task SendMessage(string message)\r\n{\r\n    using (await sendLock.LockAsync())\r\n    {\r\n        if (webSocketClient == null || webSocketClient.State != WebSocketState.Open)\r\n        {\r\n            await ConnectToWebSocket();\r\n        }\r\n\r\n        try\r\n        {\r\n            await webSocketClient.SendAsync(\r\n                new ArraySegment\u003cbyte\u003e(System.Text.Encoding.UTF8.GetBytes(message)),\r\n                WebSocketMessageType.Text,\r\n                true,\r\n                cts.Token);\r\n        }\r\n        catch (OperationCanceledException)\r\n        {\r\n            logger.LogInformation($\"SendMessage - cancellation received, aborting send...\");\r\n        }\r\n        catch (ObjectDisposedException odEx)\r\n        {\r\n            logger.LogError(\r\n                $\"SendMessage - WebSocket unexpectedly closed during sending, exception: {odEx.Message}\");\r\n            throw;\r\n        }\r\n        catch (InvalidOperationException ioEx)\r\n        {\r\n            logger.LogError($\"SendMessage - WebSocket not connected, exception: {ioEx.Message}\");\r\n            throw;\r\n        }\r\n        catch (WebSocketException wsEx)\r\n        {\r\n            logger.LogError($\"SendMessage - Unexpected WebSocket error, exception: {wsEx.Message}\");\r\n            throw;\r\n        }\r\n    }            \r\n    // PollMessage is pretty similar, except with Close message handling \u0026 event dispatch when ReceiveAsync returns\r\n    // Connect method is a wrapper around ConnectAsync that has some null \u0026 state checks on webSocketClient, and an exponential backoff retry in case the server isn\u0027t up\r\n}\r\n```\r\n\r\nThe problem... The WS server went down abruptly, so there was no close handshake, the WebSocketException ` The remote party closed the WebSocket connection without completing the close handshake.` was thrown in a client-side SendMessage call which was thrown up to the caller and logged. However, It seems that the webSocketClient.State property was **not** set to Closed because by the time the next SendMessage call was made, `ConnectToWebSocket()` was not called as I expect it to.\r\n\r\nMy question... Is this the expected behaviour when abrupt closures happen? Should I manually dispose the client object when I catch exceptions during send \u0026 receive?\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edenniskrq\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-02-12T21:07:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4MDExMjU3OQ==",
                                           "createdAt":  "2021-02-16T20:56:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: We should update the state (assuming it is possible).",
                                           "updatedAt":  "2021-02-16T20:56:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-qmHY",
                                           "createdAt":  "2025-08-19T00:47:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of our [issue cleanup automation](https://github.com/dotnet/runtime/blob/main/docs/issue-cleanup.md).\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-19T00:47:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-zjLP",
                                           "createdAt":  "2025-08-19T15:17:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEe-1UQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rampaa",
                                                                               "createdAt":  "2025-08-20T15:26:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "CarnaViire",
                                           "body":  "Triage: This is still relevant. The state is changed to Aborted if an exception is caught in receive ([src](https://github.com/dotnet/runtime/blob/19b9833fccb8885ee04152f4f05f9e2ac0dd215a/src/libraries/System.Net.WebSockets/src/System/Net/WebSockets/ManagedWebSocket.cs#L997-L1027), calling [OnAborted()]()), but never in send ([src](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Net.WebSockets/src/System/Net/WebSockets/ManagedWebSocket.cs#L530-L538), [src](https://github.com/dotnet/runtime/blob/19b9833fccb8885ee04152f4f05f9e2ac0dd215a/src/libraries/System.Net.WebSockets/src/System/Net/WebSockets/ManagedWebSocket.cs#L567-L579), [src](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Net.WebSockets/src/System/Net/WebSockets/ManagedWebSocket.cs#L607-L619)).",
                                           "updatedAt":  "2025-08-19T15:17:57Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "ClientWebSocket.State property still indicates \"Open\" after \"The remote party closed the WebSocket connection without completing the close handshake.\"",
        "labels":  [
                       "bug",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/48701",
        "createdAt":  "2021-02-24T14:37:12Z",
        "number":  48701,
        "author":  "Junocaen",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC8HISA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kezzyhko",
                                            "createdAt":  "2024-10-24T12:40:33Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-08-28T08:02:12Z",
        "body":  "\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\n\u003c!--\r\n* Please share a clear and concise description of the problem.\r\n* Include minimal steps to reproduce the problem if possible. E.g.: the smallest possible code snippet; or a small repo to clone, with steps to run it.\r\n* What behavior are you seeing, and what behavior would you expect?\r\n  --\u003e\r\n\r\n```cs\r\nSystem.Net.NetworkInformation.NetworkInterface .GetAllNetworkInterfaces()\r\n```\r\nThe function above can return and interface with NetworkInterfaceType 53 on systems with a \"\"TAP-Windows Adapter V9\" network adapter which is not part of the enum `System.Net.NetworkInformation.NetworkInterfaceType`. \r\n\r\nExcepted behavior:  NetworkInterfaceType  53 should be part of the enum with a suitable name.\r\n\r\n\r\n\r\n### Configuration\r\n\r\n\u003c!--\r\n* Which version of .NET is the code running on?\r\n* What OS and version, and what distro if applicable?\r\n* What is the architecture (x64, x86, ARM, ARM64)?\r\n* Do you know whether it is specific to that configuration?\r\n* If you\u0027re using Blazor, which web browser(s) do you see this issue in?\r\n  --\u003e\r\nWin 10 \r\n\r\n### Regression?\r\n\r\n\u003c!--\r\n* Did this work in a previous build or release of .NET Core, or from .NET Framework? If you can try a previous release or build to find out, that can help us narrow down the problem. If you don\u0027t know, that\u0027s OK.\r\n  --\u003e\r\n\r\n### Other information\r\n\r\n\u003c!--\r\n* Please include any relevant stack traces or error messages. If possible please include text as text rather than images (so it shows up in searches).\r\n* If you have an idea where the problem might lie, let us know that here. Please include any pointers to code, relevant changes, or related issues you know of.\r\n* Do you know of any workarounds?\r\n  --\u003e\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwHua-Q==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4NTExOTg3NA==",
                                           "createdAt":  "2021-02-24T14:37:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\n\u003c!--\r\n* Please share a clear and concise description of the problem.\r\n* Include minimal steps to reproduce the problem if possible. E.g.: the smallest possible code snippet; or a small repo to clone, with steps to run it.\r\n* What behavior are you seeing, and what behavior would you expect?\r\n  --\u003e\r\n\r\n```cs\r\nSystem.Net.NetworkInformation.NetworkInterface .GetAllNetworkInterfaces()\r\n```\r\nThe function above can return and interface with NetworkInterfaceType 53 on systems with a \"\"TAP-Windows Adapter V9\" network adapter which is not part of the enum `System.Net.NetworkInformation.NetworkInterfaceType`. \r\n\r\nExcepted behavior:  NetworkInterfaceType  53 should be part of the enum with a suitable name.\r\n\r\n\r\n\r\n### Configuration\r\n\r\n\u003c!--\r\n* Which version of .NET is the code running on?\r\n* What OS and version, and what distro if applicable?\r\n* What is the architecture (x64, x86, ARM, ARM64)?\r\n* Do you know whether it is specific to that configuration?\r\n* If you\u0027re using Blazor, which web browser(s) do you see this issue in?\r\n  --\u003e\r\nWin 10 \r\n\r\n### Regression?\r\n\r\n\u003c!--\r\n* Did this work in a previous build or release of .NET Core, or from .NET Framework? If you can try a previous release or build to find out, that can help us narrow down the problem. If you don\u0027t know, that\u0027s OK.\r\n  --\u003e\r\n\r\n### Other information\r\n\r\n\u003c!--\r\n* Please include any relevant stack traces or error messages. If possible please include text as text rather than images (so it shows up in searches).\r\n* If you have an idea where the problem might lie, let us know that here. Please include any pointers to code, relevant changes, or related issues you know of.\r\n* Do you know of any workarounds?\r\n  --\u003e\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eJunocaen\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-02-24T14:37:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4NTMxNTY3NQ==",
                                           "createdAt":  "2021-02-24T19:23:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "We would need API change to add it to NetworkInterfaceType enum. On Linux tap interface comes out as ethernet.",
                                           "updatedAt":  "2021-02-24T19:23:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4NjA2MjI3MQ==",
                                           "createdAt":  "2021-02-25T17:14:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBh2CQQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Junocaen",
                                                                               "createdAt":  "2021-03-02T07:06:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "Triage: we should look into all existing possible value we might be missing and add relevant ones to the enum, not just the one mention.\r\nThis also needs to go through API review process.\r\n\r\nWindows list (3 years old):\r\nhttps://github.com/tpn/winsdk-10/blob/master/Include/10.0.14393.0/shared/ipifcons.h#L30-L243\r\n",
                                           "updatedAt":  "2021-02-25T17:17:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7Ae5r5",
                                           "createdAt":  "2025-08-27T18:37:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of our [issue cleanup automation](https://github.com/dotnet/runtime/blob/main/docs/issue-cleanup.md).\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-27T18:37:09Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "NetworkInterfaceType 53 \"TAP-Windows Adapter V9\" not present in enum System.Net.NetworkInformation.NetworkInterfaceType",
        "labels":  [
                       "api-suggestion",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/48885",
        "createdAt":  "2021-02-28T20:16:05Z",
        "number":  48885,
        "author":  "stephentoub",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCxMdzg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tibel",
                                            "createdAt":  "2021-03-04T05:53:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "omariom",
                                            "createdAt":  "2023-07-09T16:22:02Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2023-07-20T14:34:53Z",
        "body":  "We should consider adding some event counters around name resolution, e.g.\r\n- Number of Dns requests issued\r\n- Number of Dns requests currently in fight\r\n- Number of unique Dns requests currently in flight",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYUG3dQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4NzUxNTQzOA==",
                                           "createdAt":  "2021-02-28T20:16:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWe should consider adding some event counters around name resolution, e.g.\r\n- Number of Dns requests issued\r\n- Number of Dns requests currently in fight\r\n- Number of unique Dns requests currently in flight\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003estephentoub\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e6.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-02-28T20:16:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4NzYwNTQxMg==",
                                           "createdAt":  "2021-03-01T03:12:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "Right now we have\r\n- `dns-lookups-requested` - DNS Lookups Requested (total counter)\r\n- `dns-lookups-duration` - Average DNS Lookup Duration\r\n\r\n\u003e Number of Dns requests currently in fight\r\n\r\nSomething like `current-dns-lookups` seems reasonable - we have that for `Net.Security` and `Net.Http` as well.\r\n\r\nWith #48566 in mind, the meaning of this would likely be \"number of not-finished `Dns.Foo(...)` calls\".\r\n\r\n\u003e Number of unique Dns requests currently in flight\r\n\r\nI assume the tracking of \"unique\" would be duplicated between the Telemetry impl and a potential #48566 impl?",
                                           "updatedAt":  "2021-03-01T03:14:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4NzYwNzM5NQ==",
                                           "createdAt":  "2021-03-01T03:18:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBhq8ww==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MihaZupan",
                                                                               "createdAt":  "2021-03-01T03:23:11Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e dns-lookups-requested\r\n\r\nAh, I didn\u0027t see that one.  That\u0027s the \"Number of Dns requests issued\" I was asking for.\r\n\r\n\u003e Something like current-dns-lookups seems reasonable ... the meaning of this would likely be \"number of not-finished Dns.Foo(...) calls\"\r\n\r\nYes, if we\u0027re already tracking number of requests initiated, then if we also tracked number of requests finished, it would be the difference.\r\n\r\n\u003e I assume the tracking of \"unique\" would be duplicated between the Telemetry impl and a potential #48566 impl?\r\n\r\nThere might be some duplication, but whatever we do for #48566 is likely to only apply to a portion of requests, e.g. those that are implemented by queueing work items to the thread pool.  On Windows most if not all requests will instead be implemented with async OS functionality, and we wouldn\u0027t do any such uniqueness tracking for the implementation.  Longer term, we\u0027d expect that to be true for all OSes.",
                                           "updatedAt":  "2021-03-01T03:18:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5MDc2OTkxOA==",
                                           "createdAt":  "2021-03-04T17:02:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "Triage: shouldn\u0027t be hard to implement, the numbers might be useful. We would want `current-dns-lookups` for 6.0.",
                                           "updatedAt":  "2021-03-04T17:02:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40seBr",
                                           "createdAt":  "2021-07-21T10:17:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBzb0yg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "davidfowl",
                                                                               "createdAt":  "2021-07-21T23:56:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "Currently implemented:\r\n- [X] `Start`/`Failed`/`Stop` events\r\n  - [ ] `Failed` could use some additional info such as the exception message - right now it\u0027s just an empty event\r\n- [X] `dns-lookups-requested` (total for process)\r\n- [X] `current-dns-lookups` (current)\r\n- [X] `dns-lookups-duration` (average time taken for lookups within the last counter period)\r\n\r\nNot yet added:\r\n- [ ] Number of unique DNS requests currently in flight\r\n\r\nPotential:\r\n- [ ] Number of unique DNS addresses resolved in an application’s lifetime (from #56072)",
                                           "updatedAt":  "2021-07-21T15:05:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40sl3y",
                                           "createdAt":  "2021-07-21T11:07:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Taking the discussion from https://github.com/dotnet/runtime/issues/56072#issuecomment-884088498 here:\r\n\r\n\u003e \u003e How many unique DNS addresses are resolved in an application’s lifetime?\r\n\r\n\u003e What is a developer going to do with this information? Doing this \"perfectly\" would be a leak, as it would require the application to maintain a set of every address it saw; that\u0027s not viable (it\u0027d be like Kestrel having a counter for how many unique client addresses connected to it over the process\u0027 lifetime). Events are already emitted for that information, so a dev can post-process that information from traces if needed.  #48885 (this issue) proposes one for the number of unique addresses _currently_ being resolved; from my perspective, that\u0027s more reasonable, though I\u0027m not sure how actionable it actually is, either.\r\n\r\nWe should answer:\r\n1. Do we want current vs. app-lifetime counter?\r\n2. How is it useful to end users?\r\n3. Is it important for 6.0?\r\n\r\n@davidfowl can you respond here please to @stephentoub\u0027s comment above?\r\n\r\nMoving the issue to 6.0 to make decision what to do in 6.0.",
                                           "updatedAt":  "2021-07-21T11:08:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40tHU9",
                                           "createdAt":  "2021-07-21T14:37:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCUMgfg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "MihaZupan",
                                                                               "createdAt":  "2021-07-21T14:41:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "karelz",
                                                                               "createdAt":  "2021-07-21T15:27:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "karelz",
                                                                               "createdAt":  "2021-07-21T15:27:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "davidfowl",
                                                                               "createdAt":  "2022-03-23T03:10:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "There are ways to get a statistical estimate of the number of unique addresses with quite limited storage.\r\n\r\nhttps://stats.stackexchange.com/questions/19014/how-can-i-estimate-unique-occurrence-counts-from-a-random-sampling-of-data\r\n\r\nhttps://en.wikipedia.org/wiki/HyperLogLog?wprov=sfti1 (there is a [relatively simple C# implementation ](https://github.com/krajek/hyperloglog/tree/master/HyperLogLog) with Apache license that could be used. \r\n\r\nhttps://en.wikipedia.org/wiki/Count-distinct_problem?wprov=sfti1\r\n\r\nEtc",
                                           "updatedAt":  "2021-07-21T17:41:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40uSHM",
                                           "createdAt":  "2021-07-21T22:52:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBzcERw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MihaZupan",
                                                                               "createdAt":  "2021-07-22T01:06:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "geoffkizer",
                                           "body":  "\u003e Events are already emitted for that information, so a dev can post-process that information from traces if needed\r\n\r\n+1. Let\u0027s log data at runtime and do statistical analysis in post-processing.",
                                           "updatedAt":  "2021-07-21T22:52:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc402RXR",
                                           "createdAt":  "2021-07-26T12:05:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Moving it to 7.0. @davidfowl let us know if you have more info that should change our mind ...",
                                           "updatedAt":  "2021-07-26T12:05:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41OmnH",
                                           "createdAt":  "2021-08-04T22:39:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@davidfowl can you ack or push back here to help us make the right call?",
                                           "updatedAt":  "2021-08-04T22:39:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41PI5Z",
                                           "createdAt":  "2021-08-05T04:47:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Is there any low hanging fruit here we could tackle for .NET 6? I think the unique dns requests are difficult and we can punt for now, but it would be ideal to add some of the other counters.",
                                           "updatedAt":  "2021-08-05T04:48:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GyddZ",
                                           "createdAt":  "2022-07-18T15:19:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "The \"Number of unique DNS requests currently in flight\" counter doesn\u0027t seem critical for 7.0. Moving to future.\r\n\r\n\u003e but it would be ideal to add some of the other counters\r\n\r\n@davidfowl did you have any other counters in mind (aside from those mentioned in https://github.com/dotnet/runtime/issues/48885#issuecomment-884072555)?",
                                           "updatedAt":  "2022-07-18T15:19:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hBMWZ",
                                           "createdAt":  "2023-07-09T12:31:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "This is something I would like to get done for .NET 8 now that we\u0027re moving to metrics. Specifically, a Meter in System.Net that reports the number of DNS resolutions with a host name dimension.\r\n\r\n",
                                           "updatedAt":  "2023-07-09T12:31:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hOrIz",
                                           "createdAt":  "2023-07-11T17:43:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "antonfirsov",
                                           "body":  "@davidfowl is DNS the only area you find critical in .NET 8 to define Metrics for, or is there anything from #88383 and #88384 you want us to get done?",
                                           "updatedAt":  "2023-07-11T17:43:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hQBKp",
                                           "createdAt":  "2023-07-11T22:27:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODAaX2g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "antonfirsov",
                                                                               "createdAt":  "2023-07-12T00:48:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "HTTP counters: https://github.com/dotnet/runtime/issues/88384 and DNS counters are the most important. The socket and TLS ones I think can wait. Specifically, the counters you cannot write yourselves are the most important for us to add (the connection pooling data that exists inside of SocketHttpHandler\u0027s guts).",
                                           "updatedAt":  "2023-07-11T22:28:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hQaZ2",
                                           "createdAt":  "2023-07-12T00:50:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODAaZHA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "davidfowl",
                                                                               "createdAt":  "2023-07-12T00:56:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "antonfirsov",
                                           "body":  "That should be all covered by #84978, #88384 is mostly about extras.",
                                           "updatedAt":  "2023-07-12T00:50:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hQbd1",
                                           "createdAt":  "2023-07-12T00:56:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Perfect, then I think the DNS one is the next most important one to add that isn\u0027t currently tracked for .NET 8.",
                                           "updatedAt":  "2023-07-12T00:56:57Z"
                                       }
                                   ],
                         "totalCount":  17
                     },
        "title":  "Add Dns event counters",
        "labels":  [
                       "enhancement",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/50359",
        "createdAt":  "2021-03-29T12:48:51Z",
        "number":  50359,
        "author":  "marek-safar",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBlN1SA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SebastianDremo",
                                            "createdAt":  "2021-03-29T14:20:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Symbai",
                                            "createdAt":  "2021-03-29T14:23:08Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2021-04-13T19:49:01Z",
        "body":  "Using a simple program like\r\n\r\n```c#\r\nusing System;\r\n\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        Console.WriteLine(new Uri (\"www.microsoft.com\"));\r\n    }\r\n}\r\n```\r\n\r\nshows that the default Uri constructor brings a lot for size-optimized setup. The size increase for adding Uri constructor is about 80 KB which seems to be a lot for a simple \"default\" constructor call.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMNET2Q==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwOTM0OTY4OQ==",
                                           "createdAt":  "2021-03-29T12:48:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-03-29T12:48:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwOTM0OTkzOA==",
                                           "createdAt":  "2021-03-29T12:49:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027size-reduction\u0027: @eerhardt, @SamMonoRT, @marek-safar, @tannergooding, @CoffeeFlux\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nUsing a simple program like\r\n\r\n```c#\r\nusing System;\r\n\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        Console.WriteLine(new Uri (\"www.microsoft.com\"));\r\n    }\r\n}\r\n```\r\n\r\nshows that the default Uri constructor brings a lot for size-optimized setup. The size increase for adding Uri constructor is about 80 KB which seems to be a lot for a simple \"default\" constructor call.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emarek-safar\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`size-reduction`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-03-29T12:49:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwOTM1MDQ0OA==",
                                           "createdAt":  "2021-03-29T12:50:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nUsing a simple program like\r\n\r\n```c#\r\nusing System;\r\n\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        Console.WriteLine(new Uri (\"www.microsoft.com\"));\r\n    }\r\n}\r\n```\r\n\r\nshows that the default Uri constructor brings a lot for size-optimized setup. The size increase for adding Uri constructor is about 80 KB which seems to be a lot for a simple \"default\" constructor call.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emarek-safar\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`, `size-reduction`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-03-29T12:50:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNTEwNTcxOA==",
                                           "createdAt":  "2021-04-07T17:50:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CoffeeFlux",
                                           "body":  "cc: @eerhardt ",
                                           "updatedAt":  "2021-04-07T17:50:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNTI2Nzc0NQ==",
                                           "createdAt":  "2021-04-07T21:11:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "scalablecory",
                                           "body":  "It\u0027s not clear that this is a problem -- do we have a graph of which dependencies it brings in that we think would be reasonable to remove (i.e. not typically used alongside `Uri`)? Or, is this a work item for someone to investigate?",
                                           "updatedAt":  "2021-04-07T21:11:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNTc4MDMzNQ==",
                                           "createdAt":  "2021-04-08T12:41:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CoffeeFlux",
                                           "body":  "The latter - we\u0027re trying to identify promising candidates for further reduction, and 80K is a _lot_ to bring in for just that constructor.\r\n\r\nIdeally someone more familiar with the area would take a look at the dependency graph, and I would assume there is a somewhat linker-unfriendly design that we might want to re-evaluate for size-optimized scenarios. See https://github.com/dotnet/runtime/issues/44534 for a similar example",
                                           "updatedAt":  "2021-04-08T16:59:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNTk3MDQyNw==",
                                           "createdAt":  "2021-04-08T16:34:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "geoffkizer",
                                           "body":  "Can you provide the dependency graph?",
                                           "updatedAt":  "2021-04-08T16:34:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxODE5NTQxMw==",
                                           "createdAt":  "2021-04-12T20:36:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CoffeeFlux",
                                           "body":  "I normally use ILSpy to look at this, though I think there\u0027s a linker tool for it as well? cc: @marek-safar \r\n\r\nSee https://github.com/dotnet/runtime/issues/44534#issuecomment-814457405 on how to generate the assemblies",
                                           "updatedAt":  "2021-04-12T20:36:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxOTAwODQ3Mw==",
                                           "createdAt":  "2021-04-13T19:49:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: Per discussion with @marek-safar does not seem critical for 6.0, moving to Future from Networking point of view.\r\nWe will be happy to help / provide advice if there is clear data available that is easy to digest. Let us know if that does not meet the expectations.",
                                           "updatedAt":  "2021-04-13T19:49:01Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Default Uri constructors brings a lot of dependencies",
        "labels":  [
                       "enhancement",
                       "area-System.Net",
                       "size-reduction"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/51231",
        "createdAt":  "2021-04-14T13:16:59Z",
        "number":  51231,
        "author":  "CarnaViire",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-04-29T14:35:24Z",
        "body":  "_From the discussion in https://github.com/dotnet/runtime/pull/49304/files#r603511027:_\r\n\r\nWhen sending data in WebSockets, we allocate a new buffer for the message being constructed, that will be comparable in size to the buffer passed in by the user.\r\n\r\nhttps://github.com/dotnet/runtime/blob/2c3eb64bf4340f30db980a77b835b049e4683020/src/libraries/System.Net.WebSockets/src/System/Net/WebSockets/ManagedWebSocket.cs#L576\r\n\r\nThis may lead to problems when the user\u0027s buffer is huge -- we will double the allocation size. It will be even worse when compression is enabled, as we will need another separate buffer for that.\r\n\r\nhttps://github.com/dotnet/runtime/blob/2c3eb64bf4340f30db980a77b835b049e4683020/src/libraries/System.Net.WebSockets/src/System/Net/WebSockets/Compression/WebSocketDeflater.cs#L57-L79\r\n\r\nThe solution would be to split one message into several smaller ones, but big enough not to get IO effects -- e.g. 16K seems to be good enough. However, this would need extensive perf research to make sure both non-compressed and compressed routes will not regress.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMW386A==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxOTUxMDU2Ng==",
                                           "createdAt":  "2021-04-14T13:17:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n_From the discussion in https://github.com/dotnet/runtime/pull/49304/files#r603511027:_\r\n\r\nWhen sending data in WebSockets, we allocate a new buffer for the message being constructed, that will be comparable in size to the buffer passed in by the user.\r\n\r\nhttps://github.com/dotnet/runtime/blob/3870c9f7f85df78aa12e48e0157998d8f4dc233a/src/libraries/System.Net.WebSockets/src/System/Net/WebSockets/ManagedWebSocket.cs#L534\r\n\r\nThis may lead to problems when the user\u0027s buffer is huge -- we will double the allocation size. It will be even worse when compression is enabled, as we will need another separate buffer for that.\r\n\r\n_I will add links to compression code here when https://github.com/dotnet/runtime/pull/49304 will be merged_\r\n\r\nThe solution would be to split one message into several smaller ones, but big enough not to get IO effects -- e.g. 16K seems to be good enough. However, this would need extensive perf research to make sure both non-compressed and compressed routes will not regress.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eCarnaViire\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`, `enhancement`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-04-14T13:17:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyNDk5MzA3Mg==",
                                           "createdAt":  "2021-04-22T16:27:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "Triage: this is a follow up optimization for WebSocket compressions, it does not block anything for 6.0.",
                                           "updatedAt":  "2021-04-22T16:27:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyOTI5MTc1Mg==",
                                           "createdAt":  "2021-04-29T14:35:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "zlatanov",
                                           "body":  "This is doable, but we need to be very careful. Let\u0027s consider the following case:\r\n\r\nI want to send big binary file over websockets. I could pick any fragment size I wish, and use the API to send it in chunks. I don\u0027t use a fragment size over 1 MB, but I could be using any size.\r\n\r\nThe suggested implementation hints that we should pick a max buffer size (e.g. **32KB**) and if the user provided payload is bigger, we rent multiple buffers. However, because the user\r\nis already doing partitioning, we adding another will almost always worsen things. One particular case would be where the user picked buffer size is just over our internal one. For example\r\nlet\u0027s assume the user is sending frames with **33KB** buffer size. What would end up happening is that we would allocate **2** buffers internally, **32KB** and **1KB** and send it in two parts. This would \r\nalmost certainly regress because the second send is not optimal.\r\n\r\nI am not saying we shouldn\u0027t do it. But I think that we should have a threshold below which the implementation will use 1 buffer, and above will try to use 2 or more buffers, but will try to make\r\nthem have almost identical sizes. For example we can have as follows:\r\n\r\nThreshold: **128KB** - if what user\u0027s is sending is less than that, we use a single buffer. \r\nExample 1: **129KB** - we allocate 2 buffers (**128KB** and **64KB**), the **128KB** buffer will contain **65KB** user data, and the **64KB** buffer will be full.\r\nExample 2: **256KB** - we allocate 2 buffers (**2**x **128KB**), both full\r\nExample 3: **257KB** - we allocate 3 buffers (**3**x **128KB**), each containing around **86KB** of payload\r\n\r\nWe need to prepare a lot of benchmarks before venturing on implementation. However because these benchmarks will be artificial and using the same machine, I am worried that they\r\nwill not be an accurate depiction of real world use. I don\u0027t know if it would be beneficial if we wait for **AspNetCore** to add the websocket compression and use their benchmarks in some way to verify these changes?\r\n\r\n@scalablecory what do you think?",
                                           "updatedAt":  "2021-04-29T14:35:24Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Implement large message splitting in WebSockets",
        "labels":  [
                       "enhancement",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/51590",
        "createdAt":  "2021-04-20T22:06:14Z",
        "number":  51590,
        "author":  null,
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-04-22T16:44:55Z",
        "body":  "We have an app that connects to a websocket service with a custom \"heartbeat\" mechanism. On an interval, the client requests a heartbeat from the server (via websocket message), and if the server doesn\u0027t reply, the client assumes the server is gone, and reconnects.\r\n\r\nWe have essentially the following code:\r\n```cs\r\nif (!hasReceivedHeartbeatAck)\r\n{\r\n    logger.Warning(\"Did not receive heartbeat Ack from gateway\");\r\n    await client.Disconnect(WebSocketCloseStatus.ProtocolError, \"Did not receive ACK in time\", default);\r\n    logger.Information(\"Connection closed, reconnecting...\");\r\n    await Reconnect();\r\n}\r\n```\r\n\r\n(the original code is [here](https://github.com/xSke/PluralKit/blob/a2d2036851139c18736371600f1d2625f3b2ba62/Myriad/Gateway/Shard.cs#L127), it calls [this method](https://github.com/xSke/PluralKit/blob/a2d2036851139c18736371600f1d2625f3b2ba62/Myriad/Gateway/ShardConnection.cs#L127) then the `return false` propagates up a couple methods and eventually gets to [this log line](https://github.com/xSke/PluralKit/blob/a2d2036851139c18736371600f1d2625f3b2ba62/Myriad/Gateway/Shard.cs#L90))\r\n\r\nWhen there\u0027s a server error, this works fine - the connection is correctly closed and reconnected.\r\nHowever, if the internet connection is lost (this can be reproduced by disconnecting the ethernet wire), `client.Disconnect` **hangs until the internet connection returns**, then throws the following error:\r\n\u003e System.Net.WebSockets.WebSocketException (2): The remote party closed the WebSocket connection without completing the close handshake. ---\u003e System.IO.IOException: Unable to read data from the transport connection: Connection reset by peer. ---\u003e System.Net.Sockets.SocketException (104): Connection reset by peer\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMSydWA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyMzYzMDI2MQ==",
                                           "createdAt":  "2021-04-20T22:06:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWe have an app that connects to a websocket service with a custom \"heartbeat\" mechanism. On an interval, the client requests a heartbeat from the server (via websocket message), and if the server doesn\u0027t reply, the client assumes the server is gone, and reconnects.\r\n\r\nWe have essentially the following code:\r\n```cs\r\nif (!hasReceivedHeartbeatAck)\r\n{\r\n    logger.Warning(\"Did not receive heartbeat Ack from gateway\");\r\n    await client.Disconnect(WebSocketCloseStatus.ProtocolError, \"Did not receive ACK in time\", default);\r\n    logger.Information(\"Connection closed, reconnecting...\");\r\n    await Reconnect();\r\n}\r\n```\r\n\r\n(the original code is [here](https://github.com/xSke/PluralKit/blob/a2d2036851139c18736371600f1d2625f3b2ba62/Myriad/Gateway/Shard.cs#L127), it calls [this method](https://github.com/xSke/PluralKit/blob/a2d2036851139c18736371600f1d2625f3b2ba62/Myriad/Gateway/ShardConnection.cs#L127) then the `return false` propagates up a couple methods and eventually gets to [this log line](https://github.com/xSke/PluralKit/blob/a2d2036851139c18736371600f1d2625f3b2ba62/Myriad/Gateway/Shard.cs#L90))\r\n\r\nWhen there\u0027s a server error, this works fine - the connection is correctly closed and reconnected.\r\nHowever, if the internet connection is lost (this can be reproduced by disconnecting the ethernet wire), `client.Disconnect` **hangs until the internet connection returns**, then throws the following error:\r\n\u003e System.Net.WebSockets.WebSocketException (2): The remote party closed the WebSocket connection without completing the close handshake. ---\u003e System.IO.IOException: Unable to read data from the transport connection: Connection reset by peer. ---\u003e System.Net.Sockets.SocketException (104): Connection reset by peer\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003espiralw\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-04-20T22:06:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyNTAwNzQ0OA==",
                                           "createdAt":  "2021-04-22T16:44:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "Triage: we should investigate possible solutions to the hang, like TCP_KEEPALIVE.",
                                           "updatedAt":  "2021-04-22T16:44:47Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "ClientWebSocket.CloseAsync hangs if internet connection is lost",
        "labels":  [
                       "bug",
                       "area-System.Net",
                       "tenet-reliability"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/52011",
        "createdAt":  "2021-04-28T21:43:56Z",
        "number":  52011,
        "author":  "vsfeedback",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-04-30T13:12:31Z",
        "body":  "_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/Ping-not-finding-a-host-is-not-an-Except/1397410)._\n\n---\nMy issue is with \"System.Net.NetworkInformation.PingException\" as it applies to a Ping request. Not finding a host is not something I even need a try/catch block for, because it is one of the expected outcomes for a Ping request. \nThe request either reaches the host and we get all the usual stats OR the host is not available and the PingReply says exactly that. After all, the Exception itself tells me precisely what I want - it is just irritating I have to handle it as an Exception, without getting the opportunity to consume the PingReply.\n\nThe main problem is that you built the infrastructure required to produce the results I am looking for but ruined it at the point of application. (I would be less inclined to give feedback if you were already close to the mark): \n- Ping.Send _already_ returns a PingReply object\n- one of the properties of PingReply is _IPStatus_\n- IPStatus is an enum which already _includes **all** the possible error states that are likely to be encountered._ \n\nWhy, then, would you raise an Exception when the value of IPStatus is anything other than Success (0)? You are negating the very reason you created the other enum values.\n\nPlease allow me to simply receive the IPStatus instead. It would be more logical for me to switch on the enum values. I would like my UI to simply report what IPStatus was returned because that\u0027s a hint to the end-user what needs fixing to restore communication.\n\n---\n### Original Comments\n\n#### Feedback Bot on 4/13/2021, 07:18 PM: \n\n\u003cp\u003eWe have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.\u003c/p\u003e\n\n\n---\n### Original Solutions\n(no solutions)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMXoZAw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyODgwMDEyMA==",
                                           "createdAt":  "2021-04-28T21:44:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/Ping-not-finding-a-host-is-not-an-Except/1397410)._\n\n---\nMy issue is with \"System.Net.NetworkInformation.PingException\" as it applies to a Ping request. Not finding a host is not something I even need a try/catch block for, because it is one of the expected outcomes for a Ping request. \nThe request either reaches the host and we get all the usual stats OR the host is not available and the PingReply says exactly that. After all, the Exception itself tells me precisely what I want - it is just irritating I have to handle it as an Exception, without getting the opportunity to consume the PingReply.\n\nThe main problem is that you built the infrastructure required to produce the results I am looking for but ruined it at the point of application. (I would be less inclined to give feedback if you were already close to the mark): \n- Ping.Send _already_ returns a PingReply object\n- one of the properties of PingReply is _IPStatus_\n- IPStatus is an enum which already _includes **all** the possible error states that are likely to be encountered._ \n\nWhy, then, would you raise an Exception when the value of IPStatus is anything other than Success (0)? You are negating the very reason you created the other enum values.\n\nPlease allow me to simply receive the IPStatus instead. It would be more logical for me to switch on the enum values. I would like my UI to simply report what IPStatus was returned because that\u0027s a hint to the end-user what needs fixing to restore communication.\n\n---\n### Original Comments\n\n#### Feedback Bot on 4/13/2021, 07:18 PM: \n\n\u003cp\u003eWe have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.\u003c/p\u003e\n\n\n---\n### Original Solutions\n(no solutions)\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003evsfeedback\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-04-28T21:44:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyOTM1ODk4Nw==",
                                           "createdAt":  "2021-04-29T15:54:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: We agree with the point above.\r\nIt would be a breaking change -- that may be fine on .NET Core. May be more challenging if .NET Framework behaves the same way. ... if .NET Framework does it the same way, it is a question if we should take the breaking change or not in .NET Core and diverge.\r\n\r\nNext step: We need to do testing if ping can fail for other reasons -- e.g. API returns error on Windows, etc.",
                                           "updatedAt":  "2021-04-29T15:56:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMDA4NTM3OQ==",
                                           "createdAt":  "2021-04-30T13:12:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KevinCathcart",
                                           "body":  "The status on .NET Framework is that the exception can be thrown in the following cases:\r\n\r\n- An exception occurs while marshaling or invoking the underlying windows method. (this dot not include API error values). I think throwing may be required here. This would not be the sort of expected occurance the requester was discussing.\r\n\r\n- For synchronous pings: If the error value is outside the range representable in the IPStatus enum then the error is thrown. The only options here are 1) using some sort of UnknownError enum value, 2) throwing, so that that there is a nested Win32Exception that allows users to know what the error really was. Such out of range errors.\r\n\r\n- For Asynchronous pings, the exception is thrown for any error value. This is the problematic case here.\r\n\r\nI\u0027m pretty sure the designers reasoned as follows: Many users design code for the happy path first (no error value). For synchronous ping, the happy and failure paths are both seen by looking in the the value returned from send, so users cannot miss the error (unless they simply don\u0027t look at the status property). For async case the happy path is the the request is sent, and the response when received triggers the callback. The user in this scenario has no reason to look at the return value from send, since it cannot ever have the response they want.  But users discarding this response means that errors determined at send time won\u0027t ever be seen by them, since the callback will never be called. This could result in deadlocking their application. By having these errors throw, the user cannot accidentally ignore them.\r\n\r\nHope this helps.",
                                           "updatedAt":  "2021-04-30T13:12:31Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Ping not finding a host is not an Exception - it\u0027s a status that should be in the PingReply",
        "labels":  [
                       "enhancement",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/52669",
        "createdAt":  "2021-05-12T21:08:23Z",
        "number":  52669,
        "author":  "jhudsoncedaron",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-05-23T00:12:15Z",
        "body":  "Discovered while trying to track down why Environment.MachineName doesn\u0027t always work (OEM character set conversion and NETBIOS so nothing to fix there)\r\n\r\n### Description\r\n\r\n* Install a new Windows OS\r\n* Set your hostname to 🦍\r\n* Try to use System.Net.Dns.GetHostName()\r\n\r\n### Configuration\r\n\r\nWindows 10 x64, hostname 🦍(actually anything not representable in  the local codepage will work)\r\n\r\n.NET 5 (not tried on lower versions)\r\n\r\n### Regression?\r\n\r\nNo\r\n\r\n### Other information\r\n\r\nBug here: https://github.com/dotnet/runtime/blob/01b7e73cd378145264a7cb7a09365b41ed42b240/src/libraries/System.Net.NameResolution/src/System/Net/NameResolutionPal.Windows.cs#L126\r\n\r\nWorkaround: If windows, P/Invoke GetComputerNameExW\r\n\r\n[hostname.zip](https://github.com/dotnet/runtime/files/6469080/hostname.zip)\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMnRBuw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MDA5ODE4MQ==",
                                           "createdAt":  "2021-05-12T21:08:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nDiscovered trying to track down why Environment.MachineName doesn\u0027t always work (OEM character set conversion and NETBIOS so nothing to fix there)\r\n\r\n### Description\r\n\r\n* Install a new Windows OS\r\n* Set your hostname to 🦍\r\n* Try to use System.Net.Dns.GetHostName()\r\n\r\n### Configuration\r\n\r\nWindows 10 x64, hostname 🦍(actually anything not representable in  the local codepage will work)\r\n\r\n.NET 5 (not tried on lower versions)\r\n\r\n### Regression?\r\n\r\nNo\r\n\r\n### Other information\r\n\r\nBug here: https://github.com/dotnet/runtime/blob/01b7e73cd378145264a7cb7a09365b41ed42b240/src/libraries/System.Net.NameResolution/src/System/Net/NameResolutionPal.Windows.cs#L126\r\n\r\nWorkaround: If windows, P/Invoke GetComputerNameExW\r\n\r\n[hostname.zip](https://github.com/dotnet/runtime/files/6469080/hostname.zip)\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejhudsoncedaron\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-05-12T21:08:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MDY3NzA4OQ==",
                                           "createdAt":  "2021-05-13T16:30:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: It is a bug. Does not seem to be common as nobody reported it until now. Moving to Future.",
                                           "updatedAt":  "2021-05-13T16:30:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MjcyNDgwMg==",
                                           "createdAt":  "2021-05-18T00:08:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBrOkNg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "scalablecory",
                                                                               "createdAt":  "2021-05-18T01:01:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "karelz",
                                                                               "createdAt":  "2021-05-18T11:29:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "joshudson",
                                           "body":  "Open to taking a PR? I seem to have nothing better to do this weekend?",
                                           "updatedAt":  "2021-05-18T00:08:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0Mjc0NzcxMA==",
                                           "createdAt":  "2021-05-18T01:11:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "scalablecory",
                                           "body":  "\u003e Open to taking a PR? I seem to have nothing better to do this weekend?\r\n\r\nThat\u0027d be great! Do you have a good understanding of where to start?",
                                           "updatedAt":  "2021-05-18T01:25:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0NjQzMTc4Mg==",
                                           "createdAt":  "2021-05-22T16:28:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joshudson",
                                           "body":  "PR: https://github.com/dotnet/runtime/pull/53126",
                                           "updatedAt":  "2021-05-22T16:28:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0NjQ3NjUyMg==",
                                           "createdAt":  "2021-05-22T23:37:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "geoffkizer",
                                           "body":  "What does gethostname() return in this case, out of curiosity? Is it returning an IDN?",
                                           "updatedAt":  "2021-05-22T23:37:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0NjQ3ODAxMg==",
                                           "createdAt":  "2021-05-22T23:56:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joshudson",
                                           "body":  "@geoffkizer : \"??\" An IDN would have been nice.",
                                           "updatedAt":  "2021-05-22T23:57:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0NjQ3OTgwMw==",
                                           "createdAt":  "2021-05-23T00:12:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joshudson",
                                           "body":  "I considered making the unit test for Dns.GetHostName() actually work rather than just check if it gets any result back. The only reasonable test I was able to come up with was running the hostname command and comparing the output. I still need to check if the command can be gotten to work on Windows or if it\u0027s hopelessly broken.",
                                           "updatedAt":  "2021-05-23T00:12:15Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "System.Net.Dns.GetHostName() doesn\u0027t always work on Windows due to unicode squashing",
        "labels":  [
                       "bug",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/53281",
        "createdAt":  "2021-05-26T13:09:50Z",
        "number":  53281,
        "author":  "pavelsavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-08-02T02:34:15Z",
        "body":  "### Description\r\n\r\nOuterloop unit tests are failing for System.Net.WebSockets.Client.Tests unit tests on Mono runtime on Windows.\r\n```\r\nSystem.Net.WebSockets.WebSocketException : Unable to connect to the remote server\r\n---- System.Net.Http.HttpRequestException : Unknown error (0xffffffff) (corefx-net-http11.azurewebsites.net:80)\r\n-------- System.Net.Sockets.SocketException : Unknown error (0xffffffff)\r\n\r\n   at System.Net.WebSockets.WebSocketHandle.ConnectAsync(Uri uri, CancellationToken cancellationToken, ClientWebSocketOptions options) in /_/src/libraries/System.Net.WebSockets.Client/src/System/Net/WebSockets/WebSocketHandle.Managed.cs:line 237\r\n   at System.Net.WebSockets.ClientWebSocket.ConnectAsyncCore(Uri uri, CancellationToken cancellationToken) in /_/src/libraries/System.Net.WebSockets.Client/src/System/Net/WebSockets/ClientWebSocket.cs:line 96\r\n   at System.Net.WebSockets.Client.Tests.WebSocketHelper.\u003c\u003ec__DisplayClass4_0.\u003c\u003cGetConnectedWebSocket\u003eb__0\u003ed.MoveNext() in /_/src/libraries/System.Net.WebSockets.Client/tests/WebSocketHelper.cs:line 93\r\n--- End of stack trace from previous location ---\r\n   at System.Net.WebSockets.Client.Tests.WebSocketHelper.\u003cRetry\u003ed__5`1[[System.Net.WebSockets.ClientWebSocket, System.Net.WebSockets.Client, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]].MoveNext() in /_/src/libraries/System.Net.WebSockets.Client/tests/WebSocketHelper.cs:line 109\r\n   at System.Net.WebSockets.Client.Tests.WebSocketHelper.\u003cRetry\u003ed__5`1[[System.Net.WebSockets.ClientWebSocket, System.Net.WebSockets.Client, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]].MoveNext() in /_/src/libraries/System.Net.WebSockets.Client/tests/WebSocketHelper.cs:line 116\r\n   at System.Net.WebSockets.Client.Tests.WebSocketHelper.TestEcho(Uri server, WebSocketMessageType type, Int32 timeOutMilliseconds, ITestOutputHelper output) in /_/src/libraries/System.Net.WebSockets.Client/tests/WebSocketHelper.cs:line 30\r\n   at System.Net.WebSockets.Client.Tests.ConnectTest.EchoBinaryMessage_Success(Uri server) in /_/src/libraries/System.Net.WebSockets.Client/tests/ConnectTest.cs:line 49\r\n--- End of stack trace from previous location ---\r\n----- Inner Stack Trace -----\r\n   at System.Net.Http.HttpConnectionPool.ConnectToTcpHostAsync(String host, Int32 port, HttpRequestMessage initialRequest, Boolean async, CancellationToken cancellationToken) in /_/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs:line 1363\r\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken) in /_/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs:line 1268\r\n   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken) in /_/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs:line 1371\r\n   at System.Net.Http.HttpConnectionPool.SendUsingHttp11Async(HttpRequestMessage request, Boolean async, Boolean doRequestAuth, CancellationToken cancellationToken) in /_/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs:line 854\r\n   at System.Net.Http.HttpConnectionPool.DetermineVersionAndSendAsync(HttpRequestMessage request, Boolean async, Boolean doRequestAuth, CancellationToken cancellationToken) in /_/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs:line 901\r\n   at System.Net.Http.HttpConnectionPool.SendAndProcessAltSvcAsync(HttpRequestMessage request, Boolean async, Boolean doRequestAuth, CancellationToken cancellationToken) in /_/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs:line 906\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean async, Boolean doRequestAuth, CancellationToken cancellationToken) in /_/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs:line 925\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken) in /_/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/RedirectHandler.cs:line 30\r\n\r\n```\r\n\r\n\r\n### Example of failed CI run\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=1156947\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=34938616\u0026resultId=103675\u0026paneView=debug\r\n\r\n### Configuration\r\nTo reproduce locally\r\n- build mono `build.cmd -bl -subset libs+mono+host+packs -c Release`\r\n- run test `dnet build /p:DebuggerSupport=true /p:RuntimeFlavor=mono /p:OuterLoop=true /p:Configuration=Release /t:Test src/libraries/System.Net.WebSockets.Client/tests`\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONRZ-mQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0ODc1NjQwMg==",
                                           "createdAt":  "2021-05-26T13:09:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nOuterloop unit tests are failing for System.Net.WebSockets.Client.Tests unit tests on Mono runtime on Windows.\r\n```\r\nSystem.Net.WebSockets.WebSocketException : Unable to connect to the remote server\r\n---- System.Net.Http.HttpRequestException : Unknown error (0xffffffff) (corefx-net-http11.azurewebsites.net:80)\r\n-------- System.Net.Sockets.SocketException : Unknown error (0xffffffff)\r\n\r\n   at System.Net.WebSockets.WebSocketHandle.ConnectAsync(Uri uri, CancellationToken cancellationToken, ClientWebSocketOptions options) in /_/src/libraries/System.Net.WebSockets.Client/src/System/Net/WebSockets/WebSocketHandle.Managed.cs:line 237\r\n   at System.Net.WebSockets.ClientWebSocket.ConnectAsyncCore(Uri uri, CancellationToken cancellationToken) in /_/src/libraries/System.Net.WebSockets.Client/src/System/Net/WebSockets/ClientWebSocket.cs:line 96\r\n   at System.Net.WebSockets.Client.Tests.WebSocketHelper.\u003c\u003ec__DisplayClass4_0.\u003c\u003cGetConnectedWebSocket\u003eb__0\u003ed.MoveNext() in /_/src/libraries/System.Net.WebSockets.Client/tests/WebSocketHelper.cs:line 93\r\n--- End of stack trace from previous location ---\r\n   at System.Net.WebSockets.Client.Tests.WebSocketHelper.\u003cRetry\u003ed__5`1[[System.Net.WebSockets.ClientWebSocket, System.Net.WebSockets.Client, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]].MoveNext() in /_/src/libraries/System.Net.WebSockets.Client/tests/WebSocketHelper.cs:line 109\r\n   at System.Net.WebSockets.Client.Tests.WebSocketHelper.\u003cRetry\u003ed__5`1[[System.Net.WebSockets.ClientWebSocket, System.Net.WebSockets.Client, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]].MoveNext() in /_/src/libraries/System.Net.WebSockets.Client/tests/WebSocketHelper.cs:line 116\r\n   at System.Net.WebSockets.Client.Tests.WebSocketHelper.TestEcho(Uri server, WebSocketMessageType type, Int32 timeOutMilliseconds, ITestOutputHelper output) in /_/src/libraries/System.Net.WebSockets.Client/tests/WebSocketHelper.cs:line 30\r\n   at System.Net.WebSockets.Client.Tests.ConnectTest.EchoBinaryMessage_Success(Uri server) in /_/src/libraries/System.Net.WebSockets.Client/tests/ConnectTest.cs:line 49\r\n--- End of stack trace from previous location ---\r\n----- Inner Stack Trace -----\r\n   at System.Net.Http.HttpConnectionPool.ConnectToTcpHostAsync(String host, Int32 port, HttpRequestMessage initialRequest, Boolean async, CancellationToken cancellationToken) in /_/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs:line 1363\r\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken) in /_/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs:line 1268\r\n   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken) in /_/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs:line 1371\r\n   at System.Net.Http.HttpConnectionPool.SendUsingHttp11Async(HttpRequestMessage request, Boolean async, Boolean doRequestAuth, CancellationToken cancellationToken) in /_/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs:line 854\r\n   at System.Net.Http.HttpConnectionPool.DetermineVersionAndSendAsync(HttpRequestMessage request, Boolean async, Boolean doRequestAuth, CancellationToken cancellationToken) in /_/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs:line 901\r\n   at System.Net.Http.HttpConnectionPool.SendAndProcessAltSvcAsync(HttpRequestMessage request, Boolean async, Boolean doRequestAuth, CancellationToken cancellationToken) in /_/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs:line 906\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean async, Boolean doRequestAuth, CancellationToken cancellationToken) in /_/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs:line 925\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken) in /_/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/RedirectHandler.cs:line 30\r\n\r\n```\r\n\r\n\r\n### Example of failed CI run\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=1156947\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=34938616\u0026resultId=103675\u0026paneView=debug\r\n\r\n### Configuration\r\nTo reproduce locally\r\n- build mono `build.cmd -bl -subset libs+mono+host+packs -c Release`\r\n- run test `dnet build /p:DebuggerSupport=true /p:RuntimeFlavor=mono /p:OuterLoop=true /p:Configuration=Release /t:Test src/libraries/System.Net.WebSockets.Client/tests`\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003epavelsavara\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`, `runtime-mono`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-05-26T13:09:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0OTc1MTg5Mw==",
                                           "createdAt":  "2021-05-27T15:59:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@pavelsavara can you please triage this one? (set milestone + remove Untriaged label) Thanks!",
                                           "updatedAt":  "2021-05-27T15:59:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1Mzk4MDQ3OA==",
                                           "createdAt":  "2021-06-03T15:56:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@pavelsavara ping?",
                                           "updatedAt":  "2021-06-03T15:56:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NDA1ODk3OA==",
                                           "createdAt":  "2021-06-03T17:43:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lewing",
                                           "body":  "This is desktop mono on Windows?  I don\u0027t think that is a priority right now\r\n\r\ncc @marek-safar @steveisok ",
                                           "updatedAt":  "2021-06-03T17:43:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NDA2Mzg2MQ==",
                                           "createdAt":  "2021-06-03T17:50:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "This is definitely not a high priority from my perspective.",
                                           "updatedAt":  "2021-06-03T17:50:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41Fn6Z",
                                           "createdAt":  "2021-08-02T02:34:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VincentBu",
                                           "body":  "Failed again in [runtime-libraries-coreclr outerloop 20210801.2](https://dev.azure.com/dnceng/public/_build/results?buildId=1270584\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=37594114\u0026resultId=102593\u0026paneView=debug)\r\n\r\nFailed test:\r\n```\r\nnet6.0-windows-Release-x64-CoreCLR_release-(Windows.Server.Core.1909.Amd64.Open)windows.10.amd64.server20h1.open@mcr.microsoft.com/dotnet-buildtools/prereqs:windowsservercore-2004-helix-amd64-20200904200251-272704c\r\n\r\n- System.Net.WebSockets.Client.Tests.ConnectTest.ConnectAndCloseAsync_UseProxyServer_ExpectedClosedState(server: ws://corefx-net-http11.azurewebsites.net/WebSocket/EchoWebSocket.ashx)\r\n\r\n```\r\n**Error message:**\r\n```\r\nSystem.Net.WebSockets.WebSocketException : Unable to connect to the remote server\r\n---- System.Net.Http.HttpRequestException : An error occurred while sending the request.\r\n-------- System.IO.IOException : Unable to read data from the transport connection: An existing connection was forcibly closed by the remote host..\r\n------------ System.Net.Sockets.SocketException : An existing connection was forcibly closed by the remote host.\r\n\r\n\r\nStack trace\r\n   at System.Net.WebSockets.WebSocketHandle.ConnectAsync(Uri uri, CancellationToken cancellationToken, ClientWebSocketOptions options) in /_/src/libraries/System.Net.WebSockets.Client/src/System/Net/WebSockets/WebSocketHandle.Managed.cs:line 237\r\n   at System.Net.WebSockets.ClientWebSocket.ConnectAsyncCore(Uri uri, CancellationToken cancellationToken) in /_/src/libraries/System.Net.WebSockets.Client/src/System/Net/WebSockets/ClientWebSocket.cs:line 104\r\n   at System.Net.WebSockets.Client.Tests.ConnectTest.ConnectAndCloseAsync_UseProxyServer_ExpectedClosedState(Uri server) in /_/src/libraries/System.Net.WebSockets.Client/tests/ConnectTest.cs:line 247\r\n--- End of stack trace from previous location ---\r\n----- Inner Stack Trace -----\r\n   at System.Net.Http.HttpConnection.SendAsyncCore(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken) in /_/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnection.cs:line 817\r\n   at System.Net.Http.HttpConnectionPool.SendUsingHttp11Async(HttpRequestMessage request, Boolean async, Boolean doRequestAuth, CancellationToken cancellationToken) in /_/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs:line 981\r\n   at System.Net.Http.HttpConnectionPool.DetermineVersionAndSendAsync(HttpRequestMessage request, Boolean async, Boolean doRequestAuth, CancellationToken cancellationToken) in /_/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs:line 1015\r\n   at System.Net.Http.HttpConnectionPool.SendAndProcessAltSvcAsync(HttpRequestMessage request, Boolean async, Boolean doRequestAuth, CancellationToken cancellationToken) in /_/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs:line 1028\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean async, Boolean doRequestAuth, CancellationToken cancellationToken) in /_/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs:line 1038\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken) in /_/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/RedirectHandler.cs:line 30\r\n   at System.Net.WebSockets.WebSocketHandle.ConnectAsync(Uri uri, CancellationToken cancellationToken, ClientWebSocketOptions options) in /_/src/libraries/System.Net.WebSockets.Client/src/System/Net/WebSockets/WebSocketHandle.Managed.cs:line 143\r\n----- Inner Stack Trace -----\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource\u003cSystem.Int32\u003e.GetResult(Int16 token) in /_/src/libraries/System.Net.Sockets/src/System/Net/Sockets/Socket.Tasks.cs:line 1267\r\n   at System.Net.Http.HttpConnection.ReadAsync(Memory`1 destination) in /_/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnection.cs:line 1703\r\n   at System.Net.Http.HttpConnection.RawConnectionStream.ReadAsync(Memory`1 buffer, CancellationToken cancellationToken) in /_/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/RawConnectionStream.cs:line 88\r\n   at System.Net.Http.HttpConnection.InitialFillAsync(Boolean async) in /_/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnection.cs:line 1593\r\n   at System.Net.Http.HttpConnection.SendAsyncCore(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken) in /_/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnection.cs:line 580\r\n----- Inner Stack Trace -----\r\n```",
                                           "updatedAt":  "2021-08-02T02:34:15Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "[mono][windows] System.Net.Sockets.SocketException : Unknown error (0xffffffff)",
        "labels":  [
                       "area-System.Net",
                       "runtime-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/53455",
        "createdAt":  "2021-05-28T23:25:17Z",
        "number":  53455,
        "author":  "dotMorten",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-01-21T17:18:14Z",
        "body":  "### Description\r\n\r\nWe rely heavily on request/response caching in our request stack. This has always worked awesome, but a re-investigation into a performance regression reveals that at some point, caching stopped working.\r\nLooking at the handler code, it is clear why:\r\n\r\nhttps://github.com/dotnet/runtime/blob/bf75c2d777f23dfa7c0011c7e65a85563c1db497/src/libraries/System.Net.Http/src/uap/System/Net/HttpClientHandler.cs#L397-L401\r\n\r\nThere doesn\u0027t appear to be a way to turn this back on either. Preferably we\u0027d like to set it to Default actually, as that gives the best and most correct behavior.\r\n\r\n### Configuration\r\nUWP / Windows\r\n\r\n### Regression?\r\nYes\r\n\r\n### Other information\r\nYou can use FiddlerTool to validate that repeated requests will never use etags returned from the server, or if using expiration without etag, will still re-request every single request, and get a 200 instead of 304 back.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMwEeEA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1MDcxODYxMQ==",
                                           "createdAt":  "2021-05-28T23:25:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nWe rely heavily on request/response caching in our request stack. This has always worked awesome, but a re-investigation into a performance regression reveals that at some point, caching stopped working.\r\nLooking at the handler code, it is clear why:\r\n\r\nhttps://github.com/dotnet/runtime/blob/bf75c2d777f23dfa7c0011c7e65a85563c1db497/src/libraries/System.Net.Http/src/uap/System/Net/HttpClientHandler.cs#L397-L401\r\n\r\nThere doesn\u0027t appear to be a way to turn this back on either. Preferably we\u0027d like to set it to Default actually, as that gives the best and most correct behavior.\r\n\r\n### Configuration\r\nUWP / Windows\r\n\r\n### Regression?\r\nYes\r\n\r\n### Other information\r\nYou can use FiddlerTool to validate that repeated requests will never use etags returned from the server, or if using expiration without etag, will still re-request every single request, and get a 200 instead of 304 back.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edotMorten\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-05-28T23:25:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1MjQxNzk5Mw==",
                                           "createdAt":  "2021-06-01T20:17:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotMorten",
                                           "body":  "CC @davidsh. Since the original issues this change was linked to was in the corefx repos and those all looks to be gone, perhaps you can cast some light as to why this change was made, and if there\u0027s a good way get proper client caching and the performance that comes with it back? ref: https://github.com/dotnet/runtime/commit/9de44631486c497c24e81ec2f0641bd8e0f83969",
                                           "updatedAt":  "2021-06-01T20:19:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1Mjg0NzQ2Mw==",
                                           "createdAt":  "2021-06-02T08:53:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@dotMorten here\u0027s the originally linked issue: #17042 (all issues moved to runtime repo, but the old URLs are redirected)\r\n\r\nIt seems that our UWP APIs had this behavior for compatibility with .NET Framework form the beginning. Or did you see some earlier UWP versions that behaved differently?\r\n\r\nDid you consider using the WinRT APIs directly? AFAIK that was recommended way in general to use directly [`Windows.Web.Http.HttpClient`](https://docs.microsoft.com/en-us/uwp/api/Windows.Web.Http.HttpClient?view=winrt-20348) instead of our wrappers when you need more advanced features from WinRT ...",
                                           "updatedAt":  "2021-06-02T08:53:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1MzQwNzYzOA==",
                                           "createdAt":  "2021-06-02T21:51:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotMorten",
                                           "body":  "@karelz I know with 99.999% certainty I verified caching working some years back. Also judging from the code currently there, it does work for older Windows versions that didn\u0027t support the `NoCache` value.\r\n\r\n\u003e AFAIK that was recommended way in general to use directly Windows.Web.Http.HttpClient instead of our wrappers \r\n\r\nThat is tricky when you\u0027re trying to build a cross-platform SDK and need a common set of public http APIs.\r\n\r\nI was able to turn caching on using the following, but it breaks down in release mode, and couldn\u0027t get the runtime directives to avoid optimizing it away:\r\n\r\n```cs\r\nprivate static bool ConfigureHttpFilterCaching(HttpClientHandler handler)\r\n{\r\n    // Attempt to turn on built-in caching using reflection\r\n    var f = typeof(HttpClientHandler).GetField(\"_rtFilter\", BindingFlags.Instance | BindingFlags.NonPublic);\r\n    if (f?.GetValue(handler) is Windows.Web.Http.Filters.HttpBaseProtocolFilter filter)\r\n    {\r\n        filter.CacheControl.ReadBehavior = Windows.Web.Http.Filters.HttpCacheReadBehavior.Default;\r\n        filter.CacheControl.WriteBehavior = Windows.Web.Http.Filters.HttpCacheWriteBehavior.Default;\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n```\r\n\r\nI guess the question still stand: How are we supposed to turn on the caching feature that is already there? For .NET Framework we have a global way to set the default cache policy used by all handler instances: https://github.com/microsoft/referencesource/blob/master/System/net/System/Net/Http/WebRequestHandler.cs#L176",
                                           "updatedAt":  "2021-06-02T22:37:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NTcxMTI0OA==",
                                           "createdAt":  "2021-06-07T08:17:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "\u003e That is tricky when you\u0027re trying to build a cross-platform SDK and need a common set of public http APIs.\r\n\r\nWhat is the key challenge? Is it multi-targeting, or is there more to it?",
                                           "updatedAt":  "2021-06-07T08:17:59Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "UWP: Web request turns off when running on a newer version of Windows",
        "labels":  [
                       "enhancement",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/54360",
        "createdAt":  "2021-06-17T19:58:46Z",
        "number":  54360,
        "author":  "roberto-tim",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-06-22T19:48:13Z",
        "body":  "We have a simple text based CLI over WebSockets and sending a command results in multiple packets being returned.  It appears that when awaiting ClientWebSocket.ReceiveAsync packets that have 0xFF\u0027s in the payload are causing an WebSocketExecption Aborted exception.\r\n\r\n```\r\nExample code as not doing any special: \r\n\r\n               ArraySegment\u003cbyte\u003e _buffer = new(new byte[2048]);\r\n               var ws = new ClientWebSocket();\r\n\r\n               await ws.ConnectAsync(uri, CancellationToken.None);\r\n\r\n               byte[] data = Encoding.UTF8.GetBytes(line + delimiter);\r\n               await ws.SendAsync(data, WebSocketMessageType.Text, true, CancellationToken.None);\r\n\r\n               var result = await ws.ReceiveAsync(_buffer, CancellationToken.None);\r\n```\r\n\r\nFrom WireShark\r\n\r\nWorking packet:\r\n\r\n```\r\nValue = Slot2.Carddata.SubNo = 0000000000000\\r\\n\r\n\r\n0000   90 b1 1c 7a 90 f2 00 16 9e dc 09 10 08 00 45 00   ...z..........E.\r\n0010   00 50 c5 e7 00 00 40 06 32 67 ac 10 15 0e ac 10   .P....@.2g......\r\n0020   15 2b 00 50 e7 63 00 98 ab 04 9e 44 79 a6 50 18   .+.P.c.....Dy.P.\r\n0030   39 08 e3 8b 00 00 81 26 53 6c 6f 74 32 2e 43 61   9......\u0026Slot2.Ca\r\n0040   72 64 64 61 74 61 2e 53 75 62 4e 6f 20 3d 20 30   rddata.SubNo = 0\r\n0050   30 30 30 30 30 30 30 30 30 30 30 30 0d 0a         000000000000..\r\n```\r\n\r\nPacket causing ClientWebSocket to throw WebSocketExecption\r\n```\r\nValue = Slot3.Carddata.SubNo = �������������\\r\\n\r\n\r\n0000   90 b1 1c 7a 90 f2 00 16 9e dc 09 10 08 00 45 00   ...z..........E.\r\n0010   00 50 c5 f4 00 00 40 06 32 5a ac 10 15 0e ac 10   .P....@.2Z......\r\n0020   15 2b 00 50 e7 63 00 98 ac af 9e 44 79 c9 50 18   .+.P.c.....Dy.P.\r\n0030   39 08 01 10 00 00 81 26 53 6c 6f 74 33 2e 43 61   9......\u0026Slot3.Ca\r\n0040   72 64 64 61 74 61 2e 53 75 62 4e 6f 20 3d 20 ff   rddata.SubNo = .\r\n0050   ff ff ff ff ff ff ff ff ff ff ff ff 0d 0a         ..............\r\n\r\n```\r\n**NOTE**: The remaining packets after this one have been sent ok and I can see them in the WireShark.\r\n\r\n### Configuration\r\n\r\n.NET 5 WPF application\r\nWindows 10 64bit - Version 10.0.19043 Build 19043\r\nMicrosoft Visual Studio Enterprise 2019  - Version 16.10.2\r\n\r\n.NET SDK (reflecting any global.json):\r\nVersion:   5.0.301\r\nCommit:    ef17233f86\r\n\r\nRuntime Environment:\r\nOS Name:     Windows\r\nOS Version:  10.0.19043\r\nOS Platform: Windows\r\nRID:         win10-x64\r\nBase Path:   C:\\Program Files\\dotnet\\sdk\\5.0.301\\\r\n\r\nHost (useful for support):\r\n  Version: 5.0.7\r\n  Commit:  556582d964\r\n\r\n###StackTrace:\r\n\r\n```\r\nSystem.Net.WebSockets.WebSocketException\r\n  HResult=0x80004005\r\n  Message=An exception caused the WebSocket to enter the Aborted state. Please see the InnerException, if present, for more details.\r\n  Source=System.Net.WebSockets\r\n  StackTrace:\r\n   at System.Net.WebSockets.ManagedWebSocket.\u003cCloseWithReceiveErrorAndThrowAsync\u003ed__71.MoveNext()\r\n```\r\n\r\n\r\n### Other information\r\nWebSocketSharp-core **works correctly** and does not abort with same payload.\r\n    \u003cPackageReference Include=\"websocketsharp.core\" Version=\"1.0.0\" /\u003e\r\n\r\n### Additional issue\r\nWhy Oh Why has ClientWebSocket been sealed it meant that I could not try fix this by pre-processing the data before it was processed by ClientWebSocket handlers!\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOM6Jx-g==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2MzUyMzUyMw==",
                                           "createdAt":  "2021-06-17T19:58:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWhen awaiting ClientWebSocket.ReceiveAsync packets that have 0xFF appear to be causing a Aborted exception.\r\n\r\n```\r\n               ArraySegment\u003cbyte\u003e _buffer = new(new byte[2048]);\r\n               var ws = new ClientWebSocket();\r\n               await ws.ConnectAsync(uri, CancellationToken.None);\r\n               var result = await _wsa.ReceiveAsync(_buffer, CancellationToken.None);\r\n```\r\n\r\nFrom WireShark\r\n\r\nWorking packet:\r\n\r\n```\r\nValue = Slot2.Carddata.SubNo = 0000000000000\\r\\n\r\n\r\n0000   90 b1 1c 7a 90 f2 00 16 9e dc 09 10 08 00 45 00   ...z..........E.\r\n0010   00 50 c5 e7 00 00 40 06 32 67 ac 10 15 0e ac 10   .P....@.2g......\r\n0020   15 2b 00 50 e7 63 00 98 ab 04 9e 44 79 a6 50 18   .+.P.c.....Dy.P.\r\n0030   39 08 e3 8b 00 00 81 26 53 6c 6f 74 32 2e 43 61   9......\u0026Slot2.Ca\r\n0040   72 64 64 61 74 61 2e 53 75 62 4e 6f 20 3d 20 30   rddata.SubNo = 0\r\n0050   30 30 30 30 30 30 30 30 30 30 30 30 0d 0a         000000000000..\r\n```\r\n\r\nPacket causing ClientWebSocket to throw WebSocketExecption\r\n```\r\nValue = Slot3.Carddata.SubNo = �������������\\r\\n\r\n\r\n0000   90 b1 1c 7a 90 f2 00 16 9e dc 09 10 08 00 45 00   ...z..........E.\r\n0010   00 50 c5 f4 00 00 40 06 32 5a ac 10 15 0e ac 10   .P....@.2Z......\r\n0020   15 2b 00 50 e7 63 00 98 ac af 9e 44 79 c9 50 18   .+.P.c.....Dy.P.\r\n0030   39 08 01 10 00 00 81 26 53 6c 6f 74 33 2e 43 61   9......\u0026Slot3.Ca\r\n0040   72 64 64 61 74 61 2e 53 75 62 4e 6f 20 3d 20 ff   rddata.SubNo = .\r\n0050   ff ff ff ff ff ff ff ff ff ff ff ff 0d 0a         ..............\r\n\r\n```\r\n**NOTE**: The remaining packets after this one have been sent ok and I can see them in the WireShark.\r\n\r\n### Configuration\r\n\r\n.NET 5 WPF application\r\nWindows 10 64bit - Version 10.0.19043 Build 19043\r\nMicrosoft Visual Studio Enterprise 2019  - Version 16.10.2\r\n\r\n.NET SDK (reflecting any global.json):\r\nVersion:   5.0.301\r\nCommit:    ef17233f86\r\n\r\nRuntime Environment:\r\nOS Name:     Windows\r\nOS Version:  10.0.19043\r\nOS Platform: Windows\r\nRID:         win10-x64\r\nBase Path:   C:\\Program Files\\dotnet\\sdk\\5.0.301\\\r\n\r\nHost (useful for support):\r\n  Version: 5.0.7\r\n  Commit:  556582d964\r\n\r\n###StackTrace:\r\n\r\n```\r\nSystem.Net.WebSockets.WebSocketException\r\n  HResult=0x80004005\r\n  Message=An exception caused the WebSocket to enter the Aborted state. Please see the InnerException, if present, for more details.\r\n  Source=System.Net.WebSockets\r\n  StackTrace:\r\n   at System.Net.WebSockets.ManagedWebSocket.\u003cCloseWithReceiveErrorAndThrowAsync\u003ed__71.MoveNext()\r\n```\r\n\r\n\r\n### Other information\r\nWebSocketSharp-core **works correctly** and does not abort with same payload.\r\n    \u003cPackageReference Include=\"websocketsharp.core\" Version=\"1.0.0\" /\u003e\r\n\r\n###Additional issue\r\nWhy Oh Why has ClientWebSocket been sealed it meant that I could not try fix this by pre-processing the data before it was processed by ClientWebSocket handlers!\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003etvone-timmoore\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-06-17T19:58:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2NDAxNDEyMg==",
                                           "createdAt":  "2021-06-18T12:49:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CarnaViire",
                                           "body":  "That\u0027s because the data is sent with `WebSocketMessageType.Text`, for which we check UTF-8 validity. 0xFF is not a valid UTF-8 character. If you need to send 0xFF for some reason, you can do so with `WebSocketMessageType.Binary`",
                                           "updatedAt":  "2021-06-18T12:49:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2NDAzMDU1MA==",
                                           "createdAt":  "2021-06-18T13:14:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roberto-tim",
                                           "body":  "Thanks CarnaVire, I thought as well that it might be a internal check but didn\u0027t want to jump to any conclusions.\r\n\r\nWe can\u0027t change or send as Binary as the data being returned from devices out in the field that have an unset value.  It is still text but ASCII in some cases.  We have to deal with older devices and code that is never going to be updated.\r\n\r\nIf that is the case then I believe the internal UTF-8 check should be optional, or is not required as:\r\n\r\n1. You don\u0027t know what kind of text is being sent could be ASCII, UTF-16, or something else encoded payload, ideally UTF-8.  I am aware what the WebSocket protocol rfc6455 says about text encoding.\r\n2. Bytes are returned from the ReceiveAsync where I then have to do the UTF-8 decoding.\r\n3. None of the other WebSocket implementations enforce internal UTF-8 checks that I have looked at anyway.\r\n\r\nAt present I have to use WebSocketSharp-core as this works ok, I would like to use the native versions where possible.  We are migrating our apps to .NET 5 then to multiple platforms with Uno and found this when trying to use the native ClientWebSocket.",
                                           "updatedAt":  "2021-06-18T13:26:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2NDA0NTc3OQ==",
                                           "createdAt":  "2021-06-18T13:37:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e the internal UTF-8 check should be optional, or is not required\r\n\r\nIt\u0027s actually required by the websocket specification:\r\nhttps://datatracker.ietf.org/doc/html/rfc6455\r\n\r\n```\r\n   Text\r\n\r\n      The \"Payload data\" is text data encoded as UTF-8.  Note that a\r\n      particular text frame might include a partial UTF-8 sequence;\r\n      however, the whole message MUST contain valid UTF-8.  Invalid\r\n      UTF-8 in reassembled messages is handled as described in\r\n      Section 8.1.\r\n```\r\n\r\n```\r\n8.1.  Handling Errors in UTF-8-Encoded Data\r\n\r\n   When an endpoint is to interpret a byte stream as UTF-8 but finds\r\n   that the byte stream is not, in fact, a valid UTF-8 stream, that\r\n   endpoint MUST _Fail the WebSocket Connection_.  This rule applies\r\n   both during the opening handshake and during subsequent data\r\n   exchange.\r\n```",
                                           "updatedAt":  "2021-06-18T13:38:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2NDA1MTg4Nw==",
                                           "createdAt":  "2021-06-18T13:47:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roberto-tim",
                                           "body":  "Thanks stephentoub, yes I\u0027ve read the spec :) fun times, but that is not helpful in the real world, which is why I believe if the check could be made optional then that would be very helpful.\r\n\r\nRightly or wrongly other WebSocket implementations do not appear to be enforcing this check.",
                                           "updatedAt":  "2021-06-18T13:47:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2NDA3ODY4Ng==",
                                           "createdAt":  "2021-06-18T14:26:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roberto-tim",
                                           "body":  "I suppose it depends on who does the checks, as I have to decode the bytes with UTF-8 then it\u0027s kind of saying that I should be doing the check and closing the connection?",
                                           "updatedAt":  "2021-06-18T14:27:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2NjI4NDAyNg==",
                                           "createdAt":  "2021-06-22T19:48:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: Might be a good idea to enable interop. It would be nice to see if there is higher demand for such feature / option.",
                                           "updatedAt":  "2021-06-22T19:48:02Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "ClientWebSocket closes with Aborted exception when payload contains 0xFF characters",
        "labels":  [
                       "enhancement",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/54952",
        "createdAt":  "2021-06-30T09:06:42Z",
        "number":  54952,
        "author":  "schiroky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-07-13T19:43:13Z",
        "body":  "I need to retrieve the Issuer information for a certificate of a website. I do already have a sample code that works perfectly with Windows PowerShell 5.1 (tested with 5.1.19041.1023 on Windows 10), but does not work anymore with Microsoft PowerShell 7.1.3). I attached the sample file (GetCert.ps1) as text file. Just rename to .ps1 file `extension:\r\n\r\n[GetCert.txt](https://github.com/dotnet/runtime/files/6739532/GetCert.txt)\r\n\r\n**Expected behavior**\r\n\r\nAs output I should see something like this:\r\n\r\nFor command $WebRequest.GetResponse():\r\n\r\nIsMutuallyAuthenticated : False\r\nCookies                 : {}\r\nHeaders                 : {Pragma, Strict-Transport-Security, X-Content-Type-Options, Link...}\r\nSupportsHeaders         : True\r\nContentLength           : 153422\r\nContentEncoding         : \r\nContentType             : text/html; charset=utf-8\r\nCharacterSet            : utf-8\r\nServer                  : \r\nLastModified            : 29.06.2021 15:37:32\r\nStatusCode              : OK\r\nStatusDescription       : OK\r\nProtocolVersion         : 1.1\r\nResponseUri             : https://login.microsoftonline.com/login.srf?wa=wsignin1.0\u0026rpsnv=4\u0026ct=1624973851\u0026rver=7.0.6737.0\u0026wp=MBI_KEY\u0026wreply=https:%2F%2Fdataservice.protection.outlook.com%2Fecp%2F\u0026id=500483\r\nMethod                  : GET\r\nIsFromCache             : False\r\n\r\nAnd for $WebRequest.ServicePoint.Certificate.Issuer:\r\n\r\nCN=DigiCert SHA2 Secure Server CA, O=DigiCert Inc, C=US\r\n\r\n**Actual behavior**\r\n\r\nThe first command is accepted and proceeded, but the second command does not, when running the same code on PowerShell 7.1.3.\r\n\r\n**Environment data**\r\n\r\nFor 7.1.3:\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.3\r\nPSEdition                      Core\r\nGitCommitId                    7.1.3\r\nOS                             Microsoft Windows 10.0.19043\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0…}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\nFor 5.1:\r\n\r\nName                           Value                                                                                                                                                                                                             \r\n----                           -----                                                                                                                                                                                                             \r\nPSVersion                      5.1.19041.1023                                                                                                                                                                                                    \r\nPSEdition                      Desktop                                                                                                                                                                                                           \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                                                                                                                                                                                           \r\nBuildVersion                   10.0.19041.1023                                                                                                                                                                                                   \r\nCLRVersion                     4.0.30319.42000                                                                                                                                                                                                   \r\nWSManStackVersion              3.0                                                                                                                                                                                                               \r\nPSRemotingProtocolVersion      2.3                                                                                                                                                                                                               \r\nSerializationVersion           1.1.0.1\r\n\r\n**Additional information**\r\n\r\nIssue can easily reproduce from scratch. In case it should be needed, I can demo the problem.\r\n\r\n\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONGWH-w==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3MTIyNzcyNA==",
                                           "createdAt":  "2021-06-30T09:06:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-06-30T09:06:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3MTM5MzQ5Mw==",
                                           "createdAt":  "2021-06-30T13:13:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nI need to retrieve the Issuer information for a certificate of a website. I do already have a sample code that works perfectly with Windows PowerShell 5.1 (tested with 5.1.19041.1023 on Windows 10), but does not work anymore with Microsoft PowerShell 7.1.3). I attached the sample file (GetCert.ps1) as text file. Just rename to .ps1 file `extension:\r\n\r\n[GetCert.txt](https://github.com/dotnet/runtime/files/6739532/GetCert.txt)\r\n\r\n**Expected behavior**\r\n\r\nAs output I should see something like this:\r\n\r\nFor command $WebRequest.GetResponse():\r\n\r\nIsMutuallyAuthenticated : False\r\nCookies                 : {}\r\nHeaders                 : {Pragma, Strict-Transport-Security, X-Content-Type-Options, Link...}\r\nSupportsHeaders         : True\r\nContentLength           : 153422\r\nContentEncoding         : \r\nContentType             : text/html; charset=utf-8\r\nCharacterSet            : utf-8\r\nServer                  : \r\nLastModified            : 29.06.2021 15:37:32\r\nStatusCode              : OK\r\nStatusDescription       : OK\r\nProtocolVersion         : 1.1\r\nResponseUri             : https://login.microsoftonline.com/login.srf?wa=wsignin1.0\u0026rpsnv=4\u0026ct=1624973851\u0026rver=7.0.6737.0\u0026wp=MBI_KEY\u0026wreply=https:%2F%2Fdataservice.protection.outlook.com%2Fecp%2F\u0026id=500483\r\nMethod                  : GET\r\nIsFromCache             : False\r\n\r\nAnd for $WebRequest.ServicePoint.Certificate.Issuer:\r\n\r\nCN=DigiCert SHA2 Secure Server CA, O=DigiCert Inc, C=US\r\n\r\n**Actual behavior**\r\n\r\nThe first command is accepted and proceeded, but the second command does not, when running the same code on PowerShell 7.1.3.\r\n\r\n**Environment data**\r\n\r\nFor 7.1.3:\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.3\r\nPSEdition                      Core\r\nGitCommitId                    7.1.3\r\nOS                             Microsoft Windows 10.0.19043\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0…}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\nFor 5.1:\r\n\r\nName                           Value                                                                                                                                                                                                             \r\n----                           -----                                                                                                                                                                                                             \r\nPSVersion                      5.1.19041.1023                                                                                                                                                                                                    \r\nPSEdition                      Desktop                                                                                                                                                                                                           \r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                                                                                                                                                                                           \r\nBuildVersion                   10.0.19041.1023                                                                                                                                                                                                   \r\nCLRVersion                     4.0.30319.42000                                                                                                                                                                                                   \r\nWSManStackVersion              3.0                                                                                                                                                                                                               \r\nPSRemotingProtocolVersion      2.3                                                                                                                                                                                                               \r\nSerializationVersion           1.1.0.1\r\n\r\n**Additional information**\r\n\r\nIssue can easily reproduce from scratch. In case it should be needed, I can demo the problem.\r\n\r\n\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eschiroky\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-06-30T13:13:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3MTUyNTk1MA==",
                                           "createdAt":  "2021-06-30T15:56:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "This is not Powershell repo @schiroky. You should either open issue for power-shell or submit c# repro app. \r\nNote that the ServicePoint is obsolete in .NET core and probably should not be used. ",
                                           "updatedAt":  "2021-06-30T15:56:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3MTYwMzEzNA==",
                                           "createdAt":  "2021-06-30T17:41:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: Please file it in PowerShell repo: https://github.com/PowerShell/PowerShell ... or if you have C# repro, feel free to reopen.",
                                           "updatedAt":  "2021-06-30T17:41:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3Mjc1NTk3NQ==",
                                           "createdAt":  "2021-07-02T06:36:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "schiroky",
                                           "body":  "I started in PowerShell repo. Here’s the ticket:\r\nhttps://github.com/PowerShell/PowerShell/issues/15688\r\nI was told that this is a .NET issue.\r\nPlease reopen and further investigate.\r\n",
                                           "updatedAt":  "2021-07-02T06:36:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3Mjg3ODUzNQ==",
                                           "createdAt":  "2021-07-02T10:02:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@schiroky if you want to narrow it down, I would recommend first to create repro in C#.\r\nThen you can identify which component changes the behavior. Is it different .NET Framework installed on the machine, or is it different PowerShell environment?\r\nPowerShell does weird things like targeting .NET Framework 4.5, which changes behaviors of certain APIs, etc. That\u0027s why we always ask for C# repro to help with efficient root cause -- incl. identification which component caused the problem, which is not clear here.\r\n\r\nNote that .NET Framework is not tracked on GitHub. So even if there is repro this is the wrong place for getting help / tracking the issue.\r\nIf it is a customer support case, I would suggest to use official support channels -- first start with PowerShell CSS.",
                                           "updatedAt":  "2021-07-02T10:02:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3MjkyNDYyOQ==",
                                           "createdAt":  "2021-07-02T11:22:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "schiroky",
                                           "body":  "Hmpf, I do not \"speak\" C# language :-|",
                                           "updatedAt":  "2021-07-02T11:22:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3MzEyMTM3OA==",
                                           "createdAt":  "2021-07-02T16:33:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "@karelz, this is not a PowerShell issue.  The C# translation of the example is:\r\n```C#\r\nusing System;\r\nusing System.Net;\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        ServicePointManager.ServerCertificateValidationCallback = delegate { return true; };\r\n        string url = \"https://dataservice.protection.outlook.com\";\r\n\r\n        HttpWebRequest wr = (HttpWebRequest)WebRequest.Create(url);\r\n        try\r\n        {\r\n            wr.GetResponse().Dispose();\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            Console.WriteLine(e);\r\n        }\r\n\r\n        Console.WriteLine(wr.ServicePoint.Certificate.Issuer);\r\n    }\r\n}\r\n```\r\nand the problem is that HttpWebRequest.ServicePoint.Certificate is null because we never set it in the HttpWebRequest implementation on .NET Core.",
                                           "updatedAt":  "2021-07-02T16:33:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3OTA2OTE3OQ==",
                                           "createdAt":  "2021-07-13T13:04:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Thanks! I didn\u0027t realize that this is PowerShell Core (7.1) vs. Desktop PowerShell (5.1) compat.",
                                           "updatedAt":  "2021-07-13T13:04:07Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Retrieving the Issuer of a certificate does not work anymore in PowerShell 7.1",
        "labels":  [
                       "area-System.Net",
                       "tenet-compatibility"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/57014",
        "createdAt":  "2021-06-30T13:55:57Z",
        "number":  57014,
        "author":  "naasking",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-08-10T13:40:24Z",
        "body":  "MailAddress is inconsistent in how it handles special characters in the display name portion of an address. Try the following code on any version of .NET, including .NET5:\r\n\r\n    using System;\r\n    using System.Net.Mail;\r\n    \r\n    namespace MailAddressTest\r\n    {\r\n        class Program\r\n        {\r\n            static void Main(string[] args)\r\n            {\r\n                // display name accepts a name with \\\r\n                var ok = new MailAddress(\"foo@foo.com\", \"Foo \\\\ Bar\");\r\n    \r\n                try\r\n                {\r\n                    // however, the generated address fails to round-trip\r\n                    var fail1 = new MailAddress(ok.ToString());\r\n                }\r\n                catch (FormatException e)\r\n                {\r\n                    Console.WriteLine($\"Fail1: {e.Message}\");\r\n                }\r\n                try\r\n                {\r\n                    // parsing an address from a string also fails for the same reason\r\n                    var fail2 = new MailAddress(\"\\\"Foo \\\\ Bar\\\" \u003cfoo@foo.com\u003e\");\r\n                }\r\n                catch (FormatException e)\r\n                {\r\n                    Console.WriteLine($\"Fail2: {e.Message}\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\nI think the expectation is that round-tripping the mail address should always work, so the MaillAddress constructor that accepts separate display name and address parameters should perform the same parsing checks on the display name as the single-parameter constructor.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONWh0rA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3MTQyNzEyNQ==",
                                           "createdAt":  "2021-06-30T13:56:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one area label.",
                                           "updatedAt":  "2021-06-30T13:56:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41Uff1",
                                           "createdAt":  "2021-08-06T23:25:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-08-06T23:25:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41VJlN",
                                           "createdAt":  "2021-08-08T03:22:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nMailAddress is inconsistent in how it handles special characters in the display name portion of an address. Try the following code on any version of .NET, including .NET5:\r\n\r\n    using System;\r\n    using System.Net.Mail;\r\n    \r\n    namespace MailAddressTest\r\n    {\r\n        class Program\r\n        {\r\n            static void Main(string[] args)\r\n            {\r\n                // display name accepts a name with \\\r\n                var ok = new MailAddress(\"foo@foo.com\", \"Foo \\\\ Bar\");\r\n    \r\n                try\r\n                {\r\n                    // however, the generated address fails to round-trip\r\n                    var fail1 = new MailAddress(ok.ToString());\r\n                }\r\n                catch (FormatException e)\r\n                {\r\n                    Console.WriteLine($\"Fail1: {e.Message}\");\r\n                }\r\n                try\r\n                {\r\n                    // parsing an address from a string also fails for the same reason\r\n                    var fail2 = new MailAddress(\"\\\"Foo \\\\ Bar\\\" \u003cfoo@foo.com\u003e\");\r\n                }\r\n                catch (FormatException e)\r\n                {\r\n                    Console.WriteLine($\"Fail2: {e.Message}\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\nI think the expectation is that round-tripping the mail address should always work, so the MaillAddress constructor that accepts separate display name and address parameters should perform the same parsing checks on the display name as the single-parameter constructor.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003enaasking\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-08-08T03:22:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41VJl-",
                                           "createdAt":  "2021-08-08T03:23:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Question is how breaking would it be to existing code to change this.",
                                           "updatedAt":  "2021-08-08T03:23:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41Yewr",
                                           "createdAt":  "2021-08-09T23:08:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Noting this isn\u0027t a regression so I assume it won\u0027t meet the 6.0 bar.",
                                           "updatedAt":  "2021-08-09T23:08:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41YnR5",
                                           "createdAt":  "2021-08-10T00:42:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "naasking",
                                           "body":  "\u003e Question is how breaking would it be to existing code to change this.\r\n\r\nUnclear. The currently accepted input appears to reject a lot of valid email addresses. Of course, some code in the wild might depend on MailAddress rejecting that set of email addresses. Not sure what the policy is on this.",
                                           "updatedAt":  "2021-08-10T00:42:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41Z-4Z",
                                           "createdAt":  "2021-08-10T12:55:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "Triage: needs investigation in mail address format standards. If \u0027\\\\\u0027 is allowed character in display name we might consider fixing this. \r\nAFAIK, if you don\u0027t use special characters in display name, the round trip works. But this needs to be confirmed as well. \r\nThis is future work, it\u0027s been like this for a while.",
                                           "updatedAt":  "2021-08-10T12:55:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41aFPr",
                                           "createdAt":  "2021-08-10T13:29:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "naasking",
                                           "body":  "\u003e Triage: needs investigation in mail address format standards. If \u0027\\\u0027 is allowed character in display name we might consider fixing this.\r\n\r\nJust to be clear, I think there\u0027s a bug here even if \u0027\\\\\u0027 is not allowed. The 2-parameter constructor should throw an error in that case but it doesn\u0027t.",
                                           "updatedAt":  "2021-08-10T13:38:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41aHSs",
                                           "createdAt":  "2021-08-10T13:40:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "naasking",
                                           "body":  "Final point of comparison, MimeKit does not throw an error on any of these cases:\r\n\r\n    static void TestMimeKit()\r\n    {\r\n        // display name accepts a name with \\\r\n        var ok = new MimeKit.MailboxAddress(\"Foo \\\\ Bar\", \"foo@foo.com\");\r\n\r\n        try\r\n        {\r\n            // however, the generated address fails to round-trip\r\n            var fail1 = MimeKit.MailboxAddress.Parse(ok.ToString());\r\n        }\r\n        catch (FormatException e)\r\n        {\r\n            Console.WriteLine($\"Fail1: {e.Message}\");\r\n        }\r\n        try\r\n        {\r\n            // parsing an address from a string also fails for the same reason\r\n            var fail2 = MimeKit.MailboxAddress.Parse(\"\\\"Foo \\\\ Bar\\\" \u003cfoo@foo.com\u003e\");\r\n        }\r\n        catch (FormatException e)\r\n        {\r\n            Console.WriteLine($\"Fail2: {e.Message}\");\r\n        }\r\n    }",
                                           "updatedAt":  "2021-08-10T13:40:24Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "MailAddress constructor inconsistency",
        "labels":  [
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/55293",
        "createdAt":  "2021-07-07T20:30:11Z",
        "number":  55293,
        "author":  "CarnaViire",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-05-16T18:49:52Z",
        "body":  "We currently don\u0027t have any end-to-end WebSockets benchmarks, only SignalR one. We want to be able to benchmark WebSockets in itself, for example, to measure and improve performance for the compression feature.\r\n\r\nThe benchmark can be done in a similar way SignalR is implemented. Both client and server should be added. All metrics are collected and calculated in client code. We would also need a new WebSocket worker for benchmarking infra.\r\n\r\nMain benchmarking repo: https://github.com/aspnet/Benchmarks\r\nAgent: https://github.com/dotnet/crank\r\n\r\nFor development purposes, Crank can be executed locally. \r\n\r\nSignalR example:\r\nClient: https://raw.githubusercontent.com/aspnet/Benchmarks/main/src/SignalRClient/signalrclient.yml\r\nWorker: https://github.com/aspnet/Benchmarks/blob/main/src/BenchmarksClient/Workers/SignalRWorker.cs\r\nScenario description: https://github.com/aspnet/Benchmarks/blob/main/scenarios/signalr.benchmarks.yml\r\nServer: https://github.com/aspnet/Benchmarks/tree/main/src/BenchmarksApps/SignalR\r\n\r\nOther client example: https://raw.githubusercontent.com/dotnet/crank/main/src/Microsoft.Crank.Jobs.Bombardier/bombardier.yml\r\n\r\nCrank docs: https://github.com/dotnet/crank/blob/main/docs/getting_started.md\r\n\r\nScenarios:\r\n\r\n1. We should start with a simple WebSocket scenario similar to what SignalR is doing. We can use SignalR message format for a payload.\r\n2. Second step would be to add a compression scenario. We can also use SignalR message format there, it should be somewhat compressible and it will be an estimate of how enabling compression will affect SignalR. We can also try random data, which should be uncompressible at all, to benchmark the overhead of compression. Need to think of other possible useful data formats.\r\n3. We can also add some configurable scenario to help with #51231, e.g. a user sends a lot of messages of same size and we could change this size (including making it big, \u003e 1MB, \u003e 64MB possibly?), and we would apply there our auto-splitting to find out the best trade-off.\r\n\r\ncc @BrennanConroy @zlatanov ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOQzww0g==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3NTkxMTQxMw==",
                                           "createdAt":  "2021-07-07T20:30:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWe currently don\u0027t have any end-to-end WebSockets benchmarks, only SignalR one. We want to be able to benchmark WebSockets in itself, for example, to measure and improve performance for the compression feature.\r\n\r\nThe benchmark can be done in a similar way SignalR is implemented. Both client and server should be added. All metrics are collected and calculated in client code. We would also need a new WebSocket worker for benchmarking infra.\r\n\r\nMain benchmarking repo: https://github.com/aspnet/Benchmarks\r\nAgent: https://github.com/dotnet/crank\r\n\r\nFor development purposes, Crank can be executed locally. \r\n\r\nSignalR example:\r\nClient: https://raw.githubusercontent.com/aspnet/Benchmarks/main/src/SignalRClient/signalrclient.yml\r\nWorker: https://github.com/aspnet/Benchmarks/blob/main/src/BenchmarksClient/Workers/SignalRWorker.cs\r\nScenario description: https://github.com/aspnet/Benchmarks/blob/main/scenarios/signalr.benchmarks.yml\r\nServer: https://github.com/aspnet/Benchmarks/tree/main/src/BenchmarksApps/SignalR\r\n\r\nOther client example: https://raw.githubusercontent.com/dotnet/crank/main/src/Microsoft.Crank.Jobs.Bombardier/bombardier.yml\r\n\r\nCrank docs: https://github.com/dotnet/crank/blob/main/docs/getting_started.md\r\n\r\nScenarios:\r\n\r\n1. We should start with a simple WebSocket scenario similar to what SignalR is doing. We can use SignalR message format for a payload.\r\n2. Second step would be to add a compression scenario. We can also use SignalR message format there, it should be somewhat compressible and it will be an estimate of how enabling compression will affect SignalR. We can also try random data, which should be uncompressible at all, to benchmark the overhead of compression. Need to think of other possible useful data formats.\r\n3. We can also add some configurable scenario to help with #51231, e.g. a user sends a lot of messages of same size and we could change this size (including making it big, \u003e 1MB, \u003e 64MB possibly?), and we would apply there our auto-splitting to find out the best trade-off.\r\n\r\ncc @BrennanConroy @zlatanov \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eCarnaViire\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-07-07T20:30:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3NTkxNjU4MA==",
                                           "createdAt":  "2021-07-07T20:38:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBxqCzw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CarnaViire",
                                                                               "createdAt":  "2021-07-07T20:57:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "kondratyev-nv",
                                           "body":  "I can take at least the first scenario if nobody minds 🙂",
                                           "updatedAt":  "2021-07-07T20:38:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DPDDS",
                                           "createdAt":  "2022-05-16T18:49:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BrennanConroy",
                                           "body":  "We\u0027ve had baseline websocket benchmarks with 1000 bytes of random data since July 2021, we just added compression and different sizes (10, 100, 1,000, 10,000), still with random data.\r\n\r\nNext step would be to add some sort of non-random data. One suggestion was a SignalR message, but I\u0027m not sure how useful that would be as the SignalR framing is very small and the main part of the message is user data.",
                                           "updatedAt":  "2022-05-16T18:49:52Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "End-to-end Benchmarks for WebSockets",
        "labels":  [
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/56549",
        "createdAt":  "2021-07-29T14:15:53Z",
        "number":  56549,
        "author":  "stephentoub",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-08-05T17:03:45Z",
        "body":  "The existing GetHostAddress{Async} overloads have this in the docs:\r\n\r\n\u003e IPv6 addresses are filtered from the results of the GetHostAddresses method if the local computer does not have IPv6 installed. As a result, it is possible to get back an empty IPAddress[] instance if only IPv6 results were available for the hostNameOrAddress parameter.\r\n\r\nI\u0027ve not confirmed whether that\u0027s correct.  However, if it is, it seems our new overloads that accept `AddressFamily` are inconsistent with this.  I\u0027d have expected that if I requested just IPv6 addresses and none were available, it would return an empty array, but instead it throws an exception:\r\n```C#\r\nusing System.Net.Sockets;\r\nusing System.Net;\r\n\r\nDns.GetHostAddresses(\"www.microsoft.com\", AddressFamily.InterNetworkV6);\r\n```\r\nyields\r\n```\r\nUnhandled exception. System.Net.Sockets.SocketException (11004): The requested name is valid, but no data of the requested type was found.\r\n   at System.Net.Dns.GetHostEntryOrAddressesCore(String hostName, Boolean justAddresses, AddressFamily addressFamily) in System.Net.NameResolution.dll:token 0x6000046+0x5a\r\n   at System.Net.Dns.GetHostAddresses(String hostNameOrAddress, AddressFamily family) in System.Net.NameResolution.dll:token 0x6000036+0x85\r\n```\r\n\r\nIf this is the expected behavior, ok.  If not, we should fix it prior to 6.0 release.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONUMHHw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc40_9o4",
                                           "createdAt":  "2021-07-29T14:15:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThe existing GetHostAddress{Async} overloads have this in the docs:\r\n\r\n\u003e IPv6 addresses are filtered from the results of the GetHostAddresses method if the local computer does not have IPv6 installed. As a result, it is possible to get back an empty IPAddress[] instance if only IPv6 results were available for the hostNameOrAddress parameter.\r\n\r\nI\u0027ve not confirmed whether that\u0027s correct.  However, if it is, it seems our new overloads that accept `AddressFamily` are inconsistent with this.  I\u0027d have expected that if I requested just IPv6 addresses and none were available, it would return an empty array, but instead it throws an exception:\r\n```C#\r\nusing System.Net.Sockets;\r\nusing System.Net;\r\n\r\nDns.GetHostAddresses(\"www.microsoft.com\", AddressFamily.InterNetworkV6);\r\n```\r\nUnhandled exception. System.Net.Sockets.SocketException (11004): The requested name is valid, but no data of the requested type was found.\r\n   at System.Net.Dns.GetHostEntryOrAddressesCore(String hostName, Boolean justAddresses, AddressFamily addressFamily) in System.Net.NameResolution.dll:token 0x6000046+0x5a\r\n   at System.Net.Dns.GetHostAddresses(String hostNameOrAddress, AddressFamily family) in System.Net.NameResolution.dll:token 0x6000036+0x85\r\n```\r\n\r\nIf this is the expected behavior, ok.  If not, we should fix it prior to 6.0 release.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003estephentoub\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-07-29T14:15:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41AUYx",
                                           "createdAt":  "2021-07-29T16:08:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: We need to figure out what to do -- change docs, change product, or by design.",
                                           "updatedAt":  "2021-07-29T16:08:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41QmMA",
                                           "createdAt":  "2021-08-05T15:17:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "| Domain      | Query | Network with IPv6 support | Network without IPv6 support\u003csup\u003e1\u003c/sup\u003e | App with IPv6 disabled\u003csup\u003e2\u003c/sup\u003e |\r\n|-------------|--------|-----------------|---------------------|---------------|\r\n| IPv4 only   | Unspecified    | IPv4 address            | IPv4 address            | IPv4 address          |\r\n| IPv4 only   | InterNetwork   | IPv4 address            | IPv4 address            | IPv4 address          |\r\n| IPv4 only   | InterNetworkV6 | No such host is known   | No such host is known   | No such host is known |\r\n| | | | | |\r\n| IPv4 \u0026 IPv6 | Unspecified    | IPv4 and IPv6 addresses | IPv4 address            | IPv4 address          |\r\n| IPv4 \u0026 IPv6 | InterNetwork   | IPv4 address            | IPv4 address            | IPv4 address          |\r\n| IPv4 \u0026 IPv6 | InterNetworkV6 | IPv6 address            | Name valid, but no data\u003csup\u003e3\u003c/sup\u003e | Empty array           |\r\n| | | | | |\r\n| IPv6 only   | Unspecified    | IPv6 address            | Name valid, but no data | Empty array           |\r\n| IPv6 only   | InterNetwork   | No such host is known   | No such host is known   | No such host is known |\r\n| IPv6 only   | InterNetworkV6 | IPv6 address            | Name valid, but no data | Empty array           |\r\n\r\n\u003csup\u003e1\u003c/sup\u003e If the network does not support IPv6, Windows will not return IPv6 entries from `GetAddrInfoW` even if AAAA records exist\r\n\u003csup\u003e2\u003c/sup\u003e The difference is in the value of the [`OSSupportsIPv6`](https://github.com/dotnet/runtime/blob/a426032cda259c7663868d362081100f669a686e/src/libraries/Common/src/System/Net/SocketProtocolSupportPal.cs#L13) flag. We would see this behavior if the `AppContext` switch was used OR the OS said an `InterNetworkV6` socket was not supported while still returning IPv6 DNS entries (like what the documentation is suggesting).\r\n\u003csup\u003e3\u003c/sup\u003e \"The requested name is valid, but no data of the requested type was found\"\r\n\r\nIn some configurations (like my local dev machine), `OSSupportsIPv6` may be true, but the OS will decide not to include IPv6 entries from `GetAddrInfoW`, instead reporting the \"Name valid, but no data\" error.\r\nJudging from the results, that is the behavior you are seeing for the example @stephentoub (`www.microsoft.com` does have both A and AAAA records).\r\n\r\nThe current behavior is:\r\n- Always pass the address family hint to the OS.\r\n- If the OS chooses to report an error, propagate it to the user.\r\n- If it returns entries, filter them. If there are no matches, return an empty array.\r\n\r\nIf a specific `AddressFamily` was specified, and there are no DNS records for that type, the OS will return \"No such host is known\".\r\n\r\nThe options are essentially:\r\n- A: Do nothing - current behavior as described above.\r\n- B:  Don\u0027t pass the `AddressFamily` hint to the OS, filter the entries ourselves instead (1 line change)\r\n- C: Throw an exception instead of returning an empty array.\r\n- D: Other?\r\n\r\nI would suggest going with **B**, as getting an empty array for a valid domain seems better than \"No such host is known\" if a specific record type was missing.\r\nReporting \"No such host is known\" for a valid domain seems misleading.\r\n\r\nWith B, the table would instead look like:\r\n\r\n| Domain      | Query | Network with IPv6 support | Network without IPv6 support | App with IPv6 disabled |\r\n|-------------|--------|-----------------|---------------------|---------------|\r\n| IPv4 only   | Unspecified    | IPv4 address            | IPv4 address            | IPv4 address          |\r\n| IPv4 only   | InterNetwork   | IPv4 address            | IPv4 address            | IPv4 address          |\r\n| IPv4 only   | InterNetworkV6 | Empty array             | Empty array             | Empty array           |\r\n| | | | | |\r\n| IPv4 \u0026 IPv6 | Unspecified    | IPv4 and IPv6 addresses | IPv4 address            | IPv4 address          |\r\n| IPv4 \u0026 IPv6 | InterNetwork   | IPv4 address            | IPv4 address            | IPv4 address          |\r\n| IPv4 \u0026 IPv6 | InterNetworkV6 | IPv6 address            | Empty array             | Empty array           |\r\n| | | | | |\r\n| IPv6 only   | Unspecified    | IPv6 address            | Name valid, but no data | Empty array           |\r\n| IPv6 only   | InterNetwork   | Empty array             | Name valid, but no data | Empty array           |\r\n| IPv6 only   | InterNetworkV6 | IPv6 address            | Name valid, but no data | Empty array           |\r\n\r\nThe \"Name valid, but no data\" case is up the the OS - I don\u0027t think we can address it without having our own DNS implementation.",
                                           "updatedAt":  "2021-08-05T15:17:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41Qwcf",
                                           "createdAt":  "2021-08-05T16:14:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "As @wfurt noted, getting \"No such host is known\" for a specific address family makes sense in isolation.\r\n\r\nToday, you will get different results for `InterNetworkV6` if:\r\n- The domain exists, but does not have AAAA records (throw)\r\n- The domain exists, has AAAA records, but IPv6 is disabled (empty array)\r\n\r\nThe downside of changing it is that targeted queries may be more expensive (resolver would be forced to request both A and AAAA records).\r\n\r\n\r\nFor future reference, a script for getting results for the above tables: [gist](https://gist.github.com/MihaZupan/c177938b863003031e1ec17768cc2414).",
                                           "updatedAt":  "2021-08-05T17:03:45Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Inconsistent behavior with new GetHostAddress{Async} overloads that take AddressFamily?",
        "labels":  [
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/56840",
        "createdAt":  "2021-08-04T15:25:23Z",
        "number":  56840,
        "author":  "jeffhandley",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-08-10T17:08:55Z",
        "body":  "There are 2 `Uri` constructors that are marked as obsolete, indicating the the `dontEscape` argument is deprecated and always false. Upon reviewing the code though, it seems the `dontEscape` argument is indeed utilized with potentially-`true` values.\r\n\r\n\r\n```csharp\r\n        //\r\n        // Uri(string, bool)\r\n        //\r\n        //  Uri constructor. Assumes that input string is canonically escaped\r\n        //\r\n        [Obsolete(\"This constructor has been deprecated; the dontEscape parameter is always false. Use Uri(string) instead.\")]\r\n        public Uri(string uriString, bool dontEscape)\r\n        {\r\n            if (uriString == null)\r\n                throw new ArgumentNullException(nameof(uriString));\r\n\r\n            CreateThis(uriString, dontEscape, UriKind.Absolute);\r\n            DebugSetLeftCtor();\r\n        }\r\n\r\n        //\r\n        // Uri(Uri, string, bool)\r\n        //\r\n        //  Uri combinatorial constructor. Do not perform character escaping if\r\n        //  DontEscape is true\r\n        //\r\n        [Obsolete(\"This constructor has been deprecated; the dontEscape parameter is always false. Use Uri(Uri, string) instead.\")]\r\n        public Uri(Uri baseUri, string? relativeUri, bool dontEscape)\r\n        {\r\n            if (baseUri is null)\r\n                throw new ArgumentNullException(nameof(baseUri));\r\n\r\n            if (!baseUri.IsAbsoluteUri)\r\n                throw new ArgumentOutOfRangeException(nameof(baseUri));\r\n\r\n            CreateUri(baseUri, relativeUri, dontEscape);\r\n            DebugSetLeftCtor();\r\n        }\r\n```\r\n\r\n_Originally posted by @jkotas in https://github.com/dotnet/runtime/pull/56690#discussion_r682429292_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONWpTEg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc41NlH3",
                                           "createdAt":  "2021-08-04T15:25:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThere are 2 `Uri` constructors that are marked as obsolete, indicating the the `dontEscape` argument is deprecated and always false. Upon reviewing the code though, it seems the `dontEscape` argument is indeed utilized with potentially-`true` values.\r\n\r\n\r\n```csharp\r\n        //\r\n        // Uri(string, bool)\r\n        //\r\n        //  Uri constructor. Assumes that input string is canonically escaped\r\n        //\r\n        [Obsolete(\"This constructor has been deprecated; the dontEscape parameter is always false. Use Uri(string) instead.\")]\r\n        public Uri(string uriString, bool dontEscape)\r\n        {\r\n            if (uriString == null)\r\n                throw new ArgumentNullException(nameof(uriString));\r\n\r\n            CreateThis(uriString, dontEscape, UriKind.Absolute);\r\n            DebugSetLeftCtor();\r\n        }\r\n\r\n        //\r\n        // Uri(Uri, string, bool)\r\n        //\r\n        //  Uri combinatorial constructor. Do not perform character escaping if\r\n        //  DontEscape is true\r\n        //\r\n        [Obsolete(\"This constructor has been deprecated; the dontEscape parameter is always false. Use Uri(Uri, string) instead.\")]\r\n        public Uri(Uri baseUri, string? relativeUri, bool dontEscape)\r\n        {\r\n            if (baseUri is null)\r\n                throw new ArgumentNullException(nameof(baseUri));\r\n\r\n            if (!baseUri.IsAbsoluteUri)\r\n                throw new ArgumentOutOfRangeException(nameof(baseUri));\r\n\r\n            CreateUri(baseUri, relativeUri, dontEscape);\r\n            DebugSetLeftCtor();\r\n        }\r\n```\r\n\r\n_Originally posted by @jkotas in https://github.com/dotnet/runtime/pull/56690#discussion_r682429292_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejeffhandley\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-08-04T15:25:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41alMS",
                                           "createdAt":  "2021-08-10T17:08:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "Triage: We should update the deprecated message, but these APis should never be used regardless.",
                                           "updatedAt":  "2021-08-10T17:08:42Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Uri constructors accepting dontEscape have misleading Obsolete attribute",
        "labels":  [
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/58614",
        "createdAt":  "2021-09-03T09:37:27Z",
        "number":  58614,
        "author":  "iconics-milan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-09-08T10:00:29Z",
        "body":  "### Description\r\n\r\nCalling Abort() or Dispose() on a server WebSocket originating from a HttpListener does nothing with the underlying TCP connection, when run on Linux. The connection simply remains open.\r\nOn Windows, it properly aborts the TCP connection.\r\n\r\n\r\n\u003c!--\r\n* Please share a clear and concise description of the problem.\r\n* Include minimal steps to reproduce the problem if possible. E.g.: the smallest possible code snippet; or a small repo to clone, with steps to run it.\r\n* What behavior are you seeing, and what behavior would you expect?\r\n  --\u003e\r\n\r\n### Configuration\r\n\r\nTried on .NET Core 2.1, 3.1, 5.0 on Ubuntu - all with the same result.\r\nWorks on Windows with all these versions.\r\n\r\n### Code\r\n\r\nThis code gets stuck on Linux, but finishes on Windows:\r\n\r\n```c#\r\n        using System;\r\n        using System.IO;\r\n        using System.Net;\r\n        using System.Net.WebSockets;\r\n        using System.Threading;\r\n        using System.Threading.Tasks;\r\n\r\n        namespace WebSocketCloseTest\r\n        {\r\n            public class Program\r\n            {\r\n                public static async Task Main(string[] args)\r\n                {\r\n                    var serverTask = Server(\"http://localhost:45000/test/ws/\");\r\n                    await Client(\"ws://localhost:45000/test/ws/\");\r\n                    await serverTask;\r\n                }\r\n\r\n                private static async Task Server(String serverAddress)\r\n                {\r\n                    var listener = new HttpListener();\r\n                    listener.Prefixes.Add(serverAddress);\r\n                    listener.Start();\r\n                    HttpListenerContext ctx = await listener.GetContextAsync();\r\n                    HttpListenerWebSocketContext wsCtx = await ctx.AcceptWebSocketAsync(\"subProtocol\");\r\n                    using (var webSocket = wsCtx.WebSocket)\r\n                    {\r\n                        webSocket.Abort();\r\n                    }\r\n                }\r\n\r\n                private static async Task Client(String serverAddress)\r\n                {\r\n                    try\r\n                    {\r\n                        using (ClientWebSocket webSocket = new ClientWebSocket())\r\n                        {\r\n                            webSocket.Options.AddSubProtocol(\"subProtocol\");\r\n                            await webSocket.ConnectAsync(new Uri(serverAddress), CancellationToken.None).ConfigureAwait(false);\r\n                            await webSocket.CloseAsync(WebSocketCloseStatus.NormalClosure, null, CancellationToken.None);\r\n                        }\r\n                    }\r\n                    catch (WebSocketException e)\r\n                    {\r\n                        Console.WriteLine($\"Client WS exception: {e.Message}\");\r\n                    }\r\n                    catch (IOException e)\r\n                    {\r\n                        Console.WriteLine($\"Client WS exception: {e.Message}\");\r\n                    }\r\n                }\r\n            }\r\n        }\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONoM64Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc42Yi33",
                                           "createdAt":  "2021-09-03T09:37:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nCalling Abort() or Dispose() on a server WebSocket originating from a HttpListener does nothing with the underlying TCP connection, when run on Linux. The connection simply remains open.\r\nOn Windows, it properly aborts the TCP connection.\r\n\r\n\r\n\u003c!--\r\n* Please share a clear and concise description of the problem.\r\n* Include minimal steps to reproduce the problem if possible. E.g.: the smallest possible code snippet; or a small repo to clone, with steps to run it.\r\n* What behavior are you seeing, and what behavior would you expect?\r\n  --\u003e\r\n\r\n### Configuration\r\n\r\nTried on .NET Core 2.1, 3.1, 5.0 on Ubuntu - all with the same result.\r\nWorks on Windows with all these versions.\r\n\r\n### Code\r\n\r\nThis code gets stuck on Linux, but finishes on Windows:\r\n\r\n        using System;\r\n        using System.IO;\r\n        using System.Net;\r\n        using System.Net.WebSockets;\r\n        using System.Threading;\r\n        using System.Threading.Tasks;\r\n\r\n        namespace WebSocketCloseTest\r\n        {\r\n            public class Program\r\n            {\r\n                public static async Task Main(string[] args)\r\n                {\r\n                    var serverTask = Server(\"http://localhost:45000/test/ws/\");\r\n                    await Client(\"ws://localhost:45000/test/ws/\");\r\n                    await serverTask;\r\n                }\r\n\r\n                private static async Task Server(String serverAddress)\r\n                {\r\n                    var listener = new HttpListener();\r\n                    listener.Prefixes.Add(serverAddress);\r\n                    listener.Start();\r\n                    HttpListenerContext ctx = await listener.GetContextAsync();\r\n                    HttpListenerWebSocketContext wsCtx = await ctx.AcceptWebSocketAsync(\"subProtocol\");\r\n                    using (var webSocket = wsCtx.WebSocket)\r\n                    {\r\n                        webSocket.Abort();\r\n                        ctx.Response.Abort();\r\n                    }\r\n                }\r\n\r\n                private static async Task Client(String serverAddress)\r\n                {\r\n                    try\r\n                    {\r\n                        using (ClientWebSocket webSocket = new ClientWebSocket())\r\n                        {\r\n                            webSocket.Options.AddSubProtocol(\"subProtocol\");\r\n                            await webSocket.ConnectAsync(new Uri(serverAddress), CancellationToken.None).ConfigureAwait(false);\r\n                            await webSocket.CloseAsync(WebSocketCloseStatus.NormalClosure, null, CancellationToken.None);\r\n                        }\r\n                    }\r\n                    catch (WebSocketException e)\r\n                    {\r\n                        Console.WriteLine($\"Client WS exception: {e.Message}\");\r\n                    }\r\n                    catch (IOException e)\r\n                    {\r\n                        Console.WriteLine($\"Client WS exception: {e.Message}\");\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eiconics-milan\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-09-03T09:37:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42dAHP",
                                           "createdAt":  "2021-09-06T11:25:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "iconics-milan",
                                           "body":  "After experimenting more, I found that my code was missing a ctx.Response.Close() when done with the WebSocket (ctx is the HttpListenerContext). With that call in place, the TCP connection gets torn down abruptly (as expected) when no CloseAsync() is called before. I guess there is no reason not to call Close() on WebSocket responses.\r\nThis still means that Abort() does nothing, but it isn\u0027t an issue for me - I am simply not calling it anymore.",
                                           "updatedAt":  "2021-09-06T11:25:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42gzrh",
                                           "createdAt":  "2021-09-07T19:30:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: Windows works because it is implemented on top of http.sys\r\nLooks like something we might want to address in the managed implementation.\r\n\r\nIt might be as simple as make `NetworkStream` to own the `Socket`. We need to validate if `HttpListener` will be ok with that.\r\nWe would appreciate help in the investigation here ...",
                                           "updatedAt":  "2021-09-07T19:30:20Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[HttpListener] Calling Abort() or Dispose() on a server WebSocket originating from a HttpListener does nothing on Linux",
        "labels":  [
                       "bug",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/59099",
        "createdAt":  "2021-09-14T17:06:48Z",
        "number":  59099,
        "author":  "MihaZupan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODLWzdw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "normj",
                                            "createdAt":  "2021-09-15T22:22:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GSPP",
                                            "createdAt":  "2021-10-21T07:27:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "WGroenestein",
                                            "createdAt":  "2024-09-25T14:50:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AlexRadch",
                                            "createdAt":  "2024-09-27T13:11:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Nexusmeister",
                                            "createdAt":  "2024-11-05T21:44:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "slang25",
                                            "createdAt":  "2025-05-04T23:49:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "henrikrxn",
                                            "createdAt":  "2025-08-15T10:23:40Z"
                                        }
                                    ],
                          "totalCount":  7
                      },
        "updatedAt":  "2024-09-25T14:46:05Z",
        "body":  "### Background and motivation\r\n\r\n`Uri` validates the input and (if needed) converts it into a normalized (canonical) representation.\r\nFor example, it will:\r\n- Escape reserved characters (spaces turn into `%20`)\r\n- Unescape unreserved characters (`%41` turns into `A`)\r\n- Compress dot segments (`/foo/./bar/../` turns into `/foo/`)\r\n\r\nIt does this based on the recommendations of the [Uri RFC](https://datatracker.ietf.org/doc/html/rfc3986#section-6.2.2).\r\n\r\nSome services, however, rely on specific behavior that may be impossible to replicate using .NET\u0027s `Uri` (#52628, #58057).\r\nFor example, it is currently not possible to send `/foo?A=%42` with `HttpClient`, as `Uri` will convert it to `/foo?A=B`.\r\n\r\nI propose adding a `UriCreationOptions` type and a `ctor`/`TryCreate` overload to consume it, serving as the extension point for future `Uri` customizability.\r\n\r\n`Uri` has support for implicitly converting a file path into a `file://` uri.\r\n`/foo` is a valid Unix absolute file path and support for Unix paths is limited to non-Windows platforms.\r\nThis can create confusion in cases like `Uri.TryCreate(\"/foo\", UriKind.Absolute)` where the behavior depends on the platform.\r\nGiven an extension point like `UriCreationOptions` is available, I propose adding an `AllowImplicitFilePaths` flag to it.\r\n\r\n### API Proposal\r\n\r\n```C#\r\nnamespace System\r\n{\r\n    // New type\r\n    public readonly struct UriCreationOptions\r\n    {\r\n        public bool AllowImplicitFilePaths { get; init; }\r\n        public bool DangerousUseRawPathAndQuery { get; init; }\r\n\r\n        public UriKind UriKind { get; }\r\n\r\n        public UriCreationOptions(UriKind uriKind);\r\n    }\r\n\r\n    public partial class Uri\r\n    {\r\n        // Existing\r\n        public Uri(string uriString);\r\n        public Uri(string uriString, UriKind uriKind);\r\n        // New\r\n        public Uri(string uriString, UriCreationOptions creationOptions);\r\n        \r\n        // Existing\r\n        public static bool TryCreate(string? uriString, UriKind uriKind, out Uri? result);\r\n        // New\r\n        public static bool TryCreate(string? uriString, UriCreationOptions creationOptions, out Uri? result);\r\n    }\r\n}\r\n```\r\n\r\nAlternative names for `DangerousUseRawPathAndQuery`:\r\n- `DangerousUseRawTarget`\r\n- `DangerousDisableCanonicalization`\r\n\r\nBehavior of `DangerousUseRawPathAndQuery` is such that we try not to be opinionated as much as possible:\r\n- Validation of the `Path`/`Query` is skipped, we assume they already are in the “perfect format”\r\n- We will not escape reserved characters (e.g. spaces won\u0027t be turned into `%20`)\r\n- We will not unescape unreserved characters (e.g. `%41` won\u0027t be turned into `A`)\r\n- We will not compress dot segments (`/../` or `/./` will be kept)\r\n- Fragment is always empty – `#` and anything following it is attributed to the `Path` or `Query`\r\n  - Not doing so would disallow sending the `#` literal as part of `PathAndQuery`\r\n- Properties like `Path`, `Query`, `PathAndQuery` will return the value as-is\r\n- We will not ensure `Path`/`PathAndQuery` start with `/`, that is left up to the user\r\n- Uris with `DangerousUseRawPathAndQuery` may only be equal to Uris with the same flag\r\n- The [`GetComponents`](https://docs.microsoft.com/en-us/dotnet/api/system.uri.getcomponents) API will ignore the [`UriFormat`](https://docs.microsoft.com/en-us/dotnet/api/system.uriformat) argument (values `UriEscaped`, `Unescaped`, `SafeUnescaped`) for `Path` \u0026 `Query` components\r\n\r\n### API Usage\r\n\r\n```c#\r\nstring uriString = \"/foo\";\r\n\r\nUri.TryCreate(uriString, new UriCreationOptions { AllowImplicitFilePaths = false }, out var uri); // False\r\n```\r\n\r\n```c#\r\nvar options = new UriCreationOptions { DangerousUseRawPathAndQuery = true };\r\nvar uri = new Uri(\"http://foo/%41\", options);\r\n\r\n// Server receives /%41 instead of /A\r\n```\r\n\r\n### Alternative API\r\n\r\n- Instead of a `readonly struct`, make `UriCreationOptions` an enum\r\n  - Prevents us from easily exposing more complex options (e.g. ints, callbacks) in the future\r\n  - Forces us into inverting names in some cases (e.g. `AllowImplicitFilePaths` would have to be `DontAllowImplicitFilePaths`) to match correctly defaults\r\n  - Defers validation – with `UriCreationOptions` we can ensure it\u0027s always in a valid state (e.g. valid `UriKind`)\r\n\r\n- Instead of a `DangerousUseRawPathAndQuery` flag, expose granular options controlling specific transformations\r\n  - Example:  `UnescapeUnreservedCharacters`, `CompressDotSegments`\r\n  - Any new scenarios that can\u0027t be addressed with existing options are blocked on the decision of the networking team, API review, implementation, and release of a major .NET version\r\n  - Complicates the code base \u0026 testing - some options may conflict\r\n\r\n### Risks\r\n\r\nSetting `DangerousUseRawPathAndQuery` means no validation/transformation of the input will take place past the authority.\r\nIf the input is not already in the correct format, HTTP requests using such a Uri may be malformed.\r\n\r\nFor example:\r\n- Reserved characters will not be escaped - space characters will not be changed to `%20`",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjYUTvg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc42zBnB",
                                           "createdAt":  "2021-09-14T17:06:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\r\n\r\n`Uri` validates the input and (if needed) converts it into a normalized (canonical) representation.\r\nFor example, it will:\r\n- Escape reserved characters (spaces turn into `%20`)\r\n- Unescape unreserved characters (`%41` turns into `A`)\r\n- Compress dot segments (`/foo/./bar/../` turns into `/foo/`)\r\n\r\nIt does this based on the recommendations of the [Uri RFC](https://datatracker.ietf.org/doc/html/rfc3986#section-6.2.2).\r\n\r\nSome services, however, rely on specific behavior that may be impossible to replicate using .NET\u0027s `Uri` (#52628, #58057).\r\nFor example, it is currently not possible to send `/foo?A=%42` with `HttpClient`, as `Uri` will convert it to `/foo?A=B`.\r\n\r\nI propose adding a `UriCreationOptions` type and a `ctor`/`TryCreate` overload to consume it, serving as the extension point for future `Uri` customizability.\r\n\r\n`Uri` has support for implicitly converting a file path into a `file://` uri.\r\n`/foo` is a valid Unix absolute file path and support for Unix paths is limited to non-Windows platforms.\r\nThis can create confusion in cases like `Uri.TryCreate(\"/foo\", UriKind.Absolute)` where the behavior depends on the platform.\r\nGiven an extension point like `UriCreationOptions` is available, I propose adding an `AllowImplicitFilePaths` flag to it.\r\n\r\n### API Proposal\r\n\r\n```C#\r\nnamespace System\r\n{\r\n    // New type\r\n    public readonly struct UriCreationOptions\r\n    {\r\n        public bool AllowImplicitFilePaths { get; init; }\r\n        public bool DangerousUseRawPathAndQuery { get; init; }\r\n\r\n        public UriKind UriKind { get; }\r\n\r\n        public UriCreationOptions(UriKind uriKind);\r\n    }\r\n\r\n    public partial class Uri\r\n    {\r\n        // Existing\r\n        public Uri(string uriString);\r\n        public Uri(string uriString, UriKind uriKind);\r\n        // New\r\n        public Uri(string uriString, UriCreationOptions creationOptions);\r\n        \r\n        // Existing\r\n        public static bool TryCreate(string? uriString, UriKind uriKind, out Uri? result);\r\n        // New\r\n        public static bool TryCreate(string? uriString, UriCreationOptions creationOptions, out Uri? result);\r\n    }\r\n}\r\n```\r\n\r\nAlternative names for `DangerousUseRawPathAndQuery`:\r\n- `DangerousUseRawTarget`\r\n- `DangerousDisableCanonicalization`\r\n\r\nBehavior of `DangerousUseRawPathAndQuery` is such that we try not to be opinionated as much as possible:\r\n- Validation of the `Path`/`Query` is skipped, we assume they already are in the “perfect format”\r\n- We will not escape reserved characters (e.g. spaces won\u0027t be turned into `%20`)\r\n- We will not unescape unreserved characters (e.g. `%41` won\u0027t be turned into `A`)\r\n- We will not compress dot segments (`/../` or `/./` will be kept)\r\n- Fragment is always empty – `#` and anything following it is attributed to the `Path` or `Query`\r\n  - Not doing so would disallow sending the `#` literal as part of `PathAndQuery`\r\n- Properties like `Path`, `Query`, `PathAndQuery` will return the value as-is\r\n- We will not ensure `Path`/`PathAndQuery` start with `/`, that is left up to the user\r\n- Uris with “UseRawPathAndQuery” may only be equal to Uris with the same flag\r\n- The `GetComponents` API will ignore the `UriFormat` argument for `Path` \u0026 `Query` components\r\n\r\n### API Usage\r\n\r\n```c#\r\nstring uriString = \"/foo\";\r\n\r\nUri.TryCreate(uriString, new UriCreationOptions { AllowImplicitFilePaths = false }, out var uri); // False\r\n```\r\n\r\n```c#\r\nvar options = new UriCreationOptions { DangerousUseRawPathAndQuery = true };\r\nvar uri = new Uri(\"http://foo/%41\", options);\r\n\r\n// Server receives /%41 instead of /A\r\n```\r\n\r\n### Alternative API\r\n\r\n- Instead of a `readonly struct`, make `UriCreationOptions` an enum\r\n  - Prevents us from easily exposing more complex options (e.g. ints, callbacks) in the future\r\n  - Forces us into inverting names in some cases (e.g. `AllowImplicitFilePaths` would have to be `DontAllowImplicitFilePaths`)\r\n  - Defers validation – with `UriCreationOptions` we can ensure it\u0027s always in a valid state (e.g. valid `UriKind`)\r\n\r\n- Instead of a `DangerousUseRawPathAndQuery` flag, expose granular options controlling specific transformations\r\n  - Example:  `UnescapeUnreservedCharacters`, `CompressDotSegments`\r\n  - Any new scenarios that can\u0027t be addressed with existing options are blocked on the decision of the networking team, API review, implementation, and release of a major .NET version\r\n  - Complicates the code base \u0026 testing - some options may conflict\r\n\r\n### Risks\r\n\r\nSetting `DangerousUseRawPathAndQuery` means no validation/transformation of the input will take place past the authority.\r\nIf the input is not already in the correct format, HTTP requests using such a Uri may be malformed.\r\n\r\nFor example:\r\n- Reserved characters will not be escaped - space characters will not be changed to `%20`\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMihaZupan\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `untriaged`, `area-Extensions-Options`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-09-14T17:06:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42zB2B",
                                           "createdAt":  "2021-09-14T17:08:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\r\n\r\n`Uri` validates the input and (if needed) converts it into a normalized (canonical) representation.\r\nFor example, it will:\r\n- Escape reserved characters (spaces turn into `%20`)\r\n- Unescape unreserved characters (`%41` turns into `A`)\r\n- Compress dot segments (`/foo/./bar/../` turns into `/foo/`)\r\n\r\nIt does this based on the recommendations of the [Uri RFC](https://datatracker.ietf.org/doc/html/rfc3986#section-6.2.2).\r\n\r\nSome services, however, rely on specific behavior that may be impossible to replicate using .NET\u0027s `Uri` (#52628, #58057).\r\nFor example, it is currently not possible to send `/foo?A=%42` with `HttpClient`, as `Uri` will convert it to `/foo?A=B`.\r\n\r\nI propose adding a `UriCreationOptions` type and a `ctor`/`TryCreate` overload to consume it, serving as the extension point for future `Uri` customizability.\r\n\r\n`Uri` has support for implicitly converting a file path into a `file://` uri.\r\n`/foo` is a valid Unix absolute file path and support for Unix paths is limited to non-Windows platforms.\r\nThis can create confusion in cases like `Uri.TryCreate(\"/foo\", UriKind.Absolute)` where the behavior depends on the platform.\r\nGiven an extension point like `UriCreationOptions` is available, I propose adding an `AllowImplicitFilePaths` flag to it.\r\n\r\n### API Proposal\r\n\r\n```C#\r\nnamespace System\r\n{\r\n    // New type\r\n    public readonly struct UriCreationOptions\r\n    {\r\n        public bool AllowImplicitFilePaths { get; init; }\r\n        public bool DangerousUseRawPathAndQuery { get; init; }\r\n\r\n        public UriKind UriKind { get; }\r\n\r\n        public UriCreationOptions(UriKind uriKind);\r\n    }\r\n\r\n    public partial class Uri\r\n    {\r\n        // Existing\r\n        public Uri(string uriString);\r\n        public Uri(string uriString, UriKind uriKind);\r\n        // New\r\n        public Uri(string uriString, UriCreationOptions creationOptions);\r\n        \r\n        // Existing\r\n        public static bool TryCreate(string? uriString, UriKind uriKind, out Uri? result);\r\n        // New\r\n        public static bool TryCreate(string? uriString, UriCreationOptions creationOptions, out Uri? result);\r\n    }\r\n}\r\n```\r\n\r\nAlternative names for `DangerousUseRawPathAndQuery`:\r\n- `DangerousUseRawTarget`\r\n- `DangerousDisableCanonicalization`\r\n\r\nBehavior of `DangerousUseRawPathAndQuery` is such that we try not to be opinionated as much as possible:\r\n- Validation of the `Path`/`Query` is skipped, we assume they already are in the “perfect format”\r\n- We will not escape reserved characters (e.g. spaces won\u0027t be turned into `%20`)\r\n- We will not unescape unreserved characters (e.g. `%41` won\u0027t be turned into `A`)\r\n- We will not compress dot segments (`/../` or `/./` will be kept)\r\n- Fragment is always empty – `#` and anything following it is attributed to the `Path` or `Query`\r\n  - Not doing so would disallow sending the `#` literal as part of `PathAndQuery`\r\n- Properties like `Path`, `Query`, `PathAndQuery` will return the value as-is\r\n- We will not ensure `Path`/`PathAndQuery` start with `/`, that is left up to the user\r\n- Uris with “UseRawPathAndQuery” may only be equal to Uris with the same flag\r\n- The `GetComponents` API will ignore the `UriFormat` argument for `Path` \u0026 `Query` components\r\n\r\n### API Usage\r\n\r\n```c#\r\nstring uriString = \"/foo\";\r\n\r\nUri.TryCreate(uriString, new UriCreationOptions { AllowImplicitFilePaths = false }, out var uri); // False\r\n```\r\n\r\n```c#\r\nvar options = new UriCreationOptions { DangerousUseRawPathAndQuery = true };\r\nvar uri = new Uri(\"http://foo/%41\", options);\r\n\r\n// Server receives /%41 instead of /A\r\n```\r\n\r\n### Alternative API\r\n\r\n- Instead of a `readonly struct`, make `UriCreationOptions` an enum\r\n  - Prevents us from easily exposing more complex options (e.g. ints, callbacks) in the future\r\n  - Forces us into inverting names in some cases (e.g. `AllowImplicitFilePaths` would have to be `DontAllowImplicitFilePaths`)\r\n  - Defers validation – with `UriCreationOptions` we can ensure it\u0027s always in a valid state (e.g. valid `UriKind`)\r\n\r\n- Instead of a `DangerousUseRawPathAndQuery` flag, expose granular options controlling specific transformations\r\n  - Example:  `UnescapeUnreservedCharacters`, `CompressDotSegments`\r\n  - Any new scenarios that can\u0027t be addressed with existing options are blocked on the decision of the networking team, API review, implementation, and release of a major .NET version\r\n  - Complicates the code base \u0026 testing - some options may conflict\r\n\r\n### Risks\r\n\r\nSetting `DangerousUseRawPathAndQuery` means no validation/transformation of the input will take place past the authority.\r\nIf the input is not already in the correct format, HTTP requests using such a Uri may be malformed.\r\n\r\nFor example:\r\n- Reserved characters will not be escaped - space characters will not be changed to `%20`\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMihaZupan\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`, `api-ready-for-review`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e7.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-09-14T17:08:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42zR6q",
                                           "createdAt":  "2021-09-14T18:32:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "terrajobst",
                                           "body":  "[Video](https://www.youtube.com/watch?v=0UAoOvgn_7g\u0026t=0h0m0s)\n\n* The struct should be a mutable struct\r\n    - We should pass it in via `in`, which means we should mark the getter as `readonly`\r\n* `GetComponents()` should throw `InvaliOperationException`\r\n    - Note: even `UriFormat.Unescaped` does some transformations, so this also doesn\u0027t make sense to allow\r\n\r\n```C#\r\nnamespace System\r\n{\r\n    public struct UriCreationOptions\r\n    {\r\n        public UriKind UriKind { readonly get; set; }\r\n        public bool AllowImplicitFilePaths { readonly get; set; }\r\n        public bool DangerousDisablePathAndQueryCanonicalization { readonly get; set; }\r\n    }\r\n\r\n    public partial class Uri\r\n    {\r\n        // Existing\r\n        // public Uri(string uriString);\r\n        // public Uri(string uriString, UriKind uriKind);\r\n        public Uri(string uriString, in UriCreationOptions creationOptions);\r\n        \r\n        // Existing\r\n        // public static bool TryCreate(string? uriString, UriKind uriKind, out Uri? result);\r\n        public static bool TryCreate(string? uriString, in UriCreationOptions creationOptions, out Uri? result);\r\n    }\r\n}\r\n```",
                                           "updatedAt":  "2021-09-14T19:13:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42_5Yq",
                                           "createdAt":  "2021-09-20T08:19:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Part of the API surface was added in 6.0 RC2 to address #52628 and #58057 customer reprots.\r\n- 6.0 RC2 added in PR #59274.\r\n- 7.0 (main) added in PR #59173.\r\n\r\nAdded in 6.0 RC2 and 7.0 PRs:\r\n```c#\r\npublic struct UriCreationOptions\r\n{\r\n    public bool DangerousDisablePathAndQueryCanonicalization { readonly get; set; }\r\n}\r\n\r\npublic partial class Uri\r\n{\r\n    // Existing\r\n    // public Uri(string uriString);\r\n    // public Uri(string uriString, UriKind uriKind);\r\n    public Uri(string uriString, in UriCreationOptions creationOptions);\r\n\r\n    // Existing\r\n    // public static bool TryCreate(string? uriString, UriKind uriKind, out Uri? result);\r\n    public static bool TryCreate(string? uriString, in UriCreationOptions creationOptions, out Uri? result);\r\n}\r\n```\r\n\r\n**Remaining parts, not yet implemented:**\r\n```c#\r\npublic struct UriCreationOptions\r\n{\r\n    public UriKind UriKind { readonly get; set; }\r\n    public bool AllowImplicitFilePaths { readonly get; set; }\r\n}\r\n```",
                                           "updatedAt":  "2021-09-20T08:19:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43Qq9L",
                                           "createdAt":  "2021-09-25T12:53:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "\u003e `Uri` has support for implicitly converting a file path into a `file://` uri.\r\n\r\nThere is one case in RFC 8089, which `Uri.TryCreate` fails to accept: https://sharplab.io/#gist:7680fb1f8c7f5c0c0a41334e71f3f137. `file:c:/foo.txt` is allowed, `file:/tmp/foo.txt` isn\u0027t. Would it be allowed implicitly with `AllowImplicitFilePaths`?",
                                           "updatedAt":  "2021-09-25T12:53:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43Qzw3",
                                           "createdAt":  "2021-09-25T17:11:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "`AllowImplicitFilePaths` would remain `true` by default.\r\nIf there are other formats we should support, we can discuss it in a separate issue (it would impact the default Uri behavior).",
                                           "updatedAt":  "2021-09-25T17:11:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43Q0Th",
                                           "createdAt":  "2021-09-25T17:28:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "I read it as if we are adding a new mode/flag for canonical form to support formats which weren\u0027t possible to support before (due to Uri\u0027s compatibility concerns). If that\u0027s not the case, nvm.",
                                           "updatedAt":  "2021-09-25T17:28:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Gyo42",
                                           "createdAt":  "2022-07-18T16:01:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "Note to self: most of the missing implementation work is done in https://github.com/MihaZupan/runtime/commit/fef4435f2751a5af853d6004c54710d4f554e604 (not updated after https://github.com/dotnet/runtime/pull/59173).",
                                           "updatedAt":  "2022-07-18T16:01:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6NhRO-",
                                           "createdAt":  "2024-09-25T14:46:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "WGroenestein",
                                           "body":  "I might be totally wrong here, but I was not really able to find this (in my eyes) unexpected behavior related to UriKind.Absolute in combination with implicit filepaths (linux) in the docs (msdn). Maybe it would be a great idea to put some giant warning blocks in the docs describing the behavior. And then secondary prioritize the work to have stricter parsing as described above and preferrable deprecate the existing loose parsing (secure by default)",
                                           "updatedAt":  "2024-09-25T14:46:04Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "[API Proposal]: UriCreationOptions",
        "labels":  [
                       "api-approved",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/114712",
        "createdAt":  "2021-10-28T14:05:34Z",
        "number":  114712,
        "author":  "AnthonyMastrean",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-05-07T16:35:26Z",
        "body":  "**Issue description**\r\n\r\n.NET manages FIPS compliance by passing \"cryptographic primitives calls through to the standard modules the underlying operating system provides\". This is the case for the entire standard library on Linux and Windows.\r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/standard/security/fips-compliance\r\n\r\nHowever, on the SmtpClient docs, you recommend MailKit (and other libraries) that do not make the same choices or guarantees. \r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/api/system.net.mail.smtpclient?view=net-5.0#remarks\r\n\r\nMailKit depends on MimeKit which depends on Bouncy Castle, which reimplements cryptographic primitives instead of targeting the \"standard modules the underlying operating system provides\". Bouncy Castle is FIPS-validated on a 5-year-old version of their library targeting .NET 4.5.2.\r\n\r\nhttps://www.bouncycastle.org/fips-csharp\r\n\r\n**Target framework**\r\n\r\n\u003c!-- Check the .NET target framework(s) being used, and include the version number(s). --\u003e\r\n\r\n- [x] .NET Core\r\n- [x] .NET Framework\r\n- [ ] .NET Standard\r\n\r\n\u003c!--\r\nIf using the .NET Core SDK, include `dotnet --info` output. If using .NET Framework without the .NET Core SDK, include info from Visual Studio\u0027s **Help** \u003e **About Microsoft Visual Studio** dialog.\r\n--\u003e\r\n\r\n\u003cdetails\u003e\r\n\u003csummary\u003e\u003cstrong\u003edotnet --info output\u003c/strong\u003e or \u003cstrong\u003eAbout VS info\u003c/strong\u003e\u003c/summary\u003e\r\n\r\n```console\r\n\u003creplace\u003e\r\n```\r\n\u003c/details\u003e\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOqmy_yA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6nVqlR",
                                           "createdAt":  "2021-11-02T13:41:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adegeo",
                                           "body":  "This user has feedback related to the `system.net.mail.smtpclient` API.",
                                           "updatedAt":  "2021-11-02T13:41:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6nVqlV",
                                           "createdAt":  "2021-11-02T13:44:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adegeo",
                                           "body":  "@AnthonyMastrean I transferred your issue to the SDK repo as they would be better suited to help you. From the docs perspective there isn\u0027t much we can do. If the `SMTPClient` API hasn\u0027t been keepig up with modern protocols, there are two alternatives:\r\n\r\n1. Request the SDK team to reimplement this API in a new way to support modern protocols.\r\n2. Find a different alternative to `MailKit`.\r\n\r\nHopefully they can help with either of those two solutions.",
                                           "updatedAt":  "2021-11-02T13:44:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6nVqlf",
                                           "createdAt":  "2021-11-02T14:00:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AnthonyMastrean",
                                           "body":  "Thank you. It doesn\u0027t seem like no. 1 would be a priority, but the SDK team would know best and we\u0027re definitely approaching no. 2 on our end. I filed the issue in the docs repository because it seemed like the recommendation/endorsement worked _against_ the linked FIPS documentation and the approach of the .NET framework in general.",
                                           "updatedAt":  "2021-11-02T14:01:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6nVrBG",
                                           "createdAt":  "2025-04-15T20:52:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "marcpopMSFT",
                                           "body":  "Old issue triage: Probably libraries should weigh in here on the recommended way to do this and how to update our docs. There may also be a better solution since this was originally filed.",
                                           "updatedAt":  "2025-04-15T20:52:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6nfsLX",
                                           "createdAt":  "2025-04-16T16:26:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-16T16:26:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6n3Mid",
                                           "createdAt":  "2025-04-18T22:03:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOERMhvg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wfurt",
                                                                               "createdAt":  "2025-05-07T16:31:55Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "teo-tsirpanis",
                                           "body":  "I don\u0027t think there is anything to do on the .NET side. The 3rd-party libraries .NET recommends don\u0027t have to provide the same feature set that .NET provides.",
                                           "updatedAt":  "2025-04-18T22:03:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6qbL_I",
                                           "createdAt":  "2025-05-07T16:35:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "it seems like we may improve documentation but people still _can_ use the SmtpClient if needed. Many features MailKit has are probably more important to general audience than FIPS. I feel it is up the the user to figure out what fits the need the best, ",
                                           "updatedAt":  "2025-05-07T16:35:07Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "SmtpClient docs recommend a third-party library that is not FIPS-compliant",
        "labels":  [
                       "documentation",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/61303",
        "createdAt":  "2021-11-08T10:25:36Z",
        "number":  61303,
        "author":  "derSchweiger",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-08-09T06:07:30Z",
        "body":  "I\u0027m not 100% sure if this bug is related to the .Net Core integration. Please forgive me, if I\u0027m wrong.\r\n\r\nI\u0027m using the HTTPListener within a Windows Webservice (using LocalSystem account). Under some special circumstances (I haven\u0027t them figured out yet) the service will not start properly after the system has rebooted. The error is:\r\n```\r\nSystem.Net.HttpListenerException (5): Access is denied.\r\n   at System.Net.HttpListener.AddPrefixCore(String registeredPrefix)\r\n   at System.Net.HttpListener.AddAllPrefixes()\r\n   at System.Net.HttpListener.Start()\r\n```\r\n\r\nI\u0027m trying to start the HTTPListener with the following lines of code:\r\n```c#\r\n_httpListener.Prefixes.Add(String.Format(@\"http://{0}:{1}/\", _config.GetValue\u003cstring\u003e(\"WebServerConfig:ServerIP\"), _config.GetValue\u003cint\u003e(\"WebServerConfig:ServerPort\")));\r\n_httpListener.IgnoreWriteExceptions = true;\r\n_httpListener.Start();\r\n```\r\n\r\n- IP: local IP-Adress of the server (e.g 10.0.0.1)\r\n- Port: most of the time its port 8080\r\n\r\nAfter this exception has occured, I\u0027m not able to start the service with this port. I get the following exception everytime:\r\n```\r\nSystem.Net.HttpListenerException (32): The process cannot access the file because it is being used by another process.\r\n   at System.Net.HttpListener.AddPrefixCore(String registeredPrefix)\r\n   at System.Net.HttpListener.AddAllPrefixes()\r\n   at System.Net.HttpListener.Start()\r\n```\r\n\r\nSo it seems that this port is already in use, but it isn\u0027t. At least \"netstat -ano\" doesn\u0027t show any results. I\u0027ve also tried other programs like CurrPorts or TCPView but port 8080 doesn\u0027t seem to be open at all. It\u0027s no problem to start the service with any other port except this one. The only way to restart the service with port 8080 is to restart the whole system.\r\n\r\n- Why does the initial \"access denied\" exception occur? Especially why does it only happen under some special circumstances?\r\n- Why is the used port 8080 blocked for future attempts? The service will shutdown completely. Do I\u0027ve to integrate a special error handling to avoid such a behaviour?\r\n\r\n\r\n**Configuration**\r\n- .NET Core 5\r\n- Windows Server 2016 / Windows Server 2019\r\n- 64bit",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOh7uJ1g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc45ZmKp",
                                           "createdAt":  "2021-11-08T10:25:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nI\u0027m not 100% sure if this bug is related to the .Net Core integration. Please forgive me, if I\u0027m wrong.\r\n\r\nI\u0027m using the HTTPListener within a Windows Webservice (using LocalSystem account). Under some special circumstances (I haven\u0027t them figured out yet) the service will not start properly after the system has rebooted. The error is:\r\n```\r\nSystem.Net.HttpListenerException (5): Access is denied.\r\n   at System.Net.HttpListener.AddPrefixCore(String registeredPrefix)\r\n   at System.Net.HttpListener.AddAllPrefixes()\r\n   at System.Net.HttpListener.Start()\r\n```\r\n\r\nI\u0027m trying to start the HTTPListener with the following lines of code:\r\n```\r\n_httpListener.Prefixes.Add(String.Format(@\"http://{0}:{1}/\", _config.GetValue\u003cstring\u003e(\"WebServerConfig:ServerIP\"), _config.GetValue\u003cint\u003e(\"WebServerConfig:ServerPort\")));\r\n_httpListener.IgnoreWriteExceptions = true;\r\n_httpListener.Start();\r\n```\r\n\r\n- IP: local IP-Adress of the server (e.g 10.0.0.1)\r\n- Port: most of the time its port 8080\r\n\r\nAfter this exception has occured, I\u0027m not able to start the service with this port. I get the following exception everytime:\r\n```\r\nSystem.Net.HttpListenerException (32): The process cannot access the file because it is being used by another process.\r\n   at System.Net.HttpListener.AddPrefixCore(String registeredPrefix)\r\n   at System.Net.HttpListener.AddAllPrefixes()\r\n   at System.Net.HttpListener.Start()\r\n```\r\n\r\nSo it seems that this port is already in use, but it isn\u0027t. At least \"netstat -ano\" doesn\u0027t show any results. I\u0027ve also tried other programs like CurrPorts or TCPView but port 8080 doesn\u0027t seem to be open at all. It\u0027s no problem to start the service with any other port except this one. The only way to restart the service with port 8080 is to restart the whole system.\r\n\r\n- Why does the initial \"access denied\" exception occur? Especially why does it only happen under some special circumstances?\r\n- Why is the used port 8080 blocked for future attempts? The service will shutdown completely. Do I\u0027ve to integrate a special error handling to avoid such a behaviour?\r\n\r\n\r\n**Configuration**\r\n- .NET Core 5\r\n- Windows Server 2016 / Windows Server 2019\r\n- 64bit\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ederSchweiger\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-11-08T10:25:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc452x_K",
                                           "createdAt":  "2021-11-16T20:41:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: Might be bug, fairly corner case. Moving to Future.",
                                           "updatedAt":  "2021-11-16T20:41:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5nUvQx",
                                           "createdAt":  "2023-09-25T11:35:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "yukieiji",
                                           "body":  "I encountered a similar situation in a .NET 6 environment...",
                                           "updatedAt":  "2023-09-25T11:35:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Hu4nW",
                                           "createdAt":  "2024-08-09T06:07:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "notofug",
                                           "body":  "Me too, with .NET 8\r\n- first got exception when trying to start listener with multiple prefixes\r\n- next reduced to just one prefix ; then was stuck at \"cannot access .. used by another ..\"",
                                           "updatedAt":  "2024-08-09T06:07:29Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "HTTPListener may not close the TCP port properly after Exception",
        "labels":  [
                       "bug",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/62072",
        "createdAt":  "2021-11-26T07:30:35Z",
        "number":  62072,
        "author":  "riku76",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-06-30T20:30:45Z",
        "body":  "From https://source.dot.net/#System.Net.Primitives/System/Net/IPAddress.cs,e28302f14f72daac I can see that System.Net.IPAddress.IPv6Any and System.Net.IPAddress.IPv6None now point to the same object. That did not use to be the case, as we can see from eg. .NET Framework 4.8 sources (https://referencesource.microsoft.com/#system/net/system/Net/IPAddress.cs).\r\n\r\nDocumentation regarding IPv6None (https://docs.microsoft.com/en-us/dotnet/api/system.net.ipaddress.ipv6none?view=net-6.0) states that:\r\n\r\n\"The Socket.Bind method uses the IPv6None field to indicate that a Socket must not listen for client activity. The IPv6None field is equivalent to 0:0:0:0:0:0:0:0 in colon-hexadecimal notation, or to ::0 in compact notation.\"\r\n\r\nSo it sounds very much that IPv6Any and IPv6None should not be the same object. I did not check is the Socket.Bind really broken now (as it probably is if documentation is correct), but at least OPC UA SDK breaks due to this change and that is probably not the only thing that breaks.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOOrMlxg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc46ZdDJ",
                                           "createdAt":  "2021-11-26T07:30:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nFrom https://source.dot.net/#System.Net.Primitives/System/Net/IPAddress.cs,e28302f14f72daac I can see that System.Net.IPAddress.IPv6Any and System.Net.IPAddress.IPv6None now point to the same object. That did not use to be the case, as we can see from eg. .NET Framework 4.8 sources (https://referencesource.microsoft.com/#system/net/system/Net/IPAddress.cs).\r\n\r\nDocumentation regarding IPv6None (https://docs.microsoft.com/en-us/dotnet/api/system.net.ipaddress.ipv6none?view=net-6.0) states that:\r\n\r\n\"The Socket.Bind method uses the IPv6None field to indicate that a Socket must not listen for client activity. The IPv6None field is equivalent to 0:0:0:0:0:0:0:0 in colon-hexadecimal notation, or to ::0 in compact notation.\"\r\n\r\nSo it sounds very much that IPv6Any and IPv6None should not be the same object. I did not check is the Socket.Bind really broken now (as it probably is if documentation is correct), but at least OPC UA SDK breaks due to this change and that is probably not the only thing that breaks.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eriku76\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-11-26T07:30:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46ag1B",
                                           "createdAt":  "2021-11-26T14:41:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "antonfirsov",
                                           "body":  "`IPv6None` and `IPv6Any` both point to `0:0:0:0:0:0:0:0`, therefore they are identical. The fact that they are backed by different object instances in older .NET versions doesn\u0027t make any difference here.\r\n\r\n\u003e The Socket.Bind method uses the IPv6None field to indicate that a Socket must not listen for client activity.\r\n\r\n(From the IPV4 `IPAddress.None` docs:)\r\n\u003e The Socket.Bind method uses the None field to indicate that a Socket must not listen for client activity. \r\n\r\nTBH, I don\u0027t really understand the purpose of `IPAddress.IPv6None`, and also don\u0027t understand what do the docs mean by binding IPv4 sockets to `IPAddress.None` in order to \" not listen for client activity\". The IPV4 version `IPAddress.None` is `255.255.255.255`, which is actually the \"Limited Broadcast\" address according to [rfc6890](https://datatracker.ietf.org/doc/html/rfc6890) and [rfc919](https://datatracker.ietf.org/doc/html/rfc919#section-7). It can be used for broadcasting, but as far as I am aware, winsock doesn\u0027t allow to bind to it.\r\n\r\n@wfurt any thoughts? I think we have a documentation issue here.",
                                           "updatedAt":  "2021-11-26T14:41:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46atWu",
                                           "createdAt":  "2021-11-26T16:06:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "teo-tsirpanis",
                                           "body":  "Oops, [I was the one who aliased the two objects](https://github.com/dotnet/runtime/pull/57397).\r\n\r\nThis behavior of `IPv6None` is indeed weird. It represents the same IP address with `IPv6Any`, yet is expected to be compared _by reference_ to trigger some special case? And what does \"a Socket must not listen for client activity\" mean? If you don\u0027t want to listen for client activity, just don\u0027t.\r\n\r\nBTW, `IPv6None` is referenced only once in the both the BCL and ASP.NET Core, twice in the .NET Framework\u0027s BCL, and once in WCF. In none of these cases is it compared by reference. So I guess the documentation is wrong.",
                                           "updatedAt":  "2021-11-26T16:06:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46bQgD",
                                           "createdAt":  "2021-11-26T17:52:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "antonfirsov",
                                           "body":  "@teo-tsirpanis no code should rely on by-ref comparison of `IPAddress`, I would be surprised if BCL code ever does it, if yes, it\u0027s likely a bug.\r\n\r\n@riku76 can you provide more details on how exactly is OPC UA SDK broken?",
                                           "updatedAt":  "2021-11-26T17:52:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46ffLW",
                                           "createdAt":  "2021-11-29T06:40:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "riku76",
                                           "body":  "@antonfirsov OPC UA SDK has a configuration for network interface to listen. If you omit it, UA internally initializes it to Any/IPv6Any, then it later compares that to IPv6None and thinks that it does not need to listen anything. As a workaround specifying the IPv6Any like address manually (bitwise equal, not reference equal) it starts working again.\r\n\r\n@teo-tsirpanis I agree that by reference compare is not a good idea, but I think that if you only look at the docs and API one could easily overlook the fact that it is a reference comparison you are making with == operator and the thing that Any \u0026 None are exactly the same, thus I believe the same kind of issue could easily exist somewhere else than in OPC UA SDK as well.",
                                           "updatedAt":  "2021-11-29T06:40:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46lZkO",
                                           "createdAt":  "2021-11-30T18:00:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: We believe we just need to update documentation.\r\nIt is ok to have the same instance for these 2 fields.",
                                           "updatedAt":  "2021-11-30T18:00:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46lbaX",
                                           "createdAt":  "2021-11-30T18:09:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "antonfirsov",
                                           "body":  "\u003e  then it later compares that to IPv6None\r\n\r\n@riku76 I believe an issue has to be raised against the OPC UA SDK. They should not compare the address against `IPAdress.IPv6None` by reference. I will think how to clean-up our docs so they are less confusing.\r\n\r\nIf we see more reports on customers hitting this issue, we may reconsider this.",
                                           "updatedAt":  "2021-11-30T18:09:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46nIKQ",
                                           "createdAt":  "2021-12-01T06:40:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "riku76",
                                           "body":  "@antonfirsov I think the inconsistent behavior between IPv4 None and Any  vs.  IPv6 None and Any is an issue, but whatever. In case you stick to this decision you could consider implementing == operator to prevent future issues. \r\n\r\n.NET 6 itself is using ==  operator (reference compare) at least in:\r\n\r\nhttps://source.dot.net/#Microsoft.AspNetCore.Server.Kestrel.Transport.Quic/Internal/QuicConnectionListener.cs,47\r\nhttps://source.dot.net/#Microsoft.AspNetCore.Server.Kestrel.Transport.Quic/Internal/QuicConnectionListener.cs,51\r\nhttps://source.dot.net/#Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets/SocketTransportOptions.cs,119\r\n\r\n...so if even you are making the mistake it is quite clear that others may fall to it too. (these are comparison to Any, but it is reference comparison and now for two latter cases they match to IPv6None too).",
                                           "updatedAt":  "2021-12-01T06:40:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46nSpQ",
                                           "createdAt":  "2021-12-01T07:52:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "teo-tsirpanis",
                                           "body":  "~~@riku76 `Equals` compares IP addresses _by value_; it\u0027s not the same with `==`.~~\n\nForget about it, didn\u0027t read the whole sources.",
                                           "updatedAt":  "2021-12-01T07:54:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46ofJY",
                                           "createdAt":  "2021-12-01T14:24:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCE5xsw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "riku76",
                                                                               "createdAt":  "2021-12-02T06:18:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Joe4evr",
                                                                               "createdAt":  "2021-12-02T07:35:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "antonfirsov",
                                           "body":  "@riku76 thank you for pointing me to those cases! Opened dotnet/aspnetcore#38761 to address them.\r\n\r\nWe also made a mistake in our own code, see #57250. I would re-consider adding `==` overload to `IPAddress`, naively it feels like it may fix more problems than it would create. Related: #38040. @geoffkizer @scalablecory thoughts?\r\n\r\nSomeone should really untangle the historical intention behind naming and docs of `IPAddress.None` and `IPAddress.IPv6None`, these look like nonsense fields to me.\r\n\r\nPutting this back to `untriaged`, since the topic could use another discussion.",
                                           "updatedAt":  "2021-12-01T14:27:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46syXG",
                                           "createdAt":  "2021-12-02T17:02:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCICNNg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2021-12-28T12:49:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage:\r\n- It is not super-important, so let\u0027s do minimal work - leave it as it is, until we get more customer reports\r\n    - No obsoletion now\r\n- `operator ==` sounds like a good thing in general to help customers. Alternatively we could create Roslyn analyzer to detect usage of reference comparison and flag it.\r\n- Fix docs",
                                           "updatedAt":  "2021-12-02T17:02:10Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "Starting from .NET 6 IPv6Any and IPv6None now point to same object, which they probably should not.",
        "labels":  [
                       "documentation",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/62778",
        "createdAt":  "2021-12-14T14:42:13Z",
        "number":  62778,
        "author":  "fpellet",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-12-14T17:55:58Z",
        "body":  "### Description\r\n\r\nCookieCollection compare name with `OrdinalIgnoreCase`.  \r\nBut no RFC specify case-insensitive and all browser are case-sensitive.  \r\n\r\nCookieCollection is used by CookieContainer, used by HttpClient.  \r\n\r\nTo avoid breaking backwards compatibility, we could add a parameter to specify whether it should be case-sensitive or not.\r\n\r\n### Reproduction Steps\r\n\r\nOn a php server by example  \r\nset_cookie.php  \r\n```\r\n\u003c?php\r\nsetcookie(\u0027foo\u0027, \u0027123\u0027);\r\nsetcookie(\u0027Foo\u0027, \u0027456\u0027);\r\n```\r\nindex.php\r\n```\r\n\u003c?php\r\necho $_COOKIE[\"foo\"].\u0027 \u0027.$_COOKIE[\"Foo\"]\r\n```\r\n\r\nAnd client:\r\n```f#\r\nlet httpClientHandler = new HttpClientHandler()\r\nhttpClientHandler.CookieContainer \u003c- CookieContainer()\r\nhttpClientHandler.UseCookies \u003c- true\r\nlet client = new HttpClient(httpClientHandler)\r\n\r\nlet _ = client.GetStringAsync(\"http://php_server/set_cookie.php\") |\u003e Async.AwaitTask |\u003e Async.RunSynchronously\r\nlet result = client.GetStringAsync(\"http://php_server/index.php\") |\u003e Async.AwaitTask |\u003e Async.RunSynchronously\r\n```\r\n\r\n### Expected behavior\r\n\r\nresult = \"123456\"\r\n\r\n### Actual behavior\r\n\r\nresult = \"123\"\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n.net core 5 - x64 linux  \r\nnot specific to configuration\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOOzyz6A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc47OUh2",
                                           "createdAt":  "2021-12-14T14:42:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nCookieCollection compare name with `OrdinalIgnoreCase`.  \r\nBut no RFC specify case-insensitive and all browser are case-sensitive.  \r\n\r\nCookieCollection is used by CookieContainer, used by HttpClient.  \r\n\r\nTo avoid breaking backwards compatibility, we could add a parameter to specify whether it should be case-sensitive or not.\n\n### Reproduction Steps\n\nOn a php server by example  \r\nset_cookie.php  \r\n```\r\n\u003c?php\r\nsetcookie(\u0027foo\u0027, \u0027123\u0027);\r\nsetcookie(\u0027Foo\u0027, \u0027456\u0027);\r\n```\r\nindex.php\r\n```\r\n\u003c?php\r\necho $_COOKIE[\"foo\"].\u0027 \u0027.$_COOKIE[\"Foo\"]\r\n```\r\n\r\nAnd client:\r\n```\r\nlet httpClientHandler = new HttpClientHandler()\r\nhttpClientHandler.CookieContainer \u003c- CookieContainer()\r\nhttpClientHandler.UseCookies \u003c- true\r\nlet client = new HttpClient(httpClientHandler)\r\n\r\nlet _ = client.GetStringAsync(\"http://php_server/set_cookie.php\") |\u003e Async.AwaitTask |\u003e Async.RunSynchronously\r\nlet result = client.GetStringAsync(\"http://php_server/index.php\") |\u003e Async.AwaitTask |\u003e Async.RunSynchronously\r\n```\n\n### Expected behavior\n\nresult = \"123456\"\n\n### Actual behavior\n\nresult = \"123\"\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.net core 5 - x64 linux  \r\nnot specific to configuration\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003efpellet\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-12-14T14:42:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47PLPo",
                                           "createdAt":  "2021-12-14T17:55:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: We should confirm. It likely exists for a long time, so Future is fine.",
                                           "updatedAt":  "2021-12-14T17:55:58Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Cookie name are case-sensitive",
        "labels":  [
                       "bug",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/63236",
        "createdAt":  "2021-12-31T13:01:28Z",
        "number":  63236,
        "author":  "PJB3005",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-01-04T20:02:00Z",
        "body":  "### Description\n\nThe managed implementation of `HttpListener` doesn\u0027t shut down sockets before closing them. This is problematic because it means a long send operating from the server can get reset by this close. This appears to be the same problem as #21897 except I find it extremely reliable to reproduce. (I would have commented on that issue but it\u0027s locked)\r\n\r\nSorry if this issue is a bit low-effort, since HttpListener is apparently an abandoned API (?) I have my personal doubts this is ever getting fixed upstream.\n\n### Reproduction Steps\n\n* Get a simple HttpListener example which responds to requests.\r\n* Send a large write (I used like 35 MB), then close the connection. You can use `Close(byte[], bool)` for this. The OS has to completely buffer the write so it finishes and does `Close()` instantly.\r\n* At this point, the socket is still kept alive thanks to connection keepalive, so the transfer appears to work fine.\r\n* When keepalive gets timed out, the connection is closed/reset and the transfer aborted completely.\r\n* You can use `curl --limit-rate 5k` or something to throttle the download and trigger this easily.\n\n### Expected behavior\n\nConnection is shut down properly and does not actually close until receive is finished on client.\n\n### Actual behavior\n\nConnection is forcefully closed mid-receive and client does not receive all data.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nI\u0027ll be editing my fork of HttpListener to work around this. I found comments stating that HttpListener is basically not being maintained anymore however so I don\u0027t feel like even trying to upstream the fixes (unless I get confirmation they\u0027d be accepted in this issue).\n\n### Configuration\n\n.NET 6.0.0, x64, Windows 10\r\n\r\n**It should be noted** that I am using the managed version of `HttpListener` on Windows (not the `http.sys` one) because of permissions issues and such. I did this by compiling it myself with the Windows code removed. I checked through the Git history though and I can find zero commits to HttpListener that aren\u0027t just minor code style stuff in the past year (since I forked the .NET 5 version) so I am assuming this issue is still valid. \n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOO-kPjw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc47zjs7",
                                           "createdAt":  "2021-12-31T13:01:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nThe managed implementation of `HttpListener` doesn\u0027t shut down sockets before closing them. This is problematic because it means a long send operating from the server can get reset by this close. This appears to be the same problem as #21897 except I find it extremely reliable to reproduce. (I would have commented on that issue but it\u0027s locked)\r\n\r\nSorry if this issue is a bit low-effort, since HttpListener is apparently an abandoned API (?) I have my personal doubts this is ever getting fixed upstream.\n\n### Reproduction Steps\n\n* Get a simple HttpListener example which responds to requests.\r\n* Send a large write (I used like 35 MB), then close the connection. You can use `Close(byte[], bool)` for this. The OS has to completely buffer the write so it finishes and does `Close()` instantly.\r\n* At this point, the socket is still kept alive thanks to connection keepalive, so the transfer appears to work fine.\r\n* When keepalive gets timed out, the connection is closed/reset and the transfer aborted completely.\r\n* You can use `curl --limit-rate 5k` or something to throttle the download and trigger this easily.\n\n### Expected behavior\n\nConnection is shut down properly and does not actually close until receive is finished on client.\n\n### Actual behavior\n\nConnection is forcefully closed mid-receive and client does not receive all data.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nI\u0027ll be editing my fork of HttpListener to work around this. I found comments stating that HttpListener is basically not being maintained anymore however so I don\u0027t feel like even trying to upstream the fixes (unless I get confirmation they\u0027d be accepted in this issue).\n\n### Configuration\n\n.NET 6.0.0, x64, Windows 10\r\n\r\n**It should be noted** that I am using the managed version of `HttpListener` on Windows (not the `http.sys` one) because of permissions issues and such. I did this by compiling it myself with the Windows code removed. I checked through the Git history though and I can find zero commits to HttpListener that aren\u0027t just minor code style stuff in the past year (since I forked the .NET 5 version) so I am assuming this issue is still valid. \n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ePJB3005\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-12-31T13:01:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc476Q-P",
                                           "createdAt":  "2022-01-04T20:01:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: If the fix is as simple as adding Shutdown before Close call on the socket, we would take such change. (at least that\u0027s what you referenced from https://github.com/space-wizards/ManagedHttpListener/commit/d178bdd739f72fefb2d937ff3df3a664a7e8bb86)\r\nCan you confirm that such change works well in your environment and addresses the problem?\r\nIf yes, we would welcome your PR. Thanks!",
                                           "updatedAt":  "2022-01-04T20:01:49Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Managed HttpListener does not shut down socket properly before closing",
        "labels":  [
                       "bug",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/64673",
        "createdAt":  "2022-02-02T11:11:09Z",
        "number":  64673,
        "author":  "MaximLipnin",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-01-26T19:39:34Z",
        "body":  "```\r\n=== TEST EXECUTION SUMMARY ===\r\n   System.Net.Ping.Functional.Tests  Total: 66, Errors: 0, Failed: 47, Skipped: 1, Time: 42.119s\r\n```\r\n\r\nhttps://helixre8s23ayyeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-main-ffb54b76a5e94879a8/System.Net.Ping.Functional.Tests/3/console.404a6763.log?sv=2019-07-07\u0026se=2022-02-22T07%3A41%3A16Z\u0026sr=c\u0026sp=rl\u0026sig=QSvkd91GeAqjkqrhO2rZ%2FhCS9MfDKzYibPnftrSQ8No%3D\r\n\r\ncc @directhex @steveisok ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcf_fzA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5x_9_M",
                                           "createdAt":  "2024-01-26T19:39:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n```\r\n=== TEST EXECUTION SUMMARY ===\r\n   System.Net.Ping.Functional.Tests  Total: 66, Errors: 0, Failed: 47, Skipped: 1, Time: 42.119s\r\n```\r\n\r\nhttps://helixre8s23ayyeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-main-ffb54b76a5e94879a8/System.Net.Ping.Functional.Tests/3/console.404a6763.log?sv=2019-07-07\u0026se=2022-02-22T07%3A41%3A16Z\u0026sr=c\u0026sp=rl\u0026sig=QSvkd91GeAqjkqrhO2rZ%2FhCS9MfDKzYibPnftrSQ8No%3D\r\n\r\ncc @directhex @steveisok \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMaximLipnin\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`, `disabled-test`, `runtime-mono`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-01-26T19:39:33Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[mono][arm6][linux] System.Net.Ping.Functional.Tests failed",
        "labels":  [
                       "area-System.Net",
                       "disabled-test",
                       "runtime-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/64707",
        "createdAt":  "2022-02-02T23:48:26Z",
        "number":  64707,
        "author":  "jimmylewis",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODGpprg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dibarbet",
                                            "createdAt":  "2023-09-06T19:52:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "eternalphane",
                                            "createdAt":  "2023-09-16T18:04:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "glen-84",
                                            "createdAt":  "2024-07-18T07:37:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mikekistler",
                                            "createdAt":  "2025-01-08T13:11:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ruoti",
                                            "createdAt":  "2025-01-31T18:11:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0xced",
                                            "createdAt":  "2025-07-07T16:41:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DamienBraillard",
                                            "createdAt":  "2025-07-11T13:09:22Z"
                                        }
                                    ],
                          "totalCount":  7
                      },
        "updatedAt":  "2025-07-29T11:20:48Z",
        "body":  "### Description\r\n\r\nPer RFC 3987 (and 3986), the host name is allowed to contain certain delimiter characters according to the ABNF grammar:\r\n\r\n```\r\n   IRI            = scheme \":\" ihier-part [ \"?\" iquery ]\r\n                         [ \"#\" ifragment ]\r\n\r\n   ihier-part     = \"//\" iauthority ipath-abempty\r\n                  / ipath-absolute\r\n                  / ipath-rootless\r\n                  / ipath-empty\r\n   iauthority     = [ iuserinfo \"@\" ] ihost [ \":\" port ]\r\n   ihost          = IP-literal / IPv4address / ireg-name\r\n   ireg-name      = *( iunreserved / pct-encoded / sub-delims )\r\n   sub-delims     = \"!\" / \"$\" / \"\u0026\" / \"\u0027\" / \"(\" / \")\"\r\n                  / \"*\" / \"+\" / \",\" / \";\" / \"=\"\r\n```\r\n\r\nHowever, attempting to create a Uri containing these in the host portion throws an exception.\r\n\r\n### Reproduction Steps\r\n\r\n```c#\r\nnew Uri(\"http://*:5000\", UriKind.Absolute)\r\n```\r\n\r\n### Expected behavior\r\n\r\nThis is a grammatically valid URI, and should be parsed.\r\n\r\n### Actual behavior\r\n\r\n```\r\nUnhandled exception. System.UriFormatException: Invalid URI: The hostname could not be parsed.\r\n   at System.Uri.CreateThis(String uri, Boolean dontEscape, UriKind uriKind, UriCreationOptions\u0026 creationOptions)\r\n   at System.Uri..ctor(String uriString, UriKind uriKind)\r\n```\r\n\r\n### Regression?\r\n\r\nNot a regression AFAICT\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n.NET 6\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnTikDw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc49TSO5",
                                           "createdAt":  "2022-02-02T23:48:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nPer RFC 3987 (and 3986), the host name is allowed to contain certain delimiter characters according to the ABNF grammar:\r\n\r\n```\r\n   IRI            = scheme \":\" ihier-part [ \"?\" iquery ]\r\n                         [ \"#\" ifragment ]\r\n\r\n   ihier-part     = \"//\" iauthority ipath-abempty\r\n                  / ipath-absolute\r\n                  / ipath-rootless\r\n                  / ipath-empty\r\n   iauthority     = [ iuserinfo \"@\" ] ihost [ \":\" port ]\r\n   ihost          = IP-literal / IPv4address / ireg-name\r\n   ireg-name      = *( iunreserved / pct-encoded / sub-delims )\r\n   sub-delims     = \"!\" / \"$\" / \"\u0026\" / \"\u0027\" / \"(\" / \")\"\r\n                  / \"*\" / \"+\" / \",\" / \";\" / \"=\"\r\n```\r\n\r\nHowever, attempting to create a Uri containing these in the host portion throws an exception.\n\n### Reproduction Steps\n\n```\r\nnew Uri(\"http://*:5000\", UriKind.Absolute)\r\n```\n\n### Expected behavior\n\nThis is a grammatically valid URI, and should be parsed.\n\n### Actual behavior\n\nUnhandled exception. System.UriFormatException: Invalid URI: The hostname could not be parsed.\r\n   at System.Uri.CreateThis(String uri, Boolean dontEscape, UriKind uriKind, UriCreationOptions\u0026 creationOptions)\r\n   at System.Uri..ctor(String uriString, UriKind uriKind)\n\n### Regression?\n\nNot a regression AFAICT\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET 6\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejimmylewis\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-02-02T23:48:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49TY1y",
                                           "createdAt":  "2022-02-03T00:40:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "You are probably right in that this is a possible `Uri` authority according to the spec, but the `Uri` class is more restrictive than the general ABNF when it comes to the authority part. For example, we don\u0027t allow pct-encoded hosts either.\r\n\r\nWhat is the use-case for such a `Uri`? What is the value of being able to represent it with this class?",
                                           "updatedAt":  "2022-02-03T00:40:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49TcTi",
                                           "createdAt":  "2022-02-03T01:06:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jimmylewis",
                                           "body":  "In my case, I was using Uri.IsWellFormed to verify that a string is valid URI according to the RFC.  As the documentation states:\r\n\u003e The existing [Uri](https://docs.microsoft.com/en-us/dotnet/api/system.uri?view=net-6.0) class has been extended in .NET Framework v3.5, 3.0 SP1, and 2.0 SP1 to provide IRI support based on RFC 3987.\r\n\r\nMy code in part of a JSON Schema validator, and the JSON Schema spec specifies the RFC as the definition for valid/invalid values.\r\n\r\nThe user reporting the problem with my code is using this value in their appsettings.json for an ASP.NET Core project for a Kestrel endpoint, e.g.\r\n```json\r\n{\r\n  \"Kestrel\": {\r\n    \"Endpoints\": {\r\n      \"MyHttpsEndpoint\": {\r\n        \"Url\": \"https://*:5001\",   // warning on this line\r\n        \"SslProtocols\": [ \"Tls12\", \"Tls13\" ],\r\n        \"Certificate\": {\r\n          \"Path\": \"\u003cpath to .pfx file\u003e\",\r\n          \"Password\": \"$CREDENTIAL_PLACEHOLDER$\"\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\nThe JSON Schema for appsettings.json defines the \"Url\" property here as using the \"uri\" format defined in the JSON schema spec.\r\n\r\nIf this is out of scope for the System.Uri class to handle, that\u0027s fine, I\u0027ll can look into finding or writing another parser.  I didn\u0027t see any remarks in the (admittedly long) documentation about non-conformance to the specifications.",
                                           "updatedAt":  "2023-06-14T13:47:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49cRJs",
                                           "createdAt":  "2022-02-06T12:13:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BhaaLseN",
                                           "body":  "This also affects the `UriBuilder` class, in case any changes are planned as result of this issue.\r\n\r\nOur use-case was a configuration tool that both reads and writes configuration files that contain host URLs, and the plan was to simply put `*` as hostname to not limit hosting to a specific hostname (which, in many of our cases, is undesireable).\r\n\r\nOur workaround is to assume `*` is only in the host portion (which might not apply to everyone reading this), and replacing it with `localhost` for the duration of `Uri`/`UriBuilder` use; then replace `localhost` back with `*` before it goes in the config file.",
                                           "updatedAt":  "2022-02-06T12:13:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-Bjl6",
                                           "createdAt":  "2022-02-15T17:54:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: `Uri` does more than just URI RFC. It also validates DNS schema.\r\nTo change it, we would technically break behavior and change rejection from `Uri` to HTTP stack or other parts of Networking.\r\nGiven lower demand, we think it is fine. Let\u0027s keep it open to see if more users need it.\r\n\r\nWe admit it would be nice to have ability to parse just according to the RFCs (skipping DNS validation).",
                                           "updatedAt":  "2022-02-15T17:54:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5l3WGV",
                                           "createdAt":  "2023-09-06T19:52:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODHALDQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eternalphane",
                                                                               "createdAt":  "2023-09-16T18:05:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "dibarbet",
                                           "body":  "I think we\u0027re hitting this issue in our vscode C# extension.  We\u0027re getting passed a URI like `perforce://@=1454483/some/file/here/source.cs` from the vscode client, and System.URI is throwing when we try and create a URI for it.  I believe this is because of the \u0027=\u0027 in the host, which looks like a valid host character in the RFC ([link](https://datatracker.ietf.org/doc/html/rfc3986#appendix-A)).\r\n\r\nWe use URIs here because vscode sends us document identifiers as URI formatted strings.  They can represent a real file on disk or a virtual document and we use the URI type to get info on it (e.g. local path if it has one).\r\n\r\nOriginal issue - https://github.com/dotnet/vscode-csharp/issues/6256",
                                           "updatedAt":  "2023-09-07T00:44:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5l7jNC",
                                           "createdAt":  "2023-09-07T12:59:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@dibarbet thanks for your details. I think that Uri validation of [hostnames](https://en.wikipedia.org/wiki/Hostname#Syntax) likely kicks in here.\r\nAs mentioned above https://github.com/dotnet/runtime/issues/64707#issuecomment-1040595322, we do more than just Uri RFC.\r\n\r\nDo you have a reasonable workaround in your code base? (e.g. treating such special Uris as string)\r\nWe are tracking this as feature request and not a common one so far, so it is not clear when or if it will be implemented.",
                                           "updatedAt":  "2023-09-07T12:59:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5l9OI9",
                                           "createdAt":  "2023-09-07T17:42:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dibarbet",
                                           "body":  "I don\u0027t have a good workaround unfortunately - the URI conversion comes from the LSP protocol library we use (internal [link](https://devdiv.visualstudio.com/DevDiv/_git/VSLanguageServerClient?path=%2Fsrc%2Fproduct%2FProtocol%2FLanguageServer.Protocol%2FConverters%2FDocumentUriConverter.cs\u0026_a=contents\u0026version=GBdevelop)).  This library contains C# type definitions for the LSP spec that we use to deserialize LSP message, and is used in VS, Roslyn, vscode C#, etc.\r\n\r\nSwitching the protocol libraries to use string instead of the URI type would be a large undertaking, for example the base document identifier type, used by almost all other definitions, is based on a URI (internal [link](https://devdiv.visualstudio.com/DevDiv/_git/VSLanguageServerClient?path=/src/product/Protocol/LanguageServer.Protocol/TextDocumentIdentifier.cs\u0026version=GBdevelop\u0026line=24\u0026lineEnd=25\u0026lineStartColumn=1\u0026lineEndColumn=1\u0026lineStyle=plain\u0026_a=contents)).\r\n\r\ncc also @olegtk as an FYI and to see if he had any opinions.  Switching over to string might be a good long term move anyway (due to other issues with encoded paths).  But I don\u0027t think it will be simple.",
                                           "updatedAt":  "2023-09-07T17:43:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mAJyJ",
                                           "createdAt":  "2023-09-08T08:53:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "OK, I could imagine that in future versions we could solve it in some way.\r\nFor example, add a new [UriCreationOptions](https://learn.microsoft.com/en-us/dotnet/api/system.uricreationoptions) property (something like DisableDnsHostnameValidation). @MihaZupan what do you think?\r\n\r\nHowever, it will be in future versions of .NET, so you will have to wait and upgrade.\r\nAlso, if it won\u0027t solve all your problems with Uri (as you hinted at encoded paths), then perhaps it is not that much needed after all ...",
                                           "updatedAt":  "2023-09-08T08:53:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ac9g8",
                                           "createdAt":  "2025-01-14T23:03:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "@karelz @MihaZupan Do you guys think something could be done here?  This really is unpleasant on our side as we have a lot of APIs designed around System.Uri, and now we\u0027re painfully finding out that it doesn\u0027t work for all the types of Uris our clients use (like vscode).  Thanks!",
                                           "updatedAt":  "2025-01-14T23:03:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6adKhM",
                                           "createdAt":  "2025-01-14T23:52:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEJx8Eg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "karelz",
                                                                               "createdAt":  "2025-02-05T15:55:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mzbswh",
                                                                               "createdAt":  "2025-03-13T12:07:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "dibarbet",
                                           "body":  "To add on to that, while we are able to move the parsing of the URI out from a critical path (e.g. treat it as a string), at some point we do actually need to parse them to extract information like the scheme, file path, or query parameters from the URI strings.  Other than writing our own URI parser, there doesn\u0027t seem to be a great way to workaround this issue in `System.Uri`.  Additionally, various other components (not owned by us) do use `System.Uri` as API parameters, so we end up having to convert anyway.\n\nThis does seem to be a pretty common issue for VSCode extensions written in C#.  For example [O# created it\u0027s own URI parser](https://github.com/OmniSharp/csharp-language-server-protocol/blob/master/src/Protocol/DocumentUri.cs) to handle VSCode URIs.  And it looks like the bicep extension has feature limitations due to this issue - https://github.com/Azure/bicep/issues/13274\n\nAnyway - just wanted to provide more information on the cost this has on us\n",
                                           "updatedAt":  "2025-01-14T23:52:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ajIUq",
                                           "createdAt":  "2025-01-15T13:46:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEJx8LA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "karelz",
                                                                               "createdAt":  "2025-02-05T15:55:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mzbswh",
                                                                               "createdAt":  "2025-03-13T12:07:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "mzbswh",
                                                                               "createdAt":  "2025-03-13T12:08:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "Given that and related issues (#77464, #94195), it sounds to me like there\u0027s sufficient reasoning for us to make a change here (either behind a flag, or just by default).",
                                           "updatedAt":  "2025-01-15T13:46:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dMoT7",
                                           "createdAt":  "2025-02-05T15:56:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Agreed, we should fix it given the pain it causes. Thanks @CyrusNajmabadi for the detailed info -- it definitely helps in prioritization.\nAnd thanks @rokonec for self-assigning!",
                                           "updatedAt":  "2025-02-05T15:56:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dMoqO",
                                           "createdAt":  "2025-02-05T15:57:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Key question: If we fix just .NET 10, is it going to help all these scenarios in a way they won\u0027t be unhappy too much? (at least not more than now)",
                                           "updatedAt":  "2025-02-05T15:57:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dOE-1",
                                           "createdAt":  "2025-02-05T18:31:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BhaaLseN",
                                           "body":  "I\u0027ve sat here for a while and thought about this question, and I still don\u0027t think I have a clear answer (at least for us). We ran into this with a .NET Framework application (and a fix _there_ would be cool, but fairly unrealistic), but we also have a very trivial workaround (just string-replace before/after with something that _is_ valid - 2 lines difference). Plus, it only affects utility applications meant to give our end users a nicer configuration UI rather than a bare JSON or XML file (which, at this point, have nothing stopping us from upgrading them to .NET 8 or .NET 10 when it\u0027s out).\nOur bigger applications don\u0027t _really_ have to deal with this, aside from what CoreWCF has run into (but that\u0027s still on the list, to migrate from regular WCF to CoreWCF...we have other things keeping us on .NET Framework there that are more difficult to replace with compatible alternatives). And once _those_ are ready to move, we\u0027d go straight to .NET 10 (since I don\u0027t _really_ expect us to get all of this done before end of the year, with an intermediate stop at .NET 8 LTS).\n\nSo, TL;DR: I don\u0027t know.\n\nBut: I\u0027d like to request that `UriBuilder` receives the same treatment, and not just `Uri`. At the very least to accept `*`/`+` for `UriBuilder.Host` (where `ireg-name` and `sub-delims` ultimately go); or in some other new property that allows us to read _and_ write it. The majority of this discussion seemed to be focused on the latter; but the former also exists (and unless I missed something, will continue to do so).",
                                           "updatedAt":  "2025-02-05T18:31:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dOKQP",
                                           "createdAt":  "2025-02-05T18:41:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dibarbet",
                                           "body":  "\u003e Key question: If we fix just .NET 10, is it going to help all these scenarios in a way they won\u0027t be unhappy too much? (at least not more than now)\n\nA fix in .NET 10 will definitely help for Roslyn\u0027s VSCode scenarios (we can upgrade our server to .NET 10 when it releases).  And most of the problematic URIs we get come from our VSCode side.\n\nIt won\u0027t help us in VS at the moment, but we also rarely encounter these kinds of URIs in VS.  And adding to .NET framework I assume is not feasible.",
                                           "updatedAt":  "2025-02-05T18:42:43Z"
                                       }
                                   ],
                         "totalCount":  16
                     },
        "title":  "System.Uri does not allow * (or other sub-delims) in hostname",
        "labels":  [
                       "enhancement",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/65998",
        "createdAt":  "2022-03-01T07:33:40Z",
        "number":  65998,
        "author":  "JKorf",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-03-03T17:40:25Z",
        "body":  "### Description\n\nI\u0027m using the ClientWebsocket to connect to the socket server on Binance, however I\u0027ve run into an issue where the Response is delay by exactly 1 KeepAliveInterval each +- 4000 bytes. For example, when I have set a 10 second KeepAliveInterval in the socket options and send 3000 bytes to the server the response is received in +-260ms which is a normal latency. If I sent 4500 bytes the response is received in +-10260ms and if I sent 8500 bytes it is 20260ms. \r\n\r\nInitially I figured this was something on Binances side but they told me this only seems to happen with the Dotnet socket implementation and that there might be an issue on the client side with that.\r\n\r\nThread discussing this with Binance:\r\nhttps://dev.binance.vision/t/socket-live-subscribing-server-delay/9645\r\n\r\nGist for reproducing the issue:\r\nhttps://gist.github.com/JKorf/afd5bd11f49670b85031df962f37b468\n\n### Reproduction Steps\n\nHave a ClientWebsocket and change the KeepAliveInterval while sending a request \u003e 4000 bytes to the server. See gist\r\n\r\nhttps://gist.github.com/JKorf/afd5bd11f49670b85031df962f37b468\n\n### Expected behavior\n\nExpected not to have the KeepAliveInterval have any influence on the response time\n\n### Actual behavior\n\nResponse is delay by KeepAliveInterval\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nSending \u003c 4000 bytes doesn\u0027t have the issue\n\n### Configuration\n\nDotnet 6\r\nWindows 10 X64\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPuO9mw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc4-472b",
                                           "createdAt":  "2022-03-01T07:33:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nI\u0027m using the ClientWebsocket to connect to the socket server on Binance, however I\u0027ve run into an issue where the Response is delay by exactly 1 KeepAliveInterval each +- 4000 bytes. For example, when I have set a 10 second KeepAliveInterval in the socket options and send 3000 bytes to the server the response is received in +-260ms which is a normal latency. If I sent 4500 bytes the response is received in +-10260ms and if I sent 8500 bytes it is 20260ms. \r\n\r\nInitially I figured this was something on Binances side but they told me this only seems to happen with the Dotnet socket implementation and that there might be an issue on the client side with that.\r\n\r\nThread discussing this with Binance:\r\nhttps://dev.binance.vision/t/socket-live-subscribing-server-delay/9645\r\n\r\nGist for reproducing the issue:\r\nhttps://gist.github.com/JKorf/afd5bd11f49670b85031df962f37b468\n\n### Reproduction Steps\n\nHave a ClientWebsocket and change the KeepAliveInterval while sending a request \u003e 4000 bytes to the server. See gist\r\n\r\nhttps://gist.github.com/JKorf/afd5bd11f49670b85031df962f37b468\n\n### Expected behavior\n\nExpected not to have the KeepAliveInterval have any influence on the response time\n\n### Actual behavior\n\nResponse is delay by KeepAliveInterval\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nSending \u003c 4000 bytes doesn\u0027t have the issue\n\n### Configuration\n\nDotnet 6\r\nWindows 10 X64\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eJKorf\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-03-01T07:33:44Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "ClientWebsocket delay every +- 4000 bytes",
        "labels":  [
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/66470",
        "createdAt":  "2022-03-10T18:59:23Z",
        "number":  66470,
        "author":  "scalablecory",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC8AuiQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MihaZupan",
                                            "createdAt":  "2022-03-10T20:11:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pinkfloydx33",
                                            "createdAt":  "2022-03-11T09:37:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "omariom",
                                            "createdAt":  "2022-03-11T11:14:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "huoyaoyuan",
                                            "createdAt":  "2022-03-11T11:44:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hrrrrustic",
                                            "createdAt":  "2022-03-12T22:26:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "stevejgordon",
                                            "createdAt":  "2022-03-16T08:11:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "coolhome",
                                            "createdAt":  "2022-08-11T03:47:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bash",
                                            "createdAt":  "2022-09-09T08:33:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Mrxx99",
                                            "createdAt":  "2023-05-15T16:13:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "paule96",
                                            "createdAt":  "2023-05-15T18:12:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Shane32",
                                            "createdAt":  "2024-09-04T15:13:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-09-05T12:42:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "derigel23",
                                            "createdAt":  "2024-10-21T16:29:47Z"
                                        }
                                    ],
                          "totalCount":  13
                      },
        "updatedAt":  "2024-09-12T16:56:40Z",
        "body":  "### Background and motivation\r\n\r\nI frequently see code like this:\r\n\r\n```c#\r\nnew Uri($\"http://localhost/things/{Uri.EscapeDataString(id)}/?foo={Uri.EscapeDataString(foo)}\")\r\nnew Uri(baseUri, $\"/things/{Uri.EscapeDataString(id)}/?foo={Uri.EscapeDataString(foo)}\")\r\n```\r\n\r\nI\u0027d rather do something like:\r\n\r\n```c#\r\nUri.Create($\"/things/{id}/?foo={foo}\", UriKind.Relative);\r\nUri.Create($\"http://localhost/things/{id}/?foo={foo}\", UriKind.Absolute);\r\nUri.Create($\"{baseUri}/things/{id}/?foo={foo}\");\r\n```\r\n\r\n(Note, this is integrating the \"base uri\" into the format string. Not sure of corner cases but it feels pretty natural)\r\n\r\nMay be able to use a format string to indicate \"%20\" vs \"+\" style escaping.\r\n\r\n### API Proposal\r\n\r\n```C#\r\nref struct UriInterpolatedStringHandler\r\n{\r\n    // all the interpolated handler members.\r\n}\r\n\r\nclass Uri\r\n{\r\n    public static Uri Create(ref UriInterpolatedStringHandler handler);\r\n}\r\n```\r\n\r\n### API Usage\r\n\r\n```C#\r\nstring GetThingFromWebService(HttpClient client, string thingId)\r\n{\r\n    Uri uri = Uri.Create($\"{client.BaseUri}/things/{thingId}/\");\r\n\r\n    using var req = new HttpRequestMessage { Uri = uri };\r\n    // ...\r\n}\r\n```\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOi-FdDw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc4_cVJe",
                                           "createdAt":  "2022-03-10T18:59:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nI frequently see code like this:\r\n\r\n```c#\r\nnew Uri($\"http://localhost/things/{Uri.EscapeDataString(id)}/?foo={Uri.EscapeDataString(foo)}\")\r\nnew Uri(baseUri, $\"/things/{Uri.EscapeDataString(id)}/?foo={Uri.EscapeDataString(foo)}\")\r\n```\r\n\r\nI\u0027d rather do something like:\r\n\r\n```c#\r\nUri.Create($\"/things/{id}/?foo={foo}\", UriKind.Relative);\r\nUri.Create($\"http://localhost/things/{id}/?foo={foo}\", UriKind.Absolute);\r\nUri.Create($\"{baseUri}/things/{id}/?foo={foo}\");\r\n```\r\n\r\n(Note, this is integrating the \"base uri\" into the format string. Not sure of corner cases but it feels pretty natural)\r\n\r\nMay be able to use a format string to indicate \"%20\" vs \"+\" style escaping.\n\n### API Proposal\n\n```C#\r\nref struct UriInterpolatedStringHandler\r\n{\r\n    // all the interpolated handler members.\r\n}\r\n\r\nclass Uri\r\n{\r\n    public static Uri Create(ref UriInterpolatedStringHandler handler);\r\n}\r\n```\n\n### API Usage\n\n```C#\r\nstring GetThingFromWebService(HttpClient client, string thingId)\r\n{\r\n    Uri uri = Uri.Create($\"{client.BaseUri}/things/{thingId}/\");\r\n}\r\n```\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003escalablecory\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Net`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-03-10T18:59:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_cmKe",
                                           "createdAt":  "2022-03-10T20:11:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "I really like this idea, it\u0027s essentially an `InterpolatedStringHandler` spin on better APIs around building query strings, right?\r\n\r\nPresumably, the implementation here would be to look for `?` to decide which arguments to encode and then delegate to the existing APIs after creating the string.\r\nThis would be both simpler for the user to encode stuff correctly as well more performant since we can do a lot better than\r\n`string EscapeDataString(string)` internally.\r\n\r\nFrom an API perspective, I agree we want a different method name to avoid breaking existing uses of `new Uri($\"foo\")`.\r\n\r\nWe already have `TryCreate` and we can\u0027t change its existing behavior, so `Create($\"\")` and `TryCreate($\"\")` would behave a lot differently. For this reason, I\u0027m not sure we can call it `Create`.\r\n\r\nDo we care about the `Try-` scenario at all? I would say **no**, given that you are creating new `Uri`s with custom arguments, which should never result in an invalid format.\r\n\r\nDo we care about other overloads (`UriKind`, `UriCreationOptions`)?\r\n\r\nRelated: #32606, #40603\r\ncc: @NinoFloris @stevejgordon",
                                           "updatedAt":  "2022-03-10T20:11:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_cm1k",
                                           "createdAt":  "2022-03-10T20:15:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e Presumably, the implementation here would be to look for ? to decide which arguments to encode\r\n\r\nCan you elaborate on that?  Cory\u0027s example appears to be wanting to escape the holes both before and after ? has appeared",
                                           "updatedAt":  "2022-03-10T20:15:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_csgi",
                                           "createdAt":  "2022-03-10T20:44:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "Including the path complicates it somewhat.\r\n\r\nI was thinking of examples where the base/authority portion of the `Uri` is also a hole, but you wouldn\u0027t want it to be escaped.\r\n```c#\r\nUri.Create($\"{baseUri}/things/{id}/?foo={foo}\");\r\nUri.Create($\"{scheme}://{host}:{port}/things/{id}/?foo={foo}\");\r\nUri.Create($\"https://{authority}/things/{id}/?foo={foo}\");\r\n\r\n// Some weirder cases, but not necessary the most realistic\r\nUri.Create($\"https://{authority}/{pathPrefix}/?foo={foo}\"); // pathPrefix is escaped\r\nUri.Create($\"https://{authority}{pathPrefix}/?foo={foo}\"); // does pathPrefix contain the leading \u0027/\u0027? You\u0027ll get weird results\r\nUri.Create($\"https://{authorityAndPathPrefix}/?foo={foo}\"); // the path prefix is not escaped?\r\n```\r\nWe would have to evaluate both the constants \u0026 holes to determine where the path starts, then encode all the holes following it.\r\n\r\nEither that, or be strict about always escaping all holes, but that seems harder on the user in the\r\n`$\"{baseUri}/things/{id}/?foo={foo}\"` case.\r\n\r\nArguably with `HttpClient`, they could set `BaseUri` and pass in a relative Uri.\r\n```diff\r\nstring GetThingFromWebService(HttpClient client, string thingId)\r\n{\r\n-   Uri uri = Uri.Create($\"{client.BaseUri}/things/{thingId}/\");\r\n+   Uri uri = Uri.Create($\"/things/{thingId}/\");\r\n```",
                                           "updatedAt":  "2022-03-10T21:06:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_c6j6",
                                           "createdAt":  "2022-03-10T22:00:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "scalablecory",
                                           "body":  "Perhaps base URI should not be part of the string. It looks weird as `$\"{baseUri}foo\"` --- and might be more confusing, since it\u0027s so visually \"URLish\" as a string, when discussing \"foo\" vs \"foo/\" as base uri.\r\n\r\nIt\u0027d be super cool to have it just \"know\" the correct escaping, as you have discussed.",
                                           "updatedAt":  "2022-03-10T22:00:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_dRCw",
                                           "createdAt":  "2022-03-11T00:01:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "Just playing around implementation-wise, did you have something [like this](https://gist.github.com/MihaZupan/156c6132c9a27211e4a5dce0aeec5bc5) (untested) in mind?",
                                           "updatedAt":  "2022-03-11T00:01:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_iQ63",
                                           "createdAt":  "2022-03-12T19:18:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "scalablecory",
                                           "body":  "\u003e Just playing around implementation-wise, did you have something [like this](https://gist.github.com/MihaZupan/156c6132c9a27211e4a5dce0aeec5bc5) (untested) in mind?\r\n\r\nYes. I like the direction you\u0027ve taken it w/ implementation.\r\n\r\n- Would this always do `EscapeDataString` for bits in the path/query, or would it somehow give the caller the option?\r\n- You\u0027re special-casing those types; but I don\u0027t know if it holds for all cultures \u0026 format strings.\r\n- Crazy idea, but just throwing it out there -- could the interpolated string builder also be used directly as a maybe more efficient `UriBuilder`?\r\n- Can you also drop in a hostname and port?\r\n- Would an overload that outputs to `Span` be useful for anything?",
                                           "updatedAt":  "2022-03-12T19:25:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_ifs4",
                                           "createdAt":  "2022-03-13T02:18:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "\u003e Would this always do EscapeDataString for bits in the path/query, or would it somehow give the caller the option?\r\n\r\nThis would escape every hole. What would user configuration look like here? Presumably, we would want to be clear that this method \"always\" escapes vs. the existing constructors that just take `string` and you are always responsible for escaping.\r\n\r\n\u003e Crazy idea, but just throwing it out there -- could the interpolated string builder also be used directly as a maybe more efficient UriBuilder?\r\n\r\nHow do you mean? As in users using the handler directly instead of through a helper method?\r\n```c#\r\nvar builder = new Uri.SomeRandomStringHandlerName(13, 2);\r\nbuilder.AppendLiteral(\"/myPath/\");\r\nbuilder.AppendFormatted(guid);\r\nbuilder.AppendLiteral(\"/?id=\");\r\nbuilder.AppendFormatted(span);\r\nstring uriString = builder.ToString();\r\n```\r\n\r\nIt would probably work, but I\u0027m not sure you would want to use that over\r\n```c#\r\nstring uriString = Uri.CreateRelative($\"/myPath/{guid}/?id={span}\");\r\n```\r\n\r\n\u003e You\u0027re special-casing those types; but I don\u0027t know if it holds for all cultures \u0026 format strings.\r\n\r\nI think it\u0027s fine for the \"default\" (unspecified) formatting.\r\nIt most likely wouldn\u0027t be fine for an arbitrary format, but for those you have to implement different `AppendFormatted` overloads anyway.\r\nAnother thing is also alignment, but I can\u0027t think of a reason someone would want to do that with a `Uri`.\r\n\r\n\u003e Can you also drop in a hostname and port?\r\n\r\nIn my experiment, it\u0027s `CreateRelative` just so you can avoid thinking about different parts and always encode everything. That also solves the naming problem with `Create`.\r\n\r\nI haven\u0027t tried it to see how complicated it would be to do the above-mentioned logic of finding the start of the path.\r\n\r\n\u003e Would an overload that outputs to Span be useful for anything?\r\n\r\nI could see that being useful to avoid the `Uri` allocation if you don\u0027t need the type itself. Either `Span` or `string`.",
                                           "updatedAt":  "2022-03-13T02:18:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_q4gg",
                                           "createdAt":  "2022-03-15T16:40:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: Sounds reasonable. Not high priority. Let\u0027s see if we can land on API shape.\r\nIt might solve other issue around exposing Span for EscapeDataString.",
                                           "updatedAt":  "2022-03-15T16:43:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6K1xPe",
                                           "createdAt":  "2024-09-04T15:17:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Shane32",
                                           "body":  "This would be great, and also a `EscapeUriString` overload that accepts a `FormattableString`.  It would make building properly-formatted urls much easier and provide a suitable safe replacement for the existing `EscapeUriString` method which has been marked as obsolete.",
                                           "updatedAt":  "2024-09-04T15:17:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6L4V0P",
                                           "createdAt":  "2024-09-12T16:56:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "scalablecory",
                                           "body":  "Perhaps limited support could be added for path \u0026 params if that is easier; these are the parts I expect to really get 99% use of this API.",
                                           "updatedAt":  "2024-09-12T16:56:39Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "[API Proposal]: Uri from interpolated string",
        "labels":  [
                       "api-suggestion",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/68067",
        "createdAt":  "2022-04-15T03:47:58Z",
        "number":  68067,
        "author":  "wfurt",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-12T15:05:53Z",
        "body":  "We had two recent failures (https://github.com/dotnet/runtime/issues/66970 and https://github.com/dotnet/core-eng/issues/15594) when the pipeline was failing consistently and impacting all PRs.\r\nHowever, that got missed because it does not submit passes/failures to test result database so the failures are hidden from many querying tools. ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOQbx5KQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Bjfwd",
                                           "createdAt":  "2022-04-15T03:48:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWe had two recent failures (https://github.com/dotnet/runtime/issues/66970 and https://github.com/dotnet/core-eng/issues/15594) when the pipeline was failing consistently and impacting all PRs.\r\nHowever, that got missed because it does not submit passes/failures to test result database so the failures are hidden from many querying tools. \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ewfurt\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`, `test-enhancement`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-04-15T03:48:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BvHkp",
                                           "createdAt":  "2022-04-19T16:48:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: We have similar needs to monitor Stress. We may not be able to achieve same DB as functional test results, but perhaps only one more place to look at and monitor.\r\n\r\nLet\u0027s figure out if there is API in infra we could use -- as part of 7.0.",
                                           "updatedAt":  "2022-04-19T16:49:20Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "enterprise-linux pipeline should report results to test database",
        "labels":  [
                       "area-System.Net",
                       "test-enhancement"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/68255",
        "createdAt":  "2022-04-20T08:27:38Z",
        "number":  68255,
        "author":  "CptAsgard",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-05-07T02:15:17Z",
        "body":  "### Description\r\n\r\nI want to use [NetworkChange.NetworkAddressChanged](https://docs.microsoft.com/en-us/dotnet/api/system.net.networkinformation.networkchange.networkaddresschanged?view=net-6.0) to detect when a VPN has been enabled or disabled. _ifconfig_ shows that a new tunnel interface is created when the VPN is turned on. However this does not result in the NetworkChange.NetworkAddressChanged being fired.\r\n\r\n[NetworkChange.NetworkAvailabilityChanged](https://docs.microsoft.com/en-us/dotnet/api/system.net.networkinformation.networkchange.networkavailabilitychanged?view=net-6.0) explicitly states that it does not respond to tunnel or loopback interfaces. I am wondering if this is the same for NetworkAddressChanged? And if so, the docs currently don\u0027t mention that. And we also need this behaviour to detect the aforementioned VPN network change.\r\n\r\n### Reproduction Steps\r\n\r\n- Use the example from the docs in [https://docs.microsoft.com/en-us/dotnet/api/system.net.networkinformation.networkchange.networkaddresschanged?view=net-6.0](https://docs.microsoft.com/en-us/dotnet/api/system.net.networkinformation.networkchange.networkaddresschanged?view=net-6.0)\r\n- Run on OSX with dotnet\r\n- Enable / disable VPN\r\n\r\n### Expected behavior\r\n\r\nAdding / removing a tunnel interface should result in the event being fired. OR the docs should be updated to reflect that this is not intended such as [NetworkChange.NetworkAvailabilityChanged](https://docs.microsoft.com/en-us/dotnet/api/system.net.networkinformation.networkchange.networkavailabilitychanged?view=net-6.0)\r\n\r\n### Actual behavior\r\n\r\nThe event does not trigger.\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\nVersion: .NET 6.0\r\nOS: MacOS Monterey 12.2.1\r\nArchitecture: ARM64\r\n\r\nI don\u0027t know if this is an OSX exclusive problem, or exclusive to this configuration.\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOfQHzcA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Bx87v",
                                           "createdAt":  "2022-04-20T08:27:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nI want to use [NetworkChange.NetworkAddressChanged](https://docs.microsoft.com/en-us/dotnet/api/system.net.networkinformation.networkchange.networkaddresschanged?view=net-6.0) to detect when a VPN has been enabled or disabled. _ifconfig_ shows that a new tunnel interface is created when the VPN is turned on. However this does not result in the NetworkChange.NetworkAddressChanged being fired.\r\n\r\n[NetworkChange.NetworkAvailabilityChanged](https://docs.microsoft.com/en-us/dotnet/api/system.net.networkinformation.networkchange.networkavailabilitychanged?view=net-6.0) explicitly states that it does not respond to tunnel or loopback interfaces. I am wondering if this is the same for NetworkAddressChanged? And if so, the docs currently don\u0027t mention that. And we also need this behaviour to detect the aforementioned VPN network change.\n\n### Reproduction Steps\n\n- Use the example from the docs in [https://docs.microsoft.com/en-us/dotnet/api/system.net.networkinformation.networkchange.networkaddresschanged?view=net-6.0](https://docs.microsoft.com/en-us/dotnet/api/system.net.networkinformation.networkchange.networkaddresschanged?view=net-6.0)\r\n- Run on OSX with dotnet\r\n- Enable / disable VPN\n\n### Expected behavior\n\nAdding a tunnel interface should result in the event being fired. OR the docs should be updated to reflect that this is not intended such as [NetworkChange.NetworkAvailabilityChanged](https://docs.microsoft.com/en-us/dotnet/api/system.net.networkinformation.networkchange.networkavailabilitychanged?view=net-6.0)\n\n### Actual behavior\n\nThe event does not trigger.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nVersion: .NET 6.0\r\nOS: MacOS Monterey 12.2.1\r\nArchitecture: ARM64\r\n\r\nI don\u0027t know if this is an OSX exclusive problem, or exclusive to this configuration.\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eCptAsgard\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-04-20T08:27:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5B4zCc",
                                           "createdAt":  "2022-04-21T15:53:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: We assume it impacts also Linux and it is not OSX specific.\r\nIt seems that current behavior is by design, so updating docs is the easiest thing. However, we should revisit if there is something simple we can do to support also tunnel interfaces (VPNs).",
                                           "updatedAt":  "2022-04-21T15:53:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Cb_yi",
                                           "createdAt":  "2022-05-02T08:54:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CptAsgard",
                                           "body":  "After looking into it further, I believe this actually is a bug, not a documentation issue. It\u0027s also specifically an OSX issue. \r\n\r\nIn [NetworkAddressChange.OSX.cs](https://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/libraries/System.Net.NetworkInformation/src/System/Net/NetworkInformation/NetworkAddressChange.OSX.cs#L148) you listen for changes to _kSCEntNetIPv4_ and _kSCEntNetIPv6_. However I believe you should also be listening to _kSCEntNetEthernet_ or _kSCEntNetInterface_  to detect the tunnel change.",
                                           "updatedAt":  "2022-05-02T08:54:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59AfNw",
                                           "createdAt":  "2024-05-07T02:15:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Brijwizards",
                                           "body":  "I am seeing the same issue on windows machine. Is there any solution to this issue ?",
                                           "updatedAt":  "2024-05-07T02:15:16Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "NetworkChange.NetworkAddressChanged Event does not fire on tunnel interface change on OSX",
        "labels":  [
                       "enhancement",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/68602",
        "createdAt":  "2022-04-27T15:51:17Z",
        "number":  68602,
        "author":  "MartinZikmund",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-21T00:04:32Z",
        "body":  "### Description\n\nI have Ubuntu 20.04 installed under WSL and trying to use the `NetworkChange` events to get notified when network connection changes. Unfortunately, the events never get triggered whatever changes to network I attempt (disconnecting/changing Wi-fi, airplane mode, etc).\n\n### Reproduction Steps\n\n1. Use the following code:\r\n\r\n``` c#\r\nNetworkChange.NetworkAvailabilityChanged += (s,e) =\u003e Debug.WriteLine(\"Changed\");\r\nNetworkChange.NetworkAddressChanged += (s,e) =\u003e Debug.WriteLine(\"Changed\");\r\n```\r\n\r\n2. Run under WSL on Ubuntu 20.04\r\n3. Notice the handler is never executed, even when connection changes.\n\n### Expected behavior\n\nShould behave same as on Windows.\n\n### Actual behavior\n\nNever notified the user.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvz3R_g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5COxIZ",
                                           "createdAt":  "2022-04-27T15:51:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nI have Ubuntu 20.04 installed under WSL and trying to use the `NetworkChange` events to get notified when network connection changes. Unfortunately, the events never get triggered whatever changes to network I attempt (disconnecting/changing Wi-fi, airplane mode, etc).\n\n### Reproduction Steps\n\n1. Use the following code:\r\n\r\n``` c#\r\nNetworkChange.NetworkAvailabilityChanged += (s,e) =\u003e Debug.WriteLine(\"Changed\");\r\nNetworkChange.NetworkAddressChanged += (s,e) =\u003e Debug.WriteLine(\"Changed\");\r\n```\r\n\r\n2. Run under WSL on Ubuntu 20.04\r\n3. Notice the handler is never executed, even when connection changes.\n\n### Expected behavior\n\nShould behave same as on Windows.\n\n### Actual behavior\n\nNever notified the user.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMartinZikmund\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-04-27T15:51:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5C6h-q",
                                           "createdAt":  "2022-05-10T16:49:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: We need to figure out if it fails on Linux in general, or only in WSL. And if in WSL, then which version (WSL 1 had its problems).\r\n\r\n@MartinZikmund are you in position to find out if it is WSL specific or not? That would help us.",
                                           "updatedAt":  "2022-05-10T16:49:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_PdH-",
                                           "createdAt":  "2025-08-21T00:04:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "I tested this in Docker Desktop for Mac by running a container that listens to netlink events in the underlying Linux kernel: \n\n```bash\ndocker run --rm -it --privileged --name netlink-test alpine sh -c \"apk add --no-cache iproute2 \u003e/dev/null \u0026\u0026 ip monitor link\"\n```\n\nThen I used `docker exec -it netlink-test ip link set eth0 down` followed by `docker exec -it netlink-test ip link set eth0 up` from a second terminal, the container in first terminal correctly reported the `DOWN` and `UP` events:\n\n```bash\n11: eth0@if34: \u003cBROADCAST,MULTICAST\u003e mtu 1500 qdisc noqueue state DOWN group default \n    link/ether 7e:68:e9:b7:96:8a brd ff:ff:ff:ff:ff:ff link-netnsid 0\n11: eth0@if34: \u003cNO-CARRIER,BROADCAST,MULTICAST,UP,LOWER_UP\u003e mtu 1500 qdisc noqueue state DOWN group default \n    link/ether 7e:68:e9:b7:96:8a brd ff:ff:ff:ff:ff:ff link-netnsid 0\n11: eth0@if34: \u003cBROADCAST,MULTICAST,UP,LOWER_UP\u003e mtu 1500 qdisc noqueue state UP group default \n    link/ether 7e:68:e9:b7:96:8a brd ff:ff:ff:ff:ff:ff link-netnsid 0\n```\n\nAfter that I built a docker container with the following Dockerfile and ran it with host network in third terminal:\n\n```dockerfile\nFROM ubuntu:25.04\n\nRUN apt-get update \u0026\u0026 apt-get install -y dotnet-sdk-9.0 \\\n    \u0026\u0026 rm -rf /var/lib/apt/lists/*\n\nWORKDIR /app\n\nRUN dotnet new console -n NetworkChangeTest\n\nRUN cat \u003c\u003c \u0027EOF\u0027 \u003e NetworkChangeTest/Program.cs\nusing System;\nusing System.Net.NetworkInformation;\nusing System.Threading;\n\nConsole.WriteLine(\"Starting NetworkChange test...\");\n\nNetworkChange.NetworkAvailabilityChanged += (sender, e) =\u003e\n{\n    Console.WriteLine($\"NetworkAvailabilityChanged: Available={e.IsAvailable}\");\n};\n\nNetworkChange.NetworkAddressChanged += (sender, e) =\u003e\n{\n    Console.WriteLine(\"NetworkAddressChanged event fired\");\n};\n\nConsole.WriteLine(\"Subscribed to network events. Press Ctrl+C to exit.\");\nnew ManualResetEvent(false).WaitOne();\nEOF\n\nRUN dotnet build -c Release NetworkChangeTest\n\nCMD [\"dotnet\", \"NetworkChangeTest/bin/Release/net9.0/NetworkChangeTest.dll\"]\n```\n\n```sh\n# terminal 3\n$ docker build -t networkchange-test .\n$ docker run --rm --network=host networkchange-test\n```\n\nFinally, in terminal 2 executed `docker exec -it netlink-test ip link set eth0 down` and `up`; in both cases, the app in terminal 3 printed `NetworkAvailabilityChanged: Available=True`..\n\nTwo issues to note:\n\n1. **.NET app behavior** – The app always prints `NetworkAvailabilityChanged: Available=True` but never `False`.\n\n2. **Mac host Wi-Fi changes** – Neither `ip monitor link` inside the container nor the .NET app running in the container responds to the macOS host’s Wi-Fi connect/disconnect events.  WSL is probably on the same plan.\n\n**Explanation:** Docker Desktop for Mac runs containers inside a LinuxKit VM. The container sees only the virtualized Linux networking inside that VM, so network events on the macOS host (like Wi-Fi changes) do not propagate into the container.\n\nOn linux box (baremetal), 1. is not an issue (we see True/False for wifi connect/disconnect) and 2. isn\u0027t applicable.",
                                           "updatedAt":  "2025-08-21T00:04:32Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "`NetworkChange` events are not working on WSL Ubuntu 20.04",
        "labels":  [
                       "bug",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/68619",
        "createdAt":  "2022-04-27T20:27:59Z",
        "number":  68619,
        "author":  "antonfirsov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCwV2TA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "CooperMidnight",
                                            "createdAt":  "2023-05-27T19:06:44Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-06-12T22:42:27Z",
        "body":  "Forking https://github.com/dotnet/runtime/pull/68591#discussion_r859800396 to a new issue.\r\n\r\n`IPAddress.Address` is the most efficient way to get the IPv4 value, however it doesn\u0027t make sense and throws for IPv6, so we made it obsolete.\r\n\r\nWe should consider unobsoleting it or creating a new, equivalent property with a name that describes the purpose and the limitations better, for example:\r\n\r\n```C#\r\npublic class IPAddress\r\n{\r\n    public long IPv4Value { get; }\r\n}\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgPxEcA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5CP2B-",
                                           "createdAt":  "2022-04-27T20:28:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nForking https://github.com/dotnet/runtime/pull/68591#discussion_r859800396 to a new issue.\r\n\r\n`IPAddress.Address` is the most efficient way to get the IPv4 value, however it doesn\u0027t make sense and throws for IPv6, so we made it obsolete.\r\n\r\nWe should consider unobsoleting it or creating a new, equivalent property with a name that describes the purpose and the limitations better, for example:\r\n\r\n```C#\r\npublic class IPAddress\r\n{\r\n    public long IPv4Value { get; }\r\n}\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eantonfirsov\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-04-27T20:28:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5C6inO",
                                           "createdAt":  "2022-05-10T16:52:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: It makes sense -- we should document how it should be used (with IPv4 check).\r\nWe should double check with API review team.\r\nWe could add analyzer (to check there is IPv4 check) if we think there is problem.",
                                           "updatedAt":  "2022-05-10T16:52:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cyrZs",
                                           "createdAt":  "2023-05-22T08:38:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "Would it make sense to have something like \r\n```c#\r\npublic class IPAddress\r\n{\r\n  int128 GetAddress();\r\n}\r\n```\r\n\r\nWhile this may be slightly less efficient than `long` it would preserve simplicity of the old interface and it would also work consistently for IPv6. \r\ncc: @stephentoub as he made the original comment. \r\n",
                                           "updatedAt":  "2023-05-22T08:38:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5czw7k",
                                           "createdAt":  "2023-05-22T11:46:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "antonfirsov",
                                           "body":  "@wfurt that is basically #83971, which we decided to close, also implying we would commit to solve #84776 as a prerequisite for such an API to be implemented efficiently. (Otherwise I don\u0027t see why would it be better than `TryWriteBytes`)",
                                           "updatedAt":  "2023-05-22T11:48:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5c0jSu",
                                           "createdAt":  "2023-05-22T14:03:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "Thanks for the pointer @antonfirsov. That one slipped from my mind. I was fiddling more with `IPAddress` and `IPEndPoint` and it would be _nice_ to have the parity. I end up using the `TryWriteBytes` and it _is_ sufficient but not as slick. Assignments and comparisons all come more complicate not even talking about using `Hash.Combine`.\r\nI simply used rule to disable the obsolete warning for IPv4 e.g. there was no real functional impact for me - just inconvenience. \r\n\r\nPerhaps we should have round of talk with @stephentoub and rest for the team.  \r\n",
                                           "updatedAt":  "2023-05-22T14:03:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6A_ERw",
                                           "createdAt":  "2024-06-12T22:42:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "triage: not critical for 9.0, moving to future",
                                           "updatedAt":  "2024-06-12T22:42:24Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Unobsolete IPAddress.Address, or create a new equivalent property",
        "labels":  [
                       "api-suggestion",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/70083",
        "createdAt":  "2022-06-01T07:59:42Z",
        "number":  70083,
        "author":  "KarlssonBernoulli",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCfs9XQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jogibear9988",
                                            "createdAt":  "2022-06-01T08:09:14Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2022-06-07T16:40:57Z",
        "body":  "## Background and Motivation\r\n\r\nhttps://github.com/Microsoft/referencesource/blob/master/System/net/System/Net/webproxy.cs#L239\r\nThe setter removes the already set ```_Credentials``` to null.\r\n```c# \r\n_Credentials = value ? CredentialCache.DefaultCredentials : null;\r\n```\r\n\r\nIf you explicitly set UseDefaultCredentials to ```false``` after setting the credentials you overwrite the credentials again. This results in a HTTP code 407. Users might wonder why and need to investigate\r\n\r\n\r\n\r\n## Proposed API\r\n\r\n```_Credentials``` should not be set to null in case of setting ``` UseDefaultCredentials = false ``` instead the credentials should be used if available.\r\n\r\n#\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORHsGcA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5EKsZN",
                                           "createdAt":  "2022-06-01T14:03:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-06-01T14:03:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ELc9p",
                                           "createdAt":  "2022-06-01T16:35:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n## Background and Motivation\r\n\r\nhttps://github.com/Microsoft/referencesource/blob/master/System/net/System/Net/webproxy.cs#L239\r\nThe setter removes the already set ```_Credentials``` to null.\r\n```c# \r\n_Credentials = value ? CredentialCache.DefaultCredentials : null;\r\n```\r\n\r\nIf you explicitly set UseDefaultCredentials to ```false``` after setting the credentials you overwrite the credentials again. This results in a HTTP code 407. Users might wonder why and need to investigate\r\n\r\n\r\n\r\n## Proposed API\r\n\r\n```_Credentials``` should not be set to null in case of setting ``` UseDefaultCredentials = false ``` instead the credentials should be used if available.\r\n\r\n#\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eKarlssonBernoulli\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Net`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-06-01T16:35:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EewZw",
                                           "createdAt":  "2022-06-07T16:40:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: Similar to #23779 (same pattern) - we should take a look if it was on purpose, or just inherited from .NET Framework code base.\r\nIf it is inherited, we would take a contribution. Should be fairly straightforward. Not critical for 7.0.",
                                           "updatedAt":  "2022-06-07T16:40:48Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "WebProxy - UseDefaultCredentials - Set to false overwrites credentials",
        "labels":  [
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/70978",
        "createdAt":  "2022-06-20T08:09:05Z",
        "number":  70978,
        "author":  "ManickaP",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC4mtkg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rzikm",
                                            "createdAt":  "2022-06-20T08:11:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "campersau",
                                            "createdAt":  "2023-01-27T14:25:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "halter73",
                                            "createdAt":  "2023-02-07T02:24:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2023-02-24T13:41:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-06-13T13:46:05Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2024-06-17T08:51:33Z",
        "body":  "We hit this in https://github.com/dotnet/runtime/pull/57250 and right know hitting here:\r\nhttps://github.com/dotnet/runtime/blob/38794de5f2e3198b28df0915e82e33ab3d91f2ee/src/libraries/System.Net.Quic/src/System/Net/Quic/Implementations/MsQuic/MsQuicListener.cs#L191\r\n\r\nCustomer hitting: https://github.com/dotnet/runtime/issues/38040\r\n\r\nHowever, this is highly likely breaking change (anyone expecting `==` to compare references), so at least discuss this.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgUII-A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5FJfDb",
                                           "createdAt":  "2022-06-20T08:09:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWe hit this in https://github.com/dotnet/runtime/pull/57250 and right know hitting here:\r\nhttps://github.com/dotnet/runtime/blob/38794de5f2e3198b28df0915e82e33ab3d91f2ee/src/libraries/System.Net.Quic/src/System/Net/Quic/Implementations/MsQuic/MsQuicListener.cs#L191\r\n\r\nCustomer hitting: https://github.com/dotnet/runtime/issues/38040\r\n\r\nHowever, this is highly likely breaking change (anyone expecting `==` to compare references), so at least discuss this.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eManickaP\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-System.Net.Quic`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-06-20T08:09:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FJfHA",
                                           "createdAt":  "2022-06-20T08:09:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWe hit this in https://github.com/dotnet/runtime/pull/57250 and right know hitting here:\r\nhttps://github.com/dotnet/runtime/blob/38794de5f2e3198b28df0915e82e33ab3d91f2ee/src/libraries/System.Net.Quic/src/System/Net/Quic/Implementations/MsQuic/MsQuicListener.cs#L191\r\n\r\nCustomer hitting: https://github.com/dotnet/runtime/issues/38040\r\n\r\nHowever, this is highly likely breaking change (anyone expecting `==` to compare references), so at least discuss this.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eManickaP\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-06-20T08:09:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FJmLI",
                                           "createdAt":  "2022-06-20T08:35:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JamesNK",
                                           "body":  "Alternatively, an analyzer that warns about: `==` + `IPAddress.IPAny` or `IPAddress.IPv6Any` or any of the other constants on this type.",
                                           "updatedAt":  "2022-06-21T03:34:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FJxz9",
                                           "createdAt":  "2022-06-20T09:17:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC2s8ug==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2023-02-24T13:40:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "skyoxZ",
                                           "body":  "I\u0027m curious why `IPAddress.Equals(IPAddress other)` is internal. ",
                                           "updatedAt":  "2022-06-20T09:17:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FQsX1",
                                           "createdAt":  "2022-06-21T16:46:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: We should take it to make devs lives better. Especially given that even we ourselves made the mistake at least 2x already.\r\nIt will be source breaking change (we need to document it) -- let\u0027s try to do it early in 8.0 (a bit too risky in 7.0).",
                                           "updatedAt":  "2022-06-21T16:46:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FghoA",
                                           "createdAt":  "2022-06-25T00:37:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@bartonjs  what do the design guidelines have to say about the behavior of == differing from the behavior of .Equals()?",
                                           "updatedAt":  "2022-06-25T00:37:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FmTU1",
                                           "createdAt":  "2022-06-27T17:43:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODljFdQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-06-13T13:47:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "bartonjs",
                                           "body":  "The guideline is\r\n\r\n\u003e DO ensure that Object.Equals and the equality operators have exactly the same semantics and similar performance characteristics.\r\n\r\n(Framework Design Guidelines, 3rd edition, section 8.13 (Equality Operators))",
                                           "updatedAt":  "2022-06-27T17:43:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FmZY1",
                                           "createdAt":  "2022-06-27T18:03:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@stephentoub have we ever experimented with an analyzer that detects when `==` is overloaded and `Equals(object?)` is not overridden, or vice versa?\r\n\r\nWe probably have many cases of this, even in public classes. Random example: MailAddress.",
                                           "updatedAt":  "2022-06-27T18:03:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Fmgfv",
                                           "createdAt":  "2022-06-27T18:26:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e have we ever experimented with an analyzer that detects when == is overloaded and Equals(object?) is not overridden, or vice versa?\r\n\r\nThere\u0027s:\r\nhttps://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1815\r\nhttps://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/CA2224\r\nhttps://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/CA2231\r\n\r\nWe\u0027ve not enabled them because they\u0027re really noisy given our current state of things.",
                                           "updatedAt":  "2022-06-27T18:26:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Fm04Q",
                                           "createdAt":  "2022-06-27T19:43:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "I wonder whether it would make sense to enable and baseline warnings (if that\u0027s possible) so we don\u0027t add more.",
                                           "updatedAt":  "2022-06-27T19:43:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ec6Be",
                                           "createdAt":  "2023-06-09T14:07:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Sadly, we won\u0027t make it in 8.0 due to circumstances. Moving to Future for now.",
                                           "updatedAt":  "2023-06-09T14:07:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ec8B0",
                                           "createdAt":  "2023-06-09T14:11:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "should we even drag it forward @karelz? I feel that the risk is high and the workaround to disable  the rule is simple for anybody who needs the perf. ",
                                           "updatedAt":  "2023-06-09T14:11:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5eo8iE",
                                           "createdAt":  "2023-06-12T17:45:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@wfurt we saw some value - https://github.com/dotnet/runtime/issues/70978#issuecomment-1162003957. It is IMO worth a discussion. Not now though.",
                                           "updatedAt":  "2023-06-12T17:45:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6A_EUx",
                                           "createdAt":  "2024-06-12T22:42:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODljF0A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-06-13T13:48:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "wfurt",
                                           "body":  "triage: not critical for 9.0, moving to future",
                                           "updatedAt":  "2024-06-12T22:42:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6BFneP",
                                           "createdAt":  "2024-06-13T13:49:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "\u003e triage: not critical for 9.0, moving to future\r\n\r\nWill this _ever_ be \"critical\" for any .NET release though? This is the wrong way to approach/classify these enhancements IMHO.",
                                           "updatedAt":  "2024-06-13T13:49:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6BFzJV",
                                           "createdAt":  "2024-06-13T14:06:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "skyoxZ",
                                           "body":  "\u003e \u003e triage: not critical for 9.0, moving to future\r\n\u003e \r\n\u003e Will this _ever_ be \"critical\" for any .NET release though? This is the wrong way to approach/classify these enhancements IMHO.\r\n\r\nIt\u0027s not only an enhancement but also a breaking change, so I guess it won\u0027t be fixed unless enough reasons collected.",
                                           "updatedAt":  "2024-06-13T14:06:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6BJQsF",
                                           "createdAt":  "2024-06-13T20:15:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "\u003e \u003e \u003e triage: not critical for 9.0, moving to future\r\n\u003e \u003e \r\n\u003e \u003e \r\n\u003e \u003e Will this _ever_ be \"critical\" for any .NET release though? This is the wrong way to approach/classify these enhancements IMHO.\r\n\u003e \r\n\u003e It\u0027s not only an enhancement but also a breaking change, so I guess it won\u0027t be fixed unless enough reasons collected.\r\n\r\nright. While it feels useful I\u0027m not sure it is worth of the troubles. I\u0027m not sure if it os worth to keep it open @manickap ",
                                           "updatedAt":  "2024-06-13T20:15:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6BKpcQ",
                                           "createdAt":  "2024-06-14T01:34:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JamesNK",
                                           "body":  "An analyzer wouldn\u0027t be breaking. e.g. look for code that combines `==` or `!=` with `IPAddress` on both sides of the operator. If you want to be more specific, require `IPAddress.IPv6Any` or `IPAddress.Any` on one side of the comparison. The analyzer would suggest using `Equals` instead.\r\n\r\nIt\u0027s caused at least two bugs in dotnet/runtime, one customer reported bug. It\u0027s not _critical_, but it can be improved.",
                                           "updatedAt":  "2024-06-14T01:34:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6BL7LZ",
                                           "createdAt":  "2024-06-14T07:15:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODlse7Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "samsosa",
                                                                               "createdAt":  "2024-06-14T09:40:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-06-14T13:20:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MihaZupan",
                                                                               "createdAt":  "2024-06-14T14:05:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "I think we should do it, implement the equality. Quick look at grepp.app: https://grep.app/search?q=%3D%3D%20IPAddress%5C.\u0026regexp=true\u0026filter[lang][0]=C%23 and the few random places I checked look like they at least wouldn\u0027t logically break with the change. \r\nHonestly, let\u0027s get it over with and get it done now. If we have someone really screaming, we can always introduce a switch to bring back the old behavior, but I doubt that anyone will need it.\r\n\r\n@dotnet/ncl thoughts?",
                                           "updatedAt":  "2024-06-14T07:15:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6BL-Zm",
                                           "createdAt":  "2024-06-14T07:23:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODlpt4g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ManickaP",
                                                                               "createdAt":  "2024-06-14T07:39:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "rzikm",
                                           "body":  "Fine with me.\r\n\r\nThe change seems simple enough, I think this should be also easy for external contributors to pick up if we greenlight it.",
                                           "updatedAt":  "2024-06-14T07:23:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6BOIf2",
                                           "createdAt":  "2024-06-14T12:50:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "antonfirsov",
                                           "body":  "I\u0027m rather in the analyzer camp, but not a strong opinion. However, if we do the breaking change, it\u0027s better in 9 than in an LTS.",
                                           "updatedAt":  "2024-06-14T12:50:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6BQgj4",
                                           "createdAt":  "2024-06-14T18:56:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "I\u0027m fine with proceeding if you want to champion it @ManickaP. From triage prospective I still feel it can stay in future e.g. it is nice to have but it would not  block 9.0 release. ",
                                           "updatedAt":  "2024-06-14T18:56:12Z"
                                       }
                                   ],
                         "totalCount":  22
                     },
        "title":  "Consider overloadding `==` and `!=` for `IPAddress`",
        "labels":  [
                       "enhancement",
                       "area-System.Net",
                       "breaking-change",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/71364",
        "createdAt":  "2022-06-28T03:25:44Z",
        "number":  71364,
        "author":  "caoyudeng",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-06-30T16:24:51Z",
        "body":  "### Description\r\n\r\nLinux localhost.localdomain 4.18.0-193.el8.x86_64 #1 SMP Fri May 8 10:59:10 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux\r\n.Net 5.0/6.0\r\nHttpListener.GetContext() Unhandled exception. System.ObjectDisposedException: Cannot access a disposed object.\r\n\r\n### Reproduction Steps\r\n1. demo\r\n```c#\r\nusing System;\r\nusing System.Net;\r\n\r\nnamespace TestHttp\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            HttpListener oListener = new HttpListener();\r\n            oListener.Prefixes.Add(\"http://*:9527/\");\r\n            oListener.Start();\r\n            Console.WriteLine(\"Listening...\");\r\n\r\n            while (true)\r\n            {\r\n                HttpListenerContext oContext = default;\r\n                try\r\n                {\r\n                    oContext = oListener.GetContext();\r\n                }\r\n                catch (Exception e)\r\n                {\r\n                    Console.WriteLine($\"{e.Message}\");\r\n                }\r\n\r\n                var oRequest = oContext.Request;\r\n                var oResponse = oContext.Response;\r\n\r\n                string responseString = \"\u003cHTML\u003e\u003cBODY\u003e Hello world!\u003c/BODY\u003e\u003c/HTML\u003e\";\r\n                byte[] buffer = System.Text.Encoding.UTF8.GetBytes(responseString);\r\n                oResponse.ContentLength64 = buffer.Length;\r\n                System.IO.Stream output = oResponse.OutputStream;\r\n                output.Write(buffer, 0, buffer.Length);\r\n                output.Close();\r\n            }\r\n\r\n            oListener.Stop();\r\n        }\r\n    }\r\n}\r\n```\r\n2. Postman: Send extremely long Get requests(300+kb)\r\n\r\n### Expected behavior\r\n\r\nno exception.\r\n\r\n### Actual behavior\r\n- linux .NET 5\r\n```\r\nUnhandled exception. System.ObjectDisposedException: Cannot access a disposed object.\r\nObject name: \u0027System.Net.HttpListenerResponse\u0027.\r\n   at System.Net.HttpListenerResponse.CheckDisposed()\r\n   at System.Net.HttpListenerResponse.\u003c\u003ec.\u003cClose\u003eb__74_0(IAsyncResult iar)\r\n   at System.Net.LazyAsyncResult.Complete(IntPtr userToken)\r\n   at System.Net.ContextAwareResult.CompleteCallback()\r\n   at System.Net.ContextAwareResult.\u003c\u003ec.\u003cComplete\u003eb__15_0(Object s)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Net.ContextAwareResult.Complete(IntPtr userToken)\r\n   at System.Net.LazyAsyncResult.ProtectedInvokeCallback(Object result, IntPtr userToken)\r\n   at System.Net.Sockets.BaseOverlappedAsyncResult.CompletionCallback(Int32 numBytes, SocketError errorCode)\r\n   at System.Net.Sockets.OverlappedAsyncResult.CompletionCallback(Int32 numBytes, Byte[] socketAddress, Int32 socketAddressSize, SocketFlags receivedFlags, SocketError errorCode)\r\n   at System.Net.Sockets.SocketAsyncContext.BufferMemorySendOperation.InvokeCallback(Boolean allowPooling)\r\n   at System.Net.Sockets.SocketAsyncContext.AsyncOperation.\u003c\u003ec.\u003cTryCancel\u003eb__18_0(Object o)\r\n   at System.Threading.QueueUserWorkItemCallbackDefaultContext.Execute()\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()\r\n```\r\n\r\n- linux .NET 6\r\n```\r\nObject name: \u0027System.Net.HttpListenerResponse\u0027.\r\n   at System.Net.HttpListenerResponse.CheckDisposed()\r\n   at System.Net.HttpListenerResponse.\u003c\u003ec.\u003cClose\u003eb__74_0(IAsyncResult iar)\r\n   at System.Threading.Tasks.TaskToApm.TaskAsyncResult.InvokeCallback()\r\n   at System.Threading.Tasks.AwaitTaskContinuation.\u003c\u003ec.\u003c.cctor\u003eb__17_0(Object state)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunCallback(ContextCallback callback, Object state, Task\u0026 currentTask)\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Task.\u003c\u003ec.\u003cThrowAsync\u003eb__127_1(Object state)\r\n   at System.Threading.QueueUserWorkItemCallbackDefaultContext.Execute()\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n   at System.Threading.PortableThreadPool.WorkerThread.WorkerThreadStart()\r\n   at System.Threading.Thread.StartCallback()\r\nUnhandled exception. System.ObjectDisposedException: Cannot access a disposed object.\r\nObject name: \u0027System.Net.HttpListenerResponse\u0027.\r\n   at System.Net.HttpListenerResponse.CheckDisposed()\r\n   at System.Net.HttpListenerResponse.\u003c\u003ec.\u003cClose\u003eb__74_0(IAsyncResult iar)\r\n   at System.Threading.Tasks.TaskToApm.TaskAsyncResult.InvokeCallback()\r\n   at System.Threading.Tasks.AwaitTaskContinuation.\u003c\u003ec.\u003c.cctor\u003eb__17_0(Object state)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunCallback(ContextCallback callback, Object state, Task\u0026 currentTask)\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Task.\u003c\u003ec.\u003cThrowAsync\u003eb__127_1(Object state)\r\n   at System.Threading.QueueUserWorkItemCallbackDefaultContext.Execute()\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n   at System.Threading.PortableThreadPool.WorkerThread.WorkerThreadStart()\r\n   at System.Threading.Thread.StartCallback() \r\n```\r\n\r\n====================================================================\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORdKImw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5FoO1q",
                                           "createdAt":  "2022-06-28T03:25:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nLinux localhost.localdomain 4.18.0-193.el8.x86_64 #1 SMP Fri May 8 10:59:10 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux\r\nHttpListener.GetContext() Unhandled exception. System.ObjectDisposedException: Cannot access a disposed object.\n\n### Reproduction Steps\n\nSend extremely long Get requests\n\n### Expected behavior\n\n==============================================================\n\n### Actual behavior\n\nUnhandled exception. System.ObjectDisposedException: Cannot access a disposed object.\r\nObject name: \u0027System.Net.HttpListenerResponse\u0027.\r\n   at System.Net.HttpListenerResponse.CheckDisposed()\r\n   at System.Net.HttpListenerResponse.\u003c\u003ec.\u003cClose\u003eb__74_0(IAsyncResult iar)\r\n   at System.Net.LazyAsyncResult.Complete(IntPtr userToken)\r\n   at System.Net.ContextAwareResult.CompleteCallback()\r\n   at System.Net.ContextAwareResult.\u003c\u003ec.\u003cComplete\u003eb__15_0(Object s)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Net.ContextAwareResult.Complete(IntPtr userToken)\r\n   at System.Net.LazyAsyncResult.ProtectedInvokeCallback(Object result, IntPtr userToken)\r\n   at System.Net.Sockets.BaseOverlappedAsyncResult.CompletionCallback(Int32 numBytes, SocketError errorCode)\r\n   at System.Net.Sockets.OverlappedAsyncResult.CompletionCallback(Int32 numBytes, Byte[] socketAddress, Int32 socketAddressSize, SocketFlags receivedFlags, SocketError errorCode)\r\n   at System.Net.Sockets.SocketAsyncContext.BufferMemorySendOperation.InvokeCallback(Boolean allowPooling)\r\n   at System.Net.Sockets.SocketAsyncContext.AsyncOperation.\u003c\u003ec.\u003cTryCancel\u003eb__18_0(Object o)\r\n   at System.Threading.QueueUserWorkItemCallbackDefaultContext.Execute()\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()\r\n\r\n====================================================================\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ecaoyudeng\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-06-28T03:25:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FoXPw",
                                           "createdAt":  "2022-06-28T04:33:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "How long was the get request ?",
                                           "updatedAt":  "2022-06-28T04:33:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Fpbi4",
                                           "createdAt":  "2022-06-28T09:42:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "caoyudeng",
                                           "body":  "300+kb",
                                           "updatedAt":  "2022-06-28T09:42:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FsY4b",
                                           "createdAt":  "2022-06-28T21:30:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Looks like this is .NET 5? That is out of support and not getting security fixes. Could you upgrade to .NET 6 and try again?",
                                           "updatedAt":  "2022-06-28T21:30:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FtJ6L",
                                           "createdAt":  "2022-06-29T02:27:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "caoyudeng",
                                           "body":  "linux .net 5: Unhandled exception. System.ObjectDisposedException: Cannot access a disposed object.\r\nlinux .net 6:  Unhandled exception. System.ObjectDisposedException: Cannot access a disposed object.\r\nwin .net 5: no exception. \r\n",
                                           "updatedAt":  "2022-06-29T02:27:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FtPG2",
                                           "createdAt":  "2022-06-29T03:10:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "caoyudeng",
                                           "body":  "[update comment](https://github.com/dotnet/runtime/issues/71364#issue-1286713229)",
                                           "updatedAt":  "2022-06-29T03:10:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FtVEX",
                                           "createdAt":  "2022-06-29T04:06:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Just curious as I\u0027m not a networking person, what is a huge GET request -- a lot of headers? an enormously long URL? huge cookies? Wondering whether I could do it with curl.",
                                           "updatedAt":  "2022-06-29T04:09:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FtVjZ",
                                           "createdAt":  "2022-06-29T04:11:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "caoyudeng",
                                           "body":  "curl --location --request GET \u0027http://127.0.0.1:9527?content=\u003clong url 300+kb\u003e\u0027",
                                           "updatedAt":  "2022-06-29T04:11:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FtWLU",
                                           "createdAt":  "2022-06-29T04:16:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Yeah, that gives argument too long so I guess curl doesn\u0027t work for vast URL\u0027s.",
                                           "updatedAt":  "2022-06-29T04:16:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5F0oib",
                                           "createdAt":  "2022-06-30T16:24:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: HttpListener is not in active development. We would likely take a contribution for a fix though.\r\nThis looks like a corner case scenario.",
                                           "updatedAt":  "2022-06-30T16:24:44Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "HttpListenerResponse: Unhandled exception. System.ObjectDisposedException",
        "labels":  [
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/72632",
        "createdAt":  "2022-07-21T18:59:52Z",
        "number":  72632,
        "author":  "MihaZupan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODAkX_A==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julian94",
                                            "createdAt":  "2022-07-21T19:10:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kemsky",
                                            "createdAt":  "2022-09-27T12:59:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AntiGuideAkquinet",
                                            "createdAt":  "2022-10-18T07:31:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NewFuture",
                                            "createdAt":  "2022-11-17T09:25:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "slch",
                                            "createdAt":  "2025-01-10T10:41:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "magicxor",
                                            "createdAt":  "2025-03-27T14:48:13Z"
                                        }
                                    ],
                          "totalCount":  6
                      },
        "updatedAt":  "2024-06-18T12:18:54Z",
        "body":  "`IsWellFormedOriginalString` (and therefore also `IsWellFormedUriString`) will report false negatives in the following cases:\r\n- Case 1\r\n    - Occurs if the Uri contains both\r\n        * Anything that triggers internal re-creation of the string ([Unicode or escaped unreserved chars](https://github.com/dotnet/runtime/blob/cf0f14cd43708df7a28eb1e4309915ba51e418dd/src/libraries/System.Private.Uri/src/System/UriExt.cs#L220))\r\n        * An escaped character from the [``\" \u003c\u003e`^{|}``](https://github.com/dotnet/runtime/blob/5b8d9eb3876a733963ebddbb71fc4449695f59c9/src/libraries/System.Private.Uri/src/System/Uri.cs#L4362-L4379) set\r\n    - This happens because [`EscapeUnescapeIri`](https://github.com/dotnet/runtime/blob/5b8d9eb3876a733963ebddbb71fc4449695f59c9/src/libraries/System.Private.Uri/src/System/IriHelper.cs#L108) removes the escaping from these characters, but [`CheckCanonical`](https://github.com/dotnet/runtime/blob/5b8d9eb3876a733963ebddbb71fc4449695f59c9/src/libraries/System.Private.Uri/src/System/Uri.cs#L4362-L4379) later reports that they should have been escaped (which they were, but we unescaped them)\r\n    - Example: `http://a/%41%22` (`%41` is `A` (unreserved) and `%22` is `\"`)\r\n- Case 2\r\n    - Occurs if the Uri contains both\r\n      * An (escaped or not) non-ASCII character (except those outside the [IRI range](https://github.com/dotnet/runtime/blob/0a7d601180256e1edd83631c0a42fd9128929a22/src/libraries/System.Private.Uri/src/System/IriHelper.cs#L51-L66))\r\n      * An escaped character from the `[0, 1F]` range, the `;/?:@\u0026=+$,#[]!\u0027()*%\\` set ([reserved + `%`, `\\`](https://github.com/dotnet/runtime/blob/cf0f14cd43708df7a28eb1e4309915ba51e418dd/src/libraries/System.Private.Uri/src/System/UriHelper.cs#L501-L502)), the [``\" \u003c\u003e`^``](https://github.com/dotnet/runtime/blob/5b8d9eb3876a733963ebddbb71fc4449695f59c9/src/libraries/System.Private.Uri/src/System/Uri.cs#L4362-L4363) set or outside the IRI range\r\n    - This happens because `EscapeUnescapeIri` removes some escaping and `CheckCanonical` then sees a mismatch of escaped, unescaped and non-ASCII characters\r\n    - Example: `http://a/ű%20` (`ü` is non-ASCII and `%20` is ` `)\r\n\r\nCase 1. occurred in #70929.\r\nCase 2. occurred in #21626, #34031, #37634, #64249, [VS Feedback](https://developercommunity.visualstudio.com/t/UriIsWellFormedUriString/1582272).\r\n\r\nMy suggestion as a workaround is to not use `IsWellFormedOriginalString` at all. Odds are that in most cases you don\u0027t care about the sort of validation that it does anyway.\r\nConsider using something like this instead:\r\n```c#\r\nstatic bool IsValidHttpUri(string uriString, out Uri uri) =\u003e\r\n    Uri.TryCreate(uriString, UriKind.Absolute, out uri) \u0026\u0026\r\n    (uri.Scheme == Uri.UriSchemeHttp || uri.Scheme == Uri.UriSchemeHttps);\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOXnOcDw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5HCeZu",
                                           "createdAt":  "2022-07-21T19:00:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n`IsWellFormedOriginalString` will report false negatives in the following cases:\r\n- Case 1\r\n    - Occurs if the Uri contains both\r\n        * Anything that triggers internal re-creation of the string ([Unicode or escaped unreserved chars](https://github.com/dotnet/runtime/blob/cf0f14cd43708df7a28eb1e4309915ba51e418dd/src/libraries/System.Private.Uri/src/System/UriExt.cs#L220))\r\n        * An escaped character from the ``\" \u003c\u003e`^{|}`` set\r\n    - This happens because [`EscapeUnescapeIri`](https://github.com/dotnet/runtime/blob/5b8d9eb3876a733963ebddbb71fc4449695f59c9/src/libraries/System.Private.Uri/src/System/IriHelper.cs#L108) removes the escaping from these characters, but [`CheckCanonical`](https://github.com/dotnet/runtime/blob/5b8d9eb3876a733963ebddbb71fc4449695f59c9/src/libraries/System.Private.Uri/src/System/Uri.cs#L4362-L4379) later reports that they should have been escaped (which they were, but we unescaped them)\r\n    - Example: `http://a/%41%22` (`%41` is `A` (unreserved) and `%22` is `\"`)\r\n- Case 2\r\n    - Occurs if the Uri contains both\r\n      * A (not escaped) non-ASCII character (except those outside the [IRI range](https://github.com/dotnet/runtime/blob/0a7d601180256e1edd83631c0a42fd9128929a22/src/libraries/System.Private.Uri/src/System/IriHelper.cs#L51-L66))\r\n      * An escaped character from the `[0, 1F]` range, the `;/?:@\u0026=+$,#[]!\u0027()*%\\` set ([reserved + `%`, `\\`](https://github.com/dotnet/runtime/blob/cf0f14cd43708df7a28eb1e4309915ba51e418dd/src/libraries/System.Private.Uri/src/System/UriHelper.cs#L501-L502)), the ``\" \u003c\u003e`^`` set or outside the IRI range\r\n    - This happens because `EscapeUnescapeIri` removes some escaping and `CheckCanonical` then sees a mismatch of escaped, unescaped and non-ASCII characters\r\n    - Example: `http://a/ű%20` (`ü` is non-ASCII and `%20` is ` `)\r\n\r\nCase 1. occurred in #70929.\r\nCase 2. occurred in #21626, #34031, #37634, #64249.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMihaZupan\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003eMihaZupan\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`bug`, `area-System.Net`, `tenet-compatibility`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-07-21T19:00:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HFvST",
                                           "createdAt":  "2022-07-22T15:25:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage:\r\n- The method should NOT be called at all in 99.9% cases. `Uri.TryCreate` will be sufficient for all of these 99.9% cases.\r\n    - We have hard time to imagine almost ANY scenario where `IsWellFormedOriginalString` is needed to be called by the user explicitly. We believe most of the cases use it just because it looks like a good thing to call.\r\n    - One of the few values of `IsWellFormedOriginalString` is the fact it rejects implicit file path (e.g. `c:\\\\mydirectory`)\r\n    - The other potential value might be checking for RFCs (as documented) and then pass the original (readable-form string) to database or other applications.\r\n- Given there are valid use cases (though sparse), we should not Obsolete the API\r\n    - It would be nice to learn from the 25-something upvotes on various duplicates - why they tried to use the API and if they fall int the 99.9% category above - @MihaZupan\r\n    - Overall, we believe that the real IMPACT of having this method doing the right thing is MEDIUM as there are few users who really need it and the workaround (`Uri.TryCreate`) is not sufficient for them. However, users who use it for no good reason may be getting wrong answers sometimes, causing them pain and wasted time in investigations.\r\n- COMPATABILITY: .NET Framework behaves at least slightly better in some cases than .NET Core. So, it may be a .NET Framework -\u003e .NET Core migration complication for customers.\r\n    - It is possible that .NET Framework does not behave 100% correctly either. In .NET Core we should **shoot for aligning with RFCs as described in documentation** of this API.\r\n    - RISK (compat break): SMALL - if the method does what it describes it should, it will be much better than the randomly broken/unpredictable behavior now. We have hard time imagine that anyone could depend on the current state.\r\n- RISK (of implementation): MEDIUM ... fixing the method means touching core Uri parsing code, which is always risky (based on our past experience).\r\n- COST: approx. 1 week (the implementation will be a bit tricky).\r\n\r\nGiven all the above, it is not worth it to fix it this late of 7.0 release (non-trivial risk, non-trivial cost, medium-benefit).\r\nWe should address it early in 8.0 to get bake time due to risk of the change.",
                                           "updatedAt":  "2022-07-22T15:25:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LPQT_",
                                           "createdAt":  "2022-09-29T13:32:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOELy-6A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AntiGuideAkquinet",
                                                                               "createdAt":  "2022-10-18T07:29:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julian94",
                                                                               "createdAt":  "2022-10-18T13:13:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "elgonzo",
                                                                               "createdAt":  "2023-07-02T12:13:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bill-poole",
                                                                               "createdAt":  "2024-05-15T05:35:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "magicxor",
                                                                               "createdAt":  "2025-03-27T21:56:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "tmenier",
                                           "body":  "@karelz @MihaZupan All 4 of those issues closed \"in favor of\" this one are referring to `Uri.IsWellFormedUriString`, not `Uri.IsWellFormedOriginalString`, so just to be clear they are not duplicates. I\u0027m not sure if the rationale in the triage comments above applies to both or not:\r\n\r\n\u003e We have hard time to imagine almost ANY scenario where IsWellFormedOriginalString is needed to be called by the user explicitly. We believe most of the cases use it just because it looks like a good thing to call.\r\n\r\nI\u0027m less familiar with `IsWellFormedOriginalString`, but `IsWellFormedUriString` is static and the use case is fairly obvious: validation. This is the one people are complaining about, and I would suggest you re-open one of the 4 that were closed, or at least provide different rationale for closing them. I\u0027d suggest reopening #21626 as it has the most activity and upvotes. Thanks.",
                                           "updatedAt":  "2022-09-29T13:32:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LPSMC",
                                           "createdAt":  "2022-09-29T13:37:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "The two methods share the same issues. [`IsWellFormedUriString`](https://github.com/dotnet/runtime/blob/6ee37767032537a9393394afdf630c404434d252/src/libraries/System.Private.Uri/src/System/UriExt.cs#L402) is implemented as\r\n```c#\r\nUri.TryCreate(uriString, uriKind, out result) \u0026\u0026 result.IsWellFormedOriginalString()\r\n```\r\n\r\n\u003e IsWellFormedUriString is static and the use case is fairly obvious: validation.\r\n\r\nRight, but was the intended validation exactly what `IsWellFormedOriginalString` is doing, or whether a Uri seems valid and can be created via `Uri.TryCreate`?",
                                           "updatedAt":  "2022-09-29T13:37:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LPWRB",
                                           "createdAt":  "2022-09-29T13:50:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmenier",
                                           "body":  "Thanks for the clarification. Karel\u0027s comment that \"it looks like a good thing to call\" is certainly true in the case of `IsWellFormedUriString`. Without that knowledge of the implementation details, it seems appropriate when you just want to make sure a user-entered URI string is valid and you don\u0027t need a `Uri` object in the moment. (Perhaps someone is entering their web site URL in a form and you just want validate and save it, for example.)\r\n\r\nI just think the general tone that \"we can\u0027t imagine why anyone would ever call this\" is likely much more applicable to `IsWellFormedOriginalString` than it is to `IsWellFormedUriString`....again, without knowledge of the implementation. :)\r\n",
                                           "updatedAt":  "2022-09-29T13:50:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Makux",
                                           "createdAt":  "2022-10-18T08:48:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD1YdHA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tfaller",
                                                                               "createdAt":  "2024-10-09T09:16:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "AntiGuideAkquinet",
                                           "body":  "Just to give some context on how people could end up experiencing this problem:\r\n\r\n**Microsofts OData.NET** library uses `Uri.IsWellFormedUriString` ([matching issue](https://github.com/OData/odata.net/issues/2374))\r\nIn my case it is used to talk to **Microsofts Business Central** webservices which contain tenant names in their URL that can contain non ASCII characters, spaces etc.. This issue is specific to the library and could be fixed with a workaround but has a big impact on a fraction of users in the meantime.\r\n\r\nExample URL:\r\n`\"http://192.168.0.1:1234/Instance/ODataV4/Company(\u0027123-Customer Place Süd-Ost\u0027)/\"`",
                                           "updatedAt":  "2022-10-18T08:48:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MbxIi",
                                           "createdAt":  "2022-10-18T12:58:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "Thanks for linking the issue. From the [linked code](https://github.com/OData/odata.net/blob/d155952e5995f664f4b09d094145bb0b52c913a8/src/Microsoft.OData.Client/UriResolver.cs#L180), it does seem like this is one of those usages that fall into the `We believe most of the cases use it just because it looks like a good thing to call.` category.\r\n\r\nThe `OData` library should consider dropping this check entirely. As-is, it is checking `Uri.IsWellFormedUriString(baseUri.AbsoluteUri, UriKind.Absolute)`\r\nwhich should just always be `true`, as `Uri.AbsoluteUri` is always generating a well-formed string.\r\nThat is, this check is doing nothing in this case, except for potentially hitting this false-negative bug.",
                                           "updatedAt":  "2022-10-18T12:58:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5OZlCb",
                                           "createdAt":  "2022-11-15T13:42:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "levicki",
                                           "body":  "@karelz \r\n\r\nI am not sure if I should open a new issue (this one looks similar enough), but `Uri.TryCreate` seems fundamentally broken to me.\r\n\r\nMinimal repro (tested on .Net Framework 4.8):\r\n```\r\nUri.TryCreate(@\"\u003cli\u003eNo certified downloads were found for this configuration. To include beta downloads in your search, click \u003ca href=\u0027Find.aspx?lang=en-us\u0027\u003ehere\u003c/a\u003e.\u003c/li\u003e\", UriKind.RelativeOrAbsolute, out Uri Result);\r\n```\r\nTo my surprise that call returns `true`, and the result is... well, see for yourself:\r\n![image](https://user-images.githubusercontent.com/16415478/201933755-069fe91b-4808-4691-96cf-0d28ce28a070.png)\r\n",
                                           "updatedAt":  "2022-11-15T13:42:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5OZmSa",
                                           "createdAt":  "2022-11-15T13:47:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "This issue is only talking about IsValidOriginalString, so it\u0027s unrelated to your problem.\n\nIf you try to create a relative Uri, we\u0027ll accept most everything as valid input. If you don\u0027t want that, you should likely specify `UriKind.Absolute` instead.",
                                           "updatedAt":  "2022-11-15T13:47:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5OZx3H",
                                           "createdAt":  "2022-11-15T14:23:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "levicki",
                                           "body":  "\u003e This issue is only talking about IsValidOriginalString, so it\u0027s unrelated to your problem.\r\n\r\nThanks for clarification, I will create a new issue.\r\n\r\n\u003e If you try to create a relative Uri, we\u0027ll accept most everything as valid input. If you don\u0027t want that, you should likely specify `UriKind.Absolute` instead.\r\n\r\nWhat should I do if I want both absolute or relative? Roll my own check? I mean, why is there even an option for relative Uri `TryCreate` when there\u0027s absolutely no validation for it? I\u0027d expect at least to check against allowed character list and return false for those that aren\u0027t (taking also invalid UTF-8 encodings into account).\r\n",
                                           "updatedAt":  "2022-11-15T14:23:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5OZyNt",
                                           "createdAt":  "2022-11-15T14:24:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julian94",
                                           "body":  "Just for reference:\r\n`Uri.IsWellFormedUriString(@\"\u003cli\u003eNo certified downloads were found for this configuration. To include beta downloads in your search, click \u003ca href=\u0027Find.aspx?lang=en-us\u0027\u003ehere\u003c/a\u003e.\u003c/li\u003e\", UriKind.RelativeOrAbsolute);`\r\nReturns False, as it should.",
                                           "updatedAt":  "2022-11-15T14:24:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5OaA4d",
                                           "createdAt":  "2022-11-15T15:05:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "levicki",
                                           "body":  "@julian94 I understand.\r\n\r\nHowever, the documentation for `Uri.TryCreate` does not say what kind of validation (if any) is performed when constructing an `Uri`. At the minimum, this should be clarified. I also believe that `Uri.TryCreate` should not succeed in creating an invalid `Uri` (relative or absolute).\r\n\r\nI did create an issue just in case someone would like to close it with `wontfix` with extreme prejudice :-)\r\nhttps://github.com/dotnet/runtime/issues/78381",
                                           "updatedAt":  "2022-11-15T15:06:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ec5wP",
                                           "createdAt":  "2023-06-09T14:06:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Sadly, we won\u0027t make it in 8.0 due to circumstances. Moving to Future for now.",
                                           "updatedAt":  "2023-06-09T14:06:22Z"
                                       }
                                   ],
                         "totalCount":  13
                     },
        "title":  "Uri.IsWellFormedOriginalString false negatives",
        "labels":  [
                       "bug",
                       "area-System.Net",
                       "tenet-compatibility"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/75353",
        "createdAt":  "2022-09-09T17:04:12Z",
        "number":  75353,
        "author":  "Tratcher",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-04T21:04:55Z",
        "body":  "### Background and motivation\n\n.NET 7 now supports WebSockets over HTTP/2. ClientWebSocket can negotiate with the server to choose HTTP/1.1 or HTTP/2 based on what\u0027s available. However, there\u0027s not an easy way to determine which protocol was used. HttpResponseMessage has the Version field to let you know this, but ClientWebSocket does not.\r\n\r\nThis information is mainly useful for testing, logging, diagnostics, etc., the WebSocket works the same either way.\r\n\r\n\n\n### API Proposal\n\n```csharp\r\nnamespace System.Net.WebSockets;\r\n\r\npublic class ClientWebSocket : WebSocket\r\n{\r\n    // Returns the Http version negotiated by ConnectAsync, or HttpVersion.Unknown if not available.\r\n    public Version HttpVersion { get; }\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\n        var wsClient = new ClientWebSocket();\r\n        wsClient.Options.HttpVersion = HttpVersion.Http20;\r\n        wsClient.Options.HttpVersionPolicy = HttpVersionPolicy.RequestVersionOrLower;\r\n        wsClient.Options.CollectHttpResponseDetails = false; // Shouldn\u0027t be required\r\n        var httpClient = new HttpClient();\r\n        await wsClient.ConnectAsync(new Uri(url), httpClient, default);\r\n        Console.WriteLine(\"Negotiated: \" + wsClient.Version.ToString());\r\n```\r\n\n\n### Alternative Designs\n\nWorkaround: Check if the HttpStatusCode returns 101 (HTTP/1.1) or 200 (HTTP/2). Note you need to enable CollectHttpResponseDetails for HttpStatusCode to be populated (weird).\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgA41mw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5KCvPw",
                                           "createdAt":  "2022-09-09T17:04:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\n.NET 7 now supports WebSockets over HTTP/2. ClientWebSocket can negotiate with the server to choose HTTP/1.1 or HTTP/2 based on what\u0027s available. However, there\u0027s not an easy way to determine which protocol was used. HttpResponseMessage has the Version field to let you know this, but ClientWebSocket does not.\r\n\r\nThis information is mainly useful for testing, logging, diagnostics, etc., the WebSocket works the same either way.\r\n\r\n\n\n### API Proposal\n\n```csharp\r\nnamespace System.Net.WebSockets;\r\n\r\npublic class ClientWebSocket : WebSocket\r\n{\r\n    // Returns the Http version negotiated by ConnectAsync, or HttpVersion.Unknown if not available.\r\n    public Version HttpVersion { get; }\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\n        var wsClient = new ClientWebSocket();\r\n        wsClient.Options.HttpVersion = HttpVersion.Http20;\r\n        wsClient.Options.HttpVersionPolicy = HttpVersionPolicy.RequestVersionOrLower;\r\n        wsClient.Options.CollectHttpResponseDetails = false; // Shouldn\u0027t be required\r\n        var httpClient = new HttpClient();\r\n        await wsClient.ConnectAsync(new Uri(url), httpClient, default);\r\n        Console.WriteLine(\"Negotiated: \" + wsClient.Version.ToString());\r\n```\r\n\n\n### Alternative Designs\n\nWorkaround: Check if the HttpStatusCode returns 101 (HTTP/1.1) or 200 (HTTP/2). Note you need to enable CollectHttpResponseDetails for HttpStatusCode to be populated (weird).\n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eTratcher\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Net`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-09-09T17:04:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KC1pU",
                                           "createdAt":  "2022-09-09T17:22:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "\u003e Workaround: Check if the HttpStatusCode returns 101 (HTTP/1.1) or 200 (HTTP/2). Note you need to enable CollectHttpResponseDetails for HttpStatusCode to be populated (weird).\r\n\r\nSome discussion around that: https://github.com/dotnet/runtime/pull/71757#discussion_r915907922. `Version` may be similar here.\r\n\r\nI agree we should let you query `Version` even if `CollectHttpResponseDetails` isn\u0027t set (worst-case it\u0027s Unknown as you point out).",
                                           "updatedAt":  "2022-09-09T17:22:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LP_rR",
                                           "createdAt":  "2022-09-29T15:57:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: We could leverage the `HttpVersion.Unknown` when the info is not available (e.g. in Browser) or follow pattern of StatusCode. We need a decision, ideally in 8.0. Implementation afterwards will be simple.",
                                           "updatedAt":  "2022-09-29T15:58:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ADjWb",
                                           "createdAt":  "2024-06-04T21:04:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "triage: not urgent, moving to future. ",
                                           "updatedAt":  "2024-06-04T21:04:50Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[API Proposal]: Determining the http protocol version chosen by ClientWebSocket",
        "labels":  [
                       "api-suggestion",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/75420",
        "createdAt":  "2022-09-11T18:50:37Z",
        "number":  75420,
        "author":  "david-acker",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCqpBtQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xsoheilalizadeh",
                                            "createdAt":  "2022-09-19T13:41:51Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-06-17T15:37:47Z",
        "body":  "### Background\r\ndotnet/aspnetcore#2461 discusses adding EventSource/EventCounters to SignalR and WebSockets in ASP.NET.\r\n\r\nIt was recently suggested on the issue that it might be beneficial for these counters to be added to [ManagedWebSocket](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Net.WebSockets/src/System/Net/WebSockets/ManagedWebSocket.cs) instead, so they would be available to everyone and not just SignalR.\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOXnPs8w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5KFwBA",
                                           "createdAt":  "2022-09-11T18:50:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background\r\ndotnet/aspnetcore#2461 discusses adding EventSource/EventCounters to SignalR and WebSockets in ASP.NET.\r\n\r\nIt was recently suggested on the issue that it might be beneficial for these counters to be added to [ManagedWebSocket](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Net.WebSockets/src/System/Net/WebSockets/ManagedWebSocket.cs) instead, so they would be available to everyone and not just SignalR.\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edavid-acker\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-09-11T18:50:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KIkOr",
                                           "createdAt":  "2022-09-12T13:39:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCsxLhA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "davidfowl",
                                                                               "createdAt":  "2022-09-15T01:23:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "david-acker",
                                                                               "createdAt":  "2022-09-25T14:23:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "We would have to come up with the right set of events and counters, but I think this request makes sense.\r\n\r\n`ManagedWebSocket` seems like the correct place for such telemetry to me. Libraries that build on top of WebSockets shouldn\u0027t have to reimplement it (but they can of course augment it with their domain-specific information).",
                                           "updatedAt":  "2022-09-12T13:39:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LP-T9",
                                           "createdAt":  "2022-09-29T15:52:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: We should do it in 8.0 -- tracing is always good for customer scenarios.\r\n\r\n@david-acker do you have a list of things you would like to see?",
                                           "updatedAt":  "2022-09-29T15:53:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LzQi0",
                                           "createdAt":  "2022-10-07T15:15:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "david-acker",
                                           "body":  "Here\u0027s the list of events and counters from the original issue dotnet/aspnetcore#2461\r\n\r\n**Events:**\r\n- ConnectionStarted - Triggered when a connection is established.\r\n- ConnectionEnded - Triggered when a connection is terminated gracefully.\r\n- ConnectionAborted - Triggered when a connection is terminated abnormally.\r\n- FrameSent - Triggered when an frame is sent from the server.\r\n- FrameReceived - Triggered when an frame is received by the server.\r\n\r\n**Counters:**\r\n- PayloadBytesWritten - Counts the number of payload bytes written.\r\n- PayloadBytesRead - Counts the number of payload bytes read.\r\n- ConnectionDuration - Measure the duration of each connection.\r\n\r\nThe original issue also mention adding counters for some of the frame types (Close, Ping, Pong, Text, Binary, Continuation, etc.) as well, which would be possible now that the counters will be implemented in the runtime itself instead of just ASP.NET.",
                                           "updatedAt":  "2022-10-07T15:15:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ec-zz",
                                           "createdAt":  "2023-06-09T14:17:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Sadly, we won\u0027t make it in 8.0 due to circumstances. Moving to Future for now.",
                                           "updatedAt":  "2023-06-09T14:17:54Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Add EventSource/EventCounter tracing and metrics for WebSockets",
        "labels":  [
                       "enhancement",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/76253",
        "createdAt":  "2022-09-27T15:46:05Z",
        "number":  76253,
        "author":  "RubberChickenParadise",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODEBrVQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "akorchev",
                                            "createdAt":  "2022-12-13T06:40:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hifni",
                                            "createdAt":  "2022-12-27T04:31:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Vaccano",
                                            "createdAt":  "2023-04-19T22:56:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "spk33",
                                            "createdAt":  "2023-06-26T05:18:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MadManMarkAu",
                                            "createdAt":  "2023-10-21T15:03:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MichelZ",
                                            "createdAt":  "2025-04-17T08:38:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Greg-Smulko",
                                            "createdAt":  "2025-06-16T20:58:35Z"
                                        }
                                    ],
                          "totalCount":  7
                      },
        "updatedAt":  "2023-09-11T23:35:59Z",
        "body":  "As Microsoft has announced the upcoming change to turn off Basic Authentication for all tenants, are there plans to add OAUTH2 support to System.Net.Mail?  (Announcement: https://www.microsoft.com/en-us/microsoft-365/blog/2022/09/01/microsoft-retires-basic-authentication-in-exchange-online/)\r\n\r\nWhile there are work arounds, such as enabling SMTP AUTH and setting a policy to AllowBasicAuthSmtp, not having the framework SMTP client support OAUTH2 presents a large issue to organizations that want to avoid user specific policies, even if they are service accounts.  ([Disable Basic Auth](https://learn.microsoft.com/en-us/exchange/clients-and-mobile-in-exchange-online/disable-basic-authentication-in-exchange-online) and [SMTP AUTH](https://learn.microsoft.com/en-us/exchange/clients-and-mobile-in-exchange-online/authenticated-client-smtp-submission))\r\n\r\nAre there plans to release a patch for .net 6 or include the new functionality to support OAUTH2 in .net 7?\r\n\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZjTgvA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5LFXXQ",
                                           "createdAt":  "2022-09-27T15:46:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nAs Microsoft has announced the upcoming change to turn off Basic Authentication for all tenants, are there plans to add OAUTH2 support to System.Net.Mail?  (Announcement: https://www.microsoft.com/en-us/microsoft-365/blog/2022/09/01/microsoft-retires-basic-authentication-in-exchange-online/)\r\n\r\nWhile there are work arounds, such as enabling SMTP AUTH and setting a policy to AllowBasicAuthSmtp, not having the framework SMTP client support OAUTH2 presents a large issue to organizations that want to avoid user specific policies, even if they are service accounts.  ([Disable Basic Auth](https://learn.microsoft.com/en-us/exchange/clients-and-mobile-in-exchange-online/disable-basic-authentication-in-exchange-online) and [SMTP AUTH](https://learn.microsoft.com/en-us/exchange/clients-and-mobile-in-exchange-online/authenticated-client-smtp-submission))\r\n\r\nAre there plans to release a patch for .net 6 or include the new functionality to support OAUTH2 in .net 7?\r\n\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eRubberChickenParadise\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-09-27T15:46:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LFfHl",
                                           "createdAt":  "2022-09-27T16:11:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "unlikely @RubberChickenParadise. 7.0 is mostly done and I don\u0027t think this would qualify for servicing. ",
                                           "updatedAt":  "2022-09-27T16:11:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LFfQm",
                                           "createdAt":  "2022-09-27T16:12:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "teo-tsirpanis",
                                           "body":  "And [`System.Net.Mail` is deprecated](https://github.com/dotnet/platform-compat/blob/master/docs/DE0005.md).",
                                           "updatedAt":  "2022-09-27T16:12:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LFm95",
                                           "createdAt":  "2022-09-27T16:31:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@filipnavara any thoughts here?\r\n\r\nTriage: We might consider it in future, if there is higher demand (please upvote the top post).\r\nAs mentioned above, System.Net.Mail is deprecated and other implementations are recommended instead.",
                                           "updatedAt":  "2022-09-27T16:31:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LFsB1",
                                           "createdAt":  "2022-09-27T16:49:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCs5eWQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wfurt",
                                                                               "createdAt":  "2022-09-27T16:50:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e @filipnavara any thoughts here?\r\n\r\nHonestly, move to MailKit. This would require changing the API surface to express passing the OAuth2 token. If you already need to change a code base to add OAuth2 support and get the access/refresh tokens done right then migrating to MailKit is a small change in comparison.",
                                           "updatedAt":  "2022-09-27T16:49:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LFv8i",
                                           "createdAt":  "2022-09-27T17:03:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "To further elaborate, neither the Office 365 policy nor the deprecation of System.Net.Mail are new things. The policy about Basic authentication was announced years ago and only delayed due to the COVID pandemy. Similarly, `SmtpClient` was deprecated in 2017. So this is nothing new, both of these were known for over 3 years.\r\n\r\nI would only consider adding the support if there was some API enhancement to support `System.Net.ICredentials/NetworkCredential` for OAuth2 Bearer tokens across the board, including on the non-deprecated System.Net.Http APIs. The classes are not sealed and we previously used to implement it in our app through custom handler registered in `System.Net.AuthenticationManager` (on the old `HttpWebRequest` APIs). I am not aware on any issue with similar API request though.",
                                           "updatedAt":  "2022-09-27T17:03:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LFzQO",
                                           "createdAt":  "2022-09-27T17:15:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCx0Yaw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2022-09-27T17:18:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hifni",
                                                                               "createdAt":  "2022-12-27T04:33:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "wfurt",
                                           "body":  "We talk about HTTP in the past and I think if we can improve `OAuth2` integration we should do it cross the board. \r\nWhile one can do it with existing primitives it seems very common. Same for any Azure bearers ... if that is any different.  \r\nI would probably open separate issue to track the generic effort.  ",
                                           "updatedAt":  "2022-09-27T17:15:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LF3wv",
                                           "createdAt":  "2022-09-27T17:31:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RubberChickenParadise",
                                           "body":  "\u003e And [`System.Net.Mail` is deprecated](https://github.com/dotnet/platform-compat/blob/master/docs/DE0005.md).\r\n\r\nSo the question here is why the classes have not been marked with an `Obsolete` attribute or add xml documentation to the classes themselves?  That might be the right direction for this request then. ",
                                           "updatedAt":  "2022-09-27T17:32:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LF76t",
                                           "createdAt":  "2022-09-27T17:46:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e \u003e And [`System.Net.Mail` is deprecated](https://github.com/dotnet/platform-compat/blob/master/docs/DE0005.md).\r\n\u003e \r\n\u003e So the question here is why the classes have not been marked with an `Obsolete` attribute or add xml documentation to the classes themselves? That might be the right direction for this request then.\r\n\r\nIt is in the documentation for [SmtpClient](https://learn.microsoft.com/en-us/dotnet/api/system.net.mail.smtpclient?view=net-6.0):\r\n\r\n\u003cimg width=\"820\" alt=\"image\" src=\"https://user-images.githubusercontent.com/1764393/192598878-4e55b938-e82d-4311-96ed-19c011dd5f8a.png\"\u003e\r\n\r\nAdditionally, platform compatibility analyzer (now folded into analyzer that\u0027s running by default) gives the [DE0005 warning](https://github.com/dotnet/platform-compat/blob/master/docs/DE0005.md).\r\n\r\nI don\u0027t remember the historical reason why `Obsolete` attribute was not used. The XML documentation in .NET runtime is added only for newly introduced types. It was not added retro-actively for old code.",
                                           "updatedAt":  "2022-09-27T17:46:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mNOC8",
                                           "createdAt":  "2023-09-11T23:35:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "There is another ask for Bearer authentication #91867. It may be worth of looking into the credentials @filipnavara ",
                                           "updatedAt":  "2023-09-11T23:35:59Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "System.Net.Mail.SmtpClient  does not support OAUTH2 while Office 365 is moving to require OAUTH2 for Exchange online",
        "labels":  [
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/77060",
        "createdAt":  "2022-10-03T01:05:43Z",
        "number":  77060,
        "author":  "alexandrehtrb",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC8xoyQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vicancy",
                                            "createdAt":  "2022-10-25T11:33:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "reflectronic",
                                            "createdAt":  "2022-12-18T03:35:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "YSternlicht",
                                            "createdAt":  "2023-01-02T23:15:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vicr123",
                                            "createdAt":  "2023-01-06T01:11:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "drweeto",
                                            "createdAt":  "2023-01-06T10:10:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SaifAqqad",
                                            "createdAt":  "2023-11-22T12:01:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "flagbug",
                                            "createdAt":  "2024-06-04T09:08:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "juantxorena",
                                            "createdAt":  "2024-10-15T15:28:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bsdayo",
                                            "createdAt":  "2024-11-19T08:35:25Z"
                                        }
                                    ],
                          "totalCount":  9
                      },
        "updatedAt":  "2024-11-13T16:09:26Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nI recently began to learn WebSockets and the idea of bidirectional communication over HTTP, and I am liking it. I read the some examples online, such as [this](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/websockets?view=aspnetcore-6.0) and managed to make a test server, using ASP.NET Core.\r\n\r\nI noticed that writing code for WebSockets, at least in ASP.NET Core, is very \"close to the metal\". The developer needs to write code for receiving and sending the messages, translating them from byte arrays, worry about timeouts, and other considerations.\r\n\r\nASP.NET Core could have a friendlier programming approach to WebSockets, like Actions in Controllers, that exist for HTTP.\n\n### Describe the solution you\u0027d like\n\nI do not have a built idea, but I thought on an abstract class, like a \"WebSocketController\", with three abstract methods, for connecting, and for sending and receiving messages.\r\n\r\nThe send message method could return objects, that are converted to JSON strings and then to byte arrays, sent through the WebSocket. This conversion from object to JSON byte array would be done by the ASP.NET, taking this responsibility away from the developer.\r\n\r\nThe receive message method could have as parameters objects that are already pre-converted from the JSON received in the WebSocket message.\n\n### Additional context\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOk3cj1A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5MQkxp",
                                           "createdAt":  "2022-10-03T01:41:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "The problem with the idea of a controller is that it requires a way to dispatch messages to a individual actions. WebSockets is like TCP. If you do JSON over websockets then the best we can do is buffer the message and de-serialize it on your behalf. There\u0027s no dispatch because the JSON message itself isn\u0027t a specific protocol. When you do JSON over websockets, you need to build the dispatching mechanism yourself as there\u0027s no standard to do this. An API on the WebSocket type a read a JSON message might be enough for this simple use case though.\r\n\r\nThen there\u0027s the idea of tracking connections in order to do broadcasts etc. We\u0027ve already built this, it\u0027s called SignalR. It creates a protocol over WebSockets that allows dispatching like a controller. It also creates a model for sending messages to groups of connections.\r\n",
                                           "updatedAt":  "2022-10-03T01:41:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MQkxs",
                                           "createdAt":  "2022-10-03T15:43:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODEeS7A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "lukeemery",
                                                                               "createdAt":  "2022-10-04T22:21:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Ahmed-gubara",
                                                                               "createdAt":  "2023-08-22T23:58:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "alexandrehtrb",
                                           "body":  "I read about SignalR and I liked its programming style, and how it decouples the bidirectional communication details.\r\n\r\nHowever, I felt that SignalR is almost a protocol on its own, since it requires specific client-side libraries, not just a regular WebSocket communication. [This StackOverflow question](https://stackoverflow.com/questions/42260103/can-a-client-connect-directly-to-signalr-using-only-websockets) is related to this same issue.\r\n\r\nIf SignalR could act as an agnostic WebSocket server, it would be a solution for this.\r\n\r\nEdit: The StackOverflow answer for the question says that SignalR could act like that, but I have not found the documentation for that; is it possible?",
                                           "updatedAt":  "2022-10-03T15:47:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MQkxw",
                                           "createdAt":  "2022-10-03T16:03:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I think I clarified that in the previous comment, specifically:\r\n\r\n\u003e There\u0027s no dispatch because the JSON message itself isn\u0027t a specific protocol. When you do JSON over websockets, you need to build the dispatching mechanism yourself as there\u0027s no standard to do this. An API on the WebSocket type a read a JSON message might be enough for this simple use case though.\r\n\r\n",
                                           "updatedAt":  "2022-10-03T16:03:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MQkxz",
                                           "createdAt":  "2022-10-04T04:46:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCyL8ww==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alexandrehtrb",
                                                                               "createdAt":  "2022-10-04T13:23:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vicancy",
                                                                               "createdAt":  "2022-10-25T11:42:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "halter73",
                                                                               "createdAt":  "2022-11-12T00:24:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "reflectronic",
                                                                               "createdAt":  "2023-01-06T00:49:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Here are some ideas on what could be simplified:\r\n- Handling of the closing sequence\r\n- Handling of the individual message buffering\r\n\r\nAs a strawman:\r\n\r\n```C#\r\npublic abstract class WebSocketHandler \r\n{\r\n    public virtual Task OnConnectedAsync();\r\n    public virtual Task OnMessageAsync(WebSocketReceiveResult receiveResult);\r\n    public virtual Task OnClosedAsync();\r\n}\r\n````\r\n\r\nOR we could embrace a pull model with `IAsyncEnumerable\u003cWebSocketReceiveResult\u003e`. Of course there are questions about buffer ownership.\r\n\r\n```C#\r\nforeach (WebSocketReceiveResult result in webSocket.GetMessagesAsync())\r\n{\r\n    // Do something with the message\r\n}\r\n```\r\n\r\ncc @BrennanConroy ",
                                           "updatedAt":  "2022-10-04T04:46:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MQkx4",
                                           "createdAt":  "2022-10-07T21:23:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BrennanConroy",
                                           "body":  "I\u0027m not sure how useful `WebSocketHandler` would actually be. It\u0027s a very thin wrapper around the existing `WebSocket` API. The main thing it looks like it would provide is the main loop and calling close async.\r\n\r\n```c#\r\nwhile (ws.Status == WebSocketState.Open)\r\n{\r\n    await ws.ReceiveAsync(...);\r\n}\r\nawait ws.CloseAsync();\r\n```\r\n\r\nThe user would still need to handle sending messages separately and closing the connection manually. I\u0027m not sure how that would look with the abstraction since the abstraction tries to move the code to be callback based, but `SendAsync`/`CloseAsync` wouldn\u0027t want to be callback based.\r\n\r\nAnd like you mention, the buffer ownership would likely be inefficient or easy to mishandle because the framework would need to assume the user will use the buffer outside of `OnMessageAsync` or assume the user knows they can\u0027t use it outside of that method.\r\n\r\n\u003e * Handling of the individual message buffering\r\n\r\nExtension methods on `WebSocket` may be able to help here and would apply to both server and client.\r\n\r\ne.g. `ws.ReadTextMessageAsync()` could read text frames until an end of message flag was received, and then give back something that combines the frames.\r\nAnd `ws.ReadBinaryMessageAsync()` would do the same but for binary messages.\r\nThose APIs would be really inefficient though, as you mentioned, how do we handle buffer ownership in an efficient way? But I think those APIs are a good potential path towards simplifying WebSocket consumption logic.\r\n\r\n\u003e `IAsyncEnumerable\u003cWebSocketReceiveResult\u003e`\r\n\r\nThis is also interesting, it still leaves the user in control of the logic, but would handle combining frames.",
                                           "updatedAt":  "2022-12-04T16:20:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MQkx6",
                                           "createdAt":  "2022-10-08T14:51:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gitlsl",
                                           "body":  " [https://devblogs.microsoft.com/dotnet/announcing-grpc-json-transcoding-for-dotnet](url)\r\nmay be this is what author want ,      `signalr(websocket) -json-transcoding-for-dotnet`",
                                           "updatedAt":  "2022-10-08T14:51:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MQkx7",
                                           "createdAt":  "2022-10-09T14:43:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODNVh0g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "SaifAqqad",
                                                                               "createdAt":  "2023-11-22T11:57:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "alexandrehtrb",
                                           "body":  "There are two main points that I think could be improved:\r\n\r\n1) The existing `WebSocket` and `ClientWebSocket` classes are quite difficult to work with if the programmer wants to do bidirectional communication. Taking from [this](https://github.com/dotnet/aspnetcore/blob/3b5400a286f9e827d9e14aa30a79c5db0df439cc/src/SignalR/common/Http.Connections/src/Internal/Transports/WebSocketsServerTransport.cs#L66) example, if I understood it correctly, the code has to start both sending and receiving processes at the same time, check which comes first, then complete it; pseudo-code below:\r\n\r\n```cs\r\nwhile (true)\r\n{\r\n    var beganSending = HasMessageToSendAsync();\r\n    var beganReceiving = HasMessageToReceiveAsync();\r\n\r\n    var first = await Task.WhenAny(beganSending, beganReceiving);\r\n    if (first == beganSending)\r\n        await SendMessageAsync();\r\n    else\r\n        await ReceiveMessageAsync();\r\n}\r\n```\r\n\r\nAn event-based approach would be easier and simpler. Check the JavaScript WebSocket API, for [this](https://github.com/dotnet/AspNetCore.Docs/blob/fba2ab8b05ac75a0c44dd250735f1157c3193b6d/aspnetcore/fundamentals/websockets/samples/6.x/WebSocketsSample/wwwroot/index.html#L134) example:\r\n\r\n```js\r\nsocket = new WebSocket(connectionUrl.value);\r\nsocket.onopen = function (event) {\r\n    updateState();\r\n    /*code*/\r\n};\r\nsocket.onclose = function (event) {\r\n    updateState();\r\n    /*code*/\r\n};\r\nsocket.onerror = updateState;\r\nsocket.onmessage = function (event) {\r\n    /*code*/\r\n};\r\n```\r\n\r\n2) In ASP.NET Endpoints and Actions, the code returns an object that is automatically converted to a JSON and then to a byte array, sent through the connection.\r\nIn current WebSocket classes, however, the programmer has to do all that - accumulate the received bytes, convert them to string, then convert this string to an object. That is quite cumbersome.",
                                           "updatedAt":  "2022-10-09T14:45:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MQkx_",
                                           "createdAt":  "2022-10-09T18:04:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "\u003e The existing WebSocket and ClientWebSocket classes are quite difficult to work with if the programmer wants to do bidirectional communication. Taking from [this](https://github.com/dotnet/aspnetcore/blob/3b5400a286f9e827d9e14aa30a79c5db0df439cc/src/SignalR/common/Http.Connections/src/Internal/Transports/WebSocketsServerTransport.cs#L66) example, if I understood it correctly, the code has to start both sending and receiving processes at the same time, check which comes first, then complete it; pseudo-code below:\r\n\r\nThis example is more complex because we\u0027re introducing another layer of abstraction (the PipeReader/PipeWriter) instead of directly interacting with the WebSocket APIs. Notice in your examples the focus is on receiving, I don\u0027t see the same complaints about sending messages.\r\n\r\nSee [this](https://web.dev/websocketstream/) for the reason we\u0027re not a fan of the websocket APIs in the browser.\r\n\r\n\u003e In ASP.NET Endpoints and Actions, the code returns an object that is automatically converted to a JSON and then to a byte array, sent through the connection.\r\n\r\nThis is easy because HTTP has 2 parts that are used separately, the path for routing (dispatch) and the body for the payload. We don\u0027t have the same with websockets, you only have the body.\r\n\r\n\u003e In current WebSocket classes, however, the programmer has to do all that - accumulate the received bytes, convert them to string, then convert this string to an object. That is quite cumbersome.\r\n\r\nbyte[] -\u003e object, there\u0027s no need to make a string even though you see lots of samples inefficiently doing that.\r\n\r\nThere are definitely some small things we can do here to improve the experience, the current API is *very* low level. However, I think this small improvement should be done for both client and server side websockets. \r\n\r\nASP.NET Core already has a higher-level programming model on top of any transport including WebSockets. I still think we should focus on APIs that aren\u0027t callback based that accomplish the following:\r\n\r\n- Handling of the closing sequence \r\n- Handling of the individual message buffering\r\n   - Translation of that message into a JSON object (of the user\u0027s choice)\r\n\r\nOut of scope:\r\n- Supporting broadcast\r\n- Tracking connections",
                                           "updatedAt":  "2022-10-09T18:04:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MQkyB",
                                           "createdAt":  "2022-10-12T22:25:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adityamandaleeka",
                                           "body":  "@davidfowl Should we open an issue to track this:\r\n\r\n\u003e I still think we should focus on APIs that aren\u0027t callback based that accomplish the following:\r\n\u003e \r\n\u003e * Handling of the closing sequence\r\n\u003e * Handling of the individual message buffering\r\n\u003e   \r\n\u003e   * Translation of that message into a JSON object (of the user\u0027s choice)\r\n\r\n",
                                           "updatedAt":  "2022-10-12T22:25:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MQkyF",
                                           "createdAt":  "2022-10-13T05:18:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Yes but I\u0027m hoping we can make this an API proposal on the WebSocket API itself and avoid doing something on the server that doesnt\u0027 work on the client.",
                                           "updatedAt":  "2022-10-13T05:18:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MQk0d",
                                           "createdAt":  "2022-10-14T20:09:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nI recently began to learn WebSockets and the idea of bidirectional communication over HTTP, and I am liking it. I read the some examples online, such as [this](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/websockets?view=aspnetcore-6.0) and managed to make a test server, using ASP.NET Core.\r\n\r\nI noticed that writing code for WebSockets, at least in ASP.NET Core, is very \"close to the metal\". The developer needs to write code for receiving and sending the messages, translating them from byte arrays, worry about timeouts, and other considerations.\r\n\r\nASP.NET Core could have a friendlier programming approach to WebSockets, like Actions in Controllers, that exist for HTTP.\n\n### Describe the solution you\u0027d like\n\nI do not have a built idea, but I thought on an abstract class, like a \"WebSocketController\", with three abstract methods, for connecting, and for sending and receiving messages.\r\n\r\nThe send message method could return objects, that are converted to JSON strings and then to byte arrays, sent through the WebSocket. This conversion from object to JSON byte array would be done by the ASP.NET, taking this responsibility away from the developer.\r\n\r\nThe receive message method could have as parameters objects that are already pre-converted from the JSON received in the WebSocket message.\n\n### Additional context\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ealexandrehtrb\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Net`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-10-14T20:09:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MXJy_",
                                           "createdAt":  "2022-10-17T16:27:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CarnaViire",
                                           "body":  "What exactly do you understand by \"Handling of the closing sequence\" @davidfowl?",
                                           "updatedAt":  "2022-10-17T16:27:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MY0Qk",
                                           "createdAt":  "2022-10-17T22:28:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODNViyQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "SaifAqqad",
                                                                               "createdAt":  "2023-11-22T12:00:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "@CarnaViire when close is received, sending the close frame back.",
                                           "updatedAt":  "2022-10-17T22:28:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5M1FyZ",
                                           "createdAt":  "2022-10-24T12:49:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODNVi3g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "SaifAqqad",
                                                                               "createdAt":  "2023-11-22T12:00:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "CarnaViire",
                                           "body":  "Triage: easier APIs for WebSockets make sense, so we are open to adding them. For receiving, we should also add some setting like `HttpClient.MaxResponseContentBufferSize` to be able to limit the size of a reconstructed message.\r\n\r\nDoesn\u0027t seem to be critical for 8.0, moving to Future.\r\n\r\nIf you need this feature, please upvote the top post, it will help us prioritize. Thanks!",
                                           "updatedAt":  "2022-10-24T12:49:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5M1qTZ",
                                           "createdAt":  "2022-10-24T14:35:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCucEYg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "vicancy",
                                                                               "createdAt":  "2022-10-25T11:32:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "cc @vicancy ",
                                           "updatedAt":  "2022-10-24T14:35:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5M6iwR",
                                           "createdAt":  "2022-10-25T11:41:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODNVi9Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CarnaViire",
                                                                               "createdAt":  "2022-10-25T12:32:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "alexandrehtrb",
                                                                               "createdAt":  "2022-10-25T13:20:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "halter73",
                                                                               "createdAt":  "2022-11-12T00:24:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "YSternlicht",
                                                                               "createdAt":  "2023-01-02T23:20:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "YSternlicht",
                                                                               "createdAt":  "2023-01-02T23:20:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "drweeto",
                                                                               "createdAt":  "2023-01-06T10:10:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SaifAqqad",
                                                                               "createdAt":  "2023-11-22T12:01:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "vicancy",
                                           "body":  "I would say this is an extremely important feature and could have huge benefits for customers using [Azure Web PubSub service](https://docs.microsoft.com/en-us/azure/azure-web-pubsub/). \r\n\r\nAzure Web PubSub service supports WebSocket clients connecting to the service directly. \r\n\r\nHowever current native WebSocket APIs are a little bit complex for our customers, especially when compared with other programming languages, and we have to use some third-party WebSocket client packages in [our C# samples](https://learn.microsoft.com/en-us/azure/azure-web-pubsub/tutorial-pub-sub-messages?tabs=csharp#set-up-the-subscriber) to simplify the code. \r\n\r\nIt would be great if we have easier APIs for WebSocket in .NET world.",
                                           "updatedAt":  "2022-10-25T11:41:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5m-mHU",
                                           "createdAt":  "2023-09-20T13:02:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ygoe",
                                           "body":  "A bit late to the (old) party ... but commenting on the second comment:\r\n\r\n\u003e There\u0027s no dispatch because the JSON message itself isn\u0027t a specific protocol. When you do JSON over websockets, you need to build the dispatching mechanism yourself as there\u0027s no standard to do this.\r\n\r\nI know one such standard and that is JSON-RPC. And WebSocket is actually an excellent transport for JSON-RPC as it has a message frame that TCP doesn\u0027t have. It saves you the JSON object splitting. I think this would be what the requester wanted. Other languages/frameworks like Flask/Python support this, albeit through extension packages (comparable to NuGet).\r\n\r\nPersonally I find SignalR too complex, for anything I can imagine. I feel like it was once built around a very specific need that nobody knows anymore. It has more features than a simple WebSocket dispatcher (hubs and groups), but at the same time makes simple WebSocket dispatching overly complex. And the library\u0027s code size is insane for what it does! Even a very basic solution like JSON-RPC would be easier here. I\u0027ve also created my own solution that does PubSub+RPC over WebSocket for C# (router and client as NuGet package) and JavaScript (client only), in a simple and straightforward way with less code (currently not open-source yet).",
                                           "updatedAt":  "2023-09-20T13:02:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5m_LRx",
                                           "createdAt":  "2023-09-20T14:23:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "@ygoe There are lots of JSON RPC packages available on NuGet https://www.nuget.org/packages?q=jsonrpc. I\u0027m sure many of them work with ASP.NET Core. You can use one of those instead of SignalR if you don\u0027t need any of the features it offers.",
                                           "updatedAt":  "2023-09-20T14:23:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TdyPU",
                                           "createdAt":  "2024-11-13T16:09:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alexandrehtrb",
                                           "body":  "Hello,\n\nI have worked on a WebSocketConnector and would like to present as a proposal here. This connector fits both clients and servers.\n\nThe exchanged messages are collected and available to the user through an `IAsyncEnumerable` (@davidfowl suggestion):\n\n```cs\nusing var cws = MakeClientWebSocket();\nusing var hc = MakeHttpClient(disableSslVerification: true);\nvar wsc = new WebSocketClientSideConnector(cws, hc);\nvar uri = new Uri(\"wss://localhost:5001/test/http1websocket\");\n\nConsole.WriteLine(\"--- CONVERSATION BEGIN ---\");\n\nawait wsc.ConnectAsync(uri);\n\n// check here if connection is OK before sending messages\nawait wsc.SendMessageAsync(WebSocketMessageType.Text, \"Hello!\", false);\n\nint msgCount = 0;\nawait foreach (var msg in wsc.ExchangedMessagesCollector!.ReadAllAsync())\n{\n    msgCount++;\n    Console.WriteLine($\"Message {msgCount}, {msg.Direction}: {msg.ReadAsUtf8Text()}\");\n    \n    if (msg.Direction == WebSocketMessageDirection.FromClient)\n    {\n        continue;\n    }\n\n    string msgText = msg.ReadAsUtf8Text()!;\n    if (msgText == \"Hi!\")\n    {\n        await wsc.SendMessageAsync(WebSocketMessageType.Text, \"What time is it?\", false);\n    }\n    else if (msgText.StartsWith(\"Now it\u0027s\"))\n    {\n        await wsc.SendMessageAsync(WebSocketMessageType.Text, \"Thanks!\", false);\n    }\n}\n\nConsole.WriteLine(\"--- CONVERSATION ENDED ---\");\n```\n\nhttps://github.com/user-attachments/assets/39f1e4a8-799f-4605-996a-547c770948fe\n\n\nThe full code with a client and server examples is available in the repo:\n\nhttps://github.com/alexandrehtrb/WebSocketConnector",
                                           "updatedAt":  "2024-11-13T16:09:25Z"
                                       }
                                   ],
                         "totalCount":  19
                     },
        "title":  "WebSockets could be more abstracted",
        "labels":  [
                       "api-suggestion",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/78094",
        "createdAt":  "2022-11-09T07:42:52Z",
        "number":  78094,
        "author":  "7702244",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-04-14T10:13:56Z",
        "body":  "### Description\n\nIf the host exceeds 31 characters, Uri.IdnHost does not work.\r\n\r\nA StackOverflow user described the cause of this problem in detail: https://stackoverflow.com/a/74365598/2564897\n\n### Reproduction Steps\n\n```\r\nvoid checkIDN(string urlString)\r\n{\r\n    var uri = new Uri(urlString);\r\n    Console.WriteLine($\"{uri.Host,-40} ---\u003e {uri.IdnHost}\");\r\n}\r\ncheckIDN(\"https://единая-дата-объединения-застройщиков.рф\");\r\ncheckIDN(\"https://единая-дата-объединения-застройщико.рф\");\r\ncheckIDN(\"https://единая-дата-объединения-застройщик.рф\");\r\ncheckIDN(\"https://единая-дата-объединения-застройщи.рф\");\r\ncheckIDN(\"https://единая-дата-объединения-застройщ.рф\");\r\ncheckIDN(\"https://единая-дата-объединения-застрой.рф\");\r\ncheckIDN(\"https://единая-дата-объединения-застро.рф\");\r\n```\n\n### Expected behavior\n\n```\r\nединая-дата-объединения-застройщиков.рф ---\u003e xn------5cdbacgllceeib7afjbdux5ckbtld7c3aqp8usa0oqa.xn--p1ai\r\nединая-дата-объединения-застройщико.рф ---\u003e xn------5cdbacgvcedib5aejbdtw2ckbsld5c2app1ura5nqa.xn--p1ai\r\nединая-дата-объединения-застройщик.рф ---\u003e xn------5cdbacgvcedib5aejbdtw2ckbsl7c1aop4tqa0nqa.xn--p1ai\r\nединая-дата-объединения-застройщи.рф ---\u003e xn------5cdbacgvcedib5aejbdt2ekbrl5c0anp7spa5mqa.xn--p1ai\r\nединая-дата-объединения-застройщ.рф ---\u003e xn------5cdbacgvcedib5aejbw8dkbql3czamp0soa0mqa.xn--p1ai\r\nединая-дата-объединения-застрой.рф ---\u003e xn------5cdbacgvcedib5aejbw8dkbql3czamp4tlfqa.xn--p1ai\r\nединая-дата-объединения-застро.рф ---\u003e xn------5cdbacgvcedib5aejb7fkbpl1cyalp6s6eqa.xn--p1ai\r\n```\n\n### Actual behavior\n\n```\r\nединая-дата-объединения-застройщиков.рф ---\u003e единая-дата-объединения-застройщиков.рф\r\nединая-дата-объединения-застройщико.рф ---\u003e единая-дата-объединения-застройщико.рф\r\nединая-дата-объединения-застройщик.рф ---\u003e единая-дата-объединения-застройщик.рф\r\nединая-дата-объединения-застройщи.рф ---\u003e единая-дата-объединения-застройщи.рф\r\nединая-дата-объединения-застройщ.рф ---\u003e единая-дата-объединения-застройщ.рф\r\nединая-дата-объединения-застрой.рф ---\u003e xn------5cdbacgvcedib5aejbw8dkbql3czamp4tlfqa.xn--p1ai\r\nединая-дата-объединения-застро.рф ---\u003e xn------5cdbacgvcedib5aejb7fkbpl1cyalp6s6eqa.xn--p1ai\r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nIdnMapping works well in all cases.\r\n\r\n```\r\nvar m = new IdnMapping();\r\nvar idn = m.GetAscii(uri.Host);\r\n```\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOWeZlnQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5N-7A9",
                                           "createdAt":  "2022-11-09T07:42:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-11-09T07:42:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5OCTti",
                                           "createdAt":  "2022-11-09T19:04:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nIf the host exceeds 31 characters, Uri.IdnHost does not work.\r\n\r\nA StackOverflow user described the cause of this problem in detail: https://stackoverflow.com/a/74365598/2564897\n\n### Reproduction Steps\n\n```\r\nvoid checkIDN(string urlString)\r\n{\r\n    var uri = new Uri(urlString);\r\n    Console.WriteLine($\"{uri.Host,-40} ---\u003e {uri.IdnHost}\");\r\n}\r\ncheckIDN(\"https://единая-дата-объединения-застройщиков.рф\");\r\ncheckIDN(\"https://единая-дата-объединения-застройщико.рф\");\r\ncheckIDN(\"https://единая-дата-объединения-застройщик.рф\");\r\ncheckIDN(\"https://единая-дата-объединения-застройщи.рф\");\r\ncheckIDN(\"https://единая-дата-объединения-застройщ.рф\");\r\ncheckIDN(\"https://единая-дата-объединения-застрой.рф\");\r\ncheckIDN(\"https://единая-дата-объединения-застро.рф\");\r\n```\n\n### Expected behavior\n\n```\r\nединая-дата-объединения-застройщиков.рф ---\u003e xn------5cdbacgllceeib7afjbdux5ckbtld7c3aqp8usa0oqa.xn--p1ai\r\nединая-дата-объединения-застройщико.рф ---\u003e xn------5cdbacgvcedib5aejbdtw2ckbsld5c2app1ura5nqa.xn--p1ai\r\nединая-дата-объединения-застройщик.рф ---\u003e xn------5cdbacgvcedib5aejbdtw2ckbsl7c1aop4tqa0nqa.xn--p1ai\r\nединая-дата-объединения-застройщи.рф ---\u003e xn------5cdbacgvcedib5aejbdt2ekbrl5c0anp7spa5mqa.xn--p1ai\r\nединая-дата-объединения-застройщ.рф ---\u003e xn------5cdbacgvcedib5aejbw8dkbql3czamp0soa0mqa.xn--p1ai\r\nединая-дата-объединения-застрой.рф ---\u003e xn------5cdbacgvcedib5aejbw8dkbql3czamp4tlfqa.xn--p1ai\r\nединая-дата-объединения-застро.рф ---\u003e xn------5cdbacgvcedib5aejb7fkbpl1cyalp6s6eqa.xn--p1ai\r\n```\n\n### Actual behavior\n\n```\r\nединая-дата-объединения-застройщиков.рф ---\u003e единая-дата-объединения-застройщиков.рф\r\nединая-дата-объединения-застройщико.рф ---\u003e единая-дата-объединения-застройщико.рф\r\nединая-дата-объединения-застройщик.рф ---\u003e единая-дата-объединения-застройщик.рф\r\nединая-дата-объединения-застройщи.рф ---\u003e единая-дата-объединения-застройщи.рф\r\nединая-дата-объединения-застройщ.рф ---\u003e единая-дата-объединения-застройщ.рф\r\nединая-дата-объединения-застрой.рф ---\u003e xn------5cdbacgvcedib5aejbw8dkbql3czamp4tlfqa.xn--p1ai\r\nединая-дата-объединения-застро.рф ---\u003e xn------5cdbacgvcedib5aejb7fkbpl1cyalp6s6eqa.xn--p1ai\r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nIdnMapping works well in all cases.\r\n\r\n```\r\nvar m = new IdnMapping();\r\nvar idn = m.GetAscii(uri.Host);\r\n```\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003e7702244\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-11-09T19:04:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Oa9NS",
                                           "createdAt":  "2022-11-15T18:09:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "cc: @MihaZupan \r\nProbably comes from DNS enforcement (that is more strict than URI)",
                                           "updatedAt":  "2022-11-15T18:09:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5O2cpu",
                                           "createdAt":  "2022-11-22T01:46:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "The analysis in the linked StackOverflow post is correct. We\u0027re too eager in enforcing the label length limit in this case.\r\nWe should either try to decode the host via `IdnMapping` before checking the length, or skip the length check entirely.\r\n\r\nMoving this to future for now as it\u0027s an edge case with a workaround available.",
                                           "updatedAt":  "2022-11-22T01:46:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Z5mWd",
                                           "createdAt":  "2023-04-14T10:06:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maximys",
                                           "body":  "@MihaZupan , I understand what is the magic value 63 [here](https://github.com/dotnet/runtime/blame/main/src/libraries/System.Private.Uri/src/System/DomainNameHelper.cs#L172). It\u0027s value from [RFC 3492](https://www.ietf.org/rfc/rfc3492.txt):\r\n```\r\nThis is important in the context of\r\n      domain names because RFC 1034 [RFC1034] restricts the length of a\r\n      domain label to 63 characters.\r\n```\r\n\t  \r\nIt\u0027s very important, that length limit applyes to domain label not to domain names (for current bug).\r\nThen if we try to execute:\r\n```\r\n            Uri uri;\r\n\r\n            uri = new Uri(\"https://qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq.com\");\r\n\r\n            try\r\n            {\r\n                IdnMapping mapping = new IdnMapping();\r\n                string idn = mapping.GetAscii(uri.Host);\r\n                Console.WriteLine(\"{0} return \\\"{1}\\\"\", nameof(IdnMapping), idn);\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Console.WriteLine(\"We have exception when trying to apply {0}. This exception have next Message: \\\"{1}\\\".\", nameof(IdnMapping), ex.Message);\r\n            }\r\n\r\n            Console.WriteLine(\"{0} return \\\"{1}\\\"\", nameof(Uri.IdnHost), uri.IdnHost);\r\n```\r\n\t\t\t\r\nwe will have next result:\r\n```\r\nWe have exception when trying to apply IdnMapping. This exception have next Message: \"Decoded string is not a valid IDN name. (Parameter \u0027unicode\u0027)\".\r\nIdnHost return \"qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq.com\"\r\n```\r\n\r\nI mean, that currently calculation of [Uri.IdnHost](https://learn.microsoft.com/en-us/dotnet/api/system.uri.idnhost?view=net-7.0) is not so ideal for English too. Am I right?\r\nIf so, can you explain me, how I can debug tests from [System.Private.Uri](https://github.com/dotnet/runtime/tree/main/src/libraries/System.Private.Uri) and can I try to fix this both problems? I found some explanation [here](https://github.com/dotnet/runtime/discussions/81912#discussioncomment-5108888), but does it mean, that impossible debug _\"System.Private.*\"_ libs from VS?",
                                           "updatedAt":  "2023-04-14T10:13:56Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Uri.IdnHost strange behaviour for long hosts",
        "labels":  [
                       "bug",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/78381",
        "createdAt":  "2022-11-15T14:37:07Z",
        "number":  78381,
        "author":  "levicki",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODBCf2A==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julian94",
                                            "createdAt":  "2022-11-15T15:09:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "quixoticaxis",
                                            "createdAt":  "2022-12-11T23:52:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "marco-funda",
                                            "createdAt":  "2024-11-05T14:26:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "magicxor",
                                            "createdAt":  "2025-03-27T22:17:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "onionhammer",
                                            "createdAt":  "2025-04-09T20:43:02Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2025-04-09T20:45:25Z",
        "body":  "### Description\r\n\r\nThe `Uri.TryCreate` method with `UriKind.RelativeOrAbsolute` (and probably `UriKind.Relative`) happily constructs invalid Uri and returns `true`.\r\n\r\n\r\n### Reproduction Steps\r\n\r\nMinimal repro (tested on .Net Framework 4.8):\r\n```\r\nUri.TryCreate(@\"\u003cli\u003eNo certified downloads were found for this configuration. To include beta downloads in your search, click \u003ca href=\u0027Find.aspx?lang=en-us\u0027\u003ehere\u003c/a\u003e.\u003c/li\u003e\", UriKind.RelativeOrAbsolute, out Uri Result);\r\n```\r\n\r\n### Expected behavior\r\n\r\nI understand that it is easier to validate absolute Uri (because you have scheme and host parts).\r\n\r\nHowever, for relative Uri I would expect at least:\r\n\r\n - Validating that the string contains only allowed character set (as per [RFC 3986](https://www.rfc-editor.org/rfc/rfc3986)).\r\n - Validating that the string does not contain [invalid UTF-8 sequences](https://en.wikipedia.org/wiki/UTF-8#Invalid_sequences_and_error_handling)\r\n\r\nThe example Uri above should definitely return `false` (because of `\u003c`, `\u003e`, `\"`, and ` `).\r\n\r\n### Actual behavior\r\n\r\nThis code to my great surprise returns `true`.\r\n\r\n### Regression?\r\n\r\nNo\r\n\r\n### Known Workarounds\r\n\r\nCall `Uri.IsWellFormedUriString`.\r\n\r\n### Configuration\r\n\r\n.Net Framework 4.8\r\nWindows 10 Version 10.0.19045.2251\r\nx64\r\nIt is not specific\r\nN/A\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOplqoJw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5OZ2-w",
                                           "createdAt":  "2022-11-15T14:37:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nThe `Uri.TryCreate` method with `UriKind.RelativeOrAbsolute` (and probably `UriKind.Relative`) happily constructs invalid Uri and returns `true`.\r\n\n\n### Reproduction Steps\n\nMinimal repro (tested on .Net Framework 4.8):\r\n```\r\nUri.TryCreate(@\"\u003cli\u003eNo certified downloads were found for this configuration. To include beta downloads in your search, click \u003ca href=\u0027Find.aspx?lang=en-us\u0027\u003ehere\u003c/a\u003e.\u003c/li\u003e\", UriKind.RelativeOrAbsolute, out Uri Result);\r\n```\n\n### Expected behavior\n\nI understand that it is easier to validate absolute Uri (because you have scheme and host parts).\r\n\r\nHowever, for relative Uri I would expect at least:\r\n\r\n - Validating that the string contains only allowed character set (as per [RFC 3986](https://www.rfc-editor.org/rfc/rfc3986)).\r\n - Validating that the string does not contain [invalid UTF-8 sequences](https://en.wikipedia.org/wiki/UTF-8#Invalid_sequences_and_error_handling)\r\n\r\nThe example Uri above should definitely return `false` (because of `\u003c`, `\u003e`, `\"`, and ` `).\n\n### Actual behavior\n\nThis code to my great surprise returns `true`.\n\n### Regression?\n\nNo\n\n### Known Workarounds\n\nNone except rolling your own Uri validator.\n\n### Configuration\n\n.Net Framework 4.8\r\nWindows 10 Version 10.0.19045.2251\r\nx64\r\nIt is not specific\r\nN/A\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003elevicki\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-11-15T14:37:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5OZ_f7",
                                           "createdAt":  "2022-11-15T15:01:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "levicki",
                                           "body":  "I have been informed that `Uri.TryCreate` does not perform any validation for relative `Uri`, and that I should call `Uri.IsWellFormedUriString` instead.\r\n\r\nI still believe that `Uri.TryCreate` should fail to create an invalid relative Uri.",
                                           "updatedAt":  "2022-11-15T15:03:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QCfdC",
                                           "createdAt":  "2022-12-08T14:34:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "\u003e Validating that the string contains only allowed character\r\n\r\n`System.Uri` is tolerant when it comes to characters that should canonically be escaped.\r\n\r\nWe therefore let you do things like `new Uri(\"http://foo/path?key=\u003cvalue\u003e\")` or `new Uri(\"/my path\", UriKind.Relative)`.\r\nYour example is just an extreme example of such input.\r\nForcing the user to manually escape the input before passing it to the constructor is not viable.\r\n\r\n\u003e why is there even an option for relative Uri TryCreate when there\u0027s absolutely no validation for it?\r\n\r\nThe main validation that `Uri.TryCreate(... UriKind.Relative ...)` does perform is that the input is not an absolute Uri.\r\nWe\u0027ll accept almost any input, as we can always escape it if you combine it with an absolute Uri.\r\n\r\nIf you want to see whether the string is more like what you\u0027d normally think of as a relative Uri (e.g. `\"/path/foo?key=val%20ue\"`), then checking `IsWellFormedOriginalString` may be more appropriate than relying on only `TryCreate`.\r\n\r\n\u003e Validating that the string does not contain invalid UTF-8 sequences\r\n\r\nWhat do you mean by this? The input Uri deals with are UTF-16 strings.\r\nIf you mean that we should check that the escaped values are valid UTF8, I disagree, they can be arbitrary data.",
                                           "updatedAt":  "2022-12-08T14:39:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QEwkb",
                                           "createdAt":  "2022-12-08T21:57:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "levicki",
                                           "body":  "\u003e Forcing the user to manually escape the input before passing it to the constructor is not viable.\r\n\r\nI am not talking about the constructor but about `Uri.TryCreate` method.\r\n\r\n\u003e The main validation...\r\n\r\nIt is not clear at all from the documentation that `Uri.TryCreate` validation differs based on the `UriKind` (much less that `RelativeOrAbsolute` actually means `Relative` when it comes to said validation), and in my opinion that is simply a horrible API design.\r\n\r\nValidation behavior should be consistent and not change based on a parameter which has nothing to do (in name or spirit) with validation process itself -- `UriKind` should only specifiy **what** is created (as the name implies), not also how it is validated. If I am not mistaken, the RFC doesn\u0027t specify different validation for relative .vs. absolute `Uri`.\r\n\r\n\u003e What do you mean by this? The input Uri deals with are UTF-16 strings.\r\n\r\nThat\u0027s true, but what is ultimately sent down the wire when you pass the `Uri` to `WebClient`? I am not talking about the escaped values but the path itself.",
                                           "updatedAt":  "2022-12-08T21:59:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QE3pf",
                                           "createdAt":  "2022-12-08T22:24:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "\u003e I am not talking about the constructor but about Uri.TryCreate method.\r\n\r\nLike with many other APIs that expose `Try-` variants (think `Parse` vs `TryParse`), the non-try variant is generally defined along the lines of\r\n```c#\r\nT Parse(string s)\r\n{\r\n    if (TryParse(s, out T t)) return t;\r\n    else throw ...\r\n}\r\n```\r\nThat is, the same validation applies to both. The same is generally true for constructors and `TryCreate` static factories.\r\n\r\n\u003e Validation behavior should be consistent and not change based on a parameter which has nothing to do (in name or spirit) with validation process itself -- UriKind should only specifiy what is created (as the name implies), not also how it is validated.\r\n\r\nI disagree. When you ask the API to create an Absolute Uri, you are asking it to validate that the input can be interpreted as an absolute uri. Likewise, if you ask it to create a relative Uri, you are asking it to validate that the input can be interpreted as a relative uri.\r\nIf you ask for either, then in case of Uri, you are asking if the input can be interpreted as absolute, otherwise fallback to relative.\r\n\r\nSome validation that makes sense for absolute Uris (does it have a scheme, an authority ...) is not applicable to relative Uris.\r\n\r\nI agree that the documentation could be improved. The related constructor does at least [mention](https://learn.microsoft.com/en-us/dotnet/api/system.uri.-ctor?view=net-7.0#system-uri-ctor(system-string-system-urikind)):\r\n\u003e Relative and absolute URIs have different restrictions on their format. For example, a relative URI does not require a scheme or an authority. The value you specify in uriKind must match the type of URI passed in uriString. However, if RelativeOrAbsolute is specified, the URI string can be relative or absolute.\r\n\r\nWould you be willing to contribute such improvements to the [docs repo](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System/Uri.xml)?\r\n\r\n\u003e That\u0027s true, but what is ultimately sent down the wire when you pass the Uri to WebClient\r\n\r\nThe ASCII string returned by `uri.PathAndQuery`, which ensures that the correct encoding is performed for use on the wire.",
                                           "updatedAt":  "2022-12-08T22:24:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QH09a",
                                           "createdAt":  "2022-12-09T12:08:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "levicki",
                                           "body":  "\u003e I disagree. When you ask the API to create an Absolute Uri, you are asking it to validate that the input can be interpreted as an absolute uri. Likewise, if you ask it to create a relative Uri, you are asking it to validate that the input can be interpreted as a relative uri.\r\n\r\nCan you please quote from the [RFC 3986](https://www.rfc-editor.org/rfc/rfc3986) the part where it says that relative Uri does not need to be validated against allowed character set?\r\n\r\nMy understanding of the standard tells me that the basic validation rules are the same for both absolute and relative Uri, and that absolute Uri has additional validation rules.\r\n\r\nWhat I am trying to say is that you are correctly skipping additional validation rules for absolute Uri when relative Uri is requested, but you are incorrectly skipping basic validation rules that are common for both \u0026mdash; the text I gave as an example does not constitute a valid relative Uri according to standard.",
                                           "updatedAt":  "2022-12-09T12:08:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QKADm",
                                           "createdAt":  "2022-12-09T21:28:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "As I said, `System.Uri` is tolerant when it comes to characters that should canonically be escaped.\r\nWe will allow inputs like `new Uri(\"http://foo/path?key=\u003cvalue\u003e\")` or `new Uri(\"/my path\", UriKind.Relative)`.\r\n\r\nAre these inputs valid as per the ABNF defined in RFC3986 and RFC3987? No.\r\nIf we ever document that the constructors/`TryCreate` helpers only accept inputs strictly according to said ABNF, then those docs are wrong. Please point me at any such reference and I\u0027ll happily update it.\r\n\r\nAs suggested above, if you want such validation, you should likely be using `IsWellFormedOriginalString`.",
                                           "updatedAt":  "2022-12-09T21:28:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QL0p4",
                                           "createdAt":  "2022-12-10T14:28:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "levicki",
                                           "body":  "\u003e As I said, `System.Uri` is tolerant when it comes to characters that should canonically be escaped.\r\n\r\nI don\u0027t mind the code allowing `new Uri(\"http://foo/path?key=\u003cvalue\u003e\")`.\r\n\r\nI also wouldn\u0027t mind the code allowing `new Uri(\"/path?key=\u003cvalue\u003e\", UriKind.Relative)`.\r\n\r\n Even if `\u003c` and `\u003e` aren\u0027t escaped, they are still part of the query string value, and as such the URI (absolute or relative) may be considered valid.\r\n\r\nWhat I do mind is allowing `new Uri(\"\u003cvalue\u003e\", UriKind.Relative)` -- not because `\u003c` and `\u003e` are not escaped, but because the string itself doesn\u0027t make any sense, and it doesn\u0027t constitute a valid relative URI.\r\n\r\n\u003e If we ever document that the constructors / TryCreate helpers only accept inputs strictly according to said ABNF, then those docs are wrong.\r\n\r\nThe constructor [documentation](https://learn.microsoft.com/en-us/dotnet/api/system.uri.-ctor?view=net-7.0#system-uri-ctor(system-string-system-urikind)) says in the Remarks section:\r\n\r\n\u003e Relative and absolute URIs have different restrictions on their format. For example, a relative URI does not require a scheme or an authority.\r\n\r\nWhile it is true that relative URI does not require a scheme or an authority, it should still require at least a path and/or query string.\r\n\r\nIt also says:\r\n\r\n\u003e The value you specify in `uriKind` must match the type of URI passed in `uriString`.\r\n\r\nTo me the word \"must\" implies that this relationship is enforced through some form of validation.\r\n\r\nSo, `new Uri(\"/path\", UriKind.Relative)` and maybe even `new Uri(\"/\", UriKind.Relative)` will match, but how does `new Uri(\"\u003cli\u003eitem\u003c/li\u003e\", UriKind.Relative)` match when it doesn\u0027t constitute a relative URI?\r\n\r\nFurthermore, here is an example of `System.Uri` class [documentation](https://learn.microsoft.com/en-us/dotnet/api/system.uri?view=net-7.0#security-considerations) mentioning under Security Considerations that one should use `IsWellFormedOriginalString` to validate the newly created `Uri` instance, but the code example that follows does not use it \u0026mdash; instead it uses `Uri.TryCreate`.\r\n\r\nI am not really sure I understand the logic of decoupling validation from creation -- it might be performance, or it might be allowing developers to work with custom URI schemes, but given those security considerations this is one of the cases where I believe validation should have been done on creation by default instead of being skipped by default and mentioned only at the bottom of a very long page with a wrong example to boot.\r\n\r\n\u003e As suggested above, if you want such validation, you should likely be using `IsWellFormedOriginalString`.\r\n\r\nI agree, but the problem is that said method is only mentioned under Security Considerations \u0026mdash; I think that it should be pointed out much earlier that creation of an `Uri` instance does not ensure the resulting `Uri` is RFC compliant.",
                                           "updatedAt":  "2022-12-10T14:34:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QL5oB",
                                           "createdAt":  "2022-12-10T16:11:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "\u003e I also wouldn\u0027t mind the code allowing `new Uri(\"/path?key=\u003cvalue\u003e\", UriKind.Relative)`.\r\n\u003e Even if \u003c and \u003e aren\u0027t escaped, they are still part of the query string value ...\r\n\u003e What I do mind is allowing `new Uri(\"\u003cvalue\u003e\", UriKind.Relative)`\r\n\r\nIn the first case, they are a part of the query string. In the second they are a part of the path.\r\nI don\u0027t see why the path and query should be subject to vastly different validation criteria.\r\nWould you consider `\"/foo bar\"` a valid relative Uri?\r\n\r\nI get where you\u0027re coming from and that the input may seem like garbage that shouldn\u0027t be considered valid. But you\u0027re asking us to stuff that value into a relative Uri, and that is entirely possible after proper escaping is performed, which we will do.\r\n\r\n\u003e It also says:\r\n\u003e \u003e The value you specify in uriKind must match the type of URI passed in uriString.\r\n\r\n\u003e To me the word \"must\" implies that this relationship is enforced through some form of validation.\r\n\r\nIt is enforced. `/foo` won\u0027t be considered a valid absolute Uri and `http://host/foo` won\u0027t be considered a valid relative Uri.\r\n\r\nAs far as I can tell, we never imply that the input must be fully escaped according to the relevant RFCs.\r\n\r\nWe can of course improve the docs here to mention more clearly that at least for relative Uris, there isn\u0027t a lot of validation happening.\r\n\r\n\u003e Furthermore, here is an example of System.Uri class [documentation](https://learn.microsoft.com/en-us/dotnet/api/system.uri?view=net-7.0#security-considerations) mentioning under Security Considerations that one should use IsWellFormedOriginalString to validate the newly created Uri instance, but the code example that follows does not use it — instead it uses Uri.TryCreate.\r\n\r\nThose are two separate paragraphs, talking about two different security considerations.\r\n\r\nThe first one is telling you that you can validate the input by calling `IsWellFormedOriginalString`. I don\u0027t think this one needs an example - it\u0027s the single method that you should call.\r\nIf you believe that the examples could be improved, feel free to propose a change [here](https://github.com/dotnet/dotnet-api-docs/blob/e15fd6a32cae6a52fca00d71887ba3e9ad2b880d/xml/System/Uri.xml#L199).\r\n\r\nThe second paragraph is talking about **confirming assumptions**, followed by an example of what that could mean.\r\n\r\n\u003e I am not really sure I understand the logic of decoupling validation from creation\r\n\r\nMost use cases don\u0027t care about what exact format the input string is in. They care about whether that input can be put into a Uri and trust that the encoding used on the wire will make sense.\r\n\r\nAs a user, I want inputs like `\"/foo bar\"` to continue working, and changing that would be an unacceptable breaking change, so it won\u0027t happen.",
                                           "updatedAt":  "2022-12-10T16:14:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QL5zN",
                                           "createdAt":  "2022-12-10T16:15:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "Triage:\r\n- We\u0027re unlikely to make any changes to Uri behavior here, but we can document better the sort of validation that is or isn\u0027t happening, especially for relative Uris.\r\n- Moving to Future to track improving the docs.",
                                           "updatedAt":  "2022-12-10T16:15:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QM4Fv",
                                           "createdAt":  "2022-12-11T13:18:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "levicki",
                                           "body":  "\u003e I don\u0027t see why the path and query should be subject to vastly different validation criteria.\r\n\r\nYou were the one who gave an example with query string to rationalize how unescaped characters can be part of data in the URI, not only part of the URI itself. I was just pointing out that if you don\u0027t want to validate query data that\u0027s fine with me, but I think the path should be vaildated.\r\n\r\n\u003e Would you consider `\"/foo bar\"` a valid relative Uri?\r\n\r\nIf escaping it can produce a valid path then yes, otherwise no.\r\n\r\nThere is no transformation that can turn `\"\u003cli\u003etext\u003c/li\u003e\"` into a valid relative URI, unless you consider `\u003c` and `\u003e` valid path or filename characters and allow them to be escaped. They only make sense on the right side of `?` (i.e. as part of user data in a query string).\r\n\r\n\u003e We can of course improve the docs here to mention more clearly that at least for relative Uris, there isn\u0027t a lot of validation happening.\r\n\r\nThat would be appreciated, although \"isn\u0027t a lot\" is a bit of an understatement here.\r\n\r\n\u003e Those are two separate paragraphs, talking about two different security considerations.\r\n\r\nThen they should have separate sub-headings.\r\n\r\n\u003e I don\u0027t think this one needs an example - it\u0027s the single method that you should call.\r\n\r\nI think that at the start of the `System.Uri` class documentation there should be a big fat warning that constructing an URI does not perform **any** ABNF validation as per relevant RFC, and that one should call `IsWellFormedOriginalString` to make sure that URI is actually valid before trying to use it.\r\n\r\n\u003e As a user, I want inputs like \"/foo bar\" to continue working...\r\n\r\nI understand your decision but that\u0027s a horrible argument both from API design and from the code security perpective.\r\n\r\nIt shouln\u0027t be the responsibility of `System.Uri` class to cover for poor input handling and validation on the developer\u0027s part by silently allowing invalid input just so that \"things can continue to work for the user\".\r\n\r\nI am glad that we at least agree on the documentation improvement part so thanks for that I guess.",
                                           "updatedAt":  "2022-12-11T14:34:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mWqgn",
                                           "createdAt":  "2025-04-09T20:45:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOENm_yA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "quixoticaxis",
                                                                               "createdAt":  "2025-04-09T21:14:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "onionhammer",
                                           "body":  "Just found this issue when trying to figure out why this method was returning `true` on linux and `false` on windows for the same input.",
                                           "updatedAt":  "2025-04-09T20:45:24Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "Uri.TryCreate returns true for relative Uri which contains non-valid characters",
        "labels":  [
                       "documentation",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/78909",
        "createdAt":  "2022-11-28T10:30:17Z",
        "number":  78909,
        "author":  "jakobbotsch",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-09T00:49:53Z",
        "body":  "Failure: https://dev.azure.com/dnceng-public/public/_build/results?buildId=94183\u0026view=ms.vss-test-web.build-test-results-tab\r\nConsole log: https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-78879-merge-4f7487e318c446cc92/System.Net.NameResolution.Functional.Tests/3/console.b90e962b.log?helixlogtype=result\r\n\r\nThis has failed before: #69993. Back then it was disabled in jitstress (in #70089), but note that no stress modes are set in the scenario that failed.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOWcULxA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5PNLDo",
                                           "createdAt":  "2022-11-28T10:30:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nFailure: https://dev.azure.com/dnceng-public/public/_build/results?buildId=94183\u0026view=ms.vss-test-web.build-test-results-tab\r\nConsole log: https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-78879-merge-4f7487e318c446cc92/System.Net.NameResolution.Functional.Tests/3/console.b90e962b.log?helixlogtype=result\r\n\r\nThis has failed before: #69993. Back then it was disabled in jitstress (in #70089), but note that no stress modes are set in the scenario that failed.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejakobbotsch\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-11-28T10:30:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PNO0u",
                                           "createdAt":  "2022-11-28T10:44:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jakobbotsch",
                                           "body":  "There\u0027s 2 failures in innerloop within the past 3 weeks: https://runfo.azurewebsites.net/search/timelines/?q=started%3A%7E21+definition%3Aruntime+message%3ADnsGetHostAddresses_PostCancelledToken_Throws\r\n\r\n8 failures if you include libraries-jitstress, most often under tailcallstress: https://runfo.azurewebsites.net/search/timelines/?q=started%3A%7E21+message%3ADnsGetHostAddresses_PostCancelledToken_Throws",
                                           "updatedAt":  "2022-11-28T10:44:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PNPyH",
                                           "createdAt":  "2022-11-28T10:48:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jakobbotsch",
                                           "body":  "@rzikm @wfurt @antonfirsov If the flakiness cannot be fixed, can we add some kind of retry mechanism in the test, so that we only fail if e.g. 5/5 tries fail?",
                                           "updatedAt":  "2022-11-28T10:48:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PNn0N",
                                           "createdAt":  "2022-11-28T12:10:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rzikm",
                                           "body":  "There is global retry mechanism for all networking tests, the CI fails the test if it fails 3 times in a row.",
                                           "updatedAt":  "2022-11-28T12:10:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PPu_3",
                                           "createdAt":  "2022-11-28T18:05:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "We should kick it to `outerloop` e.g. same as `DnsGetHostEntry_PostCancelledToken_Throws`. \r\nCuriously the `TestSettings.UncachedHost` is used in multiple places so it may not work with negative caching.\r\nretries may have similar problem. \r\n ",
                                           "updatedAt":  "2022-11-28T18:05:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PsbS3",
                                           "createdAt":  "2022-12-05T09:49:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rzikm",
                                           "body":  "Triage: All tests touching external host should be moved to outerloop. We should have a look in 8.0 timeframe",
                                           "updatedAt":  "2022-12-05T09:49:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZxQvE",
                                           "createdAt":  "2023-04-12T23:16:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "carlossanlop",
                                           "body":  "I\u0027m seeing this test fail in 6.0. @antonfirsov can you please disable the test in the servicing branches?\r\n\r\nUnfortunately the original issue has very old links which are already gone, so I can\u0027t tell for sure if the failure was the same.\r\n\r\nThe failure I am seeing in 6.0 is weird, because only the build output shows up, but is no test result link being generated.\r\n\r\n- PR: https://github.com/dotnet/runtime/pull/84705\r\n- Queue: `Libraries Test Run checked coreclr windows x64 Debug`\r\n- Job: https://dev.azure.com/dnceng-public/public/_build/results?buildId=236706\u0026view=logs\u0026j=a68d6dca-d11c-59af-6c4a-cf852cb20e3a\u0026t=28d89dec-7e09-5293-5fd2-aeb03e603264\r\n\r\n```\r\n  Uploading payload for D:\\a\\_work\\1\\s\\.packages\\microsoft.dotnet.helix.sdk\\6.0.0-beta.23211.7\\tools\\azure-pipelines\\reporter\r\n  Uploading payload for C:\\Users\\cloudtest\\AppData\\Local\\Temp\\014c4abfe6534f26a0f156d48655d35e\r\n  Created job list at https://helixde107v0xdeko0k025g8.blob.core.windows.net/helix-job-9831ff69-d2cf-4bae-bfb9-946b611bcbbd77c2af293af4a51bf/job-list-c7ea2267-2b1c-4c0b-b4d3-47a0c2ad07ad.json\r\n  Sent Helix Job; see work items at https://helix.dot.net/api/jobs/e1e13316-1c99-4285-8544-eff1b3ee83f0/workitems?api-version=2019-06-17\r\n  Waiting for completion of job e1e13316-1c99-4285-8544-eff1b3ee83f0 on Windows.10.Amd64.Open\r\n  Job e1e13316-1c99-4285-8544-eff1b3ee83f0 on Windows.10.Amd64.Open is completed with 277 finished work items.\r\n  Stopping Azure Pipelines Test Run net6.0-windows-Debug-x64-CoreCLR_checked-Windows.10.Amd64.Open\r\nD:\\a\\_work\\1\\s\\.packages\\microsoft.dotnet.helix.sdk\\6.0.0-beta.23211.7\\tools\\azure-pipelines\\AzurePipelines.MultiQueue.targets(43,5): error : Test System.Net.NameResolution.Tests.GetHostAddressesTest_Cancellation.DnsGetHostAddresses_PostCancelledToken_Throws has failed. Check the Test tab for details. [D:\\a\\_work\\1\\s\\src\\libraries\\sendtohelixhelp.proj]\r\n##[error].packages\\microsoft.dotnet.helix.sdk\\6.0.0-beta.23211.7\\tools\\azure-pipelines\\AzurePipelines.MultiQueue.targets(43,5): error : (NETCORE_ENGINEERING_TELEMETRY=Test) Test System.Net.NameResolution.Tests.GetHostAddressesTest_Cancellation.DnsGetHostAddresses_PostCancelledToken_Throws has failed. Check the Test tab for details.\r\n\r\nBuild FAILED.\r\n```",
                                           "updatedAt":  "2023-04-12T23:16:49Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "System.Net.NameResolution.Tests.GetHostAddressesTest_Cancellation.DnsGetHostAddresses_PostCancelledToken_Throws failing in CI",
        "labels":  [
                       "area-System.Net",
                       "disabled-test",
                       "test-run-core",
                       "blocking-clean-ci-optional"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/79198",
        "createdAt":  "2022-12-04T05:20:04Z",
        "number":  79198,
        "author":  "xljiulang",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCrulMw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GSPP",
                                            "createdAt":  "2022-12-04T19:45:13Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2022-12-06T08:51:36Z",
        "body":  "In a real-world scenario, we occasionally encounter non-standard http services that are not compatible with Escape upper query values, resulting in an `HttpClient` request with a 403 status code.\r\n```c#\r\nvar uri = new Uri(\"https://a.com/%e6%88%91.jpg\");\r\nvar pathQuery = uri.PathAndQuery; // %E6%88%91.jpg\r\nDebug.Assert(\"/%e6%88%91.jpg\" == pathQuery); // failure here\r\n\r\nvar httpClient = new HttpClient();\r\nvar response = await httpClient.GetAsync(uri);\r\nvar statusCode = response.StatusCode; // 403 here because of %E6%88%91.jpg\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOT889Cg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5PprRU",
                                           "createdAt":  "2022-12-04T05:20:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nIn a real-world scenario, we occasionally encounter non-standard http services that are not compatible with Escape capitalized parameter values, resulting in an `HttpClient` request with a 403 status code.\r\n```c#\r\nvar uri = new Uri(\"https://a.com/%e6%88%91.jpg\");\r\nvar pathQuery = uri.PathAndQuery; // %E6%88%91.jpg\r\nDebug.Assert(\"/%e6%88%91.jpg\" == pathQuery); // failure here\r\n\r\nvar httpClient = new HttpClient();\r\nvar response = await httpClient.GetAsync(uri);\r\nvar statusCode = response.StatusCode; // 403 here because of %E6%88%91.jpg\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003exljiulang\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-12-04T05:20:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PwtVk",
                                           "createdAt":  "2022-12-05T21:11:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "The fact that we change the casing of already-escaped values is unintentional.\r\nThis is another side-effect of the internal re-creation of the string when we encounter non-ASCII characters (similar to https://github.com/dotnet/runtime/issues/1487#issuecomment-676402609 and https://github.com/dotnet/runtime/issues/72632#issue-1313675645).\r\n\r\nAs a workaround, if you are certain that the Uri string is already fully escaped, you can do this:\r\n```c#\r\nnew Uri(uriString, new UriCreationOptions { DangerousDisablePathAndQueryCanonicalization = true });\r\n```\r\n\r\nIf you are not sure if the value is fully escaped, you can post-process the `PathAndQuery` and lower-case any hex encoding like so: https://gist.github.com/MihaZupan/2976e92211fea1a1c3e7a4522ab06cb2\r\n\r\nMoving to Future for now, though any fix here is likely going to overlap with #72632.",
                                           "updatedAt":  "2022-12-05T21:11:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Pzz0K",
                                           "createdAt":  "2022-12-06T08:51:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xljiulang",
                                           "body":  "Thank you for your answer @MihaZupan ",
                                           "updatedAt":  "2022-12-06T08:51:36Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "How do I keep the Query parameter of the System.Uri in lower case",
        "labels":  [
                       "bug",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/81411",
        "createdAt":  "2023-01-31T06:52:57Z",
        "number":  81411,
        "author":  "lsoft",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC5eIQg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Peter-Juhasz",
                                            "createdAt":  "2024-07-18T06:42:04Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-02-07T03:45:21Z",
        "body":  "### Background and motivation\r\n\r\nNo way to decode XML-encoded string from `Span` exists now. We forced to allocate an intermediate string:\r\n\r\n```csharp\r\nvar mystring = @\"my string !@#$%^\u0026amp;*()_+|-=\\\u0026#39;;[]{},./\u0026lt;\u0026gt;?\".AsSpan();\r\nstring result = global::System.Net.WebUtility.HtmlDecode(mystring.ToString());\r\nreturn result;\r\n```\r\n\r\n### API Proposal\r\n\r\n```diff\r\npublic class HtmlDecode\r\n{\r\n+    public bool HasSomethingToHtmlDecode(ReadOnlySpan\u003cchar\u003e source); //such method already exists, but not public yet\r\n+    public string HtmlDecode(ReadOnlySpan\u003cchar\u003e source);\r\n      //OR\r\n+      public bool TryHtmlDecode(ReadOnlySpan\u003cchar\u003e source, Span\u003cchar\u003e destination, out int charsWritten);\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\n```csharp\r\nvar mystring = @\"my string !@#$%^\u0026amp;*()_+|-=\\\u0026#39;;[]{},./\u0026lt;\u0026gt;?\".AsSpan();\r\nstring result = global::System.Net.WebUtility.HtmlDecode(mystring);\r\nreturn result;\r\n```\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\nNo risks.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOVKXeXQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5UCK_1",
                                           "createdAt":  "2023-01-31T06:53:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nNo way to decode XML-encoded string from `Span` exists now. We forced to allocate an intermediate string:\r\n\r\n```csharp\r\nvar mystring = @\"my string !@#$%^\u0026amp;*()_+|-=\\\u0026#39;;[]{},./\u0026lt;\u0026gt;?\".AsSpan();\r\nstring result = global::System.Net.WebUtility.HtmlDecode(mystring.ToString());\r\nreturn result;\r\n```\n\n### API Proposal\n\n```diff\r\npublic class HtmlDecode\r\n{\r\n+    public ReadOnlySpan\u003cchar\u003e HtmlDecode(ReadOnlySpan\u003cchar\u003e s);\r\n      //OR\r\n+    public string HtmlDecode(ReadOnlySpan\u003cchar\u003e s);\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\nvar mystring = @\"my string !@#$%^\u0026amp;*()_+|-=\\\u0026#39;;[]{},./\u0026lt;\u0026gt;?\".AsSpan();\r\nstring result = global::System.Net.WebUtility.HtmlDecode(mystring.ToString());\r\nreturn result;\r\n```\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\nNo risks.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003elsoft\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Net`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-01-31T06:53:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UDkbr",
                                           "createdAt":  "2023-01-31T11:56:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rzikm",
                                           "body":  "\u003e `+    public ReadOnlySpan\u003cchar\u003e HtmlDecode(ReadOnlySpan\u003cchar\u003e s);`\r\n\r\nHow would this work? Would it allocate a new char array and return ROS to it?\r\n\r\nIf you want span-based API, then It would need to accept Span\u003cchar\u003e and work in-place, or accept another span as destination.",
                                           "updatedAt":  "2023-01-31T11:56:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UDraH",
                                           "createdAt":  "2023-01-31T12:19:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lsoft",
                                           "body":  "@rzikm yeah, I can easily miss here. But if the string no need to be decoded actually (for example `test123` has nothing to decode), then here probably no sense to allocate for result string. I guess we want to process such situation efficiently.\r\n\r\nmay be something like this:\r\n\r\n```diff\r\npublic class HtmlDecode\r\n{\r\n+    public bool HasSomethingToHtmlDecode(ReadOnlySpan\u003cchar\u003e s);\r\n+    public string HtmlDecode(ReadOnlySpan\u003cchar\u003e s);\r\n}\r\n```\r\n\r\nfrom my POV, I will be happy with any API without intermediate string allocation.\r\n",
                                           "updatedAt":  "2023-01-31T12:19:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UD4kO",
                                           "createdAt":  "2023-01-31T13:03:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rzikm",
                                           "body":  "\u003e I will be happy with any API without intermediate string allocation.\r\n\r\nIt seems to me that the other method (`string HtmlDecode(ReadOnlySpan\u003cchar\u003e s)`) might be enough. You are still going to use the result as `string`.\r\n\r\nIf you would want to avoid allocating the return value as a string, then I suppose you would want something like\r\n\r\n`public int HtmlDecode(ReadOnlySpan\u003cchar\u003e source, Span\u003cchar\u003e destination)`. I.e. decode `source` to `destination` and return the length of the result. In case the `destination` span is too short, only first `destination.Length` characters are stored.\r\n\r\nOr, something similar, maybe we already use such a pattern elsewhere in the codebase.",
                                           "updatedAt":  "2023-01-31T13:03:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UD6VL",
                                           "createdAt":  "2023-01-31T13:07:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC3tF-w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rzikm",
                                                                               "createdAt":  "2023-01-31T13:23:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2023-03-13T14:40:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "The pattern is usually\r\n```c#\r\npublic static bool TryFoo(ReadOnlySpan\u003cchar\u003e source, Span\u003cchar\u003e destination, out int charsWritten);\r\n```\r\n\r\nThere\u0027s a very similar discussion on #40603.",
                                           "updatedAt":  "2023-01-31T13:50:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UED8_",
                                           "createdAt":  "2023-01-31T13:27:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC1KCxw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "Zintom",
                                                                               "createdAt":  "2023-01-31T17:28:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "lsoft",
                                           "body":  "@rzikm `public int HtmlDecode(ReadOnlySpan\u003cchar\u003e source, Span\u003cchar\u003e destination)` assumes copying even if the string is not needed to be decoded. Not sure we want such pattern... anyway, maintainers will decide :)",
                                           "updatedAt":  "2023-01-31T13:27:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UEJyA",
                                           "createdAt":  "2023-01-31T13:38:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC1KC0g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Zintom",
                                                                               "createdAt":  "2023-01-31T17:28:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "Zintom",
                                                                               "createdAt":  "2023-01-31T17:28:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "well, where are you getting the input from, and what are you doing with the decoded value?",
                                           "updatedAt":  "2023-01-31T13:38:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UEKOx",
                                           "createdAt":  "2023-01-31T13:39:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC1I5Yg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MihaZupan",
                                                                               "createdAt":  "2023-01-31T13:50:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "gfoidl",
                                           "body":  "In https://github.com/dotnet/runtime/issues/81411#issuecomment-1410311499\r\n```diff\r\n-public static bool TryFoo(ReadOnlySpan\u003cchar\u003e source, ReadOnlySpan\u003cchar\u003e destination, out int charsWritten);\r\n+public static bool TryFoo(ReadOnlySpan\u003cchar\u003e source, Span\u003cchar\u003e destination, out int charsWritten);\r\n```\r\nI\u0027ll hide my comment after the copy pasta is fixed.",
                                           "updatedAt":  "2023-01-31T14:08:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5USPoZ",
                                           "createdAt":  "2023-02-02T17:00:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "antonfirsov",
                                           "body":  "Triage: sounds like a valuable idea, the exact API shape is yet to be figured out. Not critical for 8.0.",
                                           "updatedAt":  "2023-02-02T17:00:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UlKy5",
                                           "createdAt":  "2023-02-06T12:49:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "Any thoughts on this https://github.com/dotnet/runtime/issues/81411#issuecomment-1410374784 @lsoft?",
                                           "updatedAt":  "2023-02-06T12:49:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UlOD5",
                                           "createdAt":  "2023-02-06T13:01:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lsoft",
                                           "body":  "@MihaZupan I think that, from API perspective, what I\u0027m doing with the result is of little importance. API should not perform useless operations, and copying bytes from one place to another is not a subject of `HtmlDecode` API.\r\n\r\nI tried to express my feelings that no allocation + no expesive ops should be performed if possible.\r\n\r\nfrom a general point of view returns `Span` is more flexible than return `string`, because of `Span\u003cchar\u003e` can be easily converted to `string`.\r\n\r\nso I think the following API would be ideal:\r\n\r\n```C#\r\npublic class HtmlDecode\r\n{\r\n+      public bool TryHtmlDecode(ReadOnlySpan\u003cchar\u003e source, Span\u003cchar\u003e destination, out int charsWritten);\r\n}\r\n```\r\n\r\nthat method shouldn\u0027t copy if `source` has nothing decode.\r\n\r\nanyway, maintainers will weigth the options and will choose the optimal one.",
                                           "updatedAt":  "2023-02-06T13:01:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UlUV3",
                                           "createdAt":  "2023-02-06T13:18:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "\u003e I think that, from API perspective, what I\u0027m doing with the result is of little importance.\r\n\r\nUsage does matter.\r\nIf your input is always a string, then Span overloads may not be needed.\r\nIf you always allocate the string for the output, overloads that copy into a destination span may not be needed.\r\nIf the 99% case you\u0027re dealing with is data that is already decoded (wouldn\u0027t change), then what we may actually want is a `bool NeedsDecoding(ReadOnlySpan\u003cchar\u003e source)` helper instead.\r\n\r\n\u003e that method shouldn\u0027t copy if source has nothing decode.\r\n\r\nThat would be inconsistent with all other helpers with a similar API shape we\u0027ve exposed.",
                                           "updatedAt":  "2023-02-06T13:18:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ul08M",
                                           "createdAt":  "2023-02-06T14:47:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "Also, with the Try pattern, we enforce that a false return value is only used for a single failure reason; all other failure reasons need to manifest as exceptions.  With such span-based patterns, invariably a false return means the destination buffer isn\u0027t large enough to perform the full operation.  We wouldn\u0027t also use a false return to mean the operation was fully performed, as it makes it ambiguous as to what it means, and it breaks consumption, such as a retry loop that grows the output buffer in order to call the method again after it returns false.",
                                           "updatedAt":  "2023-02-06T14:47:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Upd5d",
                                           "createdAt":  "2023-02-07T03:44:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lsoft",
                                           "body":  "guys, I think the unmet needs here is visible fine. This need is the primary point I want to highlight. The specific method signature is secondary point. I\u0027m fine with any decision that you will choose. Thanks! 👍",
                                           "updatedAt":  "2023-02-07T03:45:21Z"
                                       }
                                   ],
                         "totalCount":  14
                     },
        "title":  "[API Proposal]: Add System.Net.WebUtility.HtmlDecode(ReadOnlySpan\u003cchar\u003e s)",
        "labels":  [
                       "api-suggestion",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/83201",
        "createdAt":  "2023-03-09T13:29:32Z",
        "number":  83201,
        "author":  "PaulusParssinen",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCvbnuQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Wraith2",
                                            "createdAt":  "2023-03-10T01:16:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rzikm",
                                            "createdAt":  "2023-03-13T07:52:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kronic",
                                            "createdAt":  "2023-03-15T08:32:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Nuklon",
                                            "createdAt":  "2023-04-12T12:53:25Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2024-05-12T19:33:47Z",
        "body":  "### Background and motivation\r\n\r\nPhysicalAddress already provides `[Try]Parse` overloads and a `ToString` for `IFormattable`. I propose giving some love to this type and implementing `ISpanFormattable` and `ISpanParsable\u003cPhysicalAddress\u003e`. \r\n\r\nThese could now light up in various contexts, for example, ``ISpanFormattable`` would allow `PhysicalAddress` light up in the string interpolated handlers.\r\n\r\nWhile not being as important as `IPAddress` and being hidden in namespace below, I\u0027d argue PhysicalAddress is important enough networking primitive type to warrant these interfaces.\r\n\r\n### API Proposal\r\n\r\n```diff\r\nnamespace System.Net.NetworkInformation;\r\n\r\npublic class PhysicalAddress\r\n+    : ISpanFormattable, ISpanParsable\u003cPhysicalAddress\u003e\r\n{\r\n    // I(Span)Parsable overloads\r\n    // can delegate to existing public (Try)Parse(..) overloads.\r\n+    static bool IParsable\u003cPhysicalAddress\u003e.TryParse(string? s, IFormatProvider? provider, out PhysicalAddress? result);\r\n+    static bool ISpanParsable\u003cPhysicalAddress\u003e.TryParse(ReadOnlySpan\u003cchar\u003e s, IFormatProvider? provider, out PhysicalAddress? result);\r\n\r\n+    static PhysicalAddress IParsable\u003cPhysicalAddress\u003e.Parse(string s, IFormatProvider? provider);\r\n+    static PhysicalAddress ISpanParsable\u003cPhysicalAddress\u003e.Parse(ReadOnlySpan\u003cchar\u003e s, IFormatProvider? provider);\r\n\r\n    // IFormattable, can delegate to existing public ToString().\r\n+    string IFormattable.ToString(string? format, IFormatProvider? formatProvider);\r\n\r\n    // ISpanFormattable\r\n    // Has no existing overload to delegate to, should it be publicly provided like IPAddress and IPNetwork?\r\n+    bool ISpanFormattable.TryFormat(Span\u003cchar\u003e destination, out int charsWritten, ReadOnlySpan\u003cchar\u003e format, IFormatProvider? provider);\r\n    // e.g. Should we provide a following?\r\n+    public bool TryFormat(Span\u003cchar\u003e destination, out int charsWritten);\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\n```csharp\r\nPhysicalAddress physicalAddress = ...;\r\nstring s = $\"The address is {physicalAddress}\";\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\n\u003e [!Note]\r\n\u003e Could also implement `IUtf8SpanFormattable` and `IUtf8SpanParsable` but should that be separate proposal?\r\n\r\nCould also just implement `IFormattable` and ``IParsable``, but please, don\u0027t.\r\n\r\n### Risks\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOV4kTfw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5XJXkv",
                                           "createdAt":  "2023-03-09T13:29:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2023-03-09T13:29:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5XKeTj",
                                           "createdAt":  "2023-03-09T16:27:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nPhysicalAddress already provides `[Try]Parse` overloads and a `ToString` for `IFormattable`. I propose giving some love to this type and implementing `ISpanFormattable` and `ISpanParsable\u003cPhysicalAddress\u003e`. \r\n\r\nThese could now light up in various contexts, for example, ``ISpanFormattable`` would allow `PhysicalAddress` it to light up in the string interpolated handlers.\r\n\r\nWhile not being as important as `IPAddress` and being \"hidden\" in namespace below, I\u0027d argue PhysicalAddress is important enough networking \"primitive\" type to warrant these interfaces.\n\n### API Proposal\n\n```diff\r\nnamespace System.Net.NetworkInformation;\r\n\r\npublic class PhysicalAddress\r\n+    : ISpanFormattable, ISpanParsable\u003cPhysicalAddress\u003e\r\n{\r\n    // I(Span)Parsable overloads\r\n    // can delegate to existing (Try)Parse overloads. IFormatProvider provider would be explicitly ignored I presume.\r\n+    public static bool IParsable\u003cPhysicalAddress\u003e.TryParse(string? s, IFormatProvider? provider, out PhysicalAddress? result);\r\n+    public static bool ISpanParsable\u003cPhysicalAddress\u003e.TryParse(ReadOnlySpan\u003cchar\u003e s, IFormatProvider? provider, out PhysicalAddress? result);\r\n\r\n+    public static PhysicalAddress IParsable\u003cPhysicalAddress\u003e.Parse(string s, IFormatProvider? provider);\r\n+    public static PhysicalAddress ISpanParsable\u003cPhysicalAddress\u003e.Parse(ReadOnlySpan\u003cchar\u003e s, IFormatProvider? provider);\r\n\r\n    // IFormattable, can delegate to existing ToString(). format and provider would be explicitly ignored I presume.\r\n+    public string IFormattable.ToString(string? format, IFormatProvider? formatProvider);\r\n\r\n    // ISpanFormattable\r\n    // Has no existing overloads to delegate to, should they be publicly provided like IPAddress?\r\n+    public bool ISpanFormattable.TryFormat(Span\u003cchar\u003e destination, out int charsWritten, ReadOnlySpan\u003cchar\u003e format, IFormatProvider? provider);\r\n    // e.g. Should we provide a following simpler overload like the convention used in IPAddress?\r\n+    public bool TryFormat(Span\u003cchar\u003e destination, out int charsWritten);\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\nPhysicalAddress physicalAddress = ...;\r\nstring s = $\"The address is {physicalAddress}\";\r\n```\r\n\n\n### Alternative Designs\n\nCould also just implement `IFormattable` and ``IParsable``.\n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ePaulusParssinen\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Net`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-03-09T16:27:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5XiRN_",
                                           "createdAt":  "2023-03-14T18:15:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC36tjw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PaulusParssinen",
                                                                               "createdAt":  "2023-03-15T22:09:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "CarnaViire",
                                           "body":  "Triage: putting to Future for now as there doesn\u0027t seem to be much customer ask",
                                           "updatedAt":  "2023-03-14T18:15:37Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[API Proposal]: Implement ISpanParsable/Formattable for PhysicalAddress",
        "labels":  [
                       "api-suggestion",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/84776",
        "createdAt":  "2023-04-13T14:43:50Z",
        "number":  84776,
        "author":  "antonfirsov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCzOjjw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MihaZupan",
                                            "createdAt":  "2023-04-13T15:29:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "benaadams",
                                            "createdAt":  "2023-04-13T16:34:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "neon-sunset",
                                            "createdAt":  "2023-04-13T17:06:12Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "NN---",
                                            "createdAt":  "2023-04-14T07:01:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "iSazonov",
                                            "createdAt":  "2023-10-12T06:40:14Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2023-10-13T11:24:49Z",
        "body":  "This is a follow up on #83971. While there is no need for a new API, there are two aspects where `IPAddress` could be improved for IPv6:\r\n1. To avoid an extra allocation when working with IPv6 addresses, consider embedding the storage buffer instead of [allocating it on the heap](https://github.com/dotnet/runtime/blob/8096837962854b1251d1860a6fd447b28b7347e4/src/libraries/System.Net.Primitives/src/System/Net/IPAddress.cs#L47) (eg. by storing an `UInt128`). This would make IPv4 instances larger, but `System.Net.*` code is using dual-stack sockets all the way these days. To counter the size grow, we can also consider removing the caching for `GetHashCode` and `ToString`. That logic is inherited from .NET Framework, and isn\u0027t necessarily beneficial.\r\n2. Consider storing the backing buffer in network-order, so `TryWriteBytes` becomes a simple copy.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOaPwg3A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Z1H9V",
                                           "createdAt":  "2023-04-13T14:43:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThis is a follow up on #83971. While there is no need for a new API, there are two aspects where `IPAddress` could be improved for IPv6:\r\n- To avoid an extra allocation when working with IPv6 addresses, consider embedding the storage buffer instead of [allocating it on the heap](https://github.com/dotnet/runtime/blob/8096837962854b1251d1860a6fd447b28b7347e4/src/libraries/System.Net.Primitives/src/System/Net/IPAddress.cs#L47) (eg. by storing an `UInt128`). This would make IPv4 instances larger, but `System.Net.*` code is using dual-stack sockets all the way these days.\r\n- Consider storing the backing buffer in network-order, so `TryWriteBytes` becomes a simple copy.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eantonfirsov\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-04-13T14:43:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Z10Al",
                                           "createdAt":  "2023-04-13T16:46:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "antonfirsov",
                                           "body":  "Triage:\r\n\r\n- Re point 1: we need to gather statistics about IPv4 usage (eg. from aspnet) to make sure we are doing more good than harm before committing to such a change.\r\n- Re point 2:  we need to make sure that changing the byte order doesn\u0027t harm the performance of other methods.\r\n\r\nMoving to Future.",
                                           "updatedAt":  "2023-04-13T16:59:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5o_CDc",
                                           "createdAt":  "2023-10-13T11:24:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "iSazonov",
                                           "body":  "In addition to direct use in sockets, IP Address can also be used in a scenario that is not addressed in any way in the API - filtering by address and/or network. See https://github.com/microsoft/reverse-proxy/issues/1707\r\nIf we consider some web application that filters requests by ip or networks of which there are several tens or hundreds of thousands, then copying the address every time would be too wasteful.\r\nAlso I believe that most algorithms assume that the address is in network order. For example, I was considering `poptrie` to implement `IPNetworkDictionary`. (For routers, this returns nexthop, in a web application we could get any type of T.)",
                                           "updatedAt":  "2023-10-13T11:24:49Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Optimize IPv6 IPAddress storage",
        "labels":  [
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/84955",
        "createdAt":  "2023-04-18T00:03:28Z",
        "number":  84955,
        "author":  "MattMcL4475",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCwalnA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0xced",
                                            "createdAt":  "2023-05-31T18:04:16Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-02-16T17:36:56Z",
        "body":  "### Description\r\n\r\nCurrently, the `Query` property of a `Uri` starts with a question mark `?`:\r\n\r\n```csharp\r\nvar uri = new Uri(\"foo://example.com:8042/over/there?name=ferret#nose\");\r\nConsole.WriteLine(uri.Query);\r\n// Result: ?name=ferret\r\n```\r\n\r\nThis is incorrect according to [RFC 3986 - Uniform Resource Identifier (URI): Generic Syntax](https://datatracker.ietf.org/doc/html/rfc3986).  The question mark is a `delimiter`, and `query` does not include the question mark.  .NET is the outlier for how it handles `Uri.Query` (see below), and it\u0027s been 18 years since the `RFC 3986` standard.  This inconsistent usage of the question mark is likely a causative factor for [the common inconsistent usage of the question mark in Azure SAS tokens](https://github.com/MicrosoftDocs/azure-docs/issues/67749#issuecomment-1512078229).  `Uri.Fragment` has this same issue too (it also incorrectly starts with a delimiter `#`).\r\n\r\n### HTTP/1.1 [RFC 3986]\r\n_[1.2.3.  Hierarchical Identifiers](https://datatracker.ietf.org/doc/html/rfc3986#section-1.2.3)\r\nThe generic syntax uses the slash (\"/\"), question mark (\"?\"), and number sign (\"#\") characters to delimit components that are significant to the generic parser\u0027s hierarchical interpretation of an identifier._\r\n\r\n_[3.  Syntax Components](https://datatracker.ietf.org/doc/html/rfc3986#section-3)_\r\n```\r\n  foo://example.com:8042/over/there?name=ferret#nose\r\n  \\_/   \\______________/\\_________/ \\_________/ \\__/\r\n   |           |            |            |        |\r\nscheme     authority       path        query   fragment\r\n   |   _____________________|__\r\n  / \\ /         \\\r\n  urn:example:animal:ferret:nose\r\n```\r\n\r\nNotice that in Java, Go, Python, and PHP, the canonical URI implementations do NOT include the `?` in the query:\r\n\r\n## Java\r\n```java\r\nimport java.net.URI;\r\nimport java.net.URISyntaxException;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        try {\r\n            URI uri = new URI(\"foo://example.com:8042/over/there?name=ferret#nose\");\r\n            System.out.println(uri.getQuery());\r\n        } catch (URISyntaxException e) {\r\n            System.out.println(\"Error: \" + e.getMessage());\r\n        }\r\n    }\r\n}\r\n```\r\nResult: `name=ferret`\r\n\r\n## Go\r\n```golang\r\npackage main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"net/url\"\r\n)\r\n\r\nfunc main() {\r\n\turiString := \"foo://example.com:8042/over/there?name=ferret#nose\"\r\n\turi, err := url.Parse(uriString)\r\n\t\r\n\tif err != nil {\r\n\t\tfmt.Println(\"Error parsing URI:\", err)\r\n\t\treturn\r\n\t}\r\n\r\n\tfmt.Println(uri.Query().Encode())\r\n}\r\n```\r\nResult: `name=ferret`\r\n\r\n## Python\r\n```python\r\nfrom urllib.parse import urlparse\r\nurl = urlparse(\"foo://example.com:8042/over/there?name=ferret#nose\")\r\nprint(url.query)\r\n```\r\nResult: `name=ferret`\r\n\r\n## PHP\r\n```php\r\n\u003c?php\r\n$url = \"foo://example.com:8042/over/there?name=ferret#nose\";\r\n$query = parse_url($url, PHP_URL_QUERY);\r\nprint_r($query);\r\n?\u003e\r\n```\r\nResult: `name=ferret`\r\n\r\n\r\n## Reproduction Steps\r\n\r\n```csharp\r\nvar uri = new Uri(\"foo://example.com:8042/over/there?name=ferret#nose\");\r\n\r\nif (uri.Query.StartsWith(\u0027?\u0027))\r\n{\r\n    throw new Exception(\"According to RFC 3986, a URI\u0027s query segment shall not include the question mark\");\r\n}\r\n```\r\n\r\n### Expected behavior\r\n\r\nIt\u0027s expected that the question mark `?` is **not** included in the string returned by `uri.Query`, so we should expect: \r\n```csharp\r\nvar uri = new Uri(\"foo://example.com:8042/over/there?name=ferret#nose\");\r\nConsole.WriteLine(uri.Query);\r\n// name=ferret\r\n```\r\nHowever, a breaking change is not the correct solution to this (please see the Proposed Solution section below).\r\n\r\n### Actual behavior\r\n\r\nCurrently, the question mark _is_ included in uri.Query:\r\n\r\n```csharp\r\nvar uri = new Uri(\"foo://example.com:8042/over/there?name=ferret#nose\");\r\nConsole.WriteLine(uri.Query);\r\n// ?name=ferret\r\n```\r\n\r\n### Regression?\r\n\r\nNo, `Uri.Query` in [.NET Framework 1.1](https://learn.microsoft.com/en-us/dotnet/api/system.uri?view=netframework-1.1) (February 2002) pre-dates RFC 3986 (January 2005).  Although it\u0027s been a considerable amount of time, .NET is the outlier for how it handles `Uri.Query`, and it\u0027s been 18 years since the `RFC 3986` standard.  This inconsistent usage of the question mark is likely a causative factor for [the common inconsistent usage of the question mark in Azure SAS tokens](https://github.com/MicrosoftDocs/azure-docs/issues/67749#issuecomment-1512078229).\r\n\r\n### Known Workarounds\r\n```csharp\r\nuri.Query.TrimStart(\u0027?\u0027);\r\n```\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\nThe root cause is here:\r\nhttps://github.com/dotnet/runtime/blob/9aefa9daa141bb7d9ba3f2b373d4b050c9b243fe/src/libraries/System.Private.Uri/src/System/Uri.cs#L1091\r\n\r\n` | UriComponents.KeepDelimiter` causes the delimiter to be included in both `Uri.Query` and `Uri.Fragment`.\r\n\r\n# Proposed Solution\r\n\r\n1.  Add `Uri.QueryRfc3986` and `Uri.FragmentRfc3986` that do not start with delimiters\r\n2.  Annotate `Uri.Query` with the attribute:\r\n`[Obsolete(message: \"This starts with the question mark delimiter (\u0027?\u0027), which is non-compliant with RFC 3986. Use QueryRfc3986 instead.\", error: false)]`\r\n3.  Annotate `Uri.Fragment` with the attribute:\r\n`[Obsolete(message: \"This starts with the hash delimiter (\u0027#\u0027), which is non-compliant with RFC 3986. Use FragmentRfc3986 instead.\", error: false)]`\r\n\r\n\r\nThe result would then look like this:\r\n\r\n```csharp\r\nvar uri = new Uri(\"foo://example.com:8042/over/there?name=ferret#nose\");\r\n\r\n#pragma warning disable CS0612 // Type or member is obsolete\r\nConsole.WriteLine(uri.Query);\r\n// Result: ?name=ferret\r\n#pragma warning restore CS0612\r\n\r\nConsole.WriteLine(uri.QueryRfc3986);\r\n// Result: name=ferret\r\n\r\n#pragma warning disable CS0612 // Type or member is obsolete\r\nConsole.WriteLine(uri.Fragment);\r\n// Result: #nose\r\n#pragma warning restore CS0612\r\n\r\nConsole.WriteLine(uri.FragmentRfc3986);\r\n// Result: nose\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOWvWuJA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5aVith",
                                           "createdAt":  "2023-04-20T01:47:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "cc: @dotnet/ncl\r\n\r\nYes, according to RFC3986, `query` is the value following the `?` separator.\r\nBut I would argue that a lot of people (myself included) think of the query as including the leading `?`.\r\n\r\nThe exact same quirk applies to the `Fragment` property. The `#` character is considered as only the delimiter by the spec.\r\nBy extension, APIs on `UriBuilder` follow a similar pattern. Note that `UriBuilder.Query/Fragment` accept values without the leading `?`/`#` and will add one for you if not already present.\r\nASP.NET also exposes a `QueryString` type that always includes the leading separator.\r\n.NET behavior should continue to match between all of these.\r\n\r\nAs you point out, `Uri.Query` has behaved this way for a very long time, and yet I don\u0027t see other issues in this repo questioning the behavior. A rough GitHub code search shows tens of thousands of uses of the property, where ~10% of those are followed by some combination of `.Substring(1)`, `.TrimStart(\u0027?\u0027)`, `.Replace(\"?\", \"\")`.\r\nA change in behavior is unacceptable in this case, as it would break tons of existing uses, including those currently using workarounds such as `Substring(1)`.\r\nI also do not believe that possible confusion due to the extra `?` warrants obsoleting this API. Misuse in the minority case should be easy to catch by running the application/test.\r\nAugmenting the API documentation (especially IntelliSense) to point out this behavior would be a useful addition though:\r\n```diff\r\n-Gets any query information included in the specified URI.\r\n+Gets any query information included in the specified URI, including the leading \u0027?\u0027 character if not empty.\r\n-Gets the escaped URI fragment.\r\n+Gets the escaped URI fragment, including the leading \u0027#\u0027 character if not empty.\r\n```\r\n\r\nWhile comparing the behavior of different language standard libraries, JavaScript does include the leading `?`/`#`:\r\n```log\r\nnew URL(\"http://example.com:8042/over/there?name=ferret#nose\").search\r\n\u003e \u0027?name=ferret\u0027\r\nnew URL(\"http://example.com:8042/over/there?name=ferret#nose\").hash\r\n\u003e \u0027#nose\u0027\r\n```\r\n\r\n---\r\n\r\nHow impactful are the inconsistencies in Azure Storage\u0027s documentation in practice?\r\nMy (of course biased) view is that developers working with REST APIs are/should be aware of what a `?` in a url is.\r\n\r\nWith updates to the documentation to point out that leading delimiters are included by these properties, do you still believe a new API would lead to less confusion?\r\nAn additional API represents another thing a developer has to consider, where a workaround such as `.TrimStart(\u0027?\u0027)` is both short and very clear in its intent.",
                                           "updatedAt":  "2023-04-20T01:48:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5aZ8Sa",
                                           "createdAt":  "2023-04-20T18:12:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC8KNdA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ilmax",
                                                                               "createdAt":  "2023-04-20T19:18:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hez2010",
                                                                               "createdAt":  "2023-05-22T14:02:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "MattMcL4475",
                                           "body":  "Thanks for your thoughtful reply @MihaZupan \r\n\r\nGreat point about `Uri.Fragment`.  This is also incorrect according to `RFC 3986`, and I think it should also be marked `[Obsolete]` in favor of `Uri.FragmentRfc3986`.  I\u0027ve updated the issue above.  I do think that this new API would lead to less confusion, since it informs the developer to carefully consider the implications of the .NET `Uri` implementation.  Visual Studio will also add a green underline if they select the legacy `Query` or `Fragment`.  This will make it less likely that a developer will make a Type II error (false negative) that results in a defect later in the SDLC.  Later might be after a unit test runs, or it could be in production.  It\u0027s cheapest to catch these defects in the IDE the first time the line of code is written.\r\n\r\nI think .NET should strive to follow industry standards such as `RFC 3986`, especially in this case where all other major languages are compliant with it.  I don\u0027t find an [appeal to tradition](https://en.wikipedia.org/wiki/Appeal_to_tradition) persuasive in this case.  In fact, I think that .NET\u0027s evolution away from its distinct, proprietary, closed-source traditions to its current fully open-source, cross-platform nature, supporting the latest standards, should be celebrated and continued.  I also think that .NET should aim to minimize .NET idiosyncrasies.\r\n\r\nI agree that a breaking change would be inappropriate.  However, I think .NET should be actively discouraging developers from using `Uri.Query` and `Uri.Fragment`, and thus mark them `[Obsolete]`.  You said that a lot of people, including yourself, think of the query as including the leading `?`.  I think this actually reinforces the underlying point, that the .NET community may have a mental model of `query` that is not aligned with either the standard nor the rest of the major programming languages, due to a non-compliant API that many of us have never questioned, and mistakenly assumed is correct.  I don\u0027t think JavaScript is a valid comparison, since `search` and `hash` are different terms with different meanings.  The main term I am taking issue with is `query`, which has a specific meaning as defined in `RFC 3986`.\r\n\r\nI agree with updating the documentation and summary tag as well.\r\n\r\nIt\u0027s not just the Azure documentation that is inconsistent.  For example, [here is an Azure API](https://learn.microsoft.com/en-us/rest/api/storagerp/storage-accounts/list-service-sas?tabs=HTTP) that returns a `SAS token` with no question mark (correct).  But, if you [use the Azure Portal to generate](https://user-images.githubusercontent.com/23408335/232602212-b286aeb2-98ce-48f8-baae-76098b4fe5ef.png) a `SAS token`, they _do_ include a question mark (incorrect).  I think the Azure example is important and is in Microsoft\u0027s interest to resolve - but it\u0027s not central to this issue - more a symptom of the inconsistencies this issue may be causing.",
                                           "updatedAt":  "2023-04-20T23:42:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5afXib",
                                           "createdAt":  "2023-04-21T18:06:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MattMcL4475",
                                           "body":  "@MihaZupan can I edit this issue to make it an API proposal, or should I create a new issue for it and reference this discussion?  Even if the team considers it low priority, I\u0027d still like it to be in the backlog, for if/when the decision is made to make .NET `Uri` compliant with `RFC 3986`.  Thank you!",
                                           "updatedAt":  "2023-04-21T18:06:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5afr_o",
                                           "createdAt":  "2023-04-21T19:33:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC6w1cw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "svick",
                                                                               "createdAt":  "2023-04-22T08:53:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MSDN-WhiteKnight",
                                                                               "createdAt":  "2023-04-28T04:07:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "Obsoletion is a big hammer that should be reserved for cases where the API is irreparably broken, or where it\u0027s believed that the API is virtually unused and a better alternative exists.\r\nThe difference of an extra `?` does not meet that bar in my opinion. The majority of existing uses are also perfectly fine with, or rely on `?` being present.\r\n\r\nI would consider the proposed alternative to be even more error-prone. A nice benefit of existing behavior is that in most cases you don\u0027t have to deal with separators manually. If there is no query, you\u0027ll get back an empty string. Same for fragment.\r\n\r\nConsider an existing use like\r\n```c#\r\n$\"{uri.AbsolutePath}{uri.Query}{uri.Fragment}\"\r\n```\r\n\r\nIf the user is hit with the obsoletion warning and updates the code to use the \"good\" properties, they may end up with\r\n```c#\r\n$\"{uri.AbsolutePath}{uri.QueryRfc3986}{uri.FragmentRfc3986}\"\r\n// or\r\n$\"{uri.AbsolutePath}?{uri.QueryRfc3986}#{uri.FragmentRfc3986}\"\r\n```\r\nBoth of which are functionally wrong.\r\n\r\nThe \"correct\" alternative for those users is substantially worse.\r\n```c#\r\n$\"{uri.AbsolutePath}/{(uri.QueryRfc3986 == \"\" ? \"\" : $\"?{uri.QueryRfc3986}\")}{(uri.FragmentRfc3986 == \"\" ? \"\" : $\"#{uri.FragmentRfc3986}\")}\"\r\n```\r\n\r\nI don\u0027t see aligning with some other languages to be of sufficient value to force those users into rewriting their code, ending up with a non-trivial amount of extra, or more error-prone code.\r\n\r\nPotential misuse of the existing API in practice should be caught quickly on first use/test.\r\n\r\nGiven how trivial workarounds are, I see little value in adding an additional API here. We could consider it if it turns out that this is a common thing for people to run into though.\r\n\r\n---\r\n\r\n\u003e can I edit this issue to make it an API proposal\r\n\r\nFeel free to update the original post. We can keep the issue open to see if more people are running into this.\r\n\r\nIncluding `Rfc3986` in the name is problematic IMO as it does not convey how it\u0027s different from the existing property. Both use the same encoding, following the same standard, the only difference is the leading delimiter for non-empty values.\r\n\r\nWhat would happen with APIs on `UriBuilder`? It also exposes `Query` and `Fragment` properties with setters.\r\nWhat about ASP.NET Core\u0027s `QueryString` type and all the APIs that work with it?\r\nMaking any of these inconsistent with each other is a net negative for the platform.\r\n\r\n---\r\n\r\n\u003e I don\u0027t find an [appeal to tradition](https://en.wikipedia.org/wiki/Appeal_to_tradition) persuasive in this case.\r\n\r\nIf you\u0027re referring to this part of my comment `As you point out, Uri.Query has behaved this way for a very long time, and yet I don\u0027t see other issues in this repo questioning the behavior`, the point I was trying to make is that this doesn\u0027t appear to be such a widespread issue that is very common for people to run into.",
                                           "updatedAt":  "2023-04-21T19:33:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5avF7h",
                                           "createdAt":  "2023-04-25T19:20:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MattMcL4475",
                                           "body":  "Agreed that making changes to this would have a ripple effect across many .NET classes and libraries and require examining all of them in detail.\r\n\r\nRegarding this: `$\"{uri.AbsolutePath}{uri.Query}{uri.Fragment}\"`\r\n\r\n`uri.PathAndQueryAndFragment` could be added to the API, since `uri.PathAndQuery` already exists.\r\n\r\nOr, perhaps `ToAbsolutePathQueryFragment()` would be better.\r\n\r\nEither one could encapsulate the concatenation logic within the `Uri` class itself.\r\n\r\nEither way, if obsoletion is too big a hammer, and addition of a new API too onerous or duplicative - perhaps also updating the documentation to indicate that Query and Fragment are non-compliant with RFC 3986 would be helpful.  Regardless of how frequently C# developers discover this quirk, or how trivial it may be to work around - I still think it\u0027s important to note that the widely-used C# class `Uri` doesn\u0027t comply with a fundamental industry standard followed by all other major web programming languages.\r\n",
                                           "updatedAt":  "2023-04-26T19:21:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5azBpb",
                                           "createdAt":  "2023-04-26T12:20:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "\u003e perhaps also updating the documentation to indicate that Query and Fragment are non-compliant with RFC 3986 would be helpful\r\n\r\nIsn\u0027t that what https://github.com/dotnet/dotnet-api-docs/pull/8977 is?",
                                           "updatedAt":  "2023-04-26T12:20:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5a1SDx",
                                           "createdAt":  "2023-04-26T19:11:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MattMcL4475",
                                           "body":  "Thanks @MihaZupan for your help on this.  I just noticed in that doc, that [it explicitly says the query information is escaped according to RFC 3986](https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System/Uri.xml#L4252).  It mentions \"RFC 3986\" 15 times: \r\n\r\n```bash\r\ncurl -s https://raw.githubusercontent.com/dotnet/dotnet-api-docs/main/xml/System/Uri.xml | grep -o -i \"RFC 3986\" | wc -l\r\n```\r\n\r\nTo me, this seems even more paradoxical that `query` and `fragment` are non-compliant with `RFC 3986`.  Perhaps it would make more sense with a better understanding of the full commit history of this file.\r\n\r\nAlso, it omits explicitly stating that `Query` or `Fragment` themselves are non-compliant with `RFC 3986` (seems like an error by omission to me).  What do you think about making this explicit in the summary tag?  https://github.com/dotnet/dotnet-api-docs/pull/8985/files",
                                           "updatedAt":  "2023-04-26T19:29:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5a8rw1",
                                           "createdAt":  "2023-04-27T15:01:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC6u3dQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "antonfirsov",
                                                                               "createdAt":  "2023-04-27T16:31:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "\u003e Also, it omits explicitly stating that Query or Fragment themselves are non-compliant with RFC 3986 (seems like an error by omission to me). What do you think about making this explicit in the summary tag?\r\n\r\nThey do work according to the RFC, with the exception of also including the leading separator, which the message now calls out.\r\n\r\nWhat is a user supposed to do with the information that `\u0027Query\u0027 is non-compliant with RFC 3986.`?\r\n\r\nI think it just makes it a lot more confusing. An average user shouldn\u0027t have to be aware of what RFC 3986 is, and even if they are, what does \"non-compliant\" mean? In this case, it\u0027s that it includes the separator, which the sentence right before already says.",
                                           "updatedAt":  "2023-04-27T15:01:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5a9WMA",
                                           "createdAt":  "2023-04-27T16:54:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MattMcL4475",
                                           "body":  "\u003e I think it just makes it a lot more confusing. An average user shouldn\u0027t have to be aware of what RFC 3986 is, and even if they are, what does \"non-compliant\" mean? In this case, it\u0027s that it includes the separator, which the sentence right before already says.\r\n\r\nWe can agree to disagree :)  I don\u0027t feel strongly about what the language is, or whether the user is told this information via an obsoletion message or Quick Info message, but the point would be to make the user aware what the true definition of `query` or `fragment` is, so they don\u0027t mistakenly misuse it and cause a bug, or documentation bug, or perpetuate the inaccurate definition of these terms.",
                                           "updatedAt":  "2023-04-27T16:54:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5a9a4k",
                                           "createdAt":  "2023-04-27T17:10:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC6vUFw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MattMcL4475",
                                                                               "createdAt":  "2023-04-27T18:24:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "If you feel strongly about this, feel free to add a note along the lines of\r\n```\r\nNote that the property includes the leading delimiter (`?`), whereas the Uri specification (RFC 3986) recognizes the query as the portion of a Uri without the delimiter.\r\n```\r\nunder the `Remarks` section in the documentation.",
                                           "updatedAt":  "2023-04-27T17:10:19Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "Uri.Query should not start with a question mark",
        "labels":  [
                       "documentation",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/85164",
        "createdAt":  "2023-04-21T14:13:36Z",
        "number":  85164,
        "author":  "zippy1981",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC12C-Q==",
                          "nodes":  [
                                        {
                                            "content":  "ROCKET",
                                            "user":  "Riley-Swenson",
                                            "createdAt":  "2023-04-24T14:59:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "svick",
                                            "createdAt":  "2023-05-22T13:17:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "chrisoverzero",
                                            "createdAt":  "2023-05-26T18:04:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "CooperMidnight",
                                            "createdAt":  "2024-01-05T19:57:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dersia",
                                            "createdAt":  "2024-01-30T23:02:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "benaadams",
                                            "createdAt":  "2024-02-07T17:58:40Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "ilmax",
                                            "createdAt":  "2024-02-13T20:52:13Z"
                                        }
                                    ],
                          "totalCount":  7
                      },
        "updatedAt":  "2024-01-30T23:23:16Z",
        "body":  "### Background and motivation\n\nA class for parsing, creating and dealing with DataUris built into the runtime.\r\n\r\nI don\u0027t think it should inherit from `System.Uri`. It should have a constructor that takes a string and another that takes a Uri. There should be a `ToDataUri()` or `AsDataUri()` extension method for URIs.\r\n\r\nThen methods and properties for:\r\n\r\n* mime type\r\n* Encoding\r\n* getting the body as a \r\n  * string\r\n  * byte array\r\n  * stream\n\n### API Proposal\n\n```csharp\r\nnamespace System;\r\n\r\npublic class DataUri\r\n{\r\n    public static DataUri FromString(string);\r\n    public static DataUri FromBytes(IEnumerable\u003cbyte\u003e);\r\n\r\n    public DataUri(string uri); // throws if invalid Uri\r\n    \r\n    public DataUri(Uri uri);\r\n\r\n    public string MimeType { get; set; }\r\n\r\n    public bool Base64Encode { get; set;  } \r\n\r\n    public ContentType GetContentType();  // This could throw exceptions so probably shouldn\u0027t be a property reads mime type\r\n\r\n    public SetContentType(ContentType contentType); \r\n\r\n    public string GetContentsAsString(bool base64Encoded = false);\r\n\r\n    public IEnumerable\u003cbyte\u003e GetContentsAsBytes();\r\n\r\n    public Stream GetContentsAsStream();\r\n\r\n   public override string ToString(); //The Uri\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\n\r\nvar dataUri = new DataUri(\u0027data:text/plain;,Hello+World!\u0027);\r\ndataUri.Base64Encode = true;\r\n\r\nConsole.WriteLine(dataUri); // data:text/plain;base64,SGVsbG8gV29ybGQh\r\n```\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOclOZig==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5aeVMQ",
                                           "createdAt":  "2023-04-21T14:13:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nA class for parsing, creating and dealing with DataUris built into the runtime.\r\n\r\nI don\u0027t think it should inherit from `System.Uri`. It should have a constructor that takes a string and another that takes a Uri. There should be a `ToDataUri()` or `AsDataUri()` extension method for URIs.\r\n\r\nThen methods and properties for:\r\n\r\n* mime type\r\n* Encoding\r\n* getting the body as a \r\n  * string\r\n  * byte array\r\n  * stream\n\n### API Proposal\n\n```csharp\r\nnamespace System;\r\n\r\npublic class DataUri\r\n{\r\n    public static DataUri FromString(string);\r\n    public static DataUri FromBytes(IEnumerable\u003cbyte\u003e);\r\n\r\n    public DataUri(string uri); // throws if invalid Uri\r\n    \r\n    public DataUri(Uri uri);\r\n\r\n    public string MimeType { get; set; }\r\n\r\n    public bool Base64Encode { get; set;  } \r\n\r\n    public ContentType GetContentType();  // This could throw exceptions so probably shouldn\u0027t be a property reads mime type\r\n\r\n    public SetContentType(ContentType contentType); \r\n\r\n    public string GetContentsAsString(bool base64Encoded = false);\r\n\r\n    public IEnumerable\u003cbyte\u003e GetContentsAsBytes();\r\n\r\n    public Stream GetContentsAsStream();\r\n\r\n   public override string ToString(); //The Uri\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\n\r\nvar dataUri = new DataUri(\u0027data:text/plain;,Hello+World!\u0027);\r\ndataUri.Base64Encode = true;\r\n\r\nConsole.WriteLine(dataUri); // data:text/plain;base64,SGVsbG8gV29ybGQh\r\n```\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ezippy1981\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Net`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-04-21T14:13:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ag7-f",
                                           "createdAt":  "2023-04-22T09:56:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODUvS5A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DrkWzrd",
                                                                               "createdAt":  "2023-04-22T20:52:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Riley-Swenson",
                                                                               "createdAt":  "2023-04-24T14:59:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2023-05-12T13:37:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dersia",
                                                                               "createdAt":  "2024-01-30T23:23:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "svick",
                                           "body":  "I agree that the ability to work with `data` URIs is missing in .Net, though I have some suggestions about the API:\r\n\r\n1. It shouldn\u0027t use `IEnumerable\u003cbyte\u003e`, ever (which is horribly inefficient and not idiomatic). Instead a sequence of bytes should be represented as a `ReadOnlySpan\u003cbyte\u003e`.\r\n2. I find the distinction between `FromString` and the `string` constructor confusing. I think `FromString` and `FromBytes` should  be something like `FromContent(ReadOnlySpan\u003cbyte\u003e content)` instead.\r\n3. Consider having `Parse(ReadOnlySpan\u003cbyte\u003e)` (and `TryParse`) instead of the `string` constructor.\r\n4. It should use `Content`, not `Contents` (which is consistent with e.g. `HttpResponseMessage`).\r\n5. I\u0027m not sure I like the `base64Encoded` parameter on `GetContentsAsString`. Even though `data` URIs can use Base64 internally, I don\u0027t think that should be exposed when reading the data.\r\n6. The API should be symmetric: if it allows reading the content as a `Stream`, it should probably also allow creating a `data` URI from a `Stream`.",
                                           "updatedAt":  "2023-04-22T09:56:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5c0GyA",
                                           "createdAt":  "2023-05-22T12:50:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "Triage:\r\n- Moving to Future to gauge user interest in such functionality. Please upvote the top post if this impacts you to help us prioritize.\r\n- We would make changes to the proposed API as suggested above when it comes to that",
                                           "updatedAt":  "2023-05-22T12:50:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yU5mK",
                                           "createdAt":  "2024-01-30T23:23:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dersia",
                                           "body":  "I really like the idea of having a DataUri class in the runtime, but I am not sure I like the proposed api. It is too expressive. There are many points that @svick made, that I agree with and I would go even further. When you create DataUri\u0027s from `ROS\u003cbyte\u003e` or even `byte[]` it should be automatically base64 encoded. Also I don\u0027t think I will ever need the base64 string converted back, so I think once the DataUri is created it should only hold the DataUri represantation. So we should only be able to do a `ToString()` on it.\r\nAlso when creating a DataUri we should also have a second argument that is either a `string` or some sort of dictonary/set or `\u003cstring, string?\u003e` where one can set all the attributes not just the contentType/mediaType. If I want to set the charset I should be allowed to. If the content that I have is already a base64encoded string, than I would `Add(\"base64\", null)` to that dictionary.\r\n\r\nThe implentation should check if that attribute is not part of the dictionary and I create the DataUri from bytes it would add that attribute.\r\n\r\nSo the only data that the type would store is a string representation of the datauri.",
                                           "updatedAt":  "2024-01-30T23:23:15Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[API Proposal]: System.DataUri",
        "labels":  [
                       "api-suggestion",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/85712",
        "createdAt":  "2023-05-03T15:39:28Z",
        "number":  85712,
        "author":  "okarpov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-06-06T14:02:04Z",
        "body":  "### Description\n\nyou get the Cannot access a disposed object. Object name: System.Net.Security.SslStream exception in case of:\r\n\r\nftp status description: 226-Download File Size:1527554535 bytes @ 2701K/sec.\r\n226 Transfer complete. MD5=7b10b7d3036602148d7ae5fe4f2c2599 (\"xxx_20230502.csv\") RETR\n\n### Reproduction Steps\n\n^^\n\n### Expected behavior\n\n^^\n\n### Actual behavior\n\n^^\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOW5-VoQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5bY8xo",
                                           "createdAt":  "2023-05-03T15:39:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nyou get the Cannot access a disposed object. Object name: System.Net.Security.SslStream exception in case of:\r\n\r\nftp status description: 226-Download File Size:1527554535 bytes @ 2701K/sec.\r\n226 Transfer complete. MD5=7b10b7d3036602148d7ae5fe4f2c2599 (\"xxx_20230502.csv\") RETR\n\n### Reproduction Steps\n\n^^\n\n### Expected behavior\n\n^^\n\n### Actual behavior\n\n^^\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eokarpov\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-05-03T15:39:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bZpVU",
                                           "createdAt":  "2023-05-03T17:41:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "There is not enough data to make this actionable @okarpov. Can you post full exception stack, info about your setup and at least some high level steps? ",
                                           "updatedAt":  "2023-05-03T17:41:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bZpWf",
                                           "createdAt":  "2023-05-03T17:41:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been marked `needs-author-action` and may be missing some important information.",
                                           "updatedAt":  "2023-05-03T17:41:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5baORk",
                                           "createdAt":  "2023-05-03T19:32:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "okarpov",
                                           "body":  "\u003e There is not enough data to make this actionable @okarpov. Can you post full exception stack, info about your setup and at least some high level steps?\r\n\r\n```\r\nCannot access a disposed object.\r\nObject name: System.Net.Security.SslStream\r\n\r\nat System.ThrowHelper.ThrowObjectDisposedException(Object instance)\r\n   at System.Net.Security.SslStream.\u003cThrowIfExceptional\u003eg__ThrowExceptional|123_0(ExceptionDispatchInfo e)\r\n   at System.Net.Security.SslStream.Read(Byte[] buffer, Int32 offset, Int32 count)\r\n   at System.Net.FtpDataStream.Read(Byte[] buffer, Int32 offset, Int32 size)\r\n   at System.IO.StreamReader.ReadBuffer()\r\n   at System.IO.StreamReader.get_EndOfStream()\r\n```",
                                           "updatedAt":  "2023-05-09T15:49:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5baP9q",
                                           "createdAt":  "2023-05-03T19:35:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "okarpov",
                                           "body":  "this is the piece of code which runs it and get exception:\r\n\r\n```c#\r\nwhile(!readStream.EndOfStream)\r\n{\r\n\r\n    int read = readStream.ReadBlockAsync(chars, writeFrom, writeLength).Result;\r\n    if (read \u003c= 0) break;\r\n\r\n    int lastInd = Array.LastIndexOf(chars, \u0027\\n\u0027);\r\n\r\n    fileData = new string(chars, 0, lastInd).Clone() as string;\r\n    if (lastInd \u003c (read + writeFrom - 1))\r\n    {\r\n        Array.Copy(chars, lastInd + 1, chars, 0, (read + writeFrom) - (lastInd + 1));\r\n        Array.Clear(chars, ((read + writeFrom) - (lastInd + 1)), chars.Length - (((read + writeFrom) - (lastInd + 1))));\r\n        writeFrom = ((read + writeFrom) - (lastInd + 1));\r\n        writeLength = chars.Length - writeFrom;\r\n    }\r\n    else\r\n    {\r\n        writeFrom = 0; writeLength = chars.Length;\r\n        Array.Clear(chars);\r\n    }\r\n    trans = updcmd.Connection.BeginTransaction();\r\n    foreach (var line in fileData.Split(\u0027\\n\u0027, StringSplitOptions.RemoveEmptyEntries))\r\n    {\r\n        if (!string.IsNullOrEmpty(line) \u0026\u0026 line.IndexOf(\u0027,\u0027) \u003e 0)\r\n        {\r\n\r\n            try\r\n            {\r\n                updcmd.Parameters[0].Value = (line.Substring(0, line.IndexOf(\u0027,\u0027)));\r\n                updcmd.ExecuteNonQuery();\r\n\r\n                if (++totalRows % 500000 == 0)\r\n                {\r\n#if DEBUG\r\n                    Console.WriteLine\r\n#else\r\n                    LastFtpMessage +=\r\n#endif\r\n                        (\"Dev rows processed: \" + totalRows);\r\n                }\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                LastFtpMessage += \"ftp status description: \" + response.StatusDescription;\r\n            }\r\n        }\r\n    }\r\n    trans.Commit();\r\n    trans.Dispose();\r\n    trans = null;\r\n}\r\n```",
                                           "updatedAt":  "2023-05-09T15:49:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5baRKg",
                                           "createdAt":  "2023-05-03T19:37:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "okarpov",
                                           "body":  "this is the Ftp object (i also did try without request.UsePassive = true;):\r\n\r\n```c#\r\n // Get the object used to communicate with the server.\r\nrequest = (FtpWebRequest)WebRequest.Create(furl + \"/\" + dir + \"/\" + file);\r\nrequest.Method = WebRequestMethods.Ftp.DownloadFile;\r\nrequest.UsePassive = true;\r\nrequest.EnableSsl = true;\r\nrequest.Credentials = new NetworkCredential(funame, fpass);\r\n\r\n// Get the ServicePoint object used for this request, and limit it to one connection.\r\n// In a real-world application you might use the default number of connections (2),\r\n// or select a value that works best for your application.\r\n\r\nsp = request.ServicePoint;\r\nsp.ConnectionLimit = 1;\r\n\r\nresponse = (FtpWebResponse)request.GetResponse();\r\n// The following streams are used to read the data returned from the server.\r\n```",
                                           "updatedAt":  "2023-05-09T15:48:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5baR1K",
                                           "createdAt":  "2023-05-03T19:38:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "okarpov",
                                           "body":  "file size is +1GB in size",
                                           "updatedAt":  "2023-05-03T19:38:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bntDc",
                                           "createdAt":  "2023-05-06T12:45:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "okarpov",
                                           "body":  "can it be because of:\r\n\r\n```c#\r\nreadStream = new StreamReader(responseStream, System.Text.Encoding.ASCII);\r\n```\r\n\r\nbut native stream is UTF-8 ?\r\n\r\nhowever in that case i assume i would get distorted/non-readable text, right?",
                                           "updatedAt":  "2023-05-09T15:49:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bn5Wh",
                                           "createdAt":  "2023-05-06T17:17:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "If that is the problem I would expect that some exception related to encoding would surface. I was more thinking if failure on control channel would lead to this. Maybe hook into https://learn.microsoft.com/en-us/dotnet/api/system.appdomain.firstchanceexception?view=net-8.0 and check if there is any hidden exception that eventually leads to this.",
                                           "updatedAt":  "2023-05-06T17:17:12Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Cannot access a disposed object. Object name: System.Net.Security.SslStream",
        "labels":  [
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/86227",
        "createdAt":  "2023-05-14T21:29:46Z",
        "number":  86227,
        "author":  "okarpov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-01-09T08:36:22Z",
        "body":  "### Description\r\n\r\nAs that [https://github.com/dotnet/runtime/issues/79976](https://github.com/dotnet/runtime/issues/79976) my post was closed i have created this new one.\r\n\r\nIt seems that as soon as i add this ConnectCallback handler i get a lot of Broken Pipe errors:\r\n\r\n```c#\r\npublic class cIPAddress\r\n        {\r\n            DateTime lastUpdate = DateTime.UtcNow;\r\n            IPAddress[] _IPs = null;\r\n            public IPAddress[] IPs { get { return _IPs; } }\r\n\r\n            public cIPAddress(IPAddress[] ips)\r\n            {\r\n                _IPs = ips;\r\n            }\r\n            public bool BetterToUpdate { get { return DateTime.UtcNow.Subtract(lastUpdate).TotalMinutes \u003e= 10; } }\r\n            public void Update(IPAddress[] ips)\r\n            {\r\n                _IPs = null;\r\n                _IPs = ips;\r\n                lastUpdate = DateTime.UtcNow;\r\n            }\r\n            public IPAddress GetIP()\r\n            {\r\n                if (_IPs == null || _IPs.Length == 0)\r\n                {\r\n                    throw new ApplicationException(\"DNS unresolved (IPAddress is null or 0)\");\r\n                }\r\n                else if (_IPs.Length == 1)\r\n                {\r\n                    return _IPs[0];\r\n                }\r\n\r\n                lock (_IPs)\r\n                {\r\n                    var ip = _IPs[0];\r\n                    Array.Copy(_IPs, 1, _IPs, 0, IPs.Length - 1);\r\n                    _IPs[_IPs.Length - 1] = ip;\r\n                    return ip;\r\n                }\r\n                return _IPs[_IPs.Length - 1];\r\n            }\r\n        }\r\n\r\npublic static ConcurrentDictionary\u003cstring, cIPAddress\u003e ipCache = new ConcurrentDictionary\u003cstring, cIPAddress\u003e();\r\n\r\nprotected static async ValueTask\u003cStream\u003e CreateSocket(SocketsHttpConnectionContext context, System.Threading.CancellationToken cancellationToken)\r\n        {\r\n            // Get the list of IP addresses for the host\r\n            var ips = ipCache.GetOrAdd(\r\n                    key: context.DnsEndPoint.Host,\r\n                    valueFactory: (h) =\u003e\r\n                    {\r\n                        var dns = Dns.GetHostEntryAsync(h, supportedIPv, cancellationToken).Result;\r\n                        return new cIPAddress(dns.AddressList);\r\n                    });\r\n\r\n            var address = ips.GetIP();\r\n            // Connect to the remote host\r\n            var socket = new Socket(address.AddressFamily, SocketType.Stream, ProtocolType.Tcp)\r\n            {\r\n                // Turn off Nagle\u0027s algorithm since it degrades performance in most HttpClient scenarios.\r\n                NoDelay = true\r\n            };\r\n\r\n            try\r\n            {\r\n                await socket.ConnectAsync(address, context.DnsEndPoint.Port, cancellationToken);\r\n                return new NetworkStream(socket, ownsSocket: true);\r\n            }\r\n            catch\r\n            {\r\n                socket.Dispose();\r\n                throw;\r\n            }\r\n        }\r\n```\r\n\r\n### Reproduction Steps\r\n\r\n```c#\r\npublic class cIPAddress\r\n        {\r\n            DateTime lastUpdate = DateTime.UtcNow;\r\n            IPAddress[] _IPs = null;\r\n            public IPAddress[] IPs { get { return _IPs; } }\r\n\r\n            public cIPAddress(IPAddress[] ips)\r\n            {\r\n                _IPs = ips;\r\n            }\r\n            public bool BetterToUpdate { get { return DateTime.UtcNow.Subtract(lastUpdate).TotalMinutes \u003e= 10; } }\r\n            public void Update(IPAddress[] ips)\r\n            {\r\n                _IPs = null;\r\n                _IPs = ips;\r\n                lastUpdate = DateTime.UtcNow;\r\n            }\r\n            public IPAddress GetIP()\r\n            {\r\n                if (_IPs == null || _IPs.Length == 0)\r\n                {\r\n                    throw new ApplicationException(\"DNS unresolved (IPAddress is null or 0)\");\r\n                }\r\n                else if (_IPs.Length == 1)\r\n                {\r\n                    return _IPs[0];\r\n                }\r\n\r\n                lock (_IPs)\r\n                {\r\n                    var ip = _IPs[0];\r\n                    Array.Copy(_IPs, 1, _IPs, 0, IPs.Length - 1);\r\n                    _IPs[_IPs.Length - 1] = ip;\r\n                    return ip;\r\n                }\r\n                return _IPs[_IPs.Length - 1];\r\n            }\r\n        }\r\n\r\npublic static ConcurrentDictionary\u003cstring, cIPAddress\u003e ipCache = new ConcurrentDictionary\u003cstring, cIPAddress\u003e();\r\n\r\nprotected static async ValueTask\u003cStream\u003e CreateSocket(SocketsHttpConnectionContext context, System.Threading.CancellationToken cancellationToken)\r\n        {\r\n            // Get the list of IP addresses for the host\r\n            var ips = ipCache.GetOrAdd(\r\n                    key: context.DnsEndPoint.Host,\r\n                    valueFactory: (h) =\u003e\r\n                    {\r\n                        var dns = Dns.GetHostEntryAsync(h, supportedIPv, cancellationToken).Result;\r\n                        return new cIPAddress(dns.AddressList);\r\n                    });\r\n\r\n            var address = ips.GetIP();\r\n            // Connect to the remote host\r\n            var socket = new Socket(address.AddressFamily, SocketType.Stream, ProtocolType.Tcp)\r\n            {\r\n                // Turn off Nagle\u0027s algorithm since it degrades performance in most HttpClient scenarios.\r\n                NoDelay = true\r\n            };\r\n\r\n            try\r\n            {\r\n                await socket.ConnectAsync(address, context.DnsEndPoint.Port, cancellationToken);\r\n                return new NetworkStream(socket, ownsSocket: true);\r\n            }\r\n            catch\r\n            {\r\n                socket.Dispose();\r\n                throw;\r\n            }\r\n        }\r\n```\r\n\r\n### Expected behavior\r\n\r\nshould work as expected\r\n\r\n### Actual behavior\r\n\r\nBroken Pipe errors\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcDZ7LA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5cNX6j",
                                           "createdAt":  "2023-05-14T21:56:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "okarpov",
                                           "body":  "we need to cache IPs because of it speeds up QPS significantly ",
                                           "updatedAt":  "2023-05-14T21:56:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cOCvK",
                                           "createdAt":  "2023-05-15T04:46:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nAs that [https://github.com/dotnet/runtime/issues/79976](url) my post was closed i have created this new one.\r\n\r\nIt seems that as soon as i add this ConnectCallback handler i get a lot of Broken Pipe errors:\r\n\r\n```\r\npublic class cIPAddress\r\n        {\r\n            DateTime lastUpdate = DateTime.UtcNow;\r\n            IPAddress[] _IPs = null;\r\n            public IPAddress[] IPs { get { return _IPs; } }\r\n\r\n            public cIPAddress(IPAddress[] ips)\r\n            {\r\n                _IPs = ips;\r\n            }\r\n            public bool BetterToUpdate { get { return DateTime.UtcNow.Subtract(lastUpdate).TotalMinutes \u003e= 10; } }\r\n            public void Update(IPAddress[] ips)\r\n            {\r\n                _IPs = null;\r\n                _IPs = ips;\r\n                lastUpdate = DateTime.UtcNow;\r\n            }\r\n            public IPAddress GetIP()\r\n            {\r\n                if (_IPs == null || _IPs.Length == 0)\r\n                {\r\n                    throw new ApplicationException(\"DNS unresolved (IPAddress is null or 0)\");\r\n                }\r\n                else if (_IPs.Length == 1)\r\n                {\r\n                    return _IPs[0];\r\n                }\r\n\r\n                lock (_IPs)\r\n                {\r\n                    var ip = _IPs[0];\r\n                    Array.Copy(_IPs, 1, _IPs, 0, IPs.Length - 1);\r\n                    _IPs[_IPs.Length - 1] = ip;\r\n                    return ip;\r\n                }\r\n                return _IPs[_IPs.Length - 1];\r\n            }\r\n        }\r\n\r\npublic static ConcurrentDictionary\u003cstring, cIPAddress\u003e ipCache = new ConcurrentDictionary\u003cstring, cIPAddress\u003e();\r\n\r\nprotected static async ValueTask\u003cStream\u003e CreateSocket(SocketsHttpConnectionContext context, System.Threading.CancellationToken cancellationToken)\r\n        {\r\n            // Get the list of IP addresses for the host\r\n            var ips = ipCache.GetOrAdd(\r\n                    key: context.DnsEndPoint.Host,\r\n                    valueFactory: (h) =\u003e\r\n                    {\r\n                        var dns = Dns.GetHostEntryAsync(h, supportedIPv, cancellationToken).Result;\r\n                        return new cIPAddress(dns.AddressList);\r\n                    });\r\n\r\n            var address = ips.GetIP();\r\n            // Connect to the remote host\r\n            var socket = new Socket(address.AddressFamily, SocketType.Stream, ProtocolType.Tcp)\r\n            {\r\n                // Turn off Nagle\u0027s algorithm since it degrades performance in most HttpClient scenarios.\r\n                NoDelay = true\r\n            };\r\n\r\n            try\r\n            {\r\n                await socket.ConnectAsync(address, context.DnsEndPoint.Port, cancellationToken);\r\n                return new NetworkStream(socket, ownsSocket: true);\r\n            }\r\n            catch\r\n            {\r\n                socket.Dispose();\r\n                throw;\r\n            }\r\n        }\r\n```\r\n\r\n### Reproduction Steps\r\n\r\n```\r\npublic class cIPAddress\r\n        {\r\n            DateTime lastUpdate = DateTime.UtcNow;\r\n            IPAddress[] _IPs = null;\r\n            public IPAddress[] IPs { get { return _IPs; } }\r\n\r\n            public cIPAddress(IPAddress[] ips)\r\n            {\r\n                _IPs = ips;\r\n            }\r\n            public bool BetterToUpdate { get { return DateTime.UtcNow.Subtract(lastUpdate).TotalMinutes \u003e= 10; } }\r\n            public void Update(IPAddress[] ips)\r\n            {\r\n                _IPs = null;\r\n                _IPs = ips;\r\n                lastUpdate = DateTime.UtcNow;\r\n            }\r\n            public IPAddress GetIP()\r\n            {\r\n                if (_IPs == null || _IPs.Length == 0)\r\n                {\r\n                    throw new ApplicationException(\"DNS unresolved (IPAddress is null or 0)\");\r\n                }\r\n                else if (_IPs.Length == 1)\r\n                {\r\n                    return _IPs[0];\r\n                }\r\n\r\n                lock (_IPs)\r\n                {\r\n                    var ip = _IPs[0];\r\n                    Array.Copy(_IPs, 1, _IPs, 0, IPs.Length - 1);\r\n                    _IPs[_IPs.Length - 1] = ip;\r\n                    return ip;\r\n                }\r\n                return _IPs[_IPs.Length - 1];\r\n            }\r\n        }\r\n\r\npublic static ConcurrentDictionary\u003cstring, cIPAddress\u003e ipCache = new ConcurrentDictionary\u003cstring, cIPAddress\u003e();\r\n\r\nprotected static async ValueTask\u003cStream\u003e CreateSocket(SocketsHttpConnectionContext context, System.Threading.CancellationToken cancellationToken)\r\n        {\r\n            // Get the list of IP addresses for the host\r\n            var ips = ipCache.GetOrAdd(\r\n                    key: context.DnsEndPoint.Host,\r\n                    valueFactory: (h) =\u003e\r\n                    {\r\n                        var dns = Dns.GetHostEntryAsync(h, supportedIPv, cancellationToken).Result;\r\n                        return new cIPAddress(dns.AddressList);\r\n                    });\r\n\r\n            var address = ips.GetIP();\r\n            // Connect to the remote host\r\n            var socket = new Socket(address.AddressFamily, SocketType.Stream, ProtocolType.Tcp)\r\n            {\r\n                // Turn off Nagle\u0027s algorithm since it degrades performance in most HttpClient scenarios.\r\n                NoDelay = true\r\n            };\r\n\r\n            try\r\n            {\r\n                await socket.ConnectAsync(address, context.DnsEndPoint.Port, cancellationToken);\r\n                return new NetworkStream(socket, ownsSocket: true);\r\n            }\r\n            catch\r\n            {\r\n                socket.Dispose();\r\n                throw;\r\n            }\r\n        }```\r\n\r\n### Expected behavior\r\n\r\nshould work as expected\r\n\r\n### Actual behavior\r\n\r\nBroken Pipe errors\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eokarpov\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`, `untriaged`, `needs-area-label`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-05-15T04:46:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cOdND",
                                           "createdAt":  "2023-05-15T07:00:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "You should get packet captures @okarpov. The IO error is likely coming from the peer e.g. it is the server or something in-between closing the connection. ",
                                           "updatedAt":  "2023-05-15T07:00:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5c0Fri",
                                           "createdAt":  "2023-05-22T12:47:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been marked `needs-author-action` and may be missing some important information.",
                                           "updatedAt":  "2023-05-22T12:47:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5c0LCN",
                                           "createdAt":  "2023-05-22T13:01:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "okarpov",
                                           "body":  "\u003e You should get packet captures @okarpov. The IO error is likely coming from the peer e.g. it is the server or something in-between closing the connection.\r\n\r\nits hard to capture this particular packet because of our server sends a lot of different requests to different servers simultaneously",
                                           "updatedAt":  "2023-05-22T13:01:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5c0X9E",
                                           "createdAt":  "2023-05-22T13:34:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "That may be. However it is really not actionable IMHO as written. I highly doubt that running the code would reproduce and it is not even runnable as posted e.g. it would require us to do more modifications and further mode deviate. So we would need to spent non trivial effort without decent change to make any progress. ",
                                           "updatedAt":  "2023-05-22T13:34:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5c6NcK",
                                           "createdAt":  "2023-05-23T08:15:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "okarpov",
                                           "body":  "we see a lot of RST from server\r\nbut which exactly details would help you ?",
                                           "updatedAt":  "2023-05-23T08:15:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5c6r7R",
                                           "createdAt":  "2023-05-23T09:20:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "well, so it is server closing the TCP stream? (or something along the way) In that case the exception would be expected. ",
                                           "updatedAt":  "2023-05-23T09:20:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5c6-nk",
                                           "createdAt":  "2023-05-23T10:04:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "okarpov",
                                           "body":  "but how does it relate to ConnectCallback ?\r\nif we disable ConnectCallback method then there are mostly no such errors",
                                           "updatedAt":  "2023-05-23T10:14:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5c7Dzo",
                                           "createdAt":  "2023-05-23T10:15:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "could be particular server. I think the default callback uses addresses in sequence. Sometimes what matters is idle time for given connection. Some firewalls or load balances may cut down inactive connections resulting in RST packets. rare case\r\nLooking and comparing the good and bad captures is often useful.\r\n\r\nOn rare cases the server may not like what the client sends resulting in errors. But typically this would come as HTTP error and FIN as the TCP would be closed gracefully. If you can get access, looking at server logs may be useful as well.\r\n",
                                           "updatedAt":  "2023-05-23T10:15:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5c7MiG",
                                           "createdAt":  "2023-05-23T10:33:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "okarpov",
                                           "body":  "sorry, i deleted message about same IP - it was by mistake.\r\nall IPs are different",
                                           "updatedAt":  "2023-05-23T10:33:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5c7M9h",
                                           "createdAt":  "2023-05-23T10:34:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "okarpov",
                                           "body":  "also it takes from Client Hello to RST 30-40 ms approx.",
                                           "updatedAt":  "2023-05-23T10:34:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5c7U4s",
                                           "createdAt":  "2023-05-23T10:55:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "okarpov",
                                           "body":  "Here is one of example of RST\r\n\r\n![brokenpipe_001](https://github.com/dotnet/runtime/assets/2629775/eb5e6241-1fdd-41a0-b08c-96f76dbabb5f)\r\n",
                                           "updatedAt":  "2023-05-23T10:55:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5c7WML",
                                           "createdAt":  "2023-05-23T10:59:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "okarpov",
                                           "body":  "and another one which looks successful \r\n![brokenpipe_002](https://github.com/dotnet/runtime/assets/2629775/3ebd3656-38b0-418b-88ff-409d2c6333d7)\r\n",
                                           "updatedAt":  "2023-05-23T10:59:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5c7rf_",
                                           "createdAt":  "2023-05-23T12:00:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "there is FIN from the client in frame 2 -\u003e if that belongs to the same session. You can search through logs to see if the socket/NetworkStream get closed or disposed.....",
                                           "updatedAt":  "2023-05-23T12:00:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5c_bUz",
                                           "createdAt":  "2023-05-23T21:13:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "okarpov",
                                           "body":  "hmm\r\ndoes dispoing HttpRequestMessage/HttpResponseMessage dispose socket/networkstream ?\r\n\r\n\u003e there is FIN from the client in frame 2 -\u003e if that belongs to the same session. You can search through logs to see if the socket/NetworkStream get closed or disposed.....\r\n\r\n",
                                           "updatedAt":  "2023-05-23T21:24:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5c_ko4",
                                           "createdAt":  "2023-05-23T21:47:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "okarpov",
                                           "body":  "or may be the ownsSocket should be False as we are going to reuse sockets very intensive/fast/often ?\r\n\r\n```c#\r\nreturn new NetworkStream(socket, ownsSocket: true);\r\n```",
                                           "updatedAt":  "2023-06-20T13:07:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5eF44O",
                                           "createdAt":  "2023-06-06T11:51:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@okarpov which version of .NET do you use?",
                                           "updatedAt":  "2023-06-06T11:51:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5eGnoE",
                                           "createdAt":  "2023-06-06T13:41:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "okarpov",
                                           "body":  "\u003e @okarpov which version of .NET do you use?\r\n\r\n7.0",
                                           "updatedAt":  "2023-06-06T13:41:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wAYPL",
                                           "createdAt":  "2024-01-05T19:16:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "antonfirsov",
                                           "body":  "@okarpov has this been resolved, are you ok closing the issue?\r\n\r\n\u003e or may be the ownsSocket should be False as we are going to reuse sockets very intensive/fast/often?\r\n\r\n`ownsSocket: true` tells `NetworkStream` to close the underlying socket when the HTTP connection is closed and the stream is disposed. There is connection pooling in `SocketsHttpHandler`, no need to implement a custom socket reusal mechanism if you meant that.",
                                           "updatedAt":  "2024-01-05T19:16:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wAYSQ",
                                           "createdAt":  "2024-01-05T19:16:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been marked `needs-author-action` and may be missing some important information.",
                                           "updatedAt":  "2024-01-05T19:16:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wAl6L",
                                           "createdAt":  "2024-01-05T20:10:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "okarpov",
                                           "body":  "\u003e @okarpov has this been resolved, are you ok closing the issue?\r\n\u003e \r\n\u003e \u003e or may be the ownsSocket should be False as we are going to reuse sockets very intensive/fast/often?\r\n\u003e \r\n\u003e `ownsSocket: true` tells `NetworkStream` to close the underlying socket when the HTTP connection is closed and the stream is disposed. There is connection pooling in `SocketsHttpHandler`, no need to implement a custom socket reusal mechanism if you meant that.\r\n\r\nsounds strange TBH.\r\nOn one side the ownSocket True tells a NetworkStream to dispose socket when HTTP connection is cloased by a server?\r\nOn the other side there is a connection pooling which does manage connections but if they have been closed by NetworkStreams so no connections in the pool anymore and every new HTTP/HTTPS request will re-create new connection and so ownSocket better to set to False?\r\n\r\nNot obvious at all how it all works and how to use it properly.",
                                           "updatedAt":  "2024-01-05T20:13:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wLMFy",
                                           "createdAt":  "2024-01-08T23:28:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "antonfirsov",
                                           "body":  "\u003e if they have been closed by NetworkStreams\r\n\r\nIt\u0027s the other way around. When a connection is closed, the connection\u0027s stream should be disposed.\r\n\r\n\u003e HTTP/HTTPS request will re-create new connection and so ownSocket better to set to False?\r\n\r\nI don\u0027t understand what do you mean by this, can you elaborate?\r\n\r\n`ownsSocket` should be always set to `true` in `ConnectCallback`, otherwise the socket won\u0027t be closed on `NetworkStream` disposal, and you will end up leaking sockets.",
                                           "updatedAt":  "2024-01-08T23:28:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wNnss",
                                           "createdAt":  "2024-01-09T08:36:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "okarpov",
                                           "body":  "\u003e \u003e if they have been closed by NetworkStreams\r\n\u003e \r\n\u003e It\u0027s the other way around. When a connection is closed, the connection\u0027s stream should be disposed.\r\n\u003e \r\n\u003e \u003e HTTP/HTTPS request will re-create new connection and so ownSocket better to set to False?\r\n\u003e \r\n\u003e I don\u0027t understand what do you mean by this, can you elaborate?\r\n\u003e \r\n\u003e `ownsSocket` should be always set to `true` in `ConnectCallback`, otherwise the socket won\u0027t be closed on `NetworkStream` disposal, and you will end up leaking sockets.\r\n\r\nok, so probably it would be more clear if you explain or give a real life example when `ownSocket` should be `false`?",
                                           "updatedAt":  "2024-01-09T08:36:21Z"
                                       }
                                   ],
                         "totalCount":  24
                     },
        "title":  "System.IO.IOException: Unable to write data to the transport connection: Broken pipe.",
        "labels":  [
                       "area-System.Net",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/86589",
        "createdAt":  "2023-05-22T15:42:45Z",
        "number":  86589,
        "author":  "pedro823",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODNkvYw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "neon-sunset",
                                            "createdAt":  "2023-05-22T21:04:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "WeihanLi",
                                            "createdAt":  "2023-05-23T04:01:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Rodrigo-Andrade",
                                            "createdAt":  "2023-05-25T10:29:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fitdev",
                                            "createdAt":  "2025-08-31T19:32:06Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2024-01-17T06:38:31Z",
        "body":  "### Background and motivation\r\n\r\nCurrently, there\u0027s no way of sorting an `IPAddress[]` without doing some janky or un-performatic code to implement `IComparable\u003cIPAddress\u003e`.\r\n\r\nThe best way to implement `IComparable\u003cIPAddress\u003e` today would rely on the `GetAddressBytes()` method (which allocates a `byte[]`) or on the `TryWriteBytes(Span\u003cbyte\u003e destination, out int bytesWritten)` method (which makes the implementation really annoying).\r\n\r\nIf, instead, IPAddress implemented `IComparable\u003cIPAddress\u003e`, we\u0027d be able to have zero code in the client\u0027s side and would not require any allocations either.\r\n\r\n\r\n**Real world use:**\r\nI\u0027m implementing software which requires to check whether an IP belongs to a big set of CIDRs. Currently, my approach\u0027s algorithm guarantees that those CIDRs are disjointed, making the implementation be a binary search over the `IPNetwork`\u0027s starting IPAddress, and then the `.Contains()` method of the `IPNetwork` class. Because `IPAddress` lacks a comparator, there\u0027s no good way of implementing this binary search.\r\n\r\n### API Proposal\r\n\r\nAdding `IEquatable` and `IComparable` to `IPAddress`\u0027s declaration:\r\n```csharp\r\nnamespace System.Net;\r\n\r\npublic class IPAddress\u003cT\u003e : IEquatable\u003cIPAddress\u003e, IComparable\u003cIPAddress\u003e, ISpanFormattable, ISpanParsable\u003cIPAddress\u003e, IUtf8SpanFormattable\r\n{\r\n    // ...\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\n```csharp\r\nusing System.Net;\r\n\r\nvar ip1 = IPAddress.Parse(\"192.168.0.1\");\r\nvar ip2 = IPAddress.Parse(\"127.0.0.1\");\r\n\r\nvar l = new List\u003cIPAddress\u003e { ip1, ip2 };\r\nl.Sort(); // currently, this line breaks\r\n\r\nvar result = Array.BinarySearch(l.ToArray(), ip1); // this line breaks too\r\n\r\nConsole.WriteLine($\"Found = {result \u003e 0}\");\r\n```\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcPSq3Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5c1OWo",
                                           "createdAt":  "2023-05-22T15:42:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nCurrently, there\u0027s no way of sorting a `IPAddress[]` without doing some janky or un-performatic code to implement `IComparable\u003cIPAddress\u003e`.\r\n\r\nThe best way to implement `IComparable\u003cIPAddress\u003e` today would rely on the `GetAddressBytes()` method (which allocates a `byte[]`) or on the `TryWriteBytes(Span\u003cbyte\u003e destination, out int bytesWritten)` method (which makes the implementation really annoying).\r\n\r\nIf, instead, IPAddress implemented `IComparable\u003cIPAddress\u003e`, we\u0027d be able to have zero code in the client\u0027s side and would not require any allocations either.\r\n\r\n\r\n**Real world use:**\r\nI\u0027m implementing software which requires to check whether an IP belongs to a big set of CIDRs. Currently, my approach\u0027s algorithm guarantees that those CIDRs are disjointed, making the implementation be a binary search over the `IPNetwork`\u0027s starting IPAddress, and then the `.Contains()` method of the `IPNetwork` class. Because `IPAddress` lacks a comparator, there\u0027s no good way of implementing this binary search.\n\n### API Proposal\n\nAdding `IEquatable` and `IComparable` to `IPAddress`\u0027s declaration:\r\n```csharp\r\nnamespace System.Collections.Generic;\r\n\r\npublic class IPAddress\u003cT\u003e : IEquatable\u003cIPAddress\u003e, IComparable\u003cIPAddress\u003e, ISpanFormattable, ISpanParsable\u003cIPAddress\u003e, IUtf8SpanFormattable\r\n{\r\n    // ...\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\nusing System.Net;\r\n\r\nvar ip1 = IPAddress.Parse(\"192.168.0.1\");\r\nvar ip2 = IPAddress.Parse(\"127.0.0.1\");\r\n\r\nvar l = new List\u003cIPAddress\u003e { ip1, ip2 };\r\nl.Sort(); // currently, this line breaks\r\n\r\nvar result = Array.BinarySearch(l.ToArray(), ip1); // this line breaks too\r\n\r\nConsole.WriteLine($\"Found = {result \u003e 0}\");\r\n```\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003epedro823\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Net`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-05-22T15:42:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5c48_V",
                                           "createdAt":  "2023-05-23T03:01:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "Potentially duplicate of #56627. Is there any difference after `IPNetwork` is introduced?\r\n\r\nYou can pass a custom `IComparer` for the cases of `Array.BinarySearch` and `List.Sort`.",
                                           "updatedAt":  "2023-05-23T03:01:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5c8mTb",
                                           "createdAt":  "2023-05-23T13:39:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pedro823",
                                           "body":  "\u003e You can pass a custom IComparer for the cases of Array.BinarySearch and List.Sort.\r\n\r\nYes, however implementing an `IComparer` for `IPAddress` efficiently would require access to the underlying `uint` or `ushort[]` inside it.\r\n\r\nThis is the best comparer I could do for this demo, and it has some arbitrary decisions which work in my case:\r\n```cs\r\n// NOT HEAVILY TESTED - DO NOT USE IN PRODUCTION :)\r\npublic class IPComparer : IComparer\u003cIPAddress\u003e\r\n{\r\n    [Pure]\r\n    public int Compare(IPAddress? a, IPAddress? b)\r\n    {\r\n        if (a is null || b is null)\r\n        {\r\n            if (a is null \u0026\u0026 b is null)\r\n            {\r\n                return 0;\r\n            }\r\n\r\n            return a is null ? -1 : 1;\r\n        }\r\n        \r\n        // two IPv6 IPs would use at most 32 bytes in the stack.\r\n        Span\u003cbyte\u003e scratchArea = stackalloc byte[32];\r\n\r\n        // Should always work.\r\n        _ = a.TryWriteBytes(scratchArea, out var aLength);\r\n        _ = b.TryWriteBytes(scratchArea[aLength..], out var bLength);\r\n\r\n        return Compare(scratchArea[..aLength], scratchArea[aLength..(aLength + bLength)]);\r\n    }\r\n\r\n    [Pure]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    private static int Compare(Span\u003cbyte\u003e a, Span\u003cbyte\u003e b)\r\n    {\r\n        // HACK: An IPv4 should be translated to IPv6 before\r\n        // comparison. We have RFC6502 describing how to\r\n        // do that translation.\r\n        if (a.Length != b.Length)\r\n        {\r\n            return a.Length.CompareTo(b.Length);\r\n        }\r\n\r\n        for (var i = 0; i \u003c a.Length; i++)\r\n        {\r\n            if (a[i] != b[i])\r\n                return a[i] - b[i];\r\n        }\r\n\r\n        return 0;\r\n    }\r\n}\r\n```\r\n\r\nAs you can see, the client needs to _extract_ the underlying integer representation of the IPAddress to be able to compare them.\r\n\r\nThe issue you mentioned has this comment:\r\n\u003e It seems really weird to add IComparable\u003cT\u003e in these cases, since there is no well defined ordering and so whatever we did would be arbitrary.\r\n\r\nHowever, is it arbitrary to compare IPAddresses as the `uint` they are? Or in the v6 case, as the `uint128` they are? In the case of mixing both of them, we have an RFC ([RFC6502](https://www.rfc-editor.org/rfc/rfc6052#section-1.1)) which well defines the translation between IPv4 and IPv6 -- we can translate one to the other and compare them in the IPv6 realm.",
                                           "updatedAt":  "2023-05-23T13:42:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5c8nQt",
                                           "createdAt":  "2023-05-23T13:41:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pedro823",
                                           "body":  "metaquestion: should we continue the discussion here or move to the original issue #56627?",
                                           "updatedAt":  "2023-05-23T13:41:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5c8qvw",
                                           "createdAt":  "2023-05-23T13:46:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC8P9SA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pedro823",
                                                                               "createdAt":  "2023-05-23T13:49:22Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "\u003e metaquestion: should we continue the discussion here or move to the original issue #56627?\r\n\r\nThe old issue is locked. Use new issue to discuss the differences.",
                                           "updatedAt":  "2023-05-23T13:46:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5w9Krd",
                                           "createdAt":  "2024-01-17T06:38:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "edwardneal",
                                           "body":  "I can submit a PR to implement `IEquatable\u003cIPAddress\u003e`, `IComparable\u003cIPAddress\u003e` (and perhaps the non-generic `IComparable` for completeness\u0027 sake, although I don\u0027t think it\u0027ll do much) if the API proposal\u0027s approved. Implementing IEquatable also eliminates a cast in the default equality comparer, although I\u0027m not sure how meaningful of a performance impact that\u0027d actually have.\r\n\r\nIt might also be a good idea to add the comparison operators. This could turn the API proposal into something similar to the below:\r\n\r\n```diff\r\npublic class IPAddress : ISpanFormattable, ISpanParsable\u003cIPAddress\u003e, IUtf8SpanFormattable\r\n+ , IEquatable\u003cIPAddress\u003e, IComparable\u003cIPAddress\u003e, IComparable\r\n{\r\n+    public bool Equals(IPAddress? other);\r\n+    int IComparable\u003cIPAddress\u003e.CompareTo(IPAddress? other);\r\n+    int IComparable.CompareTo(object? obj)\r\n\r\n+    public static bool operator \u003c(IPAddress? left, IPAddress? right);\r\n+    public static bool operator \u003e(IPAddress? left, IPAddress? right);\r\n+    public static bool operator \u003c=(IPAddress? left, IPAddress? right);\r\n+    public static bool operator \u003e=(IPAddress? left, IPAddress? right);\r\n}\r\n```\r\n",
                                           "updatedAt":  "2024-01-17T06:38:29Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "[API Proposal]: Make `IPAddress`es comparable",
        "labels":  [
                       "api-suggestion",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/87446",
        "createdAt":  "2023-06-13T00:22:32Z",
        "number":  87446,
        "author":  "jrdodds",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-04-26T07:54:26Z",
        "body":  "### Description\r\n\r\nThe [`System.UriBuilder` class](https://learn.microsoft.com/en-us/dotnet/api/system.uribuilder?view=net-7.0) cannot be used to build a mailto URI.\r\n\r\n### Reproduction Steps\r\n\r\nThe following code\r\n\r\n```csharp\r\nvar builder = new UriBuilder\r\n{\r\n    Scheme = Uri.UriSchemeMailto,\r\n    UserName = \"someone\",\r\n    Host = \"example.com\",\r\n    Query = \"subject=Testing\",\r\n    Path = string.Empty,\r\n};\r\nConsole.WriteLine(builder.ToString());\r\n```\r\n\r\nproduces a URI value of\r\n\r\n```\r\nmailto:someone@example.com/?subject=Testing\r\n```\r\n\r\nwhich is not a valid `mailto` URI.\r\n\r\n### Expected behavior\r\n\r\nA valid URI would be\r\n\r\n```\r\nmailto:someone@example.com?subject=Testing\r\n```\r\n\r\nThere should not be a \u0027/\u0027 character.\r\n\r\n### Actual behavior\r\n\r\nThe [`Path` setter](https://github.com/dotnet/runtime/blob/c32bee11a457151e5c400107ababed54dcd70438/src/libraries/System.Private.Uri/src/System/UriBuilder.cs#LL190C1-L202C1) sets the value to \u0027/\u0027 when the value is the empty string.\r\n\r\n        [AllowNull]\r\n        public string Path\r\n        {\r\n            get =\u003e _path;\r\n            set\r\n            {\r\n                _path = string.IsNullOrEmpty(value)\r\n                    ? \"/\"\r\n                    : Uri.InternalEscapeString(value.Replace(\u0027\\\\\u0027, \u0027/\u0027));\r\n                _changed = true;\r\n            }\r\n        }\r\n\r\nThis makes sense for HTTP/S but makes the class unusable for mailto.\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n.Net 7.0.203\r\nWindows 11 x64\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOe-h6mw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5eq1Aa",
                                           "createdAt":  "2023-06-13T00:22:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nThe UriBuilder cannot be used to build a mailto URI.\n\n### Reproduction Steps\n\nThe following code\r\n\r\n```csharp\r\nvar builder = new UriBuilder\r\n{\r\n    Scheme = Uri.UriSchemeMailto,\r\n    UserName = \"someone\",\r\n    Host = \"example.com\",\r\n    Query = \"subject=Testing\",\r\n    Path = string.Empty,\r\n};\r\nConsole.WriteLine(builder.ToString());\r\n```\r\n\r\nproduces a URI value of\r\n\r\n```\r\nmailto:someone@example.com/?subject=Testing\r\n```\r\n\r\nwhich is not a valid `mailto` URI.\n\n### Expected behavior\n\nA valid URI would be\r\n\r\n```\r\nmailto:someone@example.com?subject=Testing\r\n```\r\n\r\nThere should not be a \u0027/\u0027 character.\n\n### Actual behavior\n\nThe [`Path` setter](https://github.com/dotnet/runtime/blob/c32bee11a457151e5c400107ababed54dcd70438/src/libraries/System.Private.Uri/src/System/UriBuilder.cs#LL190C1-L202C1) sets the value to \u0027/\u0027 when the value is the empty string.\r\n\r\n        [AllowNull]\r\n        public string Path\r\n        {\r\n            get =\u003e _path;\r\n            set\r\n            {\r\n                _path = string.IsNullOrEmpty(value)\r\n                    ? \"/\"\r\n                    : Uri.InternalEscapeString(value.Replace(\u0027\\\\\u0027, \u0027/\u0027));\r\n                _changed = true;\r\n            }\r\n        }\r\n\r\nThis makes sense for HTTP/S but makes the class unusable for mailto.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.Net 7.0.203\r\nWindows 11 x64\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejrdodds\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-06-13T00:22:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hOUJe",
                                           "createdAt":  "2023-07-11T16:35:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "How did you run into this issue?\r\nIn an isolated example, the answer would be to just not set `Path` to empty, but you probably ran into it in more complex logic?\r\n\r\nIf this is causing issues, we probably could special-case this and avoid appending the slash, though I would also assume that this issue would be quickly spotted if someone did run into it.",
                                           "updatedAt":  "2023-07-11T16:35:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hQMlo",
                                           "createdAt":  "2023-07-11T23:32:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jrdodds",
                                           "body":  "\u003e ... the answer would be to just not set `Path` to empty ...\r\n\r\nSetting `Path` is something non-empty will also mangle the mailto URI.\r\n\r\ne.g. setting a space:\r\n\r\n```\r\nmailto:someone@example.com ?subject=Testing\r\n```\r\n\r\n`Path` doesn\u0027t have a meaning for the `mailto` scheme, so a possible fix may be to change the `ToString()` method to append the `Path` if the scheme is not `mailto`.",
                                           "updatedAt":  "2023-07-11T23:46:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hQNNS",
                                           "createdAt":  "2023-07-11T23:34:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "~~Right, what I was getting at is that if you\u0027re constructing a mailto Uri like in your example, you can just skip setting `Path` - it will default to \"actually empty\" already.~~ -- disregard, see comment below",
                                           "updatedAt":  "2023-07-12T00:01:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hQQFG",
                                           "createdAt":  "2023-07-11T23:47:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODAaOQg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MihaZupan",
                                                                               "createdAt":  "2023-07-11T23:55:11Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jrdodds",
                                           "body":  "\u003e Right, what I was getting at is that if you\u0027re constructing a mailto Uri like in your example, you can just skip setting `Path` - it will default to \"actually empty\" already.\r\n\r\nIt doesn\u0027t behave that way.\r\n\r\n\"actually empty\" doesn\u0027t exist. The initial value of `Path` is \u0027/\u0027.",
                                           "updatedAt":  "2023-07-11T23:52:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc576Hqb",
                                           "createdAt":  "2024-04-26T07:54:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mrudat",
                                           "body":  "Given that the mailto URI scheme has different functionality for formatting the URI, wouldn\u0027t the Right Way be to create a shiny new MailtoUri class that correctly formats a mailto URI and hooks into the existing UriBuilder and Uri?",
                                           "updatedAt":  "2024-04-26T07:54:25Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "System.UriBuilder cannot build a correct mailto URI",
        "labels":  [
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/88383",
        "createdAt":  "2023-07-04T14:23:20Z",
        "number":  88383,
        "author":  "antonfirsov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-07-11T17:42:53Z",
        "body":  "Opening a separate issue for `System.Net.NameResolution`/`Security`/`Socket` specific parts of #79371. We should implement the Metrics counterpart of the events listed below.\r\n\r\nI wasn\u0027t able to find any OTel specifications for this area, which would require us to change the semantics, so my assumption is that this should be fairly trivial work.\r\n\r\nIt might complicate things if we want to enable passing an `IMeterFactory` to `Dns` or `Socket` similarly to #86961, but that work can be done incrementally.\r\n\r\n### System.Net.NameResolution\r\n\r\nAll counters listed in https://learn.microsoft.com/en-us/dotnet/core/diagnostics/available-counters#systemnetnameresolution-counters\r\n\r\n- `dns-lookups-requested`\r\n- `dns-lookups-duration`\r\n- `current-dns-lookups`\r\n\r\nAlso tracked in #48885.\r\n\r\n### System.Net.Security\r\n\r\nAll counters listed in https://learn.microsoft.com/en-us/dotnet/core/diagnostics/available-counters#systemnetsecurity-counters:\r\n\r\n- `tls-handshake-rate`\r\n- `total-tls-handshakes`\r\n- `current-tls-handshakes`\r\n- `failed-tls-handshakes`\r\n- `all-tls-sessions-open`\r\n- `tls10-sessions-open`\r\n- `tls11-sessions-open`\r\n- `tls12-sessions-open`\r\n- `tls13-sessions-open`\r\n- `all-tls-handshake-duration`\r\n- `tls10-handshake-duration`\r\n- `tls11-handshake-duration`\r\n- `tls12-handshake-duration`\r\n- `tls13-handshake-duration`\r\n\r\n### System.Net.Sockets\r\n\r\nAll counters listed in https://learn.microsoft.com/en-us/dotnet/core/diagnostics/available-counters#systemnetsockets-counters\r\n\r\n- `outgoing-connections-established`\r\n- `incoming-connections-established`\r\n- `current-outgoing-connect-attempts`\r\n- `bytes-received`\r\n- `bytes-sent`\r\n- `datagrams-received`\r\n- `datagrams-sent`",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYJgeog==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5glHGt",
                                           "createdAt":  "2023-07-04T14:23:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nOpening a separate issue for `System.Net.NameResolution`/`Security`/`Socket` specific parts of #79371. We should implement the Metrics counterpart of the events listed below.\r\n\r\nI wasn\u0027t able to find any OTel specifications for this area, which would require us to change the semantics, so my assumption is that this should be fairly trivial work.\r\n\r\nIt might complicate things if we want to enable passing an `IMeterFactory` to `Dns` or `Socket` similarly to #86961, but that work can be done incrementally.\r\n\r\n### System.Net.NameResolution\r\n\r\nAll counters listed in https://learn.microsoft.com/en-us/dotnet/core/diagnostics/available-counters#systemnetnameresolution-counters\r\n\r\n- `dns-lookups-requested`\r\n- `dns-lookups-duration`\r\n- `current-dns-lookups`\r\n\r\n### System.Net.Security\r\n\r\nAll counters listed in https://learn.microsoft.com/en-us/dotnet/core/diagnostics/available-counters#systemnetsecurity-counters:\r\n\r\n- `tls-handshake-rate`\r\n- `total-tls-handshakes`\r\n- `current-tls-handshakes`\r\n- `failed-tls-handshakes`\r\n- `all-tls-sessions-open`\r\n- `tls10-sessions-open`\r\n- `tls11-sessions-open`\r\n- `tls12-sessions-open`\r\n- `tls13-sessions-open`\r\n- `all-tls-handshake-duration`\r\n- `tls10-handshake-duration`\r\n- `tls11-handshake-duration`\r\n- `tls12-handshake-duration`\r\n- `tls13-handshake-duration`\r\n\r\n### System.Net.Sockets\r\n\r\nAll counters listed in https://learn.microsoft.com/en-us/dotnet/core/diagnostics/available-counters#systemnetsockets-counters\r\n\r\n- `outgoing-connections-established`\r\n- `incoming-connections-established`\r\n- `current-outgoing-connect-attempts`\r\n- `bytes-received`\r\n- `bytes-sent`\r\n- `datagrams-received`\r\n- `datagrams-sent`\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eantonfirsov\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-07-04T14:23:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gmB6i",
                                           "createdAt":  "2023-07-04T17:52:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@antonfirsov if you are planning to address this in .NET 8.0, please mark it as so for easier tracking. Thanks!\r\n\r\nCC @karelz ",
                                           "updatedAt":  "2023-07-04T17:57:00Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Implement the Metrics counterpart of System.Net EventCounters",
        "labels":  [
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/89262",
        "createdAt":  "2023-07-20T17:13:14Z",
        "number":  89262,
        "author":  "MihaZupan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-07-20T17:13:21Z",
        "body":  "Spotted in https://github.com/dotnet/dotnet-api-docs/pull/8204\r\n\r\n```c#\r\nvar uri = new Uri(\"mailto:user@contoso.com\");\r\nConsole.WriteLine(uri.GetLeftPart(UriPartial.Authority)); // Empty\r\nConsole.WriteLine(uri.GetLeftPart(UriPartial.Path));      // mailto:user@contoso.com\r\n```\r\nWhere `GetLeftPart(UriPartial.Authority)` should have returned `mailto:user@contoso.com`.\r\n\r\n---\r\n\r\nNotes for anyone who wants to look into fixing this:\r\n\r\nInside `GetLeftPart` we check \r\nhttps://github.com/dotnet/runtime/blob/42322f5a9df7273509b74057457914da57a88265/src/libraries/System.Private.Uri/src/System/Uri.cs#L1351\r\nin which case we return an empty string.\r\n\r\nFor the above input, the `AuthorityFound` flag is not set.\r\n\r\nAnd it looks like we don\u0027t set that flag for mailto Uris here:\r\nhttps://github.com/dotnet/runtime/blob/42322f5a9df7273509b74057457914da57a88265/src/libraries/System.Private.Uri/src/System/Uri.cs#L2090-L2109",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYgHqeQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5iAep5",
                                           "createdAt":  "2023-07-20T17:13:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nSpotted in https://github.com/dotnet/dotnet-api-docs/pull/8204\r\n\r\n```c#\r\nvar uri = new Uri(\"mailto:user@contoso.com\");\r\nConsole.WriteLine(uri.GetLeftPart(UriPartial.Authority)); // Empty\r\nConsole.WriteLine(uri.GetLeftPart(UriPartial.Path));      // mailto:user@contoso.com\r\n```\r\nWhere `GetLeftPart(UriPartial.Authority)` should have returned `mailto:user@contoso.com`.\r\n\r\n---\r\n\r\nNotes for anyone who wants to look into fixing this:\r\n\r\nInside `GetLeftPart` we check \r\nhttps://github.com/dotnet/runtime/blob/42322f5a9df7273509b74057457914da57a88265/src/libraries/System.Private.Uri/src/System/Uri.cs#L1351\r\nin which case we return an empty string.\r\n\r\nFor the above input, the `AuthorityFound` flag is not set.\r\n\r\nAnd it looks like we don\u0027t set that flag for mailto Uris here:\r\nhttps://github.com/dotnet/runtime/blob/42322f5a9df7273509b74057457914da57a88265/src/libraries/System.Private.Uri/src/System/Uri.cs#L2090-L2109\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMihaZupan\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-07-20T17:13:21Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "`Uri.GetLeftPart(Authority)` returns a wrong result for some schemes",
        "labels":  [
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/89538",
        "createdAt":  "2023-07-26T23:08:03Z",
        "number":  89538,
        "author":  "tmat",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC42fjA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Eilon",
                                            "createdAt":  "2024-06-18T23:00:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bronteq",
                                            "createdAt":  "2024-06-24T07:16:31Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-07-03T16:17:59Z",
        "body":  "### Description\r\n\r\nThere is a difference in the value of `LocalPath` property depending on whether the `Uri` instance is created with an absolute local path vs. URL with `file` scheme. For example, character U+E25B is escaped in the former and not in the latter case.\r\n\r\n### Reproduction Steps\r\n\r\n```c#\r\nConsole.WriteLine(new Uri(\"c:\\\\\\ue25b\").LocalPath);\r\nConsole.WriteLine(new Uri(\"file://c:/\\ue25b\").LocalPath);\r\n```\r\n\r\n### Expected behavior\r\n\r\n```\r\nc:\\\r\nc:\\\r\n```\r\n\r\n### Actual behavior\r\n\r\n```\r\nc:\\%EE%89%9B\r\nc:\\\r\n```\r\n\r\n### Regression?\r\n\r\nNo\r\n\r\n### Known Workarounds\r\n\r\n```c#\r\n public static Uri CreateAbsoluteUri(string absolutePath)\r\n {\r\n        return new Uri(IsAscii(absolutePath) ? absolutePath : GetAbsoluteUriString(), UriKind.Absolute);\r\n\r\n        static string GetAbsoluteUriString()\r\n        {\r\n            var parts = absolutePath.Split([Path.DirectorySeparatorChar, Path.AltDirectorySeparatorChar]);\r\n\r\n            if (Path.DirectorySeparatorChar == \u0027/\u0027)\r\n            {\r\n                // Unix path: first part is empty, all parts should be escaped\r\n                return \"file://\" + string.Join(\"/\", parts.Select(EscapeUriPart));\r\n            }\r\n\r\n            if (parts is [\"\", \"\", var serverName, ..])\r\n            {\r\n                // UNC path: first non-empty part is server name and shouldn\u0027t be escaped\r\n                return \"file://\" + serverName + \"/\" + string.Join(\"/\", parts.Skip(3).Select(EscapeUriPart));\r\n            }\r\n\r\n            // Drive-rooted path: first part is \"C:\" and shouldn\u0027t be escaped\r\n            return \"file:///\" + parts[0] + \"/\" + string.Join(\"/\", parts.Skip(1).Select(EscapeUriPart));\r\n\r\n            static string EscapeUriPart(string stringToEscape)\r\n                =\u003e Uri.EscapeUriString(stringToEscape).Replace(\"#\", \"%23\");\r\n        }\r\n}\r\n```\r\n\r\n### Configuration\r\n\r\n8.0.100-preview.6.23330.14 but also on .NET Framework.\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgcXSqw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5igihD",
                                           "createdAt":  "2023-07-26T23:53:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nThere is a difference in the value of `LocalPath` property depending on whether the `Uri` instance is created with an absolute local path vs. URL with `file` scheme. For example, character U+E25B is escaped in the former and not in the latter case.\n\n### Reproduction Steps\n\n```\r\nConsole.WriteLine(new Uri(\"c:\\\\\\ue25b\").LocalPath);\r\nConsole.WriteLine(new Uri(\"file://c:/\\ue25b\").LocalPath);\r\n```\n\n### Expected behavior\n\n```\r\nc:\\\r\nc:\\\r\n```\n\n### Actual behavior\n\n```\r\nc:\\%EE%89%9B\r\nc:\\\r\n```\n\n### Regression?\n\nNo\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n8.0.100-preview.6.23330.14 but also on .NET Framework.\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003etmat\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-07-26T23:53:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5irZC_",
                                           "createdAt":  "2023-07-28T11:42:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "poizan42",
                                           "body":  "FWIW this seems to be the opposite of the problem reported at #23738",
                                           "updatedAt":  "2023-07-28T11:42:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5izBXh",
                                           "createdAt":  "2023-07-31T04:28:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@poizan42 this is specifically about characters in [PUA ranges in Unicode](https://en.wikipedia.org/wiki/Private_Use_Areas).\r\nThe bug you referred was about encoding the character `%` (see https://github.com/dotnet/runtime/issues/23738#issuecomment-334546994), so not quite related.",
                                           "updatedAt":  "2023-07-31T04:28:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5izDB2",
                                           "createdAt":  "2023-07-31T04:32:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@tmat can you please share details how you ran into it? (we have seen 2 similar internal reports recently)",
                                           "updatedAt":  "2023-07-31T04:32:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5i1LKM",
                                           "createdAt":  "2023-07-31T10:34:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: The behavior here is inconsistent between implicit path and \"file://\" path. We should unify it. Let\u0027s try to do it opportunistically in 8.0 as it might impact GB18030 compliance (although we are still investigating if it is must have or not for being compliant). ",
                                           "updatedAt":  "2023-07-31T10:34:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5i5Q_h",
                                           "createdAt":  "2023-07-31T21:20:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "This issue in .NET Framework is now blocking VS GB18030 compliance.",
                                           "updatedAt":  "2023-07-31T21:20:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5i8A7-",
                                           "createdAt":  "2023-08-01T09:09:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@MihaZupan I updated known workaround in top post based on offline discussion with @tmat. Can you please check it and comment on it?",
                                           "updatedAt":  "2023-08-01T09:09:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5i-2Fn",
                                           "createdAt":  "2023-08-01T16:10:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "I have updated the workaround to make it work for UNC paths as well.",
                                           "updatedAt":  "2023-08-01T16:10:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jH-4u",
                                           "createdAt":  "2023-08-02T22:06:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODW9j6g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "baronfel",
                                                                               "createdAt":  "2024-02-15T23:26:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tmat",
                                           "body":  "Note that the workaround needs to use `Uri.EscapeUriString`, which is obsolete :(. It does not work correctly when using `Uri.EscapeDataString`. Although, `Uri.EscapeUriString` does not entirely work either. it does not escape `#` so URIs created using the workaround will have different `AbsoluteUri`:\r\n\r\n```C#\r\n\u003e new Uri(\"file://C:/\" + Uri.EscapeDataString(\"!$\u0026\u0027()+,-;=@[]_~#\")).AbsoluteUri\r\n\"file:///C:/%21%24%26%27%28%29%2B%2C-%3B%3D%40%5B%5D_~%23\"\r\n\u003e new Uri(\"file://C:/\" + Uri.EscapeUriString(\"!$\u0026\u0027()+,-;=@[]_~#\")).AbsoluteUri\r\n\"file:///C:/!$\u0026\u0027()+,-;=@[]_~#\"\r\n\u003e new Uri(\"C:\\\\!$\u0026\u0027()+,-;=@[]_~#\").AbsoluteUri\r\n\"file:///C:/!$\u0026\u0027()+,-;=@[]_~%23\"\r\n```\r\n\r\nThere is also `System.Net.WebUtility.UrlEncode` that escapes yet another set of characters.\r\n\r\n```C#\r\n\u003e new Uri(\"file://C:/\" + System.Net.WebUtility.UrlEncode(\"!$\u0026\u0027()+,-;=@[]_~#\")).AbsoluteUri\r\n\"file:///C:/!%24%26%27()%2B%2C-%3B%3D%40%5B%5D_~%23\"\r\n```\r\n\r\nPerhaps the best way would be to implment a new `Uri` API that follows the standard and does not have back-compat quirks.\r\nWe need a .NET implementation that matches TypeScript implementation: https://github.com/Microsoft/vscode-uri, i.e. URI created in one can be parsed an intepreted in the other and vice versa.",
                                           "updatedAt":  "2023-08-03T01:24:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jMG14",
                                           "createdAt":  "2023-08-03T14:40:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODXXAPg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "karelz",
                                                                               "createdAt":  "2023-08-03T14:58:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "rokonec",
                                                                               "createdAt":  "2024-02-19T16:08:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "A few more interesting examples:\n```c#\nConsole.WriteLine(new Uri(\"C:\\\\A%20C\").LocalPath);   // C:\\A%20C -- note how %20 remained escaped\nConsole.WriteLine(new Uri(\"C:\\\\A%20%43\").LocalPath); // C:\\A C   -- note how %20 was unescaped\nConsole.WriteLine(new Uri(\"C:\\\\A%42C\").LocalPath);   // C:\\ABC\n```\nor how trailing whitespace is treated differently\n```c#\nConsole.WriteLine(new Uri(\"http://host/ \").AbsoluteUri);    // http://host/\nConsole.WriteLine(new Uri(\"http://host/%41 \").AbsoluteUri); // http://host/A%20\n```\n\nI\u0027m afraid that the underlying issue here is similar to #1487, #79198, or #72632.\nWhen encountering a non-reserved character that was already escaped (`%42` or `%43` above), or any non-ASCII character (even if escaped), Uri will recreate the input string internally.\nThis can lead to inconsistencies down the road (like how `%20` may or may not be escaped in the above example).\n\nYour workaround seems to be doing a good job of fighting this internal (un)escaping and re-(un)escaping.\nIf you just want to workaround the issue with `LocalPath`, then `EscapeDataString` would be more appropriate.\nBut if you also care about `AbsoluteUri`, I don\u0027t think you\u0027ll find a perfect workaround (outside of fixing the underlying issue in Uri).\n\n\u003e `var i = (Path.DirectorySeparatorChar == \u0027/\u0027) || !filePath.StartsWith(@\"\\\\\") ? 0 : 2;`\n\nTo better match how Uri does UNC detection, this could be\n```c#\nfilePath.Length \u003e= 2 \u0026\u0026 filePath[0] is \u0027/\u0027 or \u0027\\\\\u0027 \u0026\u0026 filePath[1] is \u0027/\u0027 or \u0027\\\\\u0027\n```\n(we\u0027ll match it on non-Windows as well, with any combination of `/` or `\\`)",
                                           "updatedAt":  "2025-07-03T16:17:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jMhqd",
                                           "createdAt":  "2023-08-03T15:48:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: Given that it is (again and not surprisingly) more complicated than we thought, we should not risk regressing even more 8.0. Let\u0027s try to decide in next release what to do about it.",
                                           "updatedAt":  "2023-08-03T15:48:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jNCsp",
                                           "createdAt":  "2023-08-03T17:27:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODCojlg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MihaZupan",
                                                                               "createdAt":  "2023-08-03T17:57:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tmat",
                                           "body":  "@MihaZupan I ended up writing custom escaping logic to work around issues with `EscapeDataString`, `EscapeUriString`.\r\n\r\nThe examples with unescaping `%20` above are not an issue for us. The input is either an absolute local path (`%` is an ordinary character in local path, not an escape), or a well-formed URL string (all characters that should be escaped are already escaped). \r\n\r\nWe preprocess the input string only if it is an absolute local path. The preprocessing makes sure the input to `Uri` constructor is a well-formed URL. If the input is URL string already, we pass it to `Uri` constructor as is.\r\n\r\nRe UNC: yes, I updated the logic to check for both slashes.\r\n\r\nSee https://github.com/dotnet/roslyn/blob/25c959b72b9ef9f432b952c4579015aad283cd5a/src/Features/LanguageServer/Protocol/Extensions/ProtocolConversions.cs#L169 for full implementation of the workaround.\r\n\r\nI tested this impl against VS Code and it works well.\r\n",
                                           "updatedAt":  "2023-08-03T17:27:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5uyTgD",
                                           "createdAt":  "2023-12-16T02:09:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "`GetComponents(UriComponents.Path, UriFormat.SafeUnescaped)` is also misbehaving for PUA characters, imo:\r\n\r\n```\r\n\u003e new Uri(\"https://a.com/𫚭\").GetComponents(UriComponents.Path, UriFormat.SafeUnescaped)\r\n\"𫚭%EE%89%9B\"\r\n```\r\n\r\nI\u0027d expect the result to be `𫚭`.",
                                           "updatedAt":  "2023-12-16T02:09:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6BxdKr",
                                           "createdAt":  "2024-06-18T23:03:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODr-TrQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "karelz",
                                                                               "createdAt":  "2024-07-29T14:42:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Eilon",
                                           "body":  "@tmat / @karelz / @MihaZupan - FYI I ran into this as well during a recent Chinese GB18030 testing pass. A tester was using a string containing certain characters (that happen to become part of a CSPROJ file name). Then `XDocument.Load()` and related APIs are used to read that CSPROJ, and that\u0027s when I noticed this issue.",
                                           "updatedAt":  "2024-06-18T23:03:00Z"
                                       }
                                   ],
                         "totalCount":  14
                     },
        "title":  "Uri seems to incorrectly escape local paths containing certain Unicode characters",
        "labels":  [
                       "bug",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/89589",
        "createdAt":  "2023-07-27T19:40:05Z",
        "number":  89589,
        "author":  "LGSoumya",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-07-27T20:28:11Z",
        "body":  "### Description\n\nWebrequest.Create() gives null exception and object is not instantiated. The machine.config used has websectionmodule with http, https,..all the standard prefixes but still we observe a null exception. This is observed while running mono on linux, cross compiled for ARM. We use target framework 2.0.\n\n### Reproduction Steps\n\n1. Create a webrequest using System.Net.Webrequest.Create(\"http:/ \"); Give any http url\r\n2. Run the code\r\n3. Null exception is observed at WebRequestPrefixElement.ctor(). \r\n\n\n### Expected behavior\n\nI expect to create a http webrequest and establish tcp connection with the server.\n\n### Actual behavior\n\n\r\nDue to the null exception, we are unable to establish a tcp connection. \n\n### Regression?\n\nYes, it used to work on 5.12.0.226 version of mono. After upgrading to 6.12.0.90, null exception occurs.\n\n### Known Workarounds\n\nNone\n\n### Configuration\n\n.Net target framewokr is 2.0\r\nLinux, cross compiled for ARM\n\n### Other information\n\nStack trace:\r\n2023-07-24 19:58:53,539 [CommandCenter_PollThread] ERROR CCConversation [(null)] - CCtoTOPThread(): CC polling error [http://usiadvr1470.am.bm.net/EventListener/RfService2.ashx] - System.NullReferenceException: Object reference not set to an instance of an object.\r\n  at System.Net.WebRequestPrefixElement..ctor (System.String P, System.Type creatorType) [0x00018] in \u003c8a7af65d4ba042aea1bce19d97dfbcc6\u003e:0 \r\n  at System.Net.WebRequest.PopulatePrefixList () [0x00040] in \u003c8a7af65d4ba042aea1bce19d97dfbcc6\u003e:0 \r\n  at System.Net.WebRequest.get_PrefixList () [0x00022] in \u003c8a7af65d4ba042aea1bce19d97dfbcc6\u003e:0 \r\n  at System.Net.WebRequest.Create (System.Uri requestUri, System.Boolean useUriBase) [0x0002e] in \u003c8a7af65d4ba042aea1bce19d97dfbcc6\u003e:0 \r\n  at System.Net.WebRequest.Create (System.Uri requestUri) [0x00014] in \u003c8a7af65d4ba042aea1bce19d97dfbcc6\u003e:0 \r\n  at System.Web.Services.Protocols.WebClientProtocol.GetWebRequest (System.Uri uri) [0x00019] in \u003c215eb52c36e14b168754174036d2ead3\u003e:0 \r\n  at System.Web.Services.Protocols.HttpWebClientProtocol.GetWebRequest (System.Uri uri) [0x00000] in \u003c215eb52c36e14b168754174036d2ead3\u003e:0 \r\n  at System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest (System.Uri uri) [0x00000] in \u003c215eb52c36e14b168754174036d2ead3\u003e:0 \r\n  at System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke (System.String methodName, System.Object[] parameters) [0x0000b] in \u003c215eb52c36e14b168754174036d2ead3\u003e:0 \r\n  at ReceiverForm.CCServer.RFListener.GetTOPQueuedCommands (System.UInt64 RFTOPAddress, System.Int32[] receivedMessageIds) [0x00000] in \u003c07f6e9d4de704963a0c1a015084cd250\u003e:0 \r\n  at (wrapper remoting-invoke-with-check) ReceiverForm.CCServer.RFListener.GetTOPQueuedCommands(ulong,int[])\r\n  at ReceiverForm.CCConversation.CCtoTOPThread () [0x0023a] in \u003c07f6e9d4de704963a0c1a015084cd250\u003e:0  - Void .ctor(String, Type)  (92 milliseconds elapsed in SOAP call)\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYpykMQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5inKQx",
                                           "createdAt":  "2023-07-27T19:40:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nWebrequest.Create() gives null exception and object is not instantiated. The machine.config used has websectionmodule with http, https,..all the standard prefixes but still we observe a null exception. This is observed while running mono on linux, cross compiled for ARM. We use target framework 2.0.\n\n### Reproduction Steps\n\n1. Create a webrequest using System.Net.Webrequest.Create(\"http:/ \"); Give any http url\r\n2. Run the code\r\n3. Null exception is observed at WebRequestPrefixElement.ctor(). \r\n\n\n### Expected behavior\n\nI expect to create a http webrequest and establish tcp connection with the server.\n\n### Actual behavior\n\n\r\nDue to the null exception, we are unable to establish a tcp connection. \n\n### Regression?\n\nYes, it used to work on 5.12.0.226 version of mono. After upgrading to 6.12.0.90, null exception occurs.\n\n### Known Workarounds\n\nNone\n\n### Configuration\n\n.Net target framewokr is 2.0\r\nLinux, cross compiled for ARM\n\n### Other information\n\nStack trace:\r\n2023-07-24 19:58:53,539 [CommandCenter_PollThread] ERROR CCConversation [(null)] - CCtoTOPThread(): CC polling error [http://usiadvr1470.am.bm.net/EventListener/RfService2.ashx] - System.NullReferenceException: Object reference not set to an instance of an object.\r\n  at System.Net.WebRequestPrefixElement..ctor (System.String P, System.Type creatorType) [0x00018] in \u003c8a7af65d4ba042aea1bce19d97dfbcc6\u003e:0 \r\n  at System.Net.WebRequest.PopulatePrefixList () [0x00040] in \u003c8a7af65d4ba042aea1bce19d97dfbcc6\u003e:0 \r\n  at System.Net.WebRequest.get_PrefixList () [0x00022] in \u003c8a7af65d4ba042aea1bce19d97dfbcc6\u003e:0 \r\n  at System.Net.WebRequest.Create (System.Uri requestUri, System.Boolean useUriBase) [0x0002e] in \u003c8a7af65d4ba042aea1bce19d97dfbcc6\u003e:0 \r\n  at System.Net.WebRequest.Create (System.Uri requestUri) [0x00014] in \u003c8a7af65d4ba042aea1bce19d97dfbcc6\u003e:0 \r\n  at System.Web.Services.Protocols.WebClientProtocol.GetWebRequest (System.Uri uri) [0x00019] in \u003c215eb52c36e14b168754174036d2ead3\u003e:0 \r\n  at System.Web.Services.Protocols.HttpWebClientProtocol.GetWebRequest (System.Uri uri) [0x00000] in \u003c215eb52c36e14b168754174036d2ead3\u003e:0 \r\n  at System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest (System.Uri uri) [0x00000] in \u003c215eb52c36e14b168754174036d2ead3\u003e:0 \r\n  at System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke (System.String methodName, System.Object[] parameters) [0x0000b] in \u003c215eb52c36e14b168754174036d2ead3\u003e:0 \r\n  at ReceiverForm.CCServer.RFListener.GetTOPQueuedCommands (System.UInt64 RFTOPAddress, System.Int32[] receivedMessageIds) [0x00000] in \u003c07f6e9d4de704963a0c1a015084cd250\u003e:0 \r\n  at (wrapper remoting-invoke-with-check) ReceiverForm.CCServer.RFListener.GetTOPQueuedCommands(ulong,int[])\r\n  at ReceiverForm.CCConversation.CCtoTOPThread () [0x0023a] in \u003c07f6e9d4de704963a0c1a015084cd250\u003e:0  - Void .ctor(String, Type)  (92 milliseconds elapsed in SOAP call)\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eLGSoumya\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-07-27T19:40:20Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "System.Net.WebRequestPrefixElement..ctor throws a null exception",
        "labels":  [
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/89708",
        "createdAt":  "2023-07-31T07:50:27Z",
        "number":  89708,
        "author":  "KalleOlaviNiemitalo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-18T12:19:46Z",
        "body":  "### Description\n\nUri.MakeRelativeUri returns the wrong relative URI if the base URI has a query and the argument URI has the same scheme, authority, and path but no query.  When the base URI and the relative URI are combined using the Uri(Uri, Uri) constructor, the result is not equal to the original argument URI.\n\n### Reproduction Steps\n\n```PowerShell\r\n# This is compatible with PowerShell 2.0, too.\r\nfunction Demo ([Uri]$Base, [Uri]$Target) {\r\n    $Relative = $Base.MakeRelativeUri($Target)\r\n    $Combined = New-Object \"System.Uri\" -ArgumentList @($Base, $Relative)\r\n    [PSCustomObject]@{\r\n        Base = $Base\r\n        Target = $Target\r\n        Relative = $Relative\r\n        Combined = $Combined\r\n        Match = $Combined -eq $Target\r\n    }\r\n}\r\n\r\n$Base1 = ([Uri]\"http://localhost/alpha#gamma\")\r\n$Base2 = ([Uri]\"http://localhost/alpha?beta#gamma\")\r\n$Target1 = ([Uri]\"http://localhost/alpha#delta\")\r\n$Target2 = ([Uri]\"http://localhost/alpha?beta#delta\")\r\n\r\n@(\r\n    Demo $Base1 $Target1\r\n    Demo $Base1 $Target2\r\n    Demo $Base2 $Target1\r\n    Demo $Base2 $Target2\r\n) | Format-Table\r\n```\r\n\n\n### Expected behavior\n\n```none\r\nBase                              Target                            Relative    Combined                          Match\r\n----                              ------                            --------    --------                          -----\r\nhttp://localhost/alpha#gamma      http://localhost/alpha#delta      #delta      http://localhost/alpha#delta       True\r\nhttp://localhost/alpha#gamma      http://localhost/alpha?beta#delta ?beta#delta http://localhost/alpha?beta#delta  True\r\nhttp://localhost/alpha?beta#gamma http://localhost/alpha#delta      alpha#delta http://localhost/alpha#delta       True\r\nhttp://localhost/alpha?beta#gamma http://localhost/alpha?beta#delta #delta      http://localhost/alpha?beta#delta  True\r\n```\n\n### Actual behavior\n\n```none\r\nBase                              Target                            Relative    Combined                          Match\r\n----                              ------                            --------    --------                          -----\r\nhttp://localhost/alpha#gamma      http://localhost/alpha#delta      #delta      http://localhost/alpha#delta       True\r\nhttp://localhost/alpha#gamma      http://localhost/alpha?beta#delta ?beta#delta http://localhost/alpha?beta#delta  True\r\nhttp://localhost/alpha?beta#gamma http://localhost/alpha#delta      #delta      http://localhost/alpha?beta#delta False\r\nhttp://localhost/alpha?beta#gamma http://localhost/alpha?beta#delta ?beta#delta http://localhost/alpha?beta#delta  True\r\n```\n\n### Regression?\n\nNo, I get the same incorrect result on .NET Framework.\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nPowerShell 7.3.5 using .NET 7.0.8 on Windows 10 version 22H2 x64.\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYvvQ7g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5i0NNS",
                                           "createdAt":  "2023-07-31T07:50:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nUri.MakeRelativeUri returns the wrong relative URI if the base URI has a query and the argument URI has the same scheme, authority, and path but no query.  When the base URI and the relative URI are combined using the Uri(Uri, Uri) constructor, the result is not equal to the original argument URI.\n\n### Reproduction Steps\n\n```PowerShell\r\n# This is compatible with PowerShell 2.0, too.\r\nfunction Demo ([Uri]$Base, [Uri]$Target) {\r\n    $Relative = $Base.MakeRelativeUri($Target)\r\n    $Combined = New-Object \"System.Uri\" -ArgumentList @($Base, $Relative)\r\n    [PSCustomObject]@{\r\n        Base = $Base\r\n        Target = $Target\r\n        Relative = $Relative\r\n        Combined = $Combined\r\n        Match = $Combined -eq $Target\r\n    }\r\n}\r\n\r\n$Base1 = ([Uri]\"http://localhost/alpha#gamma\")\r\n$Base2 = ([Uri]\"http://localhost/alpha?beta#gamma\")\r\n$Target1 = ([Uri]\"http://localhost/alpha#delta\")\r\n$Target2 = ([Uri]\"http://localhost/alpha?beta#delta\")\r\n\r\n@(\r\n    Demo $Base1 $Target1\r\n    Demo $Base1 $Target2\r\n    Demo $Base2 $Target1\r\n    Demo $Base2 $Target2\r\n) | Format-Table\r\n```\r\n\n\n### Expected behavior\n\n```none\r\nBase                              Target                            Relative    Combined                          Match\r\n----                              ------                            --------    --------                          -----\r\nhttp://localhost/alpha#gamma      http://localhost/alpha#delta      #delta      http://localhost/alpha#delta       True\r\nhttp://localhost/alpha#gamma      http://localhost/alpha?beta#delta ?beta#delta http://localhost/alpha?beta#delta  True\r\nhttp://localhost/alpha?beta#gamma http://localhost/alpha#delta      alpha#delta http://localhost/alpha#delta       True\r\nhttp://localhost/alpha?beta#gamma http://localhost/alpha?beta#delta #delta      http://localhost/alpha?beta#delta  True\r\n```\n\n### Actual behavior\n\n```none\r\nBase                              Target                            Relative    Combined                          Match\r\n----                              ------                            --------    --------                          -----\r\nhttp://localhost/alpha#gamma      http://localhost/alpha#delta      #delta      http://localhost/alpha#delta       True\r\nhttp://localhost/alpha#gamma      http://localhost/alpha?beta#delta ?beta#delta http://localhost/alpha?beta#delta  True\r\nhttp://localhost/alpha?beta#gamma http://localhost/alpha#delta      #delta      http://localhost/alpha?beta#delta False\r\nhttp://localhost/alpha?beta#gamma http://localhost/alpha?beta#delta ?beta#delta http://localhost/alpha?beta#delta  True\r\n```\n\n### Regression?\n\nNo, I get the same incorrect result on .NET Framework.\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nPowerShell 7.3.5 using .NET 7.0.8 on Windows 10 version 22H2 x64.\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eKalleOlaviNiemitalo\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-07-31T07:50:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5i1jNZ",
                                           "createdAt":  "2023-07-31T11:42:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "It boils down to the fact, that **empty relative** Uri will keep query and fragment part of the base Uri when combining. (@MihaZupan will take a look at the spec if this is correct behavior)\r\nWhile query and fragment of the base are ignored in `MakeRelativeUri` call, which makes sense.\r\n\r\nIn isolation both cases make sense to me, which would make it By Design. Let\u0027s see what @MihaZupan finds in the RFC.\r\n\r\nHere\u0027s C# code:\r\n```c#\r\n    static void Main()\r\n    {\r\n        Uri baseUri = new Uri(\"http://localhost/alpha?beta#gamma\");\r\n        Uri targetUri = new Uri(\"http://localhost/alpha\");\r\n        string relative1 = \"\";\r\n        string relative2 = \"#hello\";\r\n        string relative3 = \"?world\";\r\n\r\n        PrintRelative(baseUri, targetUri);\r\n        PrintCombined(baseUri, relative1);\r\n        PrintCombined(baseUri, relative2);\r\n        PrintCombined(baseUri, relative3);\r\n    }\r\n    static void PrintRelative(Uri baseUri, Uri targetUri)\r\n    {\r\n        Console.WriteLine($\"Base:     {baseUri}\");\r\n        Console.WriteLine($\"Target:   {targetUri}\");\r\n        Uri relativeUri = baseUri.MakeRelativeUri(targetUri);\r\n        Console.WriteLine($\"Relative: {relativeUri}\");\r\n        Console.WriteLine();\r\n    }\r\n    static void PrintCombined(Uri baseUri, string relativeUri)\r\n    {\r\n        Console.WriteLine($\"Base:     {baseUri}\");\r\n        Console.WriteLine($\"Relative: {relativeUri}\");\r\n        Uri combinedUri = new Uri(baseUri, relativeUri);\r\n        Console.WriteLine($\"Combined: {combinedUri}\");\r\n        Console.WriteLine();\r\n    }\r\n```\r\n\r\nOutput:\r\n```\r\nBase:     http://localhost/alpha?beta#gamma\r\nTarget:   http://localhost/alpha\r\nRelative:\r\n\r\nBase:     http://localhost/alpha?beta#gamma\r\nRelative:\r\nCombined: http://localhost/alpha?beta#gamma\r\n\r\nBase:     http://localhost/alpha?beta#gamma\r\nRelative: #hello\r\nCombined: http://localhost/alpha?beta#hello\r\n\r\nBase:     http://localhost/alpha?beta#gamma\r\nRelative: ?world\r\nCombined: http://localhost/alpha?world\r\n```",
                                           "updatedAt":  "2023-07-31T11:42:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5i2fbM",
                                           "createdAt":  "2023-07-31T14:11:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "AFAIK, the Uri(Uri, Uri) constructor complies with IETF RFC 3986 section 5.2 Relative Resolution.  That RFC does not define an algorithm for Uri.MakeRelativeUri to use.  Anyway, Uri.MakeRelativeUri is documented as returning \"a relative Uri that, when appended to the current URI instance, yields `uri`\".  If \"appended\" means the Uri(Uri, Uri) constructor, then Uri.MakeRelativeUri does not work as documented.",
                                           "updatedAt":  "2023-07-31T14:11:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5i2lAg",
                                           "createdAt":  "2023-07-31T14:24:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "\u003e Anyway, Uri.MakeRelativeUri is documented as returning \"a relative Uri that, when appended to the current URI instance, yields `uri`\"\r\n\r\nWhich it does, except the case of empty relative path and base Uri having query or fragment. I am not surprised such corner case was overlooked in the documentation.",
                                           "updatedAt":  "2023-07-31T14:24:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5i-TcN",
                                           "createdAt":  "2023-08-01T14:58:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "The way I read something like\r\n```c#\r\nbaseUri.MakeRelativeUri(targetUri);\r\n```\r\nis along the lines of \"what should I put into an href so that a browser currently at {baseUri} will navigate to {targetUri}\".\r\nThat would also imply that the following holds:\r\n```c#\r\ntargetUri == new Uri(baseUri, baseUri.MakeRelativeUri(targetUri)))\r\n```\r\n\r\nIt looks like this breaks down if `paths are the same` and `base has a query` and `target doesn\u0027t have a query`.\r\n\r\nWith that, I would expect that `MakeRelativeUri` would take the merging behavior into account, such that the following expected behavior would make sense to me\r\n```\r\nBase                              Target                            Relative\r\n----                              ------                            --------\r\nExpected:\r\nhttp://localhost/alpha?beta#gamma http://localhost/alpha#delta      alpha#delta\r\n\r\nActual:\r\nhttp://localhost/alpha?beta#gamma http://localhost/alpha#delta      #delta\r\n```\r\n\r\nThe other case that was pointed out is fine IMO, given that both will produce the same result when merged.\r\n```\r\nExpected:\r\nhttp://localhost/alpha?beta#gamma http://localhost/alpha?beta#delta #delta\r\n\r\nActual (but still fine):\r\nhttp://localhost/alpha?beta#gamma http://localhost/alpha?beta#delta ?beta#delta\r\n```\r\n\r\n---\r\n\r\nI\u0027m inclined to say that this is a bug, though I don\u0027t have a good sense of how impactful of a breaking change fixing it would be.\r\n",
                                           "updatedAt":  "2023-08-01T15:01:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5i-tTu",
                                           "createdAt":  "2023-08-01T15:53:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@MihaZupan I don\u0027t understand why in your first case you expect relative to be \"alpha#delta\". I would expect it to be \"#delta\", which is actual behavior. What am I missing?",
                                           "updatedAt":  "2023-08-01T15:53:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5i-9Du",
                                           "createdAt":  "2023-08-01T16:25:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: Even if we decide something is a bug, we should keep in mind that diverging from .NET Framework might not be desirable for some SW.\r\nUnless it is really problematic, we should likely Won\u0027t Fix it.\r\nMoving to 9.0 to make a decision there.",
                                           "updatedAt":  "2023-08-01T16:25:37Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Uri.MakeRelativeUri ignores query of base URI",
        "labels":  [
                       "bug",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/89768",
        "createdAt":  "2023-08-01T09:41:25Z",
        "number":  89768,
        "author":  "roji",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC-Xohg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nickdavies",
                                            "createdAt":  "2024-02-04T01:31:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "D3-LucaPiombino",
                                            "createdAt":  "2024-10-11T18:27:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gmcchessney",
                                            "createdAt":  "2025-01-22T16:50:10Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2024-10-10T14:05:51Z",
        "body":  "When a port isn\u0027t specified, Uri automatically infers the default port  based on the scheme:\r\n\r\n```c#\r\nConsole.WriteLine(new Uri(\"http://example.com\").Port); // 80\r\nConsole.WriteLine(new Uri(\"https://example.com\").Port); // 443\r\n```\r\n\r\nHowever, Uri doesn\u0027t provide any way to know whether that port was explicitly user-specified, or whether Uri inferred it. This presents a problem when using Uri to accept endpoint information from users for services which by default run on the non-standard port.\r\n\r\nFor example, if my custom service by default runs over HTTP on port 12345, and the user omits the port, Uri will return 80 as the HTTP default. If I assume that 80 means the user hasn\u0027t provided a port and default to 12345, it becomes impossible for the user to run on port 80 if they so wish.\r\n\r\nOf course, it\u0027s possible to do various string matching to see whether `:80` was present, but it seems like Uri should provide some way to access the user-provided port, or to know whether the port was inferred or not.\r\n\r\n/cc @stephentoub",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOj1xWAw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5i8OD5",
                                           "createdAt":  "2023-08-01T09:41:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWhen a port isn\u0027t specified, Uri automatically infers the default port  based on the scheme:\r\n\r\n```c#\r\nConsole.WriteLine(new Uri(\"http://example.com\").Port); // 80\r\nConsole.WriteLine(new Uri(\"https://example.com\").Port); // 443\r\n```\r\n\r\nHowever, Uri doesn\u0027t provide any way to know whether that port was explicitly user-specified, or whether Uri inferred it. This presents a problem when using Uri to accept endpoint information from users for services which by default run on the non-standard port.\r\n\r\nFor example, if my custom service by default runs over HTTP on port 12345, and the user omits the port, Uri will return 80 as the HTTP default. If I assume that 80 means the user hasn\u0027t provided a port and default to 12345, it becomes impossible for the user to run on port 80 if they so wish.\r\n\r\nOf course, it\u0027s possible to do various string matching to see whether `:80` was present, but it seems like Uri should provide some way to access the user-provided port, or to know whether the port was inferred or not.\r\n\r\n/cc @stephentoub\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eroji\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-01T09:41:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5i9Jn7",
                                           "createdAt":  "2023-08-01T12:16:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "cc: @MihaZupan ",
                                           "updatedAt":  "2023-08-01T12:16:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5i9lAy",
                                           "createdAt":  "2023-08-01T13:22:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEDmLsA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "roji",
                                                                               "createdAt":  "2023-08-01T13:24:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gmcchessney",
                                                                               "createdAt":  "2025-01-22T16:54:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "I don\u0027t think there\u0027s a built-in way to distinguish whether the port was set vs. it had a default value for `http` Uris.\nThis information is something that Uri does know internally, but we don\u0027t expose an API to tell you that for known schemes.\nFor custom schemes that don\u0027t specify a default port, `Port` will actually return `-1` if it wasn\u0027t explicitly set.\n\nA workaround that makes use of that fact without manually parsing stuff:\n```c#\ninternal static class UriHelper\n{\n    // \"http://foo/test\" =\u003e -1\n    // \"http://foo:80/test\" =\u003e 80\n    public static int GetOriginalPort(this Uri uri)\n    {\n        Debug.Assert(uri.Scheme is \"http\" or \"https\");\n        return new Uri($\"custom-{uri.OriginalString.TrimStart(\u0027 \u0027, \u0027\\n\u0027, \u0027\\r\u0027, \u0027\\t\u0027)}\", UriKind.Absolute).Port;\n    }\n}\n```\n\n",
                                           "updatedAt":  "2024-10-10T13:44:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5i93Uz",
                                           "createdAt":  "2023-08-01T13:54:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEDmQNA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "roji",
                                                                               "createdAt":  "2023-08-01T14:21:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gmcchessney",
                                                                               "createdAt":  "2025-01-22T17:04:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "I think an API along the lines of `int OriginalPort`, would make sense here (same as `Port`, but can return `-1` for known schemes as well).\r\nMoving to future for now so we can gather feedback on how common this scenario is.",
                                           "updatedAt":  "2023-08-01T13:54:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5i-3XV",
                                           "createdAt":  "2023-08-01T16:13:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "I somewhat does not understand the argumentation. Uri has `Port` value and I would expect the service should respect that - regardless how the  value was created. If you service is not HTTP could you use different scheme to avoid the defaults?  ",
                                           "updatedAt":  "2023-08-01T16:13:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5i_keA",
                                           "createdAt":  "2023-08-01T18:03:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEDmKDA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gmcchessney",
                                                                               "createdAt":  "2025-01-22T16:52:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "roji",
                                           "body":  "The service in question is a database server using gRPC over HTTP, with some arbitrary non-80 port as its default. On the client side, the .NET gRPC client has [GrpcChannel.ForAddress](https://grpc.github.io/grpc/csharp-dotnet/api/Grpc.Net.Client.GrpcChannel.html#Grpc_Net_Client_GrpcChannel_ForAddress_Uri_), which accepts a Uri, and AFAIK the http scheme is expected there; it really does speak HTTP over the wire, it just does it on a different default port.\r\n\r\nSo for one thing, I\u0027m not sure I can invent a new scheme and pass it to GrpcChannel: it may very well care about the scheme (e.g. http vs. https to know about encryption?). It\u0027s also a bit odd to require users to use the specific new scheme where in fact it\u0027s just HTTP on the wire.\r\n\r\nDoes that make sense?",
                                           "updatedAt":  "2023-08-01T18:03:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yxS-k",
                                           "createdAt":  "2024-02-04T01:38:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nickdavies",
                                           "body":  "I am running into the same problem. I have a URI I want to accept and for my application my default port is 38281 so I would like to know if the user did or didn\u0027t provide one and set it to 38281 if they didn\u0027t.\r\n\r\nHowever If my user decides to run on port http port 80 or https port 443 (which they are allowed to do) I can\u0027t determine if I should use the default 38281 or not because 80 may be what they explicitly provided or the default.",
                                           "updatedAt":  "2024-02-04T01:38:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PXFYD",
                                           "createdAt":  "2024-10-10T14:05:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "baronfel",
                                           "body":  "Chiming in that we had the same problem in https://github.com/dotnet/sdk/pull/44050 - for our scenario (falling back to default ports for http if https doesn\u0027t work) we needed to know if the user-provided domain had a port or not, but we didn\u0027t want the port-defaulting behavior of `Uri` to clobber our detection.",
                                           "updatedAt":  "2024-10-10T14:05:49Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "Uri doesn\u0027t expose the original, user-provided port value",
        "labels":  [
                       "api-suggestion",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/91621",
        "createdAt":  "2023-09-05T07:51:08Z",
        "number":  91621,
        "author":  "performanceautofiler",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-22T01:41:03Z",
        "body":  "\u003c!-- DATA: {\"RunType\":{\"Repo\":\"dotnetruntime\",\"Branch\":\"refs/heads/main\",\"Arch\":\"x64\",\"Os\":\"Ubuntu2204\",\"Queue\":\"TigerUbuntu\",\"Frequency\":\"Weekly\",\"CoreClr\":true,\"Mono\":false,\"Wasm\":false,\"Maui\":false,\"Configs\":[\"CompilationMode:tiered\",\"RunKind:micro\"]},\"RegressionDate\":\"2023-08-28T19:02:26\",\"IsRegression\":true} --\u003e\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6](https://github.com/dotnet/runtime/commit/a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6)\nCompare | [4c013865c31cb154ccf88f7628f2d26758b00d3e](https://github.com/dotnet/runtime/commit/4c013865c31cb154ccf88f7628f2d26758b00d3e)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6...4c013865c31cb154ccf88f7628f2d26758b00d3e)\nConfigs | CompilationMode:tiered, RunKind:micro\n\n\n### Regressions in System.Net.Primitives.Tests.IPAddressPerformanceTests\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[TryFormat - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04/System.Net.Primitives.Tests.IPAddressPerformanceTests.TryFormat(address%3a%20143.24.20.36).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Net.Primitives/IPAddressPerformanceTests.cs#L53-#L56\u003e)\u003c/li\u003e\u003cli\u003e[📈 - ADX Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACn1UUW/TMBB+76/wWxJovaQtpesUpG4IDaGNshbxgNDkJbfGI7Yj+7K2iB/POSld2zGUF+fu+87fZ9+5BGS3CA5ZyoL5xiEofg3IZ1YqifIRHF9Q1vGPs2meW3BuBvbeWCV0Bm1mYTcffABD0SImLBkOeH/I+zEfjKLgrFP6XRwKiwupgLbKBQLSMuzH/UEvHvXiN4v47WR4OhmMeZIk/fEofh3HkziOWva8MBavhQLXsum7KyG8qfWXGmqYOLRSL7us+fO4bSRi3zvBN6lzs3I8iflU5SMv7LLPP69K7s0EXRaspO6tR8OeUHnQ/QchOb1M+EIuwT6jSI1QetLXu1pjTbXjIZ9aRay/0JKgwkeofgUW9tF9j272OCxfvlA+Gb9MSMaHlH0bO0F8Xj8ZaFU5iogM9ilzsI9U/NDH6thH58dZ5woE8UGBRtf5zVYFJdh5Lcv8BirDUuqr3KAGPLFkgO48OESdW2qlosFZuHcnBYjcnSgh9ROQrvnC6Hu5rK1AabSjwCdS2rCUzKw5Kjq1WSERMiRlDYjOJWDGvpBtTP1nuwujKlk26yuTtxyUBM2fSH4YfOP5ZDNRB5kLQ+bBLky1Xe2y0oGqcBM+23S2NItNBdGhMz9Ac6TzZ+/2RoowrlZKWPkLmLDLWyXWYYP3krrsVcTuNkcFujvJXe+4mRyqU1nzQEfzDHwDri4xtSQ/D/cstfEpdYtYUqVBdFDtwUjNftJVpVJrsPtzbPQ+0ILOKe8bJCvIFVtJLFjowEpw6W6su2ydmbJWOj3Wt2njLm0FERAllpAG7+mtoe7dbH+bFyjULvIxV5USU7EGF/0B305jrQoFAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 11.85 ns | 12.86 ns | 1.09 | 0.26 | True | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/09_05_2023/refs/heads/main_x64_ubuntu%2022.04_Regression/System.Net.Primitives.Tests.IPAddressPerformanceTests_1.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/09_05_2023/refs/heads/main_x64_ubuntu%2022.04_Regression/System.Net.Primitives.Tests.IPAddressPerformanceTests.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n```cmd\ngit clone https://github.com/dotnet/performance.git\npython3 .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027System.Net.Primitives.Tests.IPAddressPerformanceTests*\u0027\n```\n\n\u003cdetails\u003e\n\n\n### Payloads\n\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-89920c06-2fa3-4467-ab0d-bbef161f7dff1bc933c1aca4de09f/4c6a2ca5-ff5a-4649-89ec-55d898fa21c3.zip?sv=2021-08-06\u0026se=2023-09-27T08%3A56%3A19Z\u0026sr=c\u0026sp=rl\u0026sig=IScad2OS9jx0nL9nbE2UVRWMwFKnjmTq2%2BgjqXxdIps%3D\u003e)\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-63505cfd-1724-4101-9a2f-81a3d2bd4dc4dba4ae0d8244a7484/37acaa3e-2f98-479b-82c0-cc3c2fe9259a.zip?sv=2021-08-06\u0026se=2023-09-28T00%3A19%3A14Z\u0026sr=c\u0026sp=rl\u0026sig=Z3zJF2UweUAKMrjL0dO5R%2FQbE4wC20xRiFPztW8DPNI%3D\u003e)\n### System.Net.Primitives.Tests.IPAddressPerformanceTests.TryFormat(address: 143.24.20.36)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 12.8599746068092 \u003e 12.056727412948058.\r\nIsChangePoint: Marked as a change because one of 8/28/2023 1:23:07 PM, 9/4/2023 7:24:21 PM falls between 8/27/2023 6:19:41 AM and 9/4/2023 7:24:21 PM.\r\nIsRegressionStdDev: Marked as regression because -11.07493886512902 (T) = (0 -12.724523881091898) / Math.Sqrt((0.19911632037081872 / (13)) + (0.05423179428190999 / (25))) is less than -2.028094000977961 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (13) + (25) - 2, .025) and -0.1300605723515152 = (11.260037021390588 - 12.724523881091898) / 11.260037021390588 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked as regression because Edge Detector said so.\r\n\r\n```\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6](https://github.com/dotnet/runtime/commit/a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6)\nCompare | [4c013865c31cb154ccf88f7628f2d26758b00d3e](https://github.com/dotnet/runtime/commit/4c013865c31cb154ccf88f7628f2d26758b00d3e)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6...4c013865c31cb154ccf88f7628f2d26758b00d3e)\nConfigs | CompilationMode:tiered, RunKind:micro\n\n\n### Regressions in SciMark2.kernel\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[benchSparseMult - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04/SciMark2.kernel.benchSparseMult.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/runtime/SciMark/kernel.cs#L120-#L126\u003e)\u003c/li\u003e\u003cli\u003e[📈 - ADX Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACn1UTW+bQBC9+1fsDWgxwcRxY0dUctJDpMptGrvqoaqiNUzMJvuBZpfarvrjO0DqgNNUXJaZ997O251ZCY7dObCOpcxbZmLB8TGJHgE1yGgNOiuWJUcLi0o672Iga7h1HN1KKCBOzh04WvpJnJwO48kwPlvF72bj6exsHI2m42mcJG/jeBbHQcteFgbdJ67Atmz61hL820p/qaCCmXUo9CZkzV+Ne4oE7PvA+yZ0brY2GsXRXOWTcZTE10n0eSujG8B7L2TeVujhbjIecpV74T8Io+n1KFqJDeALitAOZE36uq60q0g7HkdzVMT6C5UE5XWE9EtA6KKTGt3s0ZeXr8iPzl8njM77lK6NQ0HRsno20FZlKcIz6FKWgD9JvO9je+xj8ONisABOfFCgnR38ZtuCEuyyEjK/hdKwlBokN06DO0EyQHfu9VGXyKldGhzCvT0pgOf2RHGhn4F0zVdG34tNhdwJoy0FPlKlDUuJDM2R6ByzQjjIHFXWgOhcPGbwlWxj6j/bXRlVCtmsFyZvOU4QNH8mrWga6sark81o9DJXhswDrkz5tDpkhQVVur3/YtObjVntSwj6zuoBWjo6f/a+M1KEsZVSHMUvYBw3d4rv/AZflxSyNwFb748EwkPJYe24mRzSKdE80NG8AN+CpWFOkcrP/Y6lNj6nbuEbUjoNemoPRmj2SFeVCq0Bu3NsdBeIoHPK1w2SFeSKbYUrmG8BBdj0MNYh22VGVkqnx/Xt27hN24II6ISTkHof6K2h7t0//TYvkK9tUMdsKYVL+Q5s8Afvbc050wQAAA==\u003e)\u003c/li\u003e\u003c/ul\u003e | 493.53 ms | 635.56 ms | 1.29 | 0.11 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/09_05_2023/refs/heads/main_x64_ubuntu%2022.04_Regression/SciMark2.kernel_1.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/09_05_2023/refs/heads/main_x64_ubuntu%2022.04_Regression/SciMark2.kernel.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n```cmd\ngit clone https://github.com/dotnet/performance.git\npython3 .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027SciMark2.kernel*\u0027\n```\n\n\u003cdetails\u003e\n\n\n### Payloads\n\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-89920c06-2fa3-4467-ab0d-bbef161f7dff1bc933c1aca4de09f/4c6a2ca5-ff5a-4649-89ec-55d898fa21c3.zip?sv=2021-08-06\u0026se=2023-09-27T08%3A56%3A19Z\u0026sr=c\u0026sp=rl\u0026sig=IScad2OS9jx0nL9nbE2UVRWMwFKnjmTq2%2BgjqXxdIps%3D\u003e)\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-63505cfd-1724-4101-9a2f-81a3d2bd4dc4dba4ae0d8244a7484/37acaa3e-2f98-479b-82c0-cc3c2fe9259a.zip?sv=2021-08-06\u0026se=2023-09-28T00%3A19%3A14Z\u0026sr=c\u0026sp=rl\u0026sig=Z3zJF2UweUAKMrjL0dO5R%2FQbE4wC20xRiFPztW8DPNI%3D\u003e)\n### SciMark2.kernel.benchSparseMult\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 635.5553794615385 \u003e 518.1746533384616.\r\nIsChangePoint: Marked as a change because one of 8/10/2023 8:47:51 AM, 8/28/2023 1:23:07 PM, 9/4/2023 7:24:21 PM falls between 8/27/2023 6:19:41 AM and 9/4/2023 7:24:21 PM.\r\nIsRegressionStdDev: Marked as regression because -20.80254686105018 (T) = (0 -635066391.063553) / Math.Sqrt((549931303529396.75 / (13)) + (938876866845.3124 / (25))) is less than -2.028094000977961 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (13) + (25) - 2, .025) and -0.2708801752398864 = (499705954.53161454 - 635066391.063553) / 499705954.53161454 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6](https://github.com/dotnet/runtime/commit/a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6)\nCompare | [4c013865c31cb154ccf88f7628f2d26758b00d3e](https://github.com/dotnet/runtime/commit/4c013865c31cb154ccf88f7628f2d26758b00d3e)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6...4c013865c31cb154ccf88f7628f2d26758b00d3e)\nConfigs | CompilationMode:tiered, RunKind:micro\n\n\n### Regressions in System.Text.RegularExpressions.Tests.Perf_Regex_Industry_RustLang_Sherlock\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[Count - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04/System.Text.RegularExpressions.Tests.Perf_Regex_Industry_RustLang_Sherlock.Count(Pattern%3a%20%22zqj%22%2c%20Options%3a%20None).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.RegularExpressions/Perf.Regex.Industry.cs#L191-#L192\u003e)\u003c/li\u003e\u003cli\u003e[📈 - ADX Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACn1U227aQBB95ytWebHdGscQQoDIlUhaKVWbS4GqD1WFNvbEbLIXd3dcIOrHd2xSYkhT+cHrmXPOntmdsQRkcwSHLGHedO0QVDSDFUYTyEvJ7YdVYcE5YbSjuEMX3YC9m1MWVvOPOisd2vV8Qq/PXOfz6QKsNOlDdG5Kjf4NRwSrR+zg8ef9QciuC6yURuzKaAi805astnfILc6EAvKQcQSkpd+Nu0ftuN+Oj2fxyag3HB0PouGwc9I9GbyN41EcBxv2dGEsXnEFbsOm51aCPyn1lxJKGJE/ofOQ1V8V7ikSsO8t75vQmVm6qBNHY5X1e1E3vuhG10tZV+mFzFsK3V71e22uMi/8B6EzvOhEM5GDfUERGkFWpK+3dBYlace9aGwVsf5CJUF5FSH9Aiw00d0KXe+xKy9fke8MXid0BruUZhlbQ9G0fC5g48pRhKfQpEzB/iLx3TqW+3W0fpy2LoETHxRodK3fbEmtAeysFDKbQGFYQg2XGdSAh5YKoDv3dlFnlut0UeMs3LnDBfDMHSou9DOQrvnc6DuRl5bXrUWBT+S0ZimRWrMnOrbpQiCkSM5qEJ2Lx4x9JVsX9Z/tzo0qhKzXlybbcFAQNHsmVWNTNV6VrEdtJ1MPCtiZKZ5W26xwoApc+y82vcnNbF1AsFtZNUBTpPNn7xojRRhXKsWteATGbT5XfOXX+MpSyN4E7Ha9JxBuLYdVxfXkkE5hzT0dzQvwBFwpMbFkP/MbJW3iY+oWnpPSUbCjdm+EZg90VYnQGmxzjo1uAi3ojPJVg6QLqootBS6Y78AKcMl2rEO2So0slU72/a03cZdsDBEQBUpIvPf0r6HuXT991n8gX7ugirlCCkz4ClzwB7CEXf4jBQAA\u003e)\u003c/li\u003e\u003c/ul\u003e | 36.63 μs | 41.26 μs | 1.13 | 0.32 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/09_05_2023/refs/heads/main_x64_ubuntu%2022.04_Regression/System.Text.RegularExpressions.Tests.Perf_Regex_Industry_RustLang_Sherlock_1.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/09_05_2023/refs/heads/main_x64_ubuntu%2022.04_Regression/System.Text.RegularExpressions.Tests.Perf_Regex_Industry_RustLang_Sherlock.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n```cmd\ngit clone https://github.com/dotnet/performance.git\npython3 .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027System.Text.RegularExpressions.Tests.Perf_Regex_Industry_RustLang_Sherlock*\u0027\n```\n\n\u003cdetails\u003e\n\n\n### Payloads\n\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-89920c06-2fa3-4467-ab0d-bbef161f7dff1bc933c1aca4de09f/4c6a2ca5-ff5a-4649-89ec-55d898fa21c3.zip?sv=2021-08-06\u0026se=2023-09-27T08%3A56%3A19Z\u0026sr=c\u0026sp=rl\u0026sig=IScad2OS9jx0nL9nbE2UVRWMwFKnjmTq2%2BgjqXxdIps%3D\u003e)\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-63505cfd-1724-4101-9a2f-81a3d2bd4dc4dba4ae0d8244a7484/37acaa3e-2f98-479b-82c0-cc3c2fe9259a.zip?sv=2021-08-06\u0026se=2023-09-28T00%3A19%3A14Z\u0026sr=c\u0026sp=rl\u0026sig=Z3zJF2UweUAKMrjL0dO5R%2FQbE4wC20xRiFPztW8DPNI%3D\u003e)\n### System.Text.RegularExpressions.Tests.Perf_Regex_Industry_RustLang_Sherlock.Count(Pattern: \"zqj\", Options: None)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 41.25734353618421 \u003e 38.49274458266977.\r\nIsChangePoint: Marked as a change because one of 8/28/2023 1:23:07 PM, 9/4/2023 7:24:21 PM falls between 8/27/2023 6:19:41 AM and 9/4/2023 7:24:21 PM.\r\nIsRegressionStdDev: Marked as regression because -3.827698670859208 (T) = (0 -42439.53143484542) / Math.Sqrt((12469277.456513325 / (13)) + (9232831.4236689 / (25))) is less than -2.028094000977961 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (13) + (25) - 2, .025) and -0.11601557816957614 = (38027.7231474244 - 42439.53143484542) / 38027.7231474244 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6](https://github.com/dotnet/runtime/commit/a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6)\nCompare | [4c013865c31cb154ccf88f7628f2d26758b00d3e](https://github.com/dotnet/runtime/commit/4c013865c31cb154ccf88f7628f2d26758b00d3e)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6...4c013865c31cb154ccf88f7628f2d26758b00d3e)\nConfigs | CompilationMode:tiered, RunKind:micro\n\n\n### Regressions in Microsoft.Extensions.DependencyInjection.GetService\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[Singleton - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04/Microsoft.Extensions.DependencyInjection.GetService.Singleton.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/Microsoft.Extensions.DependencyInjection/GetServiceBenchmark.cs#L82-#L83\u003e)\u003c/li\u003e\u003cli\u003e[📈 - ADX Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACn1U72/TMBD93r/C35JAmqVd96ObgtRtiCFUGG0RHxCavOTaeMR2ZF9oi/jjOSejTTqG+qH23XvP9+I7F4DsHsEiS5g3FanRVi8xertBUFZoZaMbKEFloNLte/UIKVIwegc4B/NTpBDNhVoVgFp5lz36Z/cWucGFkECKGUdAWvrDeHjcj0/78ckiPrs4iS/iQXQ8Ho/i8dnrmHZx0LDnuTb4kUuwDZt+DwX4s0p9rqCCC4uGzgtZvXO4p0jAvvW8r0Jlem2jQRxNZHY6iobx7TD6tC6iOzBLL2TeWqj+5nTU5zLzwn8QBuPbQbQQKzDPKEIhFI705aFSWJF2PIomRhLrL7QgKHcR0i/BQBs9dOj6jK588YL84PxlwuC8S2nb2BUUzau9gaYqSxGeQpvibpHEuz7Whz563y97U+DEBwkKbe83W+eUYFeVKLIZlJol1D6ZRgV4ZMgA3bnXRV0ZrtK8xhlY2qMceGaPJBdqD6RrvtZqKVaV4a7PLAU+UKU1S7rmPBCdmDQXSE1JldUg+i4e0+aFbG3qP8dda1mKol5PddZwUBA025MWNCuu8VyyHpxO5lqTeTALXT6tdllhQZa49Z8derfSi20JQdeZG6A50vdnb1ojRRhbScmN+AWMm9W95Bu/xruSQvYqYA/bA4FwV3LoHNeTQzql0W6an4FnYKsCE0PlZ37LUhOfULfwFSkdBx21Ry0U+0FXlQilwLTnWKs20Li3xDDXIGlOrthaYM58C0aATXZjHbJNqotKquSwvm0Tt0lTEAFRYAGJd0NvDXXv9mlbv0C+soGL2bIQmPAN2OAPYhrxjvEEAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 8.76 ns | 9.80 ns | 1.12 | 0.34 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/09_05_2023/refs/heads/main_x64_ubuntu%2022.04_Regression/Microsoft.Extensions.DependencyInjection.GetService_1.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/09_05_2023/refs/heads/main_x64_ubuntu%2022.04_Regression/Microsoft.Extensions.DependencyInjection.GetService.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n```cmd\ngit clone https://github.com/dotnet/performance.git\npython3 .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027Microsoft.Extensions.DependencyInjection.GetService*\u0027\n```\n\n\u003cdetails\u003e\n\n\n### Payloads\n\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-89920c06-2fa3-4467-ab0d-bbef161f7dff1bc933c1aca4de09f/4c6a2ca5-ff5a-4649-89ec-55d898fa21c3.zip?sv=2021-08-06\u0026se=2023-09-27T08%3A56%3A19Z\u0026sr=c\u0026sp=rl\u0026sig=IScad2OS9jx0nL9nbE2UVRWMwFKnjmTq2%2BgjqXxdIps%3D\u003e)\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-63505cfd-1724-4101-9a2f-81a3d2bd4dc4dba4ae0d8244a7484/37acaa3e-2f98-479b-82c0-cc3c2fe9259a.zip?sv=2021-08-06\u0026se=2023-09-28T00%3A19%3A14Z\u0026sr=c\u0026sp=rl\u0026sig=Z3zJF2UweUAKMrjL0dO5R%2FQbE4wC20xRiFPztW8DPNI%3D\u003e)\n### Microsoft.Extensions.DependencyInjection.GetService.Singleton\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 9.796466543791762 \u003e 8.928597380551507.\r\nIsChangePoint: Marked as a change because one of 8/14/2023 9:42:18 AM, 8/28/2023 1:23:07 PM, 9/4/2023 7:24:21 PM falls between 8/27/2023 6:19:41 AM and 9/4/2023 7:24:21 PM.\r\nIsRegressionStdDev: Marked as regression because -11.328714609799167 (T) = (0 -10.006959380549333) / Math.Sqrt((0.10588144097847962 / (13)) + (0.23316557766638304 / (25))) is less than -2.028094000977961 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (13) + (25) - 2, .025) and -0.17596968156133477 = (8.509538585436228 - 10.006959380549333) / 8.509538585436228 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6](https://github.com/dotnet/runtime/commit/a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6)\nCompare | [4c013865c31cb154ccf88f7628f2d26758b00d3e](https://github.com/dotnet/runtime/commit/4c013865c31cb154ccf88f7628f2d26758b00d3e)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6...4c013865c31cb154ccf88f7628f2d26758b00d3e)\nConfigs | CompilationMode:tiered, RunKind:micro\n\n\n### Regressions in System.Reflection.Invoke\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[Property_Get_class - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04/System.Reflection.Invoke.Property_Get_class.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/runtime/System.Reflection/Invoke.cs#L205-#L212\u003e)\u003c/li\u003e\u003cli\u003e[📈 - ADX Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACn1UXW/TMBR976/wWxJIs6TtxtYpSN2Q2IQGoy3iAaHKS24bb/6IbGdtED+e62R0ScdQXpx7zzm+x77XHCxZWTCWpMRb1MaCiOaw5pBZpmR0LR/VA0S3WpWgbb36CHaVcWqMdz7gjmos1XbJBCA/pxYsLv1RPBoP45NhfLyM302P42kyiUaT8Tg5G7+N42kcBy17UShtP1MBpmXjd8fBn1fyawUVTI3VTG5C0vw53FMkID8G3ncmc7U1URJHM5Gf4A7x1Sj6suXRLei1FxJvy+RwdzIZUpF74T8IydlVEi3ZBvQLCpMWuCN9u6ukrVA7nkQzLZD1F8oRSl0E9fFwoIseOXSzR1+evyKfnL5OSE77lK6NfUHRono20FZlMEIz6FIWoB9RvO9je+hj8PN8cAMU+SBAWjP4TbYFJshFxXg+h1KRFJslV1aCPdJoAO/c66MuNJVZ0eA0rM1RATQ3R4Iy+QzEa75Ucs02laau2QwGPmGlDUuwTKsD0ZnOCmaxM7GyBoTn4hGlX8k2pv6z3aUSJePN+kblLccyhObPpCVOhms8l2zGpJe5VGge9FKVT6t9lhkQpa39F5vebtSyLiHoO3MDtLB4/uR9Z6QQYyohqGa/gFC9WQm68xu8KykkbwJyVx8IhPuSQ+e4mRzUKbW6x6N5AZ6DqbhNNZaf+x1LbXyG3UI3qDQOemr3iknygFeVMilBd+dYyS5Qg8wx7xokK9AV2TJbEN+AZmDS/ViHZJcpXgmZHtZXt3GTtgUh0DLLIfU+4FuD3Vs//TYvkC9N4GKm5MymdAcm+AOe3v4y3wQAAA==\u003e)\u003c/li\u003e\u003c/ul\u003e | 11.92 ns | 12.93 ns | 1.09 | 0.32 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/09_05_2023/refs/heads/main_x64_ubuntu%2022.04_Regression/System.Reflection.Invoke_1.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/09_05_2023/refs/heads/main_x64_ubuntu%2022.04_Regression/System.Reflection.Invoke.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n```cmd\ngit clone https://github.com/dotnet/performance.git\npython3 .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027System.Reflection.Invoke*\u0027\n```\n\n\u003cdetails\u003e\n\n\n### Payloads\n\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-89920c06-2fa3-4467-ab0d-bbef161f7dff1bc933c1aca4de09f/4c6a2ca5-ff5a-4649-89ec-55d898fa21c3.zip?sv=2021-08-06\u0026se=2023-09-27T08%3A56%3A19Z\u0026sr=c\u0026sp=rl\u0026sig=IScad2OS9jx0nL9nbE2UVRWMwFKnjmTq2%2BgjqXxdIps%3D\u003e)\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-63505cfd-1724-4101-9a2f-81a3d2bd4dc4dba4ae0d8244a7484/37acaa3e-2f98-479b-82c0-cc3c2fe9259a.zip?sv=2021-08-06\u0026se=2023-09-28T00%3A19%3A14Z\u0026sr=c\u0026sp=rl\u0026sig=Z3zJF2UweUAKMrjL0dO5R%2FQbE4wC20xRiFPztW8DPNI%3D\u003e)\n### System.Reflection.Invoke.Property_Get_class\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 12.934025162337663 \u003e 11.931842525878434.\r\nIsChangePoint: Marked as a change because one of 8/28/2023 1:23:07 PM, 9/4/2023 7:24:21 PM falls between 8/27/2023 6:19:41 AM and 9/4/2023 7:24:21 PM.\r\nIsRegressionStdDev: Marked as regression because -5.8134313269420215 (T) = (0 -12.43298178735799) / Math.Sqrt((0.13497822992729458 / (13)) + (0.3557251851021524 / (25))) is less than -2.028094000977961 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (13) + (25) - 2, .025) and -0.07916202584447414 = (11.52095930880151 - 12.43298178735799) / 11.52095930880151 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6](https://github.com/dotnet/runtime/commit/a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6)\nCompare | [4c013865c31cb154ccf88f7628f2d26758b00d3e](https://github.com/dotnet/runtime/commit/4c013865c31cb154ccf88f7628f2d26758b00d3e)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6...4c013865c31cb154ccf88f7628f2d26758b00d3e)\nConfigs | CompilationMode:tiered, RunKind:micro\n\n\n### Regressions in PerfLabTests.CastingPerf2.CastingPerf\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[ScalarValueTypeObj - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04/PerfLabTests.CastingPerf2.CastingPerf.ScalarValueTypeObj.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/runtime/perflab/CastingPerf2.cs#L202-#L207\u003e)\u003c/li\u003e\u003cli\u003e[📈 - ADX Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACn1UTXPTMBC951foZhscV3HTtKRjZtJw6AyUlibAgWE6ir2NVfThkWSSMPx4VnZJ7ZQyvki77z29lXYtwJE7B9aRjAQ3YO4/sNUStzaZM+u4WvtY2t0ki5wJZr4wUcNyV8H16iE4HwivYx0zbskloFjBHDhchilNj4d0MqQnS3o6PaHTNE3o2YhOTkevKZ1SGrXsRamN+8gk2JaN30pAeFurTzXUMLXOoIOYNDuPe4xE5Nsg+MpVoTc2GdFkJovJOEnpZZpcb0TiLQcxCTZcDbeT8ZDJIoj/QRi9uRwlS74G84zClQPhSZ9XtXI1atNxMjMSWX+hAqHMR1C/AgNddOrRzRl9efGC/OjsZcLorE/plrE3lCzqpwJaVxYjLIcuZQHmJ4r369gc1jH4fj64AoZ8kKCcHfwmmxIT5KLmoriFSpMMO6fQToE7MlgAvnnQR10YpvKywRm4t0clsMIeScbVExCfea7VPV/XhjmulcXAe3TasCTPjT4QnZm85A5yh84aEN5LQLR5IdsU9Z/j5lpWXDTrK120HMcRWjyR/Fz4xvPJZmZ6mbnG4sEsdfW42me5BVm5Xfjs0Ju19hMU9SvzA7RweP/kbWekEGNrKZnhv4Aws76TbBs2eG8pJq8istodCMR7y7GvuJkc1KmMfsCreQa+BVsLlxm0X4Sdktr4DLuFrVHpOOqpPWiuyA98qowrBaY7x1p1gQZUgXnfIHmJVZENdyUJLRgONtuPdUy2uRa1VNmhv10bt1lrCIGOOwFZ8A7/Ndi9u8dt8wcKlY18zFaCu4xtwUZ/ALtfFqPsBAAA\u003e)\u003c/li\u003e\u003c/ul\u003e | 197.37 μs | 262.86 μs | 1.33 | 0.03 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[FooObjCastIfIsa - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04/PerfLabTests.CastingPerf2.CastingPerf.FooObjCastIfIsa.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/runtime/perflab/CastingPerf2.cs#L229-#L235\u003e)\u003c/li\u003e\u003cli\u003e[📈 - ADX Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACn1UXW/TMBR976/wWxJIszTrStcpSF0R2gRjYy3iAaHJTW4bD39EtkNbxI/nOhlt0jGUF/vec47vse8NB0seLBhLUuLdgV59pMsFbk00o8YyuXaxpL2J3it1u3x0kevVtaHeRY87EWOptgsmAJVyasHi0k/i5LQfj/rx2SJ+MzmLJ0kSJcn5+Px09DqOJ3EcNOx5obT9RAWYho3fkoN/X8nPFVQwMVbj8SGpdw73FAnIt573lclcbUw0iKOpyEfDKImvkuh2wyNXrxcSb8Nkfzsa9qnIvfAfhMH51SBasDXoZxQmLXBH+rKspK1QOx5GUy2Q9RfKEUpdBPVL0NBGJw5dn9GV5y/ID8YvEwbjLqVtY19QNK8OBpqqDEZoBm3KHPRPFO/62Bz76H2/6N0ART4IkNb0fpNNgQlyWTGe30OpSIptkysrwZ5oNIBv7nVRl5rKrKhxGlbmpACamxNBmTwA8ZlnSq7YutLUMiUNBj5gpTVLsEyrI9GpzgpmIbNYWQ3Ce/GI0i9ka1P/OW6mRMl4vb5RecOxDKH5geSGwjWeS9YD08nMFJoHvVDl02qfZQZEaXf+s0Pv1mqxKyHoOnMDNLd4/+Rta6QQYyohqGa/gFC9fhB069d4V1JIXgVkuTsSCPclh85xPTmoU2r1iFfzDHwPpuI21Vh+7rcsNfEpdgtdo9Jp0FF7VEySH/hUKZMSdHuOlWwDNcgc865BsgJdkQ2zBfENaAYm3Y91SLaZ4pWQ6XF9uyZu0qYgBFpmOaTeO/zXYPfunrb1H8iXJnAxU3JmU7oFE/wBQ+A63ekEAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 263.78 μs | 282.60 μs | 1.07 | 0.03 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/09_05_2023/refs/heads/main_x64_ubuntu%2022.04_Regression/PerfLabTests.CastingPerf2.CastingPerf_1.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/09_05_2023/refs/heads/main_x64_ubuntu%2022.04_Regression/PerfLabTests.CastingPerf2.CastingPerf_2.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/09_05_2023/refs/heads/main_x64_ubuntu%2022.04_Regression/PerfLabTests.CastingPerf2.CastingPerf.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n```cmd\ngit clone https://github.com/dotnet/performance.git\npython3 .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027PerfLabTests.CastingPerf2.CastingPerf*\u0027\n```\n\n\u003cdetails\u003e\n\n\n### Payloads\n\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-89920c06-2fa3-4467-ab0d-bbef161f7dff1bc933c1aca4de09f/4c6a2ca5-ff5a-4649-89ec-55d898fa21c3.zip?sv=2021-08-06\u0026se=2023-09-27T08%3A56%3A19Z\u0026sr=c\u0026sp=rl\u0026sig=IScad2OS9jx0nL9nbE2UVRWMwFKnjmTq2%2BgjqXxdIps%3D\u003e)\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-63505cfd-1724-4101-9a2f-81a3d2bd4dc4dba4ae0d8244a7484/37acaa3e-2f98-479b-82c0-cc3c2fe9259a.zip?sv=2021-08-06\u0026se=2023-09-28T00%3A19%3A14Z\u0026sr=c\u0026sp=rl\u0026sig=Z3zJF2UweUAKMrjL0dO5R%2FQbE4wC20xRiFPztW8DPNI%3D\u003e)\n### PerfLabTests.CastingPerf2.CastingPerf.ScalarValueTypeObj\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 262.86413593749995 \u003e 207.03602456933592.\r\nIsChangePoint: Marked as a change because one of 8/15/2023 7:48:35 PM, 8/28/2023 1:23:07 PM, 9/4/2023 7:24:21 PM falls between 8/27/2023 6:19:41 AM and 9/4/2023 7:24:21 PM.\r\nIsRegressionStdDev: Marked as regression because -571.6960913178664 (T) = (0 -262736.10639719927) / Math.Sqrt((36460.566257674574 / (13)) + (259414.6093935372 / (25))) is less than -2.028094000977961 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (13) + (25) - 2, .025) and -0.3330097792672661 = (197099.90915567105 - 262736.10639719927) / 197099.90915567105 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### JIT Disasms\r\n\r\n### PerfLabTests.CastingPerf2.CastingPerf.FooObjCastIfIsa\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 282.5962487244898 \u003e 276.74016504166667.\r\nIsChangePoint: Marked as a change because one of 8/15/2023 7:48:35 PM, 9/2/2023 3:43:46 AM, 9/4/2023 7:24:21 PM falls between 8/27/2023 6:19:41 AM and 9/4/2023 7:24:21 PM.\r\nIsRegressionStdDev: Marked as regression because -74.61168385739026 (T) = (0 -282425.7198429051) / Math.Sqrt((583774.0204949128 / (32)) + (291455.2700233112 / (6))) is less than -2.028094000977961 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (32) + (6) - 2, .025) and -0.07329441012996876 = (263139.09508641274 - 282425.7198429051) / 263139.09508641274 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6](https://github.com/dotnet/runtime/commit/a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6)\nCompare | [4c013865c31cb154ccf88f7628f2d26758b00d3e](https://github.com/dotnet/runtime/commit/4c013865c31cb154ccf88f7628f2d26758b00d3e)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6...4c013865c31cb154ccf88f7628f2d26758b00d3e)\nConfigs | CompilationMode:tiered, RunKind:micro\n\n\n### Regressions in System.Memory.Span\u0026lt;Int32\u0026gt;\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[IndexOfAnyFourValues - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04/System.Memory.Span(Int32).IndexOfAnyFourValues(Size%3a%20512).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Memory/Span.cs#L87-#L88\u003e)\u003c/li\u003e\u003cli\u003e[📈 - ADX Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACn1UXW+bMBR9z6/wG7ARCjRpu3RUSjtNraasXcm2h2mqXLgJ7vyBbLOEaT9+F+hSSNeJF3PvOcf32PeagyV3FowlCXHS2lgQwQKE0nWQllS+vZL2MD4LrmQO2+vVXNbvVaW/UF6BcVP2C2ZkGsWeczrijZCxVNslE4BqObVgcenGYXw4Do/G4XQZHs+m4WwSBcfRJJrG8eswnIWh17HTQmn7kQowHRu/ew7ubSU/VVDBzFjN5Non7V+De4x45NvI+cpkrjYmiMJgLvKjSRCHl3FwveHBDeiV4xNnw+R4ezQZU5E7/j8I0ZvLKFiyNehnFCYt8Ib0+b6StkLtcBLMtUDWXyhHKG0iqF+Chj46btDtHkN5/oJ8dPIyIToZUvo2dgUFafVkoKvKYIRm0KekoH+i+NDHZt/H6PvpaAEU+SBAWjP6TTYFJsh5xXh+C6UiCbZOrqwEe6DRAN65M0SdayqzosVpWJmDAmhuDgRl8gmI13yh5IqtK00tU9Jg4ANW2rIEy7TaE53rrGAWMouVtSA8F4co/UK2NfWf7S6UKBlv1wuVdxzLEJo/kZY4J03jNcl2aAaZC4XmQS9V+bjaZZkBUdrafbbpzVot6xK8obNmgFKL50/OeiOFGFMJQTVOHaF6fSfo1m3xTUk+eeWR+3pPwN+V7DeO28lBnVKrBzyaZ+BbMBW3icbyc7dnqYvPsVvoGpUOvYHag2KS/MCrSpiUoPtzrGQfqAFfEU2aBskKdEU2zBbENaAZmGQ31j7ZZopXQib79dVd3CRdQQi0zHJInHf41mD31o+/7QvkSuM1MVNyZhO6BeP9AeXm1tDtBAAA\u003e)\u003c/li\u003e\u003c/ul\u003e | 553.59 ns | 623.16 ns | 1.13 | 0.14 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[IndexOfAnyFiveValues - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04/System.Memory.Span(Int32).IndexOfAnyFiveValues(Size%3a%20512).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Memory/Span.cs#L90-#L91\u003e)\u003c/li\u003e\u003cli\u003e[📈 - ADX Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACn1UXW+bMBR9z6/wG7ARCjTp0nRUSjtNraauXcm2h2mqXLgJ3vyBbNOEaT9+F+hSSNeJF3PvOcf32PeagyV3FowlCXHS2lgQwRUIpesgLal8eyntYXwaXMoctterhazfswf4QnkFxk3ZL5iTaRR7zsmIN0LGUm2XTACq5dSCxaUbh/HhODwah9Nl+GY+DeeTKJhNZ+FxFL0Ow3kYeh07LZS2H6kA07Hxu+fg3lbyUwUVzI3VTK590v41uMeIR76NnK9M5mpjgigMFiI/mgRxeBEH1xse3IBeOT5xNkyOt0eTMRW54/+DEB1fRMGSrUE/ozBpgTekz/eVtBVqh5NgoQWy/kI5QmkTQf0SNPTRcYNu9xjK8xfko9nLhGg2pPRt7AoK0urJQFeVwQjNoE9JQT+g+NDHZt/H6PvJ6Aoo8kGAtGb0m2wKTJCzivH8FkpFEmydXFkJ9kCjAbxzZ4g601RmRYvTsDIHBdDcHAjK5BMQr/lcyRVbV5papqTBwAestGUJlmm1J7rQWcEsZBYra0F4Lg5R+oVsa+o/250rUTLerq9U3nEsQ2j+RFrinDSN1yTboRlkzhWaB71U5eNql2UGRGlr99mmN2u1rEvwhs6aAUotnj857Y0UYkwlBNU4dYTq9Z2gW7fFNyX55JVH7us9AX9Xst84bicHdUqtfuDRPAPfgqm4TTSWn7s9S118gd1C16h06A3UfigmyU+8qoRJCbo/x0r2gRrwFdGkaZCsQFdkw2xBXAOagUl2Y+2TbaZ4JWSyX1/dxU3SFYRAyyyHxHmHbw12b/34275ArjReEzMlZzahWzDeH7zWR4rtBAAA\u003e)\u003c/li\u003e\u003c/ul\u003e | 513.02 ns | 679.64 ns | 1.32 | 0.11 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[IndexOfAnyFiveValues - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04/System.Memory.Span(Int32).IndexOfAnyFiveValues(Size%3a%2033).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Memory/Span.cs#L90-#L91\u003e)\u003c/li\u003e\u003cli\u003e[📈 - ADX Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACn1UXW/TMBR976/wWxJIMzftyujIpG4IbUJjYynwgNDkJbeNhz8i21kbxI/nJhld2jGUF+fec47vse+1AEduHVhHEuKltXUgo0uQ2tRRWjL17kK5cXwSXagcNlfLuao/8Af4ykQF1k/5L5iR8Tjwjgei0bGOGbfgElAsZw4cLv2YxuMhnQ7p4YK+mR3S2SSOKI2PJnT6mtIZpUHHTgtt3CcmwXZs/O4E+DeV+lxBBTPrDFerkLR/De4xEpDvA+8bV7le22hEo7nMp5MopudxdLUW0TWYpRcSb83VcDOdDJnMvfAfhNHb81G04CswzyhcORAN6ctdpVyF2nQSzY1E1l+oQChrIqhfgoE+Om7Q7R678uIF+dHRy4TR0S6lb2NbUJRWTwa6qixGWAZ9SgrmAcV3faz3fQx+HA8ugSEfJChnB7/JusAEOa24yG+g1CTBzsm1U+AODBrAO/d2UaeGqaxocQaW9qAAltsDybh6AuI1n2m15KvKMMe1shj4iJW2LMkzo/dE5yYruIPMYWUtCM/FI9q8kG1N/We7My1LLtr1pc47juMIzZ9ICxyTpvGaZDszO5kzjebBLHT5uNpmuQVZutp/tun1Si/qEoJdZ80ApQ7Pn5z0RgoxtpKSGRw6wszqVrKN3+KbkkLyKiB39Z5AuC05bBy3k4M6pdH3eDTPwDdgK+ESg+Xnfs9SF59jt7AVKo2DHbV7zRX5iVeVcKXA9OdYqz7QAD4ihjQNkhXoiqy5K4hvwXCwyXasQ7LJtKikSvbrq7u4TbqCEOi4E5B47/Gtwe6tH3/bF8hXNmhithTcJWwDNvgDS+hn9uwEAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 32.68 ns | 43.39 ns | 1.33 | 0.36 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[IndexOfAnyFourValues - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04/System.Memory.Span(Int32).IndexOfAnyFourValues(Size%3a%2033).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Memory/Span.cs#L87-#L88\u003e)\u003c/li\u003e\u003cli\u003e[📈 - ADX Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACn1UXU/bMBR976/wW5ItDWn6AZQFqTBNoInBSLc9TBMyyW1j5o/Idmgz7cfvJmElKWPKi3PvOcf32PeagyV3FowlMXGSylgQwRUIpasgKah8dyntODoNLmUG2+vVQlYfVKm/Ul6CcRP2C+ZkPPackwGvdYyl2i6ZABTLqAWLSzcKo/EwnA3D6TI8nE/D+SQKRrNwPD0+fBuG8zD0WnaSK20/UQGmZeN3z8G9LeXnEkqYG6uZXPuk+atxTxGPfB8435jM1MYEozBYiGw2CaLwIgquNzy4Ab1yfOJsmBxuZ5MhFZnj/4MwOr4YBUu2Bv2CwqQFXpO+3JfSlqgdToKFFsj6C+UIpXUE9QvQ0EVHNbrZoy/PX5EfHb1OGB31KV0bu4KCpHw20FZlMEJT6FIS0I8o3vex2fcx+HEyuAKKfBAgrRn8JpscE+SsZDy7hUKRGDsnU1aCPdBoAO/c6aPONJVp3uA0rMxBDjQzB4Iy+QzEaz5XcsXWpaaWKWkw8BErbViCpVrtiS50mjMLqcXKGhCei0OUfiXbmPrPdudKFIw36yuVtRzLEJo9k5Y4JnXj1clmZnqZc4XmQS9V8bTaZZkBUdjKfbHpzVotqwK8vrN6gBKL509OOyOFGFMKQTUOHaF6fSfo1m3wdUk+eeOR+2pPwN+V7NeOm8lBnUKrBzyaF+BbMCW3scbyM7djqY0vsFvoGpXGXk/tQTFJfuJVxUxK0N05VrIL1ICPiCZ1g6Q5uiIbZnPiGtAMTLwba59sU8VLIeP9+qo2buK2IARaZjnEznt8a7B7q6ff5gVypfHqmCk4szHdgvH+AFpcEtXsBAAA\u003e)\u003c/li\u003e\u003c/ul\u003e | 36.20 ns | 39.66 ns | 1.10 | 0.07 | True | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/09_05_2023/refs/heads/main_x64_ubuntu%2022.04_Regression/System.Memory.Span%28Int32%29_1.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/09_05_2023/refs/heads/main_x64_ubuntu%2022.04_Regression/System.Memory.Span%28Int32%29_2.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/09_05_2023/refs/heads/main_x64_ubuntu%2022.04_Regression/System.Memory.Span%28Int32%29_3.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/09_05_2023/refs/heads/main_x64_ubuntu%2022.04_Regression/System.Memory.Span%28Int32%29_4.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/09_05_2023/refs/heads/main_x64_ubuntu%2022.04_Regression/System.Memory.Span%28Int32%29.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n```cmd\ngit clone https://github.com/dotnet/performance.git\npython3 .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027System.Memory.Span\u0026lt;Int32\u0026gt;*\u0027\n```\n\n\u003cdetails\u003e\n\n\n### Payloads\n\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-89920c06-2fa3-4467-ab0d-bbef161f7dff1bc933c1aca4de09f/4c6a2ca5-ff5a-4649-89ec-55d898fa21c3.zip?sv=2021-08-06\u0026se=2023-09-27T08%3A56%3A19Z\u0026sr=c\u0026sp=rl\u0026sig=IScad2OS9jx0nL9nbE2UVRWMwFKnjmTq2%2BgjqXxdIps%3D\u003e)\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-63505cfd-1724-4101-9a2f-81a3d2bd4dc4dba4ae0d8244a7484/37acaa3e-2f98-479b-82c0-cc3c2fe9259a.zip?sv=2021-08-06\u0026se=2023-09-28T00%3A19%3A14Z\u0026sr=c\u0026sp=rl\u0026sig=Z3zJF2UweUAKMrjL0dO5R%2FQbE4wC20xRiFPztW8DPNI%3D\u003e)\n### System.Memory.Span\u0026lt;Int32\u0026gt;.IndexOfAnyFourValues(Size: 512)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 623.1633759593363 \u003e 580.7947470256283.\r\nIsChangePoint: Marked as a change because one of 8/19/2023 11:06:43 PM, 8/28/2023 1:23:07 PM, 9/4/2023 7:24:21 PM falls between 8/27/2023 6:19:41 AM and 9/4/2023 7:24:21 PM.\r\nIsRegressionStdDev: Marked as regression because -17.772546313404245 (T) = (0 -624.3361230397583) / Math.Sqrt((157.56908967091178 / (13)) + (0.8081864634680289 / (25))) is less than -2.028094000977961 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (13) + (25) - 2, .025) and -0.11016987457320086 = (562.378909155485 - 624.3361230397583) / 562.378909155485 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### JIT Disasms\r\n\r\n### System.Memory.Span\u0026lt;Int32\u0026gt;.IndexOfAnyFiveValues(Size: 512)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 679.640959709437 \u003e 538.9842832860049.\r\nIsChangePoint: Marked as a change because one of 8/19/2023 11:06:43 PM, 8/28/2023 1:23:07 PM, 9/4/2023 7:24:21 PM falls between 8/27/2023 6:19:41 AM and 9/4/2023 7:24:21 PM.\r\nIsRegressionStdDev: Marked as regression because -525.0385517488116 (T) = (0 -679.307678175634) / Math.Sqrt((0.8420108968969636 / (13)) + (0.8752767012868232 / (25))) is less than -2.028094000977961 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (13) + (25) - 2, .025) and -0.323006116403176 = (513.4577004242815 - 679.307678175634) / 513.4577004242815 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### JIT Disasms\r\n\r\n### System.Memory.Span\u0026lt;Int32\u0026gt;.IndexOfAnyFiveValues(Size: 33)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 43.38838435545172 \u003e 37.49482912108297.\r\nIsChangePoint: Marked as a change because one of 8/28/2023 1:23:07 PM, 9/4/2023 7:24:21 PM falls between 8/27/2023 6:19:41 AM and 9/4/2023 7:24:21 PM.\r\nIsRegressionStdDev: Marked as regression because -7.501317357406745 (T) = (0 -44.13679175536036) / Math.Sqrt((11.363373458839362 / (13)) + (0.5015702049745557 / (25))) is less than -2.028094000977961 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (13) + (25) - 2, .025) and -0.19148514243077333 = (37.043509972198216 - 44.13679175536036) / 37.043509972198216 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### JIT Disasms\r\n\r\n### System.Memory.Span\u0026lt;Int32\u0026gt;.IndexOfAnyFourValues(Size: 33)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 39.66469474644949 \u003e 38.01209476983544.\r\nIsChangePoint: Marked as a change because one of 8/28/2023 1:23:07 PM, 9/4/2023 7:24:21 PM falls between 8/27/2023 6:19:41 AM and 9/4/2023 7:24:21 PM.\r\nIsRegressionStdDev: Marked as regression because -81.56370161870893 (T) = (0 -39.86311581142425) / Math.Sqrt((0.009244118016176117 / (13)) + (0.030914726401205114 / (25))) is less than -2.028094000977961 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (13) + (25) - 2, .025) and -0.09926253540069081 = (36.26350805896773 - 39.86311581142425) / 36.26350805896773 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked as regression because Edge Detector said so.\r\n\r\n```\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6](https://github.com/dotnet/runtime/commit/a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6)\nCompare | [4c013865c31cb154ccf88f7628f2d26758b00d3e](https://github.com/dotnet/runtime/commit/4c013865c31cb154ccf88f7628f2d26758b00d3e)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6...4c013865c31cb154ccf88f7628f2d26758b00d3e)\nConfigs | CompilationMode:tiered, RunKind:micro\n\n\n### Regressions in System.Tests.Perf_Int32\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[ToStringHex - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04/System.Tests.Perf_Int32.ToStringHex(value%3a%202147483647).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Int32.cs#L33-#L35\u003e)\u003c/li\u003e\u003cli\u003e[📈 - ADX Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACn1UTXObMBC9+1foBrSYACZ26gydcdJDOpm0qU2nh04no8DGKNUHI4nY7vTHd4HUBqfpcJF233vaJ+3CwZI7C8aSlDirnbEgggy3JrgF/XD3UdpJHGRqZTWT6yvYuk+U1zAncZTMkrPJNJl5zvmINyrGUm0zJgClCmrB4tKNw3gyDqfj8DQLZ/PTcJ5Mg9npZBpF8dswnIeh17FXpdL2ExVgOjZ+9xzcZS2/1IAHmrYAn7S7Bvcc8cj3kfONyUJtTBCFwUIU0ySIw6s4+LzhrQnHJ86GyfF2moypKBz/H4To3VUUZGwN+gWFSQu8IX29r6WtUTtMgoUWyPoL5QilTQT1K9DQR8cNuj1jKM9fkY/OXidEZ0NK38a+oGBVHwx0VRmM0Bz6lBXoJxQf+tgc+xj9OB/dAEU+CJDWjH6TTYkJclEzXiyhUiTFvimUlWBPNBrAN3eGqAtNZV62OA0P5qQEWpgTQZk8APGZL5V8YOtaU8uUNBi4xkpblmC5VkeiC52XzEJusbIWhPfiEKVfybam/nPcpRIV4+36RhUdxzKEFgdSMxVN4zXJdmIGmUuF5kFnqnpe7bPMgKjszn1x6O1aZbsKvKGzZoBWFu+fvO+NFGJMLQTV7BcQqtd3gm7dFt+U5JM3HrnfHQn4+5L9xnE7OahTafWIV/MCvARTc5tqLL9we5a6+AK7ha5RaeIN1B4Vk+QnPlXKpATdn2Ml+0ANssB80yB5ia7IhtmSuAY0A5Pux9on21zxWsj0uL5dFzdpVxACLbMcUucD/muwe3fP2/YP5ErjNTFTcWZTugXj/QHcp7BB6gQAAA==\u003e)\u003c/li\u003e\u003c/ul\u003e | 17.80 ns | 19.69 ns | 1.11 | 0.09 | True | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/09_05_2023/refs/heads/main_x64_ubuntu%2022.04_Regression/System.Tests.Perf_Int32_1.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/09_05_2023/refs/heads/main_x64_ubuntu%2022.04_Regression/System.Tests.Perf_Int32.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n```cmd\ngit clone https://github.com/dotnet/performance.git\npython3 .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027System.Tests.Perf_Int32*\u0027\n```\n\n\u003cdetails\u003e\n\n\n### Payloads\n\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-89920c06-2fa3-4467-ab0d-bbef161f7dff1bc933c1aca4de09f/4c6a2ca5-ff5a-4649-89ec-55d898fa21c3.zip?sv=2021-08-06\u0026se=2023-09-27T08%3A56%3A19Z\u0026sr=c\u0026sp=rl\u0026sig=IScad2OS9jx0nL9nbE2UVRWMwFKnjmTq2%2BgjqXxdIps%3D\u003e)\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-63505cfd-1724-4101-9a2f-81a3d2bd4dc4dba4ae0d8244a7484/37acaa3e-2f98-479b-82c0-cc3c2fe9259a.zip?sv=2021-08-06\u0026se=2023-09-28T00%3A19%3A14Z\u0026sr=c\u0026sp=rl\u0026sig=Z3zJF2UweUAKMrjL0dO5R%2FQbE4wC20xRiFPztW8DPNI%3D\u003e)\n### System.Tests.Perf_Int32.ToStringHex(value: 2147483647)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 19.68549505341147 \u003e 18.863384749456166.\r\nIsChangePoint: Marked as a change because one of 8/28/2023 1:23:07 PM, 9/4/2023 7:24:21 PM falls between 8/27/2023 6:19:41 AM and 9/4/2023 7:24:21 PM.\r\nIsRegressionStdDev: Marked as regression because -15.032296546459138 (T) = (0 -20.33268632700021) / Math.Sqrt((0.1423980119275122 / (13)) + (0.2898717442461349 / (25))) is less than -2.028094000977961 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (13) + (25) - 2, .025) and -0.12488107189761949 = (18.075409778831073 - 20.33268632700021) / 18.075409778831073 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked as regression because Edge Detector said so.\r\n\r\n```\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6](https://github.com/dotnet/runtime/commit/a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6)\nCompare | [4c013865c31cb154ccf88f7628f2d26758b00d3e](https://github.com/dotnet/runtime/commit/4c013865c31cb154ccf88f7628f2d26758b00d3e)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6...4c013865c31cb154ccf88f7628f2d26758b00d3e)\nConfigs | CompilationMode:tiered, RunKind:micro\n\n\n### Regressions in System.Numerics.Tests.Perf_VectorConvert\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[Widen_float - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04/System.Numerics.Tests.Perf_VectorConvert.Widen_float.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Numerics.Vectors/Perf_VectorConvert.cs#L79-#L80\u003e)\u003c/li\u003e\u003cli\u003e[📈 - ADX Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACn1Uy27bMBC8+yt4k9TKiuTm6UAFnPQQoEiaxm5zKAqDkdYWUz4EclXbRT++Syl1ZKcpdKF2Z4Y75C4lIJsjOGQ5C6Ybh6CSm0aBFYVLZhR3yS3YxfwrFGjspdE/wWJyL0rQ84U0HIPzgfQaDrnFmVBAQiVHQFqGo3T0bpgeD9OjWXoyPkrHR1mSZWejk/T0bZqO0zTq2NPKWLzhClzHpu9BQnjX6M8NNDB2aIVexqz987inSMS+DYJ7oUuzckmWJhNVHh8mo/RqlHxaybbyIGbBSujh+vhwyFUZxP8gZGdXWTITS7AvKEIjSE/68tBobEg7PUwmVhHrL1QSlPsI6ddgoY8eeXS7x668fEU+O32dkJ3uUvo2tgUl0+bZQFeVowgvoE+ZgqV73POx2vcx+H4+uAZOfFCg0Q1+s1VFCXbRCFneQW1YTl1TGtSAB5YM0J0Hu6gLy3VRtTgLC3dQAS/dgeJCPwPpmqmxFmLZWI7CaEeBj1Rpy1KisGZPdGKLSiB1JFXWguhcAmbsK9nW1H+2uzSqFrJdX5uy46AgaPlM8qPgG88n23nZyVwaMg92Zuqn1TYrHKgaN+GLTW+XZrapIdp15gdoinT+7H1vpAjjGqW4Fb+AcbucK74OW7wvKWZvIvaw2ROItyXH3nE7OaRTW/NIR/MCfAeukZhbKr8Me5a6+IS6hS9J6V20o/ZohGY/6KpyoTXY/hwb3Qda0CXlfYMUFbliK4EVCx29M+Dy7VjHbF0Y2Sid79e36eIu7woiIAqUkAcf6K2h7t08/bYvUKhd5GOulgJzvgYX/QGVl0v+6AQAAA==\u003e)\u003c/li\u003e\u003c/ul\u003e | 878.11 ns | 1.32 μs | 1.50 | 0.07 | True | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/09_05_2023/refs/heads/main_x64_ubuntu%2022.04_Regression/System.Numerics.Tests.Perf_VectorConvert_1.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/09_05_2023/refs/heads/main_x64_ubuntu%2022.04_Regression/System.Numerics.Tests.Perf_VectorConvert.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n```cmd\ngit clone https://github.com/dotnet/performance.git\npython3 .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027System.Numerics.Tests.Perf_VectorConvert*\u0027\n```\n\n\u003cdetails\u003e\n\n\n### Payloads\n\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-89920c06-2fa3-4467-ab0d-bbef161f7dff1bc933c1aca4de09f/4c6a2ca5-ff5a-4649-89ec-55d898fa21c3.zip?sv=2021-08-06\u0026se=2023-09-27T08%3A56%3A19Z\u0026sr=c\u0026sp=rl\u0026sig=IScad2OS9jx0nL9nbE2UVRWMwFKnjmTq2%2BgjqXxdIps%3D\u003e)\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-63505cfd-1724-4101-9a2f-81a3d2bd4dc4dba4ae0d8244a7484/37acaa3e-2f98-479b-82c0-cc3c2fe9259a.zip?sv=2021-08-06\u0026se=2023-09-28T00%3A19%3A14Z\u0026sr=c\u0026sp=rl\u0026sig=Z3zJF2UweUAKMrjL0dO5R%2FQbE4wC20xRiFPztW8DPNI%3D\u003e)\n### System.Numerics.Tests.Perf_VectorConvert.Widen_float\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 1.320969514442833 \u003e 926.9380103399895.\r\nIsChangePoint: Marked as a change because one of 8/28/2023 1:23:07 PM, 9/4/2023 7:24:21 PM falls between 8/27/2023 6:19:41 AM and 9/4/2023 7:24:21 PM.\r\nIsRegressionStdDev: Marked as regression because -813.2144417580388 (T) = (0 -1320.5381608067803) / Math.Sqrt((2.2969982946450807 / (13)) + (2.8296111997410787 / (25))) is less than -2.028094000977961 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (13) + (25) - 2, .025) and -0.49601818195949177 = (882.7019462271061 - 1320.5381608067803) / 882.7019462271061 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked as regression because Edge Detector said so.\r\n\r\n```\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgPw9cQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5lvmmU",
                                           "createdAt":  "2023-09-05T07:51:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "performanceautofiler",
                                           "body":  "\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6](https://github.com/dotnet/runtime/commit/a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6)\nCompare | [4c013865c31cb154ccf88f7628f2d26758b00d3e](https://github.com/dotnet/runtime/commit/4c013865c31cb154ccf88f7628f2d26758b00d3e)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6...4c013865c31cb154ccf88f7628f2d26758b00d3e)\nConfigs | CompilationMode:tiered, RunKind:micro\n\n\n### Regressions in System.MathBenchmarks.Single\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[ILogB - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04/System.MathBenchmarks.Single.ILogB.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/runtime/Math/Functions/Single/ILogB.cs#L17-#L18\u003e)\u003c/li\u003e\u003cli\u003e[📈 - ADX Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACn1UTW+bQBC9+1fsDWgxAefbEZXs9JAqTZvGrnqoqmgDE9hkP9DuUNtVf3wHSB1wmorLMvPe23m7MysB2S2CQ5Yyb7FxCCq64ljOQWel4vbRRQuhCwnRh4+mmHtnI9kwHHKLS6GAaDlHQFr6k3iyP46PxvHhMj6eHibTOImS5Ph0f3L4No6ncRx07EVpLH7iClzHpu9Ogn9T6y811DB1aGnLkLV/De4pErDvI++b0LlZuSiJo5nKjw6iSXwxiT6vZHQN9t4LmbcSerw+OhhzlXvhPwjJ6UUSLUUB9gVFaATZkL7e1Rpr0o4PoplVxPoLlQTlTYT0K7DQR08adLvHUF6+Ip+cvE5IToaUvo1tQdGifjbQVeUowjPoUxZgf5L40Mdq18fox9noCjjxQYFGN/rNViUl2LwWMr+ByrCUeiQ3qAH3LBmgO/eGqLnl1DYtzsK92yuB525PcaGfgXTN50bfi6K2HIXRjgKXVGnLUiKzZkd0ZrNSIGRIlbUgOhePGftKtjX1n+3OjaqEbNdXJu84KAiaP5OWNBBN4zXJdjoGmXND5sEuTfW02maFA1Xhxn+x6XVhlpsKgqGzZoAWSOfP3vVGijCuVjR74hcwbotbxdd+i29KCtmbgN1tdgTCbclh47idHNKprHmgo3kBvgFXS0wtlZ/7PUtdfEbdwgtS2g8Gag9GaPZIV5UKrcH259joPtCCzinfNEhWkiu2Elgy34EV4NLtWIdsnRlZK53u1rfp4i7tCiIgCpSQeu/praHu3Tz9ti+Qr13QxFwlBaZ8DS74AxAoiwHWBAAA\u003e)\u003c/li\u003e\u003c/ul\u003e | 4.76 μs | 6.57 μs | 1.38 | 0.12 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[ScaleB - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04/System.MathBenchmarks.Single.ScaleB.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/runtime/Math/Functions/Single/ScaleB.cs#L18-#L19\u003e)\u003c/li\u003e\u003cli\u003e[📈 - ADX Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACn1UTW+bQBC9+1fsDWgxAeqkqSMq2ekhUpU2Da56qKpoAxOzyX6g3aG2q/74DpA64DQVl2XmvbfzdmdWArIbBIcsY16+cwgquuRYLUEXleL2wUW50GsJUV5wCUvvbCJbikNucSUUEK/kCEhLP43TN9P4ZBofr+K38+NkHidROjtNZ3H8Oo7ncRz07LwyFj9xBa5n03crwb9u9JcGGpg7tLRnyLq/FvcYCdj3ifdN6NJsXJTE0UKVJ7MojS/S6PNGRldg77yQeRuhp9uT2ZSr0gv/QUjeXSTRSqzBPqMIjSBb0tfbRmND2vEsWlhFrL9QSVDeRki/BgtDdNqiuz3G8vIF+eT0ZUJyOqYMbewLivLmyUBflaMIL2BIycH+JPGxj82hj8mPs8klcOKDAo1u8pttKkqwZSNkeQ21YRk1SWlQAx5ZMkB37o1RS8upbzqchTt3VAEv3ZHiQj8B6ZrPjb4T68ZyFEY7CnykSjuWEoU1B6ILW1QCoUCqrAPRuXjM2Beynan/bHduVC1kt740Zc9BQdDyibSiiWgbr0124zHKnBsyD3Zl6sfVPiscqBp3/rNNr9ZmtashGDtrByhHOn/2fjBShHGNouETv4Bxu75RfOt3+LakkL0K2O3uQCDclxy2jrvJIZ3amns6mmfga3CNxMxS+aU/sNTHF9QtfE1Kb4KR2r0Rmj3QVWVCa7DDOTZ6CLSgS8q3DVJU5IptBFbMd2AFuGw/1iHbFkY2SmeH9e36uMv6ggiIAiVk3gd6a6h7d4+/3Qvkaxe0MVdLgRnfggv+AFbb+nfXBAAA\u003e)\u003c/li\u003e\u003c/ul\u003e | 5.97 μs | 7.63 μs | 1.28 | 0.11 | True | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/09_05_2023/refs/heads/main_x64_ubuntu%2022.04_Regression/System.MathBenchmarks.Single_1.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/09_05_2023/refs/heads/main_x64_ubuntu%2022.04_Regression/System.MathBenchmarks.Single_2.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/09_05_2023/refs/heads/main_x64_ubuntu%2022.04_Regression/System.MathBenchmarks.Single.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n```cmd\ngit clone https://github.com/dotnet/performance.git\npython3 .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027System.MathBenchmarks.Single*\u0027\n```\n\n\u003cdetails\u003e\n\n\n### Payloads\n\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-89920c06-2fa3-4467-ab0d-bbef161f7dff1bc933c1aca4de09f/4c6a2ca5-ff5a-4649-89ec-55d898fa21c3.zip?sv=2021-08-06\u0026se=2023-09-27T08%3A56%3A19Z\u0026sr=c\u0026sp=rl\u0026sig=IScad2OS9jx0nL9nbE2UVRWMwFKnjmTq2%2BgjqXxdIps%3D\u003e)\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-63505cfd-1724-4101-9a2f-81a3d2bd4dc4dba4ae0d8244a7484/37acaa3e-2f98-479b-82c0-cc3c2fe9259a.zip?sv=2021-08-06\u0026se=2023-09-28T00%3A19%3A14Z\u0026sr=c\u0026sp=rl\u0026sig=Z3zJF2UweUAKMrjL0dO5R%2FQbE4wC20xRiFPztW8DPNI%3D\u003e)\n### System.MathBenchmarks.Single.ILogB\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 6.572198914035087 \u003e 4.994373118578768.\r\nIsChangePoint: Marked as a change because one of 8/28/2023 1:23:07 PM, 9/4/2023 7:24:21 PM falls between 8/27/2023 6:19:41 AM and 9/4/2023 7:24:21 PM.\r\nIsRegressionStdDev: Marked as regression because -27.359992932869652 (T) = (0 -6706.209542008301) / Math.Sqrt((12.808989858092003 / (13)) + (126996.80894369919 / (25))) is less than -2.028094000977961 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (13) + (25) - 2, .025) and -0.4100567534574738 = (4755.985548499807 - 6706.209542008301) / 4755.985548499807 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked as regression because Edge Detector said so.\r\n\r\n```\r\n#### JIT Disasms\r\n\r\n### System.MathBenchmarks.Single.ScaleB\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 7.629899337557603 \u003e 6.418856593990998.\r\nIsChangePoint: Marked as a change because one of 8/28/2023 1:23:07 PM, 9/4/2023 7:24:21 PM falls between 8/27/2023 6:19:41 AM and 9/4/2023 7:24:21 PM.\r\nIsRegressionStdDev: Marked as regression because -30.421500523990122 (T) = (0 -7626.589581188343) / Math.Sqrt((33167.80888767883 / (13)) + (303.2005721844885 / (25))) is less than -2.028094000977961 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (13) + (25) - 2, .025) and -0.25307102914785307 = (6086.318655355699 - 7626.589581188343) / 6086.318655355699 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked as regression because Edge Detector said so.\r\n\r\n```\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6](https://github.com/dotnet/runtime/commit/a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6)\nCompare | [4c013865c31cb154ccf88f7628f2d26758b00d3e](https://github.com/dotnet/runtime/commit/4c013865c31cb154ccf88f7628f2d26758b00d3e)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6...4c013865c31cb154ccf88f7628f2d26758b00d3e)\nConfigs | CompilationMode:tiered, RunKind:micro\n\n\n### Regressions in System.MathBenchmarks.Double\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[ScaleB - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04/System.MathBenchmarks.Double.ScaleB.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/runtime/Math/Functions/Double/ScaleB.cs#L18-#L19\u003e)\u003c/li\u003e\u003cli\u003e[📈 - ADX Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACn1UTU/bQBC951fszXbrGDsECkGulMABqaKlJFUPVYUWe4gX9sPaHZOk6o/v2KbBTprKl/XMe2/n7c6sBGT3CA5Zyrz5xiGo6IZjMQOdFYrbZxddmepBQjTPuISZdzGQNcUht7gQCoiXcwSkpT+KR8fD+HQYnyziD5OTZBIfR+MkOT8bjd/H8SSOg5Y9L4zFz1yBa9n00Q7+XaW/VlDBxKEVehmy5q/GvUYC9mPgfRc6NysXJXE0VfnpOBrF16Poy0pGt2AfvZB5K6GH69PxkKvcC/9BSM6vk2ghlmD3KEIjyJr07aHSWJF2PI6mVhHrL1QSlNcR0i/BQhc9qtHNHn15eUA+OTtMSM76lK6NbUHRvHoz0FblKMIz6FLmYF9IvO9jtetj8PNicAOc+KBAoxv8ZquCEmxWCZnfQWlYSk2SG9SAR5YM0J17fdTMcuqbBmfh0R0VwHN3pLjQb0C65kujH8WyshyF0Y4Cn6jShqVEZs2O6NRmhUDIkCprQHQuHjP2QLYx9Z/tLo0qhWzWNyZvOSgImr+RFjQRdePVyWY8eplLQ+bBLkz5utpmhQNV4sbf2/R2aRabEoK+s3qA5kjnzz52RoowrlI0fOIXMG6X94qv/QZflxSydwF72OwIhNuSw9pxMzmkU1rzREezB74DV0lMLZWf+x1LbXxK3cKXpHQc9NSejNDsma4qFVqD7c6x0V2gBZ1Tvm6QrCBXbCWwYL4DK8Cl27EO2TozslI63a1v08Zd2hZEQBQoIfWu6K2h7t28/jYvkK9dUMdcKQWmfA0u+AOwbPTQ1wQAAA==\u003e)\u003c/li\u003e\u003c/ul\u003e | 7.96 μs | 8.44 μs | 1.06 | 0.08 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/09_05_2023/refs/heads/main_x64_ubuntu%2022.04_Regression/System.MathBenchmarks.Double_1.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/09_05_2023/refs/heads/main_x64_ubuntu%2022.04_Regression/System.MathBenchmarks.Double.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n```cmd\ngit clone https://github.com/dotnet/performance.git\npython3 .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027System.MathBenchmarks.Double*\u0027\n```\n\n\u003cdetails\u003e\n\n\n### Payloads\n\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-89920c06-2fa3-4467-ab0d-bbef161f7dff1bc933c1aca4de09f/4c6a2ca5-ff5a-4649-89ec-55d898fa21c3.zip?sv=2021-08-06\u0026se=2023-09-27T08%3A56%3A19Z\u0026sr=c\u0026sp=rl\u0026sig=IScad2OS9jx0nL9nbE2UVRWMwFKnjmTq2%2BgjqXxdIps%3D\u003e)\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-63505cfd-1724-4101-9a2f-81a3d2bd4dc4dba4ae0d8244a7484/37acaa3e-2f98-479b-82c0-cc3c2fe9259a.zip?sv=2021-08-06\u0026se=2023-09-28T00%3A19%3A14Z\u0026sr=c\u0026sp=rl\u0026sig=Z3zJF2UweUAKMrjL0dO5R%2FQbE4wC20xRiFPztW8DPNI%3D\u003e)\n### System.MathBenchmarks.Double.ScaleB\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 8.439246719280314 \u003e 8.406949340281045.\r\nIsChangePoint: Marked as a change because one of 8/28/2023 1:23:07 PM, 9/4/2023 7:24:21 PM falls between 8/27/2023 6:19:41 AM and 9/4/2023 7:24:21 PM.\r\nIsRegressionStdDev: Marked as regression because -19.49026983725177 (T) = (0 -8466.03511544965) / Math.Sqrt((1295.97645959424 / (13)) + (11640.797142937692 / (25))) is less than -2.028094000977961 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (13) + (25) - 2, .025) and -0.057907324648037065 = (8002.624538275389 - 8466.03511544965) / 8002.624538275389 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n",
                                           "updatedAt":  "2024-06-22T01:41:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lvm46",
                                           "createdAt":  "2023-09-05T16:57:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cincuranet",
                                           "body":  "Few are noise. But otherwise mostly valid. Seems only Linux x64 though.",
                                           "updatedAt":  "2023-09-05T16:57:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5l1dH9",
                                           "createdAt":  "2023-09-06T14:44:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\u003c!-- DATA: {\"RunType\":{\"Repo\":\"dotnetruntime\",\"Branch\":\"refs/heads/main\",\"Arch\":\"x64\",\"Os\":\"Ubuntu2204\",\"Queue\":\"TigerUbuntu\",\"Frequency\":\"Weekly\",\"CoreClr\":true,\"Mono\":false,\"Wasm\":false,\"Maui\":false,\"Configs\":[\"CompilationMode:tiered\",\"RunKind:micro\"]},\"RegressionDate\":\"2023-08-28T19:02:26\",\"IsRegression\":true} --\u003e\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6](https://github.com/dotnet/runtime/commit/a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6)\nCompare | [4c013865c31cb154ccf88f7628f2d26758b00d3e](https://github.com/dotnet/runtime/commit/4c013865c31cb154ccf88f7628f2d26758b00d3e)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6...4c013865c31cb154ccf88f7628f2d26758b00d3e)\nConfigs | CompilationMode:tiered, RunKind:micro\n\n\n### Regressions in System.Net.Primitives.Tests.IPAddressPerformanceTests\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[TryFormat - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04/System.Net.Primitives.Tests.IPAddressPerformanceTests.TryFormat(address%3a%20143.24.20.36).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Net.Primitives/IPAddressPerformanceTests.cs#L53-#L56\u003e)\u003c/li\u003e\u003cli\u003e[📈 - ADX Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACn1UUW/TMBB+76/wWxJovaQtpesUpG4IDaGNshbxgNDkJbfGI7Yj+7K2iB/POSld2zGUF+fu+87fZ9+5BGS3CA5ZyoL5xiEofg3IZ1YqifIRHF9Q1vGPs2meW3BuBvbeWCV0Bm1mYTcffABD0SImLBkOeH/I+zEfjKLgrFP6XRwKiwupgLbKBQLSMuzH/UEvHvXiN4v47WR4OhmMeZIk/fEofh3HkziOWva8MBavhQLXsum7KyG8qfWXGmqYOLRSL7us+fO4bSRi3zvBN6lzs3I8iflU5SMv7LLPP69K7s0EXRaspO6tR8OeUHnQ/QchOb1M+EIuwT6jSI1QetLXu1pjTbXjIZ9aRay/0JKgwkeofgUW9tF9j272OCxfvlA+Gb9MSMaHlH0bO0F8Xj8ZaFU5iogM9ilzsI9U/NDH6thH58dZ5woE8UGBRtf5zVYFJdh5Lcv8BirDUuqr3KAGPLFkgO48OESdW2qlosFZuHcnBYjcnSgh9ROQrvnC6Hu5rK1AabSjwCdS2rCUzKw5Kjq1WSERMiRlDYjOJWDGvpBtTP1nuwujKlk26yuTtxyUBM2fSH4YfOP5ZDNRB5kLQ+bBLky1Xe2y0oGqcBM+23S2NItNBdGhMz9Ac6TzZ+/2RoowrlZKWPkLmLDLWyXWYYP3krrsVcTuNkcFujvJXe+4mRyqU1nzQEfzDHwDri4xtSQ/D/cstfEpdYtYUqVBdFDtwUjNftJVpVJrsPtzbPQ+0ILOKe8bJCvIFVtJLFjowEpw6W6su2ydmbJWOj3Wt2njLm0FERAllpAG7+mtoe7dbH+bFyjULvIxV5USU7EGF/0B305jrQoFAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 11.85 ns | 12.86 ns | 1.09 | 0.26 | True | | |\r\n\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/09_05_2023/refs/heads/main_x64_ubuntu%2022.04_Regression/System.Net.Primitives.Tests.IPAddressPerformanceTests_1.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/09_05_2023/refs/heads/main_x64_ubuntu%2022.04_Regression/System.Net.Primitives.Tests.IPAddressPerformanceTests.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n```cmd\ngit clone https://github.com/dotnet/performance.git\npython3 .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027System.Net.Primitives.Tests.IPAddressPerformanceTests*\u0027\n```\n\n\u003cdetails\u003e\n\n\n### Payloads\n\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-89920c06-2fa3-4467-ab0d-bbef161f7dff1bc933c1aca4de09f/4c6a2ca5-ff5a-4649-89ec-55d898fa21c3.zip?sv=2021-08-06\u0026se=2023-09-27T08%3A56%3A19Z\u0026sr=c\u0026sp=rl\u0026sig=IScad2OS9jx0nL9nbE2UVRWMwFKnjmTq2%2BgjqXxdIps%3D\u003e)\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-63505cfd-1724-4101-9a2f-81a3d2bd4dc4dba4ae0d8244a7484/37acaa3e-2f98-479b-82c0-cc3c2fe9259a.zip?sv=2021-08-06\u0026se=2023-09-28T00%3A19%3A14Z\u0026sr=c\u0026sp=rl\u0026sig=Z3zJF2UweUAKMrjL0dO5R%2FQbE4wC20xRiFPztW8DPNI%3D\u003e)\n### System.Net.Primitives.Tests.IPAddressPerformanceTests.TryFormat(address: 143.24.20.36)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 12.8599746068092 \u003e 12.056727412948058.\r\nIsChangePoint: Marked as a change because one of 8/28/2023 1:23:07 PM, 9/4/2023 7:24:21 PM falls between 8/27/2023 6:19:41 AM and 9/4/2023 7:24:21 PM.\r\nIsRegressionStdDev: Marked as regression because -11.07493886512902 (T) = (0 -12.724523881091898) / Math.Sqrt((0.19911632037081872 / (13)) + (0.05423179428190999 / (25))) is less than -2.028094000977961 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (13) + (25) - 2, .025) and -0.1300605723515152 = (11.260037021390588 - 12.724523881091898) / 11.260037021390588 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked as regression because Edge Detector said so.\r\n\r\n```\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6](https://github.com/dotnet/runtime/commit/a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6)\nCompare | [4c013865c31cb154ccf88f7628f2d26758b00d3e](https://github.com/dotnet/runtime/commit/4c013865c31cb154ccf88f7628f2d26758b00d3e)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6...4c013865c31cb154ccf88f7628f2d26758b00d3e)\nConfigs | CompilationMode:tiered, RunKind:micro\n\n\n### Regressions in SciMark2.kernel\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[benchSparseMult - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04/SciMark2.kernel.benchSparseMult.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/runtime/SciMark/kernel.cs#L120-#L126\u003e)\u003c/li\u003e\u003cli\u003e[📈 - ADX Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACn1UTW+bQBC9+1fsDWgxwcRxY0dUctJDpMptGrvqoaqiNUzMJvuBZpfarvrjO0DqgNNUXJaZ997O251ZCY7dObCOpcxbZmLB8TGJHgE1yGgNOiuWJUcLi0o672Iga7h1HN1KKCBOzh04WvpJnJwO48kwPlvF72bj6exsHI2m42mcJG/jeBbHQcteFgbdJ67Atmz61hL820p/qaCCmXUo9CZkzV+Ne4oE7PvA+yZ0brY2GsXRXOWTcZTE10n0eSujG8B7L2TeVujhbjIecpV74T8Io+n1KFqJDeALitAOZE36uq60q0g7HkdzVMT6C5UE5XWE9EtA6KKTGt3s0ZeXr8iPzl8njM77lK6NQ0HRsno20FZlKcIz6FKWgD9JvO9je+xj8ONisABOfFCgnR38ZtuCEuyyEjK/hdKwlBokN06DO0EyQHfu9VGXyKldGhzCvT0pgOf2RHGhn4F0zVdG34tNhdwJoy0FPlKlDUuJDM2R6ByzQjjIHFXWgOhcPGbwlWxj6j/bXRlVCtmsFyZvOU4QNH8mrWga6sark81o9DJXhswDrkz5tDpkhQVVur3/YtObjVntSwj6zuoBWjo6f/a+M1KEsZVSHMUvYBw3d4rv/AZflxSyNwFb748EwkPJYe24mRzSKdE80NG8AN+CpWFOkcrP/Y6lNj6nbuEbUjoNemoPRmj2SFeVCq0Bu3NsdBeIoHPK1w2SFeSKbYUrmG8BBdj0MNYh22VGVkqnx/Xt27hN24II6ISTkHof6K2h7t0//TYvkK9tUMdsKYVL+Q5s8Afvbc050wQAAA==\u003e)\u003c/li\u003e\u003c/ul\u003e | 493.53 ms | 635.56 ms | 1.29 | 0.11 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/09_05_2023/refs/heads/main_x64_ubuntu%2022.04_Regression/SciMark2.kernel_1.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/09_05_2023/refs/heads/main_x64_ubuntu%2022.04_Regression/SciMark2.kernel.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n```cmd\ngit clone https://github.com/dotnet/performance.git\npython3 .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027SciMark2.kernel*\u0027\n```\n\n\u003cdetails\u003e\n\n\n### Payloads\n\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-89920c06-2fa3-4467-ab0d-bbef161f7dff1bc933c1aca4de09f/4c6a2ca5-ff5a-4649-89ec-55d898fa21c3.zip?sv=2021-08-06\u0026se=2023-09-27T08%3A56%3A19Z\u0026sr=c\u0026sp=rl\u0026sig=IScad2OS9jx0nL9nbE2UVRWMwFKnjmTq2%2BgjqXxdIps%3D\u003e)\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-63505cfd-1724-4101-9a2f-81a3d2bd4dc4dba4ae0d8244a7484/37acaa3e-2f98-479b-82c0-cc3c2fe9259a.zip?sv=2021-08-06\u0026se=2023-09-28T00%3A19%3A14Z\u0026sr=c\u0026sp=rl\u0026sig=Z3zJF2UweUAKMrjL0dO5R%2FQbE4wC20xRiFPztW8DPNI%3D\u003e)\n### SciMark2.kernel.benchSparseMult\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 635.5553794615385 \u003e 518.1746533384616.\r\nIsChangePoint: Marked as a change because one of 8/10/2023 8:47:51 AM, 8/28/2023 1:23:07 PM, 9/4/2023 7:24:21 PM falls between 8/27/2023 6:19:41 AM and 9/4/2023 7:24:21 PM.\r\nIsRegressionStdDev: Marked as regression because -20.80254686105018 (T) = (0 -635066391.063553) / Math.Sqrt((549931303529396.75 / (13)) + (938876866845.3124 / (25))) is less than -2.028094000977961 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (13) + (25) - 2, .025) and -0.2708801752398864 = (499705954.53161454 - 635066391.063553) / 499705954.53161454 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6](https://github.com/dotnet/runtime/commit/a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6)\nCompare | [4c013865c31cb154ccf88f7628f2d26758b00d3e](https://github.com/dotnet/runtime/commit/4c013865c31cb154ccf88f7628f2d26758b00d3e)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6...4c013865c31cb154ccf88f7628f2d26758b00d3e)\nConfigs | CompilationMode:tiered, RunKind:micro\n\n\n### Regressions in System.Text.RegularExpressions.Tests.Perf_Regex_Industry_RustLang_Sherlock\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[Count - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04/System.Text.RegularExpressions.Tests.Perf_Regex_Industry_RustLang_Sherlock.Count(Pattern%3a%20%22zqj%22%2c%20Options%3a%20None).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.RegularExpressions/Perf.Regex.Industry.cs#L191-#L192\u003e)\u003c/li\u003e\u003cli\u003e[📈 - ADX Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACn1U227aQBB95ytWebHdGscQQoDIlUhaKVWbS4GqD1WFNvbEbLIXd3dcIOrHd2xSYkhT+cHrmXPOntmdsQRkcwSHLGHedO0QVDSDFUYTyEvJ7YdVYcE5YbSjuEMX3YC9m1MWVvOPOisd2vV8Qq/PXOfz6QKsNOlDdG5Kjf4NRwSrR+zg8ef9QciuC6yURuzKaAi805astnfILc6EAvKQcQSkpd+Nu0ftuN+Oj2fxyag3HB0PouGwc9I9GbyN41EcBxv2dGEsXnEFbsOm51aCPyn1lxJKGJE/ofOQ1V8V7ikSsO8t75vQmVm6qBNHY5X1e1E3vuhG10tZV+mFzFsK3V71e22uMi/8B6EzvOhEM5GDfUERGkFWpK+3dBYlace9aGwVsf5CJUF5FSH9Aiw00d0KXe+xKy9fke8MXid0BruUZhlbQ9G0fC5g48pRhKfQpEzB/iLx3TqW+3W0fpy2LoETHxRodK3fbEmtAeysFDKbQGFYQg2XGdSAh5YKoDv3dlFnlut0UeMs3LnDBfDMHSou9DOQrvnc6DuRl5bXrUWBT+S0ZimRWrMnOrbpQiCkSM5qEJ2Lx4x9JVsX9Z/tzo0qhKzXlybbcFAQNHsmVWNTNV6VrEdtJ1MPCtiZKZ5W26xwoApc+y82vcnNbF1AsFtZNUBTpPNn7xojRRhXKsWteATGbT5XfOXX+MpSyN4E7Ha9JxBuLYdVxfXkkE5hzT0dzQvwBFwpMbFkP/MbJW3iY+oWnpPSUbCjdm+EZg90VYnQGmxzjo1uAi3ojPJVg6QLqootBS6Y78AKcMl2rEO2So0slU72/a03cZdsDBEQBUpIvPf0r6HuXT991n8gX7ugirlCCkz4ClzwB7CEXf4jBQAA\u003e)\u003c/li\u003e\u003c/ul\u003e | 36.63 μs | 41.26 μs | 1.13 | 0.32 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/09_05_2023/refs/heads/main_x64_ubuntu%2022.04_Regression/System.Text.RegularExpressions.Tests.Perf_Regex_Industry_RustLang_Sherlock_1.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/09_05_2023/refs/heads/main_x64_ubuntu%2022.04_Regression/System.Text.RegularExpressions.Tests.Perf_Regex_Industry_RustLang_Sherlock.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n```cmd\ngit clone https://github.com/dotnet/performance.git\npython3 .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027System.Text.RegularExpressions.Tests.Perf_Regex_Industry_RustLang_Sherlock*\u0027\n```\n\n\u003cdetails\u003e\n\n\n### Payloads\n\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-89920c06-2fa3-4467-ab0d-bbef161f7dff1bc933c1aca4de09f/4c6a2ca5-ff5a-4649-89ec-55d898fa21c3.zip?sv=2021-08-06\u0026se=2023-09-27T08%3A56%3A19Z\u0026sr=c\u0026sp=rl\u0026sig=IScad2OS9jx0nL9nbE2UVRWMwFKnjmTq2%2BgjqXxdIps%3D\u003e)\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-63505cfd-1724-4101-9a2f-81a3d2bd4dc4dba4ae0d8244a7484/37acaa3e-2f98-479b-82c0-cc3c2fe9259a.zip?sv=2021-08-06\u0026se=2023-09-28T00%3A19%3A14Z\u0026sr=c\u0026sp=rl\u0026sig=Z3zJF2UweUAKMrjL0dO5R%2FQbE4wC20xRiFPztW8DPNI%3D\u003e)\n### System.Text.RegularExpressions.Tests.Perf_Regex_Industry_RustLang_Sherlock.Count(Pattern: \"zqj\", Options: None)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 41.25734353618421 \u003e 38.49274458266977.\r\nIsChangePoint: Marked as a change because one of 8/28/2023 1:23:07 PM, 9/4/2023 7:24:21 PM falls between 8/27/2023 6:19:41 AM and 9/4/2023 7:24:21 PM.\r\nIsRegressionStdDev: Marked as regression because -3.827698670859208 (T) = (0 -42439.53143484542) / Math.Sqrt((12469277.456513325 / (13)) + (9232831.4236689 / (25))) is less than -2.028094000977961 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (13) + (25) - 2, .025) and -0.11601557816957614 = (38027.7231474244 - 42439.53143484542) / 38027.7231474244 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6](https://github.com/dotnet/runtime/commit/a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6)\nCompare | [4c013865c31cb154ccf88f7628f2d26758b00d3e](https://github.com/dotnet/runtime/commit/4c013865c31cb154ccf88f7628f2d26758b00d3e)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6...4c013865c31cb154ccf88f7628f2d26758b00d3e)\nConfigs | CompilationMode:tiered, RunKind:micro\n\n\n### Regressions in Microsoft.Extensions.DependencyInjection.GetService\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[Singleton - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04/Microsoft.Extensions.DependencyInjection.GetService.Singleton.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/Microsoft.Extensions.DependencyInjection/GetServiceBenchmark.cs#L82-#L83\u003e)\u003c/li\u003e\u003cli\u003e[📈 - ADX Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACn1U72/TMBD93r/C35JAmqVd96ObgtRtiCFUGG0RHxCavOTaeMR2ZF9oi/jjOSejTTqG+qH23XvP9+I7F4DsHsEiS5g3FanRVi8xertBUFZoZaMbKEFloNLte/UIKVIwegc4B/NTpBDNhVoVgFp5lz36Z/cWucGFkECKGUdAWvrDeHjcj0/78ckiPrs4iS/iQXQ8Ho/i8dnrmHZx0LDnuTb4kUuwDZt+DwX4s0p9rqCCC4uGzgtZvXO4p0jAvvW8r0Jlem2jQRxNZHY6iobx7TD6tC6iOzBLL2TeWqj+5nTU5zLzwn8QBuPbQbQQKzDPKEIhFI705aFSWJF2PIomRhLrL7QgKHcR0i/BQBs9dOj6jK588YL84PxlwuC8S2nb2BUUzau9gaYqSxGeQpvibpHEuz7Whz563y97U+DEBwkKbe83W+eUYFeVKLIZlJol1D6ZRgV4ZMgA3bnXRV0ZrtK8xhlY2qMceGaPJBdqD6RrvtZqKVaV4a7PLAU+UKU1S7rmPBCdmDQXSE1JldUg+i4e0+aFbG3qP8dda1mKol5PddZwUBA025MWNCuu8VyyHpxO5lqTeTALXT6tdllhQZa49Z8derfSi20JQdeZG6A50vdnb1ojRRhbScmN+AWMm9W95Bu/xruSQvYqYA/bA4FwV3LoHNeTQzql0W6an4FnYKsCE0PlZ37LUhOfULfwFSkdBx21Ry0U+0FXlQilwLTnWKs20Li3xDDXIGlOrthaYM58C0aATXZjHbJNqotKquSwvm0Tt0lTEAFRYAGJd0NvDXXv9mlbv0C+soGL2bIQmPAN2OAPYhrxjvEEAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 8.76 ns | 9.80 ns | 1.12 | 0.34 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/09_05_2023/refs/heads/main_x64_ubuntu%2022.04_Regression/Microsoft.Extensions.DependencyInjection.GetService_1.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/09_05_2023/refs/heads/main_x64_ubuntu%2022.04_Regression/Microsoft.Extensions.DependencyInjection.GetService.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n```cmd\ngit clone https://github.com/dotnet/performance.git\npython3 .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027Microsoft.Extensions.DependencyInjection.GetService*\u0027\n```\n\n\u003cdetails\u003e\n\n\n### Payloads\n\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-89920c06-2fa3-4467-ab0d-bbef161f7dff1bc933c1aca4de09f/4c6a2ca5-ff5a-4649-89ec-55d898fa21c3.zip?sv=2021-08-06\u0026se=2023-09-27T08%3A56%3A19Z\u0026sr=c\u0026sp=rl\u0026sig=IScad2OS9jx0nL9nbE2UVRWMwFKnjmTq2%2BgjqXxdIps%3D\u003e)\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-63505cfd-1724-4101-9a2f-81a3d2bd4dc4dba4ae0d8244a7484/37acaa3e-2f98-479b-82c0-cc3c2fe9259a.zip?sv=2021-08-06\u0026se=2023-09-28T00%3A19%3A14Z\u0026sr=c\u0026sp=rl\u0026sig=Z3zJF2UweUAKMrjL0dO5R%2FQbE4wC20xRiFPztW8DPNI%3D\u003e)\n### Microsoft.Extensions.DependencyInjection.GetService.Singleton\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 9.796466543791762 \u003e 8.928597380551507.\r\nIsChangePoint: Marked as a change because one of 8/14/2023 9:42:18 AM, 8/28/2023 1:23:07 PM, 9/4/2023 7:24:21 PM falls between 8/27/2023 6:19:41 AM and 9/4/2023 7:24:21 PM.\r\nIsRegressionStdDev: Marked as regression because -11.328714609799167 (T) = (0 -10.006959380549333) / Math.Sqrt((0.10588144097847962 / (13)) + (0.23316557766638304 / (25))) is less than -2.028094000977961 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (13) + (25) - 2, .025) and -0.17596968156133477 = (8.509538585436228 - 10.006959380549333) / 8.509538585436228 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6](https://github.com/dotnet/runtime/commit/a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6)\nCompare | [4c013865c31cb154ccf88f7628f2d26758b00d3e](https://github.com/dotnet/runtime/commit/4c013865c31cb154ccf88f7628f2d26758b00d3e)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6...4c013865c31cb154ccf88f7628f2d26758b00d3e)\nConfigs | CompilationMode:tiered, RunKind:micro\n\n\n### Regressions in System.Reflection.Invoke\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[Property_Get_class - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04/System.Reflection.Invoke.Property_Get_class.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/runtime/System.Reflection/Invoke.cs#L205-#L212\u003e)\u003c/li\u003e\u003cli\u003e[📈 - ADX Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACn1UXW/TMBR976/wWxJIs6TtxtYpSN2Q2IQGoy3iAaHKS24bb/6IbGdtED+e62R0ScdQXpx7zzm+x77XHCxZWTCWpMRb1MaCiOaw5pBZpmR0LR/VA0S3WpWgbb36CHaVcWqMdz7gjmos1XbJBCA/pxYsLv1RPBoP45NhfLyM302P42kyiUaT8Tg5G7+N42kcBy17UShtP1MBpmXjd8fBn1fyawUVTI3VTG5C0vw53FMkID8G3ncmc7U1URJHM5Gf4A7x1Sj6suXRLei1FxJvy+RwdzIZUpF74T8IydlVEi3ZBvQLCpMWuCN9u6ukrVA7nkQzLZD1F8oRSl0E9fFwoIseOXSzR1+evyKfnL5OSE77lK6NfUHRono20FZlMEIz6FIWoB9RvO9je+hj8PN8cAMU+SBAWjP4TbYFJshFxXg+h1KRFJslV1aCPdJoAO/c66MuNJVZ0eA0rM1RATQ3R4Iy+QzEa75Ucs02laau2QwGPmGlDUuwTKsD0ZnOCmaxM7GyBoTn4hGlX8k2pv6z3aUSJePN+kblLccyhObPpCVOhms8l2zGpJe5VGge9FKVT6t9lhkQpa39F5vebtSyLiHoO3MDtLB4/uR9Z6QQYyohqGa/gFC9WQm68xu8KykkbwJyVx8IhPuSQ+e4mRzUKbW6x6N5AZ6DqbhNNZaf+x1LbXyG3UI3qDQOemr3iknygFeVMilBd+dYyS5Qg8wx7xokK9AV2TJbEN+AZmDS/ViHZJcpXgmZHtZXt3GTtgUh0DLLIfU+4FuD3Vs//TYvkC9N4GKm5MymdAcm+AOe3v4y3wQAAA==\u003e)\u003c/li\u003e\u003c/ul\u003e | 11.92 ns | 12.93 ns | 1.09 | 0.32 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/09_05_2023/refs/heads/main_x64_ubuntu%2022.04_Regression/System.Reflection.Invoke_1.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/09_05_2023/refs/heads/main_x64_ubuntu%2022.04_Regression/System.Reflection.Invoke.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n```cmd\ngit clone https://github.com/dotnet/performance.git\npython3 .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027System.Reflection.Invoke*\u0027\n```\n\n\u003cdetails\u003e\n\n\n### Payloads\n\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-89920c06-2fa3-4467-ab0d-bbef161f7dff1bc933c1aca4de09f/4c6a2ca5-ff5a-4649-89ec-55d898fa21c3.zip?sv=2021-08-06\u0026se=2023-09-27T08%3A56%3A19Z\u0026sr=c\u0026sp=rl\u0026sig=IScad2OS9jx0nL9nbE2UVRWMwFKnjmTq2%2BgjqXxdIps%3D\u003e)\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-63505cfd-1724-4101-9a2f-81a3d2bd4dc4dba4ae0d8244a7484/37acaa3e-2f98-479b-82c0-cc3c2fe9259a.zip?sv=2021-08-06\u0026se=2023-09-28T00%3A19%3A14Z\u0026sr=c\u0026sp=rl\u0026sig=Z3zJF2UweUAKMrjL0dO5R%2FQbE4wC20xRiFPztW8DPNI%3D\u003e)\n### System.Reflection.Invoke.Property_Get_class\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 12.934025162337663 \u003e 11.931842525878434.\r\nIsChangePoint: Marked as a change because one of 8/28/2023 1:23:07 PM, 9/4/2023 7:24:21 PM falls between 8/27/2023 6:19:41 AM and 9/4/2023 7:24:21 PM.\r\nIsRegressionStdDev: Marked as regression because -5.8134313269420215 (T) = (0 -12.43298178735799) / Math.Sqrt((0.13497822992729458 / (13)) + (0.3557251851021524 / (25))) is less than -2.028094000977961 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (13) + (25) - 2, .025) and -0.07916202584447414 = (11.52095930880151 - 12.43298178735799) / 11.52095930880151 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6](https://github.com/dotnet/runtime/commit/a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6)\nCompare | [4c013865c31cb154ccf88f7628f2d26758b00d3e](https://github.com/dotnet/runtime/commit/4c013865c31cb154ccf88f7628f2d26758b00d3e)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6...4c013865c31cb154ccf88f7628f2d26758b00d3e)\nConfigs | CompilationMode:tiered, RunKind:micro\n\n\n### Regressions in PerfLabTests.CastingPerf2.CastingPerf\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[ScalarValueTypeObj - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04/PerfLabTests.CastingPerf2.CastingPerf.ScalarValueTypeObj.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/runtime/perflab/CastingPerf2.cs#L202-#L207\u003e)\u003c/li\u003e\u003cli\u003e[📈 - ADX Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACn1UTXPTMBC951foZhscV3HTtKRjZtJw6AyUlibAgWE6ir2NVfThkWSSMPx4VnZJ7ZQyvki77z29lXYtwJE7B9aRjAQ3YO4/sNUStzaZM+u4WvtY2t0ki5wJZr4wUcNyV8H16iE4HwivYx0zbskloFjBHDhchilNj4d0MqQnS3o6PaHTNE3o2YhOTkevKZ1SGrXsRamN+8gk2JaN30pAeFurTzXUMLXOoIOYNDuPe4xE5Nsg+MpVoTc2GdFkJovJOEnpZZpcb0TiLQcxCTZcDbeT8ZDJIoj/QRi9uRwlS74G84zClQPhSZ9XtXI1atNxMjMSWX+hAqHMR1C/AgNddOrRzRl9efGC/OjsZcLorE/plrE3lCzqpwJaVxYjLIcuZQHmJ4r369gc1jH4fj64AoZ8kKCcHfwmmxIT5KLmoriFSpMMO6fQToE7MlgAvnnQR10YpvKywRm4t0clsMIeScbVExCfea7VPV/XhjmulcXAe3TasCTPjT4QnZm85A5yh84aEN5LQLR5IdsU9Z/j5lpWXDTrK120HMcRWjyR/Fz4xvPJZmZ6mbnG4sEsdfW42me5BVm5Xfjs0Ju19hMU9SvzA7RweP/kbWekEGNrKZnhv4Aws76TbBs2eG8pJq8istodCMR7y7GvuJkc1KmMfsCreQa+BVsLlxm0X4Sdktr4DLuFrVHpOOqpPWiuyA98qowrBaY7x1p1gQZUgXnfIHmJVZENdyUJLRgONtuPdUy2uRa1VNmhv10bt1lrCIGOOwFZ8A7/Ndi9u8dt8wcKlY18zFaCu4xtwUZ/ALtfFqPsBAAA\u003e)\u003c/li\u003e\u003c/ul\u003e | 197.37 μs | 262.86 μs | 1.33 | 0.03 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[FooObjCastIfIsa - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04/PerfLabTests.CastingPerf2.CastingPerf.FooObjCastIfIsa.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/runtime/perflab/CastingPerf2.cs#L229-#L235\u003e)\u003c/li\u003e\u003cli\u003e[📈 - ADX Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACn1UXW/TMBR976/wWxJIszTrStcpSF0R2gRjYy3iAaHJTW4bD39EtkNbxI/nOhlt0jGUF/vec47vse8NB0seLBhLUuLdgV59pMsFbk00o8YyuXaxpL2J3it1u3x0kevVtaHeRY87EWOptgsmAJVyasHi0k/i5LQfj/rx2SJ+MzmLJ0kSJcn5+Px09DqOJ3EcNOx5obT9RAWYho3fkoN/X8nPFVQwMVbj8SGpdw73FAnIt573lclcbUw0iKOpyEfDKImvkuh2wyNXrxcSb8Nkfzsa9qnIvfAfhMH51SBasDXoZxQmLXBH+rKspK1QOx5GUy2Q9RfKEUpdBPVL0NBGJw5dn9GV5y/ID8YvEwbjLqVtY19QNK8OBpqqDEZoBm3KHPRPFO/62Bz76H2/6N0ART4IkNb0fpNNgQlyWTGe30OpSIptkysrwZ5oNIBv7nVRl5rKrKhxGlbmpACamxNBmTwA8ZlnSq7YutLUMiUNBj5gpTVLsEyrI9GpzgpmIbNYWQ3Ce/GI0i9ka1P/OW6mRMl4vb5RecOxDKH5geSGwjWeS9YD08nMFJoHvVDl02qfZQZEaXf+s0Pv1mqxKyHoOnMDNLd4/+Rta6QQYyohqGa/gFC9fhB069d4V1JIXgVkuTsSCPclh85xPTmoU2r1iFfzDHwPpuI21Vh+7rcsNfEpdgtdo9Jp0FF7VEySH/hUKZMSdHuOlWwDNcgc865BsgJdkQ2zBfENaAYm3Y91SLaZ4pWQ6XF9uyZu0qYgBFpmOaTeO/zXYPfunrb1H8iXJnAxU3JmU7oFE/wBQ+A63ekEAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 263.78 μs | 282.60 μs | 1.07 | 0.03 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/09_05_2023/refs/heads/main_x64_ubuntu%2022.04_Regression/PerfLabTests.CastingPerf2.CastingPerf_1.png\u003e)\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/09_05_2023/refs/heads/main_x64_ubuntu%2022.04_Regression/PerfLabTests.CastingPerf2.CastingPerf_2.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/09_05_2023/refs/heads/main_x64_ubuntu%2022.04_Regression/PerfLabTests.CastingPerf2.CastingPerf.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n```cmd\ngit clone https://github.com/dotnet/performance.git\npython3 .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027PerfLabTests.CastingPerf2.CastingPerf*\u0027\n```\n\n\u003cdetails\u003e\n\n\n### Payloads\n\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-89920c06-2fa3-4467-ab0d-bbef161f7dff1bc933c1aca4de09f/4c6a2ca5-ff5a-4649-89ec-55d898fa21c3.zip?sv=2021-08-06\u0026se=2023-09-27T08%3A56%3A19Z\u0026sr=c\u0026sp=rl\u0026sig=IScad2OS9jx0nL9nbE2UVRWMwFKnjmTq2%2BgjqXxdIps%3D\u003e)\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-63505cfd-1724-4101-9a2f-81a3d2bd4dc4dba4ae0d8244a7484/37acaa3e-2f98-479b-82c0-cc3c2fe9259a.zip?sv=2021-08-06\u0026se=2023-09-28T00%3A19%3A14Z\u0026sr=c\u0026sp=rl\u0026sig=Z3zJF2UweUAKMrjL0dO5R%2FQbE4wC20xRiFPztW8DPNI%3D\u003e)\n### PerfLabTests.CastingPerf2.CastingPerf.ScalarValueTypeObj\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 262.86413593749995 \u003e 207.03602456933592.\r\nIsChangePoint: Marked as a change because one of 8/15/2023 7:48:35 PM, 8/28/2023 1:23:07 PM, 9/4/2023 7:24:21 PM falls between 8/27/2023 6:19:41 AM and 9/4/2023 7:24:21 PM.\r\nIsRegressionStdDev: Marked as regression because -571.6960913178664 (T) = (0 -262736.10639719927) / Math.Sqrt((36460.566257674574 / (13)) + (259414.6093935372 / (25))) is less than -2.028094000977961 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (13) + (25) - 2, .025) and -0.3330097792672661 = (197099.90915567105 - 262736.10639719927) / 197099.90915567105 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### JIT Disasms\r\n\r\n### PerfLabTests.CastingPerf2.CastingPerf.FooObjCastIfIsa\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 282.5962487244898 \u003e 276.74016504166667.\r\nIsChangePoint: Marked as a change because one of 8/15/2023 7:48:35 PM, 9/2/2023 3:43:46 AM, 9/4/2023 7:24:21 PM falls between 8/27/2023 6:19:41 AM and 9/4/2023 7:24:21 PM.\r\nIsRegressionStdDev: Marked as regression because -74.61168385739026 (T) = (0 -282425.7198429051) / Math.Sqrt((583774.0204949128 / (32)) + (291455.2700233112 / (6))) is less than -2.028094000977961 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (32) + (6) - 2, .025) and -0.07329441012996876 = (263139.09508641274 - 282425.7198429051) / 263139.09508641274 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6](https://github.com/dotnet/runtime/commit/a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6)\nCompare | [4c013865c31cb154ccf88f7628f2d26758b00d3e](https://github.com/dotnet/runtime/commit/4c013865c31cb154ccf88f7628f2d26758b00d3e)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6...4c013865c31cb154ccf88f7628f2d26758b00d3e)\nConfigs | CompilationMode:tiered, RunKind:micro\n\n\n### Regressions in System.Memory.Span\u0026lt;Int32\u0026gt;\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[IndexOfAnyFourValues - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04/System.Memory.Span(Int32).IndexOfAnyFourValues(Size%3a%20512).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Memory/Span.cs#L87-#L88\u003e)\u003c/li\u003e\u003cli\u003e[📈 - ADX Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACn1UXW+bMBR9z6/wG7ARCjRpu3RUSjtNraasXcm2h2mqXLgJ7vyBbLOEaT9+F+hSSNeJF3PvOcf32PeagyV3FowlCXHS2lgQwQKE0nWQllS+vZL2MD4LrmQO2+vVXNbvVaW/UF6BcVP2C2ZkGsWeczrijZCxVNslE4BqObVgcenGYXw4Do/G4XQZHs+m4WwSBcfRJJrG8eswnIWh17HTQmn7kQowHRu/ew7ubSU/VVDBzFjN5Non7V+De4x45NvI+cpkrjYmiMJgLvKjSRCHl3FwveHBDeiV4xNnw+R4ezQZU5E7/j8I0ZvLKFiyNehnFCYt8Ib0+b6StkLtcBLMtUDWXyhHKG0iqF+Chj46btDtHkN5/oJ8dPIyIToZUvo2dgUFafVkoKvKYIRm0KekoH+i+NDHZt/H6PvpaAEU+SBAWjP6TTYFJsh5xXh+C6UiCbZOrqwEe6DRAN65M0SdayqzosVpWJmDAmhuDgRl8gmI13yh5IqtK00tU9Jg4ANW2rIEy7TaE53rrGAWMouVtSA8F4co/UK2NfWf7S6UKBlv1wuVdxzLEJo/kZY4J03jNcl2aAaZC4XmQS9V+bjaZZkBUdrafbbpzVot6xK8obNmgFKL50/OeiOFGFMJQTVOHaF6fSfo1m3xTUk+eeWR+3pPwN+V7DeO28lBnVKrBzyaZ+BbMBW3icbyc7dnqYvPsVvoGpUOvYHag2KS/MCrSpiUoPtzrGQfqAFfEU2aBskKdEU2zBbENaAZmGQ31j7ZZopXQib79dVd3CRdQQi0zHJInHf41mD31o+/7QvkSuM1MVNyZhO6BeP9AeXm1tDtBAAA\u003e)\u003c/li\u003e\u003c/ul\u003e | 553.59 ns | 623.16 ns | 1.13 | 0.14 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[IndexOfAnyFiveValues - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04/System.Memory.Span(Int32).IndexOfAnyFiveValues(Size%3a%20512).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Memory/Span.cs#L90-#L91\u003e)\u003c/li\u003e\u003cli\u003e[📈 - ADX Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACn1UXW+bMBR9z6/wG7ARCjTp0nRUSjtNraauXcm2h2mqXLgJ3vyBbNOEaT9+F+hSSNeJF3PvOcf32PeagyV3FowlCXHS2lgQwRUIpesgLal8eyntYXwaXMoctterhazfswf4QnkFxk3ZL5iTaRR7zsmIN0LGUm2XTACq5dSCxaUbh/HhODwah9Nl+GY+DeeTKJhNZ+FxFL0Ow3kYeh07LZS2H6kA07Hxu+fg3lbyUwUVzI3VTK590v41uMeIR76NnK9M5mpjgigMFiI/mgRxeBEH1xse3IBeOT5xNkyOt0eTMRW54/+DEB1fRMGSrUE/ozBpgTekz/eVtBVqh5NgoQWy/kI5QmkTQf0SNPTRcYNu9xjK8xfko9nLhGg2pPRt7AoK0urJQFeVwQjNoE9JQT+g+NDHZt/H6PvJ6Aoo8kGAtGb0m2wKTJCzivH8FkpFEmydXFkJ9kCjAbxzZ4g601RmRYvTsDIHBdDcHAjK5BMQr/lcyRVbV5papqTBwAestGUJlmm1J7rQWcEsZBYra0F4Lg5R+oVsa+o/250rUTLerq9U3nEsQ2j+RFrinDSN1yTboRlkzhWaB71U5eNql2UGRGlr99mmN2u1rEvwhs6aAUotnj857Y0UYkwlBNU4dYTq9Z2gW7fFNyX55JVH7us9AX9Xst84bicHdUqtfuDRPAPfgqm4TTSWn7s9S118gd1C16h06A3UfigmyU+8qoRJCbo/x0r2gRrwFdGkaZCsQFdkw2xBXAOagUl2Y+2TbaZ4JWSyX1/dxU3SFYRAyyyHxHmHbw12b/34275ArjReEzMlZzahWzDeH7zWR4rtBAAA\u003e)\u003c/li\u003e\u003c/ul\u003e | 513.02 ns | 679.64 ns | 1.32 | 0.11 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[IndexOfAnyFiveValues - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04/System.Memory.Span(Int32).IndexOfAnyFiveValues(Size%3a%2033).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Memory/Span.cs#L90-#L91\u003e)\u003c/li\u003e\u003cli\u003e[📈 - ADX Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACn1UXW/TMBR976/wWxJIMzftyujIpG4IbUJjYynwgNDkJbeNhz8i21kbxI/nJhld2jGUF+fec47vse+1AEduHVhHEuKltXUgo0uQ2tRRWjL17kK5cXwSXagcNlfLuao/8Af4ykQF1k/5L5iR8Tjwjgei0bGOGbfgElAsZw4cLv2YxuMhnQ7p4YK+mR3S2SSOKI2PJnT6mtIZpUHHTgtt3CcmwXZs/O4E+DeV+lxBBTPrDFerkLR/De4xEpDvA+8bV7le22hEo7nMp5MopudxdLUW0TWYpRcSb83VcDOdDJnMvfAfhNHb81G04CswzyhcORAN6ctdpVyF2nQSzY1E1l+oQChrIqhfgoE+Om7Q7R678uIF+dHRy4TR0S6lb2NbUJRWTwa6qixGWAZ9SgrmAcV3faz3fQx+HA8ugSEfJChnB7/JusAEOa24yG+g1CTBzsm1U+AODBrAO/d2UaeGqaxocQaW9qAAltsDybh6AuI1n2m15KvKMMe1shj4iJW2LMkzo/dE5yYruIPMYWUtCM/FI9q8kG1N/We7My1LLtr1pc47juMIzZ9ICxyTpvGaZDszO5kzjebBLHT5uNpmuQVZutp/tun1Si/qEoJdZ80ApQ7Pn5z0RgoxtpKSGRw6wszqVrKN3+KbkkLyKiB39Z5AuC05bBy3k4M6pdH3eDTPwDdgK+ESg+Xnfs9SF59jt7AVKo2DHbV7zRX5iVeVcKXA9OdYqz7QAD4ihjQNkhXoiqy5K4hvwXCwyXasQ7LJtKikSvbrq7u4TbqCEOi4E5B47/Gtwe6tH3/bF8hXNmhithTcJWwDNvgDS+hn9uwEAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 32.68 ns | 43.39 ns | 1.33 | 0.36 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[IndexOfAnyFourValues - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04/System.Memory.Span(Int32).IndexOfAnyFourValues(Size%3a%2033).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Memory/Span.cs#L87-#L88\u003e)\u003c/li\u003e\u003cli\u003e[📈 - ADX Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACn1UXU/bMBR976/wW5ItDWn6AZQFqTBNoInBSLc9TBMyyW1j5o/Idmgz7cfvJmElKWPKi3PvOcf32PeagyV3FowlMXGSylgQwRUIpasgKah8dyntODoNLmUG2+vVQlYfVKm/Ul6CcRP2C+ZkPPackwGvdYyl2i6ZABTLqAWLSzcKo/EwnA3D6TI8nE/D+SQKRrNwPD0+fBuG8zD0WnaSK20/UQGmZeN3z8G9LeXnEkqYG6uZXPuk+atxTxGPfB8435jM1MYEozBYiGw2CaLwIgquNzy4Ab1yfOJsmBxuZ5MhFZnj/4MwOr4YBUu2Bv2CwqQFXpO+3JfSlqgdToKFFsj6C+UIpXUE9QvQ0EVHNbrZoy/PX5EfHb1OGB31KV0bu4KCpHw20FZlMEJT6FIS0I8o3vex2fcx+HEyuAKKfBAgrRn8JpscE+SsZDy7hUKRGDsnU1aCPdBoAO/c6aPONJVp3uA0rMxBDjQzB4Iy+QzEaz5XcsXWpaaWKWkw8BErbViCpVrtiS50mjMLqcXKGhCei0OUfiXbmPrPdudKFIw36yuVtRzLEJo9k5Y4JnXj1clmZnqZc4XmQS9V8bTaZZkBUdjKfbHpzVotqwK8vrN6gBKL509OOyOFGFMKQTUOHaF6fSfo1m3wdUk+eeOR+2pPwN+V7NeOm8lBnUKrBzyaF+BbMCW3scbyM7djqY0vsFvoGpXGXk/tQTFJfuJVxUxK0N05VrIL1ICPiCZ1g6Q5uiIbZnPiGtAMTLwba59sU8VLIeP9+qo2buK2IARaZjnEznt8a7B7q6ff5gVypfHqmCk4szHdgvH+AFpcEtXsBAAA\u003e)\u003c/li\u003e\u003c/ul\u003e | 36.20 ns | 39.66 ns | 1.10 | 0.07 | True | | |\r\n\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/09_05_2023/refs/heads/main_x64_ubuntu%2022.04_Regression/System.Memory.Span%28Int32%29_1.png\u003e)\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/09_05_2023/refs/heads/main_x64_ubuntu%2022.04_Regression/System.Memory.Span%28Int32%29_2.png\u003e)\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/09_05_2023/refs/heads/main_x64_ubuntu%2022.04_Regression/System.Memory.Span%28Int32%29_3.png\u003e)\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/09_05_2023/refs/heads/main_x64_ubuntu%2022.04_Regression/System.Memory.Span%28Int32%29_4.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/09_05_2023/refs/heads/main_x64_ubuntu%2022.04_Regression/System.Memory.Span%28Int32%29.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n```cmd\ngit clone https://github.com/dotnet/performance.git\npython3 .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027System.Memory.Span\u0026lt;Int32\u0026gt;*\u0027\n```\n\n\u003cdetails\u003e\n\n\n### Payloads\n\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-89920c06-2fa3-4467-ab0d-bbef161f7dff1bc933c1aca4de09f/4c6a2ca5-ff5a-4649-89ec-55d898fa21c3.zip?sv=2021-08-06\u0026se=2023-09-27T08%3A56%3A19Z\u0026sr=c\u0026sp=rl\u0026sig=IScad2OS9jx0nL9nbE2UVRWMwFKnjmTq2%2BgjqXxdIps%3D\u003e)\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-63505cfd-1724-4101-9a2f-81a3d2bd4dc4dba4ae0d8244a7484/37acaa3e-2f98-479b-82c0-cc3c2fe9259a.zip?sv=2021-08-06\u0026se=2023-09-28T00%3A19%3A14Z\u0026sr=c\u0026sp=rl\u0026sig=Z3zJF2UweUAKMrjL0dO5R%2FQbE4wC20xRiFPztW8DPNI%3D\u003e)\n### System.Memory.Span\u0026lt;Int32\u0026gt;.IndexOfAnyFourValues(Size: 512)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 623.1633759593363 \u003e 580.7947470256283.\r\nIsChangePoint: Marked as a change because one of 8/19/2023 11:06:43 PM, 8/28/2023 1:23:07 PM, 9/4/2023 7:24:21 PM falls between 8/27/2023 6:19:41 AM and 9/4/2023 7:24:21 PM.\r\nIsRegressionStdDev: Marked as regression because -17.772546313404245 (T) = (0 -624.3361230397583) / Math.Sqrt((157.56908967091178 / (13)) + (0.8081864634680289 / (25))) is less than -2.028094000977961 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (13) + (25) - 2, .025) and -0.11016987457320086 = (562.378909155485 - 624.3361230397583) / 562.378909155485 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### JIT Disasms\r\n\r\n### System.Memory.Span\u0026lt;Int32\u0026gt;.IndexOfAnyFiveValues(Size: 512)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 679.640959709437 \u003e 538.9842832860049.\r\nIsChangePoint: Marked as a change because one of 8/19/2023 11:06:43 PM, 8/28/2023 1:23:07 PM, 9/4/2023 7:24:21 PM falls between 8/27/2023 6:19:41 AM and 9/4/2023 7:24:21 PM.\r\nIsRegressionStdDev: Marked as regression because -525.0385517488116 (T) = (0 -679.307678175634) / Math.Sqrt((0.8420108968969636 / (13)) + (0.8752767012868232 / (25))) is less than -2.028094000977961 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (13) + (25) - 2, .025) and -0.323006116403176 = (513.4577004242815 - 679.307678175634) / 513.4577004242815 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### JIT Disasms\r\n\r\n### System.Memory.Span\u0026lt;Int32\u0026gt;.IndexOfAnyFiveValues(Size: 33)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 43.38838435545172 \u003e 37.49482912108297.\r\nIsChangePoint: Marked as a change because one of 8/28/2023 1:23:07 PM, 9/4/2023 7:24:21 PM falls between 8/27/2023 6:19:41 AM and 9/4/2023 7:24:21 PM.\r\nIsRegressionStdDev: Marked as regression because -7.501317357406745 (T) = (0 -44.13679175536036) / Math.Sqrt((11.363373458839362 / (13)) + (0.5015702049745557 / (25))) is less than -2.028094000977961 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (13) + (25) - 2, .025) and -0.19148514243077333 = (37.043509972198216 - 44.13679175536036) / 37.043509972198216 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n#### JIT Disasms\r\n\r\n### System.Memory.Span\u0026lt;Int32\u0026gt;.IndexOfAnyFourValues(Size: 33)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 39.66469474644949 \u003e 38.01209476983544.\r\nIsChangePoint: Marked as a change because one of 8/28/2023 1:23:07 PM, 9/4/2023 7:24:21 PM falls between 8/27/2023 6:19:41 AM and 9/4/2023 7:24:21 PM.\r\nIsRegressionStdDev: Marked as regression because -81.56370161870893 (T) = (0 -39.86311581142425) / Math.Sqrt((0.009244118016176117 / (13)) + (0.030914726401205114 / (25))) is less than -2.028094000977961 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (13) + (25) - 2, .025) and -0.09926253540069081 = (36.26350805896773 - 39.86311581142425) / 36.26350805896773 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked as regression because Edge Detector said so.\r\n\r\n```\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6](https://github.com/dotnet/runtime/commit/a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6)\nCompare | [4c013865c31cb154ccf88f7628f2d26758b00d3e](https://github.com/dotnet/runtime/commit/4c013865c31cb154ccf88f7628f2d26758b00d3e)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6...4c013865c31cb154ccf88f7628f2d26758b00d3e)\nConfigs | CompilationMode:tiered, RunKind:micro\n\n\n### Regressions in System.Tests.Perf_Int32\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[ToStringHex - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04/System.Tests.Perf_Int32.ToStringHex(value%3a%202147483647).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Int32.cs#L33-#L35\u003e)\u003c/li\u003e\u003cli\u003e[📈 - ADX Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACn1UTXObMBC9+1foBrSYACZ26gydcdJDOpm0qU2nh04no8DGKNUHI4nY7vTHd4HUBqfpcJF233vaJ+3CwZI7C8aSlDirnbEgggy3JrgF/XD3UdpJHGRqZTWT6yvYuk+U1zAncZTMkrPJNJl5zvmINyrGUm0zJgClCmrB4tKNw3gyDqfj8DQLZ/PTcJ5Mg9npZBpF8dswnIeh17FXpdL2ExVgOjZ+9xzcZS2/1IAHmrYAn7S7Bvcc8cj3kfONyUJtTBCFwUIU0ySIw6s4+LzhrQnHJ86GyfF2moypKBz/H4To3VUUZGwN+gWFSQu8IX29r6WtUTtMgoUWyPoL5QilTQT1K9DQR8cNuj1jKM9fkY/OXidEZ0NK38a+oGBVHwx0VRmM0Bz6lBXoJxQf+tgc+xj9OB/dAEU+CJDWjH6TTYkJclEzXiyhUiTFvimUlWBPNBrAN3eGqAtNZV62OA0P5qQEWpgTQZk8APGZL5V8YOtaU8uUNBi4xkpblmC5VkeiC52XzEJusbIWhPfiEKVfybam/nPcpRIV4+36RhUdxzKEFgdSMxVN4zXJdmIGmUuF5kFnqnpe7bPMgKjszn1x6O1aZbsKvKGzZoBWFu+fvO+NFGJMLQTV7BcQqtd3gm7dFt+U5JM3HrnfHQn4+5L9xnE7OahTafWIV/MCvARTc5tqLL9we5a6+AK7ha5RaeIN1B4Vk+QnPlXKpATdn2Ml+0ANssB80yB5ia7IhtmSuAY0A5Pux9on21zxWsj0uL5dFzdpVxACLbMcUucD/muwe3fP2/YP5ErjNTFTcWZTugXj/QHcp7BB6gQAAA==\u003e)\u003c/li\u003e\u003c/ul\u003e | 17.80 ns | 19.69 ns | 1.11 | 0.09 | True | | |\r\n\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/09_05_2023/refs/heads/main_x64_ubuntu%2022.04_Regression/System.Tests.Perf_Int32_1.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/09_05_2023/refs/heads/main_x64_ubuntu%2022.04_Regression/System.Tests.Perf_Int32.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n```cmd\ngit clone https://github.com/dotnet/performance.git\npython3 .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027System.Tests.Perf_Int32*\u0027\n```\n\n\u003cdetails\u003e\n\n\n### Payloads\n\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-89920c06-2fa3-4467-ab0d-bbef161f7dff1bc933c1aca4de09f/4c6a2ca5-ff5a-4649-89ec-55d898fa21c3.zip?sv=2021-08-06\u0026se=2023-09-27T08%3A56%3A19Z\u0026sr=c\u0026sp=rl\u0026sig=IScad2OS9jx0nL9nbE2UVRWMwFKnjmTq2%2BgjqXxdIps%3D\u003e)\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-63505cfd-1724-4101-9a2f-81a3d2bd4dc4dba4ae0d8244a7484/37acaa3e-2f98-479b-82c0-cc3c2fe9259a.zip?sv=2021-08-06\u0026se=2023-09-28T00%3A19%3A14Z\u0026sr=c\u0026sp=rl\u0026sig=Z3zJF2UweUAKMrjL0dO5R%2FQbE4wC20xRiFPztW8DPNI%3D\u003e)\n### System.Tests.Perf_Int32.ToStringHex(value: 2147483647)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 19.68549505341147 \u003e 18.863384749456166.\r\nIsChangePoint: Marked as a change because one of 8/28/2023 1:23:07 PM, 9/4/2023 7:24:21 PM falls between 8/27/2023 6:19:41 AM and 9/4/2023 7:24:21 PM.\r\nIsRegressionStdDev: Marked as regression because -15.032296546459138 (T) = (0 -20.33268632700021) / Math.Sqrt((0.1423980119275122 / (13)) + (0.2898717442461349 / (25))) is less than -2.028094000977961 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (13) + (25) - 2, .025) and -0.12488107189761949 = (18.075409778831073 - 20.33268632700021) / 18.075409778831073 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked as regression because Edge Detector said so.\r\n\r\n```\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6](https://github.com/dotnet/runtime/commit/a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6)\nCompare | [4c013865c31cb154ccf88f7628f2d26758b00d3e](https://github.com/dotnet/runtime/commit/4c013865c31cb154ccf88f7628f2d26758b00d3e)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/a7d4b4b4761b68c85e27d9c4c8dacb86c285ddc6...4c013865c31cb154ccf88f7628f2d26758b00d3e)\nConfigs | CompilationMode:tiered, RunKind:micro\n\n\n### Regressions in System.Numerics.Tests.Perf_VectorConvert\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[Widen_float - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04/System.Numerics.Tests.Perf_VectorConvert.Widen_float.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Numerics.Vectors/Perf_VectorConvert.cs#L79-#L80\u003e)\u003c/li\u003e\u003cli\u003e[📈 - ADX Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACn1Uy27bMBC8+yt4k9TKiuTm6UAFnPQQoEiaxm5zKAqDkdYWUz4EclXbRT++Syl1ZKcpdKF2Z4Y75C4lIJsjOGQ5C6Ybh6CSm0aBFYVLZhR3yS3YxfwrFGjspdE/wWJyL0rQ84U0HIPzgfQaDrnFmVBAQiVHQFqGo3T0bpgeD9OjWXoyPkrHR1mSZWejk/T0bZqO0zTq2NPKWLzhClzHpu9BQnjX6M8NNDB2aIVexqz987inSMS+DYJ7oUuzckmWJhNVHh8mo/RqlHxaybbyIGbBSujh+vhwyFUZxP8gZGdXWTITS7AvKEIjSE/68tBobEg7PUwmVhHrL1QSlPsI6ddgoY8eeXS7x668fEU+O32dkJ3uUvo2tgUl0+bZQFeVowgvoE+ZgqV73POx2vcx+H4+uAZOfFCg0Q1+s1VFCXbRCFneQW1YTl1TGtSAB5YM0J0Hu6gLy3VRtTgLC3dQAS/dgeJCPwPpmqmxFmLZWI7CaEeBj1Rpy1KisGZPdGKLSiB1JFXWguhcAmbsK9nW1H+2uzSqFrJdX5uy46AgaPlM8qPgG88n23nZyVwaMg92Zuqn1TYrHKgaN+GLTW+XZrapIdp15gdoinT+7H1vpAjjGqW4Fb+AcbucK74OW7wvKWZvIvaw2ROItyXH3nE7OaRTW/NIR/MCfAeukZhbKr8Me5a6+IS6hS9J6V20o/ZohGY/6KpyoTXY/hwb3Qda0CXlfYMUFbliK4EVCx29M+Dy7VjHbF0Y2Sid79e36eIu7woiIAqUkAcf6K2h7t08/bYvUKhd5GOulgJzvgYX/QGVl0v+6AQAAA==\u003e)\u003c/li\u003e\u003c/ul\u003e | 878.11 ns | 1.32 μs | 1.50 | 0.07 | True | | |\r\n\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/09_05_2023/refs/heads/main_x64_ubuntu%2022.04_Regression/System.Numerics.Tests.Perf_VectorConvert_1.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/09_05_2023/refs/heads/main_x64_ubuntu%2022.04_Regression/System.Numerics.Tests.Perf_VectorConvert.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n```cmd\ngit clone https://github.com/dotnet/performance.git\npython3 .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027System.Numerics.Tests.Perf_VectorConvert*\u0027\n```\n\n\u003cdetails\u003e\n\n\n### Payloads\n\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-89920c06-2fa3-4467-ab0d-bbef161f7dff1bc933c1aca4de09f/4c6a2ca5-ff5a-4649-89ec-55d898fa21c3.zip?sv=2021-08-06\u0026se=2023-09-27T08%3A56%3A19Z\u0026sr=c\u0026sp=rl\u0026sig=IScad2OS9jx0nL9nbE2UVRWMwFKnjmTq2%2BgjqXxdIps%3D\u003e)\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-63505cfd-1724-4101-9a2f-81a3d2bd4dc4dba4ae0d8244a7484/37acaa3e-2f98-479b-82c0-cc3c2fe9259a.zip?sv=2021-08-06\u0026se=2023-09-28T00%3A19%3A14Z\u0026sr=c\u0026sp=rl\u0026sig=Z3zJF2UweUAKMrjL0dO5R%2FQbE4wC20xRiFPztW8DPNI%3D\u003e)\n### System.Numerics.Tests.Perf_VectorConvert.Widen_float\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 1.320969514442833 \u003e 926.9380103399895.\r\nIsChangePoint: Marked as a change because one of 8/28/2023 1:23:07 PM, 9/4/2023 7:24:21 PM falls between 8/27/2023 6:19:41 AM and 9/4/2023 7:24:21 PM.\r\nIsRegressionStdDev: Marked as regression because -813.2144417580388 (T) = (0 -1320.5381608067803) / Math.Sqrt((2.2969982946450807 / (13)) + (2.8296111997410787 / (25))) is less than -2.028094000977961 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (13) + (25) - 2, .025) and -0.49601818195949177 = (882.7019462271061 - 1320.5381608067803) / 882.7019462271061 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked as regression because Edge Detector said so.\r\n\r\n```\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eperformanceautofiler[bot]\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`, `os-linux`, `tenet-performance`, `tenet-performance-benchmarks`, `arch-x64`, `untriaged`, `runtime-coreclr`, `needs-area-label`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-09-06T14:44:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5l2Hwa",
                                           "createdAt":  "2023-09-06T16:09:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "The Networking test at the top regressed in continuous runs, so it is worth looking into:\r\n\r\n[Benchmark source code](https://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Net.Primitives/IPAddressPerformanceTests.cs#L53-#L56)\r\n\r\nContinuous benchmark results: [TryFormat - Duration of single invocation](https://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu%2022.04/System.Net.Primitives.Tests.IPAddressPerformanceTests.TryFormat(address%3a%20143.24.20.36).html)\r\n![image](https://github.com/dotnet/runtime/assets/5776068/dc80eacf-59b9-45fc-8923-eacc45f4e62b)\r\n\r\n@MihaZupan it looks related to the perf test you changed recently (ToString - #88671). Can you please take a look at this one as well?\r\n\r\n\r\n@DrewScoggins @cincuranet what should we do with the rest of the regressions?\r\nIs someone going to take a deeper look if perhaps some low-level change in Runtime (e.g. JIT) caused all of them?",
                                           "updatedAt":  "2023-09-06T16:19:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5l2emp",
                                           "createdAt":  "2023-09-06T17:05:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cincuranet",
                                           "body":  "@karelz @MihaZupan Worth mentioning that it seems the regression to be only on Linux/Ubuntu 22.04/x64/Intel:\r\n![image](https://github.com/dotnet/runtime/assets/4540597/6865e8b3-60a4-4f30-9df1-b3c6e67a5934)\r\n\r\n@karelz You can leave it open. I think at least @EgorBo will take a look.\r\n",
                                           "updatedAt":  "2023-09-06T17:05:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mxew3",
                                           "createdAt":  "2023-09-18T19:31:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "I\u0027m not having much luck reproducing the `IPAddress.TryFormat` regression on a Ubuntu VM with the cited commit range (do you know which CPU the `TigerUbuntu` queue uses?).\r\nRegardless, there weren\u0027t any changes to `IPAddress` code in that timeframe.",
                                           "updatedAt":  "2023-09-18T19:31:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5m0cG9",
                                           "createdAt":  "2023-09-19T08:06:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cincuranet",
                                           "body":  "It\u0027s `i7-8700`.",
                                           "updatedAt":  "2023-09-19T08:06:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6A_D1x",
                                           "createdAt":  "2024-06-12T22:40:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "triage: does not seems critical for 9.0, moving to future",
                                           "updatedAt":  "2024-06-12T22:40:36Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "[Perf] Linux/x64: 16 Regressions on 8/28/2023 7:02:26 PM",
        "labels":  [
                       "area-System.Net",
                       "os-linux",
                       "tenet-performance",
                       "tenet-performance-benchmarks",
                       "arch-x64",
                       "runtime-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/92285",
        "createdAt":  "2023-09-19T16:26:28Z",
        "number":  92285,
        "author":  "javiercn",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-03-22T02:54:35Z",
        "body":  "Edited by @MihaZupan on Sep 22nd to reflect the latest API proposal shape.\r\n\r\n### Background and motivation\r\n\r\nSince it was introduced, IParsable\u003cT\u003e is implemented by most framework types to support converting from a string to the type. In Blazor we support deserializing IParsable\u003cT\u003e types when processing form data, and this is one of the types we need to special case support for because they don\u0027t implement IParsable\u003cUri\u003e\r\n\r\n### API Proposal\r\n\r\n```csharp\r\nnamespace System;\r\n\r\npublic class Uri : IParsable\u003cUri\u003e // New interface with an explicit implementation\r\n{\r\n    static bool IParsable\u003cUri\u003e.TryParse(string? s, IFormatProvider? provider, out Uri result);\r\n    static Uri IParsable\u003cUri\u003e.Parse(string s, IFormatProvider? provider);\r\n}\r\n```\r\n\r\nThe `IFormatProvider` will be ignored.\r\nThe implementation will delegate to `new Uri(s)`/`Uri.TryCreate(s)`.\r\nThe options used will be `UriKind = UriKind.RelativeOrAbsolute, AllowImplicitFilePaths = false`.\r\n\r\n### API Usage\r\n\r\nAllows `Uri` to use the same generic paths in existing implementations.\r\nSame idea as the example given for [`IParsable\u003cString\u003e`](https://github.com/dotnet/runtime/issues/78842):\r\n```c#\r\npublic static IEnumerable\u003cT\u003e Separate\u003cT\u003e(string source, char separator) where T : IParsable\u003cT\u003e\r\n{\r\n    return source.Split(separator)\r\n        .Select(x =\u003e T.Parse(x, CultureInfo.InvariantCulture));\r\n}\r\n```\r\n\r\n### Alternative Designs\r\n\r\n- `ISpanParsable` and `IUtf8SpanParsable` were mentioned as potential additions, but were currently [rejected](https://github.com/dotnet/runtime/issues/92285#issuecomment-1730294745) on the grounds that they would not provide any performance advantages over `IParsable`.\r\n- We could choose to allow `AllowImplicitFilePaths`.\r\n\r\n### Risks\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOaQHq6Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5m4bnB",
                                           "createdAt":  "2023-09-19T16:46:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nSince it was introduced, IParsable\u003cT\u003e is implemented by most framework types to support converting from a string to the type. In Blazor we support deserializing IParsable\u003cT\u003e types when processing form data, and this is one of the types we need to special case support for because they don\u0027t implement IParsable\u003cUri\u003e\n\n### API Proposal\n\n```csharp\r\nnamespace System;\r\n\r\npublic class Uri\u003cT\u003e : IParsable\u003cUri\u003e\r\n{\r\n    public static bool TryParse(string value, out Uri? uri)\r\n    public static Uri Parse(string value)\r\n}\r\n```\r\n\r\nThe implementation will delegate delegate to `TryCreate(value, UriKind.RelativeOrAbsolute, out Uri result)`\r\n\n\n### API Usage\n\n```csharp\r\n// Fancy the value\r\nvar c = Uri.Parse(\"http://www.example.com\")\r\nif(Uri.TryParse(\"http://www.example.com\", out var uri))\r\n{\r\n}\r\n```\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejaviercn\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Net`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-09-19T16:46:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5m45oi",
                                           "createdAt":  "2023-09-19T17:29:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODHReeQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "antonfirsov",
                                                                               "createdAt":  "2023-09-19T17:45:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "neon-sunset",
                                                                               "createdAt":  "2023-09-19T20:13:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PaulusParssinen",
                                                                               "createdAt":  "2023-09-20T07:52:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "Sergio0694",
                                           "body":  "Shouldn\u0027t we also suggest it implementing `ISpanParsable\u003cUri\u003e` while at it?",
                                           "updatedAt":  "2023-09-19T17:29:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5m5B_K",
                                           "createdAt":  "2023-09-19T17:52:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "This seems reasonable to me, but the interface implementation should be explicit (no reason to have both `Uri.TryCreate` and `Uri.TryParse` exposed).\r\n\r\nWe should consider having the behavior be such that it uses `AllowImplicitFilePaths = false` instead (once #59099 is implemented).\r\n\r\n\u003e Shouldn\u0027t we also suggest it implementing `ISpanParsable\u003cUri\u003e` while at it?\r\n\r\nNote that `Uri` has a `string OriginalString` property on it, so we\u0027d have to materialize the string either way.",
                                           "updatedAt":  "2023-09-19T17:52:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5m5t6r",
                                           "createdAt":  "2023-09-19T20:14:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODHRegg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PaulusParssinen",
                                                                               "createdAt":  "2023-09-20T07:52:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "neon-sunset",
                                           "body":  "\u003e Shouldn\u0027t we also suggest it implementing `ISpanParsable\u003cUri\u003e` while at it?\r\n\r\n...and `IUtf8SpanParsable\u003cUri\u003e` too.",
                                           "updatedAt":  "2023-09-19T20:14:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5nIjPZ",
                                           "createdAt":  "2023-09-21T20:59:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "If the input is a valid Uri, we will be forced to allocate the original input string due to the existing API surface (`OriginalString`).\r\nAs such, being able to parse from a span would only benefit cases where it\u0027s common for the input not to be valid.\r\nBut since we\u0027re saying that the methods should work in terms of `UriKind.RelativeOrAbsolute`, that means almost all inputs will be valid (with rare exceptions like a scheme with over 1024 characters, an invalid hostname, ...).\r\n\r\nIn other words, having the overload that takes a span would never help perf-wise because of the existing API shape, at which point there\u0027s no real reason to include it.\r\n\r\n\u003e `IUtf8SpanParsable\u003cUri\u003e`\r\n\r\nWhat would be the use cases for this? Also, it runs into the same limitations as `ISpanParsable`.",
                                           "updatedAt":  "2023-09-22T17:03:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5nNtUS",
                                           "createdAt":  "2023-09-22T15:48:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "Marking this one as ready for review with only explicit implementations of `IParsable\u003cUri\u003e`.",
                                           "updatedAt":  "2023-09-22T15:48:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5nNz_6",
                                           "createdAt":  "2023-09-22T16:07:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e What would be the use cases for this? Also, it runs into the same limitations as ISpanParsable.\r\n\r\nCan avoid an additional transcoding step. Allows it to support parsing from generic contexts. Etc\r\n\r\nIt\u0027s basically all the same stuff everywhere. There are potential perf and usability opportunities. If those don\u0027t exist for the type, then we don\u0027t need to expose the additional interfaces. But, exposing them can often simplify things.",
                                           "updatedAt":  "2023-09-22T16:07:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5nN09r",
                                           "createdAt":  "2023-09-22T16:10:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e Can avoid an additional transcoding step. \r\n\r\nNot if it has to create a string, anyway, in support of Uri.OriginalString.",
                                           "updatedAt":  "2023-09-22T16:10:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5nN1xg",
                                           "createdAt":  "2023-09-22T16:12:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e Not if it has to create a string, anyway, in support of Uri.OriginalString.\r\n\r\nThat depends on how it\u0027s implemented.\r\n\r\nIf you have a UTF8 span and only expose a `string` parse API, then for something like `TryParse` you have to first transcode the UTF8 span to a UTF16 string (also incurring an allocation) and then validate it\u0027s correct.\r\n\r\nIf you expose `TryParse(ROSpan\u003cbyte\u003e)` then you can perform the transcoding and validation simultaneously or separately (doing validation first) and only allocate the backing string on success, which is effectively a memcpy operation at that point.",
                                           "updatedAt":  "2023-09-22T16:19:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5nOGgb",
                                           "createdAt":  "2023-09-22T17:01:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e and only allocate the backing string on success\r\n\r\nThis is why Miha stated \"being able to parse from a span would only benefit cases where it\u0027s common for the input not to be valid\".  Neither of us believe that to be common.",
                                           "updatedAt":  "2023-09-22T17:01:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ne0dN",
                                           "createdAt":  "2023-09-26T19:07:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bartonjs",
                                           "body":  "[Video](https://www.youtube.com/watch?v=9z2P-pZ2Id4\u0026t=0h39m21s)\r\n\r\nLooks good as proposed. Depends on https://github.com/dotnet/runtime/issues/59099 being implemented first.\r\n\r\nWhen discussing if the TryParse and Parse should be implicit or explicit, we feel that having both TryCreate and TryParse is sub-optimal.\r\n\r\n```C#\r\nnamespace System;\r\n\r\npublic class Uri : IParsable\u003cUri\u003e // New interface with an explicit implementation\r\n{\r\n    static bool IParsable\u003cUri\u003e.TryParse(string? s, IFormatProvider? provider, out Uri result) =\u003e\r\n        TryCreate(uriString, RelativeOrAbsolute, NoImplicitFilePaths, out result);\r\n    static Uri IParsable\u003cUri\u003e.Parse(string s, IFormatProvider? provider) =\u003e\r\n        new Uri(s, RelativeOrAbsolute, NoImplicitFilePaths);\r\n}\r\n```",
                                           "updatedAt":  "2024-03-22T02:54:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5pAerp",
                                           "createdAt":  "2023-10-13T15:47:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KonH",
                                           "body":  "@javiercn @bartonjs \r\nI made first draft of proposed changed, please review - https://github.com/dotnet/runtime/pull/93479.\r\nI\u0027m not sure how to properly handle nullability in TryParse method, so decided to just create new instance (it looks little bit better than ! usage). \r\nAnd as I see NoImplicitFilePaths is not able to be implemented right now.",
                                           "updatedAt":  "2023-10-13T15:47:34Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "[API Proposal]: Consider support for IParsable\u003cUri\u003e on System.Uri",
        "labels":  [
                       "api-approved",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/94195",
        "createdAt":  "2023-10-31T01:35:34Z",
        "number":  94195,
        "author":  "mconnew",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-02-01T00:03:45Z",
        "body":  "### Description\n\nCoreWCF uses `Dns.GetHostEntry(string.Empty).HostName` to discover the hostname of the local machine to build a Uri. One of the ultimate purposes of this is to use a Uri in WSDL documents which is valid outside of the current host. The `Dns.GetHostEntry` method returns an `IPHostEntry` for the local host if passed the emptry string ([see Remarks of documentation](https://learn.microsoft.com/en-us/dotnet/api/system.net.dns.gethostentry?view=net-7.0#system-net-dns-gethostentry(system-string))).  \r\n\r\nPer the documentation definition for `IPHostEntry.HostName` property, it \"Gets or sets the DNS name of the host.\" There is a CoreWCF user that is trying to use CoreWCF on a host which has a NETBIOS name which starts with a leading \"-\", e.g. \"-WIN-1234\". Although this is a valid NETBIOS name, it\u0027s not a valid DNS name. CoreWCF uses the value from `IPHostEntry.HostName` with UriBuilder. When creating the resultant Uri, we get a `UriFormatException` as the hostname we provided is not valid. The constructor of `UriBuilder` which takes a hostname specifies it accepts \"A DNS-style domain name or IP address.\", so the result of `GetHostEntry(string.Empty).HostName` should be valid to use.  \n\n### Reproduction Steps\n\nOn a Windows PC which has a computer name that starts with a hyphen, run the following code:\r\n```c#\r\nvar hostname = Dns.GetHostEntry(string.Emtpy).HostName;\r\nUriBuilder uriBuilder = new UriBuilder(\"net.tcp\", DnsCache.MachineName);\r\nvar uri = uriBuilder.Uri;\r\n```\r\n\n\n### Expected behavior\n\nIt\u0027s unclear what the correct behavior should be. Does Windows generate a valid DNS hostname which should be returned instead? If so, the fix might be to have Dns.GetHostEntry use that other mechanism to get the local hostname. How does Windows handle resolving hostnames when needing to use a FQDN (e.g. cross forest communication so NETBIOS names won\u0027t work)? How does Powershell handle things like remote execution which uses HTTP under the hood when non-DNS netbios names are used by the remote machine?  \r\n\r\nI believe you can use NETBIOS names in url\u0027s in at least some web browsers for accessing intranet websites. Maybe Uri needs to relax the hostname requirements for http/https otherwise you have difficulty making LAN requests using HttpClient for NETBIOS but not DNS valid hostnames.  \r\n\r\nThe \"file\" scheme accepts netbios names, should Uri accept netbios names for net.tcp too? Net.tcp is primarily targeted at LAN scenarios and is a poor fit for internet communication so lack of internet DNS name resolution isn\u0027t a blocker for using net.tcp.  \r\n\r\n\n\n### Actual behavior\n\nThe not-DNS-valid NETBIOS name is returned in the DNS HostName property. Subsequent use with Uri causes a UriFormatException to be thrown.\n\n### Regression?\n\nI don\u0027t believe so.\n\n### Known Workarounds\n\nNone\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcmuNlA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5qeLsA",
                                           "createdAt":  "2023-10-31T01:35:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nCoreWCF uses `Dns.GetHostEntry(string.Empty).HostName` to discover the hostname of the local machine to build a Uri. One of the ultimate purposes of this is to use a Uri in WSDL documents which is valid outside of the current host. The `Dns.GetHostEntry` method returns an `IPHostEntry` for the local host if passed the emptry string ([see Remarks of documentation](https://learn.microsoft.com/en-us/dotnet/api/system.net.dns.gethostentry?view=net-7.0#system-net-dns-gethostentry(system-string))).  \r\n\r\nPer the documentation definition for `IPHostEntry.HostName` property, it \"Gets or sets the DNS name of the host.\" There is a CoreWCF user that is trying to use CoreWCF on a host which has a NETBIOS name which starts with a leading \"-\", e.g. \"-WIN-1234\". Although this is a valid NETBIOS name, it\u0027s not a valid DNS name. CoreWCF uses the value from `IPHostEntry.HostName` with UriBuilder. When creating the resultant Uri, we get a `UriFormatException` as the hostname we provided is not valid. The constructor of `UriBuilder` which takes a hostname specifies it accepts \"A DNS-style domain name or IP address.\", so the result of `GetHostEntry(string.Empty).HostName` should be valid to use.  \n\n### Reproduction Steps\n\nOn a Windows PC which has a computer name that starts with a hyphen, run the following code:\r\n```c#\r\nvar hostname = Dns.GetHostEntry(string.Emtpy).HostName;\r\nUriBuilder uriBuilder = new UriBuilder(\"net.tcp\", DnsCache.MachineName);\r\nvar uri = uriBuilder.Uri;\r\n```\r\n\n\n### Expected behavior\n\nIt\u0027s unclear what the correct behavior should be. Does Windows generate a valid DNS hostname which should be returned instead? If so, the fix might be to have Dns.GetHostEntry use that other mechanism to get the local hostname. How does Windows handle resolving hostnames when needing to use a FQDN (e.g. cross forest communication so NETBIOS names won\u0027t work)? How does Powershell handle things like remote execution which uses HTTP under the hood when non-DNS netbios names are used by the remote machine?  \r\n\r\nI believe you can use NETBIOS names in url\u0027s in at least some web browsers for accessing intranet websites. Maybe Uri needs to relax the hostname requirements for http/https otherwise you have difficulty making LAN requests using HttpClient for NETBIOS but not DNS valid hostnames.  \r\n\r\nThe \"file\" scheme accepts netbios names, should Uri accept netbios names for net.tcp too? Net.tcp is primarily targeted at LAN scenarios and is a poor fit for internet communication so lack of internet DNS name resolution isn\u0027t a blocker for using net.tcp.  \r\n\r\n\n\n### Actual behavior\n\nThe not-DNS-valid NETBIOS name is returned in the DNS HostName property. Subsequent use with Uri causes a UriFormatException to be thrown.\n\n### Regression?\n\nI don\u0027t believe so.\n\n### Known Workarounds\n\nNone\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emconnew\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-10-31T01:35:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qpZCD",
                                           "createdAt":  "2023-11-01T16:09:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "antonfirsov",
                                           "body":  "`System.Net.Dns` is in fact a multi-protocol name-resolver implemented as a wrapper over `getaddrinfo` and friends. IMO the type name \u0026 our docs are misleading in this aspect. It passes back whatever is returned by `getaddrinfo` with the `AI_CANONNAME` hint set, we don\u0027t have any control beyond that. Maybe #19443 would open some opportunities if we choose to implement it.\r\n\r\n\u003e [...] a host which has a NETBIOS name which starts with a leading \"-\", e.g. \"-WIN-1234\" [...]\r\n\r\n\u003e Maybe Uri needs to relax the hostname requirements for http/https otherwise you have difficulty making LAN requests using HttpClient for NETBIOS but not DNS valid hostnames.\r\n\r\n@MihaZupan do you think this is possible?",
                                           "updatedAt":  "2023-11-01T16:16:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qrYPh",
                                           "createdAt":  "2023-11-01T22:06:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "\u003e Maybe Uri needs to relax the hostname requirements for http/https otherwise you have difficulty making LAN requests using HttpClient for NETBIOS but not DNS valid hostnames.\r\n\r\nYes, we likely could relax that logic.\r\nSimilar to #77464, #64707.\r\n\r\n@mconnew how important is this scenario for WCF?",
                                           "updatedAt":  "2023-11-01T22:06:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qrokg",
                                           "createdAt":  "2023-11-01T23:21:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODLm-mQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MihaZupan",
                                                                               "createdAt":  "2023-11-02T00:14:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mconnew",
                                           "body":  "It\u0027s not WCF, it\u0027s CoreWCF. I\u0027m not sure what the outcome is if this is fixed. At startup we use `Dns.GetHostEntry` to find the local machine name to place into metadata documents which might be served up. Without having this, we would need to make a change to fallback to \"localhost\" instead which will make the metadata (currently only WSDL, but will be via a mex endpoint in future serving a SOAP response) have the incorrect hostname.  \r\n\r\nThe flip side of this is if the WSDL now has the hostname available from DNS.GetHostEntry, on the client side we would generate code which uses that Uri when constructing a ChannelFactory. Every code path I can find uses Uri on the client side, at which point it would fail. As this wouldn\u0027t be fixed on .NET Framework, it would mean NetFx clients would fail while .NET clients would succeed.  \r\n\r\nOn .NET Framework with a WCF service, we use a different code path where we don\u0027t need to use DNS.GetHostEntry. If it\u0027s self hosted, then the customer code is providing the hostname into a Uri themselves, so would hit the same issue if they used the real hostname. If it\u0027s IIS hosted, then we\u0027re getting the hostname from IIS. The customer says it works in WCF, so the only way I can see that working is if they are somehow using localhost (they aren\u0027t providing the hostname to WCF so coming from somewhere else?), aren\u0027t using WSDL and the client side is specifying a different hostname, maybe the IP address.  \r\n\r\nI\u0027m going to ask the original reporter of the issue a few clarifying questions to determine the working WCF scenario details better as it looks to me like you need the fix at both sides, but they say it worked with WCF. Once I have more info, I\u0027ll be able to judge how important this is.",
                                           "updatedAt":  "2023-11-01T23:21:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wAaN-",
                                           "createdAt":  "2024-01-05T19:22:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "antonfirsov",
                                           "body":  "\u003e I\u0027m going to ask the original reporter of the issue a few clarifying questions to determine the working WCF scenario details better as it looks to me like you need the fix at both sides, but they say it worked with WCF. Once I have more info, I\u0027ll be able to judge how important this is.\r\n\r\n@mconnew did you get a reply? Is this issue still a priority for you?",
                                           "updatedAt":  "2024-01-05T19:23:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wAaV2",
                                           "createdAt":  "2024-01-05T19:23:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been marked `needs-author-action` and may be missing some important information.",
                                           "updatedAt":  "2024-01-05T19:23:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xiRvA",
                                           "createdAt":  "2024-01-22T21:02:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been automatically marked `no-recent-activity` because it has not had any activity for 14 days. It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will remove `no-recent-activity`.",
                                           "updatedAt":  "2024-01-22T21:02:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yXYSS",
                                           "createdAt":  "2024-01-31T09:37:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alex-lapuka",
                                           "body":  "That was initially my ticket opened at CoreWCF. In general, I\u0027ve noticed the unexpected behavior of CoreWCF when the endpoint is running locally, but instead of the loopback address it ties to resolve the host name and use it. Sorry for the long delay, I didn\u0027t keep track for the notifications. I\u0027m posting here just to keep the ticket open.",
                                           "updatedAt":  "2024-01-31T09:53:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ya42U",
                                           "createdAt":  "2024-01-31T18:13:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mconnew",
                                           "body":  "@antonfirsov, now I understand the customer issue I believe we can find them a solution without the hostname lookup.",
                                           "updatedAt":  "2024-01-31T18:13:23Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Dns.GetHostEntry returns hostnames which aren\u0027t valid DNS hostnames",
        "labels":  [
                       "area-System.Net",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/94572",
        "createdAt":  "2023-11-09T16:28:49Z",
        "number":  94572,
        "author":  "chris-white-wtw",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-11-28T11:30:59Z",
        "body":  "### Description\n\nWhen an instance of `Uri` is constructed from a string such as `\"xyz:C:/£\"`, the `ToString` method produces a string in which the path component incorrectly appears twice: `\"xyz:C:/£C:/£\"`\r\n\r\nOther properties appear correct though.\r\n\n\n### Reproduction Steps\n\nCreate a console app with the following code:\r\n\r\n```C#\r\nusing System;\r\n\r\nvar u = new Uri(\"xyz:C:/£\");\r\nConsole.WriteLine(u.ToString());\r\n```\r\n\n\n### Expected behavior\n\nI\u0027d expect `ToString` to produce something that `Uri`\u0027s constructor can re-parse to an equivalent Uri instance.\r\n\n\n### Actual behavior\n\n`ToString`\u0027s result includes the path component of the URI twice. If the original string passed to `Uri` had escape sequences in then these are unescaped in the second copy of the path but not the first.\n\n### Regression?\n\nBehaviour was different in .NET Core 3.1 and in .NET Framework 4.7.2, but also not correct: the result of `ToString` prepends `//` to the path (e.g. `xyz://C:/£`) in these versions of the runtime.\r\n\n\n### Known Workarounds\n\nUsing the `.AbsoluteUri` property may be an option, though this is escaped differently in general.\r\n\n\n### Configuration\n\n.NET 6.0.24 / 7.0.5 / 8.0.0-preview.4.23259.5\r\nWindows 10 (19045.3570)\r\nx64\r\n\n\n### Other information\n\nThe bug only seems to occur if all the following are true:\r\n* A custom URI scheme\r\n* A path that starts `X:/` (where X is any letter) - this is quite specific, in that e.g. `X:\\` and `X|/` do _not_ exhibit the bug\r\n* The path contains a character that has a multibyte UTF8 representation (whether %-encoded or not)\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHObQ4YPg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5rjW9m",
                                           "createdAt":  "2023-11-09T19:06:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nWhen an instance of `Uri` is constructed from a string such as `\"xyz:C:/£\"`, the `ToString` method produces a string in which the path component incorrectly appears twice: `\"xyz:C:/£C:/£\"`\r\n\r\nOther properties appear correct though.\r\n\n\n### Reproduction Steps\n\nCreate a console app with the following code:\r\n\r\n```C#\r\nusing System;\r\n\r\nvar u = new Uri(\"xyz:C:/£\");\r\nConsole.WriteLine(u.ToString());\r\n```\r\n\n\n### Expected behavior\n\nI\u0027d expect `ToString` to produce something that `Uri`\u0027s constructor can re-parse to an equivalent Uri instance.\r\n\n\n### Actual behavior\n\n`ToString`\u0027s result includes the path component of the URI twice. If the original string passed to `Uri` had escape sequences in then these are unescaped in the second copy of the path but not the first.\n\n### Regression?\n\nBehaviour was different in .NET Core 3.1 and in .NET Framework 4.7.2, but also not correct: the result of `ToString` prepends `//` to the path (e.g. `xyz://C:/£`) in these versions of the runtime.\r\n\n\n### Known Workarounds\n\nUsing the `.AbsoluteUri` property may be an option, though this is escaped differently in general.\r\n\n\n### Configuration\n\n.NET 6.0.24 / 7.0.5 / 8.0.0-preview.4.23259.5\r\nWindows 10 (19045.3570)\r\nx64\r\n\n\n### Other information\n\nThe bug only seems to occur if all the following are true:\r\n* A custom URI scheme\r\n* A path that starts `X:/` (where X is any letter) - this is quite specific, in that e.g. `X:\\` and `X|/` do _not_ exhibit the bug\r\n* The path contains a character that has a multibyte UTF8 representation (whether %-encoded or not)\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003echris-white-wtw\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-11-09T19:06:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tDeKf",
                                           "createdAt":  "2023-11-28T11:22:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "Thank you for the report, the duplication here is indeed a bug.\r\n\r\nSounds similar to #1061 and #56482\r\n\r\n```c#\r\nConsole.WriteLine(new Uri(\"xyz:C:/abc\").ToString());\r\nConsole.WriteLine(new Uri(\"xyz:C:/£abc\").ToString());\r\n```\r\n```\r\nFramework, Core 3.1\r\nxyz:C:/abc\r\nxyz://C:/£abc\r\n\r\n.NET 5, 6, 7, 8\r\nxyz:C:/abc\r\nxyz:C:/£abcC:/£abc\r\n```\r\n\r\nWe seem to have fixed the `//` prefix part in .NET 5 but also introduced the duplication. Likely related to #36429.",
                                           "updatedAt":  "2023-11-28T11:22:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tDhg-",
                                           "createdAt":  "2023-11-28T11:30:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODNyyiQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "chris-white-wtw",
                                                                               "createdAt":  "2023-11-28T11:41:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "Triage: It would be good to understand what is happening here and fix it, but\r\n- This appears to be a rare edge case: custom scheme, file-path-like input, non-ascii, seems to affect only `ToString`\r\n- The output for this case was already wrong (different compared to ascii inputs) before net5.0\r\n\r\nMoving to Future, but anyone is welcome to look into the root cause / potential fixes here.",
                                           "updatedAt":  "2023-11-28T11:30:48Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "System.Uri.ToString result is incorrect when combining custom scheme with DOS-style path containing multibyte Unicode character",
        "labels":  [
                       "bug",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/96143",
        "createdAt":  "2023-12-18T18:08:37Z",
        "number":  96143,
        "author":  "lnbot",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-18T13:47:47Z",
        "body":  "### Description\n\nI work on an iOS app (currently Xamarin iOS/.NET 4.8) that uses unix domain sockets.  Trying to port to .NET 8, I noticed that the constructor of UnixDomainSocketEndPoint now throws a PlatformNotSupportedException.\n\n### Reproduction Steps\n\n```\r\n            var socket = new Socket(AddressFamily.Unix, SocketType.Stream, ProtocolType.Unspecified);\r\n            fullPath = Path.Join(\r\n                Environment.GetFolderPath(Environment.SpecialFolder.Personal),\r\n                \"my.sock\");\r\n\r\n            if (File.Exists(fullPath))\r\n                File.Delete(fullPath);\r\n\r\n            var endpoint = new UnixDomainSocketEndPoint(fullPath);  // throws PlatformNotSupportedException on .NET 8\r\n            socket.Bind(endpoint);\r\n            socket.Listen(10);\r\n`````\n\n### Expected behavior\n\nExpected to get an instance of UnixDomainSocketEndPoint (as with the older framework)\n\n### Actual behavior\n\nThrown PlatformNotSupportedException \n\n### Regression?\n\nWorks on .NET 4.8/Xamarin.iOS\n\n### Known Workarounds\n\nPull a copy of the UnixDomainSocketEndPoint code into the project, then comment out the platform check (along with some other minor changes to make it compile)\r\nVerified that this works within my iOS app.\n\n### Configuration\n\nnet8.0-ios\n\n### Other information\n\n`SocketProtocolSupportPal.Unix.cs` contains a comment about AF_UNIX sockets not working on iOS, then explicitly denies support:\r\n```\r\n    internal static partial class SocketProtocolSupportPal\r\n    {\r\n        private const int DgramSocketType = 2;\r\n\r\n        private static unsafe bool IsSupported(AddressFamily af)\r\n        {\r\n            // Check for AF_UNIX on iOS/tvOS. The OS claims to support this, but returns EPERM on bind.\r\n            // We should explicitly set the return here to false, to avoid giving a false impression.\r\n            if (af == AddressFamily.Unix \u0026\u0026 (OperatingSystem.IsTvOS() || (OperatingSystem.IsIOS() \u0026\u0026 !OperatingSystem.IsMacCatalyst())))\r\n            {\r\n                return false;\r\n            }\r\n```\r\n\r\nThat claim is not consistent with my experience.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHObwK7kA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5u8A1C",
                                           "createdAt":  "2023-12-18T18:08:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nI work on an iOS app (currently Xamarin iOS/.NET 4.8) that uses unix domain sockets.  Trying to port to .NET 8, I noticed that the constructor of UnixDomainSocketEndPoint now throws a PlatformNotSupportedException.\n\n### Reproduction Steps\n\n```\r\n            var socket = new Socket(AddressFamily.Unix, SocketType.Stream, ProtocolType.Unspecified);\r\n            fullPath = Path.Join(\r\n                Environment.GetFolderPath(Environment.SpecialFolder.Personal),\r\n                \"my.sock\");\r\n\r\n            if (File.Exists(fullPath))\r\n                File.Delete(fullPath);\r\n\r\n            var endpoint = new UnixDomainSocketEndPoint(fullPath);  // throws PlatformNotSupportedException on .NET 8\r\n            socket.Bind(endpoint);\r\n            socket.Listen(10);\r\n`````\n\n### Expected behavior\n\nExpected to get an instance of UnixDomainSocketEndPoint (as with the older framework)\n\n### Actual behavior\n\nThrown PlatformNotSupportedException \n\n### Regression?\n\nWorks on .NET 4.8/Xamarin.iOS\n\n### Known Workarounds\n\nPull a copy of the UnixDomainSocketEndPoint code into the project, then comment out the platform check (along with some other minor changes to make it compile)\r\nVerified that this works within my iOS app.\n\n### Configuration\n\nnet8.0-ios\n\n### Other information\n\n`SocketProtocolSupportPal.Unix.cs` contains a comment about AF_UNIX sockets not working on iOS, then explicitly denies support:\r\n```\r\n    internal static partial class SocketProtocolSupportPal\r\n    {\r\n        private const int DgramSocketType = 2;\r\n\r\n        private static unsafe bool IsSupported(AddressFamily af)\r\n        {\r\n            // Check for AF_UNIX on iOS/tvOS. The OS claims to support this, but returns EPERM on bind.\r\n            // We should explicitly set the return here to false, to avoid giving a false impression.\r\n            if (af == AddressFamily.Unix \u0026\u0026 (OperatingSystem.IsTvOS() || (OperatingSystem.IsIOS() \u0026\u0026 !OperatingSystem.IsMacCatalyst())))\r\n            {\r\n                return false;\r\n            }\r\n```\r\n\r\nThat claim is not consistent with my experience.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003elnbot\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-12-18T18:08:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5u8DZ6",
                                           "createdAt":  "2023-12-18T18:13:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027os-ios\u0027: @steveisok, @akoeplinger, @kotlarmilos\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nI work on an iOS app (currently Xamarin iOS/.NET 4.8) that uses unix domain sockets.  Trying to port to .NET 8, I noticed that the constructor of UnixDomainSocketEndPoint now throws a PlatformNotSupportedException.\n\n### Reproduction Steps\n\n```\r\n            var socket = new Socket(AddressFamily.Unix, SocketType.Stream, ProtocolType.Unspecified);\r\n            fullPath = Path.Join(\r\n                Environment.GetFolderPath(Environment.SpecialFolder.Personal),\r\n                \"my.sock\");\r\n\r\n            if (File.Exists(fullPath))\r\n                File.Delete(fullPath);\r\n\r\n            var endpoint = new UnixDomainSocketEndPoint(fullPath);  // throws PlatformNotSupportedException on .NET 8\r\n            socket.Bind(endpoint);\r\n            socket.Listen(10);\r\n`````\n\n### Expected behavior\n\nExpected to get an instance of UnixDomainSocketEndPoint (as with the older framework)\n\n### Actual behavior\n\nThrown PlatformNotSupportedException \n\n### Regression?\n\nWorks on .NET 4.8/Xamarin.iOS\n\n### Known Workarounds\n\nPull a copy of the UnixDomainSocketEndPoint code into the project, then comment out the platform check (along with some other minor changes to make it compile)\r\nVerified that this works within my iOS app.\n\n### Configuration\n\nnet8.0-ios\n\n### Other information\n\n`SocketProtocolSupportPal.Unix.cs` contains a comment about AF_UNIX sockets not working on iOS, then explicitly denies support:\r\n```\r\n    internal static partial class SocketProtocolSupportPal\r\n    {\r\n        private const int DgramSocketType = 2;\r\n\r\n        private static unsafe bool IsSupported(AddressFamily af)\r\n        {\r\n            // Check for AF_UNIX on iOS/tvOS. The OS claims to support this, but returns EPERM on bind.\r\n            // We should explicitly set the return here to false, to avoid giving a false impression.\r\n            if (af == AddressFamily.Unix \u0026\u0026 (OperatingSystem.IsTvOS() || (OperatingSystem.IsIOS() \u0026\u0026 !OperatingSystem.IsMacCatalyst())))\r\n            {\r\n                return false;\r\n            }\r\n```\r\n\r\nThat claim is not consistent with my experience.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003elnbot\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`, `untriaged`, `os-ios`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-12-18T18:13:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5u8QV6",
                                           "createdAt":  "2023-12-18T18:35:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "@directhex https://github.com/dotnet/runtime/pull/73374 marked this as PNSE. Can you confirm this is still true?\r\n\r\n@lnbot were you using simulator or device to test this?",
                                           "updatedAt":  "2023-12-18T18:35:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5u8YCP",
                                           "createdAt":  "2023-12-18T18:48:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lnbot",
                                           "body":  "I\u0027m running this on device.\r\nOur usage of unix domain sockets in this app also has been live in the app store for several years.",
                                           "updatedAt":  "2023-12-18T18:48:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5u8eRP",
                                           "createdAt":  "2023-12-18T18:58:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lnbot",
                                           "body":  "Your referenced issue mentions that binding the socket failed in `NSTemporaryDirectory()`.\r\nHowever, our use case is putting the socket in an App Group shared container.\r\nMaybe this accounts for the different experiences?",
                                           "updatedAt":  "2023-12-18T18:58:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vAruQ",
                                           "createdAt":  "2023-12-19T09:55:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODcKKOA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "artob",
                                                                               "createdAt":  "2024-03-27T21:09:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "Looks like this is indeed allowed in App Groups according to https://developer.apple.com/documentation/bundleresources/entitlements/com_apple_security_application-groups\r\n\r\n\u003e Apps within a group can communicate with other members in the group using IPC mechanisms including Mach IPC, POSIX semaphores and shared memory, and **UNIX domain sockets**. \r\n\r\nWe should remove our PNSE.",
                                           "updatedAt":  "2023-12-19T09:55:48Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "UnixDomainSocketEndPoint no longer constructable on iOS (.NET 8)",
        "labels":  [
                       "area-System.Net",
                       "good first issue",
                       "os-ios"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/97939",
        "createdAt":  "2024-02-04T09:33:39Z",
        "number":  97939,
        "author":  "WGroenestein",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-04-09T15:01:16Z",
        "body":  "### Description\n\nWhen using the IPv6 format for the host and it contains a % with other stuff at the end of the IPv6 block\r\n1) it is seen a valid (from what I understand it should not be considered a valid IPv6 format), the HostNameType is set to IPv6\r\n2) several properties / method results of the Uri class will not include these characters (e.g. Host and AbsoluteUri), while others do (e.g. IdnHost)\n\n### Reproduction Steps\n\n```cs\r\nif (Uri.TryCreate(\"http://[::1%zyx]:8080/\", UriKind.Absolute, out Uri uri))\r\n{\r\n\tConsole.WriteLine(uri.Authority);\r\n\tConsole.WriteLine(uri.Host);\r\n\tConsole.WriteLine(uri.IdnHost);\r\n\tConsole.WriteLine(uri.GetLeftPart(UriPartial.Authority));\r\n\tConsole.WriteLine(uri.AbsoluteUri);\r\n\tConsole.WriteLine(uri.HostNameType);\r\n}\r\nelse\r\n{\r\n\tConsole.WriteLine(\"Invalid\");\r\n}\r\n``` \r\n\r\n```log\r\n[::1]:8080\r\n[::1]\r\n::1%zyx\r\nhttp://[::1]:8080\r\nhttp://[::1]:8080/\r\nIPv6\r\n```\n\n### Expected behavior\n\nI would expect the provided input to be seen as invalid (similar as is done with the \"IPv4\" version http://127.0.0.1%zyx:8080/). \r\n\r\nIf it is considered a valid format, I would expect the uri properties / method results to be consistent and not omit part of the user input \n\n### Actual behavior\n\nSee the description  / repro steps\n\n### Regression?\n\nI only checked the behavior on .NET 6/7/8 and they all seems to show the same behavior\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n8.0.100\r\nWindows 11 23H2 22631.3007\r\nx64\r\nI didn\u0027t check any other configurations\r\n\r\n\n\n### Other information\n\nI have a feeling it might be related to #45194. If this is the case however since in the URI format IPv6 is encapsulated in the [] I would expect the validation of URI to be stricter",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOdDk8_w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5yxzd4",
                                           "createdAt":  "2024-02-04T09:33:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nWhen using the IPv6 format for the host and it contains a % with other stuff at the end of the IPv6 block\r\n1) it is seen a valid (from what I understand it should not be considered a valid IPv6 format), the HostNameType is set to IPv6\r\n2) several properties / method results of the Uri class will not include these characters (e.g. Host and AbsoluteUri), while others do (e.g. IdnHost)\n\n### Reproduction Steps\n\n```cs\r\nif (Uri.TryCreate(\"http://[::1%zyx]:8080/\", UriKind.Absolute, out Uri uri))\r\n{\r\n\tConsole.WriteLine(uri.Authority);\r\n\tConsole.WriteLine(uri.Host);\r\n\tConsole.WriteLine(uri.IdnHost);\r\n\tConsole.WriteLine(uri.GetLeftPart(UriPartial.Authority));\r\n\tConsole.WriteLine(uri.AbsoluteUri);\r\n\tConsole.WriteLine(uri.HostNameType);\r\n}\r\nelse\r\n{\r\n\tConsole.WriteLine(\"Invalid\");\r\n}\r\n``` \r\n\r\n```log\r\n[::1]:8080\r\n[::1]\r\n::1%zyx\r\nhttp://[::1]:8080\r\nhttp://[::1]:8080/\r\nIPv6\r\n```\n\n### Expected behavior\n\nI would expect the provided input to be seen as invalid (similar as is done with the \"IPv4\" version http://127.0.0.1%zyx:8080/). \r\n\r\nIf it is considered a valid format, I would expect the uri properties / method results to be consistent and not omit part of the user input \n\n### Actual behavior\n\nSee the description  / repro steps\n\n### Regression?\n\nI only checked the behavior on .NET 6/7/8 and they all seems to show the same behavior\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n8.0.100\r\nWindows 11 23H2 22631.3007\r\nx64\r\nI didn\u0027t check any other configurations\r\n\r\n\n\n### Other information\n\nI have a feeling it might be related to #45194. If this is the case however since in the URI format IPv6 is encapsulated in the [] I would expect the validation of URI to be stricter\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eWGroenestein\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-02-04T09:33:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5y4VU7",
                                           "createdAt":  "2024-02-05T16:21:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "For IPv6 the `%` is marker of link local address. IPv4 does no have such concept. I think the inconsistency is there for historical reasons. While the `ScopeId` is needed for `Socket` operation it can break other places. Changing the behavior is going to be risky IMHO.   Some of this is captured in #25782.",
                                           "updatedAt":  "2024-02-05T16:21:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zRrKY",
                                           "createdAt":  "2024-02-08T12:27:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "WGroenestein",
                                           "body":  "Ah, I was not aware this was a separate RFC, so that explain a lot. However it is certainly unexpected that input is whiped away for some properties and not others. From a breaking change perspective, maybe it would be worth it to extend UriCreationOptions with a or several options to reject such values so you can opt-in to having a more predictable behavior/outcome. (maybe it could even be made in such a way you can specify to only allow a domain, or IPv4 or IPv6 (with or without ScopeId) etc)",
                                           "updatedAt":  "2024-02-08T12:27:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50Kmra",
                                           "createdAt":  "2024-02-16T17:19:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "Is this causing you actual problems, or was it just an inconsistency you noticed?\r\n\r\nWhile we don\u0027t like the inconsistency, changing behavior here would break people.\r\n\r\n\u003e maybe it would be worth it to extend UriCreationOptions with a or several options to reject such values\r\n\r\nWhat would the use case be here?\r\nIf you want to reject link local addresses, you could do so after parsing the Uri.\r\nE.g. `uri.HostNameType == UriHostNameType.IPv6 \u0026\u0026 uri.IdnHost.Contains(\u0027%\u0027)`",
                                           "updatedAt":  "2024-02-16T17:19:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50Kolc",
                                           "createdAt":  "2024-02-16T17:24:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been marked `needs-author-action` and may be missing some important information.",
                                           "updatedAt":  "2024-02-16T17:24:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50OTz_",
                                           "createdAt":  "2024-02-17T09:03:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "WGroenestein",
                                           "body":  "\u003e Is this causing you actual problems, or was it just an inconsistency you noticed?\r\nIt is not causing me any problems. as you mention I can create my own helpers to address this, it was just very surprising behavior to me, and I think it might be to others as well. And Uri is used all over the web stack so it propagates.\r\n\r\n\u003e While we don\u0027t like the inconsistency, changing behavior here would break people.\r\n\r\nThe reason I proposed the addition(s) to the UriCreationOptions is because I was under the impression that the UriCreationOptions overload was created to make it possible to extend the options in an opt-in manner not introducing breaking changes to the behavior.\r\n\r\nThe reason I encountered it is because I was looking into the [OWASP SSRF prevention Case 2](https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html#case-2-application-can-send-requests-to-any-external-ip-address-or-domain-name)  and it mentions DNS pinning (or rebinding) and though about implement such a strategy through the SocketsHttpHandler::ConnectCallback callback. In that callback an DnsEndPoint is provided and I was putting the code through some fuzzing tests which caught this scenario. \r\n\r\nLater I found out that the DnsEndpoint is created in several steps Uri.IdnHost =\u003e HttpConnectionKey  =\u003e HttpAuthority  =\u003e DnsEndpoint, and the DnsEndpoint provided does not have the AddressFamily set, though HttpAuthority handles IPv6 specially and wraps it. Uri.IdnHost has this [remark about unescaping](https://learn.microsoft.com/en-us/dotnet/api/system.uri.idnhost?view=net-8.0#remarks) however DnsEndpoint does not have such a remark, it is not very easy to figure out in my opinion. \r\n\r\n",
                                           "updatedAt":  "2024-02-17T09:03:34Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Uri.TryCreate (and ctor) behave weird when using the IPv6 format",
        "labels":  [
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/98185",
        "createdAt":  "2024-02-08T21:04:19Z",
        "number":  98185,
        "author":  "nathanhinish",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-19T13:22:41Z",
        "body":  "### Description\n\nThere is a discrepancy between the handling of \"invalid\" arguments based on the OS you are using. Windows throws a UriFormatException, but Linux and macOS do not. Also, in macOS and Linux, calling URIBuilder.Uri causes the output of URIBuilder.ToString() to change.\n\n### Reproduction Steps\n\n1. Create new console app `dotnet new console`\r\n2. In Program.cs, replace the default content with the following:\r\n```\r\nUriBuilder uriBuilder = new UriBuilder(\"\", \"\", 0, \"\");\r\nConsole.WriteLine(uriBuilder.ToString());\r\nUri uri = uriBuilder.Uri;\r\nConsole.WriteLine(uriBuilder.ToString());\r\n```\n\n### Expected behavior\n\n1. Should throw exception\r\n2. Result of ToString() should not change\n\n### Actual behavior\n\n1. No exception\r\n2. First ToString() returns \"/\", but second returns \"file:///\"\n\n### Regression?\n\nUnknown\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nTarget framework: .net 8\r\nOS: MacOS, Linux\r\nArch: x86\r\n\n\n### Other information\n\nExample repo: https://github.com/nathanhinish/dotnet-uribuilder-bugs",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvsefdA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5zVLKm",
                                           "createdAt":  "2024-02-08T21:04:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nThere is a discrepancy between the handling of \"invalid\" arguments based on the OS you are using. Windows throws a UriFormatException, but Linux and macOS do not. Also, in macOS and Linux, calling URIBuilder.Uri causes the output of URIBuilder.ToString() to change.\n\n### Reproduction Steps\n\n1. Create new console app `dotnet new console`\r\n2. In Program.cs, replace the default content with the following:\r\n```\r\nUriBuilder uriBuilder = new UriBuilder(\"\", \"\", 0, \"\");\r\nConsole.WriteLine(uriBuilder.ToString());\r\nUri uri = uriBuilder.Uri;\r\nConsole.WriteLine(uriBuilder.ToString());\r\n```\n\n### Expected behavior\n\n1. Should throw exception\r\n2. Result of ToString() should not change\n\n### Actual behavior\n\n1. No exception\r\n2. First ToString() returns \"/\", but second returns \"file:///\"\n\n### Regression?\n\nUnknown\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nTarget framework: .net 8\r\nOS: MacOS, Linux\r\nArch: x86\r\n\n\n### Other information\n\nExample repo: https://github.com/nathanhinish/dotnet-uribuilder-bugs\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003enathanhinish\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-02-08T21:04:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-x590",
                                           "createdAt":  "2025-08-19T13:22:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "Sorry about the late reply, this issue dropped off my radar.\n\nYou\u0027re looking at two sets of issues here:\n1. Uri unfortunately attempts to recognize implicit file paths by default (paths that don\u0027t start with `file://`). `/` is a valid absolute path on Unix, and `Uri` will treat it as an absolute `file://` url.\n   - #108221, #80118, #76816\n2. `UriBuilder` is a glorified `string.Concat`. Its values are only parsed and validated when you \"build\" it by accessing `UriBuilder.Uri`.",
                                           "updatedAt":  "2025-08-19T13:22:41Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "URIBuilder has different result based on OS",
        "labels":  [
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/98527",
        "createdAt":  "2024-02-15T21:50:04Z",
        "number":  98527,
        "author":  "maxfridbe",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-17T15:31:54Z",
        "body":  "https://github.com/dotnet/runtime/blob/8cb1f79fd66850e233a4b756aa0b5407e64f1105/src/libraries/System.Net.WebSockets.Client/src/System/Net/WebSockets/ClientWebSocketOptions.cs#L214C36-L214C37",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOdJ8pmA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc50EunK",
                                           "createdAt":  "2024-02-15T21:50:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nhttps://github.com/dotnet/runtime/blob/8cb1f79fd66850e233a4b756aa0b5407e64f1105/src/libraries/System.Net.WebSockets.Client/src/System/Net/WebSockets/ClientWebSocketOptions.cs#L214C36-L214C37\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emaxfridbe\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-02-15T21:50:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50nymY",
                                           "createdAt":  "2024-02-21T12:51:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "zlatanov",
                                           "body":  "@maxfridbe I think this is a remnant from the classic .NET Framework and is unused by the current implementation. I am unsure if it was ever used.\r\n\r\nIf obsoleting it and removing it at some point is not an option, we can add `[EditorBrowsable( false )]` so at least it doesn\u0027t show up in IntelliSense. Also, the documentation can be updated to indicate the unimportance of it.",
                                           "updatedAt":  "2024-02-21T12:51:47Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "So what is sendbuffersize supposed to do? seems like its just thrown away",
        "labels":  [
                       "documentation",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/98668",
        "createdAt":  "2024-02-16T19:09:56Z",
        "number":  98668,
        "author":  "performanceautofiler",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-22T01:39:58Z",
        "body":  "\u003c!-- DATA: {\"RunType\":{\"Repo\":\"dotnetruntime\",\"Branch\":\"refs/heads/main\",\"Arch\":\"ARM64\",\"Os\":\"Ubuntu2204\",\"Queue\":\"AmpereUbuntu\",\"Frequency\":\"Weekly\",\"CoreClr\":true,\"Mono\":false,\"Wasm\":false,\"Maui\":false,\"Configs\":[\"CompilationMode:tiered\",\"RunKind:micro\"]},\"RegressionDate\":\"2024-02-13T20:56:49\",\"IsRegression\":true} --\u003e\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | arm64\nOS | ubuntu 22.04\nQueue | AmpereUbuntu\nBaseline | [ec1a6b9e3b74bd352df5d3856c9088da8f902783](https://github.com/dotnet/runtime/commit/ec1a6b9e3b74bd352df5d3856c9088da8f902783)\nCompare | [49fe3b06cdfce737ea1c8964e01f2dd2a4e77d44](https://github.com/dotnet/runtime/commit/49fe3b06cdfce737ea1c8964e01f2dd2a4e77d44)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/ec1a6b9e3b74bd352df5d3856c9088da8f902783...49fe3b06cdfce737ea1c8964e01f2dd2a4e77d44)\nConfigs | CompilationMode:tiered, RunKind:micro\n\n\n### Regressions in System.Tests.Perf_Uri\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[EscapeDataString - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_ubuntu 22.04/System.Tests.Perf_Uri.EscapeDataString(input%3a%20%22%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Uri.cs#L92-#L94\u003e)\u003c/li\u003e\u003cli\u003e[📈 - ADX Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACu1XXYvTQBR9F/wPw74k0WybtFJoIWK3Vl21Utv6JLJMk9tmJPPBnclus4i/zDf/mDNpqdsuSF6FEAgzJ+fce+eQhzMzoLpE4CCMfvKD3OWAQK5KVmQLUJIkCfEyaQSYLpbCMA7eKesKqUjzmoew0d0caKa7nDJxRhxjmjMDqbHdCBPE93aDF15IPIrcLoIjewXafKIcXM1X3rLSBnjHgbozB9zcfEHWmeqUKnhNDV0aZGLrM6FKMyIXv3+1T+tA60DrQOtA60DrwP/uwEXwN0YsSjGRYsO2JVLDpNBfvYnkihX1biYz8L6R5CfxDLP0zHv6L6WFPjCRHRScpSgfCJgGrkzlPxKOpQka0K6l/ljc8jr4NOG/11OxZQKacF3hJryZFLLhuI56LQygQrDvJpL5Vq4q1WjgeV5pltJijpJLhzQVvqvWyLK3hVzTgt3XWBPZordo2mG6U4A21Io6cZ5m0Im0gRdwJdVhdZpnV1a2NJQr8pJk1IDLxn4v6vUv4/gyHqzi4SgajvqDThT3enE8fB5FoyhyLXTJOUV2D4Ti9obTnV8XdBOE5FlA1tVZh/CYiUP3K38uoQRbR6H8bvP0I/ICdFmYBO3Umf/gJHt8fAtIt7ZSPwhJXcoVTt4gA5EV1RFxZtUbNzLab4DEnTHNKRpyx0xOfG3NA50cNSHZpbIouUjOZ6r2uE72Q1iiYaaAxLMZHuwtoDpsnYT4QgcO06pgJqE70MEfPLkB16cMAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 15.57 μs | 17.81 μs | 1.14 | 0.01 | True | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/02_16_2024/refs/heads/main_arm64_ubuntu%2022.04_Regression/System.Tests.Perf_Uri_1.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/02_16_2024/refs/heads/main_arm64_ubuntu%2022.04_Regression/System.Tests.Perf_Uri.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n```cmd\ngit clone https://github.com/dotnet/performance.git\npython3 .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027System.Tests.Perf_Uri*\u0027\n```\n\n\u003cdetails\u003e\n\n\n### Payloads\n\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-9de44a4b-2c53-4c51-aa55-a8c1e79bf1c05dbf138c1874491a7/978b72ad-1bac-458c-8cb8-a55c44b85a4d.zip?sv=2021-08-06\u0026se=2024-03-14T05%3A11%3A33Z\u0026sr=c\u0026sp=rl\u0026sig=Vl5deX%2FGbuDKYtFs4T3R7AaVpYmMbCyZJNLykQ56zKs%3D\u003e)\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-12f74d6d-3175-491a-afff-b8861f2430adec625b9de22425d80/65c094f0-f47d-4ff9-96e1-5815cb00877b.zip?sv=2021-08-06\u0026se=2024-03-15T06%3A18%3A17Z\u0026sr=c\u0026sp=rl\u0026sig=ZVEY0Ze1U7JDdxFI6pjXn5%2FSTqlGFqi2L7V91AhneO8%3D\u003e)\n### System.Tests.Perf_Uri.EscapeDataString(input: \"üüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüü\")\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOdIJLxQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc50ZvVk",
                                           "createdAt":  "2024-02-19T17:13:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODXXn0g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "MihaZupan",
                                                                               "createdAt":  "2024-02-19T17:23:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "cincuranet",
                                           "body":  "[Diff](https://github.com/dotnet/runtime/compare/954ead3c0a37f8e8685dc11e19377caf975e9c8d...fae6720d5717297446b5f01a605260845420e622). Likely suspect https://github.com/dotnet/runtime/pull/98074. cc @MihaZupan ",
                                           "updatedAt":  "2024-02-19T17:13:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50Zy4O",
                                           "createdAt":  "2024-02-19T17:24:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\u003c!-- DATA: {\"RunType\":{\"Repo\":\"dotnetruntime\",\"Branch\":\"refs/heads/main\",\"Arch\":\"ARM64\",\"Os\":\"Ubuntu2204\",\"Queue\":\"AmpereUbuntu\",\"Frequency\":\"Weekly\",\"CoreClr\":true,\"Mono\":false,\"Wasm\":false,\"Maui\":false,\"Configs\":[\"CompilationMode:tiered\",\"RunKind:micro\"]},\"RegressionDate\":\"2024-02-13T20:56:49\",\"IsRegression\":true} --\u003e\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | arm64\nOS | ubuntu 22.04\nQueue | AmpereUbuntu\nBaseline | [ec1a6b9e3b74bd352df5d3856c9088da8f902783](https://github.com/dotnet/runtime/commit/ec1a6b9e3b74bd352df5d3856c9088da8f902783)\nCompare | [49fe3b06cdfce737ea1c8964e01f2dd2a4e77d44](https://github.com/dotnet/runtime/commit/49fe3b06cdfce737ea1c8964e01f2dd2a4e77d44)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/ec1a6b9e3b74bd352df5d3856c9088da8f902783...49fe3b06cdfce737ea1c8964e01f2dd2a4e77d44)\nConfigs | CompilationMode:tiered, RunKind:micro\n\n\n### Regressions in System.Tests.Perf_Uri\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[EscapeDataString - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_ubuntu 22.04/System.Tests.Perf_Uri.EscapeDataString(input%3a%20%22%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc%c3%bc.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Uri.cs#L92-#L94\u003e)\u003c/li\u003e\u003cli\u003e[📈 - ADX Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACu1XXYvTQBR9F/wPw74k0WybtFJoIWK3Vl21Utv6JLJMk9tmJPPBnclus4i/zDf/mDNpqdsuSF6FEAgzJ+fce+eQhzMzoLpE4CCMfvKD3OWAQK5KVmQLUJIkCfEyaQSYLpbCMA7eKesKqUjzmoew0d0caKa7nDJxRhxjmjMDqbHdCBPE93aDF15IPIrcLoIjewXafKIcXM1X3rLSBnjHgbozB9zcfEHWmeqUKnhNDV0aZGLrM6FKMyIXv3+1T+tA60DrQOtA60DrwP/uwEXwN0YsSjGRYsO2JVLDpNBfvYnkihX1biYz8L6R5CfxDLP0zHv6L6WFPjCRHRScpSgfCJgGrkzlPxKOpQka0K6l/ljc8jr4NOG/11OxZQKacF3hJryZFLLhuI56LQygQrDvJpL5Vq4q1WjgeV5pltJijpJLhzQVvqvWyLK3hVzTgt3XWBPZordo2mG6U4A21Io6cZ5m0Im0gRdwJdVhdZpnV1a2NJQr8pJk1IDLxn4v6vUv4/gyHqzi4SgajvqDThT3enE8fB5FoyhyLXTJOUV2D4Ti9obTnV8XdBOE5FlA1tVZh/CYiUP3K38uoQRbR6H8bvP0I/ICdFmYBO3Umf/gJHt8fAtIt7ZSPwhJXcoVTt4gA5EV1RFxZtUbNzLab4DEnTHNKRpyx0xOfG3NA50cNSHZpbIouUjOZ6r2uE72Q1iiYaaAxLMZHuwtoDpsnYT4QgcO06pgJqE70MEfPLkB16cMAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 15.57 μs | 17.81 μs | 1.14 | 0.01 | True | | |\r\n\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/02_16_2024/refs/heads/main_arm64_ubuntu%2022.04_Regression/System.Tests.Perf_Uri_1.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/02_16_2024/refs/heads/main_arm64_ubuntu%2022.04_Regression/System.Tests.Perf_Uri.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n```cmd\ngit clone https://github.com/dotnet/performance.git\npython3 .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027System.Tests.Perf_Uri*\u0027\n```\n\n\u003cdetails\u003e\n\n\n### Payloads\n\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-9de44a4b-2c53-4c51-aa55-a8c1e79bf1c05dbf138c1874491a7/978b72ad-1bac-458c-8cb8-a55c44b85a4d.zip?sv=2021-08-06\u0026se=2024-03-14T05%3A11%3A33Z\u0026sr=c\u0026sp=rl\u0026sig=Vl5deX%2FGbuDKYtFs4T3R7AaVpYmMbCyZJNLykQ56zKs%3D\u003e)\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-12f74d6d-3175-491a-afff-b8861f2430adec625b9de22425d80/65c094f0-f47d-4ff9-96e1-5815cb00877b.zip?sv=2021-08-06\u0026se=2024-03-15T06%3A18%3A17Z\u0026sr=c\u0026sp=rl\u0026sig=ZVEY0Ze1U7JDdxFI6pjXn5%2FSTqlGFqi2L7V91AhneO8%3D\u003e)\n### System.Tests.Perf_Uri.EscapeDataString(input: \"üüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüü\")\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eperformanceautofiler[bot]\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-arm64`, `area-System.Net`, `os-linux`, `untriaged`, `runtime-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-02-19T17:24:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50cxyl",
                                           "createdAt":  "2024-02-20T08:28:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "I can repro this locally (Win x64). Triaging to 9.0.\r\n\r\nLooks like the [`EscapeStringToBuilder`](https://github.com/dotnet/runtime/blob/9dc6ea62a4d195ae4559f4609a56933c61889756/src/libraries/System.Private.Uri/src/System/UriHelper.cs#L236) helper is getting inlined into [`EscapeString`](https://github.com/dotnet/runtime/blob/9dc6ea62a4d195ae4559f4609a56933c61889756/src/libraries/System.Private.Uri/src/System/UriHelper.cs#L191), which now hurts some types of inputs more (e.g. long non-ASCII strings, like the benchmark in question here).\r\n\r\nSlapping `NoInlining` on `EscapeStringToBuilder` does get us back to pre-#98074 numbers for the benchmark cited above.\r\n\r\nThe current logic tries to reuse more code, but we might want to consider tweaking it a bit more to reduce the per-call overhead for simple inputs too.\r\nE.g. (where `pr` refers to #98074)\r\n| Method           | Toolchain | input               | Mean         | Error      | Ratio | Code Size |\r\n|----------------- |---------- |-------------------- |-------------:|-----------:|------:|----------:|\r\n| EscapeDataString | before-pr | aaaaaaaaaa          |     3.443 ns |  0.0164 ns |  1.00 |     905 B |\r\n| EscapeDataString | pr        | aaaaaaaaaa          |     4.702 ns |  0.0193 ns |  1.36 |   1,115 B |\r\n| EscapeDataString | noInline  | aaaaaaaaaa          |     4.777 ns |  0.0363 ns |  1.39 |   1,115 B |",
                                           "updatedAt":  "2024-02-20T09:25:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50gkvF",
                                           "createdAt":  "2024-02-20T17:25:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DrewScoggins",
                                           "body":  "Regressions:\r\n\r\nWindows x64: https://github.com/dotnet/perf-autofiling-issues/issues/29523\r\nWindows Amd x64: https://github.com/dotnet/perf-autofiling-issues/issues/29539\r\nLinux x64: https://github.com/dotnet/perf-autofiling-issues/issues/29443\r\nLinux Ampere: https://github.com/dotnet/perf-autofiling-issues/issues/29627\r\nSurface Win: https://github.com/dotnet/perf-autofiling-issues/issues/29637",
                                           "updatedAt":  "2024-02-22T17:21:30Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Regressions in System.Tests.Perf_Uri",
        "labels":  [
                       "area-System.Net",
                       "runtime-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/98792",
        "createdAt":  "2024-02-22T05:21:44Z",
        "number":  98792,
        "author":  "robheffo79",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC3t3OQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "joelverhagen",
                                            "createdAt":  "2024-05-06T21:47:55Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-02-26T12:57:09Z",
        "body":  "### Background and motivation\n\nThe purpose of the new API is to enhance the functionality of the IPAddress class by adding support for the UInt128 struct. This addition allows for the creation of IPv6 addresses directly from a UInt128 value.\r\n\r\nI propose a constructor, a ToUInt128 method, and an implicit converter from IPAddress to UInt128.\n\n### API Proposal\n\n```csharp\r\npublic class IPAddress\r\n{\r\n     public IPAddress(UInt128 value)\r\n     {\r\n         // Create an IPv6 IPAddress from the UInt128 value.\r\n     }\r\n\r\n     public UInt128 ToUInt128()\r\n     {\r\n         // Return a UInt128 value based on the IPAddress\r\n     }\r\n\r\n     public static implicit operator UInt128 (IPAddress ip)\r\n     {\r\n         // Return a UInt128 value based on the IPAddress\r\n     }\r\n}\r\n  ```\r\n\n\n### API Usage\n\n```csharp\r\nUInt128 ipv6Value = GetAddress();\r\nIPAddress ipv6Address = new IPAddress(ipv6Value);\r\n\r\nUInt128 otherIPv6Value = ipv6Address.ToUInt128();\r\nUInt128 yetAtherIPv6Value = (UInt128)ipv6Address;\r\n```\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\nRIsks would be minimal as this is just extending an existing class.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOdPWH0A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc50wAa_",
                                           "createdAt":  "2024-02-22T05:41:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nThe purpose of the new API is to enhance the functionality of the IPAddress class by adding support for the UInt128 struct. This addition allows for the creation of IPv6 addresses directly from a UInt128 value.\r\n\r\nI propose a constructor, a ToUInt128 method, and an implicit converter from IPAddress to UInt128.\n\n### API Proposal\n\n```csharp\r\npublic class IPAddress\r\n{\r\n     public IPAddress(UInt128 value)\r\n     {\r\n         // Create an IPv6 IPAddress from the UInt128 value.\r\n     }\r\n\r\n     public UInt128 ToUInt128()\r\n     {\r\n         // Return a UInt128 value based on the IPAddress\r\n     }\r\n\r\n     public static implicit operator UInt128 (IPAddress ip)\r\n     {\r\n         // Return a UInt128 value based on the IPAddress\r\n     }\r\n}\r\n  ```\r\n\n\n### API Usage\n\n```csharp\r\nUInt128 ipv6Value = GetAddress();\r\nIPAddress ipv6Address = new IPAddress(ipv6Value);\r\n\r\nUInt128 otherIPv6Value = ipv6Address.ToUInt128();\r\nUInt128 yetAtherIPv6Value = (UInt128)ipv6Address;\r\n```\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\nRIsks would be minimal as this is just extending an existing class.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003erobheffo79\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Net`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-02-22T05:41:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50wCgd",
                                           "createdAt":  "2024-02-22T05:50:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "The existing `IPAddress(Int64)` constructor is broken and only accepts 32 bit IPv4. Span-based variable length methods should be preferred over fixed-length methods.\r\n\r\n\u003e This addition allows for the creation of IPv6 addresses directly from a UInt128 value.\r\n\r\nThis is already achievable with span-based constructor:\r\n```csharp\r\nUInt128 value;\r\nvar address = new IPAddress(MemoryMarshal.AsBytes(new ReadOnlySpan\u003cUInt128\u003e(in value)));\r\n```\r\n\r\n\u003e I propose a constructor, a ToUInt128 method, and an implicit converter from IPAddress to UInt128.\r\n\r\nAs the existing 64 bit `Address` property has been obsoleted, I don\u0027t think UInt128 would be considered either. Implicit conversion won\u0027t ever be considered for such type of conversion.",
                                           "updatedAt":  "2024-02-22T05:50:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50zk_o",
                                           "createdAt":  "2024-02-22T15:22:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODg2zWQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Xor-el",
                                                                               "createdAt":  "2024-02-23T21:49:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "joelverhagen",
                                                                               "createdAt":  "2024-05-06T21:50:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "antonfirsov",
                                           "body":  "If it really makes your life easier, it\u0027s quite trivial to create helper methods in your project:\r\n\r\n```C#\r\npublic static UInt128 ToUInt128(this IPAddress ip)\r\n{\r\n    ArgumentNullException.ThrowIfNull(ip);\r\n    UInt128 value = default;\r\n    if (!ip.TryWriteBytes(MemoryMarshal.AsBytes(new Span\u003cUInt128\u003e(ref value)), out _))\r\n    {\r\n        // Theoretical case, should never happen with IPv4 \u0026 IPv6.\r\n        throw new NotSupportedException(\"Address family not supported.\");\r\n    }\r\n    return value;\r\n}\r\n\r\npublic static IPAddress ToIPAddress(in this UInt128 value) =\u003e new IPAddress(MemoryMarshal.AsBytes(new ReadOnlySpan\u003cUInt128\u003e(in value)));\r\n```\r\n\r\nTo me the use-case doesn\u0027t feel nice and universal enough to include it in the BCL. If the issue gets many upvotes, we can consider it in the future together with the unobsoletion of `IPAddress.Address` (https://github.com/dotnet/runtime/issues/68619).",
                                           "updatedAt":  "2024-02-26T12:57:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50zum0",
                                           "createdAt":  "2024-02-22T15:41:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "I recall requests for this being closed with the explanation that such APIs won\u0027t be added in case IPAddress will support some new formats that are longer than 128b.",
                                           "updatedAt":  "2024-02-22T15:41:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc509YfQ",
                                           "createdAt":  "2024-02-24T04:23:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "probably related to #84776  and #83971. The simple version does not deal with `ScopeID`.\r\nIt would be _nice_ IMHO to avoid allocations but the prevalence if IPv6 (or mapped IPv4) \r\nAs far as convenience the helper suggested by @antonfirsov should just work. ",
                                           "updatedAt":  "2024-02-24T04:23:50Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "[API Proposal]: Add support for UInt128 type to IPAddress class.",
        "labels":  [
                       "api-suggestion",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/99721",
        "createdAt":  "2024-03-13T21:24:05Z",
        "number":  99721,
        "author":  "mugetsu2012",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-01-26T20:47:34Z",
        "body":  "### Description\n\nWhen trying to check the network status, `NetworkAvailabilityChanged` is reporting ` IsAvailable` = true always, even if the network has been disconnected.\n\n### Reproduction Steps\n\n1. Create a new Maui/Blazor Hybrid app project using VS2022 and .NET 8.\r\n2. Paste the below provided code that executes\r\n3. Run the program on Android device\r\n4. Disconnect from the Wifi/Ethernet\r\n5. Notice how `NetworkAvailabilityChanged` is reporting `IsAvailable` = true\r\n\r\n\r\n```\r\n\r\nusing System.Net.NetworkInformation;\r\n\r\nNetworkChange.NetworkAvailabilityChanged += (object? sender, NetworkAvailabilityEventArgs e) =\u003e\r\n{\r\n    if (e.IsAvailable)\r\n        Console.WriteLine(\"[NetworkAvailabilityChanged] Network is available\");\r\n    else\r\n        Console.WriteLine(\"[NetworkAvailabilityChanged] Network is not available\");\r\n};\r\n```\n\n### Expected behavior\n\nWhen disconnecting from the network `NetworkChange.NetworkAvailabilityChanged` should be reporting `IsAvailable` = false\n\n### Actual behavior\n\nWhen disconnecting from the network `NetworkChange.NetworkAvailabilityChanged` is reporting `IsAvailable` = true\n\n### Regression?\n\nFirst time seeing this issue\n\n### Known Workarounds\n\nUsing `Connectivity.ConnectivityChanged` from `Microsoft.Maui.Networking` is working as expected for connect/disconnect scenarios on Android\n\n### Configuration\n\n- .NET 8.0.200\r\n- Windows 10 x64.\r\n- Devices: SAMSUNG Galaxy ‎S23 Ultra, Android 14. Same issue on a Teclast T45HD EEA, Android 13.\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOm9dn5g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc529qT9",
                                           "createdAt":  "2024-03-13T21:24:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-03-13T21:24:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc53cfwO",
                                           "createdAt":  "2024-03-18T13:46:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "simonrozsival",
                                           "body":  "I can reproduce the bug. It seems the `NetworkInterfacePal.IsSomeNetworkUp` method is broken.",
                                           "updatedAt":  "2024-03-18T13:46:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57MDwZ",
                                           "createdAt":  "2024-04-19T14:58:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "simonrozsival",
                                           "body":  "@mugetsu2012 I suggest you use https://learn.microsoft.com/en-us/dotnet/maui/platform-integration/communication/networking?view=net-maui-8.0\u0026tabs=android instead - it\u0027s more efficient and reliable.",
                                           "updatedAt":  "2024-04-19T14:58:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6b12fm",
                                           "createdAt":  "2025-01-26T20:47:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "drguthrie",
                                           "body":  "This is also happening for a simple macOS console application....IsAvailable is always True.\n\nM1 MacBook Pro, .Net 9",
                                           "updatedAt":  "2025-01-26T20:47:33Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "`NetworkChange.NetworkAvailabilityChanged` is always returning IsAvailable = true on Android",
        "labels":  [
                       "bug",
                       "area-System.Net",
                       "os-android"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/100248",
        "createdAt":  "2024-03-18T19:35:31Z",
        "number":  100248,
        "author":  "ogjkoch",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-04-11T16:50:59Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nThe [documentation](https://learn.microsoft.com/en-us/dotnet/api/system.web.httputility.javascriptstringencode?view=net-8.0) for HttpUtility.JavaScriptStringEncode states that the single quote character (\u0027) will be escaped as \\\\\u0027.\r\n\r\nHowever, it gets escaped as \\u0027.\r\n\r\nDouble quote is escaped as the documentation describes.\r\n\r\n### Expected Behavior\r\n\r\nExpected that HttpUtility.JavaScriptStringEncode functions as documented.\r\n\r\n### Steps To Reproduce\r\n\r\nPass a string containing a single quote character (\u0027) to HttpUtility.JavaScriptStringEncode.\r\n\r\n[Here](https://dotnetfiddle.net/8F4IDx) is a .NET fiddle displaying this behavior.\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n8.0\r\n\r\n### Anything else?\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOejI0Ew==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc54U-Vn",
                                           "createdAt":  "2024-03-25T19:31:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "amcasey",
                                           "body":  "Single quote is listed [here](https://github.com/dotnet/runtime/blob/330b70cfacc7751ab5ac546ed7138cb8a09c3097/src/libraries/System.Web.HttpUtility/src/System/Web/Util/HttpEncoder.cs#L24), but not [here](https://github.com/dotnet/runtime/blob/330b70cfacc7751ab5ac546ed7138cb8a09c3097/src/libraries/System.Web.HttpUtility/src/System/Web/Util/HttpEncoder.cs#L160).  Seems like an oversight, but this file hasn\u0027t changed in years, other than to pick up perf and language improvements.",
                                           "updatedAt":  "2024-03-25T19:31:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54U-ew",
                                           "createdAt":  "2024-03-25T19:35:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-03-25T19:35:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc556P1D",
                                           "createdAt":  "2024-04-09T14:24:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "I think the behavior here is correct, `\\\u0027` isn\u0027t a valid escape sequence.\r\nThe docs appear to be wrong here.",
                                           "updatedAt":  "2024-04-09T14:24:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc557N5u",
                                           "createdAt":  "2024-04-09T16:06:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "amcasey",
                                           "body":  "\u003e I think the behavior here is correct, `\\\u0027` isn\u0027t a valid escape sequence. The docs appear to be wrong here.\r\n\r\nDo you have more details on this behavior?  When I type `\"\\\u0027\"` in the browser console, it outputs `\"\u0027\"`.  Is that a non-compliant implementation?  Naively, I would have guessed it was allowed simply because JS allows `\u0027`-delimited strings.\r\n\r\nOr maybe I\u0027ve misunderstood entirely and we\u0027re talking about C# string literals?\r\n\r\nEdit: I think [this](https://tc39.es/ecma262/#prod-SingleEscapeCharacter) is the relevant grammar production in the ecmascript spec.",
                                           "updatedAt":  "2024-04-09T16:07:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc56KddP",
                                           "createdAt":  "2024-04-11T12:13:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "Ah, looks like I was looking at JSON, which defines the same set except for `\u0027`.\r\nAssuming the Unicode escape sequence `\\u0027` would be treated the same way as `\\\u0027`, do you think updating the docs here would be sufficient? \r\nIt seems plausible that people are using this API for JSON string escaping, and `\\\u0027` would break those.",
                                           "updatedAt":  "2024-04-11T12:13:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc56MNbp",
                                           "createdAt":  "2024-04-11T15:57:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "amcasey",
                                           "body":  "\u003e It seems plausible that people are using this API for JSON string escaping, and \\\u0027 would break those.\r\n\r\nWhile that does seem plausible, the code already escapes `\u0027`.  Changing that seems likely to break people using the type to escape JS strings.  It may, however, be worth putting a remark in the docs about having to consider `\\\u0027` if you\u0027re escaping for JSON.",
                                           "updatedAt":  "2024-04-11T15:57:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc56MQ_u",
                                           "createdAt":  "2024-04-11T16:05:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "Right, I\u0027m suggesting we don\u0027t change the behavior here and update the docs instead since over-escaping is fine in JSON (and should be in JS strings as well?).",
                                           "updatedAt":  "2024-04-11T16:05:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc56MjQT",
                                           "createdAt":  "2024-04-11T16:50:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODd91yw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "HerbWarren",
                                                                               "createdAt":  "2024-04-12T12:20:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "amcasey",
                                           "body":  "My turn to get mixed up. 😆  I forgot what the current state was.\r\n\r\nYes, I think I\u0027d agree that a doc update makes more sense.  I kind of wish we had escaped single quote \"properly\" in the first place, but that ship has sailed.",
                                           "updatedAt":  "2024-04-11T16:50:57Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "HttpUtility.JavaScriptStringEncode single quote behavior does not match documentation",
        "labels":  [
                       "documentation",
                       "area-System.Net",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/99979",
        "createdAt":  "2024-03-19T19:58:55Z",
        "number":  99979,
        "author":  "mugetsu2012",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-05-03T18:57:34Z",
        "body":  "### Description\n\nWhen trying to get the current available networks using `NetworkInterface.GetAllNetworkInterfaces()` on Adroid,  we are getting `Unknown` for the `NetworkInterfaceType` property instead of a real value\n\n### Reproduction Steps\n\n1. Create a new Maui/Blazor Hybrid app project using VS2022 and .NET 8.\r\n2. Paste the below provided code that executes\r\n3. Run the program on Android device\r\n4. Inspect the result from `NetworkInterface.GetAllNetworkInterfaces()` and check that we don\u0027t have a Wireless `NetworkInterfaceType` but instead we have `Unknown`\r\n\r\n\r\n```\r\n\r\nusing System.Net.NetworkInformation;\r\n\r\nvar networkInterfaces = NetworkInterface.GetAllNetworkInterfaces();\r\n```\n\n### Expected behavior\n\nWhen using `NetworkInterface.GetAllNetworkInterfaces()` the propery `NetworkInterfaceType`  should be populated correctly to reflect a Wireless network interface\n\n### Actual behavior\n\nWhen using `NetworkInterface.GetAllNetworkInterfaces()` the propery `NetworkInterfaceType`  is being set to `Unknown`\n\n### Regression?\n\nFirst time\n\n### Known Workarounds\n\nNone\n\n### Configuration\n\n- .NET 8.0.200\r\n- Windows 10 x64.\r\n- Devices: SAMSUNG Galaxy ‎S23 Ultra, Android 14. Same issue on a Teclast T45HD EEA, Android 13.\n\n### Other information\n\nPossibly related to: https://github.com/dotnet/runtime/issues/99721",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOd8AUSA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc53r9D1",
                                           "createdAt":  "2024-03-19T19:59:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-03-19T19:59:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc53r9X-",
                                           "createdAt":  "2024-03-19T19:59:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "/cc @simonrozsival @vitek-karas ",
                                           "updatedAt":  "2024-03-19T20:00:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc53wBRI",
                                           "createdAt":  "2024-03-20T09:05:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "simonrozsival",
                                           "body":  "@mugetsu2012 unfortunately, this API is fairly limited on Android. I would recommend using MAUI\u0027s Connectivity helpers (see https://learn.microsoft.com/dotnet/maui/platform-integration/communication/networking?tabs=android) or alternatively Android\u0027s platform APIs (see https://learn.microsoft.com/en-us/dotnet/api/android.net.connectivitymanager.requestnetwork?view=xamarin-android-sdk-13 and the [official Android documentation]( https://developer.android.com/reference/android/net/ConnectivityManager#registerNetworkCallback(android.net.NetworkRequest,%20android.net.ConnectivityManager.NetworkCallback)) for more details).\r\n\r\n@vitek-karas we tried fixing `NetworkInterface` APIs on Android in .NET 7 to make them more reliable but they are still very limited and unreliable. In \"recent\" releases, Android\u0027s unix networking APIs were either removed, or limited in some other way. The Android APIs aren\u0027t 1:1 to the .NET APIs so we didn\u0027t use those. We should either revisit this area or we might consider deprecating these APIs completely and guiding customers to use the MAUI Connectivity APIs instead.",
                                           "updatedAt":  "2024-03-20T09:05:09Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "`NetworkInterface.GetAllNetworkInterfaces()` is returning `Unknown` for the propery `NetworkInterfaceType` on Android",
        "labels":  [
                       "area-System.Net",
                       "os-android"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/100088",
        "createdAt":  "2024-03-21T16:42:36Z",
        "number":  100088,
        "author":  "jkotas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-21T00:01:10Z",
        "body":  "```\r\n    System.Net.Tests.HttpListenerRequestTests.ContentEncoding_GetProperty_ReturnsExpected(header: \"Content-Type:\", expected: UTF8EncodingSealed { BodyName = \"utf-8\", CodePage = 65001, DecoderFallback = DecoderReplacementFallback { DefaultString = \"�\", MaxCharCount = 1 }, EncoderFallback = EncoderReplacementFallback { DefaultString = \"�\", MaxCharCount = 1 }, EncodingName = \"Unicode (UTF-8)\", ··· }) [FAIL]\r\n      System.Net.Sockets.SocketException : Connection refused 127.0.0.1:1293\r\n      Stack Trace:\r\n        /_/src/libraries/System.Net.Sockets/src/System/Net/Sockets/Socket.cs(3216,0): at System.Net.Sockets.Socket.DoConnect(EndPoint endPointSnapshot, SocketAddress socketAddress)\r\n        /_/src/libraries/System.Net.Sockets/src/System/Net/Sockets/Socket.cs(838,0): at System.Net.Sockets.Socket.Connect(EndPoint remoteEP)\r\n        /_/src/libraries/System.Net.Sockets/src/System/Net/Sockets/Socket.cs(922,0): at System.Net.Sockets.Socket.Connect(IPAddress[] addresses, Int32 port)\r\n```\r\n\r\n## Build Information\r\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=611434\r\nBuild error leg or test failing: System.Net.HttpListener.Tests.WorkItemExecution\r\nPull request: https://github.com/dotnet/runtime/pull/100066\r\n\u003c!-- Error message template  --\u003e\r\n## Error Message\r\n\r\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssues.md#how-to-fill-out-a-known-issue-error-section).\r\n\r\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\r\n\r\n```json\r\n{\r\n  \"ErrorMessage\": \"\",\r\n  \"ErrorPattern\": \"System.Net.Tests.HttpListenerRequestTests.ContentEncoding_GetProperty_ReturnsExpected.*FAIL\",\r\n  \"BuildRetry\": false,\r\n  \"ExcludeConsoleLog\": false\r\n}\r\n```\r\n\r\n\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=611434\r\n**Error message validated:** `[System.Net.Tests.HttpListenerRequestTests.ContentEncoding_GetProperty_ReturnsExpected.*FAIL`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 3/21/2024 4:45:18 PM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|0|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgPwgjQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc53-zgx",
                                           "createdAt":  "2024-03-21T16:42:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-03-21T16:42:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58rzxf",
                                           "createdAt":  "2024-05-02T22:34:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffschwMSFT",
                                           "body":  "removing blocking-clean-ci has this has not failed in 30 days\r\n\r\n24-Hour Hit Count | 7-Day Hit Count | 1-Month Count\r\n-- | -- | --\r\n0 | 0 | 0\r\n",
                                           "updatedAt":  "2024-05-02T22:34:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6A_CCN",
                                           "createdAt":  "2024-06-12T22:32:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "low hit count, moving to future. ",
                                           "updatedAt":  "2024-06-12T22:32:40Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "System.Net.Tests.HttpListenerRequestTests fail with SocketException : Connection refused",
        "labels":  [
                       "area-System.Net",
                       "Known Build Error"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/100213",
        "createdAt":  "2024-03-24T22:40:16Z",
        "number":  100213,
        "author":  "stylpe",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-04-10T07:14:46Z",
        "body":  "### Background and motivation\n\nIt just seems natural to have a built-in way to work out the `IPNetwork` that a `UnicastIPAddressInformation` is in. \n\n### API Proposal\n\n```csharp\r\nnamespace System.Net.NetworkInformation;\r\n\r\npublic abstract class UnicastIPAddressInformation : IPAddressInformation\r\n{\r\n    public IPNetwork IPNetwork { get { ... } }\r\n}\r\n```\r\n\n\n### API Usage\n\nI was working in a different repo on a PR that does this manually, at https://github.com/nefarius/Nefarius.Utilities.AspNetCore/pull/52, and that project is a good use case example if you want to have look.\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\nNone that I can think of.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOef4GnA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc54OI7W",
                                           "createdAt":  "2024-03-24T22:44:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-03-24T22:44:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54PtGm",
                                           "createdAt":  "2024-03-25T07:31:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stylpe",
                                           "body":  "And I\u0027d love to take a shot at implementing this myself! I would look at making an internal helper method in `IPAddress` to be able to use its internals for the best performance, naming it something like `GetMaskedPrefix(int prefixLength)`.",
                                           "updatedAt":  "2024-03-25T07:31:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc556pOo",
                                           "createdAt":  "2024-04-09T15:06:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "antonfirsov",
                                           "body":  "Triage: not critical for .NET 9, please upvote if you find this important.",
                                           "updatedAt":  "2024-04-09T15:06:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc55_gac",
                                           "createdAt":  "2024-04-10T07:14:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "iSazonov",
                                           "body":  "As far as I understand it, `UnicastIPAddressInformation` is intended to retrieve address information from the system but not to manipulate those addresses.\r\nA primitive operation in a general case looks like `F(ipaddress, mask) -\u003e ipnetwork`. This means that the new API should be rather in `IPNetwork` or should be new extension method for `IPNetwork`.\r\nNote that these types (`UnicastIPAddressInformation` and `IPNetwork`) are in different dll-s.\r\nOne vote more for `IPNetwork` because it contains [`HasNonZeroBitsAfterNetworkPrefix`](https://github.com/dotnet/runtime/blob/d88c7ba88627b4b68ad523ba27cb354809eb7e67/src/libraries/System.Net.Primitives/src/System/Net/IPNetwork.cs#L205) which already implementing all we need.\r\n\r\n```c#\r\nnamespace System.Net\r\n{\r\n    public readonly struct IPNetwork\r\n    {\r\n        public static IPNetWork GetBaseNetwork(IPAddress address, int prefixLength);  // New API\r\n    }\r\n}\r\n```\r\n\r\n",
                                           "updatedAt":  "2024-04-10T07:14:44Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[API Proposal]: Add `IPNetwork` get-only property to `UnicastIPAddressInformation`",
        "labels":  [
                       "api-suggestion",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/101355",
        "createdAt":  "2024-04-21T19:54:51Z",
        "number":  101355,
        "author":  "neon-sunset",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC3Y1ng==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2024-04-22T10:27:27Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-06-20T20:08:47Z",
        "body":  "### Description\r\nIt appears that calling `Dns.GetHostAddressesAsync` roots diagnostic types that are unused by accessing `IsEnabled` flag within `NameResolutionMetrics` which is implemented in a way that is not analyzable by the trimmer.\r\n\r\n![image](https://github.com/dotnet/runtime/assets/20912188/1f6daf25-f82d-4d07-a647-32e28ecf3f40)\r\n\r\n### Environment\r\n```\r\n.NET SDK:\r\n Version:           8.0.300-preview.24203.14 (no idea why this is preview)\r\n Commit:            b7e38f457d\r\n Workload version:  8.0.300-manifests.c4df6daf\r\n MSBuild version:   17.10.0+4f6b1bb28\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.22631\r\n OS Platform: Windows\r\n RID:         win-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\8.0.300-preview.24203.14\\\r\n ```\r\n \r\n### Data\r\n\r\nPlease find the mstat file from a [repro](https://github.com/U8String/U8String/tree/main/Examples/TwitchChatReader) attached: [TwitchChatReader.mstat.zip](https://github.com/dotnet/runtime/files/15053322/TwitchChatReader.mstat.zip)\r\n\r\n### Analysis\r\n\r\nIt was not immediately apparent if there exists a way to let the linker/trimmer know that no diagnostics are expected. Perhaps I\u0027m missing something?\r\n\r\nThanks.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgga1TQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc57RgjY",
                                           "createdAt":  "2024-04-21T20:22:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "Are you using the `System.Diagnostics.Metrics.Meter.IsSupported` feature switch to disable the functionality?",
                                           "updatedAt":  "2024-04-21T20:22:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57Rg5u",
                                           "createdAt":  "2024-04-21T20:27:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "neon-sunset",
                                           "body":  "(If you are asking me, then I can\u0027t - it is `internal`, there is no code that references `System.Diagnostics.Metrics` namespace directly. Does this need an rd.xml?)",
                                           "updatedAt":  "2024-04-21T20:28:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57RhAG",
                                           "createdAt":  "2024-04-21T20:28:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "I\u0027m talking about https://github.com/dotnet/runtime/blob/main/docs/workflow/trimming/feature-switches.md#available-feature-switches\r\nThe corresponding property is `MetricsSupport`",
                                           "updatedAt":  "2024-04-21T20:29:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57Riiq",
                                           "createdAt":  "2024-04-21T20:56:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "neon-sunset",
                                           "body":  "I was unaware of it, thanks! (missed the link at the end of [this](https://learn.microsoft.com/en-us/dotnet/core/deploying/trimming/trimming-options?pivots=dotnet-8-0#trimming-framework-library-features) section) Setting `\u003cMetricsSupport\u003efalse\u003c/MetricsSupport\u003e` does indeed reduce the binary size but the types still end up being rooted:\r\n![image](https://github.com/dotnet/runtime/assets/20912188/f6423103-b0b1-4ea5-85fa-c6c18ec8d726)\r\n\r\nTurns out the title was accidentally correct 😅\r\n\r\nDiff of removed:\r\n![image](https://github.com/dotnet/runtime/assets/20912188/ce3ef89b-03da-495e-9508-356e2f97d27b)\r\n\r\nAs a side note, is there a reason this is enabled by default for default SDK template published as AOT that does not reference `EventListener`? (or does NativeAOT support event pipe now?) \r\n",
                                           "updatedAt":  "2024-04-21T21:05:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57TDb7",
                                           "createdAt":  "2024-04-22T06:33:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODfDtyg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PaulusParssinen",
                                                                               "createdAt":  "2024-04-22T10:27:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "@MihaZupan is `MetricsSupport` a publicly supported switch? If so, could you or someone please add it to the list at https://learn.microsoft.com/en-us/dotnet/core/deploying/trimming/trimming-options?pivots=dotnet-6-0#trimming-framework-library-features (you can click the \"Edit this document\" at the top of the page to edit it on Github).\r\n\r\nAre metrics usable with `EventSourceSupport=false`? If not, we might want to consider `MetricsSupport` as false if `EventSourceSupport` is false.\r\n\r\n\u003e or does NativeAOT support event pipe now?\r\n\r\nIt supports it, but by default we set EventSourceSupport to false when PublishAot is true. Some SDKs (like the ASP.NET SDK) will change the default to true.\r\n\r\nCc @eerhardt ",
                                           "updatedAt":  "2024-04-22T06:33:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57XuLd",
                                           "createdAt":  "2024-04-22T15:08:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "\u003e is MetricsSupport a publicly supported switch?\r\n\r\nYes, it was introduced for Xamarin Android. See https://github.com/dotnet/runtime/pull/91767.\r\n\r\n\u003e Are metrics usable with EventSourceSupport=false?\r\n\r\nYes, I believe so. One example is using OpenTelemetry to export the metrics using say OTLP, or prometheus. EventSource shouldn\u0027t be needed in those scenarios.",
                                           "updatedAt":  "2024-04-22T15:08:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CBp4N",
                                           "createdAt":  "2024-06-20T20:05:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-06-20T20:05:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CBqjV",
                                           "createdAt":  "2024-06-20T20:06:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "I changed the area label as the metrics work correctly and `Dns.GetHostAddressesAsync` is what root the types. No action needed from metrics side. I understand AOT need to do some work here and they can triage this issue accordingly. ",
                                           "updatedAt":  "2024-06-20T20:06:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CBrVN",
                                           "createdAt":  "2024-06-20T20:08:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-06-20T20:08:46Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "`Dns.GetHostAddressesAsync` roots diagnostic types even if they are not used or disabled (trimming)",
        "labels":  [
                       "area-System.Net",
                       "linkable-framework"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/101999",
        "createdAt":  "2024-05-07T19:52:38Z",
        "number":  101999,
        "author":  "rjrizzuto",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-09T13:34:01Z",
        "body":  "### Description\n\n11050 (general failure) is returned from a Ping.Send when wifi is turned off.  That code is not listed in the enums for the IPStatus class\n\n### Reproduction Steps\n\nCall Ping.Send with wifi is disabled.  Print the reply.status field.\n\n### Expected behavior\n\nGeneralFailure is printed\n\n### Actual behavior\n\n11050 is printed\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.net 8\r\nWindows 11\r\nx64\r\nUnsure if it is specific to this platform - can\u0027t test on Linux currently\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhDBdPw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6DUqJ9",
                                           "createdAt":  "2024-07-02T13:49:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "antonfirsov",
                                           "body":  "It would be nice to have an enum member to map [`IP_GENERAL_FAILURE=11050`](https://learn.microsoft.com/en-us/windows/win32/api/ipexport/ns-ipexport-icmp_echo_reply32) to, but I assume it would be platform specific. @wfurt are there other Windows-specific values in [`IPStatus`](https://learn.microsoft.com/en-us/dotnet/api/system.net.networkinformation.ipstatus)?",
                                           "updatedAt":  "2024-07-02T13:50:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DU5ll",
                                           "createdAt":  "2024-07-02T14:03:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rjrizzuto",
                                           "body":  "It seems like a catch all error code to report \"other\".  I imagine other platforms might need that as well.",
                                           "updatedAt":  "2024-07-02T14:03:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DXgKK",
                                           "createdAt":  "2024-07-02T17:58:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "liveans",
                                           "body":  "Triage: Not critical for 9.0. Moving to future. We\u0027ll take it into 9.0 if the time permits.",
                                           "updatedAt":  "2024-07-09T13:33:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6D6dTd",
                                           "createdAt":  "2024-07-08T06:32:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "piotreksda",
                                           "body":  "Hi, I am new here. I have looked into this a bit and was wondering if just adding `GeneralFailure = 11050` to the `enum IPStatus` is enough. I was also wondering if I should also change something in the `MapV4TypeToIPStatus` and `MapV6TypeToIPStatus` methods but here I would ask for help though. ",
                                           "updatedAt":  "2024-07-08T06:32:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6EMF0_",
                                           "createdAt":  "2024-07-09T13:34:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "liveans",
                                           "body":  "\u003e Hi, I am new here. I have looked into this a bit and was wondering if just adding `GeneralFailure = 11050` to the `enum IPStatus` is enough. I was also wondering if I should also change something in the `MapV4TypeToIPStatus` and `MapV6TypeToIPStatus` methods but here I would ask for help though.\r\n\r\nHello @piotreksda, this should be enough but while we were triaging this issue, we overlooked that `IPStatus` is public API, so this should go through `API Proposal` first, and only after then that we can implement this.",
                                           "updatedAt":  "2024-07-09T13:34:00Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "error code 11050 for IPStatus not listed",
        "labels":  [
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/102105",
        "createdAt":  "2024-05-11T01:15:16Z",
        "number":  102105,
        "author":  "xljiulang",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC9RQxQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pedoc",
                                            "createdAt":  "2024-05-11T01:44:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "campersau",
                                            "createdAt":  "2024-05-11T04:53:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "strangeman375",
                                            "createdAt":  "2024-05-11T11:48:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2024-05-11T13:15:41Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "D3-LucaPiombino",
                                            "createdAt":  "2024-05-13T20:59:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Wraith2",
                                            "createdAt":  "2024-05-14T07:55:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MJEdwin",
                                            "createdAt":  "2024-12-07T04:07:08Z"
                                        }
                                    ],
                          "totalCount":  7
                      },
        "updatedAt":  "2024-05-14T14:21:02Z",
        "body":  "### Background and motivation\r\n\r\nToday, network components such as HttpClient directly rely on the Dns static class that is deeply bound to the operating system. This means that if you want to change the DNS resolution of the application, you can only change the Dns configuration of the operating system.\r\n\r\n### API Proposal\r\n\r\n```csharp\r\npublic abstract class DnsClient\r\n{\r\n    public static DnsClient System { get; }\r\n\r\n    public abstract Task\u003cIPHostEntry\u003e GetHostEntryAsync(string hostNameOrAddress, AddressFamily family, CancellationToken cancellationToken = default);\r\n\r\n    public abstract Task\u003cIPHostEntry\u003e GetHostEntryAsync(string hostNameOrAddress, CancellationToken cancellationToken);\r\n}\r\n```\r\n\r\n### API Usage\r\n\r\n```csharp\r\nvar httpHandler = new SocketsHttpHandler\r\n{\r\n    DnsClient = new DohDnsClient(\"https://xxx.com/dns-query\")\r\n};\r\nvar httpClient = new HttpClient(httpHandler);\r\n```\r\n\r\n```csharp\r\nvar smtpClient = new SmtpClient\r\n{\r\n    DnsClient = new CustomDnsClient(\"8.8.8.8\")\r\n};\r\n```\r\n\r\n\r\n```csharp\r\nvar socket = new Socket(SocketType.Stream, ProtocolType.Tcp)\r\n{\r\n    DnsClient = DnsClient.System\r\n};\r\n```\r\n\r\n\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOfclhVg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc59hn_y",
                                           "createdAt":  "2024-05-11T17:44:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "For HTTP, you can generally use the `ConnectCallback` @xljiulang. AFAIK This is only one place where DNS would be used and you can completely customize that. \r\n\r\nOn `Socket` there is also API that takes array of `IPAddresses`, so doing custom resolution and passing the result there would be trivial IMHO. \r\n\r\nNow some improvements around name resolutions are being discussed. This is perhaps related to #19443. But that covers just the API not integration with rest of the .NET \r\n\r\nI\u0027m wondering if you can elaborate more on the use cases.",
                                           "updatedAt":  "2024-05-11T17:44:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59jdXy",
                                           "createdAt":  "2024-05-13T00:55:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xljiulang",
                                           "body":  "@wfurt \r\nI am very pleased that many of these network components support passing in IPAddress directly or indirectly, but it obviously does not conflict with the need to design a DnsClient abstract class and apply it to these network components.\r\nFor SocketsHttpHandler, although it has a custom connection method of ConnectCallback, without DnsClient, I think many developers cannot handle the following connection method well:\r\n1. http/1.1 and http2 connection\r\n2. http3 connection\r\n3. WebProxy connection\r\n4. Socks4 and 5 connection\r\n5. https WebProxy connection",
                                           "updatedAt":  "2024-05-13T00:57:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59jgTf",
                                           "createdAt":  "2024-05-13T01:14:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xljiulang",
                                           "body":  "I have implemented the HostResolver function of SocketsHttpHandler in a private project. In order to implement custom host resolution, I wrote a total of about 1,000 lines of cs code.\r\n\r\n```\r\npublic static IHttpMessageHandlerBuilder AddHostResolver\u003cTHostResolver\u003e(this IHttpMessageHandlerBuilder builder)\r\n     where THostResolver : HostResolver\r\n{\r\n     builder.Services.TryAddTransient\u003cTHostResolver\u003e();\r\n     return builder.AddHostResolver(serviceProvider =\u003e serviceProvider.GetRequiredService\u003cTHostResolver\u003e());\r\n}\r\n```",
                                           "updatedAt":  "2024-05-13T01:14:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59pd1Y",
                                           "createdAt":  "2024-05-13T15:33:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "antonfirsov",
                                           "body":  "\u003e http/1.1 and http2 connection\r\n\r\nThis works fine with `ConnectCallback` since it\u0027s agnostic about the underlying HTTP2/HTTP3 protocol. The job of `ConnectCallback` is to create a `Stream` for the communication.\r\n\r\n\u003e WebProxy connection\r\n\u003e https WebProxy connection\r\n\u003e Socks4 and 5 connection\r\n\r\nSimilarly, I don\u0027t see a problem with these. Proxy and tunnel connections are plumbed through `ConnectCallback`.\r\n\r\n\u003e http3 connection\r\n\r\nIt would be very challanging to integrate msquic with a managed DnsResolver since the code that handles the resolution attempts has to live in msquic to be efficient, see https://github.com/dotnet/runtime/issues/82404#issuecomment-2041023799. It is doable if msquic implemented some sort of callback, but IMHO it is very far on their roadmap (for now the next step is https://github.com/microsoft/msquic/issues/1181). #64449 might enable a sub-optimal implementation on user side.\r\n\r\n\u003e In order to implement custom host resolution, I wrote a total of about 1,000 lines of cs code.\r\n\r\nWe plan to eventually address #19443 so users can get rid of that code, however currently we are uncertain if we can land that feature in .NET 9.0. Have you considered using [DnsClient.NET](https://github.com/MichaCo/DnsClient.NET)?",
                                           "updatedAt":  "2024-05-13T15:33:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59pwCq",
                                           "createdAt":  "2024-05-13T15:59:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xljiulang",
                                           "body":  "@antonfirsov \r\nThank you for your answer. The difficulty of my problem is not to implement a DnsClient with complete functions and protocols, but that even with DnsClient, developers still have to write a lot of cs code to integrate it into network components such as SocketsHttpHandler. For example, although it is enough to create a Socks4 and 5 connection as the function\u0027s return Stream, developers have to implement the complex connection process of the Socks4 and 5 connection from scratch. Of course, the same is true for other proxy connection methods. Think about what our original needs are? Why did it become a variety of complex connections.",
                                           "updatedAt":  "2024-05-13T15:59:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59rOK2",
                                           "createdAt":  "2024-05-13T18:06:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "There still may be some value in the proposal IMHO. But again back to my question, why do you need custom resolution to start  with @xljiulang? I can see that the `ConnectCallback` may be more complicated if you want to cover all the cases above. \r\n\r\nOne thing developers sometimes  struggle with are 3rd party libraries where something happens under the cover. Is that something we should also consider? This is also one case where the callback is problematic. ",
                                           "updatedAt":  "2024-05-13T18:06:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59tfON",
                                           "createdAt":  "2024-05-14T00:57:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEMu26A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-04-03T09:27:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "xljiulang",
                                           "body":  "Since the DNS protocol is insecure, its resolution results are contaminated in some specific areas. In this case, the application needs a more secure Doh protocol or other custom resolution implementation, and the application cannot modify the system. DNS configuration.\r\nTo be honest, I don\u0027t want to know how SocketsHttpHandler\u0027s ConnectCallback should work. I just want it to provide a DNS resolver property to set the resolver.\r\n",
                                           "updatedAt":  "2024-05-14T00:57:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59yWFW",
                                           "createdAt":  "2024-05-14T14:11:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "antonfirsov",
                                           "body":  "We can keep this as a tracking issue for exposing an easier API to customize DNS resolution than `ConnectCallback` assuming #19443 will be implemented. Given that the other issue has priority, I\u0027m triaging this to Future, @wfurt let me know if you disagree.\r\n\r\n\u003e To be honest, I don\u0027t want to know how SocketsHttpHandler\u0027s ConnectCallback should work. I just want it to provide a DNS resolver property to set the resolver\r\n\r\nIf this is blocking you, I think you should give it a try. \r\n\r\n\u003e although it is enough to create a Socks4 and 5 connection as the function\u0027s return Stream, developers have to implement the complex connection process of the Socks4 and 5 connection from scratch\r\n\r\nThis is not true. `ConnectCallback` is a relatively thin abstraction for DNS resolution and TCP connection. `SocketsHttpHandler` will deal with the proxy/tunnel establishment for you. The callback could be as simple as:\r\n\r\n```C#\r\n using SocketsHttpHandler handler = new()\r\n {\r\n     ConnectCallback = async (ctx, ct) =\u003e\r\n     {\r\n         var s = new Socket(SocketType.Stream, ProtocolType.Tcp) { NoDelay = true };\r\n         try\r\n         {\r\n             IPAddress[] addresses = await MyCustomResolver.ResolveIPAddressesAsync(ctx.DnsEndPoint.Host, ct);\r\n             await s.ConnectAsync(addresses, ctx.DnsEndPoint.Port, ct);\r\n             return new NetworkStream(s, ownsSocket: true);\r\n         }\r\n         catch\r\n         {\r\n             s.Dispose();\r\n             throw;\r\n         }\r\n     }\r\n };\r\n```",
                                           "updatedAt":  "2024-05-14T14:21:02Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "[API Proposal]: Should we design a DnsClient abstract class?",
        "labels":  [
                       "api-suggestion",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/102445",
        "createdAt":  "2024-05-20T07:39:57Z",
        "number":  102445,
        "author":  "aliajboy",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-02T17:55:34Z",
        "body":  "### Description\r\n\r\n### Describe the bug\r\nI want to ping about 180 IPs that most of them, say about 175 of them are disconnected from local network and respond timeout. I know about this and I set timeout in `Ping` Command to 10ms so It shouldn\u0027t take a lot of time! BUT It takes 110 seconds to complete that is about 600ms. I tested `async/await` and without that, I used `foreach` and `await Task.WhenAll` but non of them seem to work, It is really weird. when I have them connected, I can say that this process takes about 1 sec to complete! I assume that this `timeout` setting in `Ping` command is just Ridiculous and doesn\u0027t do a thing. If this works, assume that all the IPs are dead, It should take 1.8 seconds to complete.\r\n\r\none of my codes:\r\n\r\n```c#\r\n            string data = \"aaaaaaaaaaaaaaaa\";\r\n            byte[] byteBuffer = Encoding.ASCII.GetBytes(data);\r\n            var list = new List\u003cTask\u003cPingReply\u003e\u003e();\r\n            foreach (var item in model)\r\n            {\r\n                list.Add(new Ping().SendPingAsync(item.DevIPWIFI,10,byteBuffer));  // no await here\r\n            }\r\n            var replies = await Task.WhenAll(list);\r\n```\r\n\r\nthe other one:\r\n\r\n```c#\r\n            foreach (var item in model)\r\n            {\r\n                PingReply reply = new Ping().Send(item.DevIPWIFI,10);\r\n            }\r\n```\r\n\r\nand tested this one either:\r\n`PingReply reply = await new Ping().SendPingAsync(item.DevIPWIFI,10); // And this one with await`\r\n\r\nAfter I saw the delay, I tested the `timeout` specially to see how it react, but it doesn\u0027t react like it supposed to do.\r\n\r\nI have to mention that if the devices are connected and have ping, all 180 IPs will respond in less than a second!\r\n\r\n### Reproduction Steps\r\n\r\nmake a list of 180 IPs that are disconnected and respond with timeout. Use `SendPingAsync()` or `Send()` Method to get respond.\r\n\r\n### Expected behavior\r\n\r\ntimeout as I expected.\r\n\r\n### Actual behavior\r\n\r\nwon\u0027t timeout as I mentioned. no matter if you put 1ms or 100ms\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n- i3 6100\r\n- Dotnet 8.0.5\r\n- VS 17.9.7\r\n- Windows 10 x64\r\n- ASP.Net Core MVC\r\n\r\n### Other information\r\n\r\nI asked SDK team and stackoverflow, but they send me to dotnet runtime team.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOg13wHA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5-WuV9",
                                           "createdAt":  "2024-05-20T07:57:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-20T07:57:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-W6yb",
                                           "createdAt":  "2024-05-20T08:25:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "It sounds like `Ping` is not respecting `timeout`. You can verify this by measuring one request to one known disconnected destination.",
                                           "updatedAt":  "2024-05-20T08:25:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-YErk",
                                           "createdAt":  "2024-05-20T11:19:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aliajboy",
                                           "body":  "@huoyaoyuan as I mention in the Question itself, I have tested and confirmed that it doesn\u0027t respect the `timeout`. I even test in debug mode and saw that the request will respond in range of 250-500ms",
                                           "updatedAt":  "2024-05-20T11:19:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-cskC",
                                           "createdAt":  "2024-05-20T23:54:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "That seems to be problem with underlying Windows API. We pass timeout to it and it works as expected for larger value (1s+) but it is not that precise for vary short timouts\r\n\r\nhttps://github.com/dotnet/runtime/blob/24562bcabefaea5e03c74d01e4df8fc7c112a13a/src/libraries/System.Net.Ping/src/System/Net/NetworkInformation/Ping.Windows.cs#L164-L183\r\n\r\nThe async option may be best IMHO as one should not need to wait for the response. But it also allocates wait handle and does what `async` does. And that will cost something regardless.  \r\n\r\n\r\nThe easy workaround could probably be  `Task.WhenAny` in cycle or  something like `Task.WaitAll(list.ToArray(), TimeSpan.FromMilliseconds(10));` and mark unfinished tasks as timeout. ",
                                           "updatedAt":  "2024-05-20T23:54:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DXfAc",
                                           "createdAt":  "2024-07-02T17:55:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "liveans",
                                           "body":  "Triage: Not critical for 9.0, moving to the future.",
                                           "updatedAt":  "2024-07-02T17:55:27Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Slow Ping Class",
        "labels":  [
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/103949",
        "createdAt":  "2024-06-24T08:16:30Z",
        "number":  103949,
        "author":  "clem0338",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC49U0g==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "Kalyxt",
                                            "createdAt":  "2024-06-24T08:23:22Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "Alex-Witkowski",
                                            "createdAt":  "2024-06-26T07:18:22Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "omghb",
                                            "createdAt":  "2024-06-26T07:28:53Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "FA72",
                                            "createdAt":  "2024-06-26T08:19:38Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "angularsen",
                                            "createdAt":  "2024-06-26T10:06:10Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "farhanfiaz",
                                            "createdAt":  "2024-06-26T23:43:31Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "bastianplsfix",
                                            "createdAt":  "2024-06-27T05:59:07Z"
                                        }
                                    ],
                          "totalCount":  7
                      },
        "updatedAt":  "2024-07-02T09:48:24Z",
        "body":  "### Description\n\nHi, \r\n\r\nwe were able to migrate our solution from Xamarin to MAUI (.net 8).\r\n\r\nAfter a 2 weeks fight, the app is finally working on Android and iOS in both Debug and Release configuration.\r\n\r\nUnfortunately, after sending to Apple, the app is rejected because of the following:\r\n\r\n```\r\nITMS-90338: Non-public API usage - The app references non-public symbols in [Our app name]: _SCDynamicStoreCreate, _SCDynamicStoreCreateRunLoopSource, _SCDynamicStoreKeyCreateNetworkServiceEntity, _SCDynamicStoreSetNotificationKeys. \r\nIf method names in your source code match the private Apple APIs listed above, altering your method names will help prevent this app from being flagged in future submissions. In addition, note that one or more of the above APIs may be located in a static library that was included with your app. If so, they must be removed. For further information, visit the Technical Support Information at http://developer.apple.com/support/technical/ \r\n```\r\n\r\nFrom what I understand, this is because the 4 methods (_SCDynamicStoreCreate, _SCDynamicStoreCreateRunLoopSource, _SCDynamicStoreKeyCreateNetworkServiceEntity, _SCDynamicStoreSetNotificationKeys) exists in the generated Mach-O binary.\r\n\r\n![Mach-O binary methods](https://github.com/dotnet/maui/assets/71713752/c23f4097-d445-4775-bce5-80cf96d53a98)\r\n\r\nThose methods are not used directly by our application but because of HttpClient we are using to request our business API\r\nThe methods are implemented in the System.Net.NetworkInformation assembly which is referenced in the System.Net.Http assembly\r\n\r\n![Assembly references](https://github.com/dotnet/maui/assets/71713752/5b729273-8eef-4c11-b81d-da04553e085a)\r\n![System Net NetworkInformation](https://github.com/dotnet/maui/assets/71713752/e2c7c3ed-9cbd-473c-9267-165128989c8c)\r\n\r\n```\r\nInstalled Workload Id      Manifest Version       Installation Source\r\n---------------------------------------------------------------------\r\nandroid                    34.0.113/8.0.100       VS 17.11.35005.142\r\nmaccatalyst                17.2.8053/8.0.100      VS 17.11.35005.142\r\nios                        17.2.8053/8.0.100      VS 17.11.35005.142\r\nmaui-windows               8.0.40/8.0.100         VS 17.11.35005.142\r\naspire                     8.0.0/8.0.100          VS 17.11.35005.142\r\n\r\nUse `dotnet workload search` to find additional workloads to install.\r\n```\n\n### Steps to Reproduce\n\n_No response_\n\n### Link to public reproduction project repository\n\n_No response_\n\n### Version with bug\n\n8.0.40 SR5\n\n### Is this a regression from previous behavior?\n\nNot sure, did not test other versions\n\n### Last version that worked well\n\nUnknown/Other\n\n### Affected platforms\n\niOS\n\n### Affected platform versions\n\nTargeted iOS version: 11.0\n\n### Did you find any workaround?\n\nNo workaround found\n\n### Relevant log output\n\n```shell\nITMS-90338: Non-public API usage - The app references non-public symbols in [Our app name]: _SCDynamicStoreCreate, _SCDynamicStoreCreateRunLoopSource, _SCDynamicStoreKeyCreateNetworkServiceEntity, _SCDynamicStoreSetNotificationKeys. \r\nIf method names in your source code match the private Apple APIs listed above, altering your method names will help prevent this app from being flagged in future submissions. In addition, note that one or more of the above APIs may be located in a static library that was included with your app. If so, they must be removed. For further information, visit the Technical Support Information at http://developer.apple.com/support/technical/\n```\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgx11aw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Cbws5",
                                           "createdAt":  "2024-06-24T08:16:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "github-actions",
                                           "body":  "Hi I\u0027m an AI powered bot that finds similar issues based off the issue title.\n\nPlease view the issues below to see if they solve your problem, and if the issue describes your problem please consider closing this one and thumbs upping the other issue to help us prioritize it. Thank you!\n\n\n### Closed similar issues:\n- [[Bug] Publishing maui rc2 app to App Store not working -- The app references non-public symbols in MyContactNetwork.MobileMaui: _proc_pidinfo (#3290)](https://github.com/dotnet/maui/issues/3290),  similarity score: 0.76\n- [Azure DevOps build failure: \"The app references non-public selectors in Payload/AppDev.xxx.app/AppDev.xxx: setOrientation:animated: (ID: 701d936c-b52e-4dae-8823-bec4e8848c61)\" (#14823)](https://github.com/dotnet/maui/issues/14823),  similarity score: 0.75\n- [Error publishing Net MAUI App VS Windows paired with Mac (#21701)](https://github.com/dotnet/maui/issues/21701),  similarity score: 0.74\n- [ITMS-91053: Missing API declaration on iOS app submission to App Store (#21296)](https://github.com/dotnet/maui/issues/21296),  similarity score: 0.73\n- [App Crash on starting - iOS Binding library - DYLD: Symbol not found (#16811)](https://github.com/dotnet/maui/issues/16811),  similarity score: 0.73\n\n\u003e Note: You can give me feedback by thumbs upping or thumbs downing this comment.",
                                           "updatedAt":  "2024-06-25T08:38:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CbwtA",
                                           "createdAt":  "2024-06-24T08:40:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "drasticactions",
                                           "body":  "SCDynamicStore is used by the runtime for NetworkChange (https://github.com/dotnet/runtime/blob/d38e5593427f63e513ca3be11c3fdccb07b88ce1/src/libraries/System.Net.NetworkInformation/src/System/Net/NetworkInformation/NetworkAddressChange.OSX.cs#L18) (https://github.com/dotnet/runtime/blob/bb63e362f4dce9db7caa70180ee3aef32cb36993/src/libraries/Common/src/Interop/OSX/Interop.SystemConfiguration.cs#L10) \r\n\r\n(assuming that this file is also used for iOS as well).\r\n\r\nI believe if you (or a library you are using) consume this function, then it will access SCDynamicStore and bring it in. Else, it would get linked out. This isn\u0027t an MAUI UI bug; it\u0027s more fundamental.\r\n\r\n@rolfbjarne Is there anything they can do to diagnose which component is pulling in SCDynamicStore? Could this be a bug?\r\n\r\n\r\n",
                                           "updatedAt":  "2024-06-24T08:40:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CbwtH",
                                           "createdAt":  "2024-06-24T09:30:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODn4Kxg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "omarhagoche",
                                                                               "createdAt":  "2024-06-24T14:32:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2024-07-01T10:46:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "rolfbjarne",
                                           "body":  "These functions are not private API, they\u0027re very much public:\r\n\r\n* https://developer.apple.com/documentation/systemconfiguration/1437828-scdynamicstorecreate?language=objc\r\n* https://developer.apple.com/documentation/systemconfiguration/1437797-scdynamicstorecreaterunloopsourc/\r\n* https://developer.apple.com/documentation/systemconfiguration/1517288-scdynamicstorekeycreatenetworkse\r\n* https://developer.apple.com/documentation/systemconfiguration/1437820-scdynamicstoresetnotificationkey?language=objc\r\n\r\nSo this looks like Apple updated their list of private APIs, and got it wrong (it wouldn\u0027t be the first time this has happened).\r\n\r\nTypically publishing again works (because someone else complained and Apple fixed it), otherwise you\u0027ll have to escalate this to Apple (forums, support ticket, etc.) ",
                                           "updatedAt":  "2024-06-24T09:30:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CbwtR",
                                           "createdAt":  "2024-06-24T09:39:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "clem0338",
                                           "body":  "@drasticactions:  Upon examining the main assembly (out of the bin folder), there is no usage of the `System.Net.NetworkInformation` namespace in our program or in the libraries used, only references to `System.Net.Http`.\r\n\r\n@rolfbjarne: I\u0027m very surprised to be the only one using System.Net.Http.HttpClient on iOS, is there any (cross platform) alternatives ?",
                                           "updatedAt":  "2024-06-24T09:39:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CbwtX",
                                           "createdAt":  "2024-06-24T09:48:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rolfbjarne",
                                           "body":  "\u003e @rolfbjarne Is there anything they can do to diagnose which component is pulling in SCDynamicStore?\r\n\r\nOne rather crude way (but it could be effective), would be to:\r\n\r\n* Build the project for device.\r\n* Search the project directory (including the bin and obj directories) for the function names.\r\n\r\nExample:\r\n\r\n```shell\r\n$ dotnet build /p:RuntimeIdentifier=ios-arm64 /p:Configuration=Release\r\n$ grep SCDynamicStoreCreate -R .\r\n\u003chopefully interesting output\u003e\r\n```\r\n\r\nThere are a lot of intermediate build files in the bin and obj directories, and which files contain mentions of these functions may reveal which code references them.\r\n\r\n",
                                           "updatedAt":  "2024-06-24T09:48:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Cbwta",
                                           "createdAt":  "2024-06-24T09:53:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "clem0338",
                                           "body":  "Thanks for your advice, here is the result (of course I replaced the app name)\r\n```\r\ncedric@MacMini2020 ca7de8d236573ef8d3d4f42f9a3be06280d8c75ec51ec0927c59e6aaa93a5d31 % grep -lr _SCDynamicStoreCreate\r\n./obj/Release/net8.0-ios/ios-arm64/ipa/Payload/[appname].app/[appname]\r\n./obj/Release/net8.0-ios/ios-arm64/nativelibraries/[appname]\r\n./obj/Release/net8.0-ios/ios-arm64/nativelibraries/aot-output/arm64/System.Net.NetworkInformation.dll.llvm.o\r\n./obj/Release/net8.0-ios/ios-arm64/nativelibraries/aot-output/arm64/System.Net.NetworkInformation.dll.o\r\n./obj/Release/net8.0-ios/ios-arm64/nativelibraries/aot-output/arm64/System.Net.NetworkInformation.dll.s\r\n./obj/Release/net8.0-ios/ios-arm64/nativelibraries/aot-output/arm64/System.Net.NetworkInformation.dll.s.opt.bc\r\n./obj/Release/net8.0-ios/ios-arm64/nativelibraries/aot-output/arm64/System.Net.NetworkInformation.dll.s.bc\r\n./bin/Release/net8.0-ios/ios-arm64/[appname].app.dSYM/Contents/Resources/Relocations/aarch64/[appname].yml\r\n./bin/Release/net8.0-ios/ios-arm64/[appname].app.dSYM/Contents/Resources/DWARF/[appname]\r\n./bin/Release/net8.0-ios/ios-arm64/[appname].app/[appname]\r\ncedric@MacMini2020 ca7de8d236573ef8d3d4f42f9a3be06280d8c75ec51ec0927c59e6aaa93a5d31 %\r\n```",
                                           "updatedAt":  "2024-06-24T09:53:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Cbwtf",
                                           "createdAt":  "2024-06-24T11:15:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rolfbjarne",
                                           "body":  "OK, so the reference is clearly from System.Net.NetworkInformation.dll.\r\n\r\nNote that you don\u0027t have to use this assembly yourself, any code you call may also call System.Net.NetworkInformation, which may make it rather difficult to remove.\r\n\r\nAs I said, my recommendation would be to contact Apple, because this clearly seems like an error on their side.",
                                           "updatedAt":  "2024-06-24T11:15:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Cbwtj",
                                           "createdAt":  "2024-06-24T12:08:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "clem0338",
                                           "body":  "I have created a ticket on Apple Developer Forum, just waiting for it to be ... approved. Wait and see",
                                           "updatedAt":  "2024-06-24T12:08:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Cbwtp",
                                           "createdAt":  "2024-06-24T16:12:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "PureWeen",
                                           "body":  "@clem0338 can we close this issue?",
                                           "updatedAt":  "2024-06-24T16:12:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Cbwtt",
                                           "createdAt":  "2024-06-24T16:17:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODnS-Bg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Kelvas09",
                                                                               "createdAt":  "2024-06-25T22:07:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "alvindutt",
                                                                               "createdAt":  "2024-06-26T06:22:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Alex-Witkowski",
                                                                               "createdAt":  "2024-06-26T07:12:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "FA72",
                                                                               "createdAt":  "2024-06-26T08:23:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "tfonfara",
                                                                               "createdAt":  "2024-06-26T10:11:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "mscholtus",
                                                                               "createdAt":  "2024-06-26T19:01:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "clem0338",
                                           "body":  "@PureWeen: Here is the thread in [Apple developer forum](https://developer.apple.com/forums/thread/757913). I also sent a contact request with no response so far. I\u0027d like this thread to stay open until further notice (or feedback from Apple).",
                                           "updatedAt":  "2024-06-24T16:17:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Cbwtz",
                                           "createdAt":  "2024-06-24T16:20:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "drasticactions",
                                           "body":  "IMO it should probably be moved to dotnet/runtime at least, since it\u0027s not a MAUI UI issue, but I do agree that it should stay open since it\u0027s related to the runtime, even if Apple needs to be the one to address it.",
                                           "updatedAt":  "2024-06-24T16:20:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Cby9u",
                                           "createdAt":  "2024-06-25T08:43:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "drasticactions",
                                           "body":  "Thanks @jfversluis!\r\n\r\nFor those triaging this, this is not a dotnet bug directly but Apple\u0027s reviewers flagged APIs within the runtime that they said were private, but are not. This should stay open until we know from Apple that this is resolved, in case others trying to submit apps get hit by this.",
                                           "updatedAt":  "2024-06-25T08:43:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CiN3c",
                                           "createdAt":  "2024-06-25T21:32:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODnNtdQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "QuSibuePRO",
                                                                               "createdAt":  "2024-06-25T22:08:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "FA72",
                                                                               "createdAt":  "2024-06-26T08:24:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "Kelvas09",
                                           "body":  "I have exactly the same issue tonight",
                                           "updatedAt":  "2024-06-25T21:32:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CiRml",
                                           "createdAt":  "2024-06-25T21:44:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tpitman",
                                           "body":  "Just got this issue. The weird thing is that I submitted the same app yesterday and didn\u0027t add anything having to do with http. That was already in there yesterday. In fact I even have records in the server from this app that use http to post those records.",
                                           "updatedAt":  "2024-06-25T21:44:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CkA4Z",
                                           "createdAt":  "2024-06-26T03:26:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODnS-MQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "alvindutt",
                                                                               "createdAt":  "2024-06-26T06:26:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Kelvas09",
                                                                               "createdAt":  "2024-06-26T06:29:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "pictos",
                                                                               "createdAt":  "2024-06-26T15:20:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "mscholtus",
                                                                               "createdAt":  "2024-06-26T19:02:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "alexcheer-milktechnz",
                                           "body":  "Hi all, I spoke to someone on the phone from Apple before finding this thread and they agreed that it was definitely a review issue and most likely not anything to do with .NET/MAUI, he said he was going to escalate it for me but the best bet was to email Apple Technical support from within the developer dashboard to get it to the right people.",
                                           "updatedAt":  "2024-06-26T03:26:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CkGOB",
                                           "createdAt":  "2024-06-26T03:48:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kiddkaffeine",
                                           "body":  "Just ran into this too.  Fun!  Definitely new, was not having this a week or two ago.",
                                           "updatedAt":  "2024-06-26T03:49:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ClBot",
                                           "createdAt":  "2024-06-26T05:31:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RichardChmielek",
                                           "body":  "Same here, was ok when pushed update to TestFlight yesterday, flagged as invalid binary today:\r\n\r\n`ITMS-90338`: Non-public API usage - The app references non-public symbols...:\r\n\r\n`_SCDynamicStoreCreate`, `_SCDynamicStoreCreateRunLoopSource`, `_SCDynamicStoreKeyCreateNetworkServiceEntity`, `_SCDynamicStoreSetNotificationKeys`",
                                           "updatedAt":  "2024-06-26T05:45:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CmER6",
                                           "createdAt":  "2024-06-26T07:32:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODnNWkw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "RichardChmielek",
                                                                               "createdAt":  "2024-06-26T07:37:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "omghb",
                                           "body":  "We have this issue as well. Apple just started to decline our TestFlight push since yesterday. The days before it was working just fine.",
                                           "updatedAt":  "2024-06-26T07:32:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CmbpW",
                                           "createdAt":  "2024-06-26T08:25:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "FA72",
                                           "body":  "Just assembled a new build and encountered the same problem. Luckily, I managed to publish the main changes on Friday and can at least release them.",
                                           "updatedAt":  "2024-06-26T08:25:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CmjEB",
                                           "createdAt":  "2024-06-26T08:41:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Alex-Witkowski",
                                           "body":  "Same here. +1 for pushing the issue. ",
                                           "updatedAt":  "2024-06-26T08:41:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Cmuv3",
                                           "createdAt":  "2024-06-26T09:04:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "waldevelop",
                                           "body":  "The same to me, the app can\u0027t be published in apple Store this morning. Yesterday it was working",
                                           "updatedAt":  "2024-06-26T09:04:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CnN-P",
                                           "createdAt":  "2024-06-26T10:10:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Yannikk1996",
                                           "body":  "Same here..",
                                           "updatedAt":  "2024-06-26T10:10:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CnlRI",
                                           "createdAt":  "2024-06-26T10:59:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DeepikaAon",
                                           "body":  "Same here, It was working yesterday ",
                                           "updatedAt":  "2024-06-26T10:59:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Cn0r3",
                                           "createdAt":  "2024-06-26T11:38:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "owaits",
                                           "body":  "Relieved to discover this issue as just spent the last two hours trying to work out why an app that is identical to an app I submitted yesterday gets refused today. I had come to the same conclusion that it was a change that Apple made and broke submission of MAUI apps. This issue has now confirmed that for me. Hope it gets fixed soon!!!",
                                           "updatedAt":  "2024-06-26T11:38:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CoSOu",
                                           "createdAt":  "2024-06-26T12:43:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "iXyles",
                                           "body":  "Another one here being affected",
                                           "updatedAt":  "2024-06-26T12:43:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CoTBf",
                                           "createdAt":  "2024-06-26T12:44:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODnRTqw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "andreykoniukh",
                                                                               "createdAt":  "2024-06-26T13:11:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "RichardChmielek",
                                                                               "createdAt":  "2024-06-26T13:47:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mscholtus",
                                                                               "createdAt":  "2024-06-26T14:51:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Saccomani",
                                                                               "createdAt":  "2024-06-26T15:15:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Kelvas09",
                                                                               "createdAt":  "2024-06-26T15:30:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "clem0338",
                                           "body":  "Thank you all, it\u0027s nice not to feel alone anymore.",
                                           "updatedAt":  "2024-06-26T12:44:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CpIjq",
                                           "createdAt":  "2024-06-26T14:13:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "erickvelasco11",
                                           "body":  "Apple: \"Ups! I did it again!\"\r\n+1 here with exactly same problem, at least my release is not priority, we will test with Android meanwhile.",
                                           "updatedAt":  "2024-06-26T14:13:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CpJ0e",
                                           "createdAt":  "2024-06-26T14:15:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rdiazubiera",
                                           "body":  "Same Issue here..",
                                           "updatedAt":  "2024-06-26T14:15:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Cpr14",
                                           "createdAt":  "2024-06-26T15:13:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Saccomani",
                                           "body":  "Same here...",
                                           "updatedAt":  "2024-06-26T15:13:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Cpzio",
                                           "createdAt":  "2024-06-26T15:28:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tpitman",
                                           "body":  "@rolfbjarne is there anything Microsoft can do to get Apple to fix this more quickly?",
                                           "updatedAt":  "2024-06-26T15:28:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Cp1J-",
                                           "createdAt":  "2024-06-26T15:31:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODoBugw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Saccomani",
                                                                               "createdAt":  "2024-06-26T15:31:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Kelvas09",
                                                                               "createdAt":  "2024-06-26T21:24:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "karelz",
                                                                               "createdAt":  "2024-07-02T09:46:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "rolfbjarne",
                                           "body":  "\u003e @rolfbjarne is there anything Microsoft can do to get Apple to fix this more quickly?\r\n\r\nAs far as I know Apple prioritizes based on number of customers affected. So if you all contact Apple (the more the better), then it\u0027s much more likely to get someone from Apple to take action asap.",
                                           "updatedAt":  "2024-06-26T15:31:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Cp15x",
                                           "createdAt":  "2024-06-26T15:32:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODnT8Ag==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Saccomani",
                                                                               "createdAt":  "2024-06-26T15:40:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "danielklokov-airbox",
                                                                               "createdAt":  "2024-06-26T15:47:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "waldevelop",
                                                                               "createdAt":  "2024-06-26T15:57:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mscholtus",
                                                                               "createdAt":  "2024-06-26T18:55:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Kelvas09",
                                                                               "createdAt":  "2024-06-26T21:24:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "anotherlab",
                                           "body":  "I just filed a support case for it.  We need to kick up the numbers on this one.",
                                           "updatedAt":  "2024-06-26T15:32:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CqCyH",
                                           "createdAt":  "2024-06-26T15:57:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODnRxmg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Saccomani",
                                                                               "createdAt":  "2024-06-26T16:30:33Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tpitman",
                                           "body":  "I just send a support request to apple as well.",
                                           "updatedAt":  "2024-06-26T15:57:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CqwUH",
                                           "createdAt":  "2024-06-26T17:17:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODnT8GQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mlaban",
                                                                               "createdAt":  "2024-06-26T18:30:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Kelvas09",
                                                                               "createdAt":  "2024-06-26T21:25:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "carmichaelalonso",
                                           "body":  "Same issue here and have also escalated to Apple. Thanks for creating this thread, let\u0027s hope for a quick fix",
                                           "updatedAt":  "2024-06-26T17:17:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CsEci",
                                           "createdAt":  "2024-06-26T20:39:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODnUChg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kpespisa",
                                                                               "createdAt":  "2024-06-26T21:39:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "kasperk81",
                                           "body":  "@ore300 reported it\u0027s working now",
                                           "updatedAt":  "2024-06-26T20:39:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CsP8H",
                                           "createdAt":  "2024-06-26T21:14:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODnUDdg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "carmichaelalonso",
                                                                               "createdAt":  "2024-06-26T21:42:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "owaits",
                                           "body":  "Its now working for me too, I was able to push my app to the App Store.",
                                           "updatedAt":  "2024-06-26T21:14:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CsT6C",
                                           "createdAt":  "2024-06-26T21:27:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODnUDcA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Saccomani",
                                                                               "createdAt":  "2024-06-26T21:38:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "carmichaelalonso",
                                                                               "createdAt":  "2024-06-26T21:42:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "rdiazubiera",
                                           "body":  "Yes, it is working now.",
                                           "updatedAt":  "2024-06-26T21:27:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CsZPA",
                                           "createdAt":  "2024-06-26T21:43:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "carmichaelalonso",
                                           "body":  "Confirmed it is working for us too now. No response from Apple yet but it must have been escalated to engineering. Good result either way :)",
                                           "updatedAt":  "2024-06-26T21:43:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Cs3Wd",
                                           "createdAt":  "2024-06-26T23:47:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alvindutt",
                                           "body":  "Confirmed this is working now ",
                                           "updatedAt":  "2024-06-26T23:47:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CtUm4",
                                           "createdAt":  "2024-06-27T02:12:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODnmCgA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "satish-dnv",
                                                                               "createdAt":  "2024-06-27T09:30:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "alvindutt",
                                                                               "createdAt":  "2024-06-27T23:01:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "RichardChmielek",
                                           "body":  "also works for me. Whoever help in getting this fixed on Apple\u0027s side this is a L E G E N D!",
                                           "updatedAt":  "2024-06-27T02:12:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Cx5oS",
                                           "createdAt":  "2024-06-27T08:39:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "clem0338",
                                           "body":  "Hi, \r\n\r\nI just built and sent a new version, and .... \r\n\r\n![2024-06-27 Blurred](https://github.com/dotnet/runtime/assets/71713752/8d90ccd4-ea91-4d66-a41e-a03af63c1e89)\r\n\r\nSo it looks it still not working for me, maybe the fix only works in US ?\r\n\r\nEdit: As you can see in the screenshot, I\u0027m on UK Timezone",
                                           "updatedAt":  "2024-06-27T08:40:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Cx6Pw",
                                           "createdAt":  "2024-06-27T08:41:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danielklokov-airbox",
                                           "body":  "\u003e Hi,\r\n\u003e \r\n\u003e I just built and sent a new version, and ....\r\n\u003e \r\n\u003e ![2024-06-27 Blurred](https://private-user-images.githubusercontent.com/71713752/343695560-8d90ccd4-ea91-4d66-a41e-a03af63c1e89.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTk0Nzc5NTYsIm5iZiI6MTcxOTQ3NzY1NiwicGF0aCI6Ii83MTcxMzc1Mi8zNDM2OTU1NjAtOGQ5MGNjZDQtZWE5MS00ZDY2LWE0MWUtYTAzYWY2M2MxZTg5LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA2MjclMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNjI3VDA4NDA1NlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWZhYTA1MWI3ZjJhODViZTI4M2I4Nzk5N2JiZDI0YTVjODUxMzI1MDE3MjNjMzZlNzNiYTA3ZjkwYWFkNTk3NWEmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.fprhp1RZb1IcUpMCg9TmnSsGgwVnzXxLaJ72oxYhvLo)\r\n\u003e \r\n\u003e So it looks it still not working for me, maybe the fix only works in US ?\r\n\u003e \r\n\u003e Edit: As you can see in the screenshot, I\u0027m on UK Timezone\r\n\r\nAll fine in UK",
                                           "updatedAt":  "2024-06-27T08:41:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CyRIi",
                                           "createdAt":  "2024-06-27T09:29:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "satish-dnv",
                                           "body":  "\u003e Hi,\r\n\u003e \r\n\u003e I just built and sent a new version, and ....\r\n\u003e \r\n\u003e ![2024-06-27 Blurred](https://private-user-images.githubusercontent.com/71713752/343695560-8d90ccd4-ea91-4d66-a41e-a03af63c1e89.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTk0ODA3NzUsIm5iZiI6MTcxOTQ4MDQ3NSwicGF0aCI6Ii83MTcxMzc1Mi8zNDM2OTU1NjAtOGQ5MGNjZDQtZWE5MS00ZDY2LWE0MWUtYTAzYWY2M2MxZTg5LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA2MjclMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNjI3VDA5Mjc1NVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWM3MzhhMmRhNDAzMzBjNTcxMjhmNTExMzg2ZGJmZjVlMDNjNzQyYzcwNjYwODdlNzM5ZjYyYTBiMjFlNjZlOTQmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.mEtEul3v3g-xfLB7uiTTnfaW7AKkPmRY-W9mTskQYiY)\r\n\u003e \r\n\u003e So it looks it still not working for me, maybe the fix only works in US ?\r\n\u003e \r\n\u003e Edit: As you can see in the screenshot, I\u0027m on UK Timezone\r\n\r\nI\u0027m on IST time zone, but it is working for me now.",
                                           "updatedAt":  "2024-06-27T09:29:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DHGhX",
                                           "createdAt":  "2024-07-01T09:32:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "clem0338",
                                           "body":  "I\u0027m desperate, I\u0027m still not able to submit.\r\n\r\nI sent two builds last Friday + 1 this morning + another one using VPN in case my \"local Apple validation server\" was the issue.\r\n\r\nThey are all rejected with the exact same message.\r\n\r\nApple did respond to me:\r\n```\r\nHello Cédric,\r\n\r\n\r\nThank you for contacting App Review Support, my name is Orlando and I will be happy to assist you.  I am following up with you regarding the status of your app.\r\n\r\n\r\nYour app is in the “Ready for Distribution” status on the App Store as of February 27, 2024. \r\n\r\n\r\nIf you need further assistance, or if your app isn\u0027t visible on the store within 24 hours, please contact Apple Developer Program Support. Click “App Set Up and Distribution,” then click “App Store Search and Discoverability.” \r\n\r\n\r\nIf you have additional questions related to this request, please don\u0027t hesitate to reply to this email. I\u0027ll be happy to help.\r\n\r\n\r\nYour case number is: [Case number].\r\n\r\n\r\nBest regards,\r\n\r\n\r\nOrlando\r\n\r\nApple Inc.\r\n```\r\n\r\nThen (after sending more details):\r\n```\r\nHello Cédric, \r\n\r\n\r\nMy name is Bettina and I am with Apple Developer Support. I’m following up on your inquiry concerning the new version submission of your app “[App name]”\r\n\r\n\r\nIn reviewing your latest build delivery, we found an unexpected error in its processing. Details about the error should have been sent to you shortly after the delivery via automated email. Check your inbox and spam folders for this email. \r\n\r\n\r\nIf you\u0027re not able to locate the email, please add “no_reply@email.apple.com” as a valid email contact and attempt to redeliver the build with a higher build number. This typically resolves the issue. \r\n\r\n\r\nIf you do not receive the email detailing the error within 24 hours of submitting the new build, please respond with the following information: \r\n\r\n    App name\r\n    Apple ID of the app\r\n    Prerelease version and build number that is currently processing\r\n    A screenshot illustrating the current build or builds processing in the TestFlight section of App Store Connect\r\n\r\nAfter we receive the requested information, we will investigate further and let you know when we have an update. \r\n\r\n\r\nExplore developer resources to get answers to frequently asked questions, watch video tutorials, stay up to date with the latest news, and more. \r\n\r\n\r\nDon\u0027t hesitate to follow-up if you have any further questions or concerns. I\u0027m here to help. \r\n\r\n\r\nFor your convenience, the case number for this correspondence is [Case number].\r\n\r\n\r\nBest regards,\r\n\r\n\r\nBettina\r\n\r\nApple Inc. \r\n```\r\n\r\n\r\nIt means they did not even take a loot at this thread, the one on Apple forum, and - this is the most disturbing - to the details I sent in my contact request. This is totally pointless",
                                           "updatedAt":  "2024-07-01T09:32:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DHXVr",
                                           "createdAt":  "2024-07-01T10:07:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-01T10:07:03Z"
                                       }
                                   ],
                         "totalCount":  45
                     },
        "title":  "App refused by Apple with error ITMS-90338: Non-public API usage",
        "labels":  [
                       "area-System.Net",
                       "tracking-external-issue",
                       "os-ios"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/104591",
        "createdAt":  "2024-07-09T06:59:23Z",
        "number":  104591,
        "author":  "plachor",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC-3fSQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KrzysztofBranicki",
                                            "createdAt":  "2024-07-09T09:51:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "grsw92",
                                            "createdAt":  "2024-07-09T15:01:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "andwi",
                                            "createdAt":  "2025-02-07T09:45:50Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2024-07-09T15:45:31Z",
        "body":  "### Background and motivation\n\nHi, in .NET8 you have added `IpNetwork` struct. It allows to check if given `IpAddress` is within given network. Until .NET8 we had to relay on external library that provided such type. This great you provided your own implementation since it is over 34 times more efficient than its opensource competitor additionally almost zero allocations are made when constructing this instance or checking if it contains given `IpAddress` :+1: . \r\n\r\nHowever it seems you type is very constrained for now we miss additional features like:\r\n1) possibility to calculate `Network` for given `IpAddress` and `PrefixLength`\r\n2) possibility to calculate `Broadcast` for given `IpNetwork`\r\n3) possibility to check if one `IpNetwork` contains another `IpNetwork`\r\n\r\nDo you plan such functionalities in any form in upcoming releases also does my proposals make sens when it comes to logic of such contains and broadcast address calculations ?\n\n### API Proposal\n\n### 1) Possibility to calculate `Network` for given `IpAddress` and `PrefixLength`:\r\nYou already have that logic in code I believe you just do not expose it, you could of course  extract common part to private method for both (https://github.com/dotnet/runtime/blob/main/src/libraries/System.Net.Primitives/src/System/Net/IPNetwork.cs#L205-L236).\r\n```csharp\r\npublic static IPAddress CalculateNetwork(IPAddress baseAddress, int prefixLength)\r\n{\r\n    if (baseAddress.AddressFamily == AddressFamily.InterNetwork)\r\n    {\r\n        // The cast to long ensures that the mask becomes 0 for the case where \u0027prefixLength == 0\u0027.\r\n        uint mask = (uint)((long)uint.MaxValue \u003c\u003c (32 - prefixLength));\r\n        if (BitConverter.IsLittleEndian)\r\n        {\r\n            mask = BinaryPrimitives.ReverseEndianness(mask);\r\n        \r\n        return new IPAddress(baseAddress.PrivateAddress \u0026 mask);\r\n    }\r\n    else\r\n    {\r\n        UInt128 value = default;\r\n        baseAddress.TryWriteBytes(MemoryMarshal.AsBytes(new Span\u003cUInt128\u003e(ref value)), out int bytesWritten);\r\n        Debug.Assert(bytesWritten == IPAddressParserStatics.IPv6AddressBytes);\r\n        if (prefixLength == 0)\r\n        {\r\n            return new IPAddress(UInt128.Zero);\r\n        \r\n        UInt128 mask = UInt128.MaxValue \u003c\u003c (128 - prefixLength);\r\n        if (BitConverter.IsLittleEndian)\r\n        {\r\n            mask = BinaryPrimitives.ReverseEndianness(mask);\r\n        \r\n        return new IPAddress(value \u0026 mask);\r\n    }\r\n}\r\n```\r\n\r\n### 2) Possibility to calculate `Broadcast` for given `IpNetwork`:\r\nSince `BaseAddress` is `Network` as I understand it than you could calculate BroadcastAddress on demand using such approach. If you consider it better it could be calculated upfront in ctor. \r\n```csharp\r\npublic IPAddress BroadcastAddress\r\n{\r\n    get\r\n    {\r\n        if (BaseAddress.AddressFamily == AddressFamily.InterNetwork)\r\n        {\r\n            // The cast to long ensures that the mask becomes 0 for the case where \u0027prefixLength == 0\u0027.\r\n            uint mask = (uint)((long)uint.MaxValue \u003c\u003c (32 - PrefixLength));\r\n            if (BitConverter.IsLittleEndian)\r\n            {\r\n                mask = BinaryPrimitives.ReverseEndianness(mask);\r\n            \r\n            return new IPAddress(BaseAddress.PrivateAddress + ~mask);\r\n        }\r\n        else\r\n        {\r\n            UInt128 value = default;\r\n            BaseAddress.TryWriteBytes(MemoryMarshal.AsBytes(new Span\u003cUInt128\u003e(ref value)), out int bytesWritten);\r\n            Debug.Assert(bytesWritten == IPAddressParserStatics.IPv6AddressBytes);\r\n            if (PrefixLength == 0)\r\n            {\r\n                return new IPAddress(UInt128.MaxValue);\r\n            \r\n            UInt128 mask = UInt128.MaxValue \u003c\u003c (128 - PrefixLength);\r\n            if (BitConverter.IsLittleEndian)\r\n            {\r\n                mask = BinaryPrimitives.ReverseEndianness(mask);\r\n            \r\n            return IPAddress(value + ~mask);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### 3) Possibility to check if one `IpNetwork` contains another `IpNetwork`:\r\nGiven we have Network address and Broadcast address we can check if network is subset of current network with such approach. \r\n```csharp\r\npublic bool Contains(IPNetwork network) =\u003e Contains(network.BaseAddress) \u0026\u0026 Contains(network.BroadcastAddress);\r\n```\n\n### API Usage\n\n```csharp\r\npublic void UsageSample(IPNetwork subnet)\r\n    {\r\n        // finds our network address is \"10.0.0.0\"\r\n        var networkAddress = IPNetwork.CalculateNetwork(IPAddress.Parse(\"10.0.0.2\"), 8);\r\n        \r\n        var network = new IPNetwork(networkAddress, 8);\r\n        if (network.Contains(subnet))\r\n        {\r\n            // this is subnet of our network - do some work\r\n        }\r\n    }\r\n```\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhCDo5A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6EIOjk",
                                           "createdAt":  "2024-07-09T06:59:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-09T06:59:44Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[API Proposal]: `IpNetwork` does not allow to check if another network is subnet of current network",
        "labels":  [
                       "api-suggestion",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/104808",
        "createdAt":  "2024-07-12T16:04:46Z",
        "number":  104808,
        "author":  "StringEpsilon",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC94NLw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "davidroth",
                                            "createdAt":  "2024-12-05T09:52:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "maxkagamine",
                                            "createdAt":  "2025-01-04T23:17:24Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-12-09T10:22:53Z",
        "body":  "### Background and motivation\n\nI have a case in the hot path of a library of mine where I am working with ReadOnlySpan\u003cchar\u003e that I have to put through `HtmlEncode()`:\r\n\r\n```cs\r\ninternal string MyMethod(ReadonlySpan\u003cchar\u003e input) \r\n{\r\n    /* misc. work with the input */\r\n   return WebUtility.HtmlEncode(input.ToString());\r\n}\r\n```\r\n\r\nThis is an unnecessary performance penalty, because the very first thing `HtmlEncode`  does is `ReadOnlySpan\u003cchar\u003e valueSpan = value.AsSpan();`\r\n\r\nI did some naive testing with some real inputs for my library with a HtmlEncode overload that I made by copying the runtime implementation into my project: \r\n\r\n| Method                |       Mean |     Gen0 |   Allocated |\r\n| --------------------- | --------- | ------- | ---------- |\r\n| ProcessWithHtmlEcode(string)     |   12.02 us |   0.1068 |    35.57 KB |\r\n| ProcessWithHtmlEncode(ROS\u003cchar\u003e) |   11.03 us |   0.0763 |    28.74 KB |\r\n\n\n### API Proposal\n\n```diff\r\nnamespace System.Net;\r\n\r\npublic static class WebUtility\r\n{\r\n+   public static string? HtmlEncode(ReadOnlySpan\u003cchar\u003e value);\r\n+   public static void HtmlEncode(ReadOnlySpan\u003cchar\u003e value, TextWriter output);\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\nReadOnlySpan\u003cchar\u003e value = ...;\r\nreturn WebUtility.HtmlEncode(value);\r\n```\r\n\n\n### Alternative Designs\n\nn/a\n\n### Risks\n\nn/a",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOljEOHw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6ErHGG",
                                           "createdAt":  "2024-07-12T16:05:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-12T16:05:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6E7ACH",
                                           "createdAt":  "2024-07-16T05:32:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lsoft",
                                           "body":  "A `HtmlDecode(ReadOnlySpan\u003cchar\u003e s)` issue https://github.com/dotnet/runtime/issues/81411 (for visibility)",
                                           "updatedAt":  "2024-07-16T05:32:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6E_WSt",
                                           "createdAt":  "2024-07-16T15:16:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "Triaging same way as https://github.com/dotnet/runtime/issues/81411",
                                           "updatedAt":  "2024-07-16T15:16:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FTVIa",
                                           "createdAt":  "2024-07-18T13:00:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jilles-sg",
                                           "body":  "The System.Text.Encodings.Web namespace has an HTML encoder (among other encoders and decoders) that can encode from a span to a span. This may be a good choice for this use case, especially if the encoded result has to be concatenated with other things to obtain the result that needs to be stored for longer.\r\n\r\nBe aware that the encoders in the System.Text.Encodings.Web namespace have some defence-in-depth measures that may result in slightly different output (at least by default).",
                                           "updatedAt":  "2024-07-18T13:00:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FmEfF",
                                           "createdAt":  "2024-07-21T00:23:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "StringEpsilon",
                                           "body":  "Forgot to reply. The `System.Text.Encodings.Web.HtmlEncoder` is definitely useful, but I still have cases where I have a span input and want a string returned and not manage the in between myself the way I\u0027d have to do with the `TextEncoder` APIs.  And in this case it\u0027s - potentially - as simple as adding an overload and moving where the internal `.AsSpan()` happens.\r\n\r\n",
                                           "updatedAt":  "2024-07-21T00:23:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6WMQ4f",
                                           "createdAt":  "2024-12-05T09:52:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEBD5Bg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nil4",
                                                                               "createdAt":  "2024-12-05T18:46:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maxkagamine",
                                                                               "createdAt":  "2025-01-04T23:17:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "davidroth",
                                           "body":  "I am looking for an additional api with the combination of ReadOnlySpan + StringBuilder:\n\n```csharp\nnamespace System.Net;\n\npublic static class WebUtility\n{\n    public static void HtmlEncode(ReadOnlySpan\u003cchar\u003e value, StringBuilder output);\n}\n```\n\n**Reason**: This allows me to pass my existing StringBuilder directly without having to create a new StringWriter instance just to wrap my existing StringBuilder.",
                                           "updatedAt":  "2024-12-09T10:22:53Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "[API Proposal]: ReadOnlySpan\u003cchar\u003e overload for WebUtility.HtmlEncode.",
        "labels":  [
                       "api-suggestion",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/105865",
        "createdAt":  "2024-08-02T11:53:08Z",
        "number":  105865,
        "author":  "kevingosse",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-08-14T16:04:59Z",
        "body":  "### Description\r\n\r\nWe spotted the following failure in our CI, on .NET 8.0.0:\r\n\r\n```\r\nThe active test run was aborted. Reason: Test host process crashed : Unhandled exception. System.NullReferenceException: Object reference not set to an instance of an object.\r\n   at System.Net.HttpConnection.get_LocalEndPoint()\r\n   at System.Net.HttpListenerRequest.FinishInitialization()\r\n   at System.Net.HttpConnection.OnReadInternal(IAsyncResult ares)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunCallback(ContextCallback callback, Object state, Task\u0026 currentTask)\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Task.\u003c\u003ec.\u003cThrowAsync\u003eb__128_1(Object state)\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n   at System.Threading.PortableThreadPool.WorkerThread.WorkerThreadStart()\r\n```\r\n\r\nThis looks a lot like https://github.com/dotnet/runtime/issues/91014, which was fixed in the 9.0 branch (https://github.com/dotnet/runtime/pull/91234).\r\nThere were talks about backporting the fix to 8.0 but I see no evidence that it has been done. Are there still plans to do so?\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOiHJ6Vw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6HCQb-",
                                           "createdAt":  "2024-08-02T14:26:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-08-02T14:26:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6IcnpX",
                                           "createdAt":  "2024-08-14T16:04:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "there is currently no plan for backport. I\u0027m not sure this would meet servicing bar and 9.0 is just around the corner e.g. may be out sooner than any servicing. \r\nAny more thoughts on this @karelz ? ",
                                           "updatedAt":  "2024-08-14T16:04:52Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "NullReferenceException in System.Net.HttpConnection.get_LocalEndPoint",
        "labels":  [
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/106969",
        "createdAt":  "2024-08-26T08:53:17Z",
        "number":  106969,
        "author":  "emilsteen",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-08-26T16:33:30Z",
        "body":  "### Description\r\n\r\nAfter upgrading a Xamarin.Forms project to MAUI the Dns.GetHostEntry(hostNameOrAddress) started to throw exceptions when ran in a customer’s network, running on Zebra phones with Android 10. The exception is \"hostname nor servname provided, or not known\". \r\n\r\nInstalling the Xamarin.Forms version of the app one the same device, in the same network, works. The socket connection code running Dns.GetHostEntry(hostNameOrAddress) is exactly the same in both versions. But in Xamarin.Forms Dns.GetHostEntry(hostNameOrAddress) returns a proper IPHostEntry instead of an exception.\r\n\r\nThe issue does not seem to occur everywhere, and it seems to be depending on both the router and the Android device, and is more frequent on Zebra phones (TC26 and TC57). The error occurs when trying to connect to a local server, both ip-address and hostname will throw the same exception. But connecting to a public IP works fine (public host name will probably also work but is not yet tested).\r\n\r\nI have not been able to reproduce the exact same issue locally, but when trying to find the issue, I found a similar problem. When connected to a test router from an Android phone, I get the same exception from Dns.GetHostEntry(hostNameOrAddress) when \"mobile data\" is turned on on the phone. But when turning \"mobile data\" off, the Dns.GetHostEntry(hostNameOrAddress) returns a proper IPHostEntry. The most of the test routers I have connected to in the lab do not have internet access, but I do not see any difference if the local test routers are connected to the internet or not.\r\n\r\n\r\n\r\nSwitching between different Wi-Fi networks sometimes resolves the issue, but rebooting the Android device will bring it back.\r\n\r\nTested on Android devices Samsung Galaxy S22 (Android 14) and Zebra TC26 (Android 10) and TC57 (Android 8.1).\r\n\r\n**Test result with different routers:**\r\n\r\nLinksys WRT1900AC: Issue on Zebra, but working on Samsung.\r\n\r\nNetgear WNDR3700 (running DD-WRT v.3.0): Issue on both Zebra and Samsung.\r\n\r\nTeltonika RUT240: Issue on Zebra, but working on Samsung.\r\n\r\nUnifi network: Working on both Zebra and Samsung.\r\n\r\n\r\nTested with MAUI 8.0.21 and 8.0.80, but since the issue seems to be in System.Net, the MAUI version will probably not make any difference.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Connect wifi on Android device to local network.\r\n2. Enable Mobile Data on Android Device.\r\n3. Try and get an IPHostEntry from Dns.GetHostEntry(hostNameOrAddress) (with hostname or ip-address).\r\n4. If you have an unlucky combination of Android device and router, you will get an Exception instead of an IPHostEntry.\r\n\r\n### Link to public reproduction project repository\r\n\r\nhttps://github.com/CognitioConsulting/DnsGetHostEntryIssue\r\n\r\n### Version with bug\r\n\r\n8.0.21 SR4.1\r\n\r\n### Is this a regression from previous behavior?\r\n\r\nYes, this used to work in Xamarin.Forms\r\n\r\n### Last version that worked well\r\n\r\nUnknown/Other\r\n\r\n### Affected platforms\r\n\r\nAndroid\r\n\r\n### Affected platform versions\r\n\r\nTested on Android 8, 10 and 14.\r\n\r\n### Did you find any workaround?\r\n\r\nThe only workaround I found is to NOT connect to the server using IPHostEntry, but connect to the server by parsing the ip-address with IPAddress.Parse(). This means that the users cannot connect to the server using a host name.\r\n\r\nIn my test lab I can get GetHostEntry() to work by disabling mobile data on the device, but that is not something that I can expect the customers to do.\r\n\r\n### Relevant log output\r\n\r\n```shell\r\nHere is the call stack from a faulty non-async call:\r\n\r\nSystem.Net.Dns.GetHostEntryOrAddressesCore(IPAddress , Boolean , AddressFamily , Nullable`1 )\r\n\r\nSystem.Net.Dns.GetHostEntryCore(IPAddress , AddressFamily , Nullable`1 )\r\n\r\nSystem.Net.Dns.GetHostEntry(String , AddressFamily )\r\n\r\nSystem.Net.Dns.GetHostEntry(String )\r\n```\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOibiwug==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6JtPYm",
                                           "createdAt":  "2024-08-26T08:53:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "github-actions",
                                           "body":  "Hi I\u0027m an AI powered bot that finds similar issues based off the issue title.\n\nPlease view the issues below to see if they solve your problem, and if the issue describes your problem please consider closing this one and thumbs upping the other issue to help us prioritize it. Thank you!\n\n\n### Closed similar issues:\n- [iOS only SocketException No route to host (#14224)](https://github.com/dotnet/maui/issues/14224),  similarity score: 0.73\n- [NetworkInterface.GetAllNetworkInterfaces() on Android leads to FileNotFoundException (\u0027/etc/resolv.conf\u0027) (#3617)](https://github.com/dotnet/maui/issues/3617),  similarity score: 0.72\n- [Hostname not verified when sending request on Android (#8518)](https://github.com/dotnet/maui/issues/8518),  similarity score: 0.71\n\n\u003e Note: You can give me feedback by thumbs upping or thumbs downing this comment.",
                                           "updatedAt":  "2024-08-26T08:53:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JtPY9",
                                           "createdAt":  "2024-08-26T09:01:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "acaliaro",
                                           "body":  "@emilsteen maybe this could be useful [https://acaliaro.wordpress.com/2023/06/06/read-the-ip-address-of-an-android-device-using-dotnet-maui/](https://acaliaro.wordpress.com/2023/06/06/read-the-ip-address-of-an-android-device-using-dotnet-maui/)",
                                           "updatedAt":  "2024-08-26T09:01:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JtPZE",
                                           "createdAt":  "2024-08-26T09:02:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "emilsteen",
                                           "body":  "Thank you for the virus links @Wanderx13  and @pilot5657.\r\nUpdate: @Wanderx13  and @pilot5657 got deleted after report.",
                                           "updatedAt":  "2024-08-26T14:19:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JtPZI",
                                           "createdAt":  "2024-08-26T09:10:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "emilsteen",
                                           "body":  "@acaliaro Thank you, but that looks like I will only get the IP of the Android device, the code is trying get a IPHostEntry to a server. \r\nI\u0027ve tried to update the issue if it was unclear.",
                                           "updatedAt":  "2024-08-26T09:10:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JtPj_",
                                           "createdAt":  "2024-08-26T14:20:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-08-26T14:20:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JuLC6",
                                           "createdAt":  "2024-08-26T16:17:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-android\u0027: @vitek-karas, @simonrozsival, @steveisok, @akoeplinger\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-08-26T16:17:55Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "MAUI Dns.GetHostEntry(hostNameOrAddress) on Android returns \"hostname nor servname provided, or not known\", where Xamarin.Forms worked",
        "labels":  [
                       "area-System.Net",
                       "os-android"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/107339",
        "createdAt":  "2024-09-04T08:25:18Z",
        "number":  107339,
        "author":  "pavelsavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-02-17T09:31:09Z",
        "body":  "```\r\nDnsBeginGetHostAddresses_BadName_Throws\r\nDnsObsoleteBeginGetHostByName_IPv4String_ReturnsOnlyGivenIP\r\nDnsObsoleteGetHostByName_EmptyString_ReturnsHostName\r\nDnsGetHostEntry_BadName_ThrowsSocketException\r\nDnsGetHostEntry_LocalHost_ReturnsFqdnAndLoopbackIPs\r\nTryGetAddrInfo_LocalHost\r\nTryGetAddrInfo_EmptyHost\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOisX7Jw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6KxfnE",
                                           "createdAt":  "2024-09-04T08:25:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-04T08:25:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Kxfsn",
                                           "createdAt":  "2024-09-04T08:25:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-04T08:25:37Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[WASI] failing System.Net.NameResolution tests",
        "labels":  [
                       "arch-wasm",
                       "area-System.Net",
                       "disabled-test",
                       "os-wasi"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/107659",
        "createdAt":  "2024-09-10T22:23:42Z",
        "number":  107659,
        "author":  "ode2code95",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-09-11T19:12:16Z",
        "body":  "### Background and motivation\r\n\r\nWe should be able to easily retrieve all of the properties displayed with `ipconfig /all` with the classes in the `System.Net.NetworkInformation` namespace:\r\n\u003cbr\u003e\r\n![CleanShot 2024-09-10 at 18 42 16@2x](https://github.com/user-attachments/assets/ea150ad4-8e0b-46b1-866e-9256a1fa302f)\r\n\u003cbr\u003e\r\nThe `IPv4InterfaceProperties` class in `System.Net.NetworkInformation` yields a number of the IPv4 metrics for network adapters. It includes `IsDhcpEnabled` but not the `DhcpLeaseExpires` or the `DhcpLeaseObtained` properties from WMI. The current workaround is to query WMI directly using [the `Win32_NetworkAdapterConfiguration` class](https://learn.microsoft.com/en-us/windows/win32/cimwin32prov/win32-networkadapterconfiguration?redirectedfrom=MSDN).\r\n\r\n### API Proposal\r\n\r\n```csharp\r\nnamespace System.Net.NetworkInformation;\r\n\r\n// src/libraries/System.Net.NetworkInformation/src/System/Net/NetworkInformation/IPv4InterfaceProperties.cs\r\npublic class IPv4InterfaceProperties\r\n{\r\n    // ... add these two properties:\r\n    public DateTime DhcpLeaseExpires { get; }\r\n    public DateTime DhcpLeaseObtained { get; }\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\n```csharp\r\n// Print the DHCP lease origin and expiration for each network interface:\r\nforeach (var ifc in NetworkInterface.GetAllNetworkInterfaces())\r\n{\r\n    var ipv4Props = ifc.GetIPProperties().GetIPv4Properties();\r\n    Console.WriteLine($\"Name: {ifc.Name}\");\r\n    Console.WriteLine($\"DHCP Lease Obtained: {ipv4Props.DhcpLeaseObtained}\");\r\n    Console.WriteLine($\"DHCP Lease Expires: {ipv4Props.DhcpLeaseExpires}\");\r\n}\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\nPerhaps an [`IPAddress`](https://learn.microsoft.com/en-us/dotnet/api/System.Net.IPAddress?view=net-8.0) instance has better access to these properties?\r\n\r\n### Risks\r\n\r\nNone that I can see. We are already querying WMI for other properties from the `Win32_NetworkAdapterConfiguration` class.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOi72aKg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6LmypD",
                                           "createdAt":  "2024-09-10T22:24:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-10T22:24:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Lt9YL",
                                           "createdAt":  "2024-09-11T16:05:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "this may be difficult to get it working on all platforms as the info may be  proprietary to given implementation.  ",
                                           "updatedAt":  "2024-09-11T16:05:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LvZoq",
                                           "createdAt":  "2024-09-11T19:03:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ode2code95",
                                           "body":  "I did just discover this afternoon another workaround using the [`UnicastIPAddressInformation.DhcpLeaseLifetime`](https://learn.microsoft.com/en-us/dotnet/api/System.Net.NetworkInformation.UnicastIPAddressInformation.DhcpLeaseLifetime?view=net-8.0) property. Somehow I had missed this one yesterday. This is the number of seconds until lease expiration, and we can calculate the DateTime from that if we want it.\r\n\r\nThis property is annotated as Windows-specific.\r\n\r\nI have not tested it yet, but I\u0027m assuming if we read this property on the interface\u0027s IPv4 address we should get the answer we are looking for. I\u0027ll admit that I do not understand DHCP with regards to IPv6 yet.",
                                           "updatedAt":  "2024-09-11T19:12:16Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[API Proposal]: Add `DhcpLeaseExpires` and `DhcpLeaseObtained` to IPv4InterfaceProperties",
        "labels":  [
                       "api-suggestion",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/107741",
        "createdAt":  "2024-09-12T14:41:00Z",
        "number":  107741,
        "author":  "pavelsavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-17T12:38:08Z",
        "body":  "From [comment](https://github.com/dotnet/runtime/pull/107351#discussion_r1756825926)\r\n\r\nnit: it feels slightly wrong doing this special case in the Interop.GetHostName.cs managed binding layer, but calling into native code just for getting a constant string feels wrong too.\r\n\r\nBtw. after looking at it some more I think we have an issue on Browser: we do use emscripten\u0027s gethostname() which returns the string `emscripten` and we just paper over it here: https://github.com/dotnet/runtime/blob/4cdbfdcca352e0f12e4829eb3fec638d717add51/src/libraries/System.Private.CoreLib/src/System/Environment.Browser.cs#L13-L15\r\n\r\nBut Interop.Sys.GetHostName() is used in more places and those would get the \"wrong\" hostname on Browser. I think I\u0027d be in favor of unifying this and adding the special case for Browser here too.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOi9y4ag==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6L3K4r",
                                           "createdAt":  "2024-09-12T14:41:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-12T14:41:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6L3LBn",
                                           "createdAt":  "2024-09-12T14:41:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-12T14:41:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6L3Lhq",
                                           "createdAt":  "2024-09-12T14:42:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "cc @akoeplinger ",
                                           "updatedAt":  "2024-09-12T14:42:08Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[wasm] unify Interop.GetHostName",
        "labels":  [
                       "arch-wasm",
                       "area-System.Net",
                       "os-wasi",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/107981",
        "createdAt":  "2024-09-18T12:44:42Z",
        "number":  107981,
        "author":  "pavelsavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-12-12T19:24:47Z",
        "body":  "```\nArgumentValidation_ThrowsExpectedException\nRead_DataStoredAtDesiredOffset\nWrite_DataReadFromDesiredOffset\nArgumentValidation_ThrowsExpectedException\nReadWrite_Success_Large\nReadWrite_Success\nRead_DataStoredAtDesiredOffset\nWrite_DataReadFromDesiredOffset\nZeroByteRead_BlocksUntilDataAvailableOrNops\nAcceptGetsCanceledByDispose\nAcceptAsync_CanceledDuringOperation_Throws\nConnect_DatagramSockets_DontThrowConnectedException_OnSecondAttempt\nCtor_Raw_NotSupported_ExpectedError\nCtor_SafeHandle_SocketPair_Success\nTcpClientSocket_WhenBoundToWildcardAddress_LocalEPChangeToSpecificOnConnect\nEventSource_ExistsWithCorrectId\nCtor_SocketBool_CanReadAndWrite\nDisposedClosed_MembersThrowObjectDisposedException\nIOControl_FIONREAD_Success\nClosedDuringOperation_Throws_ObjectDisposedExceptionOrSocketException\nSocketConnectAsync_IPAddressAny_SocketAsyncEventArgsReusableAfterFailure\nAccept_AcceptsPendingSocketOrClient\nAccept_StartAfterStop_AcceptsSuccessfully\nEventSource_ExistsWithCorrectId\nSendRecv_0ByteReceive_Success\nReceive0ByteReturns_WhenPeerDisconnects\nSendRecv_NoBuffering_Success\nUdpReceiveGetsCanceledByDispose\nCanceledOneOfMultipleReceives_Udp_Throws\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjJHp_w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Mkef0",
                                           "createdAt":  "2024-09-18T12:44:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-18T12:44:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Mken_",
                                           "createdAt":  "2024-09-18T12:45:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-18T12:45:04Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[WASI] failing System.Net.Sockets tests",
        "labels":  [
                       "arch-wasm",
                       "area-System.Net",
                       "disabled-test",
                       "os-wasi"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/108151",
        "createdAt":  "2024-09-23T18:03:20Z",
        "number":  108151,
        "author":  "pavelsavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-02-17T09:30:58Z",
        "body":  "Depends on https://github.com/WebAssembly/wasi-libc/issues/539",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjTQaOg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6NNBeM",
                                           "createdAt":  "2024-09-23T18:03:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-23T18:03:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6NNBo6",
                                           "createdAt":  "2024-09-23T18:03:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-23T18:03:47Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[WASI][socket] WriteTimeout, ReadTimeout missing",
        "labels":  [
                       "arch-wasm",
                       "area-System.Net",
                       "os-wasi"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/109113",
        "createdAt":  "2024-10-22T12:53:11Z",
        "number":  109113,
        "author":  "antonfirsov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC8CiHg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rzikm",
                                            "createdAt":  "2024-10-22T13:22:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "CarnaViire",
                                            "createdAt":  "2024-10-22T13:53:54Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-10-22T12:53:39Z",
        "body":  "This is a follow up on #108703 which migrated from Compose standalone (`docker-compose`) to Compose plugin (`docker compose`) on Windows.\n\n`docker-compose` is deprecated and broken in some environments, see https://github.com/docker/compose/issues/11742. While it works on CI currently, it might lead to problems in developer inner loop. We should harmonize our scripts and yamls to use `docker compose` everywhere.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOkMq_BA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Qyr8E",
                                           "createdAt":  "2024-10-22T12:53:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-22T12:53:38Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[HttpStress] [SslStress] Migrate to Compose plugin in Linux pipelines",
        "labels":  [
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/109591",
        "createdAt":  "2024-11-06T19:36:24Z",
        "number":  109591,
        "author":  "Lanayx",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC8dQvw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "Wraith2",
                                            "createdAt":  "2024-11-06T21:43:13Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-11-07T16:12:03Z",
        "body":  "### Background and motivation\n\nI suggest adding `StringBuilder` overloads in [WebUtility](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/Net/WebUtility.cs) similar to `TextWriter` one. Actually one very similar already exists for [private implementation](https://github.com/dotnet/runtime/blob/6d23ef4d68bbcdb38fdc22218d1073c5083ac6a1/src/libraries/System.Private.CoreLib/src/System/Net/WebUtility.cs#L78).\n\nMotivation: in Oxpecker framework (which is currently one of the top frameworks at [Techempower](https://www.techempower.com/benchmarks/#section=test\u0026runid=1300aee6-f9c9-42a2-8d17-252ba597202f\u0026hw=ph\u0026test=query\u0026p=zik0zi-zik0zj-zik0zj-zik0zj-zik0zj-1kv) benchmarks) I\u0027m using `StringBuilder` for ViewEngine rather than `TextWriter` because it gives about 10% performance increase for rendering HTML views to string. One downside is that `HtmlEncode` method doesn\u0027t allow for StringBuilder, so I\u0027m [allocating strings each time encoding is required](https://github.com/Lanayx/Oxpecker/blob/6f8ef1287d0178894480b0bb830939387163b363/src/Oxpecker.ViewEngine/Builder.fs#L35).\nIf overload is added, it can behave faster than `TextWriter` since no intermediate `ValueStringBuilder` instances [are requried](https://github.com/dotnet/runtime/blob/6d23ef4d68bbcdb38fdc22218d1073c5083ac6a1/src/libraries/System.Private.CoreLib/src/System/Net/WebUtility.cs#L67).\n\n### API Proposal\n\n```csharp\npublic static class WebUtility\n{\n    public static void HtmlEncode(string? value, StringBuilder output)\n    public static void HtmlDecode(string? value, StringBuilder output)\n}\n```\n\n\n### API Usage\n\n```csharp\nvar sb = new StringBuilder();\nWebUtility.HtmlEncode(\"myString\", sb);\n```\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOksjLFQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Sqlyk",
                                           "createdAt":  "2024-11-06T19:47:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Lanayx",
                                           "body":  "@timcassel Yes, I\u0027m aware of this type, but as I said - using it gives 10% overhead in my benchmarks compared to straight StringBuilder usage. With implemented, overload with StringBuilder will give performance difference even larger (due to aforementioned possibility of getting rid of intermediate string builder in implementation)",
                                           "updatedAt":  "2024-11-06T19:47:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Sqm7s",
                                           "createdAt":  "2024-11-06T19:50:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "@Lanayx please add a proper title to the issue so people are not forced to open the link to see what it is about.",
                                           "updatedAt":  "2024-11-06T19:50:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6SqoRz",
                                           "createdAt":  "2024-11-06T19:53:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Lanayx",
                                           "body":  "Thank you for noticing, done",
                                           "updatedAt":  "2024-11-06T19:53:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Sq4Ot",
                                           "createdAt":  "2024-11-06T20:27:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-11-06T20:27:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6SuimB",
                                           "createdAt":  "2024-11-07T09:01:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "I\u0027m not conceptually opposed to this. However, it does increase the API surface. So I\u0027d like to see if there are more people who could benefit from this addition before we add it.",
                                           "updatedAt":  "2024-11-07T09:01:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Sw62h",
                                           "createdAt":  "2024-11-07T13:53:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD57lew==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ManickaP",
                                                                               "createdAt":  "2024-11-07T15:00:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GerardSmit",
                                                                               "createdAt":  "2024-11-08T00:28:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "While I get it can make usage eaiser, we don\u0027t tend to expose `StringBuilder` overloads for such encoding helpers, having a `TextWriter` overload is already very untypical.\nIf we were to add APIs here, they may be span-based instead, e.g. something like https://github.com/dotnet/runtime/issues/40603#issuecomment-1930539476.",
                                           "updatedAt":  "2024-11-07T13:53:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6SyC9d",
                                           "createdAt":  "2024-11-07T15:54:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "\u003e If we were to add APIs here, they may be span-based instead, e.g. something like https://github.com/dotnet/runtime/issues/40603#issuecomment-1930539476.\n\nLooks good!",
                                           "updatedAt":  "2024-11-07T15:54:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6SyMsV",
                                           "createdAt":  "2024-11-07T16:09:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Lanayx",
                                           "body":  "\u003e If we were to add APIs here, they may be span-based instead, e.g. something like https://github.com/dotnet/runtime/issues/40603#issuecomment-1930539476.\n\nUsing spans for these APIs is not developer-friendly in my opinion, since it\u0027s not clear what is the size of buffer that should be allocated, so it\u0027s should be up to algorithm and be based on analyzed symbols, rather than developer just allocate buffer 4 times larger than initial string and hoping that it will be sufficient. StringBuilder overload would be much more convenient.",
                                           "updatedAt":  "2024-11-07T16:12:03Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "[API Proposal]: Add StringBuilder overload for WebUtility.HtmlEncode",
        "labels":  [
                       "api-suggestion",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/110361",
        "createdAt":  "2024-12-03T15:55:17Z",
        "number":  110361,
        "author":  "NXTwoThou",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-12-03T22:59:24Z",
        "body":  "### Background and motivation\n\nI\u0027ve had a long term issue with the built in mail app on my phone(Xiaomi) for a number of years.  Any email sent via .NET shows 12/31/1969 for the date.   I\u0027m inbetween projects for a few hours this morning and it finally bugged me enough to look into it.  So I turned on debug logging on our mail server and captured a few hundred emails from various sources this morning and directly ran some sets with .NET Framework 4.8 and .NET 9.\n\nThe likely cause of the issue with Xiaomi\u0027s mail app is the format used by the date.  I don\u0027t think they understood RFC822 where the day of the week is an optional field([]).\n\nOut of the 128 emails I parsed in the logs, the only one not sending the DOW is .NET.  Is there some flag I\u0027m missing?\n\nFor example, I sent an email to my Outlook email from a .NET 9 WinForm app:\n\nDate: 3 Dec 2024 09:26:24 -0600\n\nI then replied to that email from Outlook.com and got back\n\nDate: Tue, 3 Dec 2024 15:36:32 +0000\n\nI recognize I don\u0027t have an issue viewing the non-DOW formatted date with Thunderbird, Outlook client, Outlook.com, Yahoo mail, and GMail.  I recognize 128 emails is a pretty small sampling, but if everyone else is doing it, could it be an option to turn on for additional compatibility?\n\n### API Proposal\n\nenum SmtpDateFormatting { Standard,Full };\npublic DateFormatting=SmtpDateFormatting.Standard;\n\n\nstring tz=date.ToString(\"zzz\").Replace(\":\",\"\");\nif(DateFormatting==SmtpDateFormatting.Full)\n return date.ToString(\"ddd, d MMM yyyy HH:mm:ss \")+tz;\nelse\n return date.ToString(\"d MMM yyyy HH:mm:ss \")+tz;\n\n### API Usage\n\nSmtpClient.DateFormatting=SmtpDateFormatting.Full;\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOlfLhVQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6V6Ev9",
                                           "createdAt":  "2024-12-03T16:27:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tornhoof",
                                           "body":  "The integrated SMTPClient is deprecated. \nSee https://learn.microsoft.com/en-us/dotnet/api/system.net.mail.smtpclient?view=net-9.0\n\nA modern replacement is Mailkit\nhttps://github.com/jstedfast/MailKit",
                                           "updatedAt":  "2024-12-03T16:27:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6V8tOh",
                                           "createdAt":  "2024-12-03T22:56:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "`MailMessage` exposes `Headers` collection. Did you try to set it directly @NXTwoThou? \n@Tornhoof  is right that the class is in maintenance only mode and it is unlikely we would extend it at the moment. \n",
                                           "updatedAt":  "2024-12-03T22:56:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6V8uFV",
                                           "createdAt":  "2024-12-03T22:59:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NXTwoThou",
                                           "body":  "\u003e `MailMessage` exposes `Headers` collection. Did you try to set it directly [@NXTwoThou](https://github.com/NXTwoThou)? [@Tornhoof](https://github.com/Tornhoof) is right that the class is in maintenance only mode and it is unlikely we would extend it at the moment.\n\nThe first thing I did was hunt to see if I could directly set it.  https://learn.microsoft.com/en-us/dotnet/api/system.net.mail.mailmessage.headers?view=netframework-4.8 has a long list of headers that are discarded if you try to directly set them.  Including Date",
                                           "updatedAt":  "2024-12-03T22:59:10Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[API Proposal]: Customized date formatting for SmtpClient",
        "labels":  [
                       "api-suggestion",
                       "area-System.Net",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/110593",
        "createdAt":  "2024-12-10T22:18:35Z",
        "number":  110593,
        "author":  "antonfirsov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC9YTVA==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "MihaZupan",
                                            "createdAt":  "2024-12-11T00:17:54Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-12-11T13:53:28Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-12-10T22:31:25Z",
        "body":  "#103922 introduced experimental connection tracing, adding 4 optional activities to enable tracking HTTP connection setup, DNS lookup, socket connect, and TLS handshake. The feature has been marked experimental because of problems with span link visualization in existing monitoring tools (https://github.com/open-telemetry/opentelemetry-specification/discussions/4130). These problems can be addressed by (1) introducing new OTel semantic conventions to mark the links that can result in a high number of backlings so they can be visualized differently, (2) implementing the new semconv in our instrumentation, and (3) working with monitoring tool authors so they can tune their visualization logic.\n\nDuring the finalization work we have an opportunity to adjust the design and the implementation meaning that we can revisit the design decisions noted in https://github.com/dotnet/runtime/pull/103922#issuecomment-2214295290, and formalized in https://github.com/open-telemetry/semantic-conventions/pull/1192. For example, we should consider linking failed connection setup spans to the (failed) requests that initiated the connection injection as suggested in https://github.com/dotnet/docs/pull/43872#discussion_r1876823555.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOlvtv6w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6W-2_r",
                                           "createdAt":  "2024-12-10T22:19:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-12-10T22:19:00Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Finalize experimental connection Activities",
        "labels":  [
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/110615",
        "createdAt":  "2024-12-11T15:37:20Z",
        "number":  110615,
        "author":  "MaxMahem",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC9Yr7g==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "HighPerfDotNet",
                                            "createdAt":  "2024-12-11T16:42:54Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-12-11T18:36:37Z",
        "body":  "### Background and motivation\n\nThis method wraps some useful checks that can determine both the type and validity of hostnames. When checking the validity of the hostname part of a larger string part of a path or url string (such as the hostname portion of a UNC path), it could be useful to perform this check on just a `ReadOnly\u003cchar\u003e` slice. Recreating to avoid the allocation would be annoying when the method already exists.\n\n### API Proposal\n\n```diff\nnamespace System;\n\npublic class Uri : ISpanFormattable, ISerializable\n{\n     public static UriHostNameType CheckHostName(string? name);\n+    public static UriHostNameType CheckHostName(ReadOnlySpan\u003cchar\u003e name)\n}\n```\n\n### API Usage\n\n```csharp\nstring uncPath = @\"\\\\192.168.0.1\\someShare\";\nint hostnameEnd = uncPath[2..].IndexOf(\u0027\\\\\u0027) + 2;\nReadOnlySpan\u003cchar\u003e hostNameSpan = uncPath.AsSpan()[2..hostnameEnd];\nUriHostNameType hostNameType = Uri.CheckHostName(hostNameSpan);\n```\n\n### Alternative Designs\n\nMore comprehensive parsing/validation tools for string paths could be introduced.\n\n### Risks\n\nSlightly larger API surface.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOlzTybA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6XLXxo",
                                           "createdAt":  "2024-12-11T15:37:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-12-11T15:37:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6XMLWB",
                                           "createdAt":  "2024-12-11T16:57:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "I don\u0027t see an issue with exposing such an API, though its usage is fairly limited.\nWhat is your scenario where you wouldn\u0027t use something like `Uri.TryCreate` instead?\n\nIf we\u0027re exposing better APIs, we should try to figure out how to address #63640 as well.",
                                           "updatedAt":  "2024-12-11T16:57:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6XNPJs",
                                           "createdAt":  "2024-12-11T18:36:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MaxMahem",
                                           "body":  "\u003e What is your scenario where you wouldn\u0027t use something like Uri.TryCreate instead?\n\nWell pretty much exactly what the method does, honestly. Check that a HostName portion of a string is a valid hostname (IPv6, IPv4, or DNS). The larger scope is validating path strings received from the user mainly for `File` based operations, and, not as Uri\u0027s necessarily. I suppose there might be some way to use `Uri.TryCreate` could also be used for this purpose, but it wouldn\u0027t avoid the allocation and would be more roundabout.",
                                           "updatedAt":  "2024-12-11T18:36:36Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[API Proposal]: ReadOnlySpan\u003cchar\u003e based overload for Uri.CheckHostName",
        "labels":  [
                       "api-suggestion",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/110822",
        "createdAt":  "2024-12-18T20:55:15Z",
        "number":  110822,
        "author":  "dlevy-chipotle",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC9mcrA==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "HighPerfDotNet",
                                            "createdAt":  "2024-12-18T22:29:10Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "rzikm",
                                            "createdAt":  "2024-12-19T11:34:07Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-07-28T18:10:37Z",
        "body":  "### Description\nDuring preliminary testing of a core workload upgrade from .NET 8 to .NET 9, we noticed that our service mesh was running significantly hotter, leading to throttling.\n\nUpon closer investigation, we discovered that the number of packets in .NET 9 is significantly higher than in .NET 8 for the same workload, both for packets received and packets sent. In addition, the packet length in .NET 9 is significantly smaller on average than .NET 8. Finally, we found significantly higher connection counts in .NET 9 over .NET 8.\n\n### Configuration\n- .NET SDK 9.0.101\n- `dotnet publish -c Release -o out -r linux-musl-x64 -p:PublishReadyToRun=true`\n- Alpine Linux containers\n\n### Regression?\nThis appears to be a regression from dotnet sdk 8.0.403 and all previous versions.\n\n### Data\n#### Packets Sent/Received\n##### .NET 8\n![Image](https://github.com/user-attachments/assets/0b2565e6-60d3-45b4-b641-a36cae79ddc5)\n\n##### .NET 9\n![Image](https://github.com/user-attachments/assets/d6a85d75-7922-4bca-81db-733806a36616)\n\n#### Established Connections and /second\n##### .NET 8\n![Image](https://github.com/user-attachments/assets/6ee12075-9f42-4422-ade7-246e8dcaedd9)\n\n##### .NET 9\n![Image](https://github.com/user-attachments/assets/e9c0f033-c76d-4bba-8bc4-8eaeaa1b9df5)\n\n#### Overall Stats for Client -\u003e Server\n##### .NET 8\n![Image](https://github.com/user-attachments/assets/0248b9ff-05e8-4211-b438-82127e0efcca)\n\n##### .NET 9\n![Image](https://github.com/user-attachments/assets/31934337-942a-4f55-99f6-7c7ac1b41d27)\n\n#### Packet Length Comparison\n![Image](https://github.com/user-attachments/assets/b6595311-6c93-441b-a0b6-b2bee46259ae)\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOunfOKg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6YMyR8",
                                           "createdAt":  "2024-12-19T11:36:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rzikm",
                                           "body":  "I think we will need more information about your specific workload. Even better, if you could simplify it to a simple self-contained repro project we could run locally, it would make our investigation a lot easier and faster.",
                                           "updatedAt":  "2024-12-19T11:36:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6YUaKZ",
                                           "createdAt":  "2024-12-19T18:14:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dlevy-chipotle",
                                           "body":  "@rzikm makes perfect sense. We\u0027ll work on putting together a generic project that demonstrates the issue.",
                                           "updatedAt":  "2024-12-19T18:14:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Yc7wu",
                                           "createdAt":  "2024-12-20T21:11:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dlevy-chipotle",
                                           "body":  "@rzikm please see the attached zip. It\u0027s composed of two Ready2Run projects, one targeting .NET 8 and one targeting .NET 9, both set to publish as linux-musl-x64 self-contained projects. There\u0027s also a dockerfile for each if you\u0027d prefer.\n\nWe did run both sample projects through load tests and they resulted in higher packet counts in the .NET 9 version.\n\n[PacketTest_compressed.zip](https://github.com/user-attachments/files/18215382/PacketTest_compressed.zip)\n",
                                           "updatedAt":  "2024-12-20T21:11:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZWQj0",
                                           "createdAt":  "2025-01-06T09:49:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rzikm",
                                           "body":  "Thanks, what sort of load test are you performing (what tool are you using?), also, I have some problems running the docker images, the container seems to always return empty response regardless of the url I try. How do you start the container for your tests?",
                                           "updatedAt":  "2025-01-06T09:49:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZsgTW",
                                           "createdAt":  "2025-01-08T20:21:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dlevy-chipotle",
                                           "body":  "HI @rzikm, apologies for the broken dockerfiles. I\u0027m reattaching the repro projects with updated dockerfiles. You can run against any port and swagger is exposed at /swagger.\n\n[PacketTest.zip](https://github.com/user-attachments/files/18352644/PacketTest.zip)\n\nIn our test environment, we are deploying the image as a linux-musl-x64 target with Ready2Run to AKS, exposed via an ingress to an external load generator.\n\nFor the newly uploaded version, it is a self-contained build but it removes the runtime target. Feel free to add it back if you have an appropriate environment since we\u0027ve only confirmed this issue on linux-musl-x64.",
                                           "updatedAt":  "2025-01-08T20:21:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6aruJc",
                                           "createdAt":  "2025-01-16T10:32:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "Triage: possible regression, unclear so far what\u0027s going on. We should try to figure out if it\u0027s something problematic from our layer. Moving to 10.0 for now.",
                                           "updatedAt":  "2025-01-16T10:32:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6awXpD",
                                           "createdAt":  "2025-01-16T18:00:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dlevy-chipotle",
                                           "body":  "Thanks for the update. We\u0027re eagerly looking forward to the outcome of the triage since we will not be able to upgrade our critical workloads to .NET 9 in the interim.",
                                           "updatedAt":  "2025-01-16T18:00:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6jJzCG",
                                           "createdAt":  "2025-03-19T16:16:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dlevy-chipotle",
                                           "body":  "@MihaZupan has any progress been made on this in .NET 10? ",
                                           "updatedAt":  "2025-03-19T16:16:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6jLBNC",
                                           "createdAt":  "2025-03-19T18:03:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "I did try your repro projects (hitting the `/test`), and I don\u0027t see a regression re: packet sizes between .NET 8/9.\nIt\u0027s possible something odd is going on that\u0027s more specific to your setup.\n\nAre you able to reproduce this with just talking to the .NET app directly? If so, please share packet captures.\n\n\u003e Finally, we found significantly higher connection counts in .NET 9 over .NET 8.\n\nThat would suggest that the type of load tested wasn\u0027t the same?",
                                           "updatedAt":  "2025-03-19T18:03:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6jLJA8",
                                           "createdAt":  "2025-03-19T18:16:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dlevy-chipotle",
                                           "body":  "We\u0027ll attempt to reproduce in a non-containerized environment, but it might be possible that the same behavior will not be present unless the app is under load.\n\nNo, the load was identical, but the connection counts were very different. We repeated the same test against the two applications multiple times and in each case, the .net 9 application opened significantly more connections.",
                                           "updatedAt":  "2025-03-19T18:16:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6jLOh5",
                                           "createdAt":  "2025-03-19T18:23:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "But we are talking about testing a server. .NET isn\u0027t opening more connections, whatever is talking to it is.\nUnless you are saying that the .NET 9 server is closing connections, hence the need to open more.",
                                           "updatedAt":  "2025-03-19T18:23:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6jLVPj",
                                           "createdAt":  "2025-03-19T18:33:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dlevy-chipotle",
                                           "body":  "There should be no outbound connections in the test application, which implies that the server itself is closing connections much more frequently, resulting in more opened connections. I\u0027m not sure if that would also be related to more packets in smaller packet sizes.",
                                           "updatedAt":  "2025-03-19T18:33:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc66d84q",
                                           "createdAt":  "2025-07-28T18:08:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "Were you able to reproduce this without containers?",
                                           "updatedAt":  "2025-07-28T18:08:48Z"
                                       }
                                   ],
                         "totalCount":  13
                     },
        "title":  "Number of packets is significantly increased for inbound and outbound calls from .NET 8 to .NET 9",
        "labels":  [
                       "area-System.Net",
                       "tenet-performance"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/111058",
        "createdAt":  "2025-01-03T06:34:19Z",
        "number":  111058,
        "author":  "satya-prismhr",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-11T12:44:33Z",
        "body":  "### Description\n\nRandomly getting System.Net.Http.HttpRequestException: hostname nor servname provided, or not known (prd-services-apim.xcbsystems.com:443)\n\n```\nSystem.Net.Http.HttpRequestException: hostname nor servname provided, or not known (prd-tlmservices-apim.epaysystems.com:443)\n ---\u003e System.Net.Sockets.SocketException (0xFFFDFFFF): hostname nor servname provided, or not known\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError , CancellationToken )\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 )\n   at System.Net.Sockets.Socket.\u003cConnectAsync\u003eg__WaitForConnectWithCancellation|285_0(AwaitableSocketAsyncEventArgs , ValueTask , CancellationToken )\n   at System.Net.Http.HttpConnectionPool.ConnectToTcpHostAsync(String , Int32 , HttpRequestMessage , Boolean , CancellationToken )\n   Exception_EndOfInnerExceptionStack\n   at System.Net.Http.HttpConnectionPool.ConnectToTcpHostAsync(String , Int32 , HttpRequestMessage , Boolean , CancellationToken )\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage , Boolean , CancellationToken )\n   at System.Net.Http.HttpConnectionPool.AddHttp2ConnectionAsync(QueueItem )\n   at System.Threading.Tasks.TaskCompletionSourceWithCancellation`1.\u003cWaitWithCancellationAsync\u003ed__1[[System.Net.Http.Http2Connection, System.Net.Http, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]].MoveNext()\n   at System.Net.Http.HttpConnectionPool.SendWithVersionDetectionAndRetryAsync(HttpRequestMessage , Boolean , Boolean , CancellationToken )\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage , Boolean , CancellationToken )\n   at System.Net.Http.DecompressionHandler.SendAsync(HttpRequestMessage , Boolean , CancellationToken )\n   at System.Net.Http.HttpClient.\u003cSendAsync\u003eg__Core|83_0(HttpRequestMessage , HttpCompletionOption , CancellationTokenSource , Boolean , CancellationTokenSource , CancellationToken )\n   at TLM.MobileApp.Data.Core.ApiClient.ProcessApiGatewayRequestAsync(IRequest request, Int32 retryCount)\n```\n\n### Reproduction Steps\n\nNo Reproduction steps, Its a random exception in httpclient\n\n### Expected behavior\n\nShould work without exceptions\n\n### Actual behavior\n\nSocket Exceptions are coming sometimes\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nNo\n\n### Configuration\n\nWhich version of .NET is the code running on? :  .NET 8 MAUI\nWhat OS and version, and what distro if applicable? :  Android  \n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnM59tA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6ZKTZC",
                                           "createdAt":  "2025-01-03T18:01:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "This looks like network or DNS server failure. Can you get traces from `NameResolution` @satya-prismhr ?",
                                           "updatedAt":  "2025-01-03T18:01:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ci3tb",
                                           "createdAt":  "2025-01-31T06:10:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "satya-prismhr",
                                           "body":  "Workaround will be for this issue turning on and off airplane mode. Is there any permanent solution available for this?",
                                           "updatedAt":  "2025-01-31T06:10:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cq1zk",
                                           "createdAt":  "2025-01-31T22:04:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "any idea @simonrozsival ? You can try simple NameResolution call @satya-prismhr. AFAIK we simply call OS API and if that fails I don\u0027t know what we can do about it at .NET layer. ",
                                           "updatedAt":  "2025-01-31T22:04:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6czn20",
                                           "createdAt":  "2025-02-03T12:13:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "simonrozsival",
                                           "body":  "I don\u0027t know what a solution for this problem would look like. As @wfurt said, this is an error from the OS which cannot connect to the host at that given moment. I believe the only workaround is to try to repeat the attempt to make the request after some reasonable delay.",
                                           "updatedAt":  "2025-02-03T12:13:17Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Randomly getting System.Net.Http.HttpRequestException: hostname nor servname provided, or not known (prd-services-apim.xcbsystems.com:443)",
        "labels":  [
                       "area-System.Net",
                       "os-android"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/111288",
        "createdAt":  "2025-01-10T20:43:56Z",
        "number":  111288,
        "author":  "MihaZupan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-01-13T08:28:52Z",
        "body":  "For example:\n```c#\nIPAddress.Parse([.. \"::A%\"u8, 255]); // Does not throw\n```\n\nNow that `IPAddress` accepts parsing bytes (new in .NET 10 - #102144), we seem to also be accepting invalid UTF-8 here:\nhttps://github.com/dotnet/runtime/blob/f1c94c45d66ef415272df6cb61821e632697b6ff/src/libraries/Common/src/System/Net/IPv6AddressHelper.Common.cs#L159-L175\n\nNot sure this is a real issue, but given that the parameters are explicitly named as utf8 (`bool TryParse(ReadOnlySpan\u003cbyte\u003e utf8Text, ...)`) the user may be expecting that a parsed value is also valid UTF-8.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmgeolA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6aBjRm",
                                           "createdAt":  "2025-01-10T20:44:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-10T20:44:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6aBsOI",
                                           "createdAt":  "2025-01-10T20:53:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "cc: @tannergooding in case you\u0027ve come across similar cases with `IUtf8SpanParsable` elsewhere",
                                           "updatedAt":  "2025-01-10T20:53:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6aB6iU",
                                           "createdAt":  "2025-01-10T21:06:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOECIY5g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "MihaZupan",
                                                                               "createdAt":  "2025-01-13T05:24:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e  in case you\u0027ve come across similar cases with IUtf8SpanParsable elsewhere\n\nA quick test shows that other UTF-8 parsing APIs do fail as expected, likely because they aren\u0027t setup to just eat characters arbitrarily.\n\nIt looks like in this case `IPAddress.Parse(\"::A%\\uFFFF\")` similarly passes, despite `\\uFFFF` by itself being an \"invalid\" UTF-16 character. The IPv6 spec simply covers\n\u003e An implementation MAY support other kinds of non-null strings as \u003czone_id\u003e.  However, the strings must not conflict with the delimiter character.  The precise format and semantics of additional strings is implementation dependent.\n\nCC. @GrabYourPitchforks ",
                                           "updatedAt":  "2025-01-10T21:06:50Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "`IPAddress.TryParse(ROS\u003cbyte\u003e)` accepts invalid UTF-8",
        "labels":  [
                       "bug",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/111447",
        "createdAt":  "2025-01-15T08:27:25Z",
        "number":  111447,
        "author":  "tmds",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODLny5Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Jonhu",
                                            "createdAt":  "2025-08-18T16:29:53Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-01-15T15:43:50Z",
        "body":  "```\nnew Uri(\"http://300.300.300.300\");\n```\ndoesn\u0027t throw and is considered a valid DNS name by the `Uri` class.\n\nThis is because it meets the criteria of a valid domain name, due to dropping the requirement for the first character to be alphabetic:\n\nhttps://github.com/dotnet/runtime/blob/73bcb1d808e906808f91780aa1af23208549426f/src/libraries/System.Private.Uri/src/System/DomainNameHelper.cs#L128-L133\n\nPerhaps it would make sense to require at least one alphabetic character be present in each label?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmpIkcg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6afaDw",
                                           "createdAt":  "2025-01-15T08:27:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-15T08:27:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ajKgF",
                                           "createdAt":  "2025-01-15T13:50:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "Has this caused you issues in practice, or is it more just something odd that you\u0027ve noticed?\n\nGiven other issues around the kind of hostname validation we do (#64707), I wouldn\u0027t be surprised if we go in the other direction and be less restrictive instead.",
                                           "updatedAt":  "2025-01-15T13:50:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ajpf1",
                                           "createdAt":  "2025-01-15T14:38:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "I was looking for an API that allows me to check whether a string provided by the user is a valid IPv4/IPv6/domain name. `Uri.CheckHostName` seemed like a good fit.\n\nWhen trying some strings, it didn\u0027t behave as I had expected for `300.300.300.300`, so I reported this issue.\n\n\u003e Given other issues around the kind of hostname validation we do (https://github.com/dotnet/runtime/issues/64707), I wouldn\u0027t be surprised if we go in the other direction and be less restrictive instead.\n\nThis makes sense.\n\nPerhaps there is some room to consider how `Uri.CheckHostName` behaves with these changes. May be `UriHostNameType.Basic` could be returned for non valid domain names (though valid per URI RFCs).",
                                           "updatedAt":  "2025-01-15T14:44:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6akiRy",
                                           "createdAt":  "2025-01-15T15:43:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "\u003e May be UriHostNameType.Basic could be returned for non valid domain names (though valid per URI RFCs).\n\nWe\u0027d have to double-check if that matters somewhere else in Uri for some reason, but that sounds reasonable to me.",
                                           "updatedAt":  "2025-01-15T15:43:40Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Uri treats out-of-range IPv4 addresses as valid DNS names.",
        "labels":  [
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/113174",
        "createdAt":  "2025-03-05T22:06:10Z",
        "number":  113174,
        "author":  "lewing",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-03-18T14:27:19Z",
        "body":  "https://github.com/dotnet/runtime/pull/94510 forwarded all of ServicePoint to System.Net.Requests but browser marks all of System.Net.Requests as unsupported so the change unintentionally changed the browser API without any of the tooling catching the difference.\n\nsee https://github.com/Azure/azure-cosmos-dotnet-v3/issues/5029 for context",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOou1BCw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6hEBsn",
                                           "createdAt":  "2025-03-05T22:06:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-03-05T22:06:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hEEuW",
                                           "createdAt":  "2025-03-05T22:14:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lewing",
                                           "body":  "@ericstj mildly interesting apicompat limitation here",
                                           "updatedAt":  "2025-03-05T22:14:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hGJ2B",
                                           "createdAt":  "2025-03-06T04:07:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lewing",
                                           "body":  "I doubt we need to fix the api surface but we should document the breaking change and ideally improve the tooling",
                                           "updatedAt":  "2025-03-06T04:07:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hNs3O",
                                           "createdAt":  "2025-03-06T19:11:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "APICompat catches binary breaking changes to type shape.   IIUC this wasn\u0027t binary breaking but the implementation changed from \"real\" to not supported? \n\nOr is this more a supported-platform thing, where we moved a type into an assembly which had different supported platform attributes?  If that\u0027s the case then it would be a feature request for APICompat to have first-class knowledge of SupportPlatform attributes.  Today we only look for simple differences in attributes, we don\u0027t try to encode the behavior of them since each is bespoke.",
                                           "updatedAt":  "2025-03-06T19:13:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6i7UEL",
                                           "createdAt":  "2025-03-18T14:27:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "It is not clear to me what we want to do here.... I assume this will not change so perhaps documentation? ",
                                           "updatedAt":  "2025-03-18T14:27:13Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "regression net9.0 ServicePoint throws PNSE on browser",
        "labels":  [
                       "area-System.Net",
                       "regression-from-last-release",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/113311",
        "createdAt":  "2025-03-10T05:52:25Z",
        "number":  113311,
        "author":  "mayuki",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-16T08:15:07Z",
        "body":  "### Description\n\nWhen using a WebSocket client in the Blazor WebAssembly environment on NET 8, even if the ClientWebSocket instance is disposed, the WebSocket connection behind it is not aborted and the connection continues.\n\n### Reproduction Steps\n\n- Set the TargetFramework to `net8.0`\n- Add an endpoint that accepts WebSocket connections\n- Connect using ClientWebSocket from Blazor WebAssembly\n\n```csharp\napp.UseWebSockets();\n\n// Map WebSocket endpoint at path /ws\napp.Map(\"/ws\", async context =\u003e\n{\n    if (context.WebSockets.IsWebSocketRequest)\n    {\n        using WebSocket webSocket = await context.WebSockets.AcceptWebSocketAsync();\n        var buffer = new byte[1024 * 4];\n        WebSocketReceiveResult result = await webSocket.ReceiveAsync(new ArraySegment\u003cbyte\u003e(buffer), CancellationToken.None);\n        while (!result.CloseStatus.HasValue)\n        {\n            // Echo the received message back to the client.\n            await webSocket.SendAsync(new ArraySegment\u003cbyte\u003e(buffer, 0, result.Count), result.MessageType, result.EndOfMessage, CancellationToken.None);\n            result = await webSocket.ReceiveAsync(new ArraySegment\u003cbyte\u003e(buffer), CancellationToken.None);\n        }\n        await webSocket.CloseAsync(result.CloseStatus.Value, result.CloseStatusDescription, CancellationToken.None);\n    }\n    else\n    {\n        context.Response.StatusCode = StatusCodes.Status400BadRequest;\n    }\n});\n```\n\n```csharp\npublic partial class Home\n{\n    [Inject]\n    private IJSRuntime JSRuntime { get; set; }\n\n    private ClientWebSocket _clientWebSocket;\n\n    private async Task ConnectAsync()\n    {\n        // Get the current host from the browser\u0027s location\n        var currentUrl = await JSRuntime.InvokeAsync\u003cstring\u003e(\"eval\", \"window.location.href\");\n        var uri = new Uri(currentUrl);\n\n        // Create WebSocket URL with the same host\n        var scheme = uri.Scheme == \"https\" ? \"wss\" : \"ws\";\n        var wsUri = new Uri($\"{scheme}://{uri.Host}{(uri.Port == 80 || uri.Port == 443 ? \"\" : $\":{uri.Port}\")}/ws\");\n\n        _clientWebSocket = new ClientWebSocket();\n        await _clientWebSocket.ConnectAsync(wsUri, CancellationToken.None);\n    }\n\n    private void DisposeWebSocketClient()\n    {\n        _clientWebSocket?.Dispose();\n        Debug.WriteLine($\"_clientWebSocket: State={_clientWebSocket.State}; CloseStatus={_clientWebSocket.CloseStatus}\");\n    }\n}\n```\n```cshtml\n@page \"/\"\n\n\u003cPageTitle\u003eHome\u003c/PageTitle\u003e\n\n\u003ch1\u003eHello, world!\u003c/h1\u003e\n\nWelcome to your new app.\n\n\u003cbutton @onclick=\"ConnectAsync\"\u003eConnect\u003c/button\u003e\n\u003cbutton @onclick=\"DisposeWebSocketClient\"\u003eDisconnect\u003c/button\u003e\n```\n\n### Expected behavior\n\nWebSocket connection is disconnected.\n\n### Actual behavior\n\nWebSocket connection is not disconnected.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n- .NET Version: .NET 8.0.13\n- OS: Windows 11 24H2\n- Architecture: x64\n- Browser: Microsoft Edge 135.0.3168.2 (dev)\n\n### Other information\n\nIn .NET 8, `ClientWebSocket.Dispose` sets the `_disposed` flag to mark that it has been disposed, and then AbortCore is called, but it checks `_disposed` there and it will not always satisfy the condition.\n\nrelease/8.0\nhttps://github.com/dotnet/runtime/blob/99a103f0589e2de099e0b8e0c6da52a71c94f4ef/src/libraries/System.Net.WebSockets.Client/src/System/Net/WebSockets/BrowserWebSockets/BrowserWebSocket.cs#L347-L351\nhttps://github.com/dotnet/runtime/blob/99a103f0589e2de099e0b8e0c6da52a71c94f4ef/src/libraries/System.Net.WebSockets.Client/src/System/Net/WebSockets/BrowserWebSockets/BrowserWebSocket.cs#L364-L372\n\n\nIt seems that the ClientWebSocket (BrowserWebSocket) in .NET 9 was modified at the same time as the thread-related fixes. (https://github.com/dotnet/runtime/pull/96618)\n\nrelease/9.0\nhttps://github.com/dotnet/runtime/blob/4408376420c23fb600a7fa71ba597b3431257d88/src/libraries/System.Net.WebSockets.Client/src/System/Net/WebSockets/BrowserWebSockets/BrowserWebSocket.cs#L256",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOobok_w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6hf8lH",
                                           "createdAt":  "2025-03-10T05:52:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-03-10T05:52:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hgZeL",
                                           "createdAt":  "2025-03-10T07:09:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-03-10T07:09:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hhJwu",
                                           "createdAt":  "2025-03-10T08:45:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maraf",
                                           "body":  "cc @pavelsavara ",
                                           "updatedAt":  "2025-03-10T08:45:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hjIqd",
                                           "createdAt":  "2025-03-10T11:57:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "@mayuki can you use `ClientWebSocket.ConnectAsync()` as workaround ?",
                                           "updatedAt":  "2025-03-10T11:57:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hq55g",
                                           "createdAt":  "2025-03-11T02:51:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mayuki",
                                           "body":  "I\u0027m sorry, but I don\u0027t understand. Do you mean to use `ConnectAsync` instead of `Dispose`? Or perhaps you mean `CloseAsync`?\n\nIt seems that the connection is closed by using `CloseAsync`. However, there are issues that cannot be handled if `ClientWebSocket` is used inside 3rd-party library and not directly used in the application code.",
                                           "updatedAt":  "2025-03-11T02:51:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6huiT_",
                                           "createdAt":  "2025-03-11T09:30:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "\u003e Or perhaps you mean `CloseAsync`?\n\nYes, sorry.\n\n\u003e However, there are issues that cannot be handled if `ClientWebSocket` is used inside 3rd-party library and not directly used in the application code.\n\nI see, thanks.",
                                           "updatedAt":  "2025-03-11T09:30:19Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "WebSocket client on Blazor Wasm on .NET 8 does not abort when disposed.",
        "labels":  [
                       "arch-wasm",
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/115675",
        "createdAt":  "2025-05-17T00:02:23Z",
        "number":  115675,
        "author":  "ezgambac",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-11T21:17:18Z",
        "body":  "\n### Description\n\nFrom documentation, it seems that Uri objects are immutable after creation (all public fields are readonly, as well as properties being get only).\nHowever, Segments property returns a string[] which is always regenerated when the property is accessed, therefore causing a bunch of allocations for the resulting array as well as all the substrings for the segments, as well as extra cpu cost from traversing the uri string and allocating.\n\nFor reference, code I had optimized showed in the profiler to be much worst than the original version.\nMy version was using 24kB in allocations vs 3kB in the original.\nOnce I cached Uri.Segments into a variable, the optimized version only allocated 1.2 KB, and use 4x less cpu than the original.\n \n\u003c!--\n* Please share a clear and concise description of the performance problem.\n* Include minimal steps to reproduce the problem if possible. E.g.: the smallest possible code snippet; or a small repo to clone, with steps to run it.\n  --\u003e\n\n### Configuration\n\n.NET 8 latest\nWindows 11\nx64\n\n### Data\n\nPlease check the rows GetRESTfulRequestOperationNameV2 (my version) vs GetRESTfulRequestOperationName (original)\n\nNot caching segments into a variable:\n\nMethod | Input | Mean | Error | StdDev | Median | Ratio | RatioSD | Gen0 | Allocated | Alloc Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\nGetRESTfulRequestOperationNameV2 | (htt(...)TCH) [253] | 7.899 μs | 0.1192 μs | 0.1115 μs | 7.883 μs | 3.47 | 0.06 | 6.7596 | 28.48 KB | 7.86\nGetRESTfulRequestOperationName | (htt(...)TCH) [253] | 2.277 μs | 0.0430 μs | 0.0402 μs | 2.271 μs | 1 | 0 | 0.8583 | 3.63 KB | 1\nGetRESTfulRequestOperationNameV2 | (htt(...)GET) [242] | 8.087 μs | 0.1601 μs | 0.2025 μs | 8.086 μs | 3.47 | 0.14 | 6.6986 | 28.26 KB | 7.83\nGetRESTfulRequestOperationName | (htt(...)GET) [242] | 2.335 μs | 0.0463 μs | 0.0568 μs | 2.338 μs | 1 | 0 | 0.8545 | 3.61 KB | 1\nGetRESTfulRequestOperationNameV2 | (htt(...)GET) [228] | 6.766 μs | 0.0939 μs | 0.0784 μs | 6.771 μs | 2.99 | 0.06 | 5.7983 | 24.43 KB | 6.83\nGetRESTfulRequestOperationName | (htt(...)GET) [228] | 2.254 μs | 0.0429 μs | 0.0494 μs | 2.241 μs | 1 | 0 | 0.8469 | 3.58 KB | 1\nGetRESTfulRequestOperationNameV2 | (htt(...)GET) [255] | 10.076 μs | 0.5657 μs | 1.6590 μs | 9.419 μs | 4.06 | 0.74 | 6.7444 | 28.46 KB | 7.94\nGetRESTfulRequestOperationName | (htt(...)GET) [255] | 2.464 μs | 0.0678 μs | 0.1922 μs | 2.391 μs | 1 | 0 | 0.8507 | 3.59 KB | 1\nGetRESTfulRequestOperationNameV2 | (htt(...)TCH) [240] | 3.993 μs | 0.0785 μs | 0.1222 μs | 4.001 μs | 2.54 | 0.12 | 3.4561 | 14.56 KB | 5.37\nGetRESTfulRequestOperationName | (htt(...)TCH) [240] | 1.578 μs | 0.0314 μs | 0.0605 μs | 1.558 μs | 1 | 0 | 0.6428 | 2.71 KB | 1\nGetRESTfulRequestOperationNameV2 | (htt(...)GET) [241] | 6.844 μs | 0.1354 μs | 0.1200 μs | 6.816 μs | 3.05 | 0.09 | 6.0425 | 25.46 KB | 6.88\nGetRESTfulRequestOperationName | (htt(...)GET) [241] | 2.240 μs | 0.0388 μs | 0.0399 μs | 2.228 μs | 1 | 0 | 0.8774 | 3.7 KB | 1\nGetRESTfulRequestOperationNameV2 | (htt(...)OST) [208] | 4.213 μs | 0.0841 μs | 0.1064 μs | 4.186 μs | 2.24 | 0.06 | 3.2806 | 13.84 KB | 4.83\nGetRESTfulRequestOperationName | (htt(...)OST) [208] | 1.873 μs | 0.0317 μs | 0.0281 μs | 1.879 μs | 1 | 0 | 0.679 | 2.87 KB | 1\n\nAfter caching:\n\nMethod | Input | Mean | Error | StdDev | Ratio | RatioSD | Gen0 | Allocated | Alloc Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | -- | --\nGetRESTfulRequestOperationNameV2 | (htt(...)TCH) [253] | 556.2 ns | 10.29 ns | 19.57 ns | 0.24 | 0.01 | 0.3004 | 1296 B | 0.35\nGetRESTfulRequestOperationName | (htt(...)TCH) [253] | 2,333.4 ns | 36.90 ns | 34.51 ns | 1 | 0 | 0.8583 | 3712 B | 1\nGetRESTfulRequestOperationNameV2 | (htt(...)GET) [242] | 558.5 ns | 10.05 ns | 9.40 ns | 0.25 | 0.01 | 0.2985 | 1288 B | 0.35\nGetRESTfulRequestOperationName | (htt(...)GET) [242] | 2,234.5 ns | 42.50 ns | 45.47 ns | 1 | 0 | 0.8545 | 3696 B | 1\nGetRESTfulRequestOperationNameV2 | (htt(...)GET) [228] | 565.5 ns | 11.18 ns | 14.14 ns | 0.24 | 0.01 | 0.2813 | 1216 B | 0.33\nGetRESTfulRequestOperationName | (htt(...)GET) [228] | 2,326.0 ns | 41.21 ns | 61.69 ns | 1 | 0 | 0.8469 | 3664 B | 1\nGetRESTfulRequestOperationNameV2 | (htt(...)GET) [255] | 528.3 ns | 8.14 ns | 7.99 ns | 0.23 | 0.01 | 0.2966 | 1280 B | 0.35\nGetRESTfulRequestOperationName | (htt(...)GET) [255] | 2,255.6 ns | 38.79 ns | 36.28 ns | 1 | 0 | 0.8507 | 3672 B | 1\nGetRESTfulRequestOperationNameV2 | (htt(...)TCH) [240] | 376.9 ns | 4.93 ns | 4.61 ns | 0.23 | 0.01 | 0.2151 | 928 B | 0.33\nGetRESTfulRequestOperationName | (htt(...)TCH) [240] | 1,604.8 ns | 30.21 ns | 70.62 ns | 1 | 0 | 0.6428 | 2776 B | 1\nGetRESTfulRequestOperationNameV2 | (htt(...)GET) [241] | 553.5 ns | 11.10 ns | 19.15 ns | 0.25 | 0.01 | 0.2947 | 1272 B | 0.34\nGetRESTfulRequestOperationName | (htt(...)GET) [241] | 2,219.3 ns | 42.32 ns | 48.73 ns | 1 | 0 | 0.8774 | 3792 B | 1\nGetRESTfulRequestOperationNameV2 | (htt(...)OST) [208] | 428.8 ns | 5.64 ns | 4.71 ns | 0.23 | 0 | 0.2074 | 896 B | 0.31\nGetRESTfulRequestOperationName | (htt(...)OST) [208] | 1,875.5 ns | 32.18 ns | 30.10 ns | 1 | 0 | 0.679 | 2936 B | 1\n\n\n### Proposal\n\nSegments should return a ReadOnlyCollection\u003cT\u003e/IReadOnlyList\u003cT\u003e, and internally cache the result after first access to the property.\n\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOw6l-EA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6sIy6A",
                                           "createdAt":  "2025-05-17T02:33:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "Unfortunately, this is a non-starter;\n\n - Changing the return type of a property is a breaking change (effectively impossible to change)\n - The type _isn\u0027t_ actually immutable:\n   - Some of the (now deprecated) methods mutate state.\n   - The type isn\u0027t sealed, meaning it can be subclassed.\n   - Some of the (now deprecated) methods are explicitly virtual.",
                                           "updatedAt":  "2025-05-17T02:33:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6sI0hL",
                                           "createdAt":  "2025-05-17T02:42:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ezgambac",
                                           "body":  "Can we have a new property then? Or new child class which is readonly and immutable?",
                                           "updatedAt":  "2025-05-17T02:42:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6sKnQG",
                                           "createdAt":  "2025-05-17T15:40:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "A new property might be workable, yes...",
                                           "updatedAt":  "2025-05-17T15:40:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6sWq-1",
                                           "createdAt":  "2025-05-19T16:30:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ezgambac",
                                           "body":  "Ok, what are the next steps? \nI can try making the change. \nWould IReadOnlyCollection ReadOnlySegments {get;} work as name?",
                                           "updatedAt":  "2025-05-19T16:30:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6sXIhj",
                                           "createdAt":  "2025-05-19T17:16:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "This would go under an [API review process](https://github.com/dotnet/runtime/blob/main/CONTRIBUTING.md#writing-a-good-api-proposal)",
                                           "updatedAt":  "2025-05-19T17:16:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6sZH0d",
                                           "createdAt":  "2025-05-19T21:08:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihuBot",
                                           "body":  "cc: @dotnet/ncl",
                                           "updatedAt":  "2025-05-19T21:08:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6sbfCQ",
                                           "createdAt":  "2025-05-20T04:18:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEThmFQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Izikiel",
                                                                               "createdAt":  "2025-05-21T02:25:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DrkWzrd",
                                                                               "createdAt":  "2025-05-24T07:31:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "If we were designing the type now, this wouldn\u0027t be a property, it really should have been a method as non-trivial costs are involved.\nThis general problem isn\u0027t super specific to just `Uri` though. While they\u0027re usually cheaper, there\u0027s no guarantee that properties are caching results, so it\u0027s always a good idea to avoid refetching them multiple times.\n\nWhile `Uri` is for all practical purposes immutable, it doesn\u0027t cache _all_ properties, just the majority of most common ones.\n`Segments` in particular is more problematic since it\u0027s a collection. Even if we were to cache the `string`s, you\u0027d still be paying for array allocations. And if you only used it once, you\u0027d now also have extra overhead for another array allocation, and the extra field to cache it in.\n\nIf we were to consider an API here, something along the lines of `Uri.SegmentEnumerator GetSegments()` could be an option, avoiding the need to materialize \u0026 cache the substrings at all.\n\nI\u0027d keep this issue open gauge how much interest there is in something like that.",
                                           "updatedAt":  "2025-05-20T04:18:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6s9mmj",
                                           "createdAt":  "2025-05-22T16:16:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEUL3ng==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "istipeti",
                                                                               "createdAt":  "2025-05-28T21:40:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ezgambac",
                                           "body":  "Sounds good, I can take a stab at it. For this do I need to submit an api proposal and then after discussion work on the changes?",
                                           "updatedAt":  "2025-05-22T16:16:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DqX4Q",
                                           "createdAt":  "2025-09-11T21:17:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e do I need to submit an api proposal\n\nYup",
                                           "updatedAt":  "2025-09-11T21:17:18Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Uri.Segments is a very expensive footgun",
        "labels":  [
                       "api-suggestion",
                       "area-System.Net",
                       "tenet-performance"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/116190",
        "createdAt":  "2025-06-01T04:34:22Z",
        "number":  116190,
        "author":  "jonmdev",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-06-02T20:37:28Z",
        "body":  "### Description\n\n# BUG CODE\n\nHere I have taken a basic Maui C# Project and changed app.xaml.cs only to:\n\n```\nusing System.Diagnostics;\nusing System.Net;\n\nnamespace HttpListenerBug\n{\n    public partial class App : Application\n    {\n        public App()\n        {\n            //InitializeComponent();\n        }\n\n        protected override Window CreateWindow(IActivationState? activationState)\n        {\n            //return new Window(new AppShell());\n            return new Window(new MyPage());\n        }\n    }\n\n    public class MyPage : ContentPage {\n\n        HttpListener listener = null;\n        public MyPage() {\n\n            AbsoluteLayout abs = new();\n            this.Content = abs;\n            \n            Button button = new Button();\n            button.Text = \"START LISTENER\";\n            abs.Add(button);\n\n            button.Clicked += delegate {\n                try {\n                    listener?.Stop();\n                    listener?.Close();\n                }\n                catch (ObjectDisposedException ex) {\n                    Debug.WriteLine(ex.ToString());\n                }\n\n                listener = new();\n                listener.Prefixes.Add(\"http://localhost:8888/\");\n                listener.Start();\n            };\n\n        }\n    }\n}\n```\n\n# ERROR\n\nWe are just trying to start a listener and stop the old one if exists. This works fine on the first click. But on the second click we get:\n\n```\nException thrown: \u0027System.ObjectDisposedException\u0027 in System.Private.CoreLib.dll\nCannot access a disposed object.\n```\n\nIf we set exceptions setting to throw on `ObjectDisposedException\u0027  we get:\n\n```\nSystem.ObjectDisposedException: \u0027Cannot access a disposed object.\nObject name: \u0027System.Net.HttpRequestQueueV2Handle\u0027.\u0027\n```\n\non `listener?.Stop()`\n\n```\nSystem.ObjectDisposedException\n  HResult=0x80131622\n  Message=Cannot access a disposed object.\nObject name: \u0027System.Net.HttpRequestQueueV2Handle\u0027.\n  Source=System.Private.CoreLib\n  StackTrace:\n   at System.ThrowHelper.ThrowObjectDisposedException(Object instance)\n```\n\n# FURTHER ERROR\nIf we comment out `listener?.Stop()` and `listener?.Close()` we then get the same error on `listener.Start()` even though this is a new listener.\n\nThere is likely background shared state involving `System.Net.HttpRequestQueueV2Handle` that is trying to access something that doesn\u0027t exist anymore. A new listener does not separate us from that it appears.\n\nAny solutions?\n\n# BUG PROJECT\nhttps://github.com/jonmdev/HttpListenerBug\n\n### Reproduction Steps\n\n1) Run the bug project\n2) Set exceptions to throw on ObjectDisposedException\n3) Click the button twice.\n4) Whether you listener.stop() or listener.close() or listener.start() you will get an Exception not caught here in the code but rather re: `System.Net.HttpRequestQueueV2Handle` somewhere else\n\n### Expected behavior\n\nShould be able to safely stop a listener and start a new one.\n\n### Actual behavior\n\nCannot do so.\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOrsjsmQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6ueCNx",
                                           "createdAt":  "2025-06-01T11:58:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-01T11:58:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6uuSZa",
                                           "createdAt":  "2025-06-02T15:56:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-02T15:56:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6uyOyZ",
                                           "createdAt":  "2025-06-02T20:37:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CarnaViire",
                                           "body":  "cc @rokonec fyi",
                                           "updatedAt":  "2025-06-02T20:37:27Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "HttpListener cannot be safely stopped and started",
        "labels":  [
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117240",
        "createdAt":  "2025-07-02T13:00:05Z",
        "number":  117240,
        "author":  "migajek",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-15T19:09:09Z",
        "body":  "### Description\n\nSome .NET APIs are unable to resolve mDNS host in local network. \n\nI have a raspberry running in the local network. According to the docs, [it supports mDNS](https://www.raspberrypi.com/documentation/computers/remote-access.html#resolve-raspberrypi-local-with-mdns) and it indeed seems to do so.\n\n```\n\u003e ping -4 -n 1 raspberrypi.local\nPinging raspberrypi.local [192.168.1.104] with 32 bytes of data:\nReply from 192.168.1.104: bytes=32 time=16ms TTL=64\n\n\u003e ping -6 -n 1 raspberrypi.local\nPinging raspberrypi.local [fe80::540c:5fe7:252d:5de8%37] with 32 bytes of data:\nReply from fe80::540c:5fe7:252d:5de8%37: time=11ms\n```\n\nI can also reach the http service running there in my browser, access the ssh providing `raspberrypi.local` address and so on. \n\n\nHowever, when trying to reach/resolve `raspberrypi.local` host using various .NET APIs on a Windows 10 machine, some of the APIs fail to resolve host.\nI\u0027ve written a simple test app (code below) that checks the following APIs:\n - Dns.GetHostEntry\n - Dns.GetHostAddresses\n - Ping\n - TcpClient\n - HttpClient\n\nwhen ran on the Windows 10 machine, Dns.GetHostEntry, Ping and HttpClient work properly, while Dns.GetHostAddresses and TcpClient fail:\n\n```\nOS supports ipv6:\nTrue\n----\nGetHostEntry:\nfe80::540c:5fe7:252d:5de8%37, 192.168.1.104\n----\nGetHostAddresses:\n[FAIL]: Nieznany host.\n----\nPing:\nReached at fe80::540c:5fe7:252d:5de8\n----\nTcpClient:\n[FAIL]: Nieznany host.\n----\nHttpClient:\nTrue\n----\n```\n\n\nwhen running the very same code on the very **same machine, but via WSL2** (in docker container) the only failing test is Ping, but that is just not supported there.:\n\n```\nOS supports ipv6:\nTrue\n----\nGetHostEntry:\n192.168.1.104, fe80::540c:5fe7:252d:5de8\n----\nGetHostAddresses:\n192.168.1.104, fe80::540c:5fe7:252d:5de8\n----\nPing:\n[FAIL]: System.PlatformNotSupportedException: The system\u0027s ping utility could not be found.\n----\nTcpClient:\nTrue\n----\nHttpClient:\nTrue\n```\n\nI am failing to find any clue in the docs explaining why that could happen.\n\n\n### Reproduction Steps\n\nc# \nusing System.Net;\nusing System.Net.Http;\nusing System.Net.NetworkInformation;\nusing System.Net.Sockets;\nusing System.Security.Cryptography;\n\nconst string host = \"raspberrypi.local\";\n\nRunTest(\"OS supports ipv6\", () =\u003e System.Net.Sockets.Socket.OSSupportsIPv6);\n\nRunTest(\"GetHostEntry\", () =\u003e Dns.GetHostEntry(host));\n\nRunTest(\"GetHostAddresses\", () =\u003e Dns.GetHostAddresses(host));\n\nRunTest(\"Ping\", () =\u003e new Ping().Send(host, 10_000));\n\nRunTest(\"TcpClient\", () =\u003e\n{\n    using var tcp = new TcpClient();\n    tcp.Connect(host, 10_001);    \n    return tcp.Connected;\n});\n\nRunTest(\"HttpClient\", () =\u003e\n{\n    using var http = new HttpClient(new HttpClientHandler(){\n        ServerCertificateCustomValidationCallback = HttpClientHandler.DangerousAcceptAnyServerCertificateValidator\n    });\n    return http.GetStringAsync($\"https://{host}/\").ConfigureAwait(false).GetAwaiter().GetResult().Contains(\"\u003chead\u003e\");\n});\n\n\nstatic void RunTest\u003cT\u003e(string name, Func\u003cT\u003e action)\n{\n    try\n    {\n        Console.WriteLine($\"{name}:\");\n        action().Dump();\n    }\n    catch (Exception ex)\n    {\n        Console.WriteLine($\"[FAIL]: {ex.Message}\");\n    }\n    Console.WriteLine(\"----\");\n}\n\ninternal static class Exts\n{\n    public static T Dump\u003cT\u003e(this T obj)\n    {\n        Console.WriteLine(obj switch\n        {\n            IPHostEntry ipHostEntry =\u003e String.Join(\", \", ipHostEntry.AddressList.Select(a =\u003e a.ToString())),\n            PingReply ping =\u003e $\"Reached at {ping.Address.ToString()}\",\n            _ =\u003e obj.ToString()\n        });\n        return obj;\n    }\n}\n\n### Expected behavior\n\nthe host address should be either resolved or not, consistently across all the APIs, and all platforms\n\n### Actual behavior\n\non Windows 10 some APIs resolve the host, while the other do not\n\n### Regression?\n\nNot that I\u0027m aware of. Checked against .NET 6, 8 and 9 - it all behaves the same way.\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET 5, 8 and 9\nWindows 10  x64\nUbuntu 18.04 on WSL2 (at Win 10)\n\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOt0rNgg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc60eJuI",
                                           "createdAt":  "2025-07-02T13:00:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-02T13:00:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc60fDbv",
                                           "createdAt":  "2025-07-02T14:12:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "`fe80:...` is link-local address, it\u0027s not reachable from outside of the machine. By any chance are you using systemd-resolved? If so, add `LinkLocalAddressing=no` to your `/etc/systemd/network/\u003ciface\u003e.network` on the raspberry, right after `MulticastDNS=yes`.",
                                           "updatedAt":  "2025-07-02T14:12:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc60fShG",
                                           "createdAt":  "2025-07-02T14:29:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "migajek",
                                           "body":  "@ManickaP first I have to admit I have zero knowledge of ipv6, and also very limited knowledge of network management. \n\nwhat I can tell is:\n* systemd-resolved is not present in Raspberry PI  OS (Bookworm)\n* to my understanding, this IPv6 address should be reachable from within the same local network, which I\u0027m attempting succesfully\n* I was able to ssh into my raspberry from my Windows 10 machine using `ssh michal@fe80::540c:5fe7:252d:5de8` which makes me think the resolutions in the log provided were correct ",
                                           "updatedAt":  "2025-07-02T14:29:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc63Ss2C",
                                           "createdAt":  "2025-07-15T19:08:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "what do you pass to `GetHostEntry`? It is expecting address and performs reverse lookup. While the `GetHostAddresses` does forward lookup. The DNS.* calls is basically equivalent of running `nslookup` on your machine. We use platform API to do the resolution iso it depends on particular OS capability. One is ability to resolve locally and the other is to report it to others. You may also need to run packet capture to see what is being asked on network and what answers are coming back. I think there is very little to see at .NET layer as that is only wrapper. ",
                                           "updatedAt":  "2025-07-15T19:08:59Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Inconsistent behavior of mDNS resolution in local network, across multiple APIs and platforms",
        "labels":  [
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117267",
        "createdAt":  "2025-07-03T12:22:20Z",
        "number":  117267,
        "author":  "CarnaViire",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-04T12:52:28Z",
        "body":  "One-off crash 30-06-2025 on `net10.0-linux-Release-x64-CoreCLR_Release-Ubuntu.2204.Amd64.Open`\n\n```\nUnhandled exception. System.InvalidOperationException: Operation is not valid due to the current state of the object.\n   at System.Net.Http.Http2Connection.Http2Stream.System.Threading.Tasks.Sources.IValueTaskSource.OnCompleted(Action`1 continuation, Object state, Int16 token, ValueTaskSourceOnCompletedFlags flags) in /_/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/Http2Stream.cs:line 1418\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AwaitUnsafeOnCompleted[TAwaiter](TAwaiter\u0026 awaiter, IAsyncStateMachineBox box) in /_/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncTaskMethodBuilderT.cs:line 106\n--- End of stack trace from previous location ---\n   at System.Threading.Tasks.Task.\u003c\u003ec.\u003cThrowAsync\u003eb__124_1(Object state) in /_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs:line 1926\n   at System.Threading.ThreadPoolWorkQueue.Dispatch() in /_/src/libraries/System.Private.CoreLib/src/System/Threading/ThreadPoolWorkQueue.cs:line 1154\n   at System.Threading.PortableThreadPool.WorkerThread.WorkerThreadStart() in /_/src/libraries/System.Private.CoreLib/src/System/Threading/PortableThreadPool.WorkerThread.cs:line 118\n   at System.Threading.Thread.StartCallback() in /_/src/coreclr/System.Private.CoreLib/src/System/Threading/Thread.CoreCLR.cs:line 104\n```\n\n- [Console Logs](https://helixr1107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-heads-main-5493c9bfa2214e3b82/System.Net.WebSockets.Client.Tests/1/console.dd3001f3.log?helixlogtype=result)\n- [Pipeline](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1081823)\n- [WorkItem](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1081823\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=29426990\u0026resultId=108652\u0026paneView=debug)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOu8oDwg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc60ubWW",
                                           "createdAt":  "2025-07-03T12:23:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-03T12:23:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc67ygPC",
                                           "createdAt":  "2025-08-04T12:52:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CarnaViire",
                                           "body":  "Triage: Doesn\u0027t repro neither in CI nor locally so far, pushing to 11",
                                           "updatedAt":  "2025-08-04T12:52:28Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "System.Net.WebSockets.Client.Tests WorkItem crash",
        "labels":  [
                       "area-System.Net"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117964",
        "createdAt":  "2025-07-23T02:53:29Z",
        "number":  117964,
        "author":  "elinor-fung",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-21T00:04:14Z",
        "body":  "## Build Information\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=1102265\nBuild error leg or test failing: System.Net.WebSockets.Client.Tests.InvokerCloseTest.CloseOutputAsync_ClientInitiated_CanReceive_CanClose\nPull request: https://github.com/dotnet/runtime/pull/117797\n\n```\n[19:19:09] info: [FAIL] System.Net.WebSockets.Client.Tests.InvokerCloseTest.CloseOutputAsync_ClientInitiated_CanReceive_CanClose(server: wss://127.0.0.1:49187/WebSocket/EchoWebSocket.ashx)\n[19:19:09] info: System.Net.WebSockets.WebSocketException : CloseOutputAsync_Client_InvalidPayloadData\n[19:19:09] info:    at System.Net.WebSockets.BrowserWebSocket.ConvertResponse()\n[19:19:09] info:    at System.Net.WebSockets.BrowserWebSocket.ReceiveAsyncCore(ArraySegment`1 buffer, CancellationToken cancellationToken)\n[19:19:09] info:    at System.Net.WebSockets.Client.Tests.CloseTest.CloseOutputAsync_ClientInitiated_CanReceive_CanClose(Uri server)\n[19:19:09] info: --- End of stack trace from previous location ---\n```\n\n\u003c!-- Error message template  --\u003e\n## Error Message\n\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\n\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\n\n```json\n{\n  \"ErrorMessage\": [\"CloseOutputAsync_ClientInitiated_CanReceive_CanClose\", \"CloseOutputAsync_Client_InvalidPayloadData\"],\n  \"BuildRetry\": false,\n  \"ExcludeConsoleLog\": false\n}\n```\n\n\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=1102265\r\n**Error message validated:** `[CloseOutputAsync_ClientInitiated_CanReceive_CanClose CloseOutputAsync_Client_InvalidPayloadData`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 7/23/2025 2:54:02 AM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n\r\n|Build|Definition|Test|Pull Request|\r\n|---|---|---|---|\r\n|[1150040](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1150040)|dotnet/runtime|[WasmTestOnChrome-ST-System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1150040\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31767468\u0026resultId=196555)|dotnet/runtime#112876|\r\n|[1148555](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1148555)|dotnet/runtime|[WasmTestOnChrome-ST-System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1148555\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31721058\u0026resultId=196549)|dotnet/runtime#119599|\r\n|[1147873](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1147873)|dotnet/runtime|[WasmTestOnChrome-ST-System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1147873\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31694756\u0026resultId=196551)|dotnet/runtime#119702|\r\n|[1146219](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1146219)|dotnet/runtime|[WasmTestOnChrome-ST-System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1146219\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31630206\u0026resultId=196551)|dotnet/runtime#119628|\r\n|[1145755](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1145755)|dotnet/runtime|[WasmTestOnChrome-ST-System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1145755\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31614818\u0026resultId=196549)|dotnet/runtime#119584|\r\n|[1144762](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1144762)|dotnet/runtime|[WasmTestOnChrome-ST-System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1144762\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31578988\u0026resultId=175188)||\r\n|[1144231](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1144231)|dotnet/runtime|[WasmTestOnChrome-ST-System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1144231\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31560062\u0026resultId=196549)|dotnet/runtime#114969|\r\n|[1143909](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1143909)|dotnet/runtime|[WasmTestOnChrome-ST-System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1143909\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31549186\u0026resultId=196412)|dotnet/runtime#119518|\r\n|[1139630](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1139630)|dotnet/runtime|[WasmTestOnChrome-ST-System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1139630\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31397766\u0026resultId=196411)||\r\n|[1137905](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1137905)|dotnet/runtime|[WasmTestOnChrome-ST-System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1137905\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31339668\u0026resultId=196547)|dotnet/runtime#119294|\r\n|[1135493](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1135493)|dotnet/runtime|[WasmTestOnChrome-ST-System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1135493\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31256722\u0026resultId=196526)|dotnet/runtime#118932|\r\n|[1134226](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1134226)|dotnet/runtime|[WasmTestOnChrome-ST-System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1134226\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31217364\u0026resultId=196524)|dotnet/runtime#117436|\r\n|[1131564](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1131564)|dotnet/runtime|[WasmTestOnChrome-ST-System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1131564\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31133158\u0026resultId=196411)|dotnet/runtime#119069|\r\n|[1129101](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1129101)|dotnet/runtime|[WasmTestOnChrome-ST-System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1129101\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31057038\u0026resultId=175049)||\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|3|14|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOxINd9w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc65Gg6Q",
                                           "createdAt":  "2025-07-23T02:53:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-23T02:53:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc65ICF8",
                                           "createdAt":  "2025-07-23T06:10:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-23T06:10:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc65IxU3",
                                           "createdAt":  "2025-07-23T06:48:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CarnaViire",
                                           "body":  "Note: Most of the test classes in `System.Net.WebSockets.Client.Tests` are renamed in PR #117255 to differentiate with the in-process loopback server. All test names remain the same. It should still be matched to the issue, if it were to fail in the future after #117255 is merged.\n\n```diff\n- System.Net.WebSockets.Client.Tests.InvokerCloseTest.CloseOutputAsync_ClientInitiated_CanReceive_CanClose\n+ System.Net.WebSockets.Client.Tests.CloseTest_Invoker_External.CloseOutputAsync_ClientInitiated_CanReceive_CanClose\n```",
                                           "updatedAt":  "2025-07-23T06:48:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-gskI",
                                           "createdAt":  "2025-08-18T11:21:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "Why do we see close event earlier than the message event is processed ?\n\nMaybe the implementation is wrong?\n\nhttps://github.com/dotnet/runtime/blob/be1ef917b47413b6b66249e97066792a9fcb77ec/src/mono/browser/runtime/web-socket.ts#L120-L125\n\nmaybe we need to treat close event as another event and add it into `event_queue.enqueue` same way as data.",
                                           "updatedAt":  "2025-08-18T11:36:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_Bmeq",
                                           "createdAt":  "2025-08-20T08:44:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "keep observing it for few days, see if it helped",
                                           "updatedAt":  "2025-08-20T08:44:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7Eg133",
                                           "createdAt":  "2025-09-16T09:17:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "Unfortunately https://github.com/dotnet/runtime/pull/118887 didn\u0027t fix it",
                                           "updatedAt":  "2025-09-16T09:17:12Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "[wasm] System.Net.WebSockets.Client.Tests.InvokerCloseTest.CloseOutputAsync_ClientInitiated_CanReceive_CanClose failing with WebSocketException",
        "labels":  [
                       "arch-wasm",
                       "area-System.Net",
                       "blocking-clean-ci",
                       "Known Build Error"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118150",
        "createdAt":  "2025-07-29T00:35:03Z",
        "number":  118150,
        "author":  "shapea",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODJ5gZQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mahara",
                                            "createdAt":  "2025-08-05T11:06:29Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-29T23:49:33Z",
        "body":  "### Description\n\nWith most ICMP ping implementations, both Success and TTL Expired typically return RTT in the reply.\n\nHowever, the .NET Ping wrapping implementation treats ONLY `Success` as a valid case to return RTT, which doesn\u0027t even match the methods it pinvokes into under the hood.\n\nFor example, the Windows implementation of .NET Ping wraps `IcmpSendEcho2` using `ICMP_ECHO_REPLY` replies. If you use this API directly in C/C++, the ICMP_ECHO_REPLY will include an RTT any time status = 11013 (i.e. IP_TTL_EXPIRED_TRANSIT). However, the .NET Ping wrapper completely ignores this and simply returns 0 because the status isn\u0027t Success.\n\nThis is clearly an implementation bug and greatly weakens the .NET implementation while using PingOptions.Ttl for trace scenarios, making Ping overall much less useful. For example, many internet routers will return with a TTL Expired but will NOT respond with an ICMP Reply if pinged directly, running into a situation where you can determine the route but not actually determine the RTT to each hop along the route.\n\nConsider the following C++ (which is only provided as example, not meant to be super pretty):\n\n```c++\n#pragma comment(lib, \"iphlpapi.lib\")\n#pragma comment(lib, \"ws2_32.lib\")\n\n#include \u003cWinSock2.h\u003e\n#include \u003cWS2tcpip.h\u003e\n#include \u003cWindows.h\u003e\n#include \u003ciphlpapi.h\u003e\n#include \u003cIcmpAPI.h\u003e\n#include \u003cmemory\u003e\n#include \u003carray\u003e\n\nint main(int, char**)\n{\n    // 1.1.1.1\n    auto destination = sockaddr_in { AF_INET, 0, { 1, 1, 1, 1 } };\n\n    auto handle = IcmpCreateFile();\n    if (handle != INVALID_HANDLE_VALUE)\n    {\n        char request[] = \"cn78bva87hv987aWEvha3w898a293tg\";\n        auto buffer = std::array\u003cstd::byte, sizeof(ICMP_ECHO_REPLY) + sizeof(request) + 8\u003e {};\n\n        auto options = IP_OPTION_INFORMATION { 0, 0, IP_FLAG_DF };\n        for (UCHAR i = 1; i != 32; ++i)\n        {\n            options.Ttl = i;\n\n            auto result = IcmpSendEcho2(handle, nullptr, nullptr, nullptr, destination.sin_addr.S_un.S_addr, request, sizeof(request), \u0026options, buffer.data(), (DWORD)buffer.size(), 1000);\n\n            if (result != 0)\n            {\n                auto* response = reinterpret_cast\u003cICMP_ECHO_REPLY*\u003e(buffer.data());\n\n                auto source = sockaddr_in { };\n                source.sin_addr.S_un.S_addr = response-\u003eAddress;\n\n                printf_s(\"%d: status=%u address=%d.%d.%d.%d rtt=%u\\r\\n\",\n                  i,\n                  response-\u003eStatus,\n                  source.sin_addr.S_un.S_un_b.s_b1,\n                  source.sin_addr.S_un.S_un_b.s_b2,\n                  source.sin_addr.S_un.S_un_b.s_b3,\n                  source.sin_addr.S_un.S_un_b.s_b4,\n                  response-\u003eRoundTripTime);\n\n                if (response-\u003eStatus == 0)\n                {\n                    break;\n                }\n            }\n        }\n\n        IcmpCloseHandle(handle);\n    }\n\n    return 0;\n}\n```\n\nFor me, this results in something like:\n```\n1: status=11013 address=10.30.124.2 rtt=25\n2: status=11013 address=10.37.81.138 rtt=29\n3: status=11013 address=10.37.35.125 rtt=29\n4: status=11013 address=10.200.174.66 rtt=38\n5: status=11013 address=10.200.174.162 rtt=34\n6: status=11013 address=131.107.6.130 rtt=33\n7: status=11013 address=131.107.5.114 rtt=32\n8: status=11013 address=131.107.200.82 rtt=51\n9: status=11013 address=207.46.36.105 rtt=45\n10: status=11013 address=104.44.36.76 rtt=72\n11: status=11013 address=108.162.243.51 rtt=50\n12: status=0 address=1.1.1.1 rtt=60\n```\n\nNow if we do the same thing using Ping in .NET (which wraps the SAME API under Windows):\n```cs\nnamespace PingTest\n{\n    using System;\n    using System.Net;\n    using System.Net.NetworkInformation;\n    using System.Text;\n    using System.Threading.Tasks;\n\n    public static class Program\n    {\n        static async Task Main(string[] args)\n        {\n            var ping = new Ping();\n            var options = new PingOptions(1, true);\n            var destination = IPAddress.Parse(\"1.1.1.1\");\n            var buffer = Encoding.ASCII.GetBytes(\"cn78bva87hv987aWEvha3w898a293tg\");\n\n            for (int i = 1; i != 32; ++i)\n            {\n                options.Ttl = i;\n                var response = await ping.SendPingAsync(destination, 1000, buffer, options);\n\n                Console.WriteLine(\"{0}: status={1} address={2} rtt={3}\", i, response.Status, response.Address, response.RoundtripTime);\n\n                if (response.Status == IPStatus.Success)\n                {\n                    break;\n                }\n            }\n       }\n     }\n}\n```\n\nThis results in an output such as:\n```\n1: status=TtlExpired address=10.30.124.2 rtt=0\n2: status=TtlExpired address=10.37.81.138 rtt=0\n3: status=TtlExpired address=10.37.35.125 rtt=0\n4: status=TtlExpired address=10.200.174.66 rtt=0\n5: status=TtlExpired address=10.200.174.162 rtt=0\n6: status=TtlExpired address=131.107.6.130 rtt=0\n7: status=TtlExpired address=131.107.5.114 rtt=0\n8: status=TtlExpired address=131.107.200.82 rtt=0\n9: status=TtlExpired address=207.46.36.105 rtt=0\n10: status=TtlExpired address=104.44.36.76 rtt=0\n11: status=TtlExpired address=108.162.243.51 rtt=0\n12: status=Success address=1.1.1.1 rtt=42\n```\n\nEven though the .NET Ping is calling the same API.\n\n\n\n### Reproduction Steps\n\nSee the code in the issue description. This can be faithfully reproduced with any TtlExpired reply in the .NET Ping implementation.\n\n### Expected behavior\n\nThe expectation is for the RTT to be set properly the same as the underlying APIs being used for TTL Expired ICMP replies, rather than dropping the value and returning 0.\n\n### Actual behavior\n\nFor any non-Success reply, Ping always ignores API values and returns 0 RTT, even for TTL Expired.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nThe only workaround until this is fixed is manually pInvoking into the same APIs.\n\n### Configuration\n\nThis was only tested under Windows, but the same expectation is held for other OS\u0027s.\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOutNLkA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc66l4F6",
                                           "createdAt":  "2025-07-29T03:21:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-29T03:21:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc66wF04",
                                           "createdAt":  "2025-07-29T16:05:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "You can probably get best estimate measuring time between start and finish @shapea. I could see argument about providing more info even for failed case. What would you expect for cases when there is no response at all e.g. real timeout?",
                                           "updatedAt":  "2025-07-29T16:05:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc660apH",
                                           "createdAt":  "2025-07-29T22:54:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "shapea",
                                           "body":  "@wfurt in the case of a timeout or other non-response failures, a RTT 0 makes total sense.\n\nTTL expired is kind a special case in that it\u0027s both a failure and not a failure. You didn\u0027t succeed getting to the destination, but you did succeed getting a response typically with an RTT.\n\nWhile we\u0027re on the subject, why does .NET call command line ping in Linux rather than trying to use things such as liboping?\n\nYes, you can add a measurement before/after the Ping call, but that ends up also including other things in the timing rather than solely the RTT.",
                                           "updatedAt":  "2025-07-29T22:54:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6600uQ",
                                           "createdAt":  "2025-07-29T23:49:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "\u003e rather than trying to use things such as liboping?\n\nlicense and dependency management. When possible, we use RAW socket directly, the `ping` utility is fallback as it is already SUID. ",
                                           "updatedAt":  "2025-07-29T23:49:22Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Ping RoundtripTime is Wrong",
        "labels":  [
                       "area-System.Net",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118569",
        "createdAt":  "2025-08-11T07:55:48Z",
        "number":  118569,
        "author":  "rzikm",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-11T16:57:35Z",
        "body":  "[RFC 6761](https://www.rfc-editor.org/rfc/rfc6761) Defines several DNS names to be handled specially by DNS resolution APIs and libraries:\n- `localhost`, and `*.localhost` should always resolve to respective loopback address\n- `invalid` and `*.invalid` should always resolve to NXDOMAIN response\n\nUnfortunately, current OS-level resolution APIs on both Windows and Linux (I did not check MacOS, but I assume the situation is going to be identical to Linux) do not recognize subdomains of `localhost` or `invalid` as special, and forward the queries to the respective DNS server (which is against the RFC spec).\n\nThis feature would play well with https://github.com/dotnet/aspnetcore/pull/62593, which introduces support for localhost subdomains was for local development.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvUzBkQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc69KgQ0",
                                           "createdAt":  "2025-08-11T07:56:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-11T07:56:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc69KqF8",
                                           "createdAt":  "2025-08-11T08:08:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e I did not check MacOS, but I assume the situation is going to be identical to Linux\n\nWe should check. The RFC was written by Apple employees so presumably they were standardizing something present in their implementation.\n\nUPD: macOS Sequoia doesn\u0027t seem to handle it, tested with `nslookup` smoke test.",
                                           "updatedAt":  "2025-08-11T08:10:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc69TMGR",
                                           "createdAt":  "2025-08-11T16:57:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEd8afg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rzikm",
                                                                               "createdAt":  "2025-08-12T06:46:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "BrennanConroy",
                                           "body":  "There was a follow-up change as *.localhost doesn\u0027t really work\nhttps://github.com/dotnet/aspnetcore/pull/62668",
                                           "updatedAt":  "2025-08-11T16:57:35Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Domain name resolution does not handle RFC6761 special names correctly",
        "labels":  [
                       "area-System.Net",
                       "good first issue",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119220",
        "createdAt":  "2025-08-30T10:30:51Z",
        "number":  119220,
        "author":  "simonthum",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODNsAeA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "christopherpross",
                                            "createdAt":  "2025-09-01T12:27:02Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-09-19T08:17:31Z",
        "body":  "### Description\n\nAs explained in issue #113398, `GetRequestStream()` may hang when `AllowWriteStreamBuffering` is set to false.\n\nI am in .net 9.0.8 and I have a mostly identical issue, except that it is now spurious. I cannot reproduce reliably, but after about 10000 concurrent requests it tends to crop up.\n\n### Reproduction Steps\n\nMake 10.000 concurrent requests as described, mostly POST.\n\n\n\n### Expected behavior\n\nI get exactly 10.000 responses or exceptions.\n\n### Actual behavior\n\nSome requests hang indefinitely.\n\n### Regression?\n\nYes. It does not happen under .net 4.8 nor when `AllowWriteStreamBuffering` is left alone (true) in .net 9. \n\n### Known Workarounds\n\nDo not set `AllowWriteStreamBuffering` to false.\n\n### Configuration\n\n.net 9.0.8, Windows Server 2019, X64. Probably not specific to that.\n\n### Other information\n\nMost likely, the fix to #113398 is not complete yet.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOxQunrw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7BEf7z",
                                           "createdAt":  "2025-08-30T10:42:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEgPjKQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "liveans",
                                                                               "createdAt":  "2025-08-30T11:18:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "simonthum",
                                           "body":  "@liveans This finding might be of interest to you.",
                                           "updatedAt":  "2025-08-30T10:42:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BEhPw",
                                           "createdAt":  "2025-08-30T10:54:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "simonthum",
                                           "body":  "In case one might want to know, this is happening against a single http 1.1 endpoint with keep-alive of 16 seconds and 100 continue support at about 3-12 concurrent requests. Some of the requests/responses involve http range headers.",
                                           "updatedAt":  "2025-08-30T10:56:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BEkVx",
                                           "createdAt":  "2025-08-30T11:21:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-30T11:21:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BLzuW",
                                           "createdAt":  "2025-09-01T07:01:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "As far as I can see, the fix (https://github.com/dotnet/runtime/pull/113409) was not backported into 9.0. Can you retry on .NET 10 ? There are pre-release versions out.\n\nWe tend to NOT backport unless we have a strong business case to do so. And this also has an easy workaround with using the buffering.",
                                           "updatedAt":  "2025-09-01T07:01:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BL30N",
                                           "createdAt":  "2025-09-01T07:07:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEgVJxQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ManickaP",
                                                                               "createdAt":  "2025-09-01T07:19:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "liveans",
                                           "body":  "It does repro for me with .NET 10 as well, so I\u0027m inclined to take a look at this.\n\n/cc @ManickaP ",
                                           "updatedAt":  "2025-09-01T07:07:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BaEJj",
                                           "createdAt":  "2025-09-02T10:58:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "simonthum",
                                           "body":  "@ManickaP We can work with the state of affairs, but that is because we already know and do not have a long deplyoment pipeline. Both is probably not true for most teams still (partially) on .net 4.8.\n\nI\u0027m happy to try .net 10 when the issue is pinned.",
                                           "updatedAt":  "2025-09-02T10:59:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7FCvqk",
                                           "createdAt":  "2025-09-18T07:32:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "simonthum",
                                           "body":  "@liveans  I have some feedback from production. It\u0027s \"nuanced\". \n\nI have fielded several versions with the workaround in place and it works in the sense that it does not hang and spill over.\n\nIt does, however, produce a considerable quantity of timeouts on our larger deployments (smaller ones seem to do fine). That\u0027s 10-20% timeouts that are not observed with .net 4.8, or other http clients for that matter.\n\nI realize that WebRequest is deprecated. We can probably bite the bullet and convert the code, but I wrt WebRequest I urge you to either kill it or fix it.",
                                           "updatedAt":  "2025-09-19T08:17:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7FC6ev",
                                           "createdAt":  "2025-09-18T07:40:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEi_b1g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "simonthum",
                                                                               "createdAt":  "2025-09-19T08:08:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "liveans",
                                           "body":  "@simonthum Thanks for the feedback, in modern .NET, `HttpWebRequest` is deprecated as you said and it\u0027s built on top of `HttpClient`, and we recommend using `HttpClient` directly. Also, we\u0027re aware of that `HttpWebRequest` is not in its best shape, and we have done couple of attempts to improve it even further, I\u0027m going to investigate this issue and will try to improve it.",
                                           "updatedAt":  "2025-09-18T07:40:04Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "HttpWebRequest.GetRequestStream() still hangs in .net 9.0.8",
        "labels":  [
                       "area-System.Net",
                       "untriaged"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119520",
        "createdAt":  "2025-09-10T07:24:32Z",
        "number":  119520,
        "author":  "ManickaP",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-21T00:04:35Z",
        "body":  "## Build Information\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=1141856\nBuild error leg or test failing: System.Net.WebSockets.Client.Tests.WorkItemExecution\nPull request: https://github.com/dotnet/runtime/pull/119453\n\u003c!-- Error message template  --\u003e\n## Error Message\n\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\n\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\n\n```json\n{\n  \"ErrorMessage\": \"[\u0027System.Net.WebSockets.Client.Tests\u0027 END OF WORK ITEM LOG: Command exited with 70]\",\n  \"ErrorPattern\": \"\",\n  \"BuildRetry\": false,\n  \"ExcludeConsoleLog\": false\n}\n```\n\n\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=1141856\r\n**Error message validated:** `[[\u0027System.Net.WebSockets.Client.Tests\u0027 END OF WORK ITEM LOG: Command exited with 70]`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 9/10/2025 7:24:53 AM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n\r\n|Build|Definition|Test|Pull Request|\r\n|---|---|---|---|\r\n|[1141856](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1141856)|dotnet/runtime|[System.Net.WebSockets.Client.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1141856\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31474394\u0026resultId=116302)|dotnet/runtime#119453|\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|1|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwyBMjA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7DIEuN",
                                           "createdAt":  "2025-09-10T07:25:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-android\u0027: @vitek-karas, @simonrozsival, @steveisok, @akoeplinger\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-10T07:25:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DIEyM",
                                           "createdAt":  "2025-09-10T07:25:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-10T07:25:28Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "System.Net.WebSockets.Client.Tests android fails",
        "labels":  [
                       "area-System.Net",
                       "blocking-clean-ci",
                       "os-android",
                       "untriaged",
                       "Known Build Error"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119843",
        "createdAt":  "2025-09-18T13:15:02Z",
        "number":  119843,
        "author":  "petrroll",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-18T19:15:32Z",
        "body":  "\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\n\n### Description\n\nAny big websocket service will naturally have clients suddenly disconnecting, sending cancelled, etc. There\u0027s almost no way to proactively guard from it. Current design of .NET BCL means this events lead to exception. That much is expected.\n\nEven if one tries to proactively limit the number of actually thrown exceptions via configureoptions `SuppressThrowing`, there\u0027s still a _lot of_ exceptions thrown within the ManagedWebSocket for control flow. \n\nNamely we see following callstacks (most often ReceiveAsyncPrivate): \n\n\u003cimg width=\"830\" height=\"828\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/d881c4ed-6d74-4734-bac3-b10f3edc60e3\" /\u003e\n\n\u003cimg width=\"1731\" height=\"1142\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/777aa080-5950-46ef-87b1-5fce57511859\" /\u003e\n\n\u003cimg width=\"2559\" height=\"1139\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/905ceb27-890d-4f8b-8dbb-c87851abbd64\" /\u003e\n\n### Configuration\n\nWindows, http.sys, .NET 9; but it seems to be not tied to either platform of http server.\n\n### Regression?\n\nNo\n\n### Data\n\nSee above\n\n### Ask:\n\nI understand big changes might be problematic, but wouldn\u0027t it be possible to change ReceiveAsyncPrivate to do controll flow _without_ throwin (and frequently catching) exceptions? But instead just return? \n\n### Analysis\n\nExceptions above are \u003e 10 % of all exceptions thrown in our (very big) websocket as a service service (hundreds of millions users daily).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOxT8DbQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7FPwNt",
                                           "createdAt":  "2025-09-18T19:15:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-18T19:15:32Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Normal operations inner exceptions of ManagedWebsocket lead to big percentage of all thrown exceptions",
        "labels":  [
                       "area-System.Net",
                       "tenet-performance",
                       "untriaged"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119851",
        "createdAt":  "2025-09-18T17:12:01Z",
        "number":  119851,
        "author":  "vitek-karas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-21T00:04:44Z",
        "body":  "## Build Information\nBuild: https://dev.azure.com/dnceng-public/public/_build/results?buildId=1151627\nBuild error leg or test failing: System.Net.NameResolution.PalTests.NameResolutionPalTests.TryGetAddrInfo_ExternalHost\n\u003c!-- Error message template  --\u003e\n## Error Message\n\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\n\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\n\n```json\n{\n  \"ErrorMessage\": [ \"TryGetAddrInfo_ExternalHost\", \"Actual:   HostNotFound\" ],\n  \"BuildRetry\": false,\n  \"ExcludeConsoleLog\": false\n}\n```\n\nThis seems to fail only on Android amr/arm64, the test passes on Android x64 and other platforms.\nIt failed rarely but recently (since 9/11) it fails every time.\n\nThe detailed failure is:\n```\n\t[FAIL] System.Net.NameResolution.PalTests.NameResolutionPalTests.TryGetAddrInfo_ExternalHost(justAddresses: False)\nAssert.Equal() Failure: Values differ\nExpected: Success\nActual:   HostNotFound\n   at System.Net.NameResolution.PalTests.NameResolutionPalTests.TryGetAddrInfo_ExternalHost(Boolean justAddresses)\n   at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args)\n   at System.Reflection.MethodBaseInvoker.InvokeDirectByRefWithFewArgs(Object obj, Span`1 copyOfArgs, BindingFlags invokeAttr)\n```\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=1151627\r\n**Error message validated:** `[TryGetAddrInfo_ExternalHost Actual:   HostNotFound`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 9/18/2025 5:12:50 PM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n\r\n|Build|Definition|Test|Pull Request|\r\n|---|---|---|---|\r\n|[1153847](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1153847)|dotnet/runtime|[System.Net.NameResolution.Pal.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1153847\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31873098\u0026resultId=213136)||\r\n|[1153786](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1153786)|dotnet/runtime|[System.Net.NameResolution.Pal.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1153786\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31870716\u0026resultId=205432)||\r\n|[1153569](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1153569)|dotnet/runtime|[System.Net.NameResolution.Pal.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1153569\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31867056\u0026resultId=212082)||\r\n|[1153429](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1153429)|dotnet/runtime|[System.Net.NameResolution.Pal.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1153429\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31861348\u0026resultId=213120)||\r\n|[1153299](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1153299)|dotnet/runtime|[System.Net.NameResolution.Pal.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1153299\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31858494\u0026resultId=212037)||\r\n|[1152975](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152975)|dotnet/runtime|[System.Net.NameResolution.Pal.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152975\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31855740\u0026resultId=212037)||\r\n|[1152834](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152834)|dotnet/runtime|[System.Net.NameResolution.Pal.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152834\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31847444\u0026resultId=211609)||\r\n|[1152408](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152408)|dotnet/runtime|[System.Net.NameResolution.Pal.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152408\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31833384\u0026resultId=213534)||\r\n|[1152248](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152248)|dotnet/runtime|[System.Net.NameResolution.Pal.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152248\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31829782\u0026resultId=211593)||\r\n|[1152181](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152181)|dotnet/runtime|[System.Net.NameResolution.Pal.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152181\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31829000\u0026resultId=212053)||\r\n|[1151980](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1151980)|dotnet/runtime|[System.Net.NameResolution.Pal.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1151980\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31823956\u0026resultId=212037)||\r\n|[1151627](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1151627)|dotnet/runtime|[System.Net.NameResolution.Pal.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1151627\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31814438\u0026resultId=204981)||\r\n|[1151114](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1151114)|dotnet/runtime|[System.Net.NameResolution.Pal.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1151114\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31800578\u0026resultId=210117)||\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|3|13|13|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOxYLRIA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7FNf7G",
                                           "createdAt":  "2025-09-18T17:17:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihuBot",
                                           "body":  "I\u0027m a bot. Here are possible related and/or duplicate issues (I may be wrong):\n- https://github.com/dotnet/runtime/issues/47591\n- https://github.com/dotnet/runtime/issues/43927",
                                           "updatedAt":  "2025-09-18T17:17:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7FgtEg",
                                           "createdAt":  "2025-09-19T20:13:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-19T20:13:24Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[Android][arm64] System.Net.NameResolution.PalTests.NameResolutionPalTests.TryGetAddrInfo_ExternalHost fails with HostNotFound",
        "labels":  [
                       "arch-arm64",
                       "area-System.Net",
                       "os-android",
                       "untriaged",
                       "Known Build Error"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119852",
        "createdAt":  "2025-09-18T17:21:26Z",
        "number":  119852,
        "author":  "vitek-karas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-21T00:04:44Z",
        "body":  "## Build Information\nBuild: https://dev.azure.com/dnceng-public/public/_build/results?buildId=1151627\nBuild error leg or test failing: System.Net.NetworkInformation.Tests.UnixPingUtilityTests.TimeoutIsRespected\n\u003c!-- Error message template  --\u003e\n## Error Message\n\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\n\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\n\n```json\n{\n  \"ErrorMessage\": [ \"UnixPingUtilityTests.TimeoutIsRespected\", \"Assert.InRange() Failure: Value not in range\" ],\n  \"BuildRetry\": false,\n  \"ExcludeConsoleLog\": false\n}\n```\n\nThe test fails only on Android arm/arm64, on Android x64 and other platforms it passes. It used to fail rarely, but since 9/11 it fails every time.\n\nThe detailed failure:\n```\n\t[FAIL] System.Net.NetworkInformation.Tests.UnixPingUtilityTests.TimeoutIsRespected(timeout: 100)\nAssert.InRange() Failure: Value not in range\nRange:  (90 - 5000)\nActual: 48\n   at System.Net.NetworkInformation.Tests.UnixPingUtilityTests.TimeoutIsRespected(Int32 timeout)\n   at System.Object.InvokeStub_UnixPingUtilityTests.TimeoutIsRespected(Object , Span`1 )\n   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\n```\n\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=1151627\r\n**Error message validated:** `[UnixPingUtilityTests.TimeoutIsRespected Assert.InRange() Failure: Value not in range`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 9/18/2025 5:22:09 PM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n\r\n|Build|Definition|Test|Pull Request|\r\n|---|---|---|---|\r\n|[1153847](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1153847)|dotnet/runtime|[System.Net.Ping.Functional.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1153847\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31873098\u0026resultId=213137)||\r\n|[1153786](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1153786)|dotnet/runtime|[System.Net.Ping.Functional.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1153786\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31870716\u0026resultId=205433)||\r\n|[1153569](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1153569)|dotnet/runtime|[System.Net.Ping.Functional.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1153569\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31865734\u0026resultId=205433)||\r\n|[1153429](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1153429)|dotnet/runtime|[System.Net.Ping.Functional.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1153429\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31861348\u0026resultId=213121)||\r\n|[1153299](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1153299)|dotnet/runtime|[System.Net.Ping.Functional.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1153299\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31858494\u0026resultId=212038)||\r\n|[1152975](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152975)|dotnet/runtime|[System.Net.Ping.Functional.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152975\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31855740\u0026resultId=212038)||\r\n|[1152834](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152834)|dotnet/runtime|[System.Net.Ping.Functional.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152834\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31847444\u0026resultId=211610)||\r\n|[1152408](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152408)|dotnet/runtime|[System.Net.Ping.Functional.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152408\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31833384\u0026resultId=213535)||\r\n|[1152248](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152248)|dotnet/runtime|[System.Net.Ping.Functional.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152248\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31829782\u0026resultId=211594)||\r\n|[1152181](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152181)|dotnet/runtime|[System.Net.Ping.Functional.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152181\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31829000\u0026resultId=212054)||\r\n|[1151980](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1151980)|dotnet/runtime|[System.Net.Ping.Functional.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1151980\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31823956\u0026resultId=212038)||\r\n|[1151627](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1151627)|dotnet/runtime|[System.Net.Ping.Functional.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1151627\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31814532\u0026resultId=210130)||\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|3|12|12|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOxYLK_A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7FNk-e",
                                           "createdAt":  "2025-09-18T17:22:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Possibly related to https://github.com/dotnet/runtime/issues/119851 as that one also shows the same behavior - failing only on Android arm/arm64 and started failing consistently since 9/11.",
                                           "updatedAt":  "2025-09-18T17:22:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7Fgsr8",
                                           "createdAt":  "2025-09-19T20:12:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-19T20:12:45Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[Android][arm64] System.Net.NetworkInformation.Tests.UnixPingUtilityTests.TimeoutIsRespected fails with out of range values",
        "labels":  [
                       "arch-arm64",
                       "area-System.Net",
                       "os-android",
                       "untriaged",
                       "Known Build Error"
                   ]
    }
]
