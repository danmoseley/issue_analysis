[
    {
        "url":  "https://github.com/dotnet/runtime/issues/3858",
        "createdAt":  "2015-02-03T19:30:56Z",
        "number":  3858,
        "author":  "vongillern",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC4KYOg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "inlineHamed",
                                            "createdAt":  "2019-02-18T08:36:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "milost1982",
                                            "createdAt":  "2019-03-29T11:00:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dzarda",
                                            "createdAt":  "2019-06-12T11:32:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "HalidCisse",
                                            "createdAt":  "2019-07-03T23:12:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "LastLightSith",
                                            "createdAt":  "2019-10-31T09:09:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Jerome2606",
                                            "createdAt":  "2020-01-06T10:06:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gjroelofs",
                                            "createdAt":  "2020-01-17T07:18:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AmrAlSayed0",
                                            "createdAt":  "2020-02-11T07:38:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "wub",
                                            "createdAt":  "2020-04-24T00:36:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "solonrice",
                                            "createdAt":  "2020-04-30T16:43:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SERPANT",
                                            "createdAt":  "2020-06-04T04:11:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jozefizso",
                                            "createdAt":  "2020-07-29T11:26:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "haleypearse",
                                            "createdAt":  "2020-09-06T15:06:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "megasuperlexa",
                                            "createdAt":  "2020-09-07T20:25:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "EgorBo",
                                            "createdAt":  "2020-09-16T06:58:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "darkguy2008",
                                            "createdAt":  "2020-10-22T15:34:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "loraderon",
                                            "createdAt":  "2020-11-04T08:33:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lol768",
                                            "createdAt":  "2021-01-27T13:58:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AdamCaviness",
                                            "createdAt":  "2021-02-04T20:49:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "technatoria",
                                            "createdAt":  "2021-02-24T10:39:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "madhub",
                                            "createdAt":  "2021-03-21T09:31:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "danielchalmers",
                                            "createdAt":  "2021-08-05T21:02:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "marek-broda",
                                            "createdAt":  "2021-09-23T08:34:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0x0737",
                                            "createdAt":  "2021-10-06T08:57:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "LexouDuck",
                                            "createdAt":  "2021-10-15T17:51:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ik1ne",
                                            "createdAt":  "2021-11-16T09:00:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kronic",
                                            "createdAt":  "2021-12-09T19:56:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GSPP",
                                            "createdAt":  "2021-12-13T11:07:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MrZoidberg",
                                            "createdAt":  "2022-01-21T22:16:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cyungmann",
                                            "createdAt":  "2022-03-02T18:40:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ApacheTech",
                                            "createdAt":  "2022-04-06T15:45:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "michael-hawker",
                                            "createdAt":  "2022-04-26T19:28:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DevSelchow",
                                            "createdAt":  "2022-07-26T19:32:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bmwcmw",
                                            "createdAt":  "2022-10-04T07:54:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "s-tarasov",
                                            "createdAt":  "2023-03-06T22:27:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "svick",
                                            "createdAt":  "2023-05-17T20:44:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pedoc",
                                            "createdAt":  "2023-05-20T03:00:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Martinn2",
                                            "createdAt":  "2023-06-08T13:59:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2023-08-16T20:36:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "scharnyw",
                                            "createdAt":  "2023-08-17T05:51:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "netter36",
                                            "createdAt":  "2023-10-18T05:37:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "BoundedChenn31",
                                            "createdAt":  "2023-10-28T12:06:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "oscargullberg",
                                            "createdAt":  "2023-12-17T16:31:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Leh2",
                                            "createdAt":  "2024-03-01T13:36:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KennethHoff",
                                            "createdAt":  "2024-03-02T18:00:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ghosttie",
                                            "createdAt":  "2024-03-28T10:22:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "joelmartinez",
                                            "createdAt":  "2024-04-26T17:16:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "OndrejValenta",
                                            "createdAt":  "2024-04-26T17:23:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Colton1skees",
                                            "createdAt":  "2024-04-27T19:34:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "HermanEldering",
                                            "createdAt":  "2024-05-26T07:22:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rgroenewoudt",
                                            "createdAt":  "2024-05-26T13:04:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nozzlegear",
                                            "createdAt":  "2024-05-26T13:30:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "beto-rodriguez",
                                            "createdAt":  "2024-05-26T18:47:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "BitcoderCZ",
                                            "createdAt":  "2024-05-27T17:47:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KeterSCP",
                                            "createdAt":  "2024-07-11T08:19:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SmartmanApps",
                                            "createdAt":  "2024-07-11T13:16:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tomashruska1",
                                            "createdAt":  "2024-09-17T06:54:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "issue-dispenser",
                                            "createdAt":  "2024-10-03T05:52:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "abc-rpg",
                                            "createdAt":  "2024-10-03T11:57:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "VitaliAntonov",
                                            "createdAt":  "2024-10-27T19:35:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "WeihanLi",
                                            "createdAt":  "2024-12-12T07:18:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "joao-neves95",
                                            "createdAt":  "2025-01-10T16:40:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "frencsi",
                                            "createdAt":  "2025-08-28T16:11:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Atulin",
                                            "createdAt":  "2025-09-15T14:54:32Z"
                                        }
                                    ],
                          "totalCount":  64
                      },
        "updatedAt":  "2025-01-25T07:50:42Z",
        "body":  "I don\u0027t know if this necessarily the right place for this, but the payoff is big enough to warrant a possible failed attempt.\n\nNullReferenceExceptions are the most common exceptions your average developer is going to encounter, and yet the only information that is included in the exception is the message that _something_ was null and you may or may not get a line number in the stacktrace. \n\nTake the following example:\n\n```\n_orderService.CreateOrder(items.ToList(), customer.CustomerId);\n```\n\nIf I get a NullReferenceException on this line, there are three different objects that could have been null and caused the error (_orderService, items and customer). Knowing that it was specifically customer that was null would be incredibly helpful. Extending this concept further, having a small dump of all locally scoped variables when the exception was thrown would be incredibly useful, but I\u0027ll go with baby steps and just settle for knowing which variable/expression was the root cause of the null reference exception.\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOm8viPw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyNzQ0MjQ0",
                                           "createdAt":  "2015-02-03T21:59:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "peteraritchie",
                                           "body":  "It\u0027s kind of tricky because not all variable names are available when the exception is thrown.  In your example it could be that only _orderService is available by name because it\u0027s a member variable (it seems).  If items and customers are locals; they\u0027re names won\u0027t be known when the exception is thrown (unless the PDB is there--but if you have that you can debug it).  I can\u0027t say for sure, but only providing the names _some of the time_ might have been the impetus for not provide names at all.\n",
                                           "updatedAt":  "2015-02-03T21:59:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyNzUyMzM3",
                                           "createdAt":  "2015-02-03T22:45:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAjfJiw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "inlineHamed",
                                                                               "createdAt":  "2019-02-18T08:36:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vongillern",
                                           "body":  "Agreed. I\u0027m not sure it\u0027d be \"easy\", but well worth the effort. If the name was not available, including its type in the error message would make it unambiguous 95% of the time. (i.e. NullReferenceException - expression of type \u0027SuperOrderService\u0027 evaluated to null). \n\nMy guess though,  is that if the PDB is available, it would know the character ranges of the null expression. If i turn on \"break on thrown exceptions\" in the exceptions dialog box, it always breaks me in at the right point and I can inspect all of my variables. I just want a dump so I don\u0027t have to be actively debugging. \n",
                                           "updatedAt":  "2015-02-03T22:45:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyNzU4Nzc3",
                                           "createdAt":  "2015-02-03T23:26:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODD2n2w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2023-08-16T20:37:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "svick",
                                           "body":  "@vongillern I think you can easily make that even better by including the name of the invoked method. Something like (mostly copying the existing message):\n\n\u003e NullReferenceException: Object reference not set to an instance of an object when calling \u0027SuperOrderService.CreateOrder\u0027.\n\nThis shouldn\u0027t be that hard to do, since the `callvirt` instruction that causes the vast majority of NREs knows which method it was.\n",
                                           "updatedAt":  "2015-02-03T23:26:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyNzY0MTIz",
                                           "createdAt":  "2015-02-04T00:05:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "peteraritchie",
                                           "body":  "@svick that can be problematic too because the IL is really a representation of something like this:\n\n```\nvar list = items.ToList();\nvar customerId = customer.CustomerId;\n_orderService.CreateOrder(list, customerId);\n```\n\nAnd that\u0027s _if_ the compiler(s) decided to put the retrieval of the  param values next to the method call.\n\nI expect there\u0027d be a bit of work to associate those variables to a callvirt several instructions ahead of where the null value is actually found.  And if that value got cached/reused, it would make it a bit more complex.  I think \"easily\" is very optimistic.  If were easy, I\u0027m sure someone would have done it before now.\n",
                                           "updatedAt":  "2015-02-04T00:05:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyNzY1NTQ4",
                                           "createdAt":  "2015-02-04T00:18:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "svick",
                                           "body":  "@peteraritchie Yeah, I understand that associating `callvirt` with a variable may not be easy, but that\u0027s not what I\u0027m talking about. What I meant is that the message would contain the type (as @vongillern suggested) and method that caused the NRE.\n\nSo, in the example, the message wouldn\u0027t tell you that `_orderService` is `null`, but it would tell you that the NRE happened when calling `SuperOrderService.CreateOrder()`, which should be sufficient to debug the issue.\n\nOr maybe I misunderstood what you\u0027re saying?\n",
                                           "updatedAt":  "2015-02-04T00:19:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyNzY2ODQy",
                                           "createdAt":  "2015-02-04T00:29:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Alexx999",
                                           "body":  "I believe that NPE can be debugged in quite straightforward manner using crashdumps and WinDBG right now.\nAdding some extra data is not that common for low-level exceptions, and NPEs are not the worst case (my personal favorite is \"FileNotFoundException\" when some assembly fails to resolve some dependency - you\u0027ll newer know _which_ one actually failed).\nPlus, it will surely hurt performance - exceptions are slow as it is, and NPEs are often caught.\n",
                                           "updatedAt":  "2015-02-04T00:29:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyNzcxMTAx",
                                           "createdAt":  "2015-02-04T01:07:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODhfMnQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ashtonian",
                                                                               "createdAt":  "2016-11-08T22:05:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2019-01-17T16:06:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vladd",
                                                                               "createdAt":  "2019-07-10T09:37:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gjroelofs",
                                                                               "createdAt":  "2020-01-17T07:21:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2020-10-05T07:00:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "StephenCleary",
                                                                               "createdAt":  "2022-11-21T14:15:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2024-05-11T17:09:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "svick",
                                           "body":  "\u003e I believe that NPE can be debugged in quite straightforward manner using crashdumps and WinDBG right now.\n\nI don\u0027t think that anything that involves crashdumps or WinDBG can be called straightforward. Especially if you consider that NRE is an exception that I think beginners often encounter.\n\n\u003e NPEs are often caught\n\nI hope that you are wrong about this. NRE pretty much always indicates a bug and catching it just hides that bug.\n",
                                           "updatedAt":  "2015-02-04T01:07:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyNzc2MDg4",
                                           "createdAt":  "2015-02-04T01:55:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODpUDZQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SmartmanApps",
                                                                               "createdAt":  "2024-07-11T13:18:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "stimms",
                                           "body":  "I certainly agree with @svick on this. One of the primary goals of .net should be to be as productive of an environment as possible. We should attempt to minimize the scenarios in which a developer needs to attach a debugger or examine a crash dump as they trend to be very time consuming operations. \n\nWith hundreds of thousands of developers encountering NPEs it doesn\u0027t take long for the time savings to really add up. I\u0027m in favor of any action that gives us better error messages. \n",
                                           "updatedAt":  "2015-02-04T01:56:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyNzgzNzAw",
                                           "createdAt":  "2015-02-04T03:20:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Consider voting for http://visualstudio.uservoice.com/forums/121579-visual-studio/suggestions/2371587-better-nullpointerexception-error-message\n",
                                           "updatedAt":  "2015-02-04T03:20:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyNzg0MDQx",
                                           "createdAt":  "2015-02-04T03:24:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "peteraritchie",
                                           "body":  "I\u0027m not saying don\u0027t do it or that there\u0027s no value to it, just that it\u0027s not going to be that easy. As soon as you provide \\* some \\* detail, you have to provide detail in all circumstances or there will be lots of bugs logged\n",
                                           "updatedAt":  "2015-02-04T03:24:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyNzg2NDAw",
                                           "createdAt":  "2015-02-04T03:54:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Alexx999",
                                           "body":  "@svick well, I probably just got used to it. Anyway, I surely agree that exception messages are often bad.\n",
                                           "updatedAt":  "2015-02-04T03:54:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyODAzNTk0",
                                           "createdAt":  "2015-02-04T07:35:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "yaakov-h",
                                           "body":  "I agree with this. I\u0027ve sometimes had to resort to checking the IL offset of the exception location and compare it with a disassembled assembly just to figure out exactly which reference was null.\n\nThe more information about an error, the better.\n",
                                           "updatedAt":  "2015-02-04T07:35:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyODM1MTg0",
                                           "createdAt":  "2015-02-04T10:51:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "+1, anything that can be done to add more details to this exception should be investigated.\n\n@jkotas Thanks for the link, but that UserVoice is already 4 years old and has gotten a bunch of votes without an official statement from the team. Did you investigate a solution already? Did you run into problems or other concerns?  Would love to learn more details :)\n",
                                           "updatedAt":  "2015-02-04T10:51:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyODcyNjE1",
                                           "createdAt":  "2015-02-04T15:17:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "The project management team looks at top uservoice requests regularly and works on getting them addressed. It does not matter that the UserVoice is 4 years old - it just means that it did not gather enough votes to be in the top list yet.\n\nFor example, UserVoice votes were one of the reasons for adding SIMD support to CLR - http://visualstudio.uservoice.com/forums/121579-visual-studio/suggestions/2212443-c-and-simd\n",
                                           "updatedAt":  "2015-02-04T15:17:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyODc3MDIx",
                                           "createdAt":  "2015-02-04T15:40:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "peteraritchie",
                                           "body":  "@jkotas is there someone on the team(s) that have looked at anything like this comment on this thread?  Having some detail on what has been researched so far in terms of what would need to change in the code would give the community something to hit the ground running with for a potential PR.\n",
                                           "updatedAt":  "2015-02-04T15:40:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyODc5MjIw",
                                           "createdAt":  "2015-02-04T15:52:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vongillern",
                                           "body":  "+1 @peteraritchie, a comment from the team would be helpful. I spent a little time looking at it and the project is obviously so massive, I had a hard time knowing where I could even start.\n",
                                           "updatedAt":  "2015-02-04T15:52:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyODkzMjk5",
                                           "createdAt":  "2015-02-04T17:01:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "@CarolEidt would you like to comment on this?\n",
                                           "updatedAt":  "2015-02-04T17:01:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyOTAyMjA0",
                                           "createdAt":  "2015-02-04T17:46:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "peteraritchie",
                                           "body":  "@vongillern Right, it may be easy for the person on the CLR team that has spent the most time in that code; but that doesn\u0027t mean that person has the time to perform the change. (if that were the case, this may have been done already).  For the community to do it, however acceptable that is to do, is likely not a quick task.\n",
                                           "updatedAt":  "2015-02-04T17:46:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyOTIwODAx",
                                           "createdAt":  "2015-02-04T19:26:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CarolEidt",
                                           "body":  "@jkotas although I could imagine that the JIT could participate in a solution (through improved debug/unwind info if there are imprecisions), the main work would lie in getting System.Environment.GetStackTrace to report column numbers (which I think would give the desired granularity).  @vongillern - System.Environment.GetStackTrace is in clr\\src\\mscorlib\\src\\System\\Exception.cs.  That might be a good place to start, though debug info (beyond the IL offsets that the JIT reports) is not really my area of expertise.\n",
                                           "updatedAt":  "2015-02-04T19:26:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyOTMyOTA5",
                                           "createdAt":  "2015-02-04T20:31:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "peteraritchie",
                                           "body":  ":+1: \n",
                                           "updatedAt":  "2015-02-04T20:31:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyOTQwNTQ0",
                                           "createdAt":  "2015-02-04T21:13:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikedn",
                                           "body":  "The column number can be obtained by passing the exception object to the stack trace class, that\u0027s trivial. But there\u0027s no useful column number that you can get from a PDB, the sequence points generated by the C# (and likely any other) compiler usually track entire statements. One would need to first make the compiler emit sequence points for sub-expressions and that\u0027s problematic partly because the debug information would become larger, partly because sub-expressions can overlap and inevitably leads to overlapping sequence points. This may end up requiring changes to the debug format.\n\nThe JIT compiler too seems to track IL offsets at statement level (or an approximation of a statement).\n\nTo me this approach sounds like a non-starter. A lot of work for questionable benefit. And it\u0027s likely that it will only work properly with debug binaries.\n\nAnother approach might be to have the runtime figure out what was variable was stored in the base/index register of the memory operand that caused the access violation. The debugger can usually map a variable to a register to display its value so maybe doing the opposite wouldn\u0027t be too much trouble. But then again, this will probably work correctly only with debug binaries.\n",
                                           "updatedAt":  "2015-02-04T21:13:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyOTU0MzM4",
                                           "createdAt":  "2015-02-04T22:31:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCDkoBA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "HalidCisse",
                                                                               "createdAt":  "2021-11-22T16:11:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Correct, the JIT and PDB do not have enough precision in debug info today to reliably identify the source of NullReferenceException. For example, the following C# statement:\n\n```\n        foo(a.ToString(), b.ToString(), c.ToString());\n```\n\nhas just one sequence point, and so it is not possible to identify from just the NullReferenceException location and debug info which one of a, b or c was null. If you would like to see the good error message even with JIT optimizations on, it is even harder because of the debug info tracking is not guaranteed to be preserved by the JIT optimizations today.\n\nI think that the first step to attack this problem would be to write a design proposal about possible approaches. The ones identified by @mikedn would be a good start. Focus on: \n- The rough sketch of extra information that would flow between the different components in the system\n- The user experience - how good and reliable would be the exception messages\n- The estimated overhead in disk footprint, RAM and CPU cycles\n\nI know it is a lot of work...\n",
                                           "updatedAt":  "2015-02-04T22:31:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyOTYwNDcx",
                                           "createdAt":  "2015-02-04T23:10:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EmJayGee",
                                           "body":  "Wouldn\u0027t this feature overall be better cast as a language/compiler feature\nrather than of the runtime?  The end goal is easily mapping back to the\nsource; debug info is designed to assist that but if we want things like\nthe identifier/expression text, wouldn\u0027t this best be handled by the\ncompiler?\n\nI\u0027m assuming that this kind of information being available only in debug\nbuilds with symbols available to the runtime will be a non-starter.\n\nMike\n\nOn Wed, Feb 4, 2015 at 2:31 PM, Jan Kotas notifications@github.com wrote:\n\n\u003e Correct, the JIT and PDB do not have enough precision in debug info today\n\u003e to reliably identify the source of NullReferenceException. For example, the\n\u003e following C# statement:\n\u003e \n\u003e ```\n\u003e     foo(a.ToString(), b.ToString(), c.ToString());\n\u003e ```\n\u003e \n\u003e has just one sequence point, and so it is not possible to identify from\n\u003e just the NullReferenceException location and debug info which one of a, b\n\u003e or c was null. If you would like to see the good error message even with\n\u003e JIT optimizations on, it is even harder because of the debug info tracking\n\u003e is not guaranteed to be preserved by the JIT optimizations today.\n\u003e \n\u003e I think that the first step to attack this problem would be to write a\n\u003e design proposal about possible approaches. The ones identified by @mikedn\n\u003e https://github.com/mikedn would be a good start. Focus on:\n\u003e - The rough sketch of extra information that would flow between the\n\u003e   different components in the system\n\u003e - The user experience - how good and reliable would be the exception\n\u003e   messages\n\u003e - The estimated overhead in disk footprint, RAM and CPU cycles\n\u003e \n\u003e I know it is a lot of work...\n\u003e \n\u003e —\n\u003e Reply to this email directly or view it on GitHub\n\u003e https://github.com/dotnet/coreclr/issues/25#issuecomment-72954338.\n",
                                           "updatedAt":  "2015-02-04T23:10:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyOTYxMzQ1",
                                           "createdAt":  "2015-02-04T23:17:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "peteraritchie",
                                           "body":  "@EmJayGee Starting to sound a lot like contracts, or the very least code weaving.  I think if were approached form the compiler-side it may never get done.  Keep in mind there\u0027s 2-3 compilers in play for any piece of code: C#/VB, JIT 32-bit, and JIT 64-bit.\n",
                                           "updatedAt":  "2015-02-04T23:17:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMDAyMTU3",
                                           "createdAt":  "2015-02-05T06:47:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "OtherCrashOverride",
                                           "body":  "Exceptions should be exceptional.  If you think something may be null, you should check that condition in code to ensure proper operation.  I think this is more an issue of coding practice than a feature for the runtime.  The Common Language Runtime is, as the name implies, common among many languages so it would likely require strategies for what makes sense for each language to produce a more useful message targeted at the developer using that language.\n\nTherefore, I suggest the proper place for this is the IDE where both source code and language are known.  NullReferenceException should be a rare occurrence if good coding practices are observed.\n\n(For an example, see F#\u0027s use of null versus C#)\n",
                                           "updatedAt":  "2015-02-05T06:47:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczODcxNjQ4",
                                           "createdAt":  "2015-02-11T12:10:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rafabertholdo",
                                           "body":  "In my opinion, null.something should return null instead of raising an exception.\nhttp://visualstudio.uservoice.com/forums/121579-visual-studio/suggestions/5728581-add-and-assembly-attribute-for-the-compiler-to-byp\n\nFortunately, C# 6.0 brings an operator to make it happen, but I think the code will be dirty. This should be a compiler attribute.\n",
                                           "updatedAt":  "2015-02-11T12:10:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczOTYyMzgy",
                                           "createdAt":  "2015-02-11T20:52:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "peteraritchie",
                                           "body":  "@rafabertholdo Wouldn\u0027t that just defer a null exception to higher-up?  That seems like it would make the root cause of a null reference exception even harder to find.\n",
                                           "updatedAt":  "2015-02-11T20:52:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0MTkzNTM1",
                                           "createdAt":  "2015-02-13T02:14:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "yaakov-h",
                                           "body":  "Propagating null instead of erroring out (non-explicitly) is a bad idea, IMO. The collective experience of almost every single Objective-C developer stands against that behaviour.\n",
                                           "updatedAt":  "2015-02-13T02:14:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5OTExOTQw",
                                           "createdAt":  "2015-03-14T05:19:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kangaroo",
                                           "body":  "Issue ping.  Is there a concrete action here?\n",
                                           "updatedAt":  "2015-03-14T05:19:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwMTc5MzE1",
                                           "createdAt":  "2015-03-14T09:00:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "A number of issues in this repo track hard problems with unclear solutions. This is one of them. Our intent is to keep them open to facilitate discussion about solutions. I have created \"hard problem\" label to tag them.\n\ncc @richlander \n",
                                           "updatedAt":  "2015-03-14T09:00:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzMjY3NTA1Mg==",
                                           "createdAt":  "2017-09-27T22:34:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOArzJ4w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "nguerrera",
                                                                               "createdAt":  "2017-09-27T23:22:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "ssut",
                                                                               "createdAt":  "2018-11-01T08:32:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "JobaDiniz",
                                                                               "createdAt":  "2018-11-29T17:42:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "HalidCisse",
                                                                               "createdAt":  "2019-07-03T23:15:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "dsplaisted",
                                           "body":  "It looks like VS 2017 will show the information you want when targeting .NET Framework 4.6.2 or higher: https://blogs.msdn.microsoft.com/devops/2016/03/31/using-the-new-exception-helper-in-visual-studio-15-preview/\r\n\r\n![Null reference debug helper](https://msdnshared.blob.core.windows.net/media/2016/03/ExceptionHelper0.png)\r\n\r\nI\u0027m not sure whether it\u0027s enabled in .NET Core",
                                           "updatedAt":  "2017-09-27T22:34:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1NTQzNzYxMQ==",
                                           "createdAt":  "2018-01-05T00:18:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBUYR4w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "stimms",
                                                                               "createdAt":  "2018-01-11T13:25:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ssut",
                                                                               "createdAt":  "2018-11-01T08:33:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2019-02-18T09:28:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "HalidCisse",
                                                                               "createdAt":  "2019-07-03T23:15:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mpawelski",
                                                                               "createdAt":  "2020-04-30T16:32:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "darkguy2008",
                                                                               "createdAt":  "2020-10-22T15:37:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "alexsorokoletov",
                                           "body":  "This feature is indeed available in VS 2017, article says it is **not** available for .NET Core/UWP, only available for .NET 4.6.2.\r\n\r\nWould be really great to have that not in the VS but in .NET Core/Mono so that we can have that information in the crash reports rather than when debugging in VS.",
                                           "updatedAt":  "2018-01-05T00:18:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2NDYzNzY2NA==",
                                           "createdAt":  "2019-02-18T08:39:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOArzKEQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2019-02-18T09:29:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MrZoidberg",
                                                                               "createdAt":  "2019-03-06T16:47:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mhmd-azeez",
                                                                               "createdAt":  "2019-03-23T16:34:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "shahid-pk",
                                                                               "createdAt":  "2019-03-26T11:17:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "HalidCisse",
                                                                               "createdAt":  "2019-07-03T23:16:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "inlineHamed",
                                           "body":  "Is this available in .Net Core 3.0 ?",
                                           "updatedAt":  "2019-02-18T08:39:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3NjM3NjMxMQ==",
                                           "createdAt":  "2019-03-25T21:02:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBDUIuA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "HalidCisse",
                                                                               "createdAt":  "2019-07-03T23:17:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "ivanpaulovich",
                                                                               "createdAt":  "2019-11-20T12:38:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "inlineHamed",
                                                                               "createdAt":  "2020-05-06T10:10:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "terrajobst",
                                           "body":  "\u003e Is this available in .Net Core 3.0 ?\r\n\r\nThe debugger experience is:\r\n\r\n![image](https://user-images.githubusercontent.com/5169960/54953920-9c2b6b00-4f06-11e9-85c9-ec7f53664c8c.png)\r\n\r\nBut the exception message is unchanged.\r\n",
                                           "updatedAt":  "2019-03-25T21:02:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2NTg0NzA1NA==",
                                           "createdAt":  "2019-12-15T21:09:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBfQXTw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Jerome2606",
                                                                               "createdAt":  "2020-01-06T10:11:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "leotsarev",
                                                                               "createdAt":  "2020-02-18T08:00:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ReubenBond",
                                                                               "createdAt":  "2020-02-20T23:17:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kavun",
                                                                               "createdAt":  "2020-03-04T13:27:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mpawelski",
                                                                               "createdAt":  "2020-04-30T16:06:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2020-10-05T07:02:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "darkguy2008",
                                                                               "createdAt":  "2020-10-22T15:37:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "scott-xu",
                                                                               "createdAt":  "2020-12-16T06:29:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lol768",
                                                                               "createdAt":  "2021-01-27T13:58:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AdamCaviness",
                                                                               "createdAt":  "2021-02-04T20:51:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "0x0737",
                                                                               "createdAt":  "2021-02-08T14:51:22Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  11
                                                         },
                                           "author":  "strich",
                                           "body":  "Is there a plan to also update the exception message? Surely that is really the important part of this? ",
                                           "updatedAt":  "2019-12-15T21:09:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyMzIzNjA0MA==",
                                           "createdAt":  "2020-05-04T03:01:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "soundarmoorthy",
                                           "body":  "I am not part of Microsoft / .NET team, and i wonder if it\u0027s even possible to do this consistently. Even in the case when the compiler emit enough information about identifiers (all language compilers) and the runtime consume it, the way the .NET project gets compiled won\u0027t be consistent given the fact that any .NET project that i can think of reference binaries from community / NuGet. In that case you will have part of the code reporting identifier names and the other part that doesn\u0027t.  Also what happens to the generated types (for example IEnumerable) The runtime can figure out and report that IEnumerable.Current is null, but what is null is the underlying object in the container, which still doesn\u0027t give the answer. You walk the stack and figure out the underlying object and fix it, which is the case even without the information. \r\n\r\nThe way i think of this is trying to infer context from identifiers than the methods. Identifiers tell you what is null, but often you need to figure out why it is null because the programmer didn\u0027t anticipate the object to be null, and he has to walk the stack back to figure out the issue.",
                                           "updatedAt":  "2020-05-04T03:01:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MzIxODk1Mg==",
                                           "createdAt":  "2020-09-16T07:09:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODBYDlw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2020-10-05T07:02:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "scott-xu",
                                                                               "createdAt":  "2020-12-16T06:29:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "0x0737",
                                                                               "createdAt":  "2021-02-08T14:51:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "technatoria",
                                                                               "createdAt":  "2021-02-23T12:36:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "deadalusai",
                                                                               "createdAt":  "2021-02-26T00:11:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "danielchalmers",
                                                                               "createdAt":  "2021-08-05T21:03:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AmrAlSayed0",
                                                                               "createdAt":  "2021-10-16T09:40:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pedoc",
                                                                               "createdAt":  "2023-07-21T06:40:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  8
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "Related: https://openjdk.java.net/jeps/358 `JEP 358: Helpful NullPointerExceptions`",
                                           "updatedAt":  "2020-09-16T07:09:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46IQ9P",
                                           "createdAt":  "2021-11-22T08:20:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCZ7_OQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "michael-hawker",
                                                                               "createdAt":  "2022-04-26T19:29:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "swythan",
                                           "body":  "@jkotas  Is any type information available at the point the exception is generated?\r\n\r\nEven if the variable name is unavailable, there are a number of scenarios where knowing the expected type of the null reference would be helpful (even the compile-time type) .\r\n\r\nA (very) contrived example:\r\n```\r\nthis.authorisedUsers\r\n    .FirstOrDefault() \r\n    .Manager\r\n    .ContactDetails\r\n    .Address\r\n    .Postcode\r\n    .ToUpper();\r\n```\r\nIf the NRE told you the type was `string`, then you\u0027d know the problem was `Postcode`. If it told you that it was `Person` then it\u0027s ambiguous, but it\u0027s at least narrowed down the possibilities.\r\n\r\nObviously it wouldn\u0027t help with something like\r\n```\r\nfoo(a.ToString(), b.ToString(), c.ToString());\r\n```\r\n",
                                           "updatedAt":  "2021-11-22T08:20:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46JzNr",
                                           "createdAt":  "2021-11-22T15:34:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCDqF1w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "swythan",
                                                                               "createdAt":  "2021-11-23T07:31:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e @jkotas Is any type information available at the point the exception is generated?\r\n\r\nThis information is not available today. Adding it would be same problem as https://github.com/dotnet/runtime/issues/3858#issuecomment-72954338",
                                           "updatedAt":  "2021-11-22T15:34:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47Ctag",
                                           "createdAt":  "2021-12-10T03:00:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "madhub",
                                           "body":  "\u003e \u003e @jkotas Is any type information available at the point the exception is generated?\r\n\u003e \r\n\u003e This information is not available today. Adding it would be same problem as [#3858 (comment)](https://github.com/dotnet/runtime/issues/3858#issuecomment-72954338)\r\n\r\nAny exploration of how Java implemented this feature  in [Java 14](https://openjdk.java.net/jeps/358)",
                                           "updatedAt":  "2021-12-10T03:00:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CK9x5",
                                           "createdAt":  "2022-04-26T19:30:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODpUFxg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SmartmanApps",
                                                                               "createdAt":  "2024-07-11T13:23:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "michael-hawker",
                                           "body":  "I think this and `FileNotFoundException` not saying which file wasn\u0027t found (and the path where it was looking) are two of the most frustrating things to debug.",
                                           "updatedAt":  "2022-04-26T19:30:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Q_uZO",
                                           "createdAt":  "2022-12-20T06:06:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEiS-vA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "InCerryGit",
                                                                               "createdAt":  "2022-12-20T06:07:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "strich",
                                                                               "createdAt":  "2022-12-20T06:39:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DevSelchow",
                                                                               "createdAt":  "2022-12-20T14:08:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2022-12-28T14:18:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "michael-hawker",
                                                                               "createdAt":  "2023-01-04T18:29:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "madhub",
                                                                               "createdAt":  "2023-01-16T17:16:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lhodzic1",
                                                                               "createdAt":  "2023-05-26T11:17:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pedoc",
                                                                               "createdAt":  "2023-06-09T06:14:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "n0099",
                                                                               "createdAt":  "2024-03-11T15:39:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "djj0809",
                                                                               "createdAt":  "2024-04-12T19:24:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2024-07-11T16:32:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "WeihanLi",
                                                                               "createdAt":  "2024-12-12T07:17:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Atulin",
                                                                               "createdAt":  "2025-09-15T14:54:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  13
                                                         },
                                           "author":  "InCerryGit",
                                           "body":  "Has there been any progress on this topic? I think it would be very helpful to introduce more detailed exceptions like Java does. For example code like this.\r\n```java\r\nString s = null;\r\nString s1 = s.toLowerCase();\r\n```\r\n\r\nJava will output a very helpful exception message.\r\n\r\n```shell\r\nException in thread \"main\" java.lang.NullPointerException: Cannot invoke \"String.toLowerCase()\" because \"s\" is null\r\n\tat org.jdk17.App.main(App.java:14)\r\n```\r\n\r\nThe exact method and reason for the exception are clear at a glance. If there are multiple methods and variables in a line of code, you can quickly locate the problem.",
                                           "updatedAt":  "2022-12-20T06:06:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Sg5ti",
                                           "createdAt":  "2023-01-16T17:22:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "madhub",
                                           "body":  "\u003e Has there been any progress on this topic? I think it would be very helpful to introduce more detailed exceptions like Java does. For example code like this.\r\n\u003e \r\n\u003e ```java\r\n\u003e String s = null;\r\n\u003e String s1 = s.toLowerCase();\r\n\u003e ```\r\n\u003e \r\n\u003e Java will output a very helpful exception message.\r\n\u003e \r\n\u003e ```shell\r\n\u003e Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke \"String.toLowerCase()\" because \"s\" is null\r\n\u003e \tat org.jdk17.App.main(App.java:14)\r\n\u003e ```\r\n\u003e \r\n\u003e The exact method and reason for the exception are clear at a glance. If there are multiple methods and variables in a line of code, you can quickly locate the problem.\r\n\r\nThis feature is present since Java 14 , its [JEP 358: Helpful NullPointerExceptions](https://openjdk.org/jeps/358). Very useful feature to find exact object throwing Null reference. Not sure why this feature is not a priority , it greatly helps production code debugging.",
                                           "updatedAt":  "2023-01-16T17:22:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5U_6Uk",
                                           "createdAt":  "2023-02-10T16:19:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "OneB1t",
                                           "body":  "yes this will be very helpful to have +1",
                                           "updatedAt":  "2023-02-10T16:19:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5eamzX",
                                           "createdAt":  "2023-06-09T06:15:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pedoc",
                                           "body":  "just ping",
                                           "updatedAt":  "2023-06-09T06:15:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6by-I_",
                                           "createdAt":  "2025-01-25T07:50:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEiS-sQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "peteraritchie",
                                                                               "createdAt":  "2025-01-25T16:31:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2025-03-15T17:07:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Atulin",
                                                                               "createdAt":  "2025-09-15T14:54:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "madhub",
                                           "body":  "Any update on this issue ?. Its marked has `hard problem`, \nThis feature is in **Java since 2020** ( [JEP 358: Helpful NullPointerExceptions](https://openjdk.org/jeps/358)) . In production deployment , if you see the log with NPE , you will exactly know which reference is null in java.\n",
                                           "updatedAt":  "2025-01-25T07:50:40Z"
                                       }
                                   ],
                         "totalCount":  46
                     },
        "title":  "NullReferenceException - Completely devoid of details",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr",
                       "hard-problem"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/4312",
        "createdAt":  "2015-06-16T16:49:08Z",
        "number":  4312,
        "author":  "michellemcdaniel",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODLiYfA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Foadsf",
                                            "createdAt":  "2024-10-18T05:28:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "RenderMichael",
                                            "createdAt":  "2025-08-18T05:29:29Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2023-06-12T14:07:53Z",
        "body":  "This is a overarching issue for porting MDBG. When we start working on it, we will open more specific issues for each of the pieces.\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOXp4PkA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDExMjQ5Nzk5NA==",
                                           "createdAt":  "2015-06-16T17:03:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD27SRA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Foadsf",
                                                                               "createdAt":  "2024-10-18T05:28:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "It\u0027d be great if you could add a short summary about MDBG to [glossary.md](https://github.com/dotnet/coreclr/blob/master/Documentation/project-docs/glossary.md), so folks outside of MS know what MDBG is :)\n\n**edit:** just saw that there\u0027s already an [MSDN page](https://msdn.microsoft.com/en-us/library/ms229861%28v=vs.110%29.aspx) about it. I think adding it to the glossary with a link to that page is still worthwhile, though.\n",
                                           "updatedAt":  "2015-06-16T17:04:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE3MzAzMjg3OQ==",
                                           "createdAt":  "2016-01-20T00:27:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tzwlai",
                                           "body":  "This was closed by accident.\n",
                                           "updatedAt":  "2016-01-20T00:27:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIyMTYxOTc0OA==",
                                           "createdAt":  "2016-05-25T15:50:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD27SXg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Foadsf",
                                                                               "createdAt":  "2024-10-18T05:28:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tzwlai",
                                           "body":  "We are in the process of open-sourcing the repo containing MDbg and all of our tests, but it may not make it by RTM. \n",
                                           "updatedAt":  "2016-05-25T15:50:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzMzM0NjA2Ng==",
                                           "createdAt":  "2020-05-25T02:30:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD27SZg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Foadsf",
                                                                               "createdAt":  "2024-10-18T05:28:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "reflectronic",
                                           "body":  "Is this still going to happen?",
                                           "updatedAt":  "2020-05-25T02:30:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47I8Uq",
                                           "createdAt":  "2021-12-13T07:59:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD27SbQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Foadsf",
                                                                               "createdAt":  "2024-10-18T05:28:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "art-grig",
                                           "body":  "looking forward for it!",
                                           "updatedAt":  "2021-12-13T07:59:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5eng-Q",
                                           "createdAt":  "2023-06-12T14:07:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD27ScQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Foadsf",
                                                                               "createdAt":  "2024-10-18T05:28:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "himanshuz2",
                                           "body":  "We need it badly to support migrating our product from .NET Framework 4.8 to .NET Framework 7.0 ",
                                           "updatedAt":  "2023-06-12T14:07:53Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Port MDBG to CoreCLR",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/4535",
        "createdAt":  "2015-09-30T22:18:48Z",
        "number":  4535,
        "author":  "KevinRansom",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODRNdQw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Niputi",
                                            "createdAt":  "2025-09-17T09:32:50Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-09-09T16:53:16Z",
        "body":  "Hi Guys,\n\nwhen can we expect cross platform support PDB\u0027s from REF emit.  The F# compiler relies on ref-emit for Quotations and TypeProviders.  We aim to have cross platform compilation and debugging working for F# by the end of the year, it would be great if we can debug quotations and TP generated types too.\n\nThanks\n\nKevin\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwv-Lug==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE0NDc3MzgxMQ==",
                                           "createdAt":  "2015-10-01T16:07:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "The plan has been to use a new [portable debug info format](https://github.com/dotnet/roslyn/blob/master/docs/specs/PortablePdb-Metadata.md) for cross-plat. Talk to @tmat about the best way to move F# compiler over to it.\n\nThere are no plans to bring the Windows managed .pdbs cross-plat. Also, Reflection.Emit is limited for in-memory only in .NET Core. There are no plans to extend it to produce files on disk.\n",
                                           "updatedAt":  "2015-10-01T16:07:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE0NDc3NDc1NA==",
                                           "createdAt":  "2015-10-01T16:12:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "@jkotas I believe the question is rather whether in-memory assemblies emitted by Ref.Emit are debuggable on CoreCLR on Linux/Mac.\n",
                                           "updatedAt":  "2015-10-01T16:12:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE0NDc3NTE4Nw==",
                                           "createdAt":  "2015-10-01T16:13:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "@KevinRansom Does F# save the Ref.Emit\u0027d assemblies to disk for later loading? \n",
                                           "updatedAt":  "2015-10-01T16:13:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE0NDc4MTM4MA==",
                                           "createdAt":  "2015-10-01T16:36:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e  assemblies emitted by Ref.Emit are debuggable on CoreCLR on Linux/Mac\n\nI do not think it is limited to Linux/Mac - the .NET Core Ref.Emit surface does not include the APIs to produce symbols, across platforms. The story for debuggable dynamically emitted assemblies in .NET Core has been to use `AssemblyLoadContext.LoadFromStream(System.IO.Stream assembly, System.IO.Stream assemblySymbols)`.\n",
                                           "updatedAt":  "2015-10-01T16:36:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE0NDc4NzE2Nw==",
                                           "createdAt":  "2015-10-01T17:02:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "Oh, I see. So there is no way how to emit debuggable dynamic assembly thru Reflection.Emit? Looking at System.Reflection.Emit contract I don\u0027t even see Save - so assuming there is no way how to save an Ref.Emit\u0027d assembly to disk/byte[]. So how can I use LoadFromStream?\n",
                                           "updatedAt":  "2015-10-01T17:02:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE0NDc5OTc3Ng==",
                                           "createdAt":  "2015-10-01T17:51:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e  how can I use LoadFromStream?\n\nDo not use System.Reflection.Emit...\n",
                                           "updatedAt":  "2015-10-01T17:51:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE0NDgwMDQ2OA==",
                                           "createdAt":  "2015-10-01T17:54:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "@KevinRansom Why does F# use Reflection.Emit?\n",
                                           "updatedAt":  "2015-10-01T17:54:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5NTM0MzYxMg==",
                                           "createdAt":  "2021-03-10T12:26:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dsyme",
                                           "body":  "See also https://github.com/dotnet/runtime/issues/28206 and https://github.com/dotnet/runtime/issues/18703\r\n",
                                           "updatedAt":  "2021-03-10T12:26:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7C_4u6",
                                           "createdAt":  "2025-09-09T16:53:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of our [issue cleanup automation](https://github.com/dotnet/runtime/blob/main/docs/issue-cleanup.md).\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-09T16:53:15Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Cross Platform symbols from ref-emit apis",
        "labels":  [
                       "bug",
                       "area-Diagnostics-coreclr",
                       "no-recent-activity",
                       "backlog-cleanup-candidate"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/6848",
        "createdAt":  "2016-10-18T19:16:17Z",
        "number":  6848,
        "author":  "lt72",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-07-14T01:42:08Z",
        "body":  "Currently not exposed.\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOGqQ1Lg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI1NDY5MTczNQ==",
                                           "createdAt":  "2016-10-19T02:13:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "contention data for what thing? : ) \nUnderstanding the scenario motivating this request would be very useful.\n",
                                           "updatedAt":  "2016-10-19T02:13:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI1NDk2NTg4OA==",
                                           "createdAt":  "2016-10-19T23:03:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lt72",
                                           "body":  "This refers to exposing contention data as ETW does:\nhttps://msdn.microsoft.com/en-us/library/ff356157%28v=vs.110%29.aspx?f=255\u0026MSPPError=-2147217396 \n\n@mjsabby: please confirm\n",
                                           "updatedAt":  "2016-10-19T23:03:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI1NDk2Nzc4MA==",
                                           "createdAt":  "2016-10-19T23:14:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mjsabby",
                                           "body":  "yup that\u0027s the one. This is to be able to get this data without using ETW.\n",
                                           "updatedAt":  "2016-10-19T23:14:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0MjY2NzQ5NA==",
                                           "createdAt":  "2017-11-08T00:15:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lt72",
                                           "body":  "Please let us know if this is still a concern and what the time frame is that you care about.",
                                           "updatedAt":  "2017-11-08T00:15:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0Njk2OTEzNA==",
                                           "createdAt":  "2018-12-13T13:32:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gleocadie",
                                           "body":  "Hi, this is the kind of thing we would like to have. Lately, we add a contention issue on Linux. I added the contention support in the Profiling API and with a custom build, we were able to get stack traces and find our contention issue. There might be other (better?) solution, but at that time, I was not aware (still don\u0027t) and this was the easiest way for us.\r\n\r\nI have the code ready, will you be interested in a PR?",
                                           "updatedAt":  "2018-12-13T13:32:06Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Expose contention data through the Profiling APIs ",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/8279",
        "createdAt":  "2017-06-03T00:07:47Z",
        "number":  8279,
        "author":  "vancem",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-07-14T01:42:20Z",
        "body":  "The .NET Runtime uses small stubs to dispatch a call to an interface to the correct target method.   Currently in sampling profilers, if the sample is taken while the CPU is in such a stub \r\n\r\n1. The call stack breaks on RISC based unwind architectures (e.g. X64) because we don\u0027t emit unwind information for it.\r\n2. The name of the code is unknown.\r\n\r\nThis will show up any time interface dispatch is used heavily.  \r\n\r\nTo fix it, these stubs should emit proper unwind information to the profiler (This is what the UnwindInfoTable).\r\nEmit a JIT Method event to give the stub a name.  \r\n\r\n@brianrob ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOFZo1jw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNTk0MDAzMQ==",
                                           "createdAt":  "2017-06-03T01:06:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "Is there a broader issue for many kinds of stubs or this is restricted specifically to interface dispatch? (just curious)",
                                           "updatedAt":  "2017-06-03T01:06:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNjIwMTQyNg==",
                                           "createdAt":  "2017-06-05T14:27:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vancem",
                                           "body":  "\u003e Is there a broader issue for many kinds of stubs or this is restricted specifically to interface dispatch? (just curious)\r\n\r\nI know on the desktop we did a review at one point to insure that most stubs had unwind information (The most important ones were the ones that DON\u0027T tail call (since they are more likely to be unwound through).    \r\n\r\nIt would not hurt to do this review for CoreCLR.    ",
                                           "updatedAt":  "2017-06-05T14:27:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1NTY0Nzc5Mw==",
                                           "createdAt":  "2018-01-05T19:46:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lt72",
                                           "body":  "@sywhang please take a look as we may want to get traction on this in January or Feb...",
                                           "updatedAt":  "2018-01-05T19:46:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2MjQyNzc5MQ==",
                                           "createdAt":  "2018-02-01T22:46:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lt72",
                                           "body":  "@noahfalk: can you take another look at this one and see what we can do in the short term?",
                                           "updatedAt":  "2018-02-01T22:46:40Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Fix Interface Dispatch to emit unwind and naming information for profiling",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/9030",
        "createdAt":  "2017-09-28T09:14:26Z",
        "number":  9030,
        "author":  "SeriousM",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC6wNnw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mattwarren",
                                            "createdAt":  "2017-09-29T08:42:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Kantuz001",
                                            "createdAt":  "2017-12-14T07:49:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cltshivash",
                                            "createdAt":  "2018-10-02T04:52:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "stakx",
                                            "createdAt":  "2018-11-03T11:34:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "t9mike",
                                            "createdAt":  "2019-08-08T16:41:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "UlyssesWu",
                                            "createdAt":  "2020-07-12T06:33:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MichalPavlik",
                                            "createdAt":  "2024-09-04T09:51:32Z"
                                        }
                                    ],
                          "totalCount":  7
                      },
        "updatedAt":  "2021-05-17T13:00:43Z",
        "body":  "Hi, I don\u0027t know where I should put this questions to get qualified opinions and answers, so I put it into this issue board. If this was wrong, I\u0027m very sorry.\r\n\r\nWith Microsoft\u0027s research project PEX the assembly Microsoft.ExtendedReflection was created to wrap the native ClrProfiler with managed code to get the callback hooks into managed .net code.\r\n\r\nMicrosoft ships a current version vith VS2017 (`C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\Extensions\\Microsoft\\Pex\\Microsoft.ExtendedReflection.dll`) so I assume that the work on Microsoft.ExtendedReflection is not stopped yet.\r\n\r\nI\u0027ve seen that CoreClr Profiler is getting some attention (#445) and I\u0027m curious if there will be a new version of Microsoft.ExtendedReflection for CoreClr Profiler or even getting support for it?\r\n\r\nBeside of that, could someone please help me to get some documentation on Microsoft.ExtendedReflection or at least the .xml files? The current available documentation is either very outdated or not available at all for the latest version.\r\n\r\nThank you all very much",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMjSMLQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzNTU5NDIyMw==",
                                           "createdAt":  "2018-11-03T14:58:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stakx",
                                           "body":  "@SeriousM, this might come a little late, but:\r\n\r\n\u003e could someone please help me to get some documentation on Microsoft.ExtendedReflection or at least the .xml files? The current available documentation is either very outdated or not available at all for the latest version.\r\n\r\nI installed an old version of Pex today. After installation, I found a `Microsoft.ExtendedReflection.xml` under `C:\\Program Files (x86)\\Common Files\\microsoft shared\\ExtendedReflection\\0.94.51006.1\\bin`. Perhaps Visual Studio Enterprise/Ultimate installs a newer version in a similar directory?",
                                           "updatedAt":  "2018-11-03T14:58:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzNTU5ODA3MQ==",
                                           "createdAt":  "2018-11-03T15:51:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SeriousM",
                                           "body":  "@stakx you\u0027re right, there is a similar version but with a different api. I was still not able to get it to work because of the lack of documentation and missing prerequisites. Thank you anyway but I guess Microsoft is not interested in solving this issue. ",
                                           "updatedAt":  "2018-11-03T15:51:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MjMwNDU1Nw==",
                                           "createdAt":  "2021-05-17T13:00:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MSalehie",
                                           "body":  "Hi dear seriousM, how to fix error namespace using Microsoft.ExtendedReflection!?",
                                           "updatedAt":  "2021-05-17T13:00:43Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Microsoft.ExtendedReflection support for CoreClr",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/9138",
        "createdAt":  "2017-10-16T19:39:54Z",
        "number":  9138,
        "author":  "sywhang",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-05-04T22:40:48Z",
        "body":  "Below is a list of issues I identified while testing the profiler APIs on arm32/64 on both Windows/Linux.\r\n\r\n- [ ] ReJIT is not enabled on arm32/64 (https://github.com/dotnet/coreclr/blob/1c584d894c143410397230af718401347447beef/clrdefinitions.cmake#L189)\r\n- [x] Profiler ELT hooks haven\u0027t been tested yet \r\n\r\nDebugger APIs haven\u0027t been tested yet, but will update as more issues are identified as I get to testing those.\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOFuUtTw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzNzAxMTk5MQ==",
                                           "createdAt":  "2017-10-16T19:40:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sywhang",
                                           "body":  "@lt72 @davmason ",
                                           "updatedAt":  "2017-10-16T19:40:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzOTc5NzY4OA==",
                                           "createdAt":  "2017-10-26T20:54:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sywhang",
                                           "body":  "Profiler ELT hooks have been all tested on both Windows/Linux on ARM32, except for tailcall due to missing JIT optimizations. (See dotnet/coreclr#14724) \r\n",
                                           "updatedAt":  "2017-10-31T20:41:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3MzU0NzY3OA==",
                                           "createdAt":  "2018-03-15T22:49:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lt72",
                                           "body":  "This will not fit in 2.1, moving to Future.",
                                           "updatedAt":  "2018-03-15T22:49:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4NDExNzI3Ng==",
                                           "createdAt":  "2018-04-25T00:00:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BruceForstall",
                                           "body":  "Looks like the ReJIT link is now https://github.com/dotnet/coreclr/blob/1c584d894c143410397230af718401347447beef/clrdefinitions.cmake#L189.",
                                           "updatedAt":  "2018-04-25T00:00:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4NDExODA5NQ==",
                                           "createdAt":  "2018-04-25T00:04:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sywhang",
                                           "body":  "@BruceForstall \r\nThanks! I updated the original issue to reflect that.",
                                           "updatedAt":  "2018-04-25T00:04:50Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Blocking issues for profiler APIs on ARM32/64",
        "labels":  [
                       "enhancement",
                       "arch-arm32",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/9305",
        "createdAt":  "2017-11-21T04:52:16Z",
        "number":  9305,
        "author":  "noahfalk",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODAsZ_A==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "patricksuo",
                                            "createdAt":  "2017-11-21T05:08:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mattwarren",
                                            "createdAt":  "2017-11-21T12:21:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GetCodeTrack",
                                            "createdAt":  "2017-11-21T13:27:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "LYP951018",
                                            "createdAt":  "2017-11-21T14:17:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "spottedmahn",
                                            "createdAt":  "2017-11-21T17:22:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alhardy",
                                            "createdAt":  "2017-11-21T20:44:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Drawaes",
                                            "createdAt":  "2017-11-21T21:33:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "k-berger",
                                            "createdAt":  "2017-11-23T12:26:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Suchiman",
                                            "createdAt":  "2017-11-24T09:56:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Kantuz001",
                                            "createdAt":  "2017-12-13T14:33:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DickvdBrink",
                                            "createdAt":  "2018-06-15T07:06:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colin-higgins",
                                            "createdAt":  "2019-05-29T15:49:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "4creators",
                                            "createdAt":  "2019-10-22T22:56:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tonyredondo",
                                            "createdAt":  "2020-08-24T16:06:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nr-ahemsath",
                                            "createdAt":  "2025-03-31T20:21:07Z"
                                        }
                                    ],
                          "totalCount":  15
                      },
        "updatedAt":  "2024-09-20T23:09:25Z",
        "body":  "I\u0027m making this issue as an informal way to flag other issues and discussions that might be relevant to Building .NET profiling tools. This is similar to the .NET announcements repo, but given that profiling is a small crowd I didn\u0027t want to create noise for everyone or be very formal about it. Follow the issue if this is something you care about. Hopefully it works well but if not we can try something else.\r\n\r\nPlease don\u0027t do discussion directly in this issue, just links. Thanks!\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjPMDwQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0NTkxODQ5OQ==",
                                           "createdAt":  "2017-11-21T05:08:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "Retroactive announcement - Oct 20th - I updated the profiling status page that describes our progress supporting the ICorProfiler APIs \r\nPR: dotnet/coreclr#14644\r\nLatest status: https://github.com/noahfalk/coreclr/blob/master/Documentation/project-docs/profiling-api-status.md",
                                           "updatedAt":  "2017-11-21T05:08:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0NTkxOTU0MA==",
                                           "createdAt":  "2017-11-21T05:16:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "Retroactive announcement - Oct 20th - @davmason implemented new ICorProfiler APIs (#14612, dotnet/coreclr#14643) to help profilers deal with the [**breaking changes**](https://github.com/dotnet/coreclr/blob/master/Documentation/design-docs/code-versioning-profiler-breaking-changes.md) that are coming with [tiered jitting] (https://github.com/dotnet/coreclr/pull/12193)",
                                           "updatedAt":  "2017-11-21T05:16:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1NTY3MDc5MQ==",
                                           "createdAt":  "2018-01-05T21:32:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "Jan 4th 2018 - @sywhang brought up more profiling tests for ARM and OSX and we believe things are working well\r\nPR: dotnet/coreclr#15659\r\nIssue: dotnet/runtime#6098\r\nLatest status: https://github.com/dotnet/coreclr/blob/master/Documentation/project-docs/profiling-api-status.md",
                                           "updatedAt":  "2018-01-05T21:32:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1NTY3MTk3Mw==",
                                           "createdAt":  "2018-01-05T21:37:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOARHAQQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adamsitnik",
                                                                               "createdAt":  "2018-01-05T21:39:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "Jan 4th - @sywhang fixed a bug in which the profiler invoked AppDomainCreationFinished multiple times for the same AppDomain\r\nIssue dotnet/runtime#6804",
                                           "updatedAt":  "2018-01-05T21:37:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5NzUwNzk0OQ==",
                                           "createdAt":  "2018-06-15T04:08:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnetjt",
                                           "body":  "Hi @noahfalk - just wondering if the profiling API support for Linux went out in 2.1. I\u0027ve been coding off and on, still working against a 2.1 preview. \r\n\r\n\r\nI fired up a new Ubuntu server and installed the 2.1 runtime, and set up environment to point to my (portable) profiler library and it doesn\u0027t even attempt to load. I\u0027m *pretty* sure it\u0027s not me as ldd shows that I\u0027m not missing any libraries, so all of my static linking is fine. \r\n\r\nOnly other thing I can think of is that 2.1 doesn\u0027t support it yet. \r\n",
                                           "updatedAt":  "2018-06-15T05:31:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5Nzc3NTU2OA==",
                                           "createdAt":  "2018-06-16T01:07:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  ".NET Core 2.1 bug : ( \r\nWe had an unintended behavior change in the ReJIT profiling API that has caused some profilers to fail. I\u0027ve got a fix that restores the original behavior in the daily builds and working on getting it into 2.1 servicing releases. If you have a profiler that uses the RequestReJIT API but does not call ICorProfilerFunctionControl::SetILFunctionBody to set the IL you may have been affected. Check out dotnet/coreclr#18448 for more details and please reach out in that issue discussion if you have any questions or concerns I can help with.",
                                           "updatedAt":  "2018-06-16T01:07:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5Nzc3NjY2Mg==",
                                           "createdAt":  "2018-06-16T01:20:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnetjt",
                                           "body":  "Yes, I had seen that. Fortunately, doesn\u0027t impact me. :)",
                                           "updatedAt":  "2018-06-16T01:20:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxMzI3MTE0MA==",
                                           "createdAt":  "2018-08-15T17:24:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "We are adding a startup hook that could potentially be useful for profilers: https://github.com/dotnet/core-setup/pull/4421. The plan is to add a `DOTNET_STARTUP_HOOKS` environment variable that can be used to inject managed code into the process before `Main`. If you have comments or suggestions, please leave them in that pull request!",
                                           "updatedAt":  "2018-08-15T17:24:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyMTIxODU1OQ==",
                                           "createdAt":  "2018-09-14T03:17:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAcW9OQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "discostu105",
                                                                               "createdAt":  "2018-09-14T07:38:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "michaelgoin",
                                                                               "createdAt":  "2018-09-18T16:31:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "russcam",
                                                                               "createdAt":  "2018-09-20T20:54:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "noahfalk",
                                           "body":  ".NET Core 2.2 Preview 2 has shipped with Tiered Compilation on by default. We warned this was in progress last year above in this thread:\r\n\r\n\u003e Retroactive announcement - Oct 20th - @davmason implemented new ICorProfiler APIs (#14612, dotnet/coreclr#14643) to help profilers deal with the breaking changes that are coming with [tiered jitting] (#12193)\r\n\r\n\r\n If you haven\u0027t yet tested with this feature on we hope you will soon : )",
                                           "updatedAt":  "2018-09-14T03:17:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzODQzNDExMA==",
                                           "createdAt":  "2018-11-13T20:58:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kouvel",
                                           "body":  "Tiered compilation will be disabled by default for .NET Core 2.2 RTM, mainly due to https://github.com/dotnet/coreclr/issues/19752, which we plan to fix soon for 3.0",
                                           "updatedAt":  "2018-11-13T20:58:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2NDI1NzMyNQ==",
                                           "createdAt":  "2019-02-16T00:13:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAjeDTA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "SergeyKanzhelev",
                                                                               "createdAt":  "2019-02-16T01:16:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "discostu105",
                                                                               "createdAt":  "2019-02-17T20:53:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "davmason",
                                           "body":  "dotnet/coreclr#22617 allows profilers to edit more types of metadata after module load (specifically adding `TypeDef` and `MethodDef`). However, adding virtual methods after module load is still unsupported.\r\n\r\nThere is a minor breaking change as part of this work. `ICorProfilerInfo7::ApplyMetadata` now potentially can trigger a GC, so it is now illegal to call it in situations where a GC is forbidden.\r\n\r\nAlso included in that PR is a document (located at Documentation/Profiling/Profiler Breaking Changes.md) to track breaking changes as they happen.",
                                           "updatedAt":  "2019-02-16T00:13:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2NDI2OTc0Nw==",
                                           "createdAt":  "2019-02-16T01:29:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "If you have any questions/concerns about @davmason\u0027s changes above, as always feel free to reach out to us. Thanks!",
                                           "updatedAt":  "2019-02-16T01:29:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2ODA4OTQxMw==",
                                           "createdAt":  "2019-02-28T00:41:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "the existing COR_PRF_HIGH_BASIC_GC profiling is VERY heavy weight. dotnet/coreclr#22866 added a lightweight GC profiling option that just gives you \r\n* GC start callback\r\n* GC end callback\r\n* update generational bounds\r\n\r\nthis is something you can use on production machines. you call access this by calling `ICorProfilerInfo5::SetEventMask2` and set `COR_PRF_HIGH_BASIC_GC` in `dwEventsHigh`.",
                                           "updatedAt":  "2019-02-28T00:41:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwMTgwOTM2OQ==",
                                           "createdAt":  "2019-06-13T17:46:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAzNfZQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "slang25",
                                                                               "createdAt":  "2019-06-13T23:30:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "patricksuo",
                                                                               "createdAt":  "2019-06-14T00:14:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "k15tfu",
                                                                               "createdAt":  "2019-07-07T16:52:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "alanwest",
                                                                               "createdAt":  "2019-10-21T22:51:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "davmason",
                                           "body":  "There are three recent changes to announce.\r\n\r\nFirst, profiler attach/detach is now supported (#24670) leveraging the existing EventPipe work. You can find documentation on how to use it here: https://github.com/dotnet/coreclr/blob/master/Documentation/Profiling/Profiler%20Attach%20on%20CoreCLR.md. This means that the trigger process will use a completely different API, but the advantage is that it works on Linux and Windows.\r\n\r\nSecond, a new api `ICorProfilerInfo10::RequestReJITWithInliners` has been added (#24461) to allow profilers to ReJIT after attach. Documentation for ReJIT on attach is here: https://github.com/dotnet/coreclr/blob/master/Documentation/Profiling/ReJIT%20on%20Attach.md.\r\n\r\nThe last announcement is that `ICorProfilerInfo2::DoStackSnapshot` is now supported on Linux (#24968). On Linux you can call `DoStackSnapshot` from the same thread you are running on at any time, if you would like to get a snapshot of other threads there is now `ICorProfilerInfo10::SuspendRuntime` to stop all managed threads (without performing a GC) and make them safe to snapshot, and then `ICorProfilerInfo10::ResumeRuntime` to resume the runtime once you are finished collecting snapshots. It is not possible to snapshot an arbitrary thread on Linux. Windows support remains unchanged.\r\n\r\nPlease feel free to reach out with any questions, comments, or concerns.",
                                           "updatedAt":  "2019-06-13T17:46:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNDMyNTQ1OA==",
                                           "createdAt":  "2019-09-23T23:35:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davmason",
                                           "body":  "Hi Everyone,\r\n\r\nI recently opened dotnet/coreclr#26762 to change how we deal with an attach profiler on shutdown. Currently on graceful process exit (i.e. the C# main exits normally) we issue a `ICorProfilerCallback::Shutdown` call and then release the profiler\u0027s COM object we hold on to, but we skip the callback and release on non-graceful shutdown.\r\n\r\nThis PR will change it so the runtime never releases the profiler\u0027s COM object, and instead lets the OS clean up during process shutdown. You will still get a `ICorProfilerCallback::Shutdown` call if the process is terminating gracefully.\r\n\r\nIt is my belief that this shouldn\u0027t have a negative impact on profilers, since you already have to account for the situation where the runtime doesn\u0027t free your library. Now that situation just gets a lot more common.\r\n\r\nIf you would be impacted by this change please get in touch. This issue is just for announcements so please make any comments either in the PR or on the relevant issue dotnet/coreclr#26687. ",
                                           "updatedAt":  "2019-09-23T23:35:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNjM1NjQ4Ng==",
                                           "createdAt":  "2019-09-30T00:20:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sawilde",
                                           "body":  "@davmason are you saying that you will always do an `AddRef` but never do a `Release`?",
                                           "updatedAt":  "2019-09-30T00:20:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNjc3ODUwNA==",
                                           "createdAt":  "2019-09-30T22:28:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davmason",
                                           "body":  "\u003e \r\n\u003e \r\n\u003e @davmason are you saying that you will always do an `AddRef` but never do a `Release`?\r\n\r\nYes, that is the new behavior.",
                                           "updatedAt":  "2019-09-30T22:28:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxODI3NzA0MQ==",
                                           "createdAt":  "2020-04-23T09:01:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBCLpIg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ww898",
                                                                               "createdAt":  "2020-04-24T17:01:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davmason",
                                           "body":  "Hi Everyone,\r\n\r\nPR dotnet/runtime#1201 means that arrays are no longer special cased on class unload and profilers will be notified (via ClassUnloadStarted) when an array type is unloaded from a collectible context. Up until this point they have been purposefully excluded from ClassUnloadStarted.\r\n\r\nI don\u0027t expect this to be a breaking change for any profilers, please get in touch if this is not the case.",
                                           "updatedAt":  "2023-08-14T23:07:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxODI4NDcwMQ==",
                                           "createdAt":  "2020-04-23T09:15:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "\u003e \r\n\u003e \r\n\u003e Hi Everyone,\r\n\u003e \r\n\u003e PR dotnet/runtime#1201 means that arrays are no longer special cased on class unload and profilers will be notified (via ClassUnloadStarted) when an array type is unloaded from a collectible context. Up until this point they have been purposefully excluded from ClassUnloadStarted.\r\n\u003e \r\n\u003e I don\u0027t expect this to be a breaking change for any profilers, please get in touch if this is not the case.\r\n\r\nThanks @davmason,\r\nCurrently (ever since CLRv4, including CoreCLR), neither ClassLoad* or ClassUnload* callbacks are called for arrays. Will this change ClassLoad* callbacks too?",
                                           "updatedAt":  "2023-08-14T23:07:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxODY0MzczMQ==",
                                           "createdAt":  "2020-04-23T20:19:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davmason",
                                           "body":  "\u003e Currently (ever since CLRv4, including CoreCLR), neither ClassLoad* or ClassUnload* callbacks are called for arrays. Will this change ClassLoad* callbacks too?\r\n\r\nAs it stands now the class load callbacks are not called. That is because this wasn\u0027t an intentional change, but rather a side effect of removing array\u0027s TypeDesc.\r\n\r\nIs that an issue for your profiler? It would be a fairly small change to have array types reported for class load, or to block them from being reported in class unload and go back to the old behavior.",
                                           "updatedAt":  "2020-04-23T20:19:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxOTQ4NDAyMQ==",
                                           "createdAt":  "2020-04-26T05:19:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "\u003e \r\n\u003e \r\n\u003e \u003e Currently (ever since CLRv4, including CoreCLR), neither ClassLoad* or ClassUnload* callbacks are called for arrays. Will this change ClassLoad* callbacks too?\r\n\u003e \r\n\u003e As it stands now the class load callbacks are not called. That is because this wasn\u0027t an intentional change, but rather a side effect of removing array\u0027s TypeDesc.\r\n\u003e \r\n\u003e Is that an issue for your profiler? It would be a fairly small change to have array types reported for class load, or to block them from being reported in class unload and go back to the old behavior.\r\n\r\nNo, this shouldn\u0027t be an issue (as we\u0027re supporting CLRv2/4 anyway). Thanks for these updates.",
                                           "updatedAt":  "2020-04-26T05:19:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzMTk4OTYzMw==",
                                           "createdAt":  "2020-05-21T09:39:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBGWIAQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "leculver",
                                                                               "createdAt":  "2020-05-22T23:45:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mattwarren",
                                                                               "createdAt":  "2020-06-04T10:05:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "davmason",
                                           "body":  "Hi again everyone,\r\n\r\nI would like to give you all a heads up about a potential breaking change.\r\n\r\ndotnet/runtime#32283 introduced a new GC generation for the first time since very early in desktop .net. This means that there are now 5 total generations instead of the previous 4:\r\n\r\n- Gen 0\r\n- Gen 1\r\n- Gen 2\r\n- Large Object Heap\r\n- Pinned Object Heap\r\n\r\nThere is no specific breaking change to the ICorProfiler APIs, but I suspect that many of you will be broken because of assumptions made about the number of GC generations inside your profilers. We (the .net diagnostics team) are finding many of our tools need updating because of this change. If you are interested in the type of work we need to do, you can find that at dotnet/diagnostics#1408.\r\n",
                                           "updatedAt":  "2023-08-14T23:07:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45D06y",
                                           "createdAt":  "2021-11-02T10:20:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCHSkOQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "zacharycmontoya",
                                                                               "createdAt":  "2021-11-02T17:02:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ww898",
                                                                               "createdAt":  "2021-12-20T11:23:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "davmason",
                                           "body":  "Hi everyone,\r\n\r\nI just merged a small breaking change with dotnet/runtime#60999. There was a typo in the name of one method in the released .Net 6 corprof.idl, it does not impact any types or layouts so it will not break at runtime, but if you are building against the .net 6 headers and upgrade to this change it will cause a build break.",
                                           "updatedAt":  "2023-08-14T23:07:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HNPAF",
                                           "createdAt":  "2022-07-25T21:27:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCokLDg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Silvenga",
                                                                               "createdAt":  "2022-07-25T21:28:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "m0nkey653",
                                                                               "createdAt":  "2022-07-26T13:33:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "zacharycmontoya",
                                                                               "createdAt":  "2022-07-26T14:43:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "gamingrobot",
                                           "body":  "Wanted to post this here in case anyone else runs into it. \r\nThe changes made in [#69121 ](https://github.com/dotnet/runtime/pull/69121) will cause `RequestReJITWithInliners` to return `CORPROF_E_REJIT_INLINING_DISABLED` if a debugger is attached at startup, this only affects .NET 6. ",
                                           "updatedAt":  "2022-07-26T15:32:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NK6tW",
                                           "createdAt":  "2022-10-28T08:40:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davmason",
                                           "body":  "Hi All,\r\n\r\nThe issue reported in dotnet/runtime#76016 was found and fixed too late to be in the 7.0 GA release. It is currently scheduled to go in the first servicing update in January, PR is at dotnet/runtime#77533.\r\n\r\nThis will only impact 7.0, not previous versions. The symptoms you will see are not getting ModuleLoadFinished callbacks for dynamic modules.\r\n\r\nIf you have questions or concerns please comment in dotnet/runtime#76016 or file a new issue to not spam everyone on this thread.",
                                           "updatedAt":  "2023-08-14T23:07:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5eYZkQ",
                                           "createdAt":  "2023-06-08T22:08:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davmason",
                                           "body":  "Hi All,\r\n\r\nFirst off some bookkeeping, I just locked the issue to make sure discussion doesn\u0027t happen here and this is limited to announcements only. I want to be clear that I welcome any and all discussion, you\u0027ll just need to file a new issue or comment on an existing one to have the discussion so this issue can be announcements only.\r\n\r\nNext up I want to announce the new NonGC heap and related ICorProfiler APIs. For the history of the runtime all objects have been on a GC heap, but starting in .net 8 preview 5 we now keep some objects that are available at compile time on a NonGC heap. See this issue for more details: https://github.com/dotnet/diagnostics/issues/4156\r\n\r\nWhat this means to ICorProfiler implementations is some objects will not work with the existing GC APIs. We have added new APIs to work with NonGC objects. \r\n\r\n```\r\ninterface ICorProfilerInfo14 : ICorProfilerInfo13\r\n{\r\n    HRESULT EnumerateNonGCObjects([out] ICorProfilerObjectEnum** ppEnum);\r\n\r\n    HRESULT GetNonGCHeapBounds(\r\n                    [in] ULONG cObjectRanges,\r\n                    [out] ULONG *pcObjectRanges,\r\n                    [out, size_is(cObjectRanges), length_is(*pcObjectRanges)] COR_PRF_NONGC_HEAP_RANGE ranges[]);\r\n}\r\n```\r\n\r\nIf you pass a NonGC object to an existing GC API you will see the error `CORPROF_E_NOT_GC_OBJECT`.\r\n\r\nIf possible please try out your profilers on preview 5 or later and let us know if you run in to any issues. As mentioned above feel free to reach out any time with a new issue or by commenting on https://github.com/dotnet/diagnostics/issues/4156.",
                                           "updatedAt":  "2023-08-14T23:07:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LynyI",
                                           "createdAt":  "2024-09-12T05:26:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODyEGCQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "weltkante",
                                                                               "createdAt":  "2024-09-12T07:45:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "ww898",
                                                                               "createdAt":  "2024-09-12T09:21:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "csdahlberg",
                                                                               "createdAt":  "2024-09-12T22:06:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "Hi all!\r\n\r\nA [recent PR](https://github.com/dotnet/runtime/pull/107152) for .NET 10 may affect profilers using Enter/Leave/Tailcall hooks.\r\n\r\nIt has always been the case that calling an ICorProfilerInfo method from within these callbacks that triggered the .NET GC to run may have corrupted memory without warning. As a profiler author the only solution was to learn which methods might do that and avoid calling them. With this PR we have reduced the set of profiler methods that trigger the GC and enabled explicit error checks for the ones that still do. After this PR is submitted calling an ICorProfilerInfo method that might trigger GC returns error code CORPROF_E_UNSUPPORTED_CALL_SEQUENCE when called from Enter/Leave/Tailcall hooks. Its possible that some profilers are currently invoking these APIs and getting lucky in not having the GC run, but now would get the error code always instead. https://github.com/dotnet/runtime/pull/107152#issuecomment-2339367347 has the list of profiler methods that might trigger GC and have this change in behavior.\r\n\r\nIf you have any questions about this or requests to make other APIs callable from Enter/Leave/Tailcall hooks we\u0027re happy to discuss. Best way is to open a new GH issue in this repo and tag @dotnet/dotnet-diag in it (don\u0027t use this issue, it is only for announcements). Thanks!",
                                           "updatedAt":  "2024-09-12T05:26:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6M8wPB",
                                           "createdAt":  "2024-09-20T23:09:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mdh1418",
                                           "body":  "Hello everyone!\r\n\r\n[This PR](https://github.com/dotnet/runtime/pull/107753) for .NET 10 affects profilers that use GetFunctionInfo2 without a `COR_PRF_FRAME_INFO` frameInfo obtained from a `FunctionEnter2` callback.\r\n\r\nOriginally, `GetFunctionInfo2` would return 0 for the ClassID if the exact match could not be determined. As brought up in https://github.com/dotnet/runtime/issues/107139, there are some scenarios where a \"decent\" default value (e.g.  `System.__Canon`) would suffice. With the aforementioned change, `GetFunctionInfo2` will now return the MethodTable associated with the function as the ClassID rather than returning 0 if it could not be exactly determined.\r\nProfilers should still be cautious that without passing in a `COR_PRF_FRAME_INFO` obtained from `FunctionEnter2`, the ClassID and type arguments may not be exact, as [documented](https://github.com/dotnet/runtime/blob/e49d49711d809b3c1c1cb78fbc58233afe8d2ff1/src/coreclr/inc/corprof.idl#L3168-L3171).\r\n\r\nIf there are any questions, please use https://github.com/dotnet/runtime/issues/107139 or open a new GH issue in this repo and tag @dotnet/dotnet-diag in it. Thanks!",
                                           "updatedAt":  "2024-09-20T23:09:23Z"
                                       }
                                   ],
                         "totalCount":  28
                     },
        "title":  "Profiler Interest Group - Announcements",
        "labels":  [
                       "question",
                       "design-discussion",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/9484",
        "createdAt":  "2017-12-29T20:52:33Z",
        "number":  9484,
        "author":  "iskiselev",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-07-14T01:42:51Z",
        "body":  "Looks like there is no any simple way to resolve entry-point assembly path in `ICorProfilerCallback::Initialize` to take a decision, if application should be profiled or not in case if application is started using dotnet. The only way will I see now is to parse command-line arguments within profiler, which is bad - as some command-line arguments treated as \"internal implementation details\" (see dotnet/cli#2243) and in any case require repeating many part of CoreCLI command-line parser.\r\nI\u0027m not sure which repository is best for this issue. It looks related to dotnet/core-setup#2007 and some discussions in dotnet/cli#6237.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOFS-wKg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1NDYxMzY1Mg==",
                                           "createdAt":  "2017-12-31T16:44:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "cc @sywhang @noahfalk ",
                                           "updatedAt":  "2017-12-31T16:44:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1NTQ0NjgyNg==",
                                           "createdAt":  "2018-01-05T01:17:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "Yes, as-is the API doesn\u0027t provide that info, though other profilers have never been structured in a way that they needed it. I think a typical workflow is that the profiler vendor creates MyProfilerWithUI.exe which a user launches. The user indicates they want to profile foo.exe, and then MyProfilerWithUI.exe launches \"dotnet.exe foo.exe\" on their behalf with the environment variables set to enable profiling. The runtime observes the environment variable is set, loads the profiling dll, and in initialize there is no further decision making that needs to occur. There might be other implementation options depending on what scenario you are trying to achieve.\r\n\r\nIn terms of changing the product to give you the entrypoint assembly in profiler initialize I don\u0027t see any way to do it without either specializing it for specific hosts or changing the hosting API. If you use coreconsole.cpp as an example, profiler initialize occurs inside of host-\u003eStart()\r\nhttps://github.com/dotnet/coreclr/blob/master/src/coreclr/hosts/coreconsole/coreconsole.cpp#L429\r\nbut the entrypoint assembly isn\u0027t provided until later in host-\u003eExecuteAssembly()\r\nhttps://github.com/dotnet/coreclr/blob/master/src/coreclr/hosts/coreconsole/coreconsole.cpp#L529\r\nThe runtime can not give the profiler information that it has not yet received from the host.\r\n\r\nA little more technically palatable might be APIs that provide the profiler dll the identity of the entrypoint assembly once it has been provided to the runtime, but without knowing more about what you are trying to accomplish I don\u0027t know if it meets your needs. Certainly there are some profiling actions you can only do at startup, but others can be enabled/disabled after the fact. Simply loading a profiler dll into a running .Net app doesn\u0027t on its own make significant changes in how the application will run. A user might still perceive the app to be \u0027not profiled\u0027 even if the profiler dll did load/initialize was called.\r\n\r\nI\u0027m going to change this to milestone future as this is just an open discussion so far.\r\n",
                                           "updatedAt":  "2018-01-05T01:17:13Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Resolve entry-point assembly on profiler initialization",
        "labels":  [
                       "question",
                       "design-discussion",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/9688",
        "createdAt":  "2018-02-08T17:20:20Z",
        "number":  9688,
        "author":  "tannergooding",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCuo89A==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TwentyFourMinutes",
                                            "createdAt":  "2022-07-09T12:08:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Treit",
                                            "createdAt":  "2023-02-16T02:28:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alexrp",
                                            "createdAt":  "2023-02-16T03:32:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "9ParsonsB",
                                            "createdAt":  "2023-02-16T06:27:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xparadoxical",
                                            "createdAt":  "2023-02-16T07:34:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Wraith2",
                                            "createdAt":  "2023-02-16T08:34:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aromaa",
                                            "createdAt":  "2023-02-16T11:32:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2023-02-16T18:34:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Suchiman",
                                            "createdAt":  "2023-02-16T19:40:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Paliverse",
                                            "createdAt":  "2023-02-16T21:40:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Thealexbarney",
                                            "createdAt":  "2023-02-17T16:44:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rgwood",
                                            "createdAt":  "2023-03-01T06:02:24Z"
                                        }
                                    ],
                          "totalCount":  12
                      },
        "updatedAt":  "2023-07-11T21:22:30Z",
        "body":  "**NOTE:** Relevant bits copied from https://github.com/dotnet/coreclr/issues/15694\r\n**Related Bugs:** https://github.com/dotnet/coreclr/issues/10148\r\n\r\nAny byte which is not explicitly covered by a field is not visible to the debugger. This includes padding bytes, additional bytes allocated by an explicitly sized struct, etc.\r\n\r\nThis is true when looking at the values via the locals window, watch windows, or immediate windows.\r\n\r\n**Ex 1:**\r\n```C#\r\nstruct Data\r\n{\r\n    byte _0;\r\n    // implicit padding byte\r\n    // implicit padding byte\r\n    // implicit padding byte\r\n    int  _4;\r\n}\r\n```\r\n\r\nThe three implicit padding bytes are always 0 in the debugger. That is, when accessing via `((byte*)\u0026data)[1]` in the watch/immediate. There is no expectation for these bytes to be visible in the locals window.\r\n\r\n**Ex 2:**\r\n```C#\r\n[StructLayout(LayoutKind.Sequential, Size = 16)]\r\nstruct Vector128\u003cT\u003e where T : struct { }\r\n```\r\n\r\nAll of the 16-bytes in `Vector128\u003cT\u003e` are implicit (no field exists that maps directly to those bytes), so all 16-bytes are always 0. Likewise, if viewing the raw bits via aliasing (`((byte*)\u0026data)[1]`). There is no expectation for these bytes to be visible in the locals window.\r\n\r\n**Ex 3:**\r\n```C#\r\nstruct Vector\u003cT\u003e\r\n{\r\n    private Register register;\r\n}\r\n\r\n[StructLayout(LayoutKind.Explicit)]\r\nstruct Register\r\n{\r\n    [FieldOffset(0)]\r\n    internal Double double_0;\r\n    [FieldOffset(8)]\r\n    internal Double double_1;\r\n\r\n     // Other overlapping fields\r\n}\r\n```\r\n\r\nOn an AVX machine, `Vector\u003cT\u003e` is explicitly sized to 32, so the latter 16 bytes (which are not directly mapped to a field) are not accessible. This is expected to work in the immediate, watch, and locals window\r\n\r\n**Ex 4:**\r\n```C#\r\ninternal unsafe struct MyBuffer\r\n{\r\n    public fixed char fixedBuffer[128];\r\n}\r\n```\r\n\r\nThe full set of 128 values are expected to be visible in the locals window, much like an actual array would allow. They should likewise be visible via evaluation in the immediate or watch window, such as via `myBuffer.fixedBuffer[5]`.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYT8qyQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2NjQ1Nzk0Ng==",
                                           "createdAt":  "2018-02-17T17:41:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lt72",
                                           "body":  "Moving to future and marking as tracking-external-issue, as this issue should be solved through dotnet/coreclr#16280.",
                                           "updatedAt":  "2018-02-17T17:41:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQwODkzNDc0Ng==",
                                           "createdAt":  "2018-07-30T16:56:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "@lt72, this is also being tracked by a vsfeedback bug: https://developercommunity.visualstudio.com/content/problem/222409/contents-of-systemnumericsvector-are-shown-incorre.html",
                                           "updatedAt":  "2018-07-30T16:56:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzOTc0Njk4Nw==",
                                           "createdAt":  "2019-10-08T23:30:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBMJq5g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colgreen",
                                                                               "createdAt":  "2020-08-02T12:04:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "@davmason, @tommcdon. \r\n\r\nHas there been any progress or prioritization here. There seems to have been at least 4 total issues on CoreFX and at least 3 total internal issues filed on this so far (there may be more but tracking them all is a bit difficult). \r\n\r\n@tmat and I just went through and closed several as dupes against this; it seems fairly prevalent; especially as more people are writing vectorized code.",
                                           "updatedAt":  "2019-10-08T23:30:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0MzU5NTUwMQ==",
                                           "createdAt":  "2019-10-18T08:26:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davmason",
                                           "body":  "@tannergooding I just got back from being out of the office.\r\n\r\nI haven\u0027t done any work on this issue, and as far as I know there hasn\u0027t been any prioritization. I haven\u0027t been doing any work in the debugger space lately, so for now I\u0027ve unassigned myself since it\u0027s unlikely I\u0027ll work on this soon.\r\n\r\n@tommcdon can you route to a more appropriate person or reassign to me if you want me to spend time on this?",
                                           "updatedAt":  "2019-10-18T08:26:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0NTcwNTQ1Ng==",
                                           "createdAt":  "2019-10-24T01:45:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@sdmaclea ",
                                           "updatedAt":  "2019-10-24T01:45:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0NjM3NTcxMw==",
                                           "createdAt":  "2019-10-25T14:25:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "@tommcdon, @sdmaclea. Another user hit this: https://github.com/dotnet/corefx/issues/42112",
                                           "updatedAt":  "2019-10-25T14:25:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0NjQ0MzE5NA==",
                                           "createdAt":  "2019-10-25T17:33:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAzmM0A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "tannergooding",
                                                                               "createdAt":  "2019-10-25T17:36:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "konard",
                                                                               "createdAt":  "2019-10-25T22:30:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@tannergooding thanks!  I have changed the milestone from Future to 5.0, so this item is on our 5.0 backlog.",
                                           "updatedAt":  "2019-10-25T17:33:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2NzY2NjQyOQ==",
                                           "createdAt":  "2020-08-02T12:12:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBxU8Vg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "EamonHetherton",
                                                                               "createdAt":  "2021-07-06T01:23:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "colgreen",
                                           "body":  "I have just encountered this while debugging some code that uses Vector\u003cT\u003e.\r\n\r\nThis is quite a visible problem for those of us writing code using Vector\u003cT\u003e on a CPU with 256 bit vector registers (i.e. pretty much all modern CPUs). Any chance this could be moved back to the 5.0 milestone? It\u0027s already been kicked down the road several times - for at least three years (see #7626)\r\n\r\nThat said, it seems to me that this a a Visual Studio bug, not a dotnet core/sdk bug - is that so? and if so can the bug be fixed in a VS update? So  perhaps it doesn\u0027t have to be tied to a dotnet milestone?\r\n\r\nFor the record, here\u0027s my demo program for recreating the problem on a machine with 256bit SIMD registers:\r\n\r\n        static void Main(string[] args)\r\n        {\r\n            // Some array we want to perform maths on using Vector\u003cfloat\u003e.\r\n            float[] x = new float[16];\r\n            for(int i=0; i \u003c x.Length; i++) {\r\n                x[i] = i;\r\n            }\r\n\r\n            // Determine number of floats that will fit into one vector on the current hardware.\r\n            // E.g. 256 bit vector register = 8 * 32bit floats.\r\n            int width = Vector\u003cfloat\u003e.Count;\r\n\r\n            // Get a \u0027width\u0027 sized slice from x.\r\n            Span\u003cfloat\u003e span = x.AsSpan();\r\n            Span\u003cfloat\u003e slice = span.Slice(0, width);\r\n\r\n            // Load the slice into a Vector.\r\n            var vec = new Vector\u003cfloat\u003e(slice);\r\n\r\n            // Print the elements of the vector.\r\n            for(int i=0; i \u003c width; i++)\r\n            {\r\n                Console.WriteLine($\"[{i}] = {vec[i]}\");\r\n            }\r\n            \r\n            // Again, using ToString().\r\n            Console.WriteLine(vec.ToString());\r\n        }\r\n\r\nThe output of the program is correct, but the debugger shows zeros in the last 4 elements of vec,  which is certainly confusing!\r\n",
                                           "updatedAt":  "2020-08-02T13:24:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47rSqP",
                                           "createdAt":  "2021-12-26T15:58:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rickbrew",
                                           "body":  "\u003e @lt72, this is also being tracked by a vsfeedback bug: https://developercommunity.visualstudio.com/content/problem/222409/contents-of-systemnumericsvector-are-shown-incorre.html\r\n\r\nWhich has been marked as a dupe of this bug, and there\u0027s still no progress over here, years later 😿\r\n\r\nI ran into this bug a few years ago when writing some AVX2 code and it burned several hours for me. Would really appreciate a fix.",
                                           "updatedAt":  "2021-12-26T15:59:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47tG3j",
                                           "createdAt":  "2021-12-27T17:59:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCH-gPw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rickbrew",
                                                                               "createdAt":  "2021-12-27T18:53:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@rickbrew Thank you for the feedback.  We apologize for the long wait implementing a fix for this issue.  Ideally we would like to fix every issue and implement every idea people submit.  Realistically, we cannot address every item.  We will continue to re-evaluate this issue against our other priorities and update it once it is committed for the release. \r\n",
                                           "updatedAt":  "2021-12-27T17:59:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EVd2Z",
                                           "createdAt":  "2022-06-04T00:33:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCsKkiQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "rickbrew",
                                                                               "createdAt":  "2022-06-04T00:44:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colingreen-payroc",
                                                                               "createdAt":  "2022-09-13T20:17:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "@tommcdon, is this something that you could point me to the sources for and I could take a look at getting a small fix in for?\r\n\r\nThe more general fix is likely more complex, but handling `Vector\u003cT\u003e` itself could likely just be a simple special-case.",
                                           "updatedAt":  "2022-06-04T00:33:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KQu_m",
                                           "createdAt":  "2022-09-13T20:07:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC27_2Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colingreen-payroc",
                                                                               "createdAt":  "2022-09-13T20:18:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "EamonHetherton",
                                                                               "createdAt":  "2022-09-13T22:33:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rickbrew",
                                                                               "createdAt":  "2022-09-16T02:54:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Redninja106",
                                                                               "createdAt":  "2023-02-16T03:04:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PaulusParssinen",
                                                                               "createdAt":  "2023-02-16T18:35:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xparadoxical",
                                                                               "createdAt":  "2023-02-28T22:37:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Had another user hit this and ping me on Twitter. \r\n\r\n@tommcdon, Given this issue has been present for over 4 years, has had a plethora of duplicate issues, and gets at least a couple new hits/asks per release, can we please look at reprioritizing it?",
                                           "updatedAt":  "2022-09-13T20:07:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KbDKZ",
                                           "createdAt":  "2022-09-15T20:43:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC280TQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "rickbrew",
                                                                               "createdAt":  "2022-09-16T02:54:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "jeffhandley",
                                                                               "createdAt":  "2022-10-03T20:50:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Suchiman",
                                                                               "createdAt":  "2023-02-28T22:15:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "breadnone",
                                                                               "createdAt":  "2023-03-01T03:34:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Thanks for the feedback @tannergooding .  We will evaluate this request for .NET 8 ",
                                           "updatedAt":  "2022-09-15T20:43:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Niv-1",
                                           "createdAt":  "2022-11-02T17:17:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCu6zEQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2022-11-02T17:31:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "kunalspathak",
                                           "body":  "Just ran into this (2nd time may be) and trying to think what is happening until @tannergooding pointed me to this issue.\r\n\r\n![image](https://user-images.githubusercontent.com/12488060/199557394-84d95ec3-641b-4dd3-91fd-66935ca4bc22.png)\r\n",
                                           "updatedAt":  "2022-11-02T17:17:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VYH-6",
                                           "createdAt":  "2023-02-16T02:30:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC29Iyw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Suchiman",
                                                                               "createdAt":  "2023-02-28T22:15:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rgwood",
                                                                               "createdAt":  "2023-03-01T06:01:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "Treit",
                                           "body":  "Please fix this, I just spent a significant amount of time convinced that I did not really understand how to create a Vector\u003clong\u003e from a Span\u003clong\u003e because of this bug.\r\n",
                                           "updatedAt":  "2023-02-16T02:31:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5WXeGC",
                                           "createdAt":  "2023-02-28T22:11:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Suchiman",
                                           "body":  "Ugh well that would explain a lot, it took me ages to figure out the debugger was actually gaslighting me.\r\nI normally trust the debugger unconditionally to tell me the truth.",
                                           "updatedAt":  "2023-02-28T22:11:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5W_zpY",
                                           "createdAt":  "2023-03-08T05:42:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC3dMeA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2023-03-08T20:30:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "kunalspathak",
                                           "body":  "On VS 2022 17.5.0, I am seeing the correct values\r\n\u003cimg width=\"764\" alt=\"image\" src=\"https://user-images.githubusercontent.com/12488060/223629034-194171d4-6645-4b67-aafa-f102a9d82197.png\"\u003e\r\n",
                                           "updatedAt":  "2023-03-08T05:42:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5XCBJl",
                                           "createdAt":  "2023-03-08T13:19:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Would be interesting to see if this is properly fixed for all cases, including `fixed sized buffers` and others.",
                                           "updatedAt":  "2023-03-08T13:19:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5XEOgu",
                                           "createdAt":  "2023-03-08T19:17:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC3dMdA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2023-03-08T20:30:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Treit",
                                           "body":  "I just re-tested this and my conclusion is that it reproduces if you target .NET 6.0, but it does NOT reproduce if you target .NET 7.0.\r\n\r\nSo perhaps something changed in .NET 7.0 that fixed this?\r\n\r\nFor the record, my repro for this was the following:\r\n\r\n```\r\nnamespace Test\r\n{\r\n    using System;\r\n    using System.Diagnostics;\r\n    using System.Numerics;\r\n    using System.Runtime.InteropServices;\r\n\r\n    class TestProgram\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var data = new Memory\u003cbyte\u003e(new byte[64]);\r\n            var val = 5L;\r\n\r\n            for (int i = 0; i \u003c 64; i += 8)\r\n            {\r\n                MemoryMarshal.Write\u003clong\u003e(data.Span.Slice(i, 8), ref val);\r\n            }\r\n\r\n            var longValues = MemoryMarshal.Cast\u003cbyte, long\u003e(data.Span.Slice(0, 64));\r\n\r\n            var count = Vector\u003clong\u003e.Count;\r\n            var sliceA = longValues.Slice(0, count);\r\n            var vecA = new Vector\u003clong\u003e(sliceA);\r\n            Debug.WriteLine(vecA);\r\n        }\r\n    }\r\n}\r\n```",
                                           "updatedAt":  "2023-03-08T19:17:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5XETuw",
                                           "createdAt":  "2023-03-08T19:37:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC3dMcA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2023-03-08T20:30:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Tested on .NET 8 locally and it looks to also be resolved for fixed sized buffers.",
                                           "updatedAt":  "2023-03-08T19:37:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hPyrJ",
                                           "createdAt":  "2023-07-11T21:22:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "The original issue in this bug is tracked via internal bug # 1762156",
                                           "updatedAt":  "2023-07-11T21:22:30Z"
                                       }
                                   ],
                         "totalCount":  21
                     },
        "title":  "Debugger does not correctly handle bytes without a backing field.",
        "labels":  [
                       "enhancement",
                       "tracking-external-issue",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/10539",
        "createdAt":  "2018-06-19T12:47:01Z",
        "number":  10539,
        "author":  "yyjdelete",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBllN7A==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sdcb",
                                            "createdAt":  "2018-11-19T08:39:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "viceice",
                                            "createdAt":  "2019-01-16T07:29:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "emysa341",
                                            "createdAt":  "2019-04-26T05:30:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fartwhif",
                                            "createdAt":  "2020-06-11T05:58:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Tratcher",
                                            "createdAt":  "2021-03-31T18:08:40Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2022-05-17T22:16:01Z",
        "body":  "Test with win10x64, netcoreapp2.1, vscode1.25(Insider)\r\n\r\nDebug in vscode/vs. You can see app exited with `0x800703e9`(`COR_E_STACKOVERFLOW`) when run SOF  in sync with 1 args, and exited with `0xc0000005`(`Access violation`) when run SOF in async without args. And the stacktrace can\u0027t be catch in async mode as it does in sync.\r\n\r\n\u003cdetails\u003e\r\n\u003csummary\u003ecode\u003c/summary\u003e\r\n\r\n```cs\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Runtime.CompilerServices;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace ConsoleApp2\r\n{\r\n    internal class Program\r\n    {\r\n        private static void Main(string[] args)\r\n        {\r\n            if (args.Length \u003e 0)\r\n            {\r\n                Console.WriteLine(\"SOF in sync\");\r\n                SOF();\r\n            }\r\n            else\r\n            {\r\n                Console.WriteLine(\"SOF in async\");\r\n                SOFAsync().Wait();\r\n            }\r\n        }\r\n\r\n        private static async Task SOFAsync()\r\n        {\r\n            await Task.Delay(100);\r\n            SOF();\r\n        }\r\n\r\n        [MethodImpl(MethodImplOptions.NoInlining)]\r\n        private static void SOF()\r\n        {\r\n            SOF();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n\u003c/details\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOLU9LgQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5ODM5MDQ1NQ==",
                                           "createdAt":  "2018-06-19T13:01:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gfoidl",
                                           "body":  "Hm, I can\u0027t reproduce this. Output is as expected\r\n```\r\nSOF in async\r\n\r\nProcess is terminating due to StackOverflowException.\r\n```\r\nwhen run from VS or via CLI in either Debug or Release on win10 x64.\r\n\r\nWhat\u0027s the output of `dotnet --info`?",
                                           "updatedAt":  "2018-06-19T13:01:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5ODM5MjU1MA==",
                                           "createdAt":  "2018-06-19T13:08:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "yyjdelete",
                                           "body":  "```\r\nZ:\\ConsoleApp2\u003edotnet --info\r\n.NET Core SDK（反映任何 global.json）:\r\n Version:   2.1.300\r\n Commit:    adab45bf0c\r\n\r\n运行时环境:\r\n OS Name:     Windows\r\n OS Version:  10.0.17692\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.300\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.0\r\n  Commit:  caa7b7e2ba\r\n\r\n.NET Core SDKs installed:\r\n  1.1.9 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.100 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```",
                                           "updatedAt":  "2018-06-19T13:08:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5ODM5NjA5MA==",
                                           "createdAt":  "2018-06-19T13:19:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "yyjdelete",
                                           "body":  "The same output as mine.\r\nThe exit code only show when debug, and show in `output tab-\u003edebug`(vs) or `debug console`(vscode). And no stacktrace can be shown as sync does.\r\n`The program \u0027[16172] dotnet.exe\u0027 has exited with code -1073741819 (0xc0000005) \u0027Access violation\u0027.`\r\n`The program \u0027[15620] ConsoleApp2.dll\u0027 has exited with code -1073741819 (0xc0000005).`",
                                           "updatedAt":  "2018-06-19T13:19:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5ODQwMDkzNQ==",
                                           "createdAt":  "2018-06-19T13:35:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gfoidl",
                                           "body":  "OK, can confirm this.\r\n\r\nThe access violation makes some sense to me. The continuation in the async-path tries to access some memory that isn\u0027t available anymore due the SOE. ",
                                           "updatedAt":  "2018-06-19T13:35:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MzM2NTM2OQ==",
                                           "createdAt":  "2019-04-15T18:27:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@cshung please take a look.  ",
                                           "updatedAt":  "2019-04-15T18:27:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4NzEzOTQ2Nw==",
                                           "createdAt":  "2019-04-26T17:36:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAoFesg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dodongphure",
                                                                               "createdAt":  "2019-05-06T10:19:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "emysa341",
                                           "body":  "Hello Everyone, I was able to reproduce this issue, [Here ](https://github.com/emysa341/SharingRepo/tree/master)is the sample project which reproduces this issue. \r\nInstead of giving sof exception app exits with just access violation message on the output window.\r\nMy visual studio is up to date:\r\n\r\n```\r\nMicrosoft Visual Studio Community 2017 \r\nVersion 15.9.11\r\nVisualStudio.15.Release/15.9.11+28307.586\r\nMicrosoft .NET Framework\r\nVersion 4.7.03190\r\n```",
                                           "updatedAt":  "2019-04-26T17:36:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1MTA5NjQ1Mg==",
                                           "createdAt":  "2019-11-07T14:13:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ygoe",
                                           "body":  "I\u0027m experiencing a lot of these crashes in the VS 2017 debugger today. And I have no idea where they\u0027re coming from. The debugging just ends and there\u0027s that line about the access violation in the output panel. That\u0027s not what I use managed debugging for. Is there anything I can do to find out why this is happening? I\u0027m working on an ASP.NET Core 2.2 app.\r\n\r\nPS: The crash happens at unpredictable times, sometimes quick, sometimes later or not before I close the application. There is network communication and timer-based activity involved though which may trigger parts of the code.",
                                           "updatedAt":  "2019-11-07T14:16:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NTEwMjMwMA==",
                                           "createdAt":  "2019-11-18T16:44:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ygoe",
                                           "body":  "Seems to have gone away again. I fixed a deadlock (with two `lock` sections) between two services with dependency injection. Instead of just dead-locking and waiting as it should, Visual Studio seems to just have killed everything. It it would dead-lock, I could have noticed the actual issue and found the waiting threads in the debugger.",
                                           "updatedAt":  "2019-11-18T16:44:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5MDg0MTMxMQ==",
                                           "createdAt":  "2020-02-25T12:25:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "yyjdelete",
                                           "body":  "Maybe also related to #11677? It just happen when stackoverflow outside the main thread. It can also be reproduce on foreground/background/threadpool thread.",
                                           "updatedAt":  "2020-02-25T12:25:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2NDYwNzQyMg==",
                                           "createdAt":  "2020-07-27T19:59:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@hoyosjs was this issue reproducible? If no, OK to close?",
                                           "updatedAt":  "2020-07-27T19:59:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2NTkzOTQ5NA==",
                                           "createdAt":  "2020-07-29T21:31:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "This reproducible. The output is `0x800703e9` if it runs on the main thread, and throws a `System.StackOverflow` exception that the debugger catches. However, if it\u0027s on a different thread we throw an AV that the debugger can\u0027t handle and we can\u0027t handle the exception. Indeed seems to be the same as #11677, doesn\u0027t need to be an async codepath:\r\n\r\n\r\n```\r\nnamespace ConsoleApp2\r\n{\r\n    internal class Program\r\n    {\r\n        private static void Main(string[] args)\r\n        {\r\n            if (args.Length \u003e 0)\r\n            {\r\n                Console.WriteLine(\"SOF in sync\");\r\n                SOF();\r\n            }\r\n            else\r\n            {\r\n                Console.WriteLine(\"SOF in async\");\r\n                new Thread(()=\u003eSOFAsync()).Start();\r\n            }\r\n        }\r\n\r\n        private static void SOFAsync()\r\n        {\r\n            Thread.Sleep(1000);\r\n            SOF();\r\n        }\r\n\r\n        [MethodImpl(MethodImplOptions.NoInlining)]\r\n        private static void SOF()\r\n        {\r\n            SOF();\r\n        }\r\n    }\r\n}\r\n```",
                                           "updatedAt":  "2020-07-29T21:31:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2NTk5OTQyMw==",
                                           "createdAt":  "2020-07-30T00:24:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Thank you @hoyosjs! Keeping this open in 5.0 in case we can root cause and fix.",
                                           "updatedAt":  "2020-07-30T00:24:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2MDE3MTM5Mw==",
                                           "createdAt":  "2021-01-14T12:40:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gregoryagu",
                                           "body":  "As a note, I ran into this same issue:  Visual Studio would kill execution of app with only the message: Access Violation.\r\n\r\nThere was a stack overflow exception occurring due to improperly written AddRange method below. When the AddRange was used in the code, the issue would manifest itself. \r\n\r\n```\r\npublic class BindableCollection\u003cT\u003e: ObservableCollection\u003cT\u003e\r\n    {\r\n        public BindableCollection()\r\n        {\r\n        }\r\n\r\n        public BindableCollection(IEnumerable\u003cT\u003e collection):base(collection)\r\n        {\r\n            \r\n        }\r\n\r\n        public void AddRange(IEnumerable\u003cT\u003e collection)\r\n        {\r\n            this.AddRange(collection);\r\n        }\r\n    }\r\n```\r\n\r\nThis is in a Blazor Server app VS: 16.9.0 Preview 2.0.",
                                           "updatedAt":  "2021-01-14T12:40:34Z"
                                       }
                                   ],
                         "totalCount":  13
                     },
        "title":  "0xc0000005(Access violation) when StackOverflow happen in async path?",
        "labels":  [
                       "bug",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/10727",
        "createdAt":  "2018-07-19T12:16:36Z",
        "number":  10727,
        "author":  "noahfalk",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOA1YZuQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mattwarren",
                                            "createdAt":  "2018-07-20T08:41:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AaronRobinsonMSFT",
                                            "createdAt":  "2018-07-21T05:36:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bbc2",
                                            "createdAt":  "2018-08-09T13:16:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "k15tfu",
                                            "createdAt":  "2019-11-19T14:29:55Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2023-01-24T00:10:49Z",
        "body":  "@dotnet/jit-contrib @sywhang \r\n\r\nWhile investigating dotnet/runtime#10706 I\u0027m seeing a number of things that look inconsistent and probably need to be fixed or better documented. Jit folks, can you let me know what you think?\r\n\r\n1) The [FunctionEnter3](https://docs.microsoft.com/en-us/dotnet/framework/unmanaged-api/profiling/functionenter3-function)/[FunctionLeave3](https://docs.microsoft.com/en-us/dotnet/framework/unmanaged-api/profiling/functionleave3-function)/[FunctionTailcall3](https://docs.microsoft.com/en-us/dotnet/framework/unmanaged-api/profiling/functiontailcall3-function) methods are a publicly exposed and have a documented ABI. On Linux x64 we pass FunctionIDOrClientID in R14, MSDN documentation doesn\u0027t mention a custom calling convention so developers would expect RDI. I believe we picked R14 for good reason so I propose we change MSDN to match.\r\n2) The runtime sometimes provides the implementation of the ProfileEnter call as an intermediary between the jitted code and other forms of the profiler callback. On Linux x64 that gives us 4 non-agreeing definitions of the register preservation requirements:\r\n  - The MSDN docs claim the caller must preserve all registers\r\n  - The code comments above the runtime ProfileEnterNaked implementation suggest a number of registers are not preserved:\r\nhttps://github.com/dotnet/coreclr/blob/master/src/vm/amd64/asmhelpers.S#L59\r\n   (Incidentally the comments aren\u0027t self-consistent either, xmm1 and rdx are both preserved and not preserved ; )\r\n   - The implementation of the JIT has different expectations about what would be preserved (for example is it really safe to trash the argument registers in the prologue of the caller?)\r\n   - The implementation of the assembly routine preserves all the integer argument registers\r\nhttps://github.com/dotnet/coreclr/blob/master/src/vm/amd64/asmhelpers.S#L135\r\n\r\nI don\u0027t have a good sense of exactly what the JIT expects to be preserved across this call for the code to run correctly, but whatever it is I\u0027d like to bring our own comments, implementation, and MSDN docs into alignment with it. I suspect there may be discrepancies for the register preservation requirements on other architectures, but I\u0027m happy to start with Linux x64.\r\n\r\nThanks!\r\n -Noah\r\n\r\n\r\ncategory:documentation\r\ntheme:prolog-epilog\r\nskill-level:intermediate\r\ncost:medium\r\nimpact:small",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOHCvAgA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxMTU3NzU0OQ==",
                                           "createdAt":  "2018-08-08T22:46:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BruceForstall",
                                           "body":  "Note that the document that JIT depends most on for ABI related questions is the \"CLR ABI\". It has a section on the profiler hooks: https://github.com/dotnet/coreclr/blob/master/Documentation/botr/clr-abi.md#profiler-hooks. It could certainly be expanded to be more clear, and answer more questions like you have here.\r\n\r\nIn the JIT, the most interesting parts of the implementation are `genProfilingEnterCallback` and `genProfilingLeaveCallback`.\r\n\r\nGenerally, documentation probably was originally written for x86 -- the first architecture -- and not updated very much to handle the other architectures (x64, Linux x64, arm32, arm64, Linux x86).\r\n\r\nIt looks to me that for Linux x64:\r\n1. for the enter hook we pass R14 = ProfilerMethodHnd (I guess this is FunctionIDOrClientID?), R15 = caller\u0027s SP. (For Windows x64, it\u0027s the normal first 2 argument registers, RCX/RDX). It looks like we don\u0027t document the 2nd argument? Or maybe that\u0027s what `FunctionEnter3WithInfo` (and friends) are, and the JIT just always generates the same code.\r\n\r\nThere is no documentation in the code or \"CLR ABI\" to explain why R14/R15 were picked. Presumably it is because there is no caller-provided \"home\" space for the argument registers, as on Windows x64. So we don\u0027t want to trash the incoming registers. On Windows, we first home all the register argument, and then we can trash them.\r\n\r\nRegarding register preservation:\r\n- On Windows x64, I believe any volatile integer register can be trashed. Callee-saved must be preserved. This is the usual function calling convention.\r\n- On Linux x64, all argument and callee-saved registers must be preserved. (Note there are no callee-saved floating-point registers.)\r\n\r\nThe asmhelper.S comment that says rax/rdx/xmm0/xmm1 need to be preserved should, I believe, only apply to the \"leave\" helper, which needs to preserve the function return value.\r\n\r\nThese statements should really be backed up by testing! And extended to other platforms.\r\n\r\n",
                                           "updatedAt":  "2018-08-08T22:46:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxMTkxNDc1Ng==",
                                           "createdAt":  "2018-08-09T22:12:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "Thanks for looking into this Bruce! I agree on the testing. My thinking here is we could write a trivial profiler that registers ELT callbacks in order to deliberately trash every register we believe we can. If we can have this profiler loaded and pass all the CoreCLR tests then it would be good evidence the analysis was accurate.\r\n\r\n\u003e for the enter hook we pass R14 = ProfilerMethodHnd (I guess this is FunctionIDOrClientID?), R15 = caller\u0027s SP. (For Windows x64, it\u0027s the normal first 2 argument registers, RCX/RDX). It looks like we don\u0027t document the 2nd argument?\r\n\r\nThat is intentional. The public contract is only on the 1st argument. The second argument is private contract between JIT and runtime so that the runtime can implement FunctionEnter3WithInfo.",
                                           "updatedAt":  "2018-08-09T22:12:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxNDI0NDcxMw==",
                                           "createdAt":  "2018-08-20T08:51:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "@BruceForstall - I\u0027ve been looking at this a bit more and it raised a few (hopefully quick) additional questions:\r\n1) Are there any scenarios where the JIT needs the upper 64 bits of the XMM arguments preserved? As far as I know the largest floating point type that could be passed as an argument is 8 bytes, and the profiler is only designed to expose 8 byte arguments. I am guessing save/restore on the low 8 bytes is sufficient.\r\n2) All the callbacks currently preserve 16 bytes for XMM0/XMM1 return values. I wasn\u0027t planning to change this for Leave/Tailcall functions, but if you knew I was curious if we use larger return values?",
                                           "updatedAt":  "2018-08-20T08:51:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxNDQ5OTQ1Mg==",
                                           "createdAt":  "2018-08-20T23:43:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BruceForstall",
                                           "body":  "The questions are specific to x64, I believe.\r\n\r\nWe don\u0027t support `__vectorcall` convention, so:\r\n1. only the low 64 bits of XMM arguments need be preserved.\r\n2. I believe we also only support 64-bit return values in XMM0. For Linux/x64, it\u0027s a little more complicated: XMM0 and XMM1 can return two members of a struct of two doubles. I can\u0027t recall what happens for a struct of 2 floats in this case.\r\n\r\nMaybe @CarolEidt can comment to verify.\r\n",
                                           "updatedAt":  "2018-08-20T23:43:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxNDg0MjM5MQ==",
                                           "createdAt":  "2018-08-21T22:29:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CarolEidt",
                                           "body":  "@BruceForstall is right about the handling of the upper bits of XMM arguments, though for anything that\u0027s not classified as a call, we expect them to be preserved.\r\n\r\nOn Linux/x64, I believe it\u0027s the case that a struct of 2 floats would be returned in XMM0, but a struct of 2 doubles or 3 or 4 floats would be returned in XMM0 and XMM1.\r\n\r\nThere\u0027s no support for using more than 2 registers for returns.",
                                           "updatedAt":  "2018-08-21T22:29:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3MjYyOTM3Ng==",
                                           "createdAt":  "2019-03-13T22:22:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BruceForstall",
                                           "body":  "@noahfalk It doesn\u0027t seem like this is a 3.0 issue, so I\u0027m moving it to Future.",
                                           "updatedAt":  "2019-03-13T22:22:39Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Clarify calling conventions for profiler Enter callback",
        "labels":  [
                       "documentation",
                       "area-CodeGen-coreclr",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/11056",
        "createdAt":  "2018-09-07T22:10:07Z",
        "number":  11056,
        "author":  "noahfalk",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC3V9jQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "omariom",
                                            "createdAt":  "2024-04-19T12:00:08Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-02-16T18:03:30Z",
        "body":  "DebuggerMethodInfoTable is based on CHashTable - a chaining hashtable that never rehashes as it grows, thus it has O(N) lookup performance rather than O(1) you would expect from a hashtable. I don’t know if there is some historical rationale for why this poorly scaling hashtable was used, but I do see comments in the code suggesting it is deprecated and that nothing else in the runtime should use it. The code declares 101 buckets, so average chain length would be num_methoddefs_loaded/101. It seems quite plausible that a big app would have 1M+ methods so an average chain size of 10,000. Not a fast lookup at all.\r\n\r\nWhen doing stack trace resolution we lookup each frame in the stack in this table, all of the lookups are done synchronized under a debugger lock, and the entire operation is cooperative mode. This can cause large apps that frequently throw exceptions and log their stacks to have abnormally long GC pause times.\r\n\r\nThere is a related desktop bug (Microsoft access only): https://devdiv.visualstudio.com/DevDiv/Default/_workitems/edit/679712\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOdCteBQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyNjE3MzM2Mg==",
                                           "createdAt":  "2018-10-02T07:18:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "UniverseHan",
                                           "body":  "@mikem8361 I wanna try this. Could I ?",
                                           "updatedAt":  "2018-10-02T07:18:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyNjE3NDgzOA==",
                                           "createdAt":  "2018-10-02T07:24:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikem8361",
                                           "body":  "I have no problem with it.  ",
                                           "updatedAt":  "2018-10-02T07:24:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48NgnK",
                                           "createdAt":  "2022-01-11T17:05:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nonbob",
                                           "body":  "I don\u0027t know how all the pieces fit together well enough to know if this counts as a real world example, but I\u0027ll present it briefly and you guys can decide if it\u0027s relevant.\r\n\r\nWe captured a trace of a largish applicaton with vsdiagnostics.exe.  When examining the resulting .diagsession file in VS, the next-to-top hit for Self CPU was DebuggerMethodInfoTable::Cmp (top was memset, 3rd was JIT_ByRefWriteBarrier, then it got into application code).  Which is how I got here.  Take if it fits, ignore it if it don\u0027t.\r\n\r\n(Perhaps I should note that AppDynamics and Stackify were also present on this system.  Not sure if that matters or not)",
                                           "updatedAt":  "2022-01-12T15:48:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wJtdS",
                                           "createdAt":  "2024-01-08T18:14:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DeepakRajendrakumaran",
                                           "body":  "I\u0027ve seen this same thing when looking at VTune profiles for some real world apps.\r\n\r\nMy main question is - is this a profiler only method? i.e., will this be called when profiler is not attached?",
                                           "updatedAt":  "2024-01-08T18:14:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wMNGQ",
                                           "createdAt":  "2024-01-09T02:44:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "No, there are some cases in which you will see this at runtime. Particularly symbolication of an exception might hit this. Other than that - diagnostic scenarios are the main perf impact",
                                           "updatedAt":  "2024-01-09T02:44:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wQ6xG",
                                           "createdAt":  "2024-01-09T17:26:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DeepakRajendrakumaran",
                                           "body":  "\u003e No, there are some cases in which you will see this at runtime. Particularly symbolication of an exception might hit this. Other than that - diagnostic scenarios are the main perf impact\r\n\r\nThanks for the response. I was trying to figure out if this code will be hit during \u0027normal running of an application\u0027- i.e., will optimizing it have any effect if application is running as expected(gauging importance of optimizing it). \u0027symbolization of an exception\u0027 I assume is something that needs to happen if there is a need to get call stack as a result of encountering an exception which I assume is a rare occurrence. Please feel free to correct me if I am wrong.",
                                           "updatedAt":  "2024-01-09T17:26:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5w5-z8",
                                           "createdAt":  "2024-01-16T18:05:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DeepakRajendrakumaran",
                                           "body":  "\u003e \u003e No, there are some cases in which you will see this at runtime. Particularly symbolication of an exception might hit this. Other than that - diagnostic scenarios are the main perf impact\r\n\u003e \r\n\u003e Thanks for the response. I was trying to figure out if this code will be hit during \u0027normal running of an application\u0027- i.e., will optimizing it have any effect if application is running as expected(gauging importance of optimizing it). \u0027symbolization of an exception\u0027 I assume is something that needs to happen if there is a need to get call stack as a result of encountering an exception which I assume is a rare occurrence. Please feel free to correct me if I am wrong.\r\n\r\n@hoyosjs @cshung @mikem8361 @tannergooding @BruceForstall \r\n\r\nSorry to bother you guys again and my apologies if I missed anything from the original reply  but it would be nice to get a confirmation re above questions. I\u0027m not really familiar with diagnostics part of runtime and would appreciate some feedback here\r\n1. Will suboptimal implementation in \u0027`DebuggerMethodInfoTable`\u0027 have any effect on performance during regular execution - i.e., it\u0027s not a factor unless there is a profiler attached, exception causing runtime to figure out call stack or any other unusual events\r\n2. is `CHashTable` used else where or is it specific to \u0027`DebuggerMethodInfoTable`\u0027. This is the other one that pops in the profile I have. The issue here is I see some comments there which indicates this can be further optimized but I\u0027m trying to figure out the impact on real-world and it\u0027s hard to make that determination from profile unless I know which functions in there are showing up specifically due to the profiler being attached\r\nEdit : Adding what seem like a relevant issue that\u0027s planned to be worked on : https://github.com/dotnet/runtime/issues/11466\r\n\r\n![image](https://github.com/dotnet/runtime/assets/17969209/322b9477-a79c-41f4-b980-a6fdb4ff7791)\r\n\r\n",
                                           "updatedAt":  "2024-01-16T20:25:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5w8bU5",
                                           "createdAt":  "2024-01-17T03:43:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "It\u0027s used elsewhere, and it\u0027s brittle to change `CHashTable`. A better thing is to move to `SHash`. And it\u0027s more than a profiler scenario. A common pattern is something like \r\n\r\n```csharp\r\ntry\r\n{\r\n  throw new Exception();\r\n}\r\ncatch (Exception ex)\r\n{\r\n  logger.Warn(\"Operation failed with exception: {exception}\", ex);\r\n}\r\n```",
                                           "updatedAt":  "2024-01-17T03:43:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xBv5c",
                                           "createdAt":  "2024-01-17T17:36:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DeepakRajendrakumaran",
                                           "body":  "\u003e It\u0027s used elsewhere, and it\u0027s brittle to change `CHashTable`. A better thing is to move to `SHash`. And it\u0027s more than a profiler scenario. A common pattern is something like\r\n\u003e \r\n\u003e ```cs\r\n\u003e try\r\n\u003e {\r\n\u003e   throw new Exception();\r\n\u003e }\r\n\u003e catch (Exception ex)\r\n\u003e {\r\n\u003e   logger.Warn(\"Operation failed with exception: {exception}\", ex);\r\n\u003e }\r\n\u003e ```\r\n\r\nThank you. I see a separate issue for this that\u0027s tagged for 9.0 (https://github.com/dotnet/runtime/issues/11466). Would I be correct in assuming this is planned to be worked on for the next release?",
                                           "updatedAt":  "2024-01-17T17:36:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50FfZO",
                                           "createdAt":  "2024-02-16T01:20:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidwrighton",
                                           "body":  "Yes, we plan to work on this next release. We may or may not fix it by fixing the hash tables in the debugger.\r\n\r\nThis is a small test app which shows the problem. \r\n```csharp\r\nusing System.Diagnostics;\r\nusing System.Reflection;\r\nusing System.Reflection.Emit;\r\nusing System.Runtime.CompilerServices;\r\n\r\nConsole.WriteLine(\"EHToStringPerfTest.exe \u003cnumberOfDifferentMethodsToThrowThroughInWarmup\u003e \u003cnumIterations\u003e \u003cstackDepth\u003e \u003cILComplexity\u003e \u003cnumberOfThreads\u003e \u003crunWarmupMethodsBeforeIterationsWarmup\u003e\");\r\n\r\nint numberOfDifferentMethodsToThrowThroughInWarmup = args.Length \u003e 0 ? Int32.Parse(args[0]) : 10000;\r\nint numIterations = args.Length \u003e 1 ? Int32.Parse(args[1]) : 1000;\r\nint stackDepth = args.Length \u003e 2 ? Int32.Parse(args[2]) : 100;\r\nint ILComplexity = args.Length \u003e 3 ? Int32.Parse(args[3]) : 500;\r\nint numberOfThreads = args.Length \u003e 4 ? Int32.Parse(args[4]) : 4;\r\nbool runWarmupMethodsBeforeIterationsWarmup = args.Length \u003e 5 ? bool.Parse(args[5]) : false;\r\n\r\n\r\nType overflow = typeof(OverflowException);\r\nConstructorInfo exCtorInfo = typeof(Exception).GetConstructor(Array.Empty\u003cType\u003e());\r\nMethodInfo exToString = typeof(object).GetMethod(\"ToString\");\r\nMethodInfo dummyMethod = typeof(TempMethodHolder).GetMethod(\"DummyMethod\");\r\nMethodInfo throwingMethod = typeof(TempMethodHolder).GetMethod(\"ThrowingMethod\");\r\n\r\nAssemblyBuilder assemblyBuilder = AssemblyBuilder.DefineDynamicAssembly(new System.Reflection.AssemblyName(\"Temp\"), AssemblyBuilderAccess.Run);\r\nvar moduleBuilder = assemblyBuilder.DefineDynamicModule(\"Temp\");\r\nvar typeBuilder = moduleBuilder.DefineType(\"TheType\", System.Reflection.TypeAttributes.Public, typeof(Object));\r\n\r\nfor (int i = 0; i \u003c numberOfDifferentMethodsToThrowThroughInWarmup; i++)\r\n    AddMethodToType(i);\r\nvoid AddMethodToType(int index)\r\n{\r\n    var methodBuilder = typeBuilder.DefineMethod($\"Method{index}\", System.Reflection.MethodAttributes.Public | System.Reflection.MethodAttributes.Static, typeof(void), Array.Empty\u003cType\u003e());\r\n    var ilg = methodBuilder.GetILGenerator();\r\n    ilg.Emit(OpCodes.Nop);\r\n    ilg.BeginExceptionBlock();\r\n    ilg.Emit(OpCodes.Newobj, exCtorInfo);\r\n    ilg.Emit(OpCodes.Throw);\r\n    ilg.BeginCatchBlock(typeof(Exception));\r\n    ilg.Emit(OpCodes.Callvirt, exToString);\r\n    ilg.Emit(OpCodes.Pop);\r\n    ilg.EndExceptionBlock();\r\n    ilg.Emit(OpCodes.Ret);\r\n}\r\n\r\nMethodInfo lastMethod = throwingMethod;\r\nfor (int i = 0; i \u003c stackDepth; i++)\r\n{\r\n    lastMethod = AddNestingMethodToType(lastMethod, i);\r\n}\r\n\r\nMethodInfo AddNestingMethodToType(MethodInfo methodToCall, int index)\r\n{\r\n    var methodBuilder = typeBuilder.DefineMethod($\"NestingMethod{index}\", System.Reflection.MethodAttributes.Public | System.Reflection.MethodAttributes.Static, typeof(void), Array.Empty\u003cType\u003e());\r\n    methodBuilder.SetImplementationFlags(MethodImplAttributes.NoInlining);\r\n    var ilg = methodBuilder.GetILGenerator();\r\n    ilg.Emit(OpCodes.Nop);\r\n    for (int ilComplexityIndex = 0; ilComplexityIndex \u003c ILComplexity; ilComplexityIndex++)\r\n        ilg.Emit(OpCodes.Call, dummyMethod);\r\n    ilg.Emit(OpCodes.Call, methodToCall);\r\n    ilg.Emit(OpCodes.Ret);\r\n    return methodBuilder;\r\n}\r\n\r\nvar createdType = typeBuilder.CreateType();\r\nAction CoreIteration = createdType.GetMethod(lastMethod.Name).CreateDelegate\u003cAction\u003e();\r\n\r\nint numIterationsInThreadOfTesting = 2;\r\nWarmup();\r\nnumIterationsInThreadOfTesting = numIterations;\r\nvar milliseconds = TestRoutine(numberOfThreads);\r\n\r\nConsole.WriteLine($\"Milliseconds for test: {milliseconds}\");\r\nConsole.WriteLine($\"Exceptions/second (overall): {(double)(numIterations * numberOfThreads * 1000) / (double)milliseconds}\");\r\nConsole.WriteLine($\"Exceptions/second (per thread): {(double)(numIterations * 1000) / (double)milliseconds}\");\r\n\r\nvoid ThreadOfTesting()\r\n{\r\n    for (int i = 0; i \u003c numIterationsInThreadOfTesting; i++)\r\n        Iteration();\r\n}\r\n\r\nvoid Warmup()\r\n{\r\n    if (runWarmupMethodsBeforeIterationsWarmup)\r\n        InvokeWarmupMethods();\r\n    Iteration();\r\n    if (!runWarmupMethodsBeforeIterationsWarmup)\r\n        InvokeWarmupMethods();\r\n\r\n    TestRoutine(1);\r\n}\r\n\r\nvoid InvokeWarmupMethods()\r\n{\r\n    foreach (var method in createdType.GetMethods())\r\n    {\r\n        if (method.Name.StartsWith(\"Method\"))\r\n            method.Invoke(null, Array.Empty\u003cobject\u003e());\r\n    }\r\n}\r\n\r\nlong TestRoutine(int numThreads)\r\n{\r\n    Stopwatch sw = Stopwatch.StartNew();\r\n    List\u003cTask\u003e tasks = new List\u003cTask\u003e();\r\n\r\n    for (int i = 0; i \u003c numberOfThreads; i++)\r\n    {\r\n        tasks.Add(Task.Run(ThreadOfTesting));\r\n    }\r\n\r\n    foreach (Task t in tasks)\r\n    {\r\n        t.Wait();\r\n    }\r\n    return sw.ElapsedMilliseconds;\r\n}\r\n\r\nstring exToStringResult;\r\nvoid Iteration()\r\n{\r\n    try\r\n    {\r\n        CoreIteration();\r\n    }\r\n    catch (Exception ex) { exToStringResult = ex.ToString(); }\r\n}\r\n\r\n\r\npublic class TempMethodHolder\r\n{\r\n    [MethodImpl(MethodImplOptions.NoInlining)]\r\n    public static void DummyMethod()\r\n    {\r\n        return;\r\n    }\r\n\r\n    [MethodImpl(MethodImplOptions.NoInlining)]\r\n    public static void ThrowingMethod()\r\n    {\r\n        throw new Exception();\r\n    }\r\n}\r\n\r\n```",
                                           "updatedAt":  "2024-02-16T01:20:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50K14F",
                                           "createdAt":  "2024-02-16T18:03:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DeepakRajendrakumaran",
                                           "body":  "Thanks for the test code. I\u0027ll check it out locally.\r\n\r\nI\u0027m not going to attempt to fix it myself seeing that you guys already are planning to do this.",
                                           "updatedAt":  "2024-02-16T18:03:28Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "Resolving stack traces is very slow in large applications (DebuggerMethodInfoTable is a poor performing hashtable)",
        "labels":  [
                       "tenet-performance",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/11109",
        "createdAt":  "2018-09-18T06:30:17Z",
        "number":  11109,
        "author":  null,
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-05-04T22:40:48Z",
        "body":  "Opened on behalf of @AriNuer\n\nThe test `baseservices_exceptions._WindowsEventLog_WindowsEventLog_WindowsEventLog_/_WindowsEventLog_WindowsEventLog_WindowsEventLog_cmd` has failed.\n\n\n    \n    Return code:      1\n    Raw output file:      C:\\\\dotnetbuild\\\\work\\\\b7d12e91-0006-4f48-b585-0493803d0d4c\\\\Work\\\\aa0660f8-4813-42c7-9fc4-5e77874c0980\\\\Unzip\\\\Reports\\\\baseservices.exceptions\\\\WindowsEventLog\\\\WindowsEventLog\\\\WindowsEventLog.output.txt\n    Raw output:\n    BEGIN EXECUTION\\r\n     \\\"C:\\\\dotnetbuild\\\\work\\\\b7d12e91-0006-4f48-b585-0493803d0d4c\\\\Payload\\\\corerun.exe\\\" WindowsEventLog.exe \\r\n    Found 11934 entries in Event Log\\r\n    WindowsEventLog Test: UnhandledExceptionTest failed.\\r\n    Expected: 100\\r\n    Actual: 1\\r\n    END EXECUTION - FAILED\\r\n    FAILED\\r\n    Test Harness Exitcode is : 1\\r\n    \n    To run the test:\n    \u003e set CORE_ROOT=C:\\\\dotnetbuild\\\\work\\\\b7d12e91-0006-4f48-b585-0493803d0d4c\\\\Payload\n    \u003e C:\\\\dotnetbuild\\\\work\\\\b7d12e91-0006-4f48-b585-0493803d0d4c\\\\Work\\\\aa0660f8-4813-42c7-9fc4-5e77874c0980\\\\Unzip\\\\WindowsEventLog\\\\WindowsEventLog\\\\WindowsEventLog.cmd\n    \\r\n    Expected: True\\r\n    Actual:   False\n\n        Stack Trace:\n\n           at baseservices_exceptions._WindowsEventLog_WindowsEventLog_WindowsEventLog_._WindowsEventLog_WindowsEventLog_WindowsEventLog_cmd() in E:\\A\\_work\\76\\s\\bin\\tests\\Windows_NT.arm.Release\\TestWrappers\\baseservices.exceptions\\baseservices.exceptions.XUnitWrapper.cs:line 9699\nBuild : 3.0 - 20180918.01 (Core Tests)\nFailing configurations:\n- windows.10.arm64-arm\n  - \n- Windows.10.Nano.Amd64-x64\n  - \nDetails：\nhttps://mc.dot.net/#/product/netcore/30/source/official~2Fcoreclr~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180918.01/workItem/baseservices.exceptions.XUnitWrapper/analysis/xunit/baseservices_exceptions._WindowsEventLog_WindowsEventLog_WindowsEventLog_~2F_WindowsEventLog_WindowsEventLog_WindowsEventLog_cmd",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOHORY6w==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyMjU2ODg4Mw==",
                                           "createdAt":  "2018-09-18T21:50:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "4creators",
                                           "body":  "Test is failing intermittently in Windows x86 jitstress dotnet/coreclr#19677:\r\n\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x86_checked_windows_nt_jitx86hwintrinsicnoavx_prtest/319/",
                                           "updatedAt":  "2018-09-18T21:51:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2NzkzMzU5NA==",
                                           "createdAt":  "2019-02-27T16:34:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RussKeldorph",
                                           "body":  "@sywhang If this isn\u0027t a quick fix, could you disable the test against this bug so we can get the official build green?",
                                           "updatedAt":  "2019-02-27T16:34:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2ODAwMjIyNg==",
                                           "createdAt":  "2019-02-27T19:42:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sywhang",
                                           "body":  "I opened dotnet/coreclr#22889 to disable this test for now. Thanks. ",
                                           "updatedAt":  "2019-02-27T19:42:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4NDcyNzAxOQ==",
                                           "createdAt":  "2019-04-19T00:00:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Poorly written test - the test loads all of the items in the windows event log and then tries to verify that a particular type of exeception is in the log.  The test fails because it the lab machine\u0027s event log might be extremely large, we might need to add retry logic to the test.  Please pull back to 3.0 if we can get a fix done in time for 3.0.",
                                           "updatedAt":  "2019-04-19T00:00:16Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Test failure: baseservices_exceptions._WindowsEventLog_WindowsEventLog_WindowsEventLog_/_WindowsEventLog_WindowsEventLog_WindowsEventLog_cmd",
        "labels":  [
                       "test-bug",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/11316",
        "createdAt":  "2018-10-24T22:09:44Z",
        "number":  11316,
        "author":  "vancem",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-10-16T07:08:22Z",
        "body":  "Today in the EventPipe, it is not easy to distinguish between an CPU bound thread and a blocked thread.  Today we just distinguish between threads in managed code (which CAN\u0027T be blocked) and threads that are not in managed code (which often are blocked but don\u0027t have to be).\r\n\r\nThis works OK, but is really not what we want because you can\u0027t answer simple questions like: is this thread/process CPU bound?   How much CPU capacity is my process consuming?     These are really quite useful.  \r\n\r\nFundamentally the reason we don\u0027t have this information is that there was no really EASY, EFFICIENT way of getting this information in a CROSS_PLATFORM way (since we would need to fetch it once per msec, PER THREAD) which is a lot.\r\n\r\nMy proposal here is to solve this in conjunction with Issue dotnet/runtime#11301.  \r\n* We add a new 64 bit field CpuOnThreadNSec which gives the number of nanoseconds of CPU time on that thread (the basis is not given, it is only useful for computing deltas).    This number can be 0 which means at the time the sample is taken we did not fetch this CPU time.\r\n  \r\nFor any threads that are actually sampled using the algorithm in dotnet/runtime#11301.\r\n\r\n* for every thread, if the last sample was in managed code, we will not bother setting the CpuOnThreadNSec field if the last time CpuOnThreadNSec was emitted on this thread was \u003c  1 second ago.  \r\n\r\nThus we get accurate CpuOnThreadNSec  every second (if we get events on the thread at all),   However we only pay for this once every second rather than once every msec, which is a huge improvement (indeed we may wish to make the threshold once every 100 msec (or make it configurable)).  \r\n\r\nNow if we do the optimization in dotnet/runtime#11301 if a thread never returns from native code, then you wont get any data on it (even if that native code is consuming CPU).     Thus event threads that have not returned should also log their CpuOnThreadsNSec at a low rate (~ once a second or slower),  I actually recommend a binary backoff algorithm (thus 1 sec, then 2 , then 4 ...) as long as the thread never returns from native code.   This allows the overhead of threads that just block and do almost nothing to approach 0 as time goes on.   \r\n\r\nThings can be tweeked here, but the basics are\r\n1) We have a new OPTIONAL field on the CPU Sample event that tells you CPU spend on the thread.   \r\n2) We collect this but at a lower rate \r\n3) For threads outside the runtime we collect it at even a lower rate still (because they are likley to be blocked).\r\n\r\nBut now the viewer can get a very good idea of what % of the time a thread spends CPU bound, and if it assumes all managed code is CPU, it can attribute how much of the native time is blocked.\r\n\r\n@noahfalk @brianrob @jorive",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOaSJdgA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzMjg0NzgyNg==",
                                           "createdAt":  "2018-10-24T22:18:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vancem",
                                           "body":  "For Linux see getrusage() for AP ocr clock_gettime with CLOCK_THREAD_CPUTIME_ID for APIs that let you get at the CPU time of a thread (but granted it is the running thread).  \r\n\r\nWe might still use these if we put the logic for getting this information into the hijacking code (since we do cooperate to stop the thread).  \r\n\r\nThe other alternative is that we already in System.Diagnostics.ProcessThread do have logic for getting the CPU time for any thread (but looking at special files that OS exposes), but this is probably significantly slower (but maybe we don\u0027t care because we are only doing it ~1 / sec)  We should see what the  perf tradeoffs are here.   \r\n",
                                           "updatedAt":  "2018-10-24T22:18:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MzM1MzE3Mw==",
                                           "createdAt":  "2019-04-15T17:51:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Moved to future milestone as our .net core 3.0 diagnostics user stories are targeting CPU and memory profiling.  We should bring this back to 3.0 if the fix is small.",
                                           "updatedAt":  "2019-04-15T17:51:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5pHEtw",
                                           "createdAt":  "2023-10-15T18:01:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of our [issue cleanup automation](https://github.com/dotnet/runtime/blob/main/docs/issue-cleanup.md).",
                                           "updatedAt":  "2023-10-15T18:01:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5pIl2A",
                                           "createdAt":  "2023-10-16T07:08:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "\u003e  Any new comment (by anyone, not necessarily the author) will undo this process.\r\n\r\nThis is an important issue, please undo the process.",
                                           "updatedAt":  "2023-10-16T07:08:15Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Distinguish between Blocked and CPU time in EventPipe Traces.  ",
        "labels":  [
                       "EventPipe",
                       "area-Diagnostics-coreclr",
                       "area-Tracing-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/11419",
        "createdAt":  "2018-11-06T16:57:02Z",
        "number":  11419,
        "author":  "k15tfu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-05-04T22:40:49Z",
        "body":  "Hi!\r\n\r\nI played with Profiler API (clr-samples) on Linux and got undefined-reference-to-DebugBreak when tried to compile these samples in Debug. More precisely, `COR_ILMETHOD_SECT_EH_CLAUSE_SMALL::SetTryOffset` (for example) uses `_ASSERTE` which requires the above function if `_DEBUG` is defined.\r\n\r\nI was linking with prebuilt coreclr (`dotnet-runtime-2.1.4-linux-x64.tar.gz`) which was built in Release, obviously.  So is there the right way to build your app in Debug when using official builds?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOHWDDAA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzNzE1OTAwMw==",
                                           "createdAt":  "2018-11-08T21:17:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sywhang",
                                           "body":  "\u003ewhen tried to compile these samples in Debug\r\n\r\nCould you please specify what you mean by this?  Are you trying to compile the ReJITEnterLeaveHooks profiler? If so, you can just build it with Debug mode if you follow the steps in README. For that particular sample you need to clone and build the CoreCLR repo so that it can find the necessary header / other binary files that are used. \r\n\r\nFrom the README in that sample repo:\r\n```\r\n### Environment\r\n\r\n``build.sh`` expects the following environment variables to be setup; default values are shown below.\r\n\r\nbash\r\nexport CORECLR_PATH=~/coreclr # default\r\nexport BuildOS=Linux # Linux(default), MacOSX\r\nexport BuildArch=x64 # x64 (default)\r\nexport BuildType=Debug # Debug(default), Release\r\nexport Output=CorProfiler.so # default\r\n\r\n``CORECLR_PATH`` is the path to your cloned and successfully built CoreCLR repository.\r\n\r\n``BuildOS``, ``BuildArch`` and ``BuildType`` must match how you built the CoreCLR repository, so the header files and other artifacts needed for compilation are found.\r\n```\r\n",
                                           "updatedAt":  "2018-11-08T21:17:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzOTAzMjI2NQ==",
                                           "createdAt":  "2018-11-15T13:01:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "k15tfu",
                                           "body":  "@sywhang I want to build ReJITEnterLeaveHooks profiler in Debug mode and test it using the prebuilt coreclr (for example `dotnet-runtime-2.1.4-linux-x64.tar.gz`).  I don\u0027t want to build my own CoreCLR, especially in Debug mode (because usually this isn\u0027t required), and link with it because in this case I have to distribute them together.",
                                           "updatedAt":  "2018-11-15T13:01:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0MTAzNTMwMg==",
                                           "createdAt":  "2018-11-22T13:45:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "k15tfu",
                                           "body":  "Friendly ping.",
                                           "updatedAt":  "2018-11-22T13:45:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2NzY0ODc0MA==",
                                           "createdAt":  "2019-02-26T22:54:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sywhang",
                                           "body":  "@k15tfu Sorry I didn\u0027t realize that you pinged me on this earlier. Must\u0027ve slipped through my inbox. Feel free to ping me again with an \"@\" if I don\u0027t respond timely as I may miss emails :-) \r\n\r\nI believe for that particular profiler, what it does is that it uses some definitions from files that are inside the ```src\\inc``` directory in the CoreCLR repo (it doesn\u0027t use it to run with it). So you don\u0027t have to build your own CoreCLR (you just need to clone it). You also don\u0027t have to run debug build of the runtime with it. \r\n\r\nAlternatively, you can bring over the missing definitions in this repo from CoreCLR repo so that it becomes more self-contained but that seems like. \r\n\r\nTo summarize, that `CORECLR_PATH` environment variable is there for compilation purpose. You should be able to run it on retail builds without any issue.",
                                           "updatedAt":  "2019-02-26T22:54:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3ODkyMzgzMw==",
                                           "createdAt":  "2019-04-02T09:46:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "k15tfu",
                                           "body":  "\u003e Feel free to ping me again with an \"@\" if I don\u0027t respond timely\r\n\r\nokay deal =)\r\n\r\nYes, I use them. But this issue is about `_ASSERT` in `COR_ILMETHOD_SECT_EH_CLAUSE_SMALL` class, because every time I use one of its method (`SetTryOffset`, for example) in Debug I get undefined references to `GetCurrentProcessId` \u0026  `DebugBreak`.\r\n\r\nWhat we can do with it?  For now I manually commented them out =(",
                                           "updatedAt":  "2019-04-02T09:46:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDc5ODMxOQ==",
                                           "createdAt":  "2019-04-08T11:46:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "k15tfu",
                                           "body":  "@sywhang Friendly ping",
                                           "updatedAt":  "2019-04-08T11:46:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MTA3MDE4MQ==",
                                           "createdAt":  "2019-04-09T01:50:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sywhang",
                                           "body":  "Ah, I see what you mean... Thanks for reporting this! We should be able to just remove that when we compile on Linux. I\u0027ll put up a PR that fixes this shortly. ",
                                           "updatedAt":  "2019-04-09T01:50:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MTA3MzU4Nw==",
                                           "createdAt":  "2019-04-09T02:09:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sywhang",
                                           "body":  "Actually, would you be willing to share what you\u0027re trying to compile? If I try to compile the ReJITEnterLeaveHooks profiler here https://github.com/Microsoft/clr-samples/tree/master/ProfilingAPI/ReJITEnterLeaveHooks under Debug mode, but couldn\u0027t repro your issue. I just wanted to make sure that what I\u0027m going to put up as a PR would actually address your issue. ",
                                           "updatedAt":  "2019-04-09T02:09:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4OTMyOTg5Ng==",
                                           "createdAt":  "2019-05-04T14:04:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "k15tfu",
                                           "body":  "@sywhang Oh, sorry for that =) Didn\u0027t notice your message.\r\n\r\nJust add `-D_DEBUG` in CXX_FLAGS and you will get\r\n```\r\n/tmp/ILRewriter-c8cbd5.o: In function `ILRewriter::ImportIL(unsigned char const*)\u0027:\r\nILRewriter.cpp:(.text._ZN10ILRewriter8ImportILEPKh[_ZN10ILRewriter8ImportILEPKh]+0x12c): undefined reference to `GetCurrentProcessId\u0027\r\nILRewriter.cpp:(.text._ZN10ILRewriter8ImportILEPKh[_ZN10ILRewriter8ImportILEPKh]+0x163): undefined reference to `DebugBreak\u0027\r\nILRewriter.cpp:(.text._ZN10ILRewriter8ImportILEPKh[_ZN10ILRewriter8ImportILEPKh]+0x1c5): undefined reference to `GetCurrentProcessId\u0027\r\nILRewriter.cpp:(.text._ZN10ILRewriter8ImportILEPKh[_ZN10ILRewriter8ImportILEPKh]+0x202): undefined reference to `DebugBreak\u0027\r\nand so on..\r\n```",
                                           "updatedAt":  "2019-05-04T14:04:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5Mjg4MDY0MA==",
                                           "createdAt":  "2019-05-16T01:23:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sywhang",
                                           "body":  "Sorry for the delay @k15tfu - I\u0027d been heads down with some other high-pri work items. I submitted a PR that should address this. Thanks for reporting this issue! ",
                                           "updatedAt":  "2019-05-16T01:23:48Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "corhlpr.h requires internal DebugBreak() when compiling in Debug",
        "labels":  [
                       "question",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/11466",
        "createdAt":  "2018-11-14T00:28:21Z",
        "number":  11466,
        "author":  "hoyosjs",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-07T12:46:09Z",
        "body":  "Update: Exception.ToString() also hits this code path and so we are leaving it in .NET 9 for futher investigation\r\n\r\nThere are a few places in the DBI that rely on `CordbSafeHashTable/CHashTableAndData` such as\r\n\r\n- CordbHashTableEnum\r\n- CordbProcess\r\n- CordbClass\r\n- CordbAppDomain\r\n- CordbModule \r\n- CordbFunction \r\n\r\nThe backing hash table, `CHashTable`, doesn\u0027t grow as items keep getting added. This results in a steep performance degradation as the collections grow larger. Common reports include difficulty loading dumps containing thousands of modules. A possible solution would be to replace `CHashTable` with an `SHash`.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOtBWH9Q==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwODYxOTIzNA==",
                                           "createdAt":  "2020-10-14T19:41:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "Related to #11056",
                                           "updatedAt":  "2020-10-14T19:41:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jxh5o",
                                           "createdAt":  "2023-08-10T21:13:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Internal Microsoft team reported that they see a contention around access to DebuggerMethodInfoTable hashtable in a process that throws a lot of exceptions:\r\n\r\n![image](https://github.com/dotnet/runtime/assets/6668460/07f238ad-cd78-4e6a-8381-4a93f00a8c59)\r\n\r\nDebuggerMethodInfoTable is implemented as CHashTableAndData.",
                                           "updatedAt":  "2023-08-10T21:13:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc60FYf1",
                                           "createdAt":  "2025-07-01T00:53:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "@hoyosjs part of me wants to see if we can pull this off in 10. Probably a tad too late to be aggressive. I suspect this might be able to come to some conclusion in 11. ",
                                           "updatedAt":  "2025-07-01T00:53:36Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Poorly performing hash used in the DBI/EE",
        "labels":  [
                       "enhancement",
                       "tenet-performance",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/11509",
        "createdAt":  "2018-11-19T18:54:42Z",
        "number":  11509,
        "author":  "cshung",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-12-29T00:35:12Z",
        "body":  "If a stack overflow is reached within an heap allocation, our mechanisms will try to allocate more objects when trying to unwind. On Windows this will result in a deadlock.\r\n\r\nEquivalent desktop bug getting tracked by https://devdiv.visualstudio.com/DevDiv/_workitems/edit/559082 (Microsoft access only)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOb47ahQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5vjtqF",
                                           "createdAt":  "2023-12-29T00:01:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of our [issue cleanup automation](https://github.com/dotnet/runtime/blob/main/docs/issue-cleanup.md).",
                                           "updatedAt":  "2023-12-29T00:01:57Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Process deadlock if a stackoverflow happens inside heap allocation on Windows",
        "labels":  [
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/12231",
        "createdAt":  "2019-03-10T23:05:48Z",
        "number":  12231,
        "author":  "PathogenDavid",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCqWIgA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mgexo",
                                            "createdAt":  "2022-08-30T07:21:01Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-12-28T13:20:26Z",
        "body":  "This issue only happens with .NET Core, but it isn\u0027t clear to me whether this issue is most likely the fault of CoreCLR, Visual Studio, or both. If this is better suited for VS Feedback, I can post it there instead.\r\n\r\n-----------\r\n\r\n**Environment**\r\n\r\n* .NET Core SDK 2.2.104\r\n  * Also reproduced with 3.0.100-preview3-010431\r\n* Windows 10 1809 (Build 17763.348 - Latest updates installed)\r\n* Visual Studio 2017 15.9.8\r\n  * Also reproduced with Visual Studio in safe mode.\r\n  * Also reproduced with Visual Studio 2019 16.0.0 RC.1 SVC1)\r\n\r\n------------\r\n\r\n**Summary**\r\n\r\nThe call stack shown in Visual Studio is truncated when the process is stopped by a `SEHException` and native code is debugging, but only under .NET Core. (.NET Framework shows the full stack as expected.)\r\n\r\n-----------------\r\n\r\nTo reproduce, create a new .NET Core console app, populate `Program.cs` as follows:\r\n\r\n```csharp\r\nusing System;\r\nusing System.Runtime.InteropServices;\r\n\r\nnamespace WindowsExceptionNukesStack\r\n{\r\n    public static class Program\r\n    {\r\n        [DllImport(\"Kernel32.dll\")]\r\n        public static extern void RaiseException(int exceptionCode, int exceptionFlags, int numberOfArguments, IntPtr arguments);\r\n\r\n        public static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Before exception\");\r\n            RaiseException(0, 0, 0, IntPtr.Zero);\r\n            Console.WriteLine(\"After exception\");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nLaunch the application from Visual Studio, the Windows exception is translated into a `SEHException` as expected. The call stack ends at the managed to native transition as expected:\r\n\r\n![netcoreapp2 2_non-native](https://user-images.githubusercontent.com/278957/54092745-bccbc080-435d-11e9-80c5-421df2cf4dcb.png)\r\n\r\nCreate/modify `launchSettings.json` to enable native code debugging:\r\n\r\n```json\r\n{\r\n  \"profiles\": {\r\n    \"WindowsExceptionNukesStack\": {\r\n        \"commandName\": \"Project\",\r\n        \"nativeDebugging\": true\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nLaunch again, the call stack will be truncated, showing only a `WaitForSingleObjectEx` call. This remains true if you load symbols from Microsoft\u0027s symbol server:\r\n\r\n![netcoreapp2 2](https://user-images.githubusercontent.com/278957/54092768-1fbd5780-435e-11e9-91ff-447fc1152e11.png)\r\n\r\nModify the project file to use .NET Framework instead:\r\n\r\n```xml\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n  \u003cPropertyGroup\u003e\r\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n    \u003cTargetFramework\u003enet472\u003c/TargetFramework\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\u003c/Project\u003e\r\n```\r\n\r\nLaunch again, the call stack is not truncated and shows both managed and native stack frames as expected:\r\n\r\n![net472](https://user-images.githubusercontent.com/278957/54092801-96f2eb80-435e-11e9-9449-f73d04ed6b0d.png)\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOb4fYoA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3MTM2NDQwNw==",
                                           "createdAt":  "2019-03-10T23:17:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "PathogenDavid",
                                           "body":  "Just in case it\u0027s relevant, when I was debugging this issue I ended up in a zany scenario where it seemed like exceptions were happening recursively after the vectored exception handler was dispatched:\r\n\r\n![05_Stack_netcoreapp2 2_CrazyStack](https://user-images.githubusercontent.com/278957/54092860-62336400-435f-11e9-9c56-5ca6883917ca.png)\r\n\r\nHowever, I am fairly certain I was experiencing a Visual Studio bug here. I was encountering a lot of weird corruption issues whenever I had to debugger interacting with `ntdll.dll` (temporary `int 3` instructions not getting removed, stacks randomly unbalancing, Visual Studio crashing, etc.) I\u0027m planning on reporting a separate issue in developer community for that later.\r\n\r\nIt\u0027s also maybe worth noting that the call stack during a crash looks fine up until something above the call to `RtlDispatchException`. (IE: The above screenshot is .NET Core with mixed debugging enabled.) It\u0027s only after something that comes next that the stack gets nuked.\r\n\r\n---------\r\n\r\nJust in case it\u0027s useful for some reason, here\u0027s a healthy stack with symbols before the `SEHException` actually occurs: (It just adds symbol names for the DirectX stuff though.)\r\n\r\n![03_Stack_netcoreapp2 2_StoppedInRtlpExecuteHandlerForException_DXGI_GsHandlerCheck](https://user-images.githubusercontent.com/278957/54092991-a6733400-4360-11e9-9e02-1380237de033.png)\r\n",
                                           "updatedAt":  "2019-03-10T23:17:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwNDk1MDg3MA==",
                                           "createdAt":  "2019-06-24T10:20:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@tommcdon I can repro this issue, but it seems it has nothing to do with coreclr runtime, but rather with VS stack unwinding. Can you please assign someone to look into this?",
                                           "updatedAt":  "2019-06-24T10:20:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwNTA4NTYwMg==",
                                           "createdAt":  "2019-06-24T16:34:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@PathogenDavid based off of Jan\u0027s analysis this looks like a native stackwalk issue.  Please submit a feedback item (https://docs.microsoft.com/en-us/visualstudio/ide/how-to-report-a-problem-with-visual-studio?view=vs-2019).  Also I\u0027ve opened internal bug 936554 to track this issue for Visual Studio - please mention this in the feedback item.  I was also able to repro the issue, and noticed that I see the same stack truncation behavior on Desktop CLR if I save a dump then open it in VS as \"Mixed\".  We will reactivate this issue if the issue is caused by the runtime.\r\ncc @caslan @gregg-miskelly ",
                                           "updatedAt":  "2019-06-24T16:34:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxMzQ2ODAwNg==",
                                           "createdAt":  "2019-07-20T13:33:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "PathogenDavid",
                                           "body":  "@janvorli @tommcdon Thanks to both of you for investigating this issue!\r\n\r\nI finally got around to posting the issue on developer community, sorry it took so long. I also confirmed the issue still happens in 2019 16.1.6 while I was at it.\r\n\r\nYou can find the issue here: https://developercommunity.visualstudio.com/content/problem/653718/windows-exception-during-mixed-debugging-of-net-co.html",
                                           "updatedAt":  "2019-07-20T13:33:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxNDI2OTk4Mg==",
                                           "createdAt":  "2019-07-23T15:49:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAtCoEg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "PathogenDavid",
                                                                               "createdAt":  "2019-07-23T18:57:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@PathogenDavid thank you for opening the feedback item.  We are working with the appropriate teams to investigate the issue.",
                                           "updatedAt":  "2019-07-23T15:49:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxNDc4NjQ3Nw==",
                                           "createdAt":  "2019-07-24T20:25:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "PathogenDavid",
                                           "body":  "@hoyosjs Thanks again for looking into this issue further. You mentioned on the feedback comments that you had a hunch as to why this was happening. Out of curiosity, any details worth sharing?",
                                           "updatedAt":  "2019-07-24T20:25:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxNDc4OTc1Ng==",
                                           "createdAt":  "2019-07-24T20:35:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "PathogenDavid",
                                           "body":  "@hoyosjs \r\n\r\nAlso you mentioned:\r\n\r\n\u003e investigation seems to show that CoreCLR is not playing nicely in mixed mode debugging\r\n\r\nIs this comment only in respect to stack traces/unmanaged exceptions in mixed mode debugging or do you think there\u0027s more issues than just that? Our code base is mixed C++/C# so we\u0027re basically *always* using mixed-mode debugging. If you think we\u0027re going to encounter more mixed-mode-related issues we might have to backpedal on our .NET Core migration until this fix makes it into a 5.0 preview.",
                                           "updatedAt":  "2019-07-24T20:35:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxNTE3NzE4NA==",
                                           "createdAt":  "2019-07-25T19:13:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAtV6UQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "PathogenDavid",
                                                                               "createdAt":  "2019-07-28T08:20:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "@PathogenDavid there are a few known bugs with interop debugging, even from the framework days. Most of them vanish when you debug mixed mode x64. I haven\u0027t seen that many interop debugging bugs reported on CoreCLR, so I\u0027d expect the maturity here is helping us. During these type of migrations what you might find easier is keep framework, and try to have most components target `netstandard`. Then start porting the components that are really Core vs Framework specific to core at last. This should help flip a switch in a bit of more ease at the end. Also, as things go, do you have the possibility to target release versions but also help us tests the fixes on 5.0 runtimes? It would be nice to have customer validation here 😄 \r\n\r\n\u003e @hoyosjs Thanks again for looking into this issue further. You mentioned on the feedback comments that you had a hunch as to why this was happening. Out of curiosity, any details worth sharing?\r\n\r\nAs for this, I have a hunch that something in the Core implementation of some stub or something alike changed some invariant we used to hold as valid. If this messes with the frame structure somehow, it\u0027s possible that it is really confusing our stack-walking code; it wouldn\u0027t be the first time that we have some address-range logic that fails in some edge cases and we end up stopping to unwind too early/late or not doing it quite right. This hits especially hard when you are using mixed mode debugging, as your app is being debugged using several engines. Visual Studio will have to defer to the appropriate engine to unwind part of the stack. When unwinding the managed frames, our code has to give back information on the frames and some stack pointer information. it sounds to me that we are returning the wrong stack pointer at the point of a transition to native code. Then, when VS tries to keep unwinding the native frames, they choke because the information we give back is not accurate. Some previous cases where I\u0027ve seen such wrong pieces of information being handed back are: self-modifying code (modify thread context and stack layout/memory corruption), special frames (i.e. transition frames we can\u0027t identify in the debugger), corrupting exceptions such as stack overflow (for example, your last screenshot before the SEH shows that there\u0027s a GSCookie_check, which if it fails tells me some stack check failed, and that\u0027s interesting). I\u0027d need to take a closer look here to be able to tell for sure.\r\n",
                                           "updatedAt":  "2019-07-25T19:13:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxNTc0Mjk2Nw==",
                                           "createdAt":  "2019-07-28T08:19:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "PathogenDavid",
                                           "body":  "\u003e During these type of migrations what you might find easier is keep framework, and try to have most components target `netstandard`. Then start porting the components that are really Core vs Framework specific to core at last. This should help flip a switch in a bit of more ease at the end.\r\n\r\nYup, this is actually what we\u0027ve been doing. We\u0027re just approaching the end where there\u0027s very little Framework-specific code left. (Although I\u0027m also slowly accumulating TODOs in .NET Standard libraries for changes to make when we\u0027re able to make them .NET Core.)\r\n\r\n\u003e Also, as things go, do you have the possibility to target release versions but also help us tests the fixes on 5.0 runtimes? It would be nice to have customer validation here 😄\r\n\r\nYup, I meant to mention that earlier. We\u0027re definitely willing to help test things out. Our release date is a quite a ways out, so we can tolerate experimental builds quite a bit until that becomes more imminent.\r\n\r\n\u003e If this messes with the frame structure somehow, it\u0027s possible that it is really confusing our stack-walking code\r\n\r\nAll too familiar with that. Once upon a time I was tasked with writing a program that would `SuspendThread` (on threads in another process, don\u0027t worry) and answer the question \"Is the code currently executing on that thread ours or part of the CRT/Windows?\" (easy) followed by answering the question \"What is the code location that will run next in our code if the stack unwinds naturally?\" (not so easy.) I gained a lot of appreciation for Visual Studio during that project, and a lot of disdain for frame pointer omission.\r\n\r\nThanks for the insight!",
                                           "updatedAt":  "2019-07-28T08:19:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyMjIxNTg0MQ==",
                                           "createdAt":  "2019-08-17T08:12:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "PathogenDavid",
                                           "body":  "Small update: We\u0027re reaching the point where .NET Framework needs to go bye-bye (new feature relying on `AssemblyLoadContext`), so I was poking around a bit to see if I might be able to find suitable workarounds for this issue. I figured I\u0027d share my findings in case it helps anyone experiencing or debugging this issue. (In particular, maybe the fact that WinDbg works implies something about the issue?)\r\n\r\nTL;DR:\r\n\r\n* .NET Core 2.2 app\r\n* [WinDbg](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/debugging-using-windbg-preview) (preview 1.0.1906.12001) shows the full mixed stack (with `!dumpstack`, anyway.)\r\n* [CLR MD](https://github.com/microsoft/clrmd) (NuGet 1.1.37504) is able to show the managed portion stack when attached passively to the app while stopped in Visual Studio.\r\n\r\n# WinDbg\r\n\r\nI\u0027m not super familiar with WinDbg (I\u0027ve only needed to use it pretty rarely), but `!dumpstack` does show both the native and managed frames as expected:\r\n\r\n![image](https://user-images.githubusercontent.com/278957/63208399-12d52a80-c099-11e9-9857-5485e6c91024.png)\r\n\r\nFor some reason the stack window doesn\u0027t show the names of the managed frames, but maybe that\u0027s just because I didn\u0027t load sos until after the exception happened. It\u0027s not the most friendly stack, but it\u0027s at least working better than Visual Studio.\r\n\r\nFor some reason the process seems to be stopped at a different point than Visual Studio did. Not sure if it\u0027s a difference in how WinDbg handles native exceptions or what. (WinDbg is stopping in `RtlRaiseException`, Visual Studio stops later on in `NtWaitForSingleObject`.)\r\n\r\n# CLR MD\r\n\r\nI also decided to try CLR MD since it\u0027s something I\u0027ve been playing with to make some utilities for domain-specific debugging tools, and I\u0027m happy to say it seems to be able to do a passive attach to the process when it\u0027s stopped in Visual Studio and dump the managed stack frames without issue.\r\n\r\n![image](https://user-images.githubusercontent.com/278957/63208495-7875e680-c09a-11e9-98d0-61212be19bc3.png)\r\n\r\nI imagine this is mostly due to the fact that CLR MD is managed-only debugging, but I figured it\u0027s worth mentioning. The main thing I wasn\u0027t sure about was whether it\u0027d be able to get stack info for a thread that was currently executing native code.\r\n\r\nThe CLR MD solution gives me the context that I need when these DirectX exceptions are happening, so I\u0027ll probably lean on that for now.",
                                           "updatedAt":  "2019-08-17T08:12:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNjA4NzcwNg==",
                                           "createdAt":  "2021-04-08T19:20:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "PathogenDavid",
                                           "body":  "@tommcdon This issue has been causing me a lot of pain again recently.\r\n\r\nI\u0027d be interested in trying to investigate the issue myself, but with relatively little familiarity with the runtime\u0027s debugging internals I\u0027m not sure where I\u0027d even start.\r\n\r\nI see the issue has been bouncing around on the .NET 5 and .NET 6 milestones. Has any further investigation been done on the issue? IE: Can I maybe get a copy of someone\u0027s investigation notes and try to pick up where they left off?",
                                           "updatedAt":  "2021-04-08T19:20:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-ctGN",
                                           "createdAt":  "2022-02-22T11:43:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCrWvkw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pr8x",
                                                                               "createdAt":  "2022-02-22T11:47:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PathogenDavid",
                                                                               "createdAt":  "2022-02-22T11:47:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "YohDeadfall",
                                                                               "createdAt":  "2022-02-22T12:26:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tuccio",
                                                                               "createdAt":  "2022-02-22T12:44:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mgexo",
                                                                               "createdAt":  "2022-08-30T07:14:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "MarchingCube",
                                           "body":  "I\u0027ve managed to stumble upon this issue when investigating similar problems in my project. It seems if a native exception happens or even `__debugbreak()` is called then managed frames are completely missing. This is making debugging problems happening in native code fairly difficult.\r\n\r\nAs @PathogenDavid mentioned - this issue is being bounced from one milestone to another - is there any hope that somebody will look into that?\r\n\r\nMy info: running .net 6 on windows and app is x64. pinvoke into a simple function that has `__debugbreak()` in it also truncates managed callstack.\r\n\r\ncc: @janvorli and @tommcdon since it seems this issue got completely stuck after some back and forth. Any hope that this can be resolved, should a contributor look into that?\r\n\r\ncc: @jkoritzinsky since you are working on a source gen based pinvoke - is that behavior better when generated bindings are used? ",
                                           "updatedAt":  "2022-02-22T11:43:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JY1nc",
                                           "createdAt":  "2022-08-30T07:17:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mgexo",
                                           "body":  "We recently migrated from .NET 4.8 to .NET 6  and I am shocked that you cannot see mixed call-stacks any more in Visual Studio debugger. Basically any time you have a simple breakpoint (or exception) in the native code (e.g. our C++ code) you cannot see where it was called from from .NET. \r\n\r\nYou can also not see which .NET Tasks are running. The whole \"managed world\" information is missing in the Visual Studio Debugger.\r\n\r\nI think its just a bug in Visual Studio Debugger and should be fixed asap, especially after reading the comment above where WinDbg and Clear MD seems to be able to retrieve the information. \r\n\r\nMeanwhile, NetCore/Net6 is basically not a usable platform for active development",
                                           "updatedAt":  "2022-08-30T07:45:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JbXyg",
                                           "createdAt":  "2022-08-30T16:43:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gregg-miskelly",
                                           "body":  "@mgexo Your issue sounds different than this one. Can you double check you have .NET Core + native debugging enabled? If you go to Debug-\u003eWindows-\u003eProcesses, and look at the \u0027Debugging\u0027 column, it should show \"Managed (.NET Core, .NET 5+), Native\". If not, the problem is that you don\u0027t have mixed mode enabled. If you do have it on, please open a feedback ticket (Help-\u003eSend Feedback-\u003eReport a problem...)\r\n\r\n![image](https://user-images.githubusercontent.com/11078489/187492831-0ef8cc32-7163-4c65-b789-f17ed99d0d12.png)\r\n",
                                           "updatedAt":  "2022-08-30T16:43:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JbfD7",
                                           "createdAt":  "2022-08-30T17:12:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mgexo",
                                           "body":  "@gregg-miskelly the debugger is configured correctly and the debugger works in all languages i.e. C#, managed C++ (CLI/C++) as well as native C++ in the same session.\r\n![image](https://user-images.githubusercontent.com/3912947/187498533-6c3c4cc9-5dfc-48ca-bd29-16373387d4da.png)\r\n\r\nWhat happens is, that as soon as I step with the debugger from C#-\u003emanaged C++-\u003enative C++ into the native C++ function, the call stack window gets cleared and I suddenly only see the native call stack. \r\n\r\nI can follow then the native function with the debugger and when the return comes back to managed C++, suddenly all the C#/managed/.NET call stacks appear again. \r\n\r\nWhen I simply switch our built from .NET6 to .NET48 the behavior is \"normal\" again i.e. I always see the full stack even in native C++\r\n \r\n (Visual Studio 2022 17.3.1 all 64bit)",
                                           "updatedAt":  "2022-08-30T17:13:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JbhDG",
                                           "createdAt":  "2022-08-30T17:20:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gregg-miskelly",
                                           "body":  "@mgexo Thanks. I was under the impression that this issue required exception dispatch, but maybe I was wrong about that.",
                                           "updatedAt":  "2022-08-30T17:20:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JcACw",
                                           "createdAt":  "2022-08-30T19:29:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "\u003e\u003e What happens is, that as soon as I step with the debugger from C#-\u003emanaged C++-\u003enative C++ into the native C++ function, the call stack window gets cleared and I suddenly only see the native call stack.\r\n\r\n@mgexo would it be possible to share a small, reproducible test case we can use for investigation?  We are not able to reproduce the issue on our end. ",
                                           "updatedAt":  "2022-08-30T19:29:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JcOOi",
                                           "createdAt":  "2022-08-30T20:30:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mgexo",
                                           "body":  "\r\n[WpfToManagedToNativeExample.zip](https://github.com/dotnet/runtime/files/9456444/WpfToManagedToNativeExample.zip)\r\n \u003e \u003e What happens is, that as soon as I step with the debugger from C#-\u003emanaged C++-\u003enative C++ into the native C++ function, the call stack window gets cleared and I suddenly only see the native call stack.\r\n\u003e \r\n\u003e @mgexo would it be possible to share a small, reproducible test case we can use for investigation? We are not able to reproduce the issue on our end.\r\n\r\nWe have created a minimum sample from WPF-\u003emanaged c++ dll-\u003enative c++ dll .\r\nVery strange, but there the issue does not happen i.e. I can see the full stack trace from the native C++ code up to the .NET. So, I cannot help with reproduce for now (I still attached the sample for reference). \r\n\r\nOur \"real\" native dll is huge i.e. million+ of lines of code with the .pdb having a size of ~380 MB and managed C++ .pdb file size is ~15MB. We will try to investigate what the difference could be. Maybe it is related to some setting in the .pdb generation, or is there a size limit? \r\n",
                                           "updatedAt":  "2022-08-30T20:32:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JcPMd",
                                           "createdAt":  "2022-08-30T20:34:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "\u003e We will try to investigate what the difference could be. Maybe it is related to some setting in the .pdb generation, or is there a size limit?\r\n\r\nThanks for investigating and working towards narrowing down the repro!  I\u0027m not aware of any size limitation.  Are you able to reproduce the stack issue consistently on the same methods?  If so there may be something related to the method signature itself that is causing problems.  For example, ensuring that the calling conventions match (stdcall vs. cdecl) and that the argument types are correct.  ",
                                           "updatedAt":  "2022-08-30T20:34:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Jeroq",
                                           "createdAt":  "2022-08-31T10:51:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mgexo",
                                           "body":  "\u003eAre you able to reproduce the stack issue consistently on the same methods?\r\n\r\nYou were right here i.e. some methods work correctly and some methods don\u0027t. So far, the methods that do not work i.e. where the stack-trace disappears are virtual C++ class members (so I guess thiscall), but I was not able to reproduce that in the minimum example. \r\n\r\nMaybe our issue is worth a separate issue then and it may not be related to this one here.",
                                           "updatedAt":  "2022-08-31T10:51:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KeXzF",
                                           "createdAt":  "2022-09-16T14:59:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mgexo",
                                           "body":  "@tommcdon seems like we found out the reason for the problem: \r\n\r\nThe stack trace disappears when the application is built self-contained i.e. when the whole .NET dependency tree is copied to the output folder where the .exe is\r\n\r\nThe same problem can then be reproduced with the example WpfToManagedToNativeExample  from https://github.com/dotnet/runtime/issues/12231#issuecomment-1232135074  \r\n\r\nBest is to simply introduce a Directory.Build.props file with that content (and then close/reopen Visual Studio due to a bug in VS) and then rebuild:\r\n\r\n```\r\n\u003cProject\u003e\r\n   \u003cPropertyGroup\u003e\r\n\t\t\u003cTargetFramework\u003enet6.0-windows\u003c/TargetFramework\u003e\r\n\r\n\t\t\u003cRuntimeIdentifiers\u003ewin10-x64\u003c/RuntimeIdentifiers\u003e\r\n\t\t\u003cRuntimeIdentifier\u003ewin10-x64\u003c/RuntimeIdentifier\u003e\r\n\t\u003c/PropertyGroup\u003e\r\n\u003c/Project\u003e\r\n\r\n```\r\nThen, suddenly the stack trace is lost when you debug into the pure native components .\r\n\r\n[WpfToManagedToNativeExample2.zip](https://github.com/dotnet/runtime/files/9585151/WpfToManagedToNativeExample2.zip)\r\n\r\nAttached is a slightly advanced version of the example also with a __debugbreak that happens when you press the button, where the stack trace is then completely empty\r\n\r\n![image](https://user-images.githubusercontent.com/3912947/190669678-db6566d9-f800-4026-a8d9-9021e02f1749.png)\r\n",
                                           "updatedAt":  "2022-09-16T14:59:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5M9jAK",
                                           "createdAt":  "2022-10-25T22:19:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCufpYA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2022-10-25T22:21:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mgexo",
                                                                               "createdAt":  "2022-10-26T06:32:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "gregg-miskelly",
                                           "body":  "@mgexo I am not sure if everyone in this thread is also using app-local .NET Core Runtimes but I found the root cause for the App Local runtime case. If you would like to be informed when a version of Visual Studio with the fix ships, please open a Visual Studio feedback ticket (Help-\u003eSend Feedback-\u003eReport a problem), paste a link to the feedback ticket into this issue, and I can connect it up.",
                                           "updatedAt":  "2022-10-25T22:19:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tOVyb",
                                           "createdAt":  "2023-11-29T18:26:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mgexo",
                                           "body":  "fyi That issue was fixed for a while but seemed to come back in recent VS versions e.g. colleagues with 17.8 have the problem again that the mixed mode call stack is sometimes empty on some PCs of my colleagues ",
                                           "updatedAt":  "2023-11-29T18:26:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5uU2nN",
                                           "createdAt":  "2023-12-11T22:01:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gregg-miskelly",
                                           "body":  "If anyone is still running into problems with this, and can share details of what they are doing, that would be helpful.\r\n\r\nSome important details:\r\n* .NET Runtime install type (Single-file, app local, or using the global shared framework)\r\n* Target processor architecture of your process (x86, amd64)\r\n* Precise .NET Runtime version\r\n* Does the repo issue if you save a full dump at the point of truncation and open the dump?\r\n* Ideally: if it does repro in the dump -- could you share this dump with Microsoft (either open a feedback ticket and attach the dump that way, or you can email it to me -- greggm on the microsoft.com email server)",
                                           "updatedAt":  "2023-12-11T22:01:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vh9ig",
                                           "createdAt":  "2023-12-28T13:20:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "PathogenDavid",
                                           "body":  "My original repro still triggers this issue for me. Are you saying it doesn\u0027t for you?\r\n\r\nI realize the repro is slightly contrived, it\u0027s just the simplest repro I was able to come up with at the time. (In the wild it happens with a wide variety of native libraries and only with some of their entry points, so I never quite identified the pattern of what triggers it.)\r\n\r\nFor the sake of clarity: I\u0027ve encountered this countless times over the years while debugging actual mixed C#/C++ applications. It\u0027s gotten to the point where I\u0027ve completely changed my debugging workflow to work around this issue. (I mostly either use `printf` debugging for the native side or have been explicitly using a native-only debugger--both much to my dismay.)\r\n\r\nTo answer your questions:\r\n\r\n* .NET Runtime install type: Global shared framework (I rarely find myself debugging the others)\r\n* Target processor architecture of your process: amd64\r\n* Precise .NET Runtime version: 8.0.100 / 8.0.23.53103 (and basically every version since .NET Core 2.2.104)\r\n* Repro with a dump: I just checked and the issue occurs with a dump created using the original repro. I\u0027ll email you this dump to you in a moment.\r\n\r\nI\u0027ll try to remember to collect a dump next time I encounter this situation again in the wild.",
                                           "updatedAt":  "2023-12-28T13:20:25Z"
                                       }
                                   ],
                         "totalCount":  25
                     },
        "title":  "Windows exception during mixed debugging truncates stack",
        "labels":  [
                       "bug",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/12431",
        "createdAt":  "2019-04-05T12:39:46Z",
        "number":  12431,
        "author":  "loop-evgeny",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCJcyow==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jkoritzinsky",
                                            "createdAt":  "2019-04-05T16:35:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fandrei",
                                            "createdAt":  "2021-04-20T03:38:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MarkPflug",
                                            "createdAt":  "2022-01-11T19:09:08Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2025-07-07T12:46:00Z",
        "body":  "I have a .NET Core process that starts another .NET Core process. I want to debug the child process with Visual Studio. I control the code for both processes, but still cannot do this!\r\n\r\nStarting the parent process under the debugger is useless. Calling `System.Diagnostics.Debugger.Launch()` in the child process is useless, because that forces attaching a native debugger, not managed. Even if I check  \"Manually choose debugging engines\" in the JIT debug dialog I cannot uncheck \"Native\", so I\u0027m forced to use mixed-mode debugging. The child process then gets stuck on the `Debugger.Launch()` line and I cannot continue it.\r\n\r\nDebugger.Break() does nothing if a debugger is not already attached.\r\n\r\nDebug.Fail() and Debug.Assert(false) just crash the child process.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOiyT-rg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDM2NjQwMA==",
                                           "createdAt":  "2019-04-05T17:54:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAmflhQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "loop-evgeny",
                                                                               "createdAt":  "2019-04-08T12:03:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "@dotnet/dotnet-diag in case other team members have other ideas.\r\n\r\nAs far as I know, this is a limitation on Visual Studio more than anything. For the scenarios that I\u0027ve come across where I needed this, I ended up using the [Child Process Debugging Extension](https://marketplace.visualstudio.com/items?itemName=vsdbgplat.MicrosoftChildProcessDebuggingPowerTool) and had a relatively good experience. As you said, mixed mode was necessary.\r\n\r\nMaybe @gregg-miskelly has some input here as well 😄 If you try that extension and have no luck loop back and I\u0027ll investigate some more possible suggestions.",
                                           "updatedAt":  "2019-04-05T17:54:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDM2ODIzOA==",
                                           "createdAt":  "2019-04-05T17:59:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gregg-miskelly",
                                           "body":  "The .NET debugging APIs don\u0027t provide a notification for child processes launches, so as @hoyosjs mentioned, currently the Child Process extension is the only good option. That should work with .NET Core on Windows.",
                                           "updatedAt":  "2019-04-05T17:59:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDgwMzU1Nw==",
                                           "createdAt":  "2019-04-08T12:04:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "loop-evgeny",
                                           "body":  "Thanks a lot, @hoyosjs, that extension works! It would still be nice to fix the problem with `Debugger.Launch`, of course.",
                                           "updatedAt":  "2019-04-08T12:04:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDg2ODczMg==",
                                           "createdAt":  "2019-04-08T14:59:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAmgguA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "loop-evgeny",
                                                                               "createdAt":  "2019-04-08T15:07:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "sharwell",
                                           "body":  "Here\u0027s another way to do it, by operating directly against Visual Studio APIs: https://github.com/dotnet/roslyn/pull/28519",
                                           "updatedAt":  "2019-04-08T15:00:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDg3MjI4Mw==",
                                           "createdAt":  "2019-04-08T15:08:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "loop-evgeny",
                                           "body":  "That\u0027s useful, thanks! I\u0027d rather not add a reference to the Visual Studio API to my project, so I prefer the extension solution.",
                                           "updatedAt":  "2019-04-08T15:08:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MTAzNTIxMw==",
                                           "createdAt":  "2019-04-08T22:45:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAmjmdA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "loop-evgeny",
                                                                               "createdAt":  "2019-04-09T07:10:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "@loop-evgeny Glad to hear that worked out for you. I\u0027ll take a look as to what can be done about Debugger.Launch when I get some time. I\u0027d like to see what\u0027s preventing you from continuing the process, to see if it\u0027s a potentially weird issue, a bad user experience, or just something that is quirky but has an easy workaround we can document. Thanks for reporting this.",
                                           "updatedAt":  "2019-04-08T22:45:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5NTQ5OTA1MQ==",
                                           "createdAt":  "2020-03-05T23:36:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MarkPflug",
                                           "body":  "I could have used something like this today. An API like `Debugger.Attach(Process p)`, that would attach the current (meaning `Debugger.IsAttached == true`) debugger to the process `p`. In my scenario `p` is process that I just created.",
                                           "updatedAt":  "2020-03-05T23:36:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5NTUxODUxOQ==",
                                           "createdAt":  "2020-03-06T00:44:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "If you happen to control the code of the child process, you can add this loop to the beginning of the process as follow:\r\n\r\n```c#\r\nwhile (!Debugger.IsAttached)\r\n{\r\n}\r\n```",
                                           "updatedAt":  "2020-03-06T00:44:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5NTU1MDY2Mw==",
                                           "createdAt":  "2020-03-06T01:27:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MarkPflug",
                                           "body":  "Wouldn\u0027t it be better to `Debugger.Launch()` instead? That way I don\u0027t melt my CPU waiting for the debugger that may never attach. \r\n\r\nThe whole point though, is that I don\u0027t want to have to manually attach a debugger to the child process that I just created.",
                                           "updatedAt":  "2020-03-06T01:27:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5NTU1MjI5OQ==",
                                           "createdAt":  "2020-03-06T01:34:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "\u003e Wouldn\u0027t it be better to `Debugger.Launch()` instead? That way I don\u0027t melt my CPU waiting for the debugger that may never attach.\r\n\u003e \r\n\u003e The whole point though, is that I don\u0027t want to have to manually attach a debugger to the child process that I just created.\r\n\r\nGot it, the trick is meant for\r\n1. You do want to attach a debugger,\r\n2. You don\u0027t get to control the code that launches your process (e.g. `msbuild`), and\r\n3. You don\u0027t have a console to work with (So you can\u0027t just add a `Console.ReadLine()`) to wait.",
                                           "updatedAt":  "2020-03-06T01:34:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5NTU4NjAxNA==",
                                           "createdAt":  "2020-03-06T03:45:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MarkPflug",
                                           "body":  "Yeah, that\u0027s the scenario I mean. For the scenario you describe, the `Debugger.Launch()` api will trigger a debug attach request in the child process. You can then attach or decline, and the process will resume execution. No loop needed.\r\n\r\nBut, my original API was describing the inverse, where my parent process wants to attach the current debugger to a child process that it just started. That\u0027s the API that is missing.",
                                           "updatedAt":  "2020-03-06T03:45:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5NTg1MDM2Ng==",
                                           "createdAt":  "2020-03-06T16:32:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gregg-miskelly",
                                           "body":  "IMHO, it would be better to have the controls for what process to debug be some setting in the debugger (like what the [Child Process Debugging Extension](https://marketplace.visualstudio.com/items?itemName=vsdbgplat.MicrosoftChildProcessDebuggingPowerTool) does) then to have the app code be in charge of decided what to debug.\r\n\r\nOne tweak to the while loop from above, I would recommend sticking a `Thread.Sleep` call in the body of that loop. For example, add code that checks an environment variable to know if the \u0027pause on startup\u0027 is desired, and if so, enter that loop. If you are using VS, and if your process name is unique, you could then use an exe project to attach to the process fairly easily. Clearly not ideal, but about the best that can be done right now.",
                                           "updatedAt":  "2020-03-06T16:32:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LA3BJ",
                                           "createdAt":  "2024-09-05T17:18:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of our [issue cleanup automation](https://github.com/dotnet/runtime/blob/main/docs/issue-cleanup.md).\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-05T17:18:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LJP6u",
                                           "createdAt":  "2024-09-06T16:53:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Adding a comment to prevent the bot from cleaning up this issue",
                                           "updatedAt":  "2024-09-06T16:53:39Z"
                                       }
                                   ],
                         "totalCount":  14
                     },
        "title":  "Provide a way to attach a managed debugger to this process or a child process",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/12539",
        "createdAt":  "2019-04-20T02:15:13Z",
        "number":  12539,
        "author":  "mjsabby",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOAnRuog==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Maoni0",
                                            "createdAt":  "2019-04-21T00:59:46Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-12-17T19:10:08Z",
        "body":  "Creating an issue based on the discussion in https://github.com/dotnet/coreclr/pull/22866\r\n\r\nThere are currently two profiling modes checked in to .NET Core:\r\n\r\n(1) Full GC Profiling - Expensive but exhaustive\r\n(2) Basic GC Profiling - Very efficient but somewhat lacking for some types of analysis\r\n\r\nThis issue is there to introduce a third mode which is somewhere in between the Full and Basic.\r\n\r\nThe goal of this middle ground mode is to provide everything basic profiling provides and the most important aspect of the full profiling capability which is the ability to track objects after a GC moves them.\r\n\r\nIn fact, coupled with an additional Profiler API (https://github.com/dotnet/coreclr/issues/24155), the Full GC profiling capability can be emulated by the profiler if it is so chooses at the cost of additional complexity on the profiler side.\r\n\r\nSummarily, this mode will enable the `MovedReferences2` profiler callback to be called for compacting garbage collections, but skip `SurvivedReferences2` for non-compatcing garbage collections.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHObtG23g==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4NTA1MDkxOQ==",
                                           "createdAt":  "2019-04-20T02:15:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mjsabby",
                                           "body":  "cc @Maoni0 ",
                                           "updatedAt":  "2019-04-20T02:15:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4Njc0OTE1NA==",
                                           "createdAt":  "2019-04-25T16:42:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@mjsabby are you interested in doing this work for 3.0?\r\ncc @noahfalk @davmason \r\n",
                                           "updatedAt":  "2019-04-25T16:42:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4Njc2OTYyNQ==",
                                           "createdAt":  "2019-04-25T17:40:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAnk67w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2019-04-25T17:42:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mjsabby",
                                           "body":  "@tommcdon yeah, I already did so I’ll close this.",
                                           "updatedAt":  "2019-04-25T17:40:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4Njc3NzQ0Mw==",
                                           "createdAt":  "2019-04-25T18:01:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@mjsabby thanks!",
                                           "updatedAt":  "2019-04-25T18:01:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4Njg3ODY1MQ==",
                                           "createdAt":  "2019-04-25T23:59:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "I\u0027m re-opening this issue until docs are in place.",
                                           "updatedAt":  "2019-04-25T23:59:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwMjc3NTQyNQ==",
                                           "createdAt":  "2019-06-17T17:23:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@mjsabby just a kind reminder to add the appropriate documentation for this feature",
                                           "updatedAt":  "2019-06-17T17:23:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5u0bbe",
                                           "createdAt":  "2023-12-17T18:01:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of our [issue cleanup automation](https://github.com/dotnet/runtime/blob/main/docs/issue-cleanup.md).",
                                           "updatedAt":  "2023-12-17T18:01:37Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "[docs] Medium-weight GC profiling option in Profiler API",
        "labels":  [
                       "documentation",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/12698",
        "createdAt":  "2019-05-14T19:25:13Z",
        "number":  12698,
        "author":  "mrlacey",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC8LM1g==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dotMorten",
                                            "createdAt":  "2019-05-14T20:15:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jrt324",
                                            "createdAt":  "2019-05-16T15:43:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tonyredondo",
                                            "createdAt":  "2019-10-10T10:27:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "afiram",
                                            "createdAt":  "2020-11-28T07:40:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bburgess19",
                                            "createdAt":  "2022-06-23T20:04:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TahirAhmadov",
                                            "createdAt":  "2022-10-05T02:20:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "snechaev",
                                            "createdAt":  "2023-03-20T18:34:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "morganics",
                                            "createdAt":  "2023-03-27T10:21:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fandrei",
                                            "createdAt":  "2024-10-10T15:21:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Unknown6656",
                                            "createdAt":  "2024-10-26T12:32:53Z"
                                        }
                                    ],
                          "totalCount":  10
                      },
        "updatedAt":  "2024-10-10T15:25:36Z",
        "body":  "**Summary**\r\nWhen executing through VisualStudio, having access to local variables can be invaluable for debugging exceptions.\r\nIt would be great if there was a way to also make this information available to runtime exceptions, even if that comes at a trade-off with performance.\r\n\r\n**Detail**\r\nException messages and stack traces are useful but often don\u0027t provide enough information to identify the root cause of an exception.\r\nHaving access to the variables assigned within a method and the variables passed to that method at the time of an exception would help identify the cause of more exceptions and in less time.\r\nIt\u0027s possible to manually track the values of individual variables but doing this for all variables, in all methods, requires writing lots of code and adds noise to the code. The desire behind this proposal is to be able to get this information without having developers write lots of extra code.\r\nI\u0027d be willing to trade some performance for access to this information.\r\n\r\n**What the change may look like**\r\nIdeally, this information would be as a new property (`Locals`) on the `Exception` object and would be a `Dictionary\u003cstring, object\u003e` where the key is the variable name and the value is the variable value.\r\nIf restrictions make this impossible, I\u0027d settle for `Dictionary\u003cstring, string\u003e` where the value is the serialized variable contents.\r\n\r\nI could then run code like this:\r\n\r\n```csharp\r\nprivate bool DoSomething(string name, int rank)\r\n{\r\n    var someValue = 42;\r\n    bool result = false;\r\n\r\n    try\r\n    {\r\n        var otherValue = new System.Text.StringBuilder();\r\n\r\n        for (int i = 0; i \u003c rank; i++)\r\n        {\r\n            // Some other code that throws an error\r\n        }\r\n    }\r\n    catch (Exception exc)\r\n    {\r\n        foreach (var local in exc.Locals)\r\n        {\r\n            Console.WriteLine($\"{local.Key}: {local.Value}\");\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n\r\nDoSomething(\"matt\", 1);\r\n```\r\n\r\nand see console output like:\r\n\r\n```\r\nname: matt\r\nrank: 1\r\nsomeValue: 42\r\nresult: false\r\notherValue: \r\ni: 0\r\n```\r\n\r\n\r\n**Consequences of this change**\r\nMaking this possible will mean removing some performance/garbage collection optimizations that prevent access to the required information.\r\nRather than forcing a drop in performance on all applications, this new functionality should be made available only when enabled during compilation. (via a new switch?)--I imagine such a variation in behavior would be similar to what is done when debugging through VS.\r\nThis would enable enhanced debugging information for those applications willing (and able) to make the trade in performance.\r\nIf the change in behavior was not enabled, the new property would always be null.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOj1_7xA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5MjM5MjcyMw==",
                                           "createdAt":  "2019-05-14T20:15:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotMorten",
                                           "body":  "What if those locals are out of scope or disposed once the exception hits?\r\nIf there\u0027s a perf impact I\u0027d prefer this would be opt in only and possibly only in debug builds.",
                                           "updatedAt":  "2019-05-14T20:15:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5MjQyNzY2Mg==",
                                           "createdAt":  "2019-05-14T22:05:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mrlacey",
                                           "body":  "\u003e What if those locals are out of scope or disposed once the exception hits?\r\n\u003e If there\u0027s a perf impact I\u0027d prefer this would be opt in only and possibly only in debug builds.\r\n\r\nUnder the VS debugger, apparently, there\u0027s extra work that\u0027s done to re-scope variables to the method level to make their values available to the local window. Ideally that\u0027s what I\u0027d aim for but happy to be advised of any restrictions that prevent this by someone who knows the internals and optimizations better if there are reasons this can\u0027t be done. For things like for loop variables where the loop has completed before an exception is thrown, that\u0027s not as valuable.\r\n\r\nDefinitely opt-in only.\r\n\r\nWhy enforce this only in debug builds? There are plenty of places where I\u0027d want this in release builds. It\u0027s \"in the wild\" where data is hard to predict/recreate that this information is especially valuable, and if performance isn\u0027t a priority (or an issue) then why not opt in?\r\n\r\n",
                                           "updatedAt":  "2019-05-14T22:05:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5MjQzMjQ5MQ==",
                                           "createdAt":  "2019-05-14T22:22:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAorD8A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "svick",
                                                                               "createdAt":  "2019-05-15T09:26:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "benaadams",
                                           "body":  "Were an exception is thrown that method\u0027s locals probably usually aren\u0027t greatly exciting; except on the odd occasion, what would be more interesting are the locals further up the stack from other methods that called it e.g. why did the method pass `null` into this method that throws are argument exception because it was passed `null`. \r\n\r\nSo for that having the local\u0027s of the throwing method wouldn\u0027t necessarily help? You\u0027d need a full chained stack dump?",
                                           "updatedAt":  "2019-05-14T22:22:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5MjQzNTc3NQ==",
                                           "createdAt":  "2019-05-14T22:34:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mrlacey",
                                           "body":  "\u003e So for that having the local\u0027s of the throwing method wouldn\u0027t necessarily help? You\u0027d need a full chained stack dump?\r\n\r\nI hadn\u0027t thought about it from this direction.\r\n\r\nHaving the values passed to each method in the call stack would be valuable so you can see how got to the method where the error was caught. \r\nBut yes, as you say, the ability to know more about where the exception was thrown, not just where it was caught would be great too.\r\n",
                                           "updatedAt":  "2019-05-14T22:34:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5MjQzNzUyNg==",
                                           "createdAt":  "2019-05-14T22:41:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "benaadams",
                                           "body":  "Sounds like you more want a way to programmaticallu create a mini-dump file internal to your app (rather than doing it externally) for the call chain?\r\n\r\nWhich should have all the info you are after (if it was built in Debug mode)",
                                           "updatedAt":  "2019-05-14T22:41:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5MjU3NDIxNw==",
                                           "createdAt":  "2019-05-15T09:14:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mattwarren",
                                           "body":  "This *seems* related to the new \u0027variable tracking\u0027 work, see https://github.com/dotnet/coreclr/pull/23373 and the [design doc](https://github.com/dotnet/coreclr/blob/master/Documentation/design-docs/variabletracking.md) for a bit more info. Maybe some of what that doc is proposing would solve some of what you\u0027re asking for",
                                           "updatedAt":  "2019-05-15T09:14:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5MjU5MzM0MQ==",
                                           "createdAt":  "2019-05-15T10:10:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "svick",
                                           "body":  "I wonder if something like this could be built using ClrMD: you would attach it to the current process and then walk the stack frames of the current thread, while inspecting local variables of each frame.\r\n\r\nThough it won\u0027t work today, because ClrMD doesn\u0027t support local variables (https://github.com/Microsoft/clrmd/issues/11). Also, when I tried it, I wasn\u0027t able to attach to the current process, but I could be doing something wrong.",
                                           "updatedAt":  "2019-05-15T10:10:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5Mjg4MDQxMg==",
                                           "createdAt":  "2019-05-16T01:22:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sywhang",
                                           "body":  "cc @cshung In case you want to comment about Brian\u0027s work.",
                                           "updatedAt":  "2019-05-16T01:22:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyMjIxODM4Ng==",
                                           "createdAt":  "2019-08-17T08:48:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "PathogenDavid",
                                           "body":  "\u003e Also, when I tried it, I wasn\u0027t able to attach to the current process, but I could be doing something wrong.\r\n\r\nI\u0027ve been able to get it to work with the following:\r\n\r\n```csharp\r\nint processId;\r\nusing (Process self = Process.GetCurrentProcess())\r\n{ processId = self.Id; }\r\n\r\nusing (DataTarget dataTarget = DataTarget.AttachToProcess(processId, 1000, AttachFlag.Passive))\r\n```\r\n\r\nThat being said, [it\u0027s considered a bad idea and not everything is going to work](https://github.com/microsoft/clrmd/issues/245#issuecomment-478180851). (Although personally I was able to walk the stacks of other threads and the heap with seemingly no issue with both .NET Core 3.0 and .NET Framework 4.7.2.)",
                                           "updatedAt":  "2019-08-17T08:48:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNjc3MjY4Nw==",
                                           "createdAt":  "2019-08-30T22:55:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TahirAhmadov",
                                           "body":  "This would be a great idea. All parameters, local variables, and \"this\" class fields should be captured up and down the stack on exception. This behavior should be optional for obvious performance reasons (ie. debug vs release build). Things like closures can be ignored for simplicity sake - obviously it\u0027s a language feature and CLR cannot decompile C# on the fly.",
                                           "updatedAt":  "2019-08-30T22:55:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vpIYF",
                                           "createdAt":  "2023-12-31T23:15:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEShUTA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jonasnordlund",
                                                                               "createdAt":  "2024-04-23T09:35:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "soricinae",
                                                                               "createdAt":  "2024-04-25T04:41:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Leomana8",
                                                                               "createdAt":  "2024-05-07T07:45:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "andrev121",
                                                                               "createdAt":  "2024-06-17T08:47:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "fandrei",
                                                                               "createdAt":  "2024-10-10T15:21:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Unknown6656",
                                                                               "createdAt":  "2024-10-26T12:33:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Unknown6656",
                                                                               "createdAt":  "2024-10-26T12:33:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sbmw",
                                                                               "createdAt":  "2025-04-19T12:14:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ArthurAttout",
                                                                               "createdAt":  "2025-04-23T07:04:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tobii-amo",
                                                                               "createdAt":  "2025-05-18T10:21:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  10
                                                         },
                                           "author":  "darkguy2008",
                                           "body":  "I\u0027m getting this now in a .NET 8 app:\r\n\r\n```Local variables and arguments are not available in \u0027[Exception]\u0027 call stack frames. To obtain these, configure the debugger to stop when the exception is thrown and rerun the scenario.```\r\n\r\nNeedless to say, it\u0027s frustrating because if I enable \"All exceptions\" then the debugging experience is a mess. I don\u0027t know but this behavior wasn\u0027t in .NET 7 or older versions, it just naturally worked. What changed in the debugger now that this is not the default? The debugging experience has decreased lately since Microsoft took ownership of the Omnisharp project...",
                                           "updatedAt":  "2023-12-31T23:15:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PX_vE",
                                           "createdAt":  "2024-10-10T15:25:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fandrei",
                                           "body":  "Also, this problem doesn\u0027t happen when \"Break When Thrown\" is turned on. I wonder what could make this scenarios different? In both cases, it should be the same with regards to variable visibility.",
                                           "updatedAt":  "2024-10-10T15:25:35Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "Proposal: Make local variables available upon exception at runtime",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/13019",
        "createdAt":  "2019-07-02T00:39:13Z",
        "number":  13019,
        "author":  "noahfalk",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC6-53Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ReubenBond",
                                            "createdAt":  "2019-07-02T01:11:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sywhang",
                                            "createdAt":  "2019-07-02T01:25:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "davmason",
                                            "createdAt":  "2019-07-02T01:59:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lmolkova",
                                            "createdAt":  "2019-07-02T03:21:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mjsabby",
                                            "createdAt":  "2019-07-02T05:47:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mattwarren",
                                            "createdAt":  "2019-07-02T10:15:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "stevejgordon",
                                            "createdAt":  "2019-07-02T10:22:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gregkalapos",
                                            "createdAt":  "2019-07-02T10:35:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jborut",
                                            "createdAt":  "2019-07-02T10:37:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "russcam",
                                            "createdAt":  "2019-07-02T10:59:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "eric-b",
                                            "createdAt":  "2019-07-02T11:13:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "chrisnas",
                                            "createdAt":  "2019-07-02T11:42:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lokki",
                                            "createdAt":  "2019-07-02T11:58:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "holthe-tveit",
                                            "createdAt":  "2019-07-02T12:03:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MedAnd",
                                            "createdAt":  "2019-07-02T13:39:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "szehetner",
                                            "createdAt":  "2019-07-02T14:30:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Mpdreamz",
                                            "createdAt":  "2019-07-02T14:44:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "stephenpope",
                                            "createdAt":  "2019-07-02T14:45:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nklsaxo",
                                            "createdAt":  "2019-07-02T17:05:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "shanegrueling",
                                            "createdAt":  "2019-07-02T17:18:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "delia-buhan",
                                            "createdAt":  "2019-07-02T17:26:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "OmerRaviv",
                                            "createdAt":  "2019-07-02T17:47:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Enumix",
                                            "createdAt":  "2019-07-02T21:08:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "veikkoeeva",
                                            "createdAt":  "2019-07-02T21:25:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hoyosjs",
                                            "createdAt":  "2019-07-02T22:08:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NickDarvey",
                                            "createdAt":  "2019-07-02T23:54:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mirbeta",
                                            "createdAt":  "2019-07-03T00:28:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kishanAnem",
                                            "createdAt":  "2019-07-03T02:39:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "EvgeniyZviryaka",
                                            "createdAt":  "2019-07-03T13:39:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tonyredondo",
                                            "createdAt":  "2019-07-03T22:01:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "josalem",
                                            "createdAt":  "2019-07-03T22:53:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "loic-sharma",
                                            "createdAt":  "2019-07-03T23:21:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gjuttla",
                                            "createdAt":  "2019-07-05T08:57:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MarcusKohnert",
                                            "createdAt":  "2019-07-26T18:25:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "moshegutman",
                                            "createdAt":  "2019-08-12T13:21:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "shirhatti",
                                            "createdAt":  "2020-03-05T20:17:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "funkeyfreak",
                                            "createdAt":  "2020-07-10T14:18:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MihaZupan",
                                            "createdAt":  "2020-11-02T13:41:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "discostu105",
                                            "createdAt":  "2021-11-19T16:35:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-09-12T22:17:40Z"
                                        }
                                    ],
                          "totalCount":  40
                      },
        "updatedAt":  "2024-09-12T22:19:13Z",
        "body":  "I\u0027m making this issue as an informal way to flag other issues and discussions that might be relevant to doing tracing, logging, and performance counters in the .Net runtime. This includes technologies such as EventSource, EventPipe, ETW, Lttng, EventCounter, EventListener, DiagnosticsSource, and Activity. This thread is likely to stay closer to the bleeding edge than release notes or docs on docs.microsoft.com, but in exchange it is likely be more informal. If this is something you are interested in, subscribe to this issue to follow along.\r\n\r\nPlease don\u0027t do discussion directly in this issue, just links or short announcements. Thanks!",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOi-mS1g==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0ODYxMDMxNw==",
                                           "createdAt":  "2019-10-31T23:37:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "I recently made a few fixes/minor feature additions for EventPipe and DiagnosticSourceEventSource. With these changes it may now be possible to make a basic distributed tracing instrumentation tool that uses only EventPipe rather than the traditional approach of in-process SDKs or profiler based IL instrumentation. I have only created prototype at this point, it has yet to be proven with a production scale implementation.\r\n\r\nhttps://github.com/dotnet/coreclr/pull/27522 \r\nhttps://github.com/dotnet/corefx/pull/42104   ",
                                           "updatedAt":  "2019-10-31T23:37:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0ODYxMTkwOA==",
                                           "createdAt":  "2019-10-31T23:44:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "We are working to improve our [documentation](https://docs.microsoft.com/en-us/dotnet/core/diagnostics/) on new global tools created in .Net Core 3.0, such as dotnet-counters and dotnet-trace. Feedback on the documentation or the tools is always welcome (though please use https://github.com/dotnet/diagnostics/issues/515 or new issues in the diagnostics repo as needed). Thanks!",
                                           "updatedAt":  "2019-10-31T23:44:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5ODEzNjQ4NQ==",
                                           "createdAt":  "2020-03-12T11:26:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA-Aqxw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ReubenBond",
                                                                               "createdAt":  "2020-03-12T19:49:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "joacar",
                                                                               "createdAt":  "2020-03-12T22:31:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "@tarekgh has been hard at work planning some improvements to the Activity APIs for .NET 5. These APIs make it easier for anyone to add Activities to their distributed traces and improve the OpenTelemetry integration story. Check out #31373 and let us know what you think in the comments there. Thanks!",
                                           "updatedAt":  "2020-03-12T11:26:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6L6ZLW",
                                           "createdAt":  "2024-09-12T22:19:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "@noahfalk any updates to share here?",
                                           "updatedAt":  "2024-09-12T22:19:01Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Tracing and Counters Interest Group - Announcements",
        "labels":  [
                       "question",
                       "design-discussion",
                       "area-Diagnostics-coreclr",
                       "area-Tracing-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/114188",
        "createdAt":  "2019-07-10T23:54:50Z",
        "number":  114188,
        "author":  "tmat",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-07T12:45:50Z",
        "body":  "Need to investigate where exactly it fails - likely in Core CLR. \r\n\r\nTried to add a static field or a method.\r\nAdding a nested type works.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOrP8Cdw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3NzQwMzMxNTI=",
                                           "createdAt":  "2021-05-26T18:32:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "FYI @mikem8361 as this may be a runtime issue",
                                           "updatedAt":  "2021-05-26T18:32:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3NzQwMzMxNjE=",
                                           "createdAt":  "2021-06-05T17:23:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikem8361",
                                           "body":  "Can you outline a simple repo?  I\u0027ve tried adding a static and non-static function to an interface in a dotnet-watch test app I have and I can\u0027t repo any problems.",
                                           "updatedAt":  "2021-06-05T17:23:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3NzQwMzMxNjM=",
                                           "createdAt":  "2021-06-08T16:57:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikem8361",
                                           "body":  "Actually my repro was messed up, but now I get a rude edit from Roslyn under dotnet watch when I add a function to an existing interface.",
                                           "updatedAt":  "2021-06-08T16:57:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3NzQwMzMxNjY=",
                                           "createdAt":  "2021-06-08T17:46:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikem8361",
                                           "body":  "`Program.cs(82,13): error ENC0023: Adding an abstract \u0027method\u0027 or overriding an inherited \u0027method\u0027 will prevent the debug session from continuing.`",
                                           "updatedAt":  "2021-06-08T17:46:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3NzQwMzMxNzM=",
                                           "createdAt":  "2021-06-08T20:31:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "Yes, we currently report rude edit. I\u0027ll create a private Roslyn build that allows it.",
                                           "updatedAt":  "2021-06-08T20:31:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6lWGMa",
                                           "createdAt":  "2021-07-31T17:11:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikem8361",
                                           "body":  "@tmat can you point me at another (recent) Roslyn build with this enabled? Thanks.",
                                           "updatedAt":  "2021-07-31T17:11:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6s_wJ3",
                                           "createdAt":  "2025-05-22T19:52:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-05-22T19:52:21Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "DIM EnC: Adding a non-virtual member to an interface fails at runtime",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/13191",
        "createdAt":  "2019-08-01T13:03:05Z",
        "number":  13191,
        "author":  "damageboy",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBkxX6Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "adamsitnik",
                                            "createdAt":  "2019-08-01T14:34:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mattwarren",
                                            "createdAt":  "2019-08-05T09:31:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "omajid",
                                            "createdAt":  "2019-08-07T21:00:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xsoheilalizadeh",
                                            "createdAt":  "2019-11-04T06:58:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tiagonapoli",
                                            "createdAt":  "2021-03-25T03:35:06Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2022-07-07T22:50:41Z",
        "body":  "I\u0027d like to use be able to use `perf` on linux to profile CoreCLR quickly and effectively to dig into JIT\u0027d code with perf annotate (e.g. more than just flamegraphs and top functions)\r\n\r\nperf has various collection controls and knobs not directly available through the PerfCollect script, such as collecting specific HW events etc, for example:\r\n```\r\nexport COMPlus_PerfMapEnabled=1\r\nperf stat -e L1-dcache-loads,L1-dcache-load-misses,L1-dcache-stores ./SomeCoreCLRExecutable\r\n```\r\n\r\nI can get a nice report like this:\r\n```\r\n Performance counter stats for \u0027./SomeCoreCLRExecutable\u0027:\r\n\r\n       754,522,181      L1-dcache-loads\r\n         1,727,116      L1-dcache-load-misses     #    0.23% of all L1-dcache hits\r\n       439,282,834      L1-dcache-stores\r\n\r\n       0.658335100 seconds time elapsed\r\n\r\n       0.626475000 seconds user\r\n       0.023790000 seconds sys\r\n```\r\n\r\nBut if I try to collect the same sort of information with `perf record` \u0026 display it with `perf annotate` to see where/how this is happenning inside the JIT\u0027d code, I can\u0027t get annotation of the code generated by the JIT, since there is no executable on disk that perf can peep into with `objdump`, so perf complains, often like this, while trying to annotate JIT\u0027d code:\r\n\r\n```\r\nNo output from objdump -M intel --start-address=0x00007f7fd56697e0 --stop-address=0x00007f7fd5669b74 -l -d --no-show-raw  -C \"$1\" 2\u003e/dev/null|grep -v \"$1:\"|expand\r\n```\r\n\r\nIt appears such support could be added by providing an alternative objdump executable that can mimic objdump as far as perf is concerned with a `--objdump` argument.\r\n\r\nIt would be amazing if CoreCLR could come with support of some sort for this, so that we could use the native provided tools to quickly analyze and dive into what\u0027s happening to our code.\r\n\r\nCc:\r\n@brianrob\r\n@janvorli \r\n@adamsitnik ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOIMjmjQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyMzI1MDEzNQ==",
                                           "createdAt":  "2019-08-21T00:49:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@noahfalk @josalem ",
                                           "updatedAt":  "2019-08-21T00:49:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1MDAzNzEzMw==",
                                           "createdAt":  "2019-11-05T21:49:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sdmaclea",
                                           "body":  "~~dotnet/coreclr#26842~~ https://github.com/dotnet/runtime/issues/13462 Implemented the annotation of the generated machine code.  It has not implemented the source code annotation piece.\r\n\r\nIssue dotnet/coreclr#27066 mentions implementing JIT_CODE_DEBUG_INFO.  This would be the preferred mechanism for source code annotation.",
                                           "updatedAt":  "2022-07-07T22:50:41Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[Proposal] Support perf annotate with CoreCLR on Linux ",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/13335",
        "createdAt":  "2019-08-29T10:12:41Z",
        "number":  13335,
        "author":  "raffaeler",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-08T17:40:19Z",
        "body":  "This issue is about debugging a .NET Core app using DbgShim and related ICorDebug interfaces.\r\n\r\nMy scenario starts by setting up a debugging session using DbgShim and implementing the callback for ICorDebugManagedCallback* interfaces. This part works perfectly.\r\n\r\nWhen the UpdateModuleSymbols callback is called (my own assemblies are compiled by embedding pdbs), I am supposed to read the PDB blob from the IStream. I read the chunks in a loop and concatenate them in memory.\r\n\r\nEvery time I read in the loop, the IStream tells me the amount of bytes that are effectively read.\r\nEverything works, and I save the pdb on file to verify its correctness. I also save the pdb created by Roslyn to compare with this one, but the one provided by IStream is \"just\" longer. The exceeding bytes are all nulls, so there is a **long nulls padding added by IStream**.\r\n\r\nWhile this can be probably ignored (I still have to verify), it is annoying because it requires more memory than expected.\r\n\r\nIs this a bug? Is there another way to check the effective size of the stream? (I read the ECMA specs but it looks like not obvious to understand the effective final size of all the contained tables).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOs0B-3g==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNzY1NzU1Ng==",
                                           "createdAt":  "2019-09-03T22:00:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffschwMSFT",
                                           "body":  "cc @tommcdon ",
                                           "updatedAt":  "2019-09-03T22:00:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNzY2NDEwNw==",
                                           "createdAt":  "2019-09-03T22:24:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@mikem8361 @hoyosjs ",
                                           "updatedAt":  "2019-09-03T22:24:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1MDIzODczNA==",
                                           "createdAt":  "2019-11-06T10:05:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "\u003e Is this a bug?\r\n\r\nI can\u0027t say for sure, but it sounds suspicious at a minimum.\r\n\r\n\u003e Is there another way to check the effective size of the stream?\r\n\r\nI would guess that parsing the portable PDB format would offer enough information in the headers to compute the ranges of various regions of the file and deduce the final size, but I am not familiar enough with metadata file format minutia to guarantee there isn\u0027t some bit of trailing data somewhere.\r\n\r\nWe could try to repro this with an assembly from the C# compiler + embedded PDB, but it probably wouldn\u0027t get high priority unless the extra memory usage has a meaningful impact on a good number of .Net developers? We haven\u0027t heard anything similar from other debugger devs. It is always possible they were impacted but the memory use was small enough that it went unnoticed.",
                                           "updatedAt":  "2019-11-06T10:05:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6zQH7e",
                                           "createdAt":  "2025-06-26T06:46:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "raffaeler",
                                           "body":  "Closing this doesn´t sounds good to me\n/cc @tommcdon @noahfalk @jeffschwMSFT ",
                                           "updatedAt":  "2025-06-26T06:46:06Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "IStream obtained through UpdateModuleSymbols callback is longer than expected",
        "labels":  [
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/13539",
        "createdAt":  "2019-10-07T17:19:04Z",
        "number":  13539,
        "author":  "sdmaclea",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOAyTEQg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "josalem",
                                            "createdAt":  "2019-10-07T18:54:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "noahfalk",
                                            "createdAt":  "2019-10-09T05:52:56Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2021-06-14T14:27:10Z",
        "body":  "Current usage of Linux `perf` requires defining the `COMPlus_PerfMapEnabled` before starting the application.\r\n\r\nThere are scenarios were it would be ideal to be able to profile an application instance is performing poorly.\r\n\r\n@brianrob Suggested adding a mechanism to trigger this. Perhaps through the diagnostics port.\r\n\r\n/cc @brianrob @dotnet/dotnet-diag \r\n\r\n\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOM02vyg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2MDcyOTI5MA==",
                                           "createdAt":  "2021-06-14T14:27:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "brianrob",
                                           "body":  "Re-opening per offline conversation with @sdmaclea.  This is still desired functionality.",
                                           "updatedAt":  "2021-06-14T14:27:10Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Enable on demand Linux perf profiling",
        "labels":  [
                       "enhancement",
                       "os-linux",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/1892",
        "createdAt":  "2020-01-17T23:38:36Z",
        "number":  1892,
        "author":  "josalem",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-03-24T14:12:51Z",
        "body":  "As detailed in #1794, when an application is tracing itself there is the potential for a deadlock to occur if the reader tries to take the EventPipe configuration lock while `EventPipe::Disable` (specifically `EventPipe::RunWithCallbackPostponed`) is in progress.\r\n\r\nThis occurs when `EventPipeEventSource` is reading because the Trace Event library uses Regex in its logic and Regex now has a lazily initialized `ConcurrentDictionary` cache that generates events when used.  This causes the static `EventSource` provider for concurrent collections to get created (unless its been instantiated earlier in the process) which will call into native code to create the provider.   This requires the config lock in EventPipe.  If this occurs during `EventPipe::RunWithCallbackPostponed`, you may deadlock because the reader is waiting on the lock, but the writer is holding it and is blocked because the pipe\u0027s buffer is full.\r\n\r\nSee the stacks in #1794 for details.\r\n\r\nA couple potential paths to fixing this:\r\n* break up the logic of `EventPipe::Disable` so that it isn\u0027t holding the config lock for the entire duration.  Rundown and other parts of disable can run for minutes in big applications, so this shouldn\u0027t be holding a global lock like that the entire time.\r\n* find ways to defer the registration of new providers that get registered while `EventPipe::Disable` is in flight.\r\n\r\nThis issue breaks our EventPipe tests, but #1794 added a bypass that needs to be removed once this issue is closed.\r\n\r\nCC - @tommcdon @noahfalk @sywhang ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOJ52P0w==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2NDYwMDE3MA==",
                                           "createdAt":  "2020-07-27T19:44:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@davmason @josalem is there any outstanding 5.0 work for this issue?",
                                           "updatedAt":  "2020-07-27T19:44:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2NDYwNzUxMQ==",
                                           "createdAt":  "2020-07-27T19:59:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "josalem",
                                           "body":  "The bandaid fix applied in #1794 has kept this from popping up on my radar, so I believe this underlying issue is still present.  We could still go and make the changes I alluded to [in my comment on the PR](https://github.com/dotnet/runtime/pull/1794#issuecomment-575421919) in `EventPipeEventSource` to fix the only provided, live reader that I am aware of (note that this would be out of band work in Microsoft/PerfView).  As for fixing the underlying issue, I think we need to find a way to do rundown without holding the `EventPipeConfig` lock, or at least adding a deferral mechanism that does provider creation/removal after a rundown has concluded.",
                                           "updatedAt":  "2020-07-27T19:59:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2NDYzNTE1OA==",
                                           "createdAt":  "2020-07-27T20:58:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@josalem Thanks! To clarify, is this a test issue only and not a product bug? ",
                                           "updatedAt":  "2020-07-27T20:58:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2NDYzNzM5NQ==",
                                           "createdAt":  "2020-07-27T21:03:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davmason",
                                           "body":  "This is a product issue that we added a workaround for in our tests",
                                           "updatedAt":  "2020-07-27T21:03:44Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Deadlock in EventPipe when reader tries to take EventPipe config lock while tracing self",
        "labels":  [
                       "enhancement",
                       "EventPipe",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/2399",
        "createdAt":  "2020-01-30T19:15:39Z",
        "number":  2399,
        "author":  "BrianBohe",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-05-17T20:55:24Z",
        "body":  "It would be great if we can get the virtual stack frame of inline functions.\r\n\r\nGiven the following code:\r\n```\r\nstatic int C(int a)\r\n{\r\n    Console.WriteLine(a);\r\n    Random b = new Random();\r\n    return a \u003c\u003c b.Next();\r\n}\r\n[MethodImpl(MethodImplOptions.AggressiveInlining)]\r\nstatic int B(int a)\r\n{\r\n    //Random b = new Random();\r\n    //return C(b.Next() * a*3);\r\n    return C(a);\r\n}\r\n[MethodImpl(MethodImplOptions.AggressiveInlining)]\r\nstatic int A(int a)\r\n{\r\n    Random b = new Random();\r\n    return B(b.Next() * a+1);\r\n}\r\n\r\nstatic void Main(string[] args)\r\n{\r\n    int res = A(42);\r\n    Console.WriteLine(res);\r\n}\r\n```\r\nIf we put a breaking on the second line of function C, we expect the debugger to show a call stack like \r\n- C(int a)\r\n- B(int a)\r\n- A(int a)\r\n- Main(string[] args)\r\n\r\nbut we would get\r\n![image](https://user-images.githubusercontent.com/9440186/73481902-90dc7380-4351-11ea-8f4f-4736d5e71b6f.png)\r\n\r\nWhat is happening is that B is getting inlined in A and A in Main, and we are not reporting that to the debugger.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOIyIxyQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MDQ1MTE2Ng==",
                                           "createdAt":  "2020-01-30T20:43:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA6YFwA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "BrianBohe",
                                                                               "createdAt":  "2020-01-30T22:18:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "AndyAyersMS",
                                           "body":  "There are quite a few things you will need to change to pull this off.\r\n\r\nOne is knowing which inlines are \"active\" at any given point in the code. Internally, the jit keeps a tree of inlines (largely accurate, but not guaranteed to be perfect) ; each statement in jit IR should point at a node in this tree indicating the method that the statement came from. You can dump this tree from a checked jit via `COMPlus_JitPrintInlinedMethods=1`, eg\r\n```\r\nInlines into 06000001 BenchmarksGame.BinaryTrees_2:Main(System.String[]):int\r\n  [1 IL=0009 TR=000025 06000FEF] [profitable inline] System.Int32:Parse(System.String):int\r\n    [2 IL=0011 TR=000034 0600067F] [aggressive inline attribute] System.String:op_Implicit(System.String):System.ReadOnlySpan`1[Char]\r\n      [3 IL=0014 TR=000055 06000688] [below ALWAYS_INLINE size] System.String:GetRawStringData():byref:this\r\n      [4 IL=0025 TR=000064 06001281] [aggressive inline attribute] System.ReadOnlySpan`1[Char][System.Char]:.ctor(byref,int):this\r\n```\r\nThe statement -\u003e inline tree node mapping is produced during inlining and may get corrupted by later jit phases; only the inliner itself uses that data today. I don\u0027t know how pervasive this corruption is but I assume it is pretty bad. Any time a new statement is created after inlining something needs to figure out the right inline tree node for that statement.\r\n\r\nYou will also lose track of some things. for example a method that returns a constant or that just returns one of its arguments will likely just evaporate and leave no trace in the IR as the contribution of the inlinee was not a statement but just an IR node.\r\n\r\nOnce this IR-\u003einline info has made it to the backend of the jit in good shape,  it needs to be externalized into the debug information somehow. Then you would be able to go from some IP value to the set of frames you\u0027d need to show in the debugger.\r\n\r\nAlong with this the jit would need to track the IL offsets properly in all statements, so that you could tell logically where you were in each inline frame (that is, synthesize the \"Line N\" part). Currently the jit does not do track IL offsets for statements from inlines, and the information likewise may get corrupted by subsequent phases. So corruption fixes would be needed here, along with some difficult cases where it is less obvious what is correct (eg if we CSE a node from two different statements, what inlinee/offset do we put on the CSE?).\r\n\r\nNote for some method B the IL-\u003enative offset mapping for B itself will be quite different than for some inlined instance of B, and each inlined instance of B will have different offset info. \r\n\r\nGetting all that correct and externalized and consumed by the debugger would give you inline function names and line offsets.\r\n\r\nIf you also want to describe locals and args for these frames then you need even more info. The jit does not keep track of args and locals introduced by inlining; they all look like jit temps. So there would have to be some extra bookkeeping in the local var table to map jit temps back to locals/args and to the relevant bit of the inline tree (and likely vice-versa -- from a node in the inline tree you\u0027d want to find the temps that represent that inline\u0027s args and locals), and you\u0027d need to emit debug information for these temps too like you do for the root method variables already.\r\n\r\nAll this data will end up being pretty large so there are complex challenges in finding an efficient way to represent it in the debug info. For a proof of concept you probably should defer this -- it is probably best only to tackle this once you have all the data you need...\r\n\r\nSo, I\u0027d suggest the following outline:\r\n1. Investigate the statement -\u003e inline tree node mapping in the jit. Fix cases where statements don\u0027t have associated tree nodes. Decide how to handle things like CSEs from two different inlinees. Assert at debug emission time that all statements refer to some inline tree node.\r\n2. Create debug records to externalize this info. This would be something like a map from native offset to inline record; each inline record would have a parent record and info needed to describe the method in the debugger (token/scope? not sure what suffices here).\r\n3. (possible demo) fix up some debugger to consult this data and fake up frames and show them. Could demo how this display changes as you step through the method.\r\n4. Update jit to track IL offsets for inlinee introduced statements. Initially, do this in such a way that it does not alter the debug emission. Add checking at end that all IL offsets for a statement are compatible with the associated inline tree node.\r\n5. Externalize native-\u003e il offset for inlinee code, likely referring to the inline records in (2).\r\n6. (possible demo) Update debugger to use this to show line info for the inline frames, perhaps integrate this into the actual stack display and allow clicking on an inline frame to navigate to the right place in the source\r\n7. Update jit local var table to track inline introduced args and locals\r\n8. Update debug emission to emit inline args and locals plus location and live ranges\r\n9. (possible demo) update debugger to display inline args and locals\r\n10. Figure out how to do all of the above in a way that does not require enormous amounts of debug information.\r\n\r\n",
                                           "updatedAt":  "2020-01-30T20:43:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MDQ4ODAxNQ==",
                                           "createdAt":  "2020-01-30T22:17:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BrianBohe",
                                           "body":  "The JIT is giving this information for the debugging\r\n```\r\nstruct boundariesDsc\r\n{\r\n    UNATIVE_OFFSET nativeIP;\r\n    IL_OFFSET      ilOffset;\r\n    unsigned       sourceReason;\r\n} * eeBoundaries; \r\n```\r\non Compiler::eeSetLIinfo and Compiler::SetLIDone, as a way of mapping from IL to IP. The debugger assumes the ILOffsets are of the function being jitted.",
                                           "updatedAt":  "2020-01-30T22:17:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MDUwMDMxNg==",
                                           "createdAt":  "2020-01-30T22:54:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BrianBohe",
                                           "body":  "@AndyAyersMS, I have some questions:\r\n\r\n1) Can every statement map to an IL (or at least one IL)?\r\n\r\n2) I saw the inline context is tracked per statement and that only statements are candidates to get map to an IL. Could it be the case that one statement end up being inside another statement? And if we want to differentiate those two statements, Is it okay to discretize at a statement level? Should we assign to the GenTree* nodes their context?\r\n\r\n3) When Rationalizer::DoPhase happens, we stop seeing statements and continue with a list of GenTree* where some GenTreeILOffsetThe are added. Could this GenTree* nodes change their order?",
                                           "updatedAt":  "2020-01-30T22:54:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MDUwODcyNw==",
                                           "createdAt":  "2020-01-30T23:23:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AndyAyersMS",
                                           "body":  "Some statements don\u0027t map to any IL offset (`m_ILOffsetX` will be `BAD_IL_OFFSET`). The rest should at least have a starting IL offset.\r\n\r\nStatements are always top level, so one can\u0027t be inside another. I do not think we need to track things  below this level.\r\n\r\nWhen statements go away their semantic content is transferred to the GT_IL_OFFSET tree nodes. These new tree nodes should also capture the inline context from the statement.\r\n\r\nNote we only make these GT_IL_OFFSET nodes for statements with valid offsets. In the current system, all statements coming from inlinees will have invalid offsets, so all their statement node info will be lost during rationalize. You may need to work around this if you follow my plan of first preserving the \"what inlinee did I come from\" data before you try and implement the \"what IL offset in the inlinee did I come from\" data.",
                                           "updatedAt":  "2020-01-30T23:23:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MDUyNDAzOQ==",
                                           "createdAt":  "2020-01-31T00:21:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BrianBohe",
                                           "body":  "I think I will follow these steps:\r\n\r\n**On track steps**\r\n1. Add to Statement a InlineFunction * to the function which it came from\r\n2. Add this to the GenTreeILOffset node and pass it to when rationalize happens\r\n3. Propose a communication interface to expose this information to the debugger. A map from native offset to inlined function sounds good to me and we can iterate this if it ends up been much information. If we choose that I think we can report all the native offset -\u003e IL offset as the existing way, asserting they are sorted by native offset increasingly.\r\n4. Dump this information on JITDUMP (this is the minimum baseline to show in the presentation)\r\n5. Fix special cases of statements (like statements without tree nodes, and more if there more cases)\r\n6. Update IL offset for inlinee introduced statements. Add/Update existing asserts on IL considering each inline context.\r\n\r\n**Out of scope** of my internship project are inline function\u0027s var/arg:\r\n7. Update jit local var table to track inline introduced args and locals\r\n8. Update debug emission to emit inline args and locals plus location and live ranges\r\n(possible demo) update debugger to display inline args and locals",
                                           "updatedAt":  "2020-01-31T00:21:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MzA4ODA4MA==",
                                           "createdAt":  "2020-02-06T20:11:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BrianBohe",
                                           "body":  "I made some progress.\r\nUsing the ,cs example above, which has this IL\r\n```\r\nMain\r\nIL to import:\r\nIL_0000  1f 2a             ldc.i4.s     0x2A\r\nIL_0002  28 03 00 00 06    call         0x6000003\r\nIL_0007  28 0b 00 00 0a    call         0xA00000B\r\nIL_000c  2a                ret\r\n\r\nInvoking compiler for the inlinee method example1.Program:A(int):int :\r\nIL to import:\r\nIL_0000  73 0c 00 00 0a    newobj       0xA00000C\r\nIL_0005  6f 0d 00 00 0a    callvirt     0xA00000D\r\nIL_000a  02                ldarg.0\r\nIL_000b  5a                mul\r\nIL_000c  17                ldc.i4.1\r\nIL_000d  58                add\r\nIL_000e  28 02 00 00 06    call         0x6000002\r\nIL_0013  2a                ret\r\n\r\nInvoking compiler for the inlinee method example1.Program:B(int):int :\r\nIL to import:\r\nIL_0000  02                ldarg.0\r\nIL_0001  28 01 00 00 06    call         0x6000001\r\nIL_0006  2a                ret\r\n```\r\n\r\nWe got 5 statements, which are\r\n```\r\n***** BB01\r\nSTMT00003 (IL 0x000...0x013) inlined from example1.Program:A(int):int\r\nN005 ( 17, 16) [000008] -AC-----R---              *  ASG       ref    $180\r\nN004 (  1,  1) [000007] D------N----              +--*  LCL_VAR   ref    V02 tmp1         d:1 $180\r\nN003 ( 17, 16) [000006] --C---------              \\--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $180\r\nN002 (  3, 10) [000005] ------------ arg0 in rcx     \\--*  CNS_INT(h) long   0x7ffe02fc1ba8 token $100\r\n\r\n***** BB01\r\nSTMT00004 (IL   ???...  ???) inlined from example1.Program:A(int):int\r\nN003 ( 15,  8) [000010] --CXG-------              *  CALL      void   System.Random..ctor $VN.Void\r\nN002 (  1,  1) [000009] ------------ this in rcx  \\--*  LCL_VAR   ref    V02 tmp1         u:1 $180\r\n\r\n***** BB01\r\nSTMT00007 (IL 0x00E...  ???) inlined from example1.Program:A(int):int\r\nN009 ( 22, 14) [000024] -ACXG---R---              *  ASG       int    $201\r\nN008 (  1,  1) [000023] D------N----              +--*  LCL_VAR   int    V03 tmp2         d:1 $201\r\nN007 ( 22, 14) [000016] --CXG-------              \\--*  ADD       int    $201\r\nN005 ( 20, 12) [000014] --CXG-------                 +--*  MUL       int    $200\r\nN003 ( 15,  8) [000012] --CXG-------                 |  +--*  CALL      int    System.Random.Next $1c0\r\nN002 (  1,  1) [000011] ------------ this in rcx     |  |  \\--*  LCL_VAR   ref    V02 tmp1         u:1 (last use) $180\r\nN004 (  1,  1) [000013] ------------                 |  \\--*  CNS_INT   int    42 $41\r\nN006 (  1,  1) [000015] ------------                 \\--*  CNS_INT   int    1 $43\r\n\r\n***** BB01\r\nSTMT00001 (IL 0x007...  ???) inlined from example1.Program:Main(System.String[])\r\nN005 ( 29, 13) [000003] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void\r\nN004 ( 15,  7) [000021] --CXG------- arg0 in rcx  \\--*  CALL      int    example1.Program.C $1c4\r\nN003 (  1,  1) [000020] ------------ arg0 in rcx     \\--*  LCL_VAR   int    V03 tmp2         u:1 (last use) $201\r\n\r\n***** BB01\r\nSTMT00002 (IL 0x00C...  ???) inlined from example1.Program:Main(System.String[])\r\nN001 (  0,  0) [000004] ------------              *  RETURN    void   $240\r\n```\r\n\r\nAnd dumping the IPMappingDsc* I get:\r\n```\r\nIP mapping count : 8\r\nIL offs PROLOG : 0x00000000 ( STACK_EMPTY )\r\nIL offs 0x0002 : 0x00000005 ( STACK_EMPTY )\r\nIL offs 0x0000 : 0x00000005 ( STACK_EMPTY ) imported from example1.Program:A(int):int\r\nIL offs 0x0002 : 0x0000001F ( STACK_EMPTY )\r\nIL offs 0x000E : 0x0000001F imported from example1.Program:A(int):int\r\nIL offs 0x0007 : 0x0000002D\r\nIL offs 0x000C : 0x00000039 ( STACK_EMPTY )\r\nIL offs EPILOG : 0x00000039 ( STACK_EMPTY )\r\n```\r\nI have added an extra IPMappingDsc* per each call that made us get that statement. In this example, Main inlined A and then inlined B. The two imported statements of A, has an IPMappingDsc before with the IL offset on Main from where the call has been done.\r\n\r\nWe can\u0027t find statements from B because the call was copied to the expected return value on STMT00001.",
                                           "updatedAt":  "2020-02-06T20:11:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MzEwMDcxOQ==",
                                           "createdAt":  "2020-02-06T20:41:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BrianBohe",
                                           "body":  "I am moving forward with the interface changes needed to have something I could present at the end of my internship and then I will consider the cases in which I could lost debug info (like CSE).",
                                           "updatedAt":  "2020-02-06T20:41:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4OTQ0MzUyOQ==",
                                           "createdAt":  "2020-02-21T00:44:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BrianBohe",
                                           "body":  "I have done some progress. I have opened a [WIP PR](https://github.com/dotnet/runtime/pull/32631) to get reviews.\r\n\r\nThis is the updated list of tasks.\r\n\r\n**Done**\r\n- [x]  Add to Statement a InlineFunction * to the function which it came from.\r\n- [x]  Add this to the GenTreeILOffset node and pass it to when rationalize happens.\r\n- [x]  Update IL offset for inlinee introduced statements. Add/Update existing asserts on IL considering each inline context.\r\n- [x]  Dump this information on JITDUMP (this is the minimum baseline to show in the presentation).\r\n- [x]  Changes on the JIT Interface to store the new information.\r\n\r\n**On track steps**\r\n1. Changes on interfaces to expose this information in order to be consumed.\r\n2. Fix special cases of statements (like statements without tree nodes, and more if there more cases)\r\n\r\n**Out of scope of my internship project are inline function\u0027s var/arg:**\r\n1. Update jit local var table to track inline introduced args and locals\r\n2. Update debug emission to emit inline args and locals plus location and live ranges\r\n(possible demo) update debugger to display inline args and locals",
                                           "updatedAt":  "2020-02-21T00:44:39Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "Get the inline stack on IP level",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/31952",
        "createdAt":  "2020-02-07T23:43:19Z",
        "number":  31952,
        "author":  "preetamshetty1",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCuVVHg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "infraweavers",
                                            "createdAt":  "2023-02-10T12:10:22Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-07-22T14:01:50Z",
        "body":  "[AB#1117227](https://devdiv.visualstudio.com/10e66e43-9645-4201-b128-0fdc3769cc17/_workitems/edit/1117227)\r\nOf this list, things we depend on and would like perf counters for are below. \r\n•\tGC Heap Size\r\n•\tGen 0 GC Rate\r\n•\tGen 1 GC Rate\r\n•\tGen 2 GC Rate\r\n•\t% Time in GC\r\n•\tGen 0 Heap Size\r\n•\tGen 1 Heap Size\r\n•\tGen 2 Heap Size\r\n•\tLOH Heap Size\r\n•\tAllocation Rate\r\n•\tException Rate\r\n•\tMonitor Lock Contention Rate\r\nOther components of .NET Core also publishes counters: ASP.NET Core Microsoft.AspNetCore.Hosting providerRequests per second\r\n•\tTotal Requests Count\r\n•\tCurrent Requests Count\r\n•\tFailed Requests Count\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhbBhdA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MzY2MzgxOA==",
                                           "createdAt":  "2020-02-07T23:48:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "benaadams",
                                           "body":  "Some are already provided by `dotnet-counters`? https://github.com/dotnet/diagnostics/blob/master/documentation/dotnet-counters-instructions.md",
                                           "updatedAt":  "2020-02-07T23:48:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MzY2NTI2NA==",
                                           "createdAt":  "2020-02-07T23:55:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC10-Vg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "infraweavers",
                                                                               "createdAt":  "2023-02-10T12:10:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "We have [`dotnet-counters`](https://github.com/dotnet/diagnostics/blob/master/documentation/dotnet-counters-instructions.md) if you want to just see them. Also there\u0027s `EventListener` with the \"System.Runtime\" provider for in-proc listening. There\u0027s also https://www.nuget.org/packages/Microsoft.Diagnostics.NETCore.Client/ to consume them out of proc. However, notice the versioning of this library - it\u0027s not on a 1.0 release meaning that there could be breaking changes coming up.\r\n@sywhang ",
                                           "updatedAt":  "2020-02-07T23:55:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MzY2NTMwOA==",
                                           "createdAt":  "2020-02-07T23:56:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "Looks like @benaadams beat me to it :)",
                                           "updatedAt":  "2020-02-07T23:56:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MzY5MzE4NA==",
                                           "createdAt":  "2020-02-08T02:27:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC10-Wg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "infraweavers",
                                                                               "createdAt":  "2023-02-10T12:10:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "preetamshetty1",
                                           "body":  "My request here was for windows performance counters which we have had in the framework in the past. I understand that these are from Trace counters that just spit out values. Most services have infra to track and upload windows performance counters at scale. If I understand correctly, the tool about is just pushing trace counters out to a CSV? Custom collectors etc. would be needed to do this on a large scale service.",
                                           "updatedAt":  "2020-02-08T02:27:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4NDE4MDE5Mg==",
                                           "createdAt":  "2020-02-10T15:32:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "preethikurup",
                                           "body":  "Re-opening, since this request came in again.",
                                           "updatedAt":  "2020-02-10T15:32:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4NDMxMDk2NQ==",
                                           "createdAt":  "2020-02-10T19:34:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sywhang",
                                           "body":  "\u003e If I understand correctly, the tool about is just pushing trace counters out to a CSV? Custom collectors etc. would be needed to do this on a large scale service.\r\n\r\n`dotnet-counters` either displays it in real-time on the console or writes it to a JSON/CSV, but you can export the data into any format you\u0027d like using `Microsoft.Diagnostics.NETCore.Client` NuGet package: https://www.nuget.org/packages/Microsoft.Diagnostics.NETCore.Client. \r\n\r\nWhile I\u0027m against the idea of having the runtime write these data into Windows performance counter directly, it\u0027s possible to write a library that reads the counter values from the runtime using the Microsoft.Diagnostics.NETCore.Client library, and exports them into Windows perfmon using the [PerformanceCounter API](https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.performancecounter). \r\n",
                                           "updatedAt":  "2020-02-10T19:34:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyOTQzNzk2OA==",
                                           "createdAt":  "2020-05-15T19:27:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Moving this item to \"Triaged - Future\" because we do not currently plan on exposing .NET Core performance counters though perfmon (https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/perfmon) in .NET 5.  ",
                                           "updatedAt":  "2020-05-15T19:27:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxODcxOTE3MQ==",
                                           "createdAt":  "2020-10-29T12:25:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC10-cQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dekenless",
                                                                               "createdAt":  "2021-03-09T12:21:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "indy-singh",
                                                                               "createdAt":  "2023-02-03T14:45:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "infraweavers",
                                                                               "createdAt":  "2023-02-10T12:11:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "zeronetworks-devops",
                                           "body":  "Would love to get this support, this is used by many people in the industry",
                                           "updatedAt":  "2020-10-29T12:25:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UZgpa",
                                           "createdAt":  "2023-02-03T14:45:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC10-gg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "infraweavers",
                                                                               "createdAt":  "2023-02-10T12:11:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "indy-singh",
                                           "body":  "Is there any chance of this getting done? All of our monitoring relies on perfmon/typeperf. dotnet-counters isn\u0027t really an option for us, as we only deploy the runtime and not the sdk which is needed to install the tool.\r\n\r\nWe tried downloading directly from the [repo](https://github.com/dotnet/diagnostics/releases), and it \"works\". But we feed all of the information from std out into a format that our monitoring software (OMD) understands.\r\n\r\nCheers,\r\nIndy",
                                           "updatedAt":  "2023-02-03T14:45:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UZtSt",
                                           "createdAt":  "2023-02-03T15:26:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "\u003e we only deploy the runtime and not the sdk which is needed to install the tool.\r\n\r\nHello @indy-singh!  Our EXE download option does not have an SDK dependency but does require a runtime install.  Please see the \"direct download\" option on https://learn.microsoft.com/dotnet/core/diagnostics/dotnet-counters.   Would this option work for you?  ",
                                           "updatedAt":  "2023-02-03T15:26:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UaQpp",
                                           "createdAt":  "2023-02-03T17:19:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "indy-singh",
                                           "body":  "Hey @tommcdon!\r\n\r\nWe already tried that and it isn\u0027t a great experience to hook into our existing monitoring seam as we pull info from stdout;\r\n\r\nWe basically execute this script every few seconds to collect information (see attached script).\r\n\r\n\r\n```powershell\r\nparam($strArgAppPool)\r\n\r\n$perfdata = @{};\r\n\r\nforeach($a in \"$($strArgAppPool).blue\",\"$($strArgAppPool).green\",\"$strArgAppPool\") {    \r\n    $perf = @{\r\n        \u0027WorkingSetSize\u0027 = \u00270bytes;;\u0027;\r\n        \u0027Gen0HeapSize\u0027 = \u0027-1bytes;;\u0027;\r\n        \u0027Gen1HeapSize\u0027 = \u0027-1bytes;;\u0027;\r\n        \u0027Gen2HeapSize\u0027 = \u0027-1bytes;;\u0027;\r\n        \u0027LOHSize\u0027 = \u0027-1bytes;;\u0027;\r\n        \u0027InAllHeaps\u0027 = \u0027-1bytes;;\u0027;\r\n        \u0027NumberOfPinnedObjects\u0027 = \u0027-1objects;;\u0027;\r\n        \u0027NumberGen0Collections\u0027 = \u0027-1c;;\u0027;\r\n        \u0027NumberGen1Collections\u0027 = \u0027-1c;;\u0027;\r\n        \u0027NumberGen2Collections\u0027 = \u0027-1c;;\u0027;\r\n        \u0027TimeinGC\u0027 = \u0027-1c;;\u0027;\r\n        \u0027FinalizationSurvivors\u0027 = \u0027-1items;;\u0027;\r\n        \u0027PrivateBytes\u0027 = \u0027-1bytes;;\u0027;\r\n    }   \r\n    $perfdata.Add($a, $perf);\r\n}\r\n\r\n$strQueryAppPools = Get-WmiObject -Query \"SELECT * FROM Win32_Process WHERE Name=\u0027w3wp.exe\u0027 AND CommandLine LIKE \u0027%$strArgAppPool%\u0027\";\r\n\r\n$outputString = \"\"\r\n$statusString = \"\"\r\n\r\nforeach ($oAppPool in $strQueryAppPools) {\r\n    $appPoolName =  $oAppPool.CommandLine -replace \".*w3wp.exe -ap `\"([^`\"]+)`\".*\",\u0027$1\u0027; #`\"\r\n    \r\n    if($perfdata[$appPoolName] -eq $null) {\r\n        continue;\r\n    }\r\n    \r\n    $statusString +=  \"OK: w3wp ($appPoolName PID: $($oAppPool.ProcessId)) \";\r\n    $perfdata[$appPoolName][\u0027WorkingSetSize\u0027] = \"$($oAppPool.WorkingSetSize)bytes;;\";\r\n\r\n    $dotNetQueryJob = Get-WmiObject -Query \"SELECT * FROM Win32_PerfRawData_NETFramework_NETCLRMemory WHERE ProcessId=$($oAppPool.ProcessId)\" -AsJob;\r\n    $perfCounterQueryJob = Get-WmiObject -Query \"SELECT * FROM Win32_PerfRawData_PerfProc_Process WHERE IDProcess=$($oAppPool.ProcessId)\" -AsJob;\r\n\r\n    Wait-Job -Job $dotNetQueryJob,$perfCounterQueryJob -Timeout 3 | Out-Null;\r\n    $dotNetQuery = Receive-Job -Job $dotNetQueryJob;\r\n    $perfCounterQuery = Receive-Job -Job $perfCounterQueryJob;\r\n    Remove-Job -Force -Job $dotNetQueryJob,$perfCounterQueryJob;\r\n\r\n    foreach ($NetMemory in $dotNetQuery) {\r\n        $perfdata[$appPoolName][\u0027Gen0HeapSize\u0027] = \"$($NetMemory.Gen0heapsize)bytes;;\";\r\n        $perfdata[$appPoolName][\u0027Gen1HeapSize\u0027] = \"$($NetMemory.Gen1heapsize)bytes;;\";\r\n        $perfdata[$appPoolName][\u0027Gen2HeapSize\u0027] = \"$($NetMemory.Gen2heapsize)bytes;;\";\r\n        $perfdata[$appPoolName][\u0027LOHSize\u0027] = \"$($NetMemory.LargeObjectHeapsize)bytes;;\";\r\n        $perfdata[$appPoolName][\u0027InAllHeaps\u0027] = \"$($NetMemory.NumberBytesinallHeaps)bytes;;\";\r\n        $perfdata[$appPoolName][\u0027NumberOfPinnedObjects\u0027] = \"$($NetMemory.NumberofPinnedObjects)objects;;\";\r\n        $perfdata[$appPoolName][\u0027NumberGen0Collections\u0027] = \"$($NetMemory.NumberGen0Collections)c;;\";\r\n        $perfdata[$appPoolName][\u0027NumberGen1Collections\u0027] = \"$($NetMemory.NumberGen1Collections)c;;\";\r\n        $perfdata[$appPoolName][\u0027NumberGen2Collections\u0027] = \"$($NetMemory.NumberGen2Collections)c;;\";\r\n        $perfdata[$appPoolName][\u0027TimeinGC\u0027] = \"$($NetMemory.PercentTimeinGC)c;;\";\r\n        $perfdata[$appPoolName][\u0027FinalizationSurvivors\u0027] = \"$($NetMemory.FinalizationSurvivors)items;;\";\r\n    }\r\n    \r\n    foreach($perfCounter in $perfCounterQuery) {\r\n        $perfdata[$appPoolName][\u0027PrivateBytes\u0027] = \"$($perfCounter.PrivateBytes)bytes;;\";\r\n    }\r\n}\r\n\r\nforeach($appPoolName in $perfdata.Keys) {\r\n    foreach($counter in $perfdata[$appPoolName].Keys) {\r\n        $outputString += \"$($appPoolName)_$counter=$($perfdata[$appPoolName][$counter]) \";\r\n    }\r\n}\r\n\r\nWrite-Host \"$statusString|$outputString\"\r\nExit 0;\r\n```\r\n\r\n\r\nThanks,\r\nIndy",
                                           "updatedAt":  "2023-02-03T17:19:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5U-ueK",
                                           "createdAt":  "2023-02-10T12:14:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "infraweavers",
                                           "body":  "Alternatively, is there way of getting the stdout format of the command in a computer-parsable format like JSON or XML? It looks from the flags that you can either: write a JSON/XML file or you can \"see\" the output from stdout. If there was an output option which was easy to work with, then it seems like that could be a reasonable compromise?",
                                           "updatedAt":  "2023-02-10T12:14:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5aSOjE",
                                           "createdAt":  "2023-04-19T13:22:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "indy-singh",
                                           "body":  "Hi,\r\n\r\nIs there any news on this?\r\n\r\n`dotnet-counters` doesn\u0027t work for us at all in this scenario as we can\u0027t easily shell out the data. For now we\u0027ve had to deploy our own exe using https://www.nuget.org/packages/Microsoft.Diagnostics.NETCore.Client/ which isn\u0027t a super great for a collecting diagnostic.\r\n\r\nCheers,\r\nIndy",
                                           "updatedAt":  "2023-04-19T13:22:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FsGF0",
                                           "createdAt":  "2024-07-22T13:12:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JeffBarnard",
                                           "body":  "\u003e Alternatively, is there way of getting the stdout format of the command in a computer-parsable format like JSON or XML? It looks from the flags that you can either: write a JSON/XML file or you can \"see\" the output from stdout. If there was an output option which was easy to work with, then it seems like that could be a reasonable compromise?\r\n\r\nYou can use MetricListener api or OpenTelemetry.NET to export the data into json format.\r\nhttps://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/metrics/extending-the-sdk/README.md#exporter",
                                           "updatedAt":  "2024-07-22T14:01:50Z"
                                       }
                                   ],
                         "totalCount":  14
                     },
        "title":  "Support perfmon for core CLR",
        "labels":  [
                       "question",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/33561",
        "createdAt":  "2020-03-13T16:33:58Z",
        "number":  33561,
        "author":  "janvorli",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-12-04T07:03:58Z",
        "body":  "Currently, suspension for debugger on Unix relies only on GC polling. As such, it cannot suspend threads in many kinds of long running loops even if (most of the) JIT helpers are called in the loop or the loop calls another managed function.\r\nWe need to modify the debugger suspension to use activation injection on Unix similar to what regular runtime suspension e.g. for GC does so that e.g. aborting of long running methods during func eval works.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHObYzuzg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5ODgwOTk1OA==",
                                           "createdAt":  "2020-03-13T16:34:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA-HSNA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hoyosjs",
                                                                               "createdAt":  "2020-03-13T18:45:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2020-03-13T21:55:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "janvorli",
                                           "body":  "cc: @tommcdon, @hoyosjs ",
                                           "updatedAt":  "2020-03-13T16:34:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5M-PZf",
                                           "createdAt":  "2022-10-26T01:53:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "See https://github.com/dotnet/runtime/issues/44939 and https://github.com/dotnet/runtime/issues/5724",
                                           "updatedAt":  "2022-10-26T01:53:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tjO7O",
                                           "createdAt":  "2023-12-04T07:03:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eterekhin",
                                           "body":  "@hoyosjs, Hey! I looked at this issue and tried removing some compilation directives. Looks like this particular scenario from [here](https://github.com/dotnet/runtime/issues/44939) is fixed for Linux and MacOs. But I don\u0027t know what else should be done to allow calling `Thread::InjectActivation` from `Thread::SysStartSuspendForDebug` on Unix. \r\n\r\nCould you please take a look and point out any potential issues?\r\nhttps://github.com/dotnet/runtime/pull/95555/commits/72c7f63a37f7f81721cbabd2c52c85950decf501",
                                           "updatedAt":  "2023-12-04T07:03:57Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Enable thread suspension for debugger using activation injection on Unix",
        "labels":  [
                       "area-Diagnostics-coreclr",
                       "feature-request"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/34964",
        "createdAt":  "2020-04-13T18:02:18Z",
        "number":  34964,
        "author":  "m17kea",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODJRB7g==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jeremy-visionaid",
                                            "createdAt":  "2025-07-31T02:57:42Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-05-22T11:11:30Z",
        "body":  "Initially filed on https://github.com/microsoft/vscode-cpptools/issues/5292 and referred here by @pieandcakes.\r\n\r\n- OS and Version: OSX Remote SSH Connection to Amazon Linux 2 (RHEL7 equivalent)\r\n- VS Code Version: 1.44.0\r\n- Dotnet Runtime: 2.2.8 \r\n- C/C++ Extension Version: 0.27.0\r\n- Swig 4.0.1\r\n- GCC Version: 9.2\r\n- GDB Version: 8.3\r\n- Other extensions you installed (and if the issue persists after disabling them): C#, CMake, CMake Tools, Test Explorer UI, .Net Core Test Explorer\r\n\r\nI am trying to implement mixed-mode debugging in vscode. \r\n\r\n**To Reproduce**\r\nI am running a test with the following command: \r\n`VSTEST_HOST_DEBUG=1 \u0026\u0026\r\ndotnet vstest testdll.dll --Tests:classname.testname --Parallel --logger:trx;LogFileName=output.trx`\r\n\r\nThis spins up three dotnet processes of which i attach to the third with: \r\n```\r\n{\r\n    name: \u0027.NET Core Attach\u0027,\r\n    type: \u0027coreclr\u0027,\r\n    request: \u0027attach\u0027,\r\n    processId: \"${command:pickProcess}\", \r\n    env: {\r\n             \"LD_LIBRARY_PATH\": \"/media/psf/Home/Documents/dev.nosync/Derivitec/symbols-2.2.8;/home/linuxbrew/.linuxbrew/lib/gcc/9/;/media/psf/Home/Documents/dev.nosync/Derivitec/src/build/Debug/Derivitec/;/media/psf/Home/Documents/dev.nosync/Derivitec/src/build/Debug/Derivitec.Wrap/;$LD_LIBRARY_PATH\",\r\n            \"LD_DEBUG\":\"all\",\r\n            \"LD_DEBUG_OUTPUT\":\"/tmp/testrunner.log\"\r\n    }\r\n}\r\n```\r\nI successfully reach a break point in C# before the C++ I\u0027m interested in. \r\n\r\nI attach again with: \r\n\r\n```\r\n{\r\n     \"name\": \"(gdb) Attach\",\r\n    \"type\": \"cppdbg\",\r\n    \"request\": \"attach\",\r\n    \"program\": \"/usr/share/dotnet/dotnet\",\r\n    \"processId\": \"${command:pickProcess}\",\r\n    \"additionalSOLibSearchPath\": \"${workspaceFolder}/symbols-2.2.8;/home/linuxbrew/.linuxbrew/lib/gcc/9/;${workspaceFolder}/src/build/Debug/Derivitec/;${workspaceFolder}/src/build/Debug/Derivitec.Wrap/\",\r\n    \"MIMode\": \"gdb\",\r\n    \"miDebuggerPath\": \"/home/linuxbrew/.linuxbrew/bin/gdb\",\r\n    \"setupCommands\": [\r\n         {\r\n             \"description\": \"Enable pretty-printing for gdb\",\r\n              \"text\": \"-enable-pretty-printing\",\r\n              \"ignoreFailures\": true,\r\n         }\r\n    ],\r\n    \"logging\": { \r\n         \"trace\": true, \r\n         \"traceResponse\": true,\r\n         \"engineLogging\": true   \r\n    }\r\n}\r\n```\r\n\r\nThe gdb debugger attaches successfully and my cpp breakpoints become active in the Breakpoints window. I then press play on the C# debugger. In the call stack the gdb debugger the pauses on an exception as follows: \r\n\r\n![Screenshot 2020-04-13 at 17 29 22](https://user-images.githubusercontent.com/25348489/79138390-59a42d00-7dac-11ea-98ef-e79b929fcc43.png)\r\n\r\nAfter continuing the debugger a couple of times it crashes the dotnet process running the test. \r\n\r\nI tried adding the libcoreclr source using `dotnet-symbol --recurse-subdirectories /usr/share/dotnet/shared/Microsoft.NETCore.App/2.2.8/libcoreclr.so -o symbols-2.2.8` and referencing it in both additionalSOLibSearchPath properties but it does not seem to load it.\r\n\r\nGDB logs attached:\r\n\r\n[gdb.log](https://github.com/microsoft/vscode-cpptools/files/4470499/gdb.log)\r\n\r\nAny insights would be greatly appreciated.\r\n\r\nMany thanks in advance!",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOfqHQbA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxMzU2ODIwMQ==",
                                           "createdAt":  "2020-04-14T17:13:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "You mention you\u0027re trying to implement a debugging feature. What specific assistance are you looking for? Do you believe there is a bug in the CoreCLR debugging infrastructure? It\u0027s difficult based on this info to guess at where the issue might be.",
                                           "updatedAt":  "2020-04-14T17:13:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxMzU3MjgyMA==",
                                           "createdAt":  "2020-04-14T17:22:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "m17kea",
                                           "body":  "Hi @danmosemsft, I initially posted this on the vscode-cpptools repo and they directed me here. Based on the log attached it would seem that the CoreCLR is generating SIGTRAP signals from libcoreclr.so when in debug mode that ultimately crash the application and then the debug session. Whether this is a bug or intended behaviour is beyond my current knowledge of the code base I\u0027m afraid.\r\n\r\nI managed to cure the crash by adding the following to the setup commands in the attach config for the debugger:\r\n```\r\n{\r\n    \"ignoreFailures\": true,\r\n    \"text\": \"handle SIGTRAP pass noprint nostop\"\r\n}\r\n```\r\nThis does now hit my cpp breakpoint but seems to cover up a symptom rather than be a cure? I can also hit the cpp breakpoint if I detach the .Net Core debugger completely. Does this shed anymore light? \r\n\r\nI\u0027m happy to commit all of my time to providing you the information you would need, if you can point me in the right direction.",
                                           "updatedAt":  "2020-04-14T17:23:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxMzU3NDE1Ng==",
                                           "createdAt":  "2020-04-14T17:25:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "m17kea",
                                           "body":  "The stack trace in the call stack image is probably of most use if your trying to tie the problem to the code base.",
                                           "updatedAt":  "2020-04-14T17:25:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxMzU3OTYwNg==",
                                           "createdAt":  "2020-04-14T17:36:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@armitagemderivitec thanks that helps. I\u0027ll move this to the place where libcoreclr.so is owned. ",
                                           "updatedAt":  "2020-04-14T17:36:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxMzU4MDIwMw==",
                                           "createdAt":  "2020-04-14T17:37:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@tommcdon (BTW @tommcdon , I am happy to get you or someone else set up to get tagged on area-diagnostics issues - just LMK)",
                                           "updatedAt":  "2020-04-14T17:37:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxMzU5MzUzMQ==",
                                           "createdAt":  "2020-04-14T18:04:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "\u003e @tommcdon (BTW @tommcdon , I am happy to get you or someone else set up to get tagged on area-diagnostics issues - just LMK)\r\n\r\n@danmosemsft Thanks. I\u0027ll let you know if we need to add someone else.",
                                           "updatedAt":  "2020-04-14T18:04:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxMzYwNTIzNw==",
                                           "createdAt":  "2020-04-14T18:26:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "OK, I\u0027ve added you.",
                                           "updatedAt":  "2020-04-14T18:26:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyMjM4MDE4Mg==",
                                           "createdAt":  "2020-05-01T13:06:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "m17kea",
                                           "body":  "Hi all,\r\n\r\nMy work around: \r\n\r\n```\r\n{\r\n    \"ignoreFailures\": true,\r\n    \"text\": \"handle SIGTRAP pass noprint nostop\"\r\n}\r\n```\r\n\r\nNo longer seems to help. Could you shed any more light on the possible fix for this or any other work around I can implement. We have now switched development to VS Code on Linux and this means we can no longer debug the cpp code from c#. \r\n\r\nI\u0027ve tried various things now and even tried other Linux distributions such as Ubuntu and I\u0027m now out of ideas. \r\n\r\nCan I contribute in some way? We\u0027re willing to fork and fix for internal use until something is more generally available but obviously waiting until November for .net 5 is going to impede our business. \r\n\r\nWe\u0027d rather not have to revert back to Windows since our application is running happily on Linux. \r\n\r\nMany thanks \r\n\r\nMike  \r\n\r\n",
                                           "updatedAt":  "2020-05-01T13:06:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyMjQ4MTg2Mw==",
                                           "createdAt":  "2020-05-01T17:27:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Ouch, I hope we can get you working again.\r\ncc @tommcdon ",
                                           "updatedAt":  "2020-05-01T17:27:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyMjUyMDc1OQ==",
                                           "createdAt":  "2020-05-01T19:06:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "m17kea",
                                           "body":  "Thanks @danmosemsft \r\nI managed to debug into the cpp by detaching the .Net Core debugger. I cannot however reattach to go back into the c#.  Any suggestions very welcome. Happy to help in any way I can.",
                                           "updatedAt":  "2020-05-01T19:06:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNDMyNDY1NQ==",
                                           "createdAt":  "2020-05-05T21:48:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "@armitagemderivitec sorry for not responding. I thought I\u0027d sent my answer here and looks like it\u0027s now lost.\r\n\r\nOn windows, mixed mode debugging is a heavy collaboration between the runtime and the native debugger. This was never implemented that way on Linux as the signals and exceptions behave pretty differently from Windows debug events. On Windows, the managed debugger and native debugger collaborate heavily as you can\u0027t attach two debuggers; the attach and triage is done first by the managed debugger and then the native debugger handles the events that the managed runtime has no idea of (like the native breakpoints you\u0027ve set). There\u0027s also some nuances here about the native threads of the runtime.\r\n\r\nOn Linux, the C# debugger doesn\u0027t act like a native debugger, hence you can attach a native debugger after it all started. Indeed the SIGTRAP is something you see is an expected behavior of stopping/stepping under a debugger. The native debugger will intercept these at higher priority and you get what you saw; if you pass them then the c# runtime will see them and handle the step, but then you\u0027ll not have a very stable (there\u0027s plenty more signals and you\u0027ll have to be able to handle all the exception/signal semantics we usually own). \r\n\r\nI don\u0027t know if @mikem8361 or @noahfalk might have any ideas on how to help you improve your inner loop experience on Linux for interop scenarios. @sdmaclea also suggested maybe you can build the runtime with the gdbjit flag, and you\u0027d get a passable c# source mapping experience in GDB (I\u0027ve never tried breakpoints or variable inspection here) at the expense of pretty expensive in-memory tables that need to be built.  ",
                                           "updatedAt":  "2020-05-05T21:48:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzMTA4MDY3MA==",
                                           "createdAt":  "2020-05-19T21:02:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "m17kea",
                                           "body":  "@hoyosjs thanks for your thorough response. I\u0027ll look into the gdbjit flag and see if I can get a workable example. \r\n\r\nAre there any plans to enhance the Linux native debug experience? Is this a rare workflow these days? ",
                                           "updatedAt":  "2020-05-19T21:02:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzMTA4NzE2OA==",
                                           "createdAt":  "2020-05-19T21:16:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "\u003e Are there any plans to enhance the Linux native debug experience? Is this a rare workflow these days?\r\n\r\nIt\u0027s been a long standing conversation to enable interop debugging in Linux, but we are currently pursuing other projects in the production diagnostics space. \r\n\r\nOn Windows having interop debugging was critical as there was a lot of COM usage for projects migrating to core, and the original architecture made this pretty straightforward. The main scenario For Linux - which is pretty relevant and the heavy argument to enable this - is PInvokes. Perhaps it\u0027d be good to get the conversation rolling over. @janvorli, do you have any ideas to help do interop debugging easier for these scenarios?\r\n\r\nfyi @tommcdon ",
                                           "updatedAt":  "2020-05-19T21:16:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzMTEwNjAzOQ==",
                                           "createdAt":  "2020-05-19T21:59:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC9GC2A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2023-06-04T15:10:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "sdmaclea",
                                           "body":  "/cc @AaronRobinsonMSFT @jkoritzinsky for interop debugging experience.\r\n",
                                           "updatedAt":  "2020-05-19T21:59:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzMzEwMzA0Mg==",
                                           "createdAt":  "2020-05-23T17:40:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "m17kea",
                                           "body":  "I\u0027m replicating the above setup on Mac OS. I have everything building and running but I cannot attach a lldb or gdb debugger to dotnet because it is runtime hardened:\r\n```\r\n   0    kernel: (AppleMobileFileIntegrity) macOSTaskPolicy: (com.apple.debugserver) may not get the taskport of (dotnet) (pid: 4859): (dotnet) is hardened, (dotnet) doesn\u0027t have get-task-allow, (com.apple.debugserver) is a declared debugger\r\n```\r\nCurrent dotnet entitlements:\r\n```\r\nExecutable=/usr/local/share/dotnet/dotnet\r\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\r\n\u003c!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"\u003e\r\n\u003cplist version=\"1.0\"\u003e\r\n  \u003cdict\u003e\r\n    \u003ckey\u003ecom.apple.security.cs.allow-jit\u003c/key\u003e\r\n      \u003ctrue/\u003e\r\n    \u003ckey\u003ecom.apple.security.cs.allow-unsigned-executable-memory\u003c/key\u003e\r\n      \u003ctrue/\u003e\r\n    \u003ckey\u003ecom.apple.security.cs.allow-dyld-environment-variables\u003c/key\u003e\r\n      \u003ctrue/\u003e\r\n    \u003ckey\u003ecom.apple.security.cs.disable-library-validation\u003c/key\u003e\r\n      \u003ctrue/\u003e\r\n  \u003c/dict\u003e\r\n\u003c/plist\u003e\r\n```\r\nHow do I safely bypass the security without disabling SIP entirely. Is there any documentation on this anywhere? Is it just a case of re-signing dotnet with:\r\n```\r\n\u003ckey\u003ecom.apple.security.get-task-allow\u003c/key\u003e  \r\n    \u003ctrue/\u003e  \r\n```\r\n\r\nAny advice very welcome! \r\n\r\nI\u0027d also like to keep this discussion moving. We are financial risk company serving many brokers and hedge funds and have a significant mixed c#/c++ code base. We\u0027ve successfully migrated all the code and infrastructure to run our application on the Linux Kernel and do not wish to revert just to enable mixed mode debugging. We\u0027d be happy to collaborate on a linux/MacOS mixed mode debugging project. ",
                                           "updatedAt":  "2020-05-23T17:40:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzMzEyMzQzMg==",
                                           "createdAt":  "2020-05-23T19:30:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "m17kea",
                                           "body":  "Re-signing with the additional entitlement `com.apple.security.get-task-allow` seemed to do the trick. I can successfully debug a test in c#, attach the lldb debugger, activate the cpp breakpoints and then detach the .Net Core debugger. However although the program states that it\u0027s running the cpp debug breakpoint is never hit and the application appears stalled. Logs attached: \r\n\r\n[lldb.log](https://github.com/dotnet/runtime/files/4672348/lldb.log)\r\n\r\nIs anyone able to assist with this? \r\n\r\nI\u0027m forced to use clang/lldb over gcc/gdb on MacOS currently because of an outstanding Vcpkg issue:\r\n\r\nhttps://github.com/microsoft/vcpkg/issues/9344",
                                           "updatedAt":  "2020-05-23T19:30:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzMzE0MjU3MQ==",
                                           "createdAt":  "2020-05-23T21:25:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sdmaclea",
                                           "body":  "\u003e the cpp debug breakpoint is never hit\r\n\r\nI think that is a side affect to the `handle SIGTRAP pass noprint nostop` or its equivalent in `lldb`\r\n\r\nYou could add a breakpoint in C# before the failing SWIG call.\r\nRun the code, wait for it to break in C#.\r\nWhile code is at C# break.\r\nStop the code in lldb w/ `^C`? (optional?)\r\nSet the breakpoint in `lldb`\r\nDisable the `handle SIGTRAP pass noprint nostop` in lldb.\r\nRemove/Disable all C# breakpoints \r\nHit go in the C# debugger.\r\nHit go in lldb\r\n\r\n\u003e We\u0027d be happy to collaborate on a linux/MacOS mixed mode debugging project.\r\n\r\nIt is something on our backlog. It is definitely too late for 5.0 release, but might be something we could consider fully supporting for the 6.0 release (2021).\r\n\r\n\u003e Is anyone able to assist with this? \r\n\r\nYou could also try debugging a coredump.  See https://github.com/dotnet/diagnostics/blob/master/documentation/debugging-coredump.md\r\n\r\nLinux experience is slightly better than Mac as we don\u0027t yet have Mach-O support in all our tools.\r\n\r\nIf your code gets lost, you could generate a core dump and look at  the call stacks in lldb, lldb w/ SOS debugger, or dotnet-dump analyze.",
                                           "updatedAt":  "2020-05-23T21:25:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyOTg3MDE0MQ==",
                                           "createdAt":  "2020-11-18T18:26:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "m17kea",
                                           "body":  "Just so I can set expectations internally, is debugging from c# to cpp potentially going to be available in .net 6? Our preference would be for Linux but Mac OS would be really useful also. We are happy to be guinea pigs in this effort and help wherever we can. ",
                                           "updatedAt":  "2020-11-18T18:26:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyOTk5NDU2OA==",
                                           "createdAt":  "2020-11-18T22:22:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sdmaclea",
                                           "body":  "Native mixed debugging is a major feature development effort.  While I would love to see full support here, I won\u0027t get time to consider working on this in the .NET 6 time frame.  We do not get a lot of requests for this, so it may take a while for it to be prioritized.\r\n\r\nWe have been working on cross platform debugging support in VS. I am not sure if we support the full set of features you need. \r\n\r\n/cc @clguiman is there a good public summary of the VS cross platform debugging support currently/planned released.",
                                           "updatedAt":  "2020-11-18T22:22:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMDAwNjg5Mg==",
                                           "createdAt":  "2020-11-18T22:49:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "clguiman",
                                           "body":  "Currently Visual Studio supports the following two scenarios:\r\n1. Attaching to a Linux debugger that\u0027s debugging a native Linux core dump:https://devblogs.microsoft.com/cppblog/debug-linux-core-dumps-in-visual-studio/\r\n2. Debugging (on Windows) a managed core dump: https://devblogs.microsoft.com/visualstudio/linux-managed-memory-dump-debugging/\r\n\r\nMixed debugging is not a high priority right now and I don\u0027t have a timeframe on when that\u0027s going to be supported, but the priority will definitely increase if there\u0027s a feature request with lots of votes on the[ VS Developer Community website](https://developercommunity.visualstudio.com/).\r\n",
                                           "updatedAt":  "2020-11-18T22:49:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2OTI4NzE2Mw==",
                                           "createdAt":  "2021-06-28T02:23:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "emmenlau",
                                           "body":  "This would be quite helpful to have!",
                                           "updatedAt":  "2021-06-28T02:23:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IzTij",
                                           "createdAt":  "2022-08-20T21:11:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "m17kea",
                                           "body":  "Hi all, just wondering if this has made it into the backlog to be worked upon yet? ",
                                           "updatedAt":  "2022-08-20T21:11:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5V0djr",
                                           "createdAt":  "2023-02-22T10:55:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rodrigo455",
                                           "body":  "vsdbg handles .pdb files for debug... and it should support C/C++ debug no?\r\nif you convert codeview/dwarf debug information to a .pdb file and somehow load that file into vsdbg, maybe it would be able to step into your C++ code?\r\nany easy way to do that in linux?",
                                           "updatedAt":  "2023-02-22T10:55:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5XPQN2",
                                           "createdAt":  "2023-03-10T10:45:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEa3WLg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "emmenlau",
                                                                               "createdAt":  "2025-04-08T10:04:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CraigHutchinson",
                                                                               "createdAt":  "2025-06-18T11:00:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jeremy-visionaid",
                                                                               "createdAt":  "2025-07-17T00:40:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "johndaintree",
                                           "body":  "Mixed mode debugging on non-Windows platforms is becoming increasingly important to my projects. Is there any sign of happening?",
                                           "updatedAt":  "2023-03-10T10:45:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5XRWTH",
                                           "createdAt":  "2023-03-10T17:55:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOENUQBQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "emmenlau",
                                                                               "createdAt":  "2025-04-08T10:04:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "m17kea",
                                           "body":  "We\u0027re still incredibly keen for this as well ",
                                           "updatedAt":  "2023-03-10T17:55:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5d6WsE",
                                           "createdAt":  "2023-06-04T13:52:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEa3WGQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "emmenlau",
                                                                               "createdAt":  "2024-05-22T11:16:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Colton1skees",
                                                                               "createdAt":  "2024-10-18T17:16:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "UniubiBolan",
                                                                               "createdAt":  "2024-12-12T05:46:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Stefan137",
                                                                               "createdAt":  "2025-03-01T14:21:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "LogicalError",
                                                                               "createdAt":  "2025-03-26T21:34:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CraigHutchinson",
                                                                               "createdAt":  "2025-06-18T11:00:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jeremy-visionaid",
                                                                               "createdAt":  "2025-07-17T00:39:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "Jinjinov",
                                           "body":  "I would also like to have mixed mode debugging on non-Windows platforms",
                                           "updatedAt":  "2023-06-04T13:52:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57Kggp",
                                           "createdAt":  "2024-04-19T11:11:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "m17kea",
                                           "body":  "Hi, is there any update on this? \r\n\r\nAlso, is it available on Arm64 now Microsoft has Windows 11 and VS running on Arm? ",
                                           "updatedAt":  "2024-04-19T11:11:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-odBs",
                                           "createdAt":  "2024-05-22T11:11:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEck6NA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "emmenlau",
                                                                               "createdAt":  "2025-04-08T10:04:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CraigHutchinson",
                                                                               "createdAt":  "2025-06-18T11:01:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jeremy-visionaid",
                                                                               "createdAt":  "2025-07-31T01:11:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "m17kea",
                                           "body":  "Any movement here? ",
                                           "updatedAt":  "2024-05-22T11:11:29Z"
                                       }
                                   ],
                         "totalCount":  28
                     },
        "title":  "Mixed C#/Swig/C++ debugging in vscode",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/36675",
        "createdAt":  "2020-05-19T00:15:34Z",
        "number":  36675,
        "author":  "jkoritzinsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-12T00:21:07Z",
        "body":  "The long-name DAC is not needed at runtime. As part of our contract with WinDBG, we need to upload CoreCLR and the DAC together in a package so they can be indexed by the symbol server. If possible, we should ship them in a separate package (probably one similar to the package for the cross-os DAC in #33528) and not bundle the long-name DAC in the shared framework to reduce shared framework size.\r\n\r\ncc: @hoyosjs",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOw69xwg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzMDUwMDkxNA==",
                                           "createdAt":  "2020-05-19T00:15:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nNotify danmosemsft if you want to be subscribed.",
                                           "updatedAt":  "2020-05-19T00:15:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzMDUwNTI0Ng==",
                                           "createdAt":  "2020-05-19T00:30:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AraHaan",
                                           "body":  "Wait let me guess DAC is Debug Assembly Cache?",
                                           "updatedAt":  "2020-05-19T00:30:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzMDUwNTgyOQ==",
                                           "createdAt":  "2020-05-19T00:33:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "The DAC is the [Debug Access Component](https://github.com/dotnet/runtime/blob/master/docs/design/coreclr/botr/dac-notes.md). It\u0027s the interface between a debugger and the runtime.",
                                           "updatedAt":  "2020-05-19T00:33:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7Dr3HC",
                                           "createdAt":  "2025-09-12T00:21:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of our [issue cleanup automation](https://github.com/dotnet/runtime/blob/main/docs/issue-cleanup.md).\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-12T00:21:06Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Stop shipping the long-name DAC as part of the Windows shared framework",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr",
                       "no-recent-activity",
                       "backlog-cleanup-candidate"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/38018",
        "createdAt":  "2020-06-17T11:01:49Z",
        "number":  38018,
        "author":  "noahfalk",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-04-27T21:25:02Z",
        "body":  "@davidwr and @AntonLapounov were testing the tech empower json scenario and noticed that disabling tiered compilation + rejit on attach gives ~11% better performance than disabling tiered compilation alone. We should:\r\n1. Understand what performance looks like across the 2x2 matrix of TC on/off X rejit-on-attach on/off and hopefully a basic idea of what implementation details account for the difference\r\n2. Consider if there are implementation changes we can/should make to reduce the impact of rejit-on-attach\r\n3. Consider what circumstances we would recommend to customers to disable rejit-on-attach, or in the limit if we should be changing our defaults\r\n4. Determine if we need to add/improve any configuration mechanisms so that customers can easily set the configuration they want.\r\n\r\nRepro steps from @AntonLapounov:\r\n\r\nHere is how to collect performance data for a Windows x64 server:\r\n\r\n`Clone https://github.com/aspnet/Benchmarks`\r\n`cd  Benchmarks\\src\\BenchmarksDriver2`\r\nUse a variation of the following command:\r\n`dotnet run --config trends.benchmarks.yml --scenario json --profile aspnet-perf-win --application.environmentVariables \"COMPlus_TieredCompilation=0\"`\r\nThe command output contains this KPI:\r\n`Requests/sec:         227,660`\r\n\r\nAnd if you disable RejitOnAttach:\r\n`dotnet run --config trends.benchmarks.yml --scenario json --profile aspnet-perf-win --application.environmentVariables \"COMPlus_TieredCompilation=0\" \"COMPlus_ProfApi_RejitOnAttach=0\"`\r\n \r\nyou should see performance increase:\r\n`Requests/sec:         258,082`\r\n\r\nTo collect performance data with PerfView, you may use the following options:\r\n```\r\n--application.collect true\r\n--application.collectArguments \"BufferSizeMB=1024;CircularMB=1024;clrEvents=JITSymbols;kernelEvents=process+thread+ImageLoad+Profile\"\r\n```\r\n\r\nThere is a readme.md file documenting other options.  For instance, you may use “--options.fetch true” to fetch application binaries — it will create an application.*.zip in the current directory.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOJ556WQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NjI4OTkzMw==",
                                           "createdAt":  "2020-06-18T20:30:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidwrighton",
                                           "body":  "I\u0027ve done some further investigation of a possible fix for this issue, see my branch https://github.com/davidwrighton/runtime/tree/r2r_backpatch \r\n\r\nWith that fix I was able to completely fix the problem with a performance of between 1-2%. I\u0027ve been finding that the performance impact of this problem is fairly variable, and upon repeated trials the cost of rejit may not be quite as high as initially identified. With the backpatch feature enabled, the system becomes somewhat less variable in performance.",
                                           "updatedAt":  "2020-06-18T20:30:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1Njg1ODM3OQ==",
                                           "createdAt":  "2020-07-10T19:44:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nNotify danmosemsft if you want to be subscribed.",
                                           "updatedAt":  "2020-07-10T19:44:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2NDU5MjMwNQ==",
                                           "createdAt":  "2020-07-27T19:27:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@davidwrighton @davmason I believe that this issue is not fixed in 5.0, but is also not a default scenario and only reproduces if tiered compilation is disabled. Assuming the r2r_backpatch feature was not back ported to 5.0, I am leaning towards moving this to 6.0.  What are your thoughts on benefits/risk porting r2r_backpatch to 5.0?  ",
                                           "updatedAt":  "2020-07-27T19:27:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2NDY5NzQzMw==",
                                           "createdAt":  "2020-07-27T23:56:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBLm-cg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2020-07-28T02:43:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidwrighton",
                                           "body":  "Its a high risk item to port to 5.0 and enable by default. I would push this change into 6.0, but I believe its still interesting in the long term.",
                                           "updatedAt":  "2020-07-27T23:56:07Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Investigate ReJIT on attach performance when tiered compilation is off",
        "labels":  [
                       "enhancement",
                       "tenet-performance",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/39333",
        "createdAt":  "2020-07-14T23:21:51Z",
        "number":  39333,
        "author":  "willxie-eng",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-12T00:21:05Z",
        "body":  "\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\nThe finalizer queue segment enumeration appears to be not implemented. See here: https://github.com/dotnet/runtime/blob/master/src/coreclr/src/debug/daccess/dacdbiimpl.cpp#L7488, mFQStart/mFQEnd is set to null and never updated.\r\n\r\n\u003c!--\r\n* Please share a clear and concise description of the problem.\r\n* Include minimal steps to reproduce the problem if possible. E.g.: the smallest possible code snippet; or a small repo to clone, with steps to run it.\r\n* What behavior are you seeing, and what behavior would you expect?\r\n  --\u003e\r\n\r\n### Configuration\r\n\r\nThis potentially affects all .NET Framework \u0026 Core (all versions). I tested using .NET 4.8.4180.0 on Windows 19041.329. This would affect both x86 and x64 configuration (not sure about ARM).\r\n\r\n\u003c!--\r\n* Which version of .NET is the code running on?\r\n* What OS and version, and what distro if applicable?\r\n* What is the architecture (x64, x86, ARM, ARM64)?\r\n* Do you know whether it is specific to that configuration?\r\n  --\u003e\r\n\r\n### Regression?\r\n\r\nN/A\r\n\r\n\u003c!--\r\n* Did this work in a previous build or release of .NET Core, or from .NET Framework? If you can try a previous release or build to find out, that can help us narrow down the problem. If you don\u0027t know, that\u0027s OK.\r\n  --\u003e\r\n\r\n### Other information\r\n\r\nCurrent workarounds would be to use CLRMD (via SOS \u0026 DAC) to get finalizer queue address start/end or leveraging ICorProfiler apis for Finalizer callbacks.\r\n\r\n\u003c!--\r\n* Please include any relevant stack traces or error messages. If possible please include text as text rather than images (so it shows up in searches).\r\n* If you have an idea where the problem might lie, let us know that here. Please include any pointers to code, relevant changes, or related issues you know of.\r\n* Do you know of any workarounds?\r\n  --\u003e\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOw69xiA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1ODQ2MDAxOA==",
                                           "createdAt":  "2020-07-14T23:21:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-07-14T23:21:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1ODQ2MTUxMA==",
                                           "createdAt":  "2020-07-14T23:27:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "willxie-eng",
                                           "body":  "area-Diagnostics-coreclr @tommcdon",
                                           "updatedAt":  "2020-07-14T23:27:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1ODQ4NDg5Nw==",
                                           "createdAt":  "2020-07-15T00:56:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nNotify danmosemsft if you want to be subscribed.",
                                           "updatedAt":  "2020-07-15T00:56:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1ODUwNzg3NQ==",
                                           "createdAt":  "2020-07-15T02:26:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "josalem",
                                           "body":  "CC @dotnet/dotnet-diag @mikem8361 ",
                                           "updatedAt":  "2020-07-15T02:26:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MTMwNDgxMg==",
                                           "createdAt":  "2020-07-20T20:04:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@davmason ",
                                           "updatedAt":  "2020-07-20T20:04:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MTMxNDcyMg==",
                                           "createdAt":  "2020-07-20T20:25:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davmason",
                                           "body":  "I looked at this last week with @WilliamXieMSFT, it\u0027s just plain broken and there\u0027s no workaround to make the API work.\r\n\r\nThe options for getting finalizer references are:\r\n- Ask us to fix this API, which wouldn\u0027t happen until .net 6 at the earliest and won\u0027t be backported\r\n- Use the same approach SOS does to scan the finalizer queue, where you call in to the DAC to get the address of the finalizer queue and then manually walk it\r\n- Use ICorProfilerCallback::FinalizeableObjectQueued to get notified of objects as they are put in the finalizer queue\r\n\r\n",
                                           "updatedAt":  "2020-07-20T20:25:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7Dr3GI",
                                           "createdAt":  "2025-09-12T00:21:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of our [issue cleanup automation](https://github.com/dotnet/runtime/blob/main/docs/issue-cleanup.md).\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-12T00:21:04Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "ICorDebugGCReferenceEnum does not enumerate CorGCReferenceType::CorReferenceFinalizer",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr",
                       "no-recent-activity",
                       "backlog-cleanup-candidate"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/39909",
        "createdAt":  "2020-07-24T19:38:26Z",
        "number":  39909,
        "author":  "Symbai",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-04-15T02:37:31Z",
        "body":  "Debugging a process by starting it using ICorDebug fails if its not the correct bitness. The debugger fails to debug which is expected however the debugged process still continues to launch, which is not expected. If the process is started by ICorDebug and ICorDebug is unable to debug the process, then the process should be killed. Or there should be some kind of logic to determine whether the target file is expected to be debug-able or not. I originally reported this on [dnSpy repository](https://github.com/0xd4d/dnSpy/issues/1492) which allows debugging .NET programs but got redirected here by the author saying it\u0027s a .NET runtime issue.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOpxtsJQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MzcwMDg0MA==",
                                           "createdAt":  "2020-07-24T19:38:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-07-24T19:38:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2NTI1MDEwMg==",
                                           "createdAt":  "2020-07-28T20:01:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Thank you for reporting this issue.  I believe this is referring to [CreateProcessForLaunch](https://github.com/dotnet/runtime/blob/6072e4d3a7a2a1493f514cdf4be75a3d56580e84/src/coreclr/src/dlls/dbgshim/dbgshim.h#L13).  The API does not currently check if the launched process matches in bitness.",
                                           "updatedAt":  "2020-07-28T20:01:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6nG2wl",
                                           "createdAt":  "2025-04-15T02:37:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Symbai",
                                           "body":  "Since it\u0027s not fixed I don\u0027t see why it should get closed.",
                                           "updatedAt":  "2025-04-15T02:37:19Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "ICorDebug API shouldn\u0027t start the process if it\u0027s not the correct bitness",
        "labels":  [
                       "area-Diagnostics-coreclr",
                       "feature-request"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/40682",
        "createdAt":  "2020-08-11T21:17:24Z",
        "number":  40682,
        "author":  "davmason",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBNFE0Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tommcdon",
                                            "createdAt":  "2020-08-11T21:18:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hoyosjs",
                                            "createdAt":  "2020-08-11T21:18:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "davidwrighton",
                                            "createdAt":  "2020-08-11T22:51:44Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2022-04-27T21:25:03Z",
        "body":  "Currently EnumerateLoaderHeapMemoryRegions does not include the loader heap regions from collectible assemblies. We should update it to include those.\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKBMI2w==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MjI4NDM0Nw==",
                                           "createdAt":  "2020-08-11T21:17:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-08-11T21:17:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MjMzNjA5MQ==",
                                           "createdAt":  "2020-08-11T22:51:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBNFFkg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2020-08-11T22:54:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidwrighton",
                                           "body":  "In addition, we currently don\u0027t do reporting for the LoaderAllocator managed object in right spots for GC heap dump in the DAC. See usage of `GcReportLoaderAllocator` function.",
                                           "updatedAt":  "2020-08-11T22:51:39Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Add collectible assembly support to EnumerateLoaderHeapMemoryRegions",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/40940",
        "createdAt":  "2020-08-17T15:40:24Z",
        "number":  40940,
        "author":  "hoyosjs",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-12T00:21:03Z",
        "body":  "ARM64 Linux and ARM64 Windows instruction interpretation for patch skips are currently implemented separately. The Linux implementation is much cleaner and follows the spec more rigorously. Converge the two implementations as much as possible.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOw69xTA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NDk1NTQ3OA==",
                                           "createdAt":  "2020-08-17T15:40:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-08-17T15:40:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7Dr3FM",
                                           "createdAt":  "2025-09-12T00:21:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of our [issue cleanup automation](https://github.com/dotnet/runtime/blob/main/docs/issue-cleanup.md).\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-12T00:21:01Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Cleanup of ARM64 Debugger\u0027s NativeWalker",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr",
                       "no-recent-activity",
                       "backlog-cleanup-candidate"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/41420",
        "createdAt":  "2020-08-26T23:13:13Z",
        "number":  41420,
        "author":  "isadorasophia",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-28T02:26:37Z",
        "body":  "It seems that the CLR is not correctly handling initialization of nullable static variables. The repro steps below should make the problem clearer.\r\n\r\n#### Repro steps:\r\n1. Start debugging the following app, either on x86 or x64, for .NET version **3.1.401** or **5.0.100-preview.8.20362.3**:\r\n```csharp\r\nclass NullableTest\r\n{\r\n    static int? i;\r\n\r\n    public static void Main()\r\n    {\r\n        System.Diagnostics.Debugger.Break();\r\n\r\n        if (i.HasValue)\r\n        {\r\n            System.Console.WriteLine(\"Value is {0}!\", i.Value);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n2. Stop at breakpoint;\r\n3. Evaluate ```i``` at the **Watch Window**.  The following error message will show up: _\"The debugger is unable to evaluate this expression.\"_ \r\n4. Stop at breakpoint and evaluate ```i = 2``` at the **Immediate Window**;\r\n5. Evaluate ```i``` again, it will now have a value of 2;\r\n6. Step over twice;\r\n7. **The condition will be skipped and ```i``` value is now null.**\r\n\r\n#### Regression?\r\nThis is a regression when upgrading from **3.1.302** -\u003e **3.1.401**. It has also been observed on **5.0.100-preview.3.20216.6** -\u003e **5.0.100-preview.8.20362.3**.\r\n\r\n#### Other information\r\n- The CLR is directly returning a null slot for the variable until that value is actually used, which results in the error message shown at step 3. I verified that `ICorDebugReferenceValue::GetValue` returns 0 at that point. \r\n- After line 9 is executed, `ICorDebugReferenceValue::GetValue` returns a valid address, which also overwrites any data that was there before (from step 4).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwJqTUA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4MTE3MDU3MQ==",
                                           "createdAt":  "2020-08-26T23:13:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-08-26T23:13:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4MTE3MjQyMA==",
                                           "createdAt":  "2020-08-26T23:19:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-08-26T23:19:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4MTE3MzEwNg==",
                                           "createdAt":  "2020-08-26T23:21:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@hoyosjs",
                                           "updatedAt":  "2020-08-26T23:21:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4MjI4ODc2NQ==",
                                           "createdAt":  "2020-08-28T02:26:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "yyjdelete",
                                           "body":  "#39993\r\nAnd seems this also happened for all structs except primitive types(int, short, byte, ...) .",
                                           "updatedAt":  "2020-08-28T02:26:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7Ajexj",
                                           "createdAt":  "2025-08-28T00:42:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of our [issue cleanup automation](https://github.com/dotnet/runtime/blob/main/docs/issue-cleanup.md).\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-28T00:42:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7AmpNQ",
                                           "createdAt":  "2025-08-28T02:26:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Still repros",
                                           "updatedAt":  "2025-08-28T02:26:28Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Invalid backing object for unused nullable static value types",
        "labels":  [
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/42296",
        "createdAt":  "2020-09-16T02:50:08Z",
        "number":  42296,
        "author":  "mikem8361",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-01-06T21:42:06Z",
        "body":  "The Linux createdumps don\u0027t explicitly add the version string memory to coredumps (symbol: sccsid). This has only showed up on recent 5.0 rc2 ALPINE distro builds but there is chance it could happen on other distros.\r\n\r\nThe solution is to start exporting the \"sccsid\" and modify createdump to find and read the version string thus adding to the coredump.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKVBxig==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MzEzNzgwMg==",
                                           "createdAt":  "2020-09-16T02:50:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-09-16T02:50:21Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "createdump doesn\u0027t always add the special version string to coredumps",
        "labels":  [
                       "area-Diagnostics-coreclr",
                       "os-alpine"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/42698",
        "createdAt":  "2020-09-24T19:52:28Z",
        "number":  42698,
        "author":  "chuckries",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBRd_FA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Scottj1s",
                                            "createdAt":  "2020-09-24T20:33:57Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2022-04-27T21:25:03Z",
        "body":  "The VS Debugger has the ability to [decode CCW\u0027s and RCW\u0027s](https://devblogs.microsoft.com/visualstudio/viewing-managed-com-objects-through-native-pointers/) while mixed mode debugging in order to visualize a managed object through a native interface pointer and vice versa. If a customer begins to consume the new [ComWrappers API](https://github.com/dotnet/runtime/issues/1845), this decoding will stop working. In .NET 6, the necessary debug interface implementations should be updated to work with ComWrappers API.\r\n\r\nVS\u0027s CCW and RCW is primarily focused on supporting internal devs, even though it is publicly available. This is not being driven by a customer ask. \r\n\r\n# APIs\r\n\r\n## CCW Decoding\r\n[ICorDebugAppDomain4::GetObjectForCCW](https://docs.microsoft.com/en-us/dotnet/api/microsoft.visualstudio.cordebuginterop.icordebugappdomain4.getobjectforccw?view=visualstudiosdk-2019) \r\n\r\n## RCW Decoding\r\nToday the debugger uses [ICorDebugComObjectValue::GetCachedInterfacePointers](https://docs.microsoft.com/en-us/dotnet/api/microsoft.visualstudio.cordebuginterop.icordebugcomobjectvalue.getcachedinterfacepointers?view=visualstudiosdk-2019#Microsoft_VisualStudio_CorDebugInterop_ICorDebugComObjectValue_GetCachedInterfacePointers_System_Int32_System_Int32_System_Int32__System_UInt64___) to obtain the IUnknown* for a managed object. As this interface can\u0027t be fully supported by ComWrappers API, I suggest we add a new API such as ICorDeubgComObjectValue2::GetIUnknown().\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKaMgbQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5ODU1NDgxMQ==",
                                           "createdAt":  "2020-09-24T19:52:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-09-24T19:52:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5ODU1NDg2MA==",
                                           "createdAt":  "2020-09-24T19:52:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "chuckries",
                                           "body":  "cc @AaronRobinsonMSFT @tommcdon ",
                                           "updatedAt":  "2020-09-24T19:52:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5ODU1NTQzMg==",
                                           "createdAt":  "2020-09-24T19:53:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "chuckries",
                                           "body":  "The primary driver of this is to support [CsWinRt](https://github.com/microsoft/CsWinRT) scenarios.",
                                           "updatedAt":  "2020-09-24T19:53:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5ODU1NjUyNQ==",
                                           "createdAt":  "2020-09-24T19:56:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "/cc @scottj1s @davmason ",
                                           "updatedAt":  "2020-09-24T19:56:25Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[Request] Support ComWrappers API in debug interfaces for diagnostic CCW/RCW decoding. ",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/43731",
        "createdAt":  "2020-10-22T16:16:45Z",
        "number":  43731,
        "author":  "gregg-miskelly",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-12T00:21:01Z",
        "body":  "### Description\r\n\r\nOn Linux/Mac the exit code of the target process is obtained through waitpid ([Linux docs](https://linux.die.net/man/2/waitpid), [Apple docs](https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/waitpid.2.html), [PAL code that makes use of it](https://github.com/dotnet/runtime/blob/6072e4d3a7a2a1493f514cdf4be75a3d56580e84/src/coreclr/src/pal/src/synchmgr/synchmanager.cpp#L4482)). However, unlike on Windows -- if multiple places in a process are calling waitpid, unless the `WNOWAIT` flag is used (which doesn\u0027t seem to exist OSX), then my understanding is that this will prevent other callers from obtaining the exit code.\r\n\r\nThe debugging services open a HANDLE to the target process (as expected) through the PAL, which means that they may wind up \u0027owning\u0027 the exit code of the target process, but they don\u0027t, at least as far as I know, wind up propagating this exit code to the debugger.\r\n\r\nThe potential fixes I can think of are:\r\n1. Add a new \u0027managed callback\u0027 interface with another version of the [ExitProcess](https://github.com/dotnet/runtime/blob/c6bf8eb835b58c6bbbf1dc163ac026e97a9afdb1/src/coreclr/src/inc/cordebug.idl#L1121) method which provides the exit code to the debugger if the debugging services were able to obtain it.\r\n-or-\r\n2. Make changes to the PAL (ex: new fake access right to indicate that waitpid should be used) and opt-into them with the debugging services to avoid \u0027owning\u0027 the exit code. Thus the calling debugger can reliably use waitpid to obtain the exit code.\r\n\r\n### Regression?\r\n\r\nNo, this has never worked on Linux/Mac\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOw69xEg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxNDYwMzU5NQ==",
                                           "createdAt":  "2020-10-22T16:16:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-10-22T16:16:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczNzMxNjk5OQ==",
                                           "createdAt":  "2020-12-02T15:49:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavel-orekhov",
                                           "body":  "same problem was in netcoredbg\r\ncc @kfrolov @viewizard ",
                                           "updatedAt":  "2020-12-02T15:49:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczNzMyNjkyNA==",
                                           "createdAt":  "2020-12-02T16:04:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "viewizard",
                                           "body":  "Yes, we also faced with this issue and temporary added hook for `waitpid` in netcoredbg code - https://github.com/Samsung/netcoredbg/blob/0809b8aa1a80c88b35a04106fbfeb9f5be42853e/src/debugger/manageddebugger.cpp#L41-L127",
                                           "updatedAt":  "2020-12-02T16:04:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7Dr3ES",
                                           "createdAt":  "2025-09-12T00:20:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of our [issue cleanup automation](https://github.com/dotnet/runtime/blob/main/docs/issue-cleanup.md).\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-12T00:20:59Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Unable to obtain target process exit code on Linux/Mac with CoreCLR debugging services",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr",
                       "no-recent-activity",
                       "backlog-cleanup-candidate"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/43924",
        "createdAt":  "2020-10-27T23:24:47Z",
        "number":  43924,
        "author":  "gregg-miskelly",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODClOfg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "devlead",
                                            "createdAt":  "2020-10-28T00:14:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jkoritzinsky",
                                            "createdAt":  "2020-10-28T00:22:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AaronRobinsonMSFT",
                                            "createdAt":  "2020-10-28T01:05:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "meziantou",
                                            "createdAt":  "2020-10-28T01:40:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pascalberger",
                                            "createdAt":  "2020-10-28T05:52:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DillonN",
                                            "createdAt":  "2020-12-03T03:08:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kzadora",
                                            "createdAt":  "2023-05-15T23:13:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PathogenDavid",
                                            "createdAt":  "2023-09-21T18:40:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ThomasPiskol",
                                            "createdAt":  "2024-04-12T09:04:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "glopesdev",
                                            "createdAt":  "2025-05-20T12:00:08Z"
                                        }
                                    ],
                          "totalCount":  10
                      },
        "updatedAt":  "2025-03-11T14:43:38Z",
        "body":  "### Description\r\n\r\nCurrently, there is no way for a debugger to automatically debug child .NET processes on all platforms. On Windows + Visual Studio, there is the [Child Process Debugging Power Tool](https://marketplace.visualstudio.com/items?itemName=vsdbgplat.MicrosoftChildProcessDebuggingPowerTool) but we don\u0027t have an answer for non-Windows.\r\n\r\nProposal:\r\n1. Add a new ICorDebug API to allow a debugger to opt-into notification of when child processes are started. If enabled, the notification should fire when the new process exists, but before it can run any .NET Code.\r\n2. Modify implementation of System.Diagnostics.Process.Start (and other prominent places where the runtime starts processes, in case some stuff uses some other API) to make the following change to process starting when there is an attached debugging which has opted into the new notification\r\n    * Start the new process suspended (ex: use CREATE_SUSPENDED on Windows, or the equivalent PAL functionality)\r\n    * Fire the notification to the debugger\r\n    * Resume the new process after the debugger continues execution\r\n3. The notification should contain the following information:\r\n    * The new process id\r\n    * The new application executable, or maybe the logical executable (ex: foo.dll instead of dotnet.exe)\r\n    * Perhaps the command line of the new process",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOoc1x7Q==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxNzU5OTIzNg==",
                                           "createdAt":  "2020-10-27T23:24:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-10-27T23:24:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cW4xY",
                                           "createdAt":  "2023-05-16T11:42:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rohanrhu",
                                           "body":  "MS you are a trillion dollars company why does this very important missing feature stay here forever?",
                                           "updatedAt":  "2023-05-16T11:42:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hzXHt",
                                           "createdAt":  "2025-03-11T14:43:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LostTime76",
                                           "body":  "Bump...... need this",
                                           "updatedAt":  "2025-03-11T14:43:37Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Suggestion: child process debugging support",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/45549",
        "createdAt":  "2020-12-03T16:22:31Z",
        "number":  45549,
        "author":  "pr8x",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-12T00:20:59Z",
        "body":  "It seems that the Win32 `MiniDumpWithIndirectlyReferencedMemory` flag is only working for native memory, but not for managed. I don\u0027t really know how dbghelp interacts with the DAC, but apparently it does provide ways to enumerate memory regions etc. (see https://github.com/dotnet/runtime/issues/1269#issuecomment-572715660) Would it be possible to add support for this flag somehow?\r\n\r\nAlso: Is there a way - from native code - to enumerate CLR memory regions so I can manually include them with the `MemoryCallback` callback?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOw69wzg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczODExNTkxNA==",
                                           "createdAt":  "2020-12-03T16:22:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-12-03T16:22:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczODE3ODgzNg==",
                                           "createdAt":  "2020-12-03T17:56:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nIt seems that the Win32 `MiniDumpWithIndirectlyReferencedMemory` flag is only working for native memory, but not for managed. I don\u0027t really know how dbghelp interacts with the DAC, but apparently it does provide ways to enumerate memory regions etc. (see https://github.com/dotnet/runtime/issues/1269#issuecomment-572715660) Would it be possible to add support for this flag somehow?\r\n\r\nAlso: Is there a way - from native code - to enumerate CLR memory regions so I can manually include them with the `MemoryCallback` callback?\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003epr8x\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `feature request`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2020-12-03T17:56:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczODI4MjQ3Mw==",
                                           "createdAt":  "2020-12-03T20:16:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@hoyosjs @mikem8361 ",
                                           "updatedAt":  "2020-12-03T20:16:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0MDEwMzQzMw==",
                                           "createdAt":  "2020-12-07T18:39:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikem8361",
                                           "body":  "I don\u0027t know all the details of `MiniDumpWithIndirectlyReferencedMemory` (are docs say \"Include pages with data referenced by locals or other stack memory. \") but you are right it only works for native memory.  The Windows MiniDumpWriteDump API uses the DAC (mscordaccore.dll) ICLRDataEnumMemoryRegions::EnumMemoryRegions() API to get the processes managed state.  You can call this API directly to do the managed memory/state enumeration if that is what you are asking (see [crashinfo.cpp](https://github.com/dotnet/runtime/blob/51fc11f21ab3c8ee0e691788eee2d8eb784313ea/src/coreclr/src/debug/createdump/crashinfo.cpp#L225) for an example).\r\n\r\nIf you are asking for this flag to be added to the .NET Core\u0027s createdump code for Windows, the flags we picked should give us the type of dump was requested (Triage, Heap, Full, etc).  If you think one of these heap \"types\" needs this flag, let me know and I\u0027ll look into it.",
                                           "updatedAt":  "2020-12-07T18:39:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0MDE3MDIyMg==",
                                           "createdAt":  "2020-12-07T20:45:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pr8x",
                                           "body":  "How exactly is `MiniDumpWriteDump` invoking the DAC actually? Is it just hardcoded to use `EnumMemoryRegions`?\r\nI fiddled around with the ClrMD library a bit and tried to manually include the CLR memory pages into the dump. I am basically doing what the \"minidumper\" utility (https://github.com/goldshtn/minidumper/blob/master/DumpWriter/DumpWriter.cs) is doing. I didn\u0027t have much success yet though. Visual Studio complains that it\u0027s missing information in the dump to start managed debugging. \r\n\r\nHaving support for `MiniDumpWithIndirectlyReferencedMemory` in createdump would be quite fantastic as both Heap and Full dump types can become quite large. Do you have any practical example of scanning for stack-referenced heap memory (Preferably using ClrMD since I already have a project setup for that)? ",
                                           "updatedAt":  "2020-12-07T20:45:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0MDgxMjU5MQ==",
                                           "createdAt":  "2020-12-08T18:13:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikem8361",
                                           "body":  "Windows has some \"magic\" that looks for the DAC (using resources in coreclr.dll to indicate there is a minidump \"auxiliary\" data providers), loads it and calls the EnumMemoryRegions API.  The DAC has to be properly signed with a Microsoft cert before Windows will load it.\r\n\r\nI haven\u0027t actually tried adding `MiniDumpWithIndirectlyReferencedMemory` to the Windows createdump to see how much it impacts the size of Heap and Full dumps.  It shouldn\u0027t affect Full dumps because it should already includes all memory.  And I\u0027m hesitant to add it to Heap dumps because of any size increase.  \r\n\r\nI don\u0027t have any examples of stack-referenced heap memory.  \r\n\r\nIt sounds like the reason you are writing your own minidump utility is that something is missing from the createdump generated Heap dumps? If you can give me some specific details on what managed state (like method locals, variables or types) is missing we can try to fix the DAC memory enumeration in the next release.\r\n",
                                           "updatedAt":  "2020-12-08T18:13:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0MDgxODI5Mw==",
                                           "createdAt":  "2020-12-08T18:21:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pr8x",
                                           "body":  "\u003e  haven\u0027t actually tried adding MiniDumpWithIndirectlyReferencedMemory\r\n\r\nI doubt that\u0027s gonna be very helpful on its own. It would require some custom logic to traverse stack memory (and referenced objects) to make it work reliably.\r\n\r\n\u003e It sounds like the reason you are writing your own minidump utility is that something is missing from the createdump generated Heap dump\r\n\r\nThe problem is simply that heap and full dumps are too big. I am looking for ways to reduce the size of dumps by only including memory that is really needed to reconstruct the stack and inspect referenced objects etc. The problem is I really don\u0027t know which memory areas I need to include into the dump to achieve this. \r\n",
                                           "updatedAt":  "2020-12-08T18:21:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0MjY3MTMwNw==",
                                           "createdAt":  "2020-12-10T17:29:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikem8361",
                                           "body":  "It is hard to know what memory areas to include which is why the DAC\u0027s EnumMemoryRegions is so complicate internally.  \r\n\r\nIn the end, it sounds like Triage dumps don\u0027t have enough memory (they were designed just for analysis in Watson so only stacks, threads and the exception that caused the crash are included) and Heap dumps are too big. ",
                                           "updatedAt":  "2020-12-10T17:29:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7Dr3DO",
                                           "createdAt":  "2025-09-12T00:20:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of our [issue cleanup automation](https://github.com/dotnet/runtime/blob/main/docs/issue-cleanup.md).\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-12T00:20:57Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Support for MiniDumpWithIndirectlyReferencedMemory",
        "labels":  [
                       "area-Diagnostics-coreclr",
                       "feature-request",
                       "no-recent-activity",
                       "backlog-cleanup-candidate"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/46093",
        "createdAt":  "2020-12-15T21:09:47Z",
        "number":  46093,
        "author":  "pbalexlear",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCxHHsA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "irperez",
                                            "createdAt":  "2021-03-08T05:11:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "christianrondeau",
                                            "createdAt":  "2021-12-26T22:25:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ozonni",
                                            "createdAt":  "2022-10-26T14:30:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NepPure",
                                            "createdAt":  "2023-07-05T06:38:45Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2023-03-17T13:47:45Z",
        "body":  "looks like the issue https://github.com/dotnet/runtime/issues/9336 has began reoccuring when deploying an aspnet:3.1* image to AKS with \r\n\r\nreadonly file system the error:\r\n\r\nFailed to create CoreCLR, HRESULT: 0x80004005\r\n\r\noccurs",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOV9l9mw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0ODUzMTY1Mw==",
                                           "createdAt":  "2020-12-19T22:07:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "@pbalexlear is there a repro? \r\n\r\nFYI: @mikem8361  @janvorli ",
                                           "updatedAt":  "2020-12-19T22:07:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0ODk3OTcwMQ==",
                                           "createdAt":  "2020-12-21T13:43:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pbalexlear",
                                           "body":  "@mangod9 hello what do you mean by repro? what would you like me to provide?",
                                           "updatedAt":  "2020-12-21T13:43:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0OTAxMTI2NQ==",
                                           "createdAt":  "2020-12-21T14:49:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@pbalexlear repro means a set of steps to reproduce the issue.",
                                           "updatedAt":  "2020-12-21T14:49:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NjEyMzQyMQ==",
                                           "createdAt":  "2021-01-07T13:42:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBijR5A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "irperez",
                                                                               "createdAt":  "2021-03-08T05:11:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "pbalexlear",
                                           "body":  "Sure i will provide a k8s manifest for this, do you have a sample image of a dotnet3.1 app i can use thats hosted on a public repo?Not sure if its the attempt to load in a certificate or just the runtime starting that is the issue.\r\n\r\nthe problem only occurs when i have the following settings turned on:\r\n          securityContext:\r\n            readOnlyRootFilesystem: true\r\n\r\ni am using the following base image:\r\nFROM mcr.microsoft.com/dotnet/core/aspnet:3.1.10-buster-slim AS base\r\n\r\nbut have also seen the issue on latest tag as well\r\n\r\n1. create a secret that contains a certificate in it on k8s\r\n2. deploy the below manifest with an application that attempts to use this cert\r\nfor example my program.cs looks like \r\n```\r\n    public class Program\r\n    {\r\n        public static void Main(string[] args)\r\n        {\r\n            CreateHostBuilder(args).Build().Run();\r\n        }\r\n\r\n        public static IHostBuilder CreateHostBuilder(string[] args) =\u003e\r\n\r\n\r\n            Host.CreateDefaultBuilder(args).ConfigureLogging(logging =\u003e\r\n            {\r\n                logging.ClearProviders();\r\n                logging.AddConsole(consoleOptions =\u003e\r\n                {\r\n                    consoleOptions.TimestampFormat = \"[yyyy-MM-dd hh:mm:ss]\";\r\n                });\r\n            })\r\n                .ConfigureWebHostDefaults(webBuilder =\u003e\r\n                {\r\n                    webBuilder.UseStartup\u003cStartup\u003e().UseKestrel(config =\u003e\r\n                    {\r\n\r\n                        config.Listen(IPAddress.Any, int.Parse(Environment.GetEnvironmentVariable(\"HTTPS_PORT\")), listenOptions =\u003e\r\n                         {\r\n                             listenOptions.UseHttps(Environment.GetEnvironmentVariable(\"HTTPS_CERT\"), Environment.GetEnvironmentVariable(\"HTTPS_CERT_PASS\"));\r\n\r\n                         });\r\n\r\n\r\n                    });\r\n                });\r\n    }\r\n```\r\n\r\nManifest:\r\n\r\n\r\n```\r\napiVersion: apps/v1\r\nkind: Deployment\r\nmetadata:\r\n  name: test-app\r\n  labels:\r\n    app: test-app\r\nspec:\r\n  replicas: {{ .Values.replicaCount }}\r\n  selector:\r\n    matchLabels:\r\n      app: test-app\r\n  template:\r\n    metadata:\r\n      labels:\r\n        app: test-app\r\n    spec:\r\n        containers:\r\n        - name: testcontainer\r\n          image: \"{dotnetcore 3.1 sample image here}\"\r\n          ports:\r\n          - containerPort: 443\r\n          volumeMounts:\r\n            - name: webhook-certs\r\n              mountPath: /etc/certs\r\n              readOnly: true\r\n          securityContext:\r\n            readOnlyRootFilesystem: true\r\n        volumes:\r\n        - name: webhook-certs\r\n          secret:\r\n            secretName: {{ .Values.certificateSecretName }}\r\n```",
                                           "updatedAt":  "2021-01-07T13:44:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3MzA2ODc2NQ==",
                                           "createdAt":  "2021-07-02T15:07:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ajeet2808",
                                           "body":  "I am running into same issue, is it fixed or is there any workaround? Any help will greatly appreciated. ",
                                           "updatedAt":  "2021-07-02T15:07:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3MzA5NDE5MQ==",
                                           "createdAt":  "2021-07-02T15:48:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "We havent investigated this yet. Assume you are also hitting it with `readOnlyRootFilesystem: true` ?",
                                           "updatedAt":  "2021-07-02T15:48:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3MzM1MTM4OA==",
                                           "createdAt":  "2021-07-03T05:49:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODLspNw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dutts",
                                                                               "createdAt":  "2023-03-17T13:46:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lucastheisen",
                                                                               "createdAt":  "2023-11-02T20:18:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "ajeet2808",
                                           "body":  "Thank you for reply @mangod9 .\r\nYes, but after adding `ENV COMPlus_EnableDiagnostics=0` to my Dockerfile it\u0027s working fine with `readOnlyRootFilesystem: true`.\r\nI feel, this bug can be closed. \r\n",
                                           "updatedAt":  "2021-07-03T15:27:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3MzM1NDkzNA==",
                                           "createdAt":  "2021-07-03T06:21:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "hmm, interesting. Not sure why that fixes it -- how did you figure it out?",
                                           "updatedAt":  "2021-07-03T06:21:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3MzQyNzk2Mw==",
                                           "createdAt":  "2021-07-03T15:53:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ajeet2808",
                                           "body":  "One of my team member helped with it. Probably it disables the trace logs. \r\n[Here](https://github.com/dotnet/docs/issues/10217) is an documentation issue for more detail.\r\nFor more info:\r\n[Run-time configuration options for debugging and profiling - Enable diagnostics](https://docs.microsoft.com/en-us/dotnet/core/run-time-config/debugging-profiling#enable-diagnostics)\r\n[Tracing in COM and COMplus](https://docs.microsoft.com/en-us/archive/blogs/distributedservices/tracing-in-com-and-complus)",
                                           "updatedAt":  "2021-07-03T15:53:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3NTA3MTk1Mg==",
                                           "createdAt":  "2021-07-06T20:50:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "ok thanks for the info. Adding @tommcdon @noahfalk since we might be able to provide a better error info for this? ",
                                           "updatedAt":  "2021-07-06T20:50:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3NTI1ODcwNw==",
                                           "createdAt":  "2021-07-07T04:07:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCs5sew==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "kabakaev",
                                                                               "createdAt":  "2022-09-27T17:46:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "Ideally we could eliminate the error (once we understood it), but if that isn\u0027t an option then I agree providing a more descriptive error would be an improvement. Either way I think we\u0027ll need to understand what the underlying issue is to know our options. ",
                                           "updatedAt":  "2021-07-07T04:07:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-zcjC",
                                           "createdAt":  "2022-02-27T20:38:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "anvlkv",
                                           "body":  "getting this on self-hosted azure agent on mac os when building static web app\r\n\r\n\r\n```\r\n2022-02-27T20:35:54.3822460Z ##[section]Starting: AzureStaticWebApp\r\n2022-02-27T20:35:54.3844910Z ==============================================================================\r\n2022-02-27T20:35:54.3845490Z Task         : Deploy Azure Static Web App\r\n2022-02-27T20:35:54.3846180Z Description  : [PREVIEW] Build and deploy an Azure Static Web App\r\n2022-02-27T20:35:54.3846850Z Version      : 0.200.0\r\n2022-02-27T20:35:54.3847310Z Author       : Microsoft Corporation\r\n2022-02-27T20:35:54.3847820Z Help         : https://aka.ms/swadocs\r\n2022-02-27T20:35:54.3848480Z ==============================================================================\r\n2022-02-27T20:35:54.7150020Z [command]/bin/bash /Users/anvlkv/vsts-agent-osx-x64-2.200.2/_work/_tasks/AzureStaticWebApp_18aad896-e191-4720-88d6-8ced4806941a/0.200.0/launch-docker.sh\r\n2022-02-27T20:35:56.2800240Z stable: Pulling from appsvc/staticappsclient\r\n2022-02-27T20:35:56.2835380Z Digest: sha256:2a7ef1e3fa816c73eb0fa763127604b25d9c86856b7a754d1562604fd9693560\r\n2022-02-27T20:35:56.2938270Z Status: Image is up to date for mcr.microsoft.com/appsvc/staticappsclient:stable\r\n2022-02-27T20:35:57.9129510Z Failed to create CoreCLR, HRESULT: 0x80004005\r\n2022-02-27T20:35:58.4242880Z ##[error]Error: The process \u0027/bin/bash\u0027 failed with exit code 137\r\n2022-02-27T20:35:58.4271750Z ##[section]Finishing: AzureStaticWebApp\r\n\r\n```\r\n",
                                           "updatedAt":  "2022-02-27T20:39:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HWAds",
                                           "createdAt":  "2022-07-27T16:02:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nlooks like the issue https://github.com/dotnet/runtime/issues/9336 has began reoccuring when deploying an aspnet:3.1* image to AKS with \r\n\r\nreadonly file system the error:\r\n\r\nFailed to create CoreCLR, HRESULT: 0x80004005\r\n\r\noccurs\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003epbalexlear\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-07-27T16:02:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LGq1_",
                                           "createdAt":  "2022-09-27T20:52:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCtqJKQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ajeet2808",
                                                                               "createdAt":  "2022-10-11T16:27:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "kabakaev",
                                           "body":  "@noahfalk, your suggestion of `Ideally we could eliminate the error` is worth a try!\r\n\r\n@elinor-fung, would it make sense to ignore [the diagnostics socket creation failure](https://github.com/dotnet/runtime/blob/f999d0a6a8f6d12c70341f72bec222dc4f45eb54/src/native/corehost/hostpolicy/hostpolicy.cpp#L426) and run the app even if the diagnostics IPC was not created? \r\n\r\nFor example, [create_coreclr() may continue printing the error](https://github.com/dotnet/runtime/blame/f999d0a6a8f6d12c70341f72bec222dc4f45eb54/src/native/corehost/hostpolicy/hostpolicy.cpp#L83), but the calling corehost_main() may ignore `StatusCode::CoreClrInitFailure` and continue startup instead of exiting.\r\n\r\nUnderstandably, ignoring the diagnostics IPC creation error contradicts the \"fail fast\" principle.\r\nAnother alternative would be [to disable diagnostics by default](https://github.com/dotnet/runtime/blob/136dfcd02bb559d02b7bfe352ecdf0a9d11f8e55/src/mono/mono/eventpipe/ds-rt-mono.h#L137). At least [containerization tutorial](https://github.com/dotnet/docs/blob/b21129c2919b9890eba29ccf9ed7f46da6dda448/docs/core/docker/build-container.md?plain=1#L231) and [the diagnostics docs](https://learn.microsoft.com/en-us/dotnet/core/diagnostics/diagnostic-port#security-considerations) seem to recommend doing so for production environments.\r\n\r\nIn any case, extending the error message in `create_coreclr()` with an extra hint about being unable to create the diagnostics socket in TMPDIR may save a lot of debug time.\r\n`trace::error(_X(\"Failed to create CoreCLR, HRESULT: 0x%X. Is \u0027%s\u0027 directory writable?\"), hr, g_context-\u003eclr_dir.c_str());`\r\n",
                                           "updatedAt":  "2022-09-27T20:52:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LQdIp",
                                           "createdAt":  "2022-09-29T17:43:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elinor-fung",
                                           "body":  "\u003e @elinor-fung, would it make sense to ignore [the diagnostics socket creation failure](https://github.com/dotnet/runtime/blob/f999d0a6a8f6d12c70341f72bec222dc4f45eb54/src/native/corehost/hostpolicy/hostpolicy.cpp#L426) and run the app even if the diagnostics IPC was not created?\r\n\u003e \r\n\u003e For example, [create_coreclr() may continue printing the error](https://github.com/dotnet/runtime/blame/f999d0a6a8f6d12c70341f72bec222dc4f45eb54/src/native/corehost/hostpolicy/hostpolicy.cpp#L83), but the calling corehost_main() may ignore `StatusCode::CoreClrInitFailure` and continue startup instead of exiting.\r\n\r\nThe error that comes through - `E_FAIL` from `coreclr_initialize` - is really generic and can be due to a large number of different reasons. The host has no specifics about the reason at that point, so can\u0027t ignore the error or tailor the error message. @janvorli has been [working on initialization failure logging](https://github.com/dotnet/runtime/pull/75097), which would help with identifying the source of the error.\r\n\r\nAs @noahfalk said, we should get an understanding of the underlying issue. Then, we can determine what can or should be done about it. ",
                                           "updatedAt":  "2022-09-29T17:43:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5X2X2b",
                                           "createdAt":  "2023-03-17T13:47:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dutts",
                                           "body":  "I also suddenly started experiencing this issue on one of my .net services running in `mcr.microsoft.com/dotnet/aspnet:5.0`, the suggested solution of adding `ENV COMPlus_EnableDiagnostics=0` to my docker file has also fixed things for me.",
                                           "updatedAt":  "2023-03-17T13:47:44Z"
                                       }
                                   ],
                         "totalCount":  16
                     },
        "title":  "Failed To Create CoreCLR",
        "labels":  [
                       "EventPipe",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/47165",
        "createdAt":  "2021-01-19T13:34:33Z",
        "number":  47165,
        "author":  "davidfowl",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-07-09T12:34:41Z",
        "body":  "Seems like there\u0027s no counter to track the number of threads the runtime created? Maybe because it\u0027s possible to get this information from the OS/Process (though that seems more expensive?). \r\n\r\ncc @jkotas @noahfalk @sywhang  ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYQTJJQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2Mjg0MjI2Ng==",
                                           "createdAt":  "2021-01-19T13:34:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-01-19T13:34:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2Mjg1MjIwMg==",
                                           "createdAt":  "2021-01-19T13:52:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "What would be the scenario for this counter? Why is it important to monitor this metric via counter?\r\n\r\nEvent counters are not cheap to add. Each runtime event counter adds performance cost and cognitive load of the runtime performance counters as a whole. ",
                                           "updatedAt":  "2021-01-19T13:52:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2Mjg1NDMyMg==",
                                           "createdAt":  "2021-01-19T13:56:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nSeems like there\u0027s no counter to track the number of threads the runtime created? Maybe because it\u0027s possible to get this information from the OS/Process (though that seems more expensive?). \r\n\r\ncc @jkotas @noahfalk @sywhang  \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edavidfowl\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-01-19T13:56:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2Mjg1NzE0OQ==",
                                           "createdAt":  "2021-01-19T14:01:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Number of threads is a pretty important thing to measure, we\u0027ve actually run into a couple of scenarios where there was thread explosion caused by bad code in a library. It\u0027s a counter that exists in most server scenarios to understand (app service for example exposes this) the performance. We already have thread pool counters for when thread growth maps to the thread pool but we don\u0027t currently track other threads, I think we should.",
                                           "updatedAt":  "2021-01-19T14:01:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2Mjg2OTUwNA==",
                                           "createdAt":  "2021-01-19T14:20:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e counter to track the number of threads the runtime created\r\n\r\nI guess the metric you have actually in mind is number of threads currently alive in the process, regardless of whether these threads were created by the runtime. Is that right? ",
                                           "updatedAt":  "2021-01-19T14:20:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2MjkwNDc4MA==",
                                           "createdAt":  "2021-01-19T15:11:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "\u003e I guess the metric you have actually in mind is number of threads currently alive in the process, regardless of whether these threads were created by the runtime. Is that right?\r\n\r\nThat\u0027s right.",
                                           "updatedAt":  "2021-01-19T15:11:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc401wX_",
                                           "createdAt":  "2021-07-26T08:49:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tzachi009",
                                           "body":  "@davidfowl @tommcdon @hoyosjs \r\nHi, I have to ask - I saw that you moved this issue to .Net 7 milestone. Is there really no chance to add it to .Net 6 at this point? Maybe reconsider it? Or at least add it in a patch later on?\r\n\r\nI am asking because this counter is important in order to understand what is going inside the process, and we are still far from the release of .Net 7. \r\nAlso, [the same performance counter exists in .Net Framework.](https://docs.microsoft.com/en-us/dotnet/framework/debug-trace-profile/performance-counters#lock-and-thread-performance-counters)",
                                           "updatedAt":  "2021-07-26T08:49:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CBfPp",
                                           "createdAt":  "2022-04-24T02:08:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I think it would be possible to backport to .NET 6 if there was a strong business case and the implementation was \"simple\" enough. I\u0027m not sure though because most things use the thread pool, unless you\u0027re spinning up lots of threads (and we already have the number of thread pool threads in a counter).\r\n\r\n",
                                           "updatedAt":  "2022-04-24T02:15:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hBMkl",
                                           "createdAt":  "2023-07-09T12:34:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Did we ever do this?",
                                           "updatedAt":  "2023-07-09T12:34:41Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Add EventCounter for number of threads",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/47463",
        "createdAt":  "2021-01-26T15:29:43Z",
        "number":  47463,
        "author":  "omajid",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-03-10T02:10:11Z",
        "body":  "There\u0027s a null-check for `m_rcEventThread` in `Cordb::Terminate` here:\r\n\r\nhttps://github.com/dotnet/runtime/blob/3f12b16fa6db2b2ca5c9016ed9540547a3e752d5/src/coreclr/debug/di/rsmain.cpp#L1125\r\n\r\nBut the variable is already used without null-testing a littler earlier in the same method:\r\n\r\nhttps://github.com/dotnet/runtime/blob/3f12b16fa6db2b2ca5c9016ed9540547a3e752d5/src/coreclr/debug/di/rsmain.cpp#L1079\r\n\r\nIf the variable was actually null, dereferencing it leads to undefined behaviour, so a compiler is free to assume that wont happen. A recent compiler might therefore remove the null check on line 1125 entirely. We should probably null-check `m_rcEventThread` everywhere, or remove the null-checks.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOP2TyOg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2NzY2MzI0OQ==",
                                           "createdAt":  "2021-01-26T16:29:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThere\u0027s a null-check for `m_rcEventThread` in `Cordb::Terminate` here:\r\n\r\nhttps://github.com/dotnet/runtime/blob/3f12b16fa6db2b2ca5c9016ed9540547a3e752d5/src/coreclr/debug/di/rsmain.cpp#L1125\r\n\r\nBut the variable is already used without null-testing a littler earlier in the same method:\r\n\r\nhttps://github.com/dotnet/runtime/blob/3f12b16fa6db2b2ca5c9016ed9540547a3e752d5/src/coreclr/debug/di/rsmain.cpp#L1079\r\n\r\nIf the variable was actually null, dereferencing it leads to undefined behaviour, so a compiler is free to assume that wont happen. A recent compiler might therefore remove the null check on line 1125 entirely. We should probably null-check `m_rcEventThread` everywhere, or remove the null-checks.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eomajid\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-CodeGen-coreclr`, `area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-01-26T16:29:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2NzY5MzEzOA==",
                                           "createdAt":  "2021-01-26T17:15:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@omajid would you be interested in submitting a PR for this issue?",
                                           "updatedAt":  "2021-01-26T17:15:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2NzY5NzA3MA==",
                                           "createdAt":  "2021-01-26T17:21:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "omajid",
                                           "body":  "Sure. I am not sure of the best fix: should I add additional guards for `NULL`?",
                                           "updatedAt":  "2021-01-26T17:21:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyMjA1NTU2MQ==",
                                           "createdAt":  "2021-04-18T20:26:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GilesDMiddleton",
                                           "body":  "Just been looking at this for fun. I\u0027m a beginner in this repo, so apologies if I\u0027m doing something wrong.\r\n\r\nI think the null check on line 1125 is superfluous because m_rcEventThread will always be null if m_initialized is false, and can be removed. and m_initialize is tested at the start of the function.\r\nWould it be bad/good to turn m_initialized into a function IsIntialized() which tested !m_rcEventThread, or just use m_rcEventThread and remove m_initialized completely? And shouldn\u0027t it be called m_pEventThread?\r\n \r\nother observations: \r\nm_initialized uses a mix of lower case bool on initialization and uppercase BOOL in other parts. should be FALSE in ctor.\r\nm_rcEventThread is not initialized to null in neither the ctor nor header. Is that for speed?\r\nIf anyone can help me find an automated test that covers this area - please tell me, as I\u0027m failing to find one.\r\nOther uses of m_rcEventThread are untested, and do not test m_initialized  such as `Cordb::RemoveProcess`\r\n",
                                           "updatedAt":  "2021-04-18T20:41:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_ZPI6",
                                           "createdAt":  "2022-03-10T02:10:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003e I think the null check on line 1125 is superfluous because m_rcEventThread will always be null if m_initialized is false, and can be removed. and m_initialize is tested at the start of the function.\r\n\r\n@GilesDMiddleton Agreed. I think the `if` check can be safely removed.\r\n\r\n\u003e If anyone can help me find an automated test that covers this area - please tell me, as I\u0027m failing to find one.\r\n\r\nThis part of the product is tested in a private repo.\r\n\r\n",
                                           "updatedAt":  "2022-03-10T02:10:11Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Null checks in incorrect order in Cordb::Terminate",
        "labels":  [
                       "help wanted",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/47617",
        "createdAt":  "2021-01-29T03:44:11Z",
        "number":  47617,
        "author":  "stephentoub",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODJN7lA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sandyarmstrong",
                                            "createdAt":  "2022-05-19T13:37:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aromaa",
                                            "createdAt":  "2022-06-28T08:37:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Saibamen",
                                            "createdAt":  "2023-10-04T07:33:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fedeAlterio",
                                            "createdAt":  "2025-04-16T21:55:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "omariom",
                                            "createdAt":  "2025-07-30T19:42:48Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2025-07-30T16:02:30Z",
        "body":  "Repro:\r\n```C#\r\nusing System;\r\nusing System.Diagnostics;\r\n\r\nwhile (true)\r\n{\r\n    var sw = Stopwatch.StartNew();\r\n    for (int i = 0; i \u003c 100; i++)\r\n    {\r\n        try { throw new Exception(); } catch { }\r\n    }\r\n    Console.WriteLine(sw.Elapsed);\r\n}\r\n```\r\n\r\nWhen I run that with ctrl-F5, I get output like:\r\n```\r\n00:00:00.0004349\r\n00:00:00.0004371\r\n00:00:00.0004347\r\n00:00:00.0004366\r\n00:00:00.0004440\r\n```\r\n\r\nWhen I run that with F5, I get output like:\r\n```\r\n00:00:01.9491196\r\n00:00:01.8550998\r\n00:00:01.8392192\r\n00:00:01.8323522\r\n00:00:01.8168992\r\n```\r\n\r\nThat\u0027s a 4500x slowdown, with every exception throw/catch consuming ~20ms.  And this does scale with exception count: if I increase the repro to 1000 exceptions, without the debugger it takes ~0.004s and with the debugger it takes ~18s.\r\n\r\nWhile ideally well-behaved apps wouldn\u0027t throw lots of exceptions, this has shown to be a significant cause of slowdown for real apps while being developed, with a noticeable impact on developer inner loop performance especially if the exceptions occur at app startup.\r\n\r\ncc: @noahfalk, @mikem8361, @gregg-miskelly ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOuvoKzA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2OTU1NDY0MA==",
                                           "createdAt":  "2021-01-29T03:44:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nRepro:\r\n```C#\r\nusing System;\r\nusing System.Diagnostics;\r\n\r\nwhile (true)\r\n{\r\n    var sw = Stopwatch.StartNew();\r\n    for (int i = 0; i \u003c 100; i++)\r\n    {\r\n        try { throw new Exception(); } catch { }\r\n    }\r\n    Console.WriteLine(sw.Elapsed);\r\n}\r\n```\r\n\r\nWhen I run that with ctrl-F5, I get output like:\r\n```\r\n00:00:00.0004349\r\n00:00:00.0004371\r\n00:00:00.0004347\r\n00:00:00.0004366\r\n00:00:00.0004440\r\n```\r\n\r\nWhen I run that with F5, I get output like:\r\n```\r\n00:00:01.9491196\r\n00:00:01.8550998\r\n00:00:01.8392192\r\n00:00:01.8323522\r\n00:00:01.8168992\r\n```\r\n\r\nThat\u0027s a 4500x slowdown, with every exception throw/catch consuming ~20ms.\r\n\r\nWhile ideally well-behaved apps wouldn\u0027t throw lots of exceptions, this has shown to be a significant cause of slowdown for real apps while being developed, with a noticeable impact on developer inner loop performance especially if the exceptions occur at app startup.\r\n\r\ncc: @noahfalk, @mikem8361, @gregg-miskelly \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003estephentoub\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-01-29T03:44:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2OTU2NjE4NA==",
                                           "createdAt":  "2021-01-29T04:25:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Work has been done in the past to reduce the overhead of exceptions while running under the debugger in the past, for example: https://github.com/dotnet/diagnostics/blob/0d78fe5fa58c88d4524f7698f9a1abbeba31f33a/src/inc/cordebug.idl#L3291.  Just out of curiosity, is the impact measurably smaller if the exception is thrown/caught in non-user code and with Just My Code enabled?",
                                           "updatedAt":  "2021-01-29T04:25:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2OTU3MDAxMg==",
                                           "createdAt":  "2021-01-29T04:39:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "Visual Studio logs the exception to output window.\r\n\r\n\u003e is the impact measurably smaller if the exception is thrown/caught in non-user code and with Just My Code enabled?\r\n\r\nI can say yes.",
                                           "updatedAt":  "2021-01-29T04:39:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2OTgyNzM5OA==",
                                           "createdAt":  "2021-01-29T14:10:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBeTUhw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2021-01-29T17:57:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TrayanZapryanov",
                                                                               "createdAt":  "2021-01-31T12:25:33Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e Just out of curiosity, is the impact measurably smaller if the exception is thrown/caught in non-user code and with Just My Code enabled?\r\n\r\nOn my machine, with JMC on:\r\n- if the exception is thrown from non-user code but still caught by user code, the slowdown drops from ~4500x to ~3500x.\r\n- if the exception is both thrown and caught by non-user code, the slowdown drops from ~4500x to ~10x.",
                                           "updatedAt":  "2021-01-29T14:10:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2OTk5MTQ3MQ==",
                                           "createdAt":  "2021-01-29T19:06:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBePHwg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "stephentoub",
                                                                               "createdAt":  "2021-01-29T19:48:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "gregg-miskelly",
                                           "body":  "Two thoughts --\r\n1. Before we get too far along attempting to improve things, it may be worth making Stephen\u0027s app a bit more \"real world\" --\r\n    A. Add background thread(s), as I suspect the time to reach GC Suspend is much better on this trivial app then in a real thing\r\n    B. Make the call stacks deeper, as I suspect that stack walk time is going to be an important component for this, and stack walk with one function may be artificially cheap\r\n2. I haven\u0027t looked at a trace, so these ideas may prove totally wrong, but I would guess improvements will fall into three buckets --\r\n   A. Improvements that the runtime can do alone. For example, making the IPCs more efficient.\r\n   B. Improvements that the runtime can do along with the debugger. For example, currently the runtime will walk the stack up front. The runtime can fix this, but VS/vsdbg at least has never tried to optimize our stack handling code to avoid walking the entire stack since the runtime already had done it. So this will require changes from both sides to see the benefit.\r\n   C. Improvements that will require new ICorDebug APIs -- I could imagine that getting down to the 10x-100x level would require a significantly different notification interface. Perhaps one where the notification is delivered without synchronizing, or maybe even one that is delivered in-process.",
                                           "updatedAt":  "2021-01-29T19:06:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3MDAxMjMyMA==",
                                           "createdAt":  "2021-01-29T19:47:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e Add background thread(s), as I suspect the time to reach GC Suspend is much better on this trivial app then in a real thing\r\n\r\nSure... doing what?  The picture doesn\u0027t change all that much, for example, if I have a bunch of thread pool threads just looping over sleeps:\r\n```C#\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\n\r\nfor (int i = 0; i \u003c Environment.ProcessorCount; i++)\r\n{\r\n    Task.Run(() =\u003e\r\n    {\r\n        while (true) Thread.Sleep(1);\r\n    });\r\n}\r\n\r\nwhile (true)\r\n{\r\n    var sw = Stopwatch.StartNew();\r\n    for (int i = 0; i \u003c 100; i++)\r\n    {\r\n        try { throw new Exception(); } catch { }\r\n    }\r\n    Console.WriteLine(sw.Elapsed);\r\n}\r\n```\r\nbut if make those threads sit in tight loops:\r\n```C#\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.Threading.Tasks;\r\n\r\nfor (int i = 0; i \u003c Environment.ProcessorCount; i++)\r\n{\r\n    Task.Run(() =\u003e\r\n    {\r\n        while (true) { }\r\n    });\r\n}\r\n\r\nwhile (true)\r\n{\r\n    var sw = Stopwatch.StartNew();\r\n    for (int i = 0; i \u003c 100; i++)\r\n    {\r\n        try { throw new Exception(); } catch { }\r\n    }\r\n    Console.WriteLine(sw.Elapsed);\r\n}\r\n```\r\nthe gap actually grows, going from ~0.0007s to ~7.3s, so a 10,000x slowdown.\r\n\r\n\u003e Make the call stacks deeper\r\n\r\nPart of the problem I\u0027ve seen in some apps is that the number of exceptions is significantly amplified because of deeper \"call stacks\", and more specifically, when async is involved, because the exception ends up getting caught and thrown again at every level of the chain.  For example, if I change the app to be:\r\n```C#\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.Threading.Tasks;\r\n\r\nwhile (true)\r\n{\r\n    var sw = Stopwatch.StartNew();\r\n    for (int i = 0; i \u003c 100; i++)\r\n    {\r\n        try { await Run(10); } catch { }\r\n    }\r\n    Console.WriteLine(sw.Elapsed);\r\n}\r\n\r\nstatic async Task Run(int depth)\r\n{\r\n    if (depth \u003e 0)\r\n    {\r\n        await Run(depth - 1);\r\n    }\r\n\r\n    throw new Exception();\r\n}\r\n```\r\nnow ctrl-F5 shows numbers like ~0.01s and F5 shows numbers like ~28.7s.\r\n\r\nBut even with deeper non-async call stacks, the gap is still huge.  I changed it to this:\r\n```C#\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.Threading.Tasks;\r\n\r\nwhile (true)\r\n{\r\n    var sw = Stopwatch.StartNew();\r\n    for (int i = 0; i \u003c 100; i++)\r\n    {\r\n        try { Run(10); } catch { }\r\n    }\r\n    Console.WriteLine(sw.Elapsed);\r\n}\r\n\r\nstatic void Run(int depth)\r\n{\r\n    if (depth \u003e 0)\r\n    {\r\n        Run(depth - 1);\r\n    }\r\n\r\n    throw new Exception();\r\n}\r\n```\r\nand now ctrl-F5 shows numbers like ~0.001s and F5 shows numbers like ~2.05s, so down to an ~2000x difference.  The gap does drop further the deeper the frames go, though.  At 100 frames, the difference drops to ~400x.",
                                           "updatedAt":  "2021-01-29T19:47:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3MDAxODU5NA==",
                                           "createdAt":  "2021-01-29T19:59:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gregg-miskelly",
                                           "body":  "RE: Background threads - from GC investigations and/or telemetry do you have a sense for what suspend times for \u0027typical\u0027 apps look like? If so, I might try to mimic that time in whatever app we will use as we start to dig into the numbers.\r\n\r\n\u003e and now ctrl-F5 shows numbers like ~0.001s and F5 shows numbers like ~2.05s, so down to an ~2000x difference. The gap does drop further the deeper the frames go, though. At 100 frames, the difference drops to ~400x.\r\n\r\nTo make sure I understand, you are saying that it takes significantly more time as call stack size increases (~2.05s vs. ~1.9 in your last example vs first example), but the multiplier actually falls (~2000x vs ~4500x) since the Ctrl-F5 time goes up as well. Correct?",
                                           "updatedAt":  "2021-01-29T19:59:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3MDAyMjY0Mw==",
                                           "createdAt":  "2021-01-29T20:07:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e Correct?\r\n\r\nYup",
                                           "updatedAt":  "2021-01-29T20:07:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3MDA5MjEwMA==",
                                           "createdAt":  "2021-01-29T22:52:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBeQWEw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "stephentoub",
                                                                               "createdAt":  "2021-01-29T23:37:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "pakrym",
                                           "body":  "I don\u0027t have a repro that has as impressive a penalty as 4000x but I do have a real-world case.\r\n\r\nIt\u0027s a champion scenario for the Azure EventHubs Processor SDK that has multi-threading and network calls.\r\n\r\nIn total the startup process throws ~180 exceptions (which are in fact 32 distinct exceptions but multiplied by layers of async state machines re-throwing) and with JMC off the startup time is:\r\n\r\nWithout debugger ~7.5sec\r\nWith debugger ~20sec\r\n\r\nWhat was surprising to me is how large the impact of the debugging is compared to actual networking. The app does 112 blob requests during startup + various TCP connections to EventHubs service so throwing an exception in an async method costs as much as making multiple real service calls over the network.\r\n\r\nI\u0027m happy to provide the app with all connection strings ready or record a profile.\r\n\r\n",
                                           "updatedAt":  "2021-02-01T16:30:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3MDMxNDg1Ng==",
                                           "createdAt":  "2021-01-31T02:33:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBeak8w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "stephentoub",
                                                                               "createdAt":  "2021-01-31T02:43:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "omariom",
                                                                               "createdAt":  "2021-01-31T13:50:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pakrym",
                                                                               "createdAt":  "2021-02-01T16:30:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "I spent a little time with a profiler to assess where we are spending our time. I profiled Steve\u0027s example that uses depth 10 callstacks without async:\r\n````\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.Threading.Tasks;\r\n\r\nwhile (true)\r\n{\r\n    var sw = Stopwatch.StartNew();\r\n    for (int i = 0; i \u003c 100; i++)\r\n    {\r\n        try { Run(10); } catch { }\r\n    }\r\n    Console.WriteLine(sw.Elapsed);\r\n}\r\n\r\nstatic void Run(int depth)\r\n{\r\n    if (depth \u003e 0)\r\n    {\r\n        Run(depth - 1);\r\n    }\r\n\r\n    throw new Exception();\r\n}\r\n````\r\nOn my particular machine (Windows, .Net Core 3.1.11, VS 16.8.4) using  Ctrl-F5 is ~1.5ms per iteration of the outer while loop and F5 is ~1.5s, so about a 1000x overhead for me. During the 15ms handling of each exception there are 3 events dispatched from the runtime to the debugger:\r\n1. First chance exception - sent when the exception is thrown\r\n2. User first chance exception - sent when 1st pass exception dispatch first encounters a stack frame marked as user-code\r\n3. Catch handler found - send when 1st pass exception dispatch locates the frame with the catch handler\r\n\r\nThis shows the breakdown of the ~15ms window for one exception\r\n![image](https://user-images.githubusercontent.com/6243776/106372209-5cafe000-6322-11eb-99ba-173e48b55678.png)\r\n\r\nEach event logically traverses across 3 components:\r\n1. It starts in the runtime by suspending all threads and then transmitting a message over an IPC channel. This part of the work is in the white space of the graph above.\r\n2. The message is received by the mscordbi library running in the msvsmon process. This part of the work is the yellow-green DBI callback thread. Most of perf cost goes to doing a stackwalk. The purpose of the stackwalk is to map a frame pointer to an ICorDebugFrame object.\r\n3. mscordbi invokes a callback implemented by vsdebugeng.impl. This is where Visual Studio specific logic runs to determine what to do with the exception. vsdebugeng may also call back into mscorbi to request more information about the current state of the debuggee. This is shown in the dark green portion.\r\n\r\n\r\nMy take is there are two different approaches we could follow at this point:\r\n1. We could chip away at the problem trying to make small to medium sized code changes but leaving the overall design intact. This might take a week or more of dev time, and reduce the time taken to process an exception by 10-30%. The changes that would be most impactful would be figuring out how to eliminate an entire chunk of the work, for example suppressing one of the notifications in this scenario or avoiding the stackwalk. It is unlikely that we have trivial changes available with large returns as this scenario has already been incrementally improved on more than one occasion in the past.\r\n2. We could switch to a substantially different design for handling exceptions, most likely something that lets VS get their filtering logic running in-proc. This could involve at least few weeks of effort on both the CLR and VS side, but it would probably give us cost reductions \u003e= 99%\r\n\r\nPersonally my preference is that if we are going to spend time on this we should look into option (2), the major changes. I worry that we don\u0027t have much runway left to optimize incrementally given how easy it is for apps to start throwing yet more exceptions. I also expect building in-proc extensibility points opens the door to a bunch of other useful diagnostic scenarios. For example in the debugger space it could contribute towards other high performance events like conditional breakpoints, or being able to do more sophisticated analysis of rethrown exceptions for async. Outside debugging another example is having a dump collector that can capture dumps on 1st chance exceptions.\r\n\r\nPriority-wise the runtime diagnostics team already has months of committed feature work for .NET 6 and a hearty backlog of bugs. I\u0027d guess this would land in the grey area where we might be able to get it within the release timeframe but it is far enough down that we shouldn\u0027t be making any promises at this point.\r\n\r\nThoughts on all of this? In particular @gregg-miskelly I\u0027d be curious to hear what you think feasibility/interest is for doing a meatier change here?",
                                           "updatedAt":  "2021-01-31T02:33:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3MTA4MjE3MA==",
                                           "createdAt":  "2021-02-01T19:00:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gregg-miskelly",
                                           "body":  "I would agree with you that there is appeal in approach 2. On the other hand, that makes the change way way more expensive. So I think it is worth at least thinking about how much we could improve without going that far.\r\n\r\nHere are the inefficiencies that I see in the current system --\r\n* With JMC on, I believe the only thing the VS debugger does with first chance is to walk the call stack to to mark `[NonUserCode]`/`[DebuggerHidden]` frames in the extremely rare chance they exist. It seems like we could turn off this notification all together, and instead allow user first chance to fire more than once in the unlikely case that we stop at user first chance and discover the stopping frame should actually be considered non-user code.\r\n* We should be able to often eliminate the stack walk in user-first chance (JMC enabled case)/first chance (JMC disabled case) and always in catch handler found -- currently IntelliTrace uses them, so this would require some changes and decisions. But it seems like we could maybe have some throttling for user-first chance, and do something smarter with catch handler found to reuse the user-first call stack.\r\n\r\nIf you don\u0027t see any reason I am missing that we need these things -- if we took out the stack walks entirely, and reduced the number of stopping events from three to two, can you guess from the trace about what \u0027x\u0027 we are on? Is the main thing left synchronizing to send stopping events?",
                                           "updatedAt":  "2021-02-01T19:03:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3MTMyNzQ0Mw==",
                                           "createdAt":  "2021-02-02T03:28:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBekq-w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pakrym",
                                                                               "createdAt":  "2021-02-02T16:23:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "\u003e We should be able to often eliminate the stack walk\r\n\r\nJust to confirm you are saying it would be OK if we defined a new exception callback that didn\u0027t provide the ICorDebugFrame argument or we kept the current callback and return null for that parameter? If you use that parameter for anything we probably still have to do a stackwalk in DBI.\r\n\r\n\u003eif we took out the stack walks entirely, and reduced the number of stopping events from three to two, can you guess from the trace about what \u0027x\u0027 we are on? Is the main thing left synchronizing to send stopping events?\r\n\r\nIt is quite a bit more than I was anticipating we\u0027d able to cut. I\u0027m a little surprised we hadn\u0027t already cut those in the past : ) Rough guess maybe a 70% savings if this all held up? If we still need the stackwalk but we can drop the first chance notification that might be 50% savings.\r\n\r\nOne nice part is that an API that disables debugger exception events is part of what we\u0027d need to build to make the in-proc filtering case useful anyways.",
                                           "updatedAt":  "2021-02-02T03:28:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3MTc1MjQ1MQ==",
                                           "createdAt":  "2021-02-02T16:16:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBekq8w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pakrym",
                                                                               "createdAt":  "2021-02-02T16:23:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e Rough guess maybe a 70% savings if this all held up?\r\n\r\nI\u0027ll take it :smile:",
                                           "updatedAt":  "2021-02-02T16:16:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3MjAwMDc3Ng==",
                                           "createdAt":  "2021-02-02T21:27:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gregg-miskelly",
                                           "body":  "\u003e Just to confirm you are saying it would be OK if we defined a new exception callback that didn\u0027t provide the ICorDebugFrame argument or we kept the current callback and return null for that parameter? If you use that parameter for anything we probably still have to do a stackwalk in DBI.\r\n\r\nFirst, let me try to be precise for what the VS debugger would need:\r\n1. All of the notifications: obtain the current exception object, and the type\r\n2. User first chance: determine the module+token of the top function to decide if the method has a non-user attribute\r\n3. User unhandled:\r\n    A. Determine if the handler frame is the func eval catch handler or transition frame (Managed-\u003eUnmanaged, Unmanaged-\u003eManaged, app domain)\r\n    B. Determine the module+token+IL offset of the handler frame so that we can see if the entire method is non-user code, and so we can see if the catch block\u0027s IL offset is in hidden code\r\n\r\nAssuming that that basic level of decoding can be done without a stack walk: adding a new callback interface is fine with me. ",
                                           "updatedAt":  "2021-02-02T21:27:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3MzI5NDA3Ng==",
                                           "createdAt":  "2021-02-04T13:13:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "Thanks Gregg! Its possible to get the frame information you need without a stackwalk, but it would take a good bit more refactoring. Effectively we\u0027d be building a new set of parallel exception event handlers that captures each piece of information as the runtime does exception dispatch and then routes it all the way up to a new public ICorDebug API. I\u0027m going to propose that if we are trying for the cheap and simple we should just add an API that lets you turn off the first chance exception handler and then assess if it is worth trying to optimize away the stackwalks as round 2.",
                                           "updatedAt":  "2021-02-04T13:13:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3MzQ3MTYzNw==",
                                           "createdAt":  "2021-02-04T17:18:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gregg-miskelly",
                                           "body":  "Just to be clear, we need two items for \u0027round 1\u0027:\r\n* The ability to turn off first chance.\r\n* I have never tried this, so maybe this is already the behavior, but I doubt it -- when stopping user-first chance, if the top frame is in a user module, but it turns out that the method has JMC attributes that make it non-user code, we need to be able to mark that method as non-user code, possibly call some new API, and then call Continue. This then must generate a second user-first chance notification if the exception propagates to user code.\r\n\r\nI have opened VS Task#1274770 to track the VS/vsdbg side of consuming this.",
                                           "updatedAt":  "2021-02-04T17:18:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3MzY3NTcxOQ==",
                                           "createdAt":  "2021-02-04T23:39:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "\u003e if the top frame is in a user module, but it turns out that the method has JMC attributes that make it non-user code\r\n\r\nAre you saying that despite the presence of the NonUserCode attribute in the assembly that VS would not have previously called ICorDebugFunction2::SetJmcStatus to mark it as non-user code? If VS had previously marked it as non-user then the runtime should never generate a USER_FIRST_CHANCE event in that frame.\r\n\r\nAnd thanks for mentioning it again, somehow I missed the multiple USER_FIRST_CHANCE requirement and felt silly when I re-read what you wrote above : )",
                                           "updatedAt":  "2021-02-04T23:39:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3MzcwMzg2NQ==",
                                           "createdAt":  "2021-02-05T00:51:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gregg-miskelly",
                                           "body":  "Correct. VS doesn\u0027t attempt to scan through a module during module load and pre-emptively call SetJmcStatus. We do it as we encounter those methods. ",
                                           "updatedAt":  "2021-02-05T00:51:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5oCJN3",
                                           "createdAt":  "2023-10-03T17:09:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Reconsider for .NET 9 per https://github.com/dotnet/runtime/issues/92856",
                                           "updatedAt":  "2023-10-03T17:09:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc66-grM",
                                           "createdAt":  "2025-07-30T16:02:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "I know the milestone has been bumped a lot. I\u0027m going to move this to 11 and we can take another look at viability when scoping out work for quality week(s).",
                                           "updatedAt":  "2025-07-30T16:02:25Z"
                                       }
                                   ],
                         "totalCount":  20
                     },
        "title":  "Exception throw/catch impactfully slower when debugger attached",
        "labels":  [
                       "enhancement",
                       "tenet-performance",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/47668",
        "createdAt":  "2021-01-30T03:20:16Z",
        "number":  47668,
        "author":  "hoyosjs",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-05-17T22:26:10Z",
        "body":  "### Description\r\n\r\nThe PInvoke stubs are currently using helpers that should only be used for profiling as they incur additional load. There has been an ongoing effort to consolidate and simplify paths used to perform interop setup of stubs. Part of this work was #47610 to fix debugging. The helpers introduced a call to `Debugger::TraceCall` to ensure mixed mode debugging scenarios can work as they need a `Thread` object for the running thread, however the call does a lot more than the setup. Part of this means the helper needs to be aware of the target call site of PInvokes, which is only tracked by slower helpers. We should remove the overhead of the calls and use the faster variant of the helpers.\r\n\r\nIt\u0027s not in any public releases yet other than the 6.0 previews.\r\n\r\n### Possible solutions\r\n\r\n1. Quick surgical fix proposed by @jkotas : Make the ILStubManager vet the Stub type, and for interop types just skip tracing \r\n2. A better fix long term: add a call to the debugger interface that ensures the thread has a backing Thread object support scenarios like setting breakpoints on call backs without needing \r\n\r\ncc: @jkotas @jkoritzinsky ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOLeeEqQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3MDE0NzQ5Nw==",
                                           "createdAt":  "2021-01-30T03:20:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nThe PInvoke stubs are currently using helpers that should only be used for profiling as they incur additional load. There has been an ongoing effort to consolidate and simplify paths used to perform interop setup of stubs. Part of this work was #47610 to fix debugging. The helpers introduced a call to `Debugger::TraceCall` to ensure mixed mode debugging scenarios can work as they need a `Thread` object for the running thread, however the call does a lot more than the setup. Part of this means the helper needs to be aware of the target call site of PInvokes, which is only tracked by slower helpers. We should remove the overhead of the calls and use the faster variant of the helpers.\r\n\r\nIt\u0027s not in any public releases yet other than the 6.0 previews.\r\n\r\n### Possible solutions\r\n\r\n1. Quick surgical fix proposed by @jkotas : Make the ILStubManager vet the Stub type, and for interop types just skip tracing \r\n2. A better fix long term: add a call to the debugger interface that ensures the thread has a backing Thread object support scenarios like setting breakpoints on call backs without needing \r\n\r\ncc: @jkotas @jkoritzinsky \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ehoyosjs\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `tenet-performance`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e6.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-01-30T03:20:18Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Remove Debugger::TraceCall from PInvoke helper ",
        "labels":  [
                       "tenet-performance",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/47826",
        "createdAt":  "2021-01-31T13:23:35Z",
        "number":  47826,
        "author":  "afr1983",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-12T00:20:57Z",
        "body":  "Are there plans to bring the MDAs (Managed Debugging Assistants) to .NET Core / .NET 5?\r\n\r\nI just spent an awful lot of time trying to pinpoint an issue that could have been easily fixed by having MDAs. \r\n\r\nFor those who don\u0027t know, in .NET Framework these assistants are extra checks done (when enabled) by the runtime  when dealing with unmanaged code. In my case, a .NET function was passed as a callback to a native function, however by the time the callback was called it has been garbage collected.\r\n\r\nSince the project was targeting .NET 5, it results in an exception (System.ExecutionEngineException). Not being familiar with this exception, I went into a rabbit hole of trying to find what was happening, since a lot of different bad stuff can cause this exception to be thrown (for example, heap corruption due to unsafe code done wrong).\r\n\r\nAfter exhausting a lot of dead-ends, I started trying different versions of .NET. It was only when I moved the source code to a different project targeting the .NET Framework (not Core), which I found the problem - - well, Visual Studio found the problem, as it popped a  CallbackOnCollectedDelegate exception right on my face! From then on it was easy to found the culprit and fix it.\r\n\r\nThese checks must be valuable for whoever will deal with unmanaged code calls in any platform, not only on Windows. But I couldn\u0027t find any information on it being available on .NET Core - the documentation is under .NET Framework. https://docs.microsoft.com/en-us/dotnet/framework/debug-trace-profile/diagnosing-errors-with-managed-debugging-assistants",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOw69wkw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3Mjg5ODA1Mw==",
                                           "createdAt":  "2021-02-03T23:27:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "carlossanlop",
                                           "body":  "@terrajobst @richlander @danmosemsft do you know who can answer this question?",
                                           "updatedAt":  "2021-02-03T23:27:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3MjkxMTYxNA==",
                                           "createdAt":  "2021-02-03T23:58:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@tommcdon can",
                                           "updatedAt":  "2021-02-03T23:58:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3MjkxMTczOA==",
                                           "createdAt":  "2021-02-03T23:59:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nAre there plans to bring the MDAs (Managed Debugging Assistants) to .NET Core / .NET 5?\r\n\r\nI just spent an awful lot of time trying to pinpoint an issue that could have been easily fixed by having MDAs. \r\n\r\nFor those who don\u0027t know, in .NET Framework these assistants are extra checks done (when enabled) by the runtime  when dealing with unmanaged code. In my case, a .NET function was passed as a callback to a native function, however by the time the callback was called it has been garbage collected.\r\n\r\nSince the project was targeting .NET 5, it results in an exception (System.ExecutionEngineException). Not being familiar with this exception, I went into a rabbit hole of trying to find what was happening, since a lot of different bad stuff can cause this exception to be thrown (for example, heap corruption due to unsafe code done wrong).\r\n\r\nAfter exhausting a lot of dead-ends, I started trying different versions of .NET. It was only when I moved the source code to a different project targeting the .NET Framework (not Core), which I found the problem - - well, Visual Studio found the problem, as it popped a  CallbackOnCollectedDelegate exception right on my face! From then on it was easy to found the culprit and fix it.\r\n\r\nThese checks must be valuable for whoever will deal with unmanaged code calls in any platform, not only on Windows. But I couldn\u0027t find any information on it being available on .NET Core - the documentation is under .NET Framework. https://docs.microsoft.com/en-us/dotnet/framework/debug-trace-profile/diagnosing-errors-with-managed-debugging-assistants\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eafr1983\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-02-03T23:59:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3MzUzMjM1Mw==",
                                           "createdAt":  "2021-02-04T18:57:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@afr1983 Thank you for the feedback.  Our hope is that MDA\u0027s would not be needed and instead and instead provide useful information to the developer through exceptions. Would it be possible to share a test case demonstrating the issue where CallbackOnCollectedDelegate would have been useful? We would be interested in providing rich exception information that points to the source of the problem instead of throwing ExecutionEngineException\u0027s.",
                                           "updatedAt":  "2021-02-04T18:57:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3MzY1ODIyNA==",
                                           "createdAt":  "2021-02-04T22:58:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "reflectronic",
                                           "body":  "It seems like `callbackOnCollectedDelegate` specifically was addressed in 2.1: https://github.com/dotnet/coreclr/pull/15809 ",
                                           "updatedAt":  "2021-02-04T22:58:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7Dr3CT",
                                           "createdAt":  "2025-09-12T00:20:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of our [issue cleanup automation](https://github.com/dotnet/runtime/blob/main/docs/issue-cleanup.md).\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-12T00:20:55Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Managed Debugging Assistants",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr",
                       "no-recent-activity",
                       "backlog-cleanup-candidate"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/48284",
        "createdAt":  "2021-02-14T20:39:29Z",
        "number":  48284,
        "author":  "sfiruch",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-11-19T19:20:12Z",
        "body":  "### Description\r\n\r\nWhen running the following .NET 5.0 Core Console Application in Visual Studio with Debugger attached (F5), this program produces an internal CLR error approx. every fifth time it is started:\r\n\r\n```cs\r\nusing System;\r\n\r\nConsole.WriteLine($\"{TimeSpan.Zero:h\\\\:mm\\\\:ss\\\\.f,10}\");\r\n```\r\n\r\n\r\nExpected outcome (happens most of the time): `System.FormatException: Input string was not in a correct format.`\r\nActual outcome (happens sometimes): Program crashes with this stack trace\r\n```\r\nFatal error. Internal CLR error. (0x80131506)\r\n   at System.Buffer._Memmove(Byte ByRef, Byte ByRef, UIntPtr)\r\n   at System.Buffer.Memmove(Byte ByRef, Byte ByRef, UIntPtr)\r\n   at System.String.Ctor(System.ReadOnlySpan`1\u003cChar\u003e)\r\n   at System.Span`1[[System.Char, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ToString()\r\n   at System.Globalization.TimeSpanFormat.FormatCustomized(System.TimeSpan, System.ReadOnlySpan`1\u003cChar\u003e, System.Globalization.DateTimeFormatInfo, System.Text.StringBuilder)\r\n   at System.Globalization.TimeSpanFormat.TryFormat(System.TimeSpan, System.Span`1\u003cChar\u003e, Int32 ByRef, System.ReadOnlySpan`1\u003cChar\u003e, System.IFormatProvider)\r\n   at System.TimeSpan.TryFormat(System.Span`1\u003cChar\u003e, Int32 ByRef, System.ReadOnlySpan`1\u003cChar\u003e, System.IFormatProvider)\r\n   at System.Text.ValueStringBuilder.AppendFormatHelper(System.IFormatProvider, System.String, System.ParamsArray)\r\n   at System.String.FormatHelper(System.IFormatProvider, System.String, System.ParamsArray)\r\n   at System.String.Format(System.String, System.Object)\r\n   at \u003cProgram\u003e$.\u003cMain\u003e$(System.String[])\r\n```\r\n\r\n### Configuration\r\n\r\nEnvironment.OSVersion: `Microsoft Windows NT 10.0.19042.0`\r\nEnvironment.Version: `5.0.3`\r\nCPU: x64 (AnyCPU)\r\n\r\nHappens in Debug and Release mode\r\n\r\n### Regression?\r\n\r\nDon\u0027t know.\r\n\r\n### Other information\r\n\r\nI cannot reproduce the problem on the console. It repros only in Visual Studio, with debugger attached.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOLngjUQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3ODgzODM2OQ==",
                                           "createdAt":  "2021-02-14T20:39:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-02-14T20:39:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3ODg0MzcyNA==",
                                           "createdAt":  "2021-02-14T21:20:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "Are you F10 stepping over this line, F11 stepping into this line, or something else? My best guess is that the debugger is trying to show a data structure in the locals window but that the data structure hasn\u0027t yet been initialized.",
                                           "updatedAt":  "2021-02-14T21:20:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3ODg0NzY1MQ==",
                                           "createdAt":  "2021-02-14T21:52:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sfiruch",
                                           "body":  "This happens without stepping. F5 is all it takes.",
                                           "updatedAt":  "2021-02-14T21:52:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3ODg1NTE1Nw==",
                                           "createdAt":  "2021-02-14T22:49:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "@deiruch What is your `CultureInfo.CurrentCulture`? Also, could you please specify the VS version.",
                                           "updatedAt":  "2021-02-14T22:49:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3ODg1NjMyNA==",
                                           "createdAt":  "2021-02-14T22:59:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sfiruch",
                                           "body":  "InvariantCulture shows the same effect:\r\n```cs\r\nusing System;\r\nusing System.Globalization;\r\n\r\nCultureInfo.CurrentCulture = CultureInfo.InvariantCulture;\r\nConsole.WriteLine($\"{TimeSpan.Zero:h\\\\:mm\\\\:ss\\\\.f,10}\");\r\n```\r\n\r\nVisual Studio 16.8.5",
                                           "updatedAt":  "2021-02-14T22:59:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3ODg1NjkyNg==",
                                           "createdAt":  "2021-02-14T23:04:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "\u003e InvariantCulture shows the same effect:\r\n\u003e \r\n\u003e ```cs\r\n\u003e using System;\r\n\u003e using System.Globalization;\r\n\u003e \r\n\u003e CultureInfo.CurrentCulture = CultureInfo.InvariantCulture;\r\n\u003e Console.WriteLine($\"{TimeSpan.Zero:h\\\\:mm\\\\:ss\\\\.f,10}\");\r\n\u003e ```\r\n\u003e \r\n\u003e Visual Studio 16.8.5\r\n\r\nDo you place a breakpoint or just hit F5 and eventually the crash occurs? \r\nI have exactly the same setup and see no crashes so far.",
                                           "updatedAt":  "2021-02-14T23:04:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3ODg1NzE4OA==",
                                           "createdAt":  "2021-02-14T23:06:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sfiruch",
                                           "body":  "I just hit F5, without any breakpoints.",
                                           "updatedAt":  "2021-02-14T23:06:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3ODg3MTQyNA==",
                                           "createdAt":  "2021-02-15T00:31:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nWhen running the following .NET 5.0 Core Console Application in Visual Studio with Debugger attached (F5), this program produces an internal CLR error approx. every fifth time it is started:\r\n\r\n```cs\r\nusing System;\r\n\r\nConsole.WriteLine($\"{TimeSpan.Zero:h\\\\:mm\\\\:ss\\\\.f,10}\");\r\n```\r\n\r\n\r\nExpected outcome (happens most of the time): `System.FormatException: Input string was not in a correct format.`\r\nActual outcome (happens sometimes): Program crashes with this stack trace\r\n```\r\nFatal error. Internal CLR error. (0x80131506)\r\n   at System.Buffer._Memmove(Byte ByRef, Byte ByRef, UIntPtr)\r\n   at System.Buffer.Memmove(Byte ByRef, Byte ByRef, UIntPtr)\r\n   at System.String.Ctor(System.ReadOnlySpan`1\u003cChar\u003e)\r\n   at System.Span`1[[System.Char, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ToString()\r\n   at System.Globalization.TimeSpanFormat.FormatCustomized(System.TimeSpan, System.ReadOnlySpan`1\u003cChar\u003e, System.Globalization.DateTimeFormatInfo, System.Text.StringBuilder)\r\n   at System.Globalization.TimeSpanFormat.TryFormat(System.TimeSpan, System.Span`1\u003cChar\u003e, Int32 ByRef, System.ReadOnlySpan`1\u003cChar\u003e, System.IFormatProvider)\r\n   at System.TimeSpan.TryFormat(System.Span`1\u003cChar\u003e, Int32 ByRef, System.ReadOnlySpan`1\u003cChar\u003e, System.IFormatProvider)\r\n   at System.Text.ValueStringBuilder.AppendFormatHelper(System.IFormatProvider, System.String, System.ParamsArray)\r\n   at System.String.FormatHelper(System.IFormatProvider, System.String, System.ParamsArray)\r\n   at System.String.Format(System.String, System.Object)\r\n   at \u003cProgram\u003e$.\u003cMain\u003e$(System.String[])\r\n```\r\n\r\n### Configuration\r\n\r\nEnvironment.OSVersion: `Microsoft Windows NT 10.0.19042.0`\r\nEnvironment.Version: `5.0.3`\r\nCPU: x64 (AnyCPU)\r\n\r\nHappens in Debug and Release mode\r\n\r\n### Regression?\r\n\r\nDon\u0027t know.\r\n\r\n### Other information\r\n\r\nI cannot reproduce the problem on the console. It repros only in Visual Studio, with debugger attached.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edeiruch\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-02-15T00:31:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3ODg3MTUwNA==",
                                           "createdAt":  "2021-02-15T00:32:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Routing to diagnostics as it only happens under debugger.",
                                           "updatedAt":  "2021-02-15T00:32:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3OTAzMDg1MA==",
                                           "createdAt":  "2021-02-15T08:01:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "@deiruch Quick thing that could help narrow this quite a bit. What version of the VS debugger are you using?",
                                           "updatedAt":  "2021-02-15T08:20:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3OTEyMjI1Mg==",
                                           "createdAt":  "2021-02-15T10:25:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sfiruch",
                                           "body":  "\u003e @deiruch Quick thing that could help narrow this quite a bit. What version of the VS debugger are you using?\r\n\r\nWhere do I find the version?",
                                           "updatedAt":  "2021-02-15T10:25:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3OTYyNTI5Nw==",
                                           "createdAt":  "2021-02-16T06:46:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBgJdZQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sfiruch",
                                                                               "createdAt":  "2021-02-16T08:24:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "@deiruch I was able to repro the issue. Using JMC is the only way I\u0027ve found to repro. \r\n\r\nLooks like the unhandled exception hijack happened, then we were trying to notify the debugger of the second change exception and we started draining funcevals. One of them was to do a ToString on a `System.Span\u003cChar\u003e`, I can\u0027t seem to find what the debugger is evaluating (not sure if it\u0027s something in the exception, not sure if it\u0027s the string literal for the parameter of the string format. I can\u0027t find the reference to the string of byref param. One interesting thing is looking at the that the `FuncEvalHijackWorker`, we are working in preemptive mode, rather than in coop that we are expecting. This might be the reason I can\u0027t find the local.\r\n\r\n```\r\n000000A0189BB270 00007FFBCE64CF25 coreclr!EEPolicy::HandleFatalError + 185 at E:\\repos\\runtime\\src\\coreclr\\src\\vm\\eepolicy.cpp:765\r\n000000A0189BB880 00007FFBCE5D4FAC coreclr!CLRVectoredExceptionHandlerPhase2 + 721708 at E:\\repos\\runtime\\src\\coreclr\\src\\vm\\excep.cpp:7231\r\n000000A0189BB8E0 00007FFBCE524C6F coreclr!CLRVectoredExceptionHandler + 139 at E:\\repos\\runtime\\src\\coreclr\\src\\vm\\excep.cpp:7198\r\n000000A0189BB940 00007FFBCE524BAA coreclr!CLRVectoredExceptionHandlerShim + 234 at E:\\repos\\runtime\\src\\coreclr\\src\\vm\\excep.cpp:7937\r\n000000A0189BB990 00007FFC56EE85CC ntdll!RtlpCallVectoredHandlers + 264 at minkernel\\ntdll\\vectxcpt.c:204\r\n000000A0189BBA30 00007FFC56EBB576 ntdll!RtlDispatchException + 102 at minkernel\\ntos\\rtl\\amd64\\exdsptch.c:357\r\n000000A0189BBC40 00007FFC56F104AE ntdll!KiUserExceptionDispatch + 46 at minkernel\\ntos\\rtl\\amd64\\trampoln.asm:751\r\n000000A0189BC3C8 00007FFBCE53C5F0 coreclr!memcpy + 384 at d:\\A01\\_work\\19\\s\\src\\vctools\\crt\\vcruntime\\src\\string\\amd64\\memcpy.asm:300\r\n000000A0189BC3D0 00007FFBC997BA4B System_Private_CoreLib!System.Buffer._Memmove(Byte ByRef, Byte ByRef, UIntPtr) + 91 at /_/src/libraries/System.Private.CoreLib/src/System/Buffer.cs:509\r\n000000A0189BC400                  [InlinedCallFrame: 000000a0189bc400] \r\n000000A0189BC400                  [InlinedCallFrame: 000000a0189bc400] \r\n000000A0189BC3D0 00007ffbc997ba36 System.Private.CoreLib.dll!System.Buffer._Memmove(Byte ByRef, Byte ByRef, UIntPtr) + 70\r\n000000A0189BC4C0 00007ffbc997b972 System.Private.CoreLib.dll!System.Buffer.Memmove(Byte ByRef, Byte ByRef, UIntPtr) + 306\r\n000000A0189BC4F0 00007ffbc999fa03 System.Private.CoreLib.dll!System.String.Ctor(System.ReadOnlySpan`1) + 67\r\n000000A0189BC530 00007ffbc9c38cd9 System.Private.CoreLib.dll!System.Span`1[[System.Char, System.Private.CoreLib]].ToString() + 41\r\n000000A0189BC570 00007FFBCE539333 coreclr!CallDescrWorkerInternal + 131 at E:\\repos\\runtime\\src\\coreclr\\src\\vm\\amd64\\CallDescrWorkerAMD64.asm:100\r\n000000A0189BC5B0 00007FFBCE41D9FA coreclr!MethodDescCallSite::CallTargetWorker + 978 at E:\\repos\\runtime\\src\\coreclr\\src\\vm\\callhelpers.cpp:552\r\n000000A0189BC740 00007FFBCE773678 coreclr!FuncEvalWrapper + 52 at E:\\repos\\runtime\\src\\coreclr\\src\\debug\\ee\\funceval.cpp:3073\r\n000000A0189BC7A0 00007FFBCE772EA0 coreclr!DoNormalFuncEval + 1164 at E:\\repos\\runtime\\src\\coreclr\\src\\debug\\ee\\funceval.cpp:3448\r\n000000A0189BCAD0 00007FFBCE773B88 coreclr!GCProtectArgsAndDoNormalFuncEval + 796 at E:\\repos\\runtime\\src\\coreclr\\src\\debug\\ee\\funceval.cpp:3587\r\n000000A0189BCBB0                  [ProtectValueClassFrame: 000000a0189bcbb0] \r\n000000A0189BCCA0 00007FFBCE773486 coreclr!FuncEvalHijackRealWorker + 1062 at E:\\repos\\runtime\\src\\coreclr\\src\\debug\\ee\\funceval.cpp:3805\r\n000000A0189BCDE0 00007FFBCE775755 coreclr!FuncEvalHijackWorker + 389 at E:\\repos\\runtime\\src\\coreclr\\src\\debug\\ee\\funceval.cpp:3928\r\n000000A0189BCE28                  [FuncEvalFrame: 000000a0189bce28] \r\n000000A0189BCED0 00007FFBCE76968F coreclr!Debugger::ProcessAnyPendingEvals + 127 at E:\\repos\\runtime\\src\\coreclr\\src\\debug\\ee\\debugger.cpp:7934\r\n000000A0189BCF10 00007FFBCE76B2D0 coreclr!Debugger::SendException + 496 at E:\\repos\\runtime\\src\\coreclr\\src\\debug\\ee\\debugger.cpp:7876\r\n000000A0189BCFA0 00007FFBCE765DB3 coreclr!Debugger::LastChanceManagedException + 691 at E:\\repos\\runtime\\src\\coreclr\\src\\debug\\ee\\debugger.cpp:8774\r\n000000A0189BD0D0 00007FFBCE604DE5 coreclr!NotifyDebuggerLastChance + 109 at E:\\repos\\runtime\\src\\coreclr\\src\\vm\\excep.cpp:3604\r\n000000A0189BD190 00007FFBCE6088A6 coreclr!WatsonLastChance + 758 at E:\\repos\\runtime\\src\\coreclr\\src\\vm\\excep.cpp:3995\r\n000000A0189BD210 00007FFBCE603DBC coreclr!InternalUnhandledExceptionFilter_Worker + 844 at E:\\repos\\runtime\\src\\coreclr\\src\\vm\\excep.cpp:4836\r\n000000A0189BD330 00007FFBCE76FC5B coreclr!Debugger::UnhandledHijackWorker + 607 at E:\\repos\\runtime\\src\\coreclr\\src\\debug\\ee\\debugger.cpp:13658\r\n000000A0189BD910 00007FFBCE771505 coreclr!ExceptionHijackWorker + 197 at E:\\repos\\runtime\\src\\coreclr\\src\\debug\\ee\\debugger.cpp:13428\r\n000000A0189BD940 00007FFBCE53A9C0 coreclr!ExceptionHijack + 48 at E:\\repos\\runtime\\src\\coreclr\\src\\debug\\ee\\amd64\\dbghelpers.asm:89\r\n000000A0189BD968 000000A0189BD980 \r\n000000A0189BD970 000000A0189BDE70 \r\n000000A0189BD978 0000000000000001 \r\n000000A0189BE378                  [HelperMethodFrame: 000000a0189be378] \r\n000000A0189BE470 00007ffbc9a81e11 System.Private.CoreLib.dll!System.Globalization.TimeSpanFormat.FormatCustomized(System.TimeSpan, System.ReadOnlySpan`1, System.Globalization.DateTimeFormatInfo, System.Text.StringBuilder) + 1697\r\n```",
                                           "updatedAt":  "2021-02-16T06:47:07Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "TimeSpanFormat crashing with \"Fatal error. Internal CLR error. (0x80131506)\"",
        "labels":  [
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/49420",
        "createdAt":  "2021-03-10T07:46:51Z",
        "number":  49420,
        "author":  "eterekhin",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-05-17T22:27:27Z",
        "body":  "\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\nTo reproduce try evaluating ```WhileTrue()``` in VS for Mac, please\r\n```csharp \r\nusing System;\r\nusing System.Linq;\r\n\r\nnamespace calc\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n          \r\n        }\r\n\r\n        static void WhileTrue()\r\n        {\r\n            try\r\n            {\r\n                while (true)\r\n                {\r\n                    // any work here, below line added because of https://github.com/dotnet/runtime/issues/5724\r\n                    Enumerable.Range(1, 1000).ToArray();\r\n                }\r\n            }\r\n            catch\r\n            {\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nI\u0027ve got the message in console:\r\n\r\n```\r\nStack overflow\r\n   at calc.Program.Main(System.String[])    \r\n```\r\n\r\nAlso, evaluating methods like the one below crashes the process, as the debugger tries to abort the evaluation resulting in StackOverflow:\r\n```csharp\r\n        public static void Method()\r\n        {\r\n            try\r\n            {\r\n                Debugger.NotifyOfCrossThreadDependency();\r\n            }\r\n            catch (Exception e)\r\n            {\r\n            }\r\n        }\r\n\r\n```\r\n\r\nSeems that this can be encountered quite often when debugging an application that makes async calls (db, http, etc.)\r\n\r\n\u003c!--\r\n* Please share a clear and concise description of the problem.\r\n* Include minimal steps to reproduce the problem if possible. E.g.: the smallest possible code snippet; or a small repo to clone, with steps to run it.\r\n* What behavior are you seeing, and what behavior would you expect?\r\n  --\u003e\r\n\r\n### Configuration\r\nmacOS Catalina Version 10.15.5, x64\r\n\u003c!--\r\n* Which version of .NET is the code running on?\r\n* What OS and version, and what distro if applicable?\r\n* What is the architecture (x64, x86, ARM, ARM64)?\r\n* Do you know whether it is specific to that configuration?\r\n* If you\u0027re using Blazor, which web browser(s) do you see this issue in?\r\n  --\u003e\r\n\r\n### Regression?\r\nI was able to reproduce on .net 5 and .net core 3, maybe there is in earlier versions, I have not tested on them\r\n\u003c!--\r\n* Did this work in a previous build or release of .NET Core, or from .NET Framework? If you can try a previous release or build to find out, that can help us narrow down the problem. If you don\u0027t know, that\u0027s OK.\r\n  --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMEdgKg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5NTAzNjI1Mg==",
                                           "createdAt":  "2021-03-10T07:46:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-03-10T07:46:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5NTMyMjk3Mg==",
                                           "createdAt":  "2021-03-10T12:07:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\nTo reproduce try evaluating ```WhileTrue()``` in VS for Mac, please\r\n```csharp \r\nusing System;\r\nusing System.Linq;\r\n\r\nnamespace calc\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n          \r\n        }\r\n\r\n        static void WhileTrue()\r\n        {\r\n            try\r\n            {\r\n                while (true)\r\n                {\r\n                    // any work here, below line added because of https://github.com/dotnet/runtime/issues/5724\r\n                    Enumerable.Range(1, 1000).ToArray();\r\n                }\r\n            }\r\n            catch\r\n            {\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nI\u0027ve got the message in console:\r\n\r\n```\r\nStack overflow\r\n   at calc.Program.Main(System.String[])    \r\n```\r\n\r\nAlso, evaluating methods like the one below crashes the process, as the debugger tries to abort the evaluation resulting in StackOverflow:\r\n```csharp\r\n        public static void Method()\r\n        {\r\n            try\r\n            {\r\n                Debugger.NotifyOfCrossThreadDependency();\r\n            }\r\n            catch (Exception e)\r\n            {\r\n            }\r\n        }\r\n\r\n```\r\n\r\nSeems that this can be encountered quite often when debugging an application that makes async calls (db, http, etc.)\r\n\r\n\u003c!--\r\n* Please share a clear and concise description of the problem.\r\n* Include minimal steps to reproduce the problem if possible. E.g.: the smallest possible code snippet; or a small repo to clone, with steps to run it.\r\n* What behavior are you seeing, and what behavior would you expect?\r\n  --\u003e\r\n\r\n### Configuration\r\nmacOS Catalina Version 10.15.5, x64\r\n\u003c!--\r\n* Which version of .NET is the code running on?\r\n* What OS and version, and what distro if applicable?\r\n* What is the architecture (x64, x86, ARM, ARM64)?\r\n* Do you know whether it is specific to that configuration?\r\n* If you\u0027re using Blazor, which web browser(s) do you see this issue in?\r\n  --\u003e\r\n\r\n### Regression?\r\nI was able to reproduce on .net 5 and .net core 3, maybe there is in earlier versions, I have not tested on them\r\n\u003c!--\r\n* Did this work in a previous build or release of .NET Core, or from .NET Framework? If you can try a previous release or build to find out, that can help us narrow down the problem. If you don\u0027t know, that\u0027s OK.\r\n  --\u003e\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eeterekhin\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-03-10T12:07:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwOTk4NDA0Mg==",
                                           "createdAt":  "2021-03-30T07:28:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCEuvcQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eterekhin",
                                                                               "createdAt":  "2021-12-01T09:41:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "AndiRudi",
                                           "body":  "I think that this bug means, that the debugger always crashes when you want to open the list of entities in EF Core which is quite an important debugging feature....",
                                           "updatedAt":  "2021-03-30T07:28:45Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "StackOverflow while trying to abort evaluation",
        "labels":  [
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/49500",
        "createdAt":  "2021-03-11T20:04:22Z",
        "number":  49500,
        "author":  "vsfeedback",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-10T23:52:01Z",
        "body":  "_This issue has been moved from [a ticket on Developer Community](https://developercommunity2.visualstudio.com/t/net-core-31-remote-debugging-from-VS-2/1084386)._\n\n---\nHi,\nI have created a small dotnetcore application (attached) that uses GPIO interrupts on a Raspberry Pi.\n\nEnvironment:\n- Raspberry 3 with raspbian\n- .net core 3.1.5 and vsdbg installed according to this:\nhttps://github.com/Microsoft/MIEngine/wiki/Offroad-Debugging-of-.NET-Core-on-Linux---OSX-from-Visual-Studio\nand Scott Hanselman suggestions:\nhttps://www.hanselman.com/blog/RemoteDebuggingWithVSCodeOnWindowsToARaspberryPiUsingNETCoreOnARM.aspx\n- VS 2019 16.6.2 Community Edition\n\nThe application runs fine via ssh on the Raspberry Console.\nIf I try to debug it using the VSDbg (latest) Debugger it exits the moment the interrupt is triggered. I had it one time that the interrupt handler got called and the app exited then. In all other instances the application exited before reaching the Handler routine.\nThis is no crash, it seems that the debugger misinterprets the interrupt and closes the application. In my experience this is independent from the GPIO-Pin used.\nHere is a sample Debug Adapter Host Log:\n 1\u003e DebugAdapterHost version: 16.6.40406.1 commit:b280b02371734e7430f86e716b974ee2c22d015a\n 1\u003e Starting \u0027plink.exe\u0027 with arguments \u0027-i C:/Users/ur/source/repos/devpikey.ppk pi@devpi -batch -T /home/pi/vsdbg/vsdbg --interpreter=vscode\u0027\n 1\u003e WARNING: \u0027Language\u0027 not specified in engine registration!\n 1\u003e WARNING: \u0027LanguageId\u0027 not specified in engine registration!\n 1\u003e [DebugAdapter] --\u003e C (initialize-1): {\"type\":\"request\",\"command\":\"initialize\",\"arguments\":{\"pathFormat\":\"path\",\"clientID\":\"visualstudio\",\"clientName\":\"Visual Studio\",\"adapterID\":\"coreclr\",\"locale\":\"en-US\",\"linesStartAt1\":true,\"columnsStartAt1\":true,\"supportsVariableType\":true,\"supportsRunInTerminalRequest\":true,\"supportsMemoryReferences\":true,\"supportsProgressReporting\":true,\"supportsHandshakeRequest\":true},\"seq\":1}\n 1\u003e [DebugAdapter] \u003c--   R (initialize-1) [768 ms]: {\"seq\":0,\"type\":\"response\",\"request_seq\":1,\"success\":true,\"command\":\"initialize\",\"message\":\"\",\"body\":{\"supportsConfigurationDoneRequest\":true,\"supportsFunctionBreakpoints\":false,\"supportsConditionalBreakpoints\":true,\"supportsHitConditionalBreakpoints\":true,\"supportsEvaluateForHovers\":true,\"exceptionBreakpointFilters\":[{\"filter\":\"all\",\"label\":\"All Exceptions\",\"default\":false},{\"filter\":\"user-unhandled\",\"label\":\"User-Unhandled Exceptions\",\"default\":true}],\"supportsSetVariable\":true,\"supportsGotoTargetsRequest\":true,\"supportsModulesRequest\":true,\"additionalModuleColumns\":[{\"attributeName\":\"vsLoadAddress\",\"label\":\"Load Address\",\"type\":\"string\"},{\"attributeName\":\"vsPreferredLoadAddress\",\"label\":\"Preferred Load Address\",\"type\":\"string\"},{\"attributeName\":\"vsModuleSize\",\"label\":\"Module Size\",\"type\":\"number\"},{\"attributeName\":\"vsLoadOrder\",\"label\":\"Order\",\"type\":\"number\"},{\"attributeName\":\"vsTimestampUTC\",\"label\":\"Timestamp\",\"type\":\"unixTimestampUTC\"},{\"attributeName\":\"vsIs64Bit\",\"label\":\"64-bit\",\"type\":\"boolean\"},{\"attributeName\":\"vsAppDomain\",\"label\":\"AppDomain\",\"type\":\"string\"},{\"attributeName\":\"vsAppDomainId\",\"label\":\"AppDomainId\",\"type\":\"number\"}],\"supportedChecksumAlgorithms\":[\"MD5\",\"SHA1\",\"SHA256\"],\"supportsExceptionOptions\":true,\"supportsValueFormattingOptions\":true,\"supportsExceptionInfoRequest\":true,\"supportTerminateDebuggee\":true,\"supportsSetExpression\":true,\"supportsReadMemoryRequest\":true,\"supportsExceptionConditions\":true,\"supportsLoadSymbolsRequest\":true,\"supportsModuleSymbolSearchLog\":true,\"supportsDebuggerProperties\":true,\"supportsSetSymbolOptions\":true}}\n 1\u003e [DebugAdapter] --\u003e C (launch-2): {\"type\":\"request\",\"command\":\"launch\",\"arguments\":{\"name\":\".NET Core Launch\",\"type\":\"coreclr\",\"cwd\":\"/home/pi/VsDbgRaspberryPiInterrupt\",\"program\":\"/home/pi/dotnet/dotnet\",\"args\":\"VsDbgRaspberryPiInterrupt.dll\",\"request\":\"launch\"},\"seq\":2}\n 1\u003e [DebugAdapter] \u003c--   C (handshake-1): {\"seq\":1,\"type\":\"request\",\"command\":\"handshake\",\"arguments\":{\"value\":\"PabUPKlvE1UsPx3brhiNlasTpi08fdfcW52NAftcx+Q=\"}}\n 1\u003e [DebugAdapter] --\u003e R (handshake-1): {\"type\":\"response\",\"request_seq\":1,\"success\":true,\"command\":\"handshake\",\"body\":{\"signature\":\"5479wwQBEMqZbAPVusnkLf3lC2IwnsvD4XuuZZy9Y31OiY=\"},\"seq\":3}\n 1\u003e [DebugAdapter] \u003c--   E (output): {\"seq\":2,\"type\":\"event\",\"event\":\"output\",\"body\":{\"category\":\"console\",\"output\":\"-------------------------------------------------------------------\\nYou may only use the Microsoft .NET Core Debugger (vsdbg) with\\nVisual Studio Code, Visual Studio or Visual Studio for Mac software\\nto help you develop and test your applications.\\n-------------------------------------------------------------------\\n\"}}\n 1\u003e [DebugAdapter] \u003c--   R (launch-2) [17 ms]: {\"seq\":3,\"type\":\"response\",\"request_seq\":2,\"success\":true,\"command\":\"launch\"}\n 1\u003e [DebugAdapter] \u003c--   E (initialized): {\"seq\":4,\"type\":\"event\",\"event\":\"initialized\",\"body\":{}}\n 1\u003e [DebugAdapter] --\u003e C (setDebuggerProperty-4): {\"type\":\"request\",\"command\":\"setDebuggerProperty\",\"arguments\":{\"AllowOutOfProcessSymbols\":1},\"seq\":4}\n 1\u003e [DebugAdapter] --\u003e C (setDebuggerProperty-5): {\"type\":\"request\",\"command\":\"setDebuggerProperty\",\"arguments\":{\"DisableJITOptimization\":0},\"seq\":5}\n 1\u003e [DebugAdapter] --\u003e C (setDebuggerProperty-6): {\"type\":\"request\",\"command\":\"setDebuggerProperty\",\"arguments\":{\"EnableFastEvaluate\":1},\"seq\":6}\n 1\u003e [DebugAdapter] --\u003e C (setDebuggerProperty-7): {\"type\":\"request\",\"command\":\"setDebuggerProperty\",\"arguments\":{\"InterpreterOptions\":1},\"seq\":7}\n 1\u003e [DebugAdapter] --\u003e C (setDebuggerProperty-8): {\"type\":\"request\",\"command\":\"setDebuggerProperty\",\"arguments\":{\"JustMyCodeStepping\":1},\"seq\":8}\n 1\u003e [DebugAdapter] --\u003e C (setDebuggerProperty-9): {\"type\":\"request\",\"command\":\"setDebuggerProperty\",\"arguments\":{\"StopOnExceptionCrossingManagedBoundary\":0},\"seq\":9}\n 1\u003e [DebugAdapter] --\u003e C (setDebuggerProperty-10): {\"type\":\"request\",\"command\":\"setDebuggerProperty\",\"arguments\":{\"WarnIfNoUserCodeOnLaunch\":1},\"seq\":10}\n 1\u003e [DebugAdapter] --\u003e C (setDebuggerProperty-11): {\"type\":\"request\",\"command\":\"setDebuggerProperty\",\"arguments\":{\"EnableStepFiltering\":true},\"seq\":11}\n 1\u003e [DebugAdapter] --\u003e C (setSymbolOptions-12): {\"type\":\"request\",\"command\":\"setSymbolOptions\",\"arguments\":{\"symbolOptions\":{\"cachePath\":\"\",\"moduleFilter\":{\"mode\":\"loadAllButExcluded\",\"excludedModules\":[\"\"]}}},\"seq\":12}\n 1\u003e [DebugAdapter] \u003c--   R (setDebuggerProperty-4) [15 ms]: {\"seq\":5,\"type\":\"response\",\"request_seq\":4,\"success\":true,\"command\":\"setDebuggerProperty\",\"message\":\"\",\"body\":{}}\n 1\u003e [DebugAdapter] \u003c--   R (setDebuggerProperty-5) [14 ms]: {\"seq\":6,\"type\":\"response\",\"request_seq\":5,\"success\":true,\"command\":\"setDebuggerProperty\",\"message\":\"\",\"body\":{}}\n 1\u003e [DebugAdapter] \u003c--   R (setDebuggerProperty-6) [14 ms]: {\"seq\":7,\"type\":\"response\",\"request_seq\":6,\"success\":true,\"command\":\"setDebuggerProperty\",\"message\":\"\",\"body\":{}}\n 1\u003e [DebugAdapter] --\u003e C (setExceptionBreakpoints-13): {\"type\":\"request\",\"command\":\"setExceptionBreakpoints\",\"arguments\":{\"filters\":[],\"exceptionOptions\":[]},\"seq\":13}\n 1\u003e [DebugAdapter] \u003c--   R (setDebuggerProperty-7) [18 ms]: {\"seq\":8,\"type\":\"response\",\"request_seq\":7,\"success\":true,\"command\":\"setDebuggerProperty\",\"message\":\"\",\"body\":{}}\n 1\u003e [DebugAdapter] \u003c--   R (setDebuggerProperty-8) [18 ms]: {\"seq\":9,\"type\":\"response\",\"request_seq\":8,\"success\":true,\"command\":\"setDebuggerProperty\",\"message\":\"\",\"body\":{}}\n 1\u003e [DebugAdapter] \u003c--   R (setDebuggerProperty-9) [18 ms]: {\"seq\":10,\"type\":\"response\",\"request_seq\":9,\"success\":true,\"command\":\"setDebuggerProperty\",\"message\":\"\",\"body\":{}}\n 1\u003e [DebugAdapter] \u003c--   R (setDebuggerProperty-10) [18 ms]: {\"seq\":11,\"type\":\"response\",\"request_seq\":10,\"success\":true,\"command\":\"setDebuggerProperty\",\"message\":\"\",\"body\":{}}\n 1\u003e [DebugAdapter] \u003c--   R (setDebuggerProperty-11) [19 ms]: {\"seq\":12,\"type\":\"response\",\"request_seq\":11,\"success\":true,\"command\":\"setDebuggerProperty\",\"message\":\"\",\"body\":{}}\n 1\u003e [DebugAdapter] \u003c--   R (setSymbolOptions-12) [175 ms]: {\"seq\":13,\"type\":\"response\",\"request_seq\":12,\"success\":true,\"command\":\"setSymbolOptions\"}\n 1\u003e [DebugAdapter] \u003c--   R (setExceptionBreakpoints-13) [162 ms]: {\"seq\":14,\"type\":\"response\",\"request_seq\":13,\"success\":true,\"command\":\"setExceptionBreakpoints\"}\n 1\u003e [DebugAdapter] --\u003e C (configurationDone-14): {\"type\":\"request\",\"command\":\"configurationDone\",\"arguments\":{},\"seq\":14}\n 1\u003e [DebugAdapter] \u003c--   E (output): {\"seq\":15,\"type\":\"event\",\"event\":\"output\",\"body\":{\"category\":\"telemetry\",\"output\":\"VS/Diagnostics/Debugger/vsdbg/ProcessCreate\",\"data\":{\"VS.Diagnostics.Debugger.vsdbg.Distribution.Version\":\"10\",\"VS.Diagnostics.Debugger.vsdbg.Distribution.Name\":\"b7159782\",\"VS.Diagnostics.Debugger.vsdbg.OSFamily\":\"Linux\",\"VS.Diagnostics.Debugger.vsdbg.Version\":\"16.6.20415.1 commit:0184bb70e1ed40656c0dfa53125805036207007b\"}}}\n 1\u003e [DebugAdapter] \u003c--   E (process): {\"seq\":16,\"type\":\"event\",\"event\":\"process\",\"body\":{\"name\":\"/home/pi/dotnet/dotnet\",\"systemProcessId\":1651,\"startMethod\":\"launch\",\"pointerSize\":32}}\n 1\u003e [DebugAdapter] \u003c--   E (output): {\"seq\":17,\"type\":\"event\",\"event\":\"output\",\"body\":{\"category\":\"telemetry\",\"output\":\"VS/Diagnostics/Debugger/vsdbg/Launch\",\"data\":{\"VS.Diagnostics.Debugger.vsdbg.AdapterId\":\"coreclr\",\"VS.Diagnostics.Debugger.vsdbg.Launch.Duration\":200,\"VS.Diagnostics.Debugger.vsdbg.VisualizerFileUsed\":false,\"VS.Diagnostics.Debugger.vsdbg.TargetType\":\"Live\",\"VS.Diagnostics.Debugger.vsdbg.Distribution.Version\":\"10\",\"VS.Diagnostics.Debugger.vsdbg.Distribution.Name\":\"b7159782\",\"VS.Diagnostics.Debugger.vsdbg.OSFamily\":\"Linux\",\"VS.Diagnostics.Debugger.vsdbg.SourceFileMappings\":0,\"VS.Diagnostics.Debugger.vsdbg.Version\":\"16.6.20415.1 commit:0184bb70e1ed40656c0dfa53125805036207007b\"}}}\n 1\u003e [DebugAdapter] \u003c--   R (configurationDone-14) [14 ms]: {\"seq\":18,\"type\":\"response\",\"request_seq\":14,\"success\":true,\"command\":\"configurationDone\"}\n 1\u003e [DebugAdapter] \u003c--   E (module): {\"seq\":19,\"type\":\"event\",\"event\":\"module\",\"body\":{\"reason\":\"new\",\"module\":{\"id\":1000,\"name\":\"System.Private.CoreLib.dll\",\"path\":\"/home/pi/dotnet/shared/Microsoft.NETCore.App/3.1.5/System.Private.CoreLib.dll\",\"isOptimized\":true,\"isUserCode\":false,\"version\":\"4.700.20.26901\",\"symbolStatus\":\"Skipped loading symbols.\",\"vsLoadAddress\":\"1890004992\",\"vsPreferredLoadAddress\":\"1890004992\",\"vsModuleSize\":10014720,\"vsLoadOrder\":0,\"vsIs64Bit\":false,\"vsAppDomain\":\"DefaultDomain\",\"vsAppDomainId\":1},\"vsMessage\":\"Loaded \u0027/home/pi/dotnet/shared/Microsoft.NETCore.App/3.1.5/System.Private.CoreLib.dll\u0027. Skipped loading symbols. Module is optimized and the debugger option \u0027Just My Code\u0027 is enabled.\"}}\n 1\u003e [DebugAdapter] \u003c--   E (thread): {\"seq\":20,\"type\":\"event\",\"event\":\"thread\",\"body\":{\"reason\":\"started\",\"threadId\":1651}}\n 1\u003e [DebugAdapter] \u003c--   E (module): {\"seq\":21,\"type\":\"event\",\"event\":\"module\",\"body\":{\"reason\":\"new\",\"module\":{\"id\":1001,\"name\":\"VsDbgRaspberryPiInterrupt.dll\",\"path\":\"/home/pi/VsDbgRaspberryPiInterrupt/VsDbgRaspberryPiInterrupt.dll\",\"isOptimized\":false,\"isUserCode\":true,\"version\":\"1.00.0.0\",\"symbolStatus\":\"Symbols loaded.\",\"symbolFilePath\":\"/home/pi/VsDbgRaspberryPiInterrupt/VsDbgRaspberryPiInterrupt.pdb\",\"vsLoadAddress\":\"1966092288\",\"vsPreferredLoadAddress\":\"1966092288\",\"vsModuleSize\":5120,\"vsLoadOrder\":1,\"vsIs64Bit\":false,\"vsAppDomain\":\"clrhost\",\"vsAppDomainId\":1},\"vsMessage\":\"Loaded \u0027/home/pi/VsDbgRaspberryPiInterrupt/VsDbgRaspberryPiInterrupt.dll\u0027. Symbols loaded.\"}}\n 1\u003e [DebugAdapter] \u003c--   E (module): {\"seq\":22,\"type\":\"event\",\"event\":\"module\",\"body\":{\"reason\":\"new\",\"module\":{\"id\":1002,\"name\":\"System.Runtime.dll\",\"path\":\"/home/pi/dotnet/shared/Microsoft.NETCore.App/3.1.5/System.Runtime.dll\",\"isOptimized\":true,\"isUserCode\":false,\"version\":\"4.700.20.27001\",\"symbolStatus\":\"Skipped loading symbols.\",\"vsLoadAddress\":\"1956020224\",\"vsPreferredLoadAddress\":\"1956020224\",\"vsModuleSize\":57344,\"vsLoadOrder\":2,\"vsIs64Bit\":false,\"vsAppDomain\":\"clrhost\",\"vsAppDomainId\":1},\"vsMessage\":\"Loaded \u0027/home/pi/dotnet/shared/Microsoft.NETCore.App/3.1.5/System.Runtime.dll\u0027. Skipped loading symbols. Module is optimized and the debugger option \u0027Just My Code\u0027 is enabled.\"}}\n 1\u003e [DebugAdapter] \u003c--   E (module): {\"seq\":23,\"type\":\"event\",\"event\":\"module\",\"body\":{\"reason\":\"new\",\"module\":{\"id\":1003,\"name\":\"Unosquare.Raspberry.Abstractions.dll\",\"path\":\"/home/pi/VsDbgRaspberryPiInterrupt/Unosquare.Raspberry.Abstractions.dll\",\"isOptimized\":true,\"isUserCode\":false,\"version\":\"0.04.0.0\",\"symbolStatus\":\"Skipped loading symbols.\",\"vsLoadAddress\":\"1956003840\",\"vsPreferredLoadAddress\":\"1956003840\",\"vsModuleSize\":13312,\"vsLoadOrder\":3,\"vsIs64Bit\":false,\"vsAppDomain\":\"clrhost\",\"vsAppDomainId\":1},\"vsMessage\":\"Loaded \u0027/home/pi/VsDbgRaspberryPiInterrupt/Unosquare.Raspberry.Abstractions.dll\u0027. Skipped loading symbols. Module is optimized and the debugger option \u0027Just My Code\u0027 is enabled.\"}}\n 1\u003e [DebugAdapter] \u003c--   E (module): {\"seq\":24,\"type\":\"event\",\"event\":\"module\",\"body\":{\"reason\":\"new\",\"module\":{\"id\":1004,\"name\":\"System.Console.dll\",\"path\":\"/home/pi/dotnet/shared/Microsoft.NETCore.App/3.1.5/System.Console.dll\",\"isOptimized\":true,\"isUserCode\":false,\"version\":\"4.700.20.27001\",\"symbolStatus\":\"Skipped loading symbols.\",\"vsLoadAddress\":\"1955737600\",\"vsPreferredLoadAddress\":\"1955737600\",\"vsModuleSize\":200704,\"vsLoadOrder\":4,\"vsIs64Bit\":false,\"vsAppDomain\":\"clrhost\",\"vsAppDomainId\":1},\"vsMessage\":\"Loaded \u0027/home/pi/dotnet/shared/Microsoft.NETCore.App/3.1.5/System.Console.dll\u0027. Skipped loading symbols. Module is optimized and the debugger option \u0027Just My Code\u0027 is enabled.\"}}\n 1\u003e [DebugAdapter] \u003c--   E (module): {\"seq\":25,\"type\":\"event\",\"event\":\"module\",\"body\":{\"reason\":\"new\",\"module\":{\"id\":1005,\"name\":\"Unosquare.WiringPi.dll\",\"path\":\"/home/pi/VsDbgRaspberryPiInterrupt/Unosquare.WiringPi.dll\",\"isOptimized\":true,\"isUserCode\":false,\"version\":\"0.05.0.0\",\"symbolStatus\":\"Skipped loading symbols.\",\"vsLoadAddress\":\"1946001408\",\"vsPreferredLoadAddress\":\"1946001408\",\"vsModuleSize\":148480,\"vsLoadOrder\":5,\"vsIs64Bit\":false,\"vsAppDomain\":\"clrhost\",\"vsAppDomainId\":1},\"vsMessage\":\"Loaded \u0027/home/pi/VsDbgRaspberryPiInterrupt/Unosquare.WiringPi.dll\u0027. Skipped loading symbols. Module is optimized and the debugger option \u0027Just My Code\u0027 is enabled.\"}}\n 1\u003e [DebugAdapter] \u003c--   E (module): {\"seq\":26,\"type\":\"event\",\"event\":\"module\",\"body\":{\"reason\":\"new\",\"module\":{\"id\":1006,\"name\":\"netstandard.dll\",\"path\":\"/home/pi/dotnet/shared/Microsoft.NETCore.App/3.1.5/netstandard.dll\",\"isOptimized\":true,\"isUserCode\":false,\"version\":\"4.700.20.27001\",\"symbolStatus\":\"Skipped loading symbols.\",\"vsLoadAddress\":\"1955606528\",\"vsPreferredLoadAddress\":\"1955606528\",\"vsModuleSize\":114688,\"vsLoadOrder\":6,\"vsIs64Bit\":false,\"vsAppDomain\":\"clrhost\",\"vsAppDomainId\":1},\"vsMessage\":\"Loaded \u0027/home/pi/dotnet/shared/Microsoft.NETCore.App/3.1.5/netstandard.dll\u0027. Skipped loading symbols. Module is optimized and the debugger option \u0027Just My Code\u0027 is enabled.\"}}\n 1\u003e [DebugAdapter] \u003c--   E (module): {\"seq\":27,\"type\":\"event\",\"event\":\"module\",\"body\":{\"reason\":\"new\",\"module\":{\"id\":1007,\"name\":\"Unosquare.RaspberryIO.dll\",\"path\":\"/home/pi/VsDbgRaspberryPiInterrupt/Unosquare.RaspberryIO.dll\",\"isOptimized\":true,\"isUserCode\":false,\"version\":\"0.27.0.0\",\"symbolStatus\":\"Skipped loading symbols.\",\"vsLoadAddress\":\"1945870336\",\"vsPreferredLoadAddress\":\"1945870336\",\"vsModuleSize\":65536,\"vsLoadOrder\":7,\"vsIs64Bit\":false,\"vsAppDomain\":\"clrhost\",\"vsAppDomainId\":1},\"vsMessage\":\"Loaded \u0027/home/pi/VsDbgRaspberryPiInterrupt/Unosquare.RaspberryIO.dll\u0027. Skipped loading symbols. Module is optimized and the debugger option \u0027Just My Code\u0027 is enabled.\"}}\n 1\u003e [DebugAdapter] \u003c--   E (module): {\"seq\":28,\"type\":\"event\",\"event\":\"module\",\"body\":{\"reason\":\"new\",\"module\":{\"id\":1008,\"name\":\"System.Threading.dll\",\"path\":\"/home/pi/dotnet/shared/Microsoft.NETCore.App/3.1.5/System.Threading.dll\",\"isOptimized\":true,\"isUserCode\":false,\"version\":\"4.700.20.27001\",\"symbolStatus\":\"Skipped loading symbols.\",\"vsLoadAddress\":\"1945784320\",\"vsPreferredLoadAddress\":\"1945784320\",\"vsModuleSize\":86016,\"vsLoadOrder\":8,\"vsIs64Bit\":false,\"vsAppDomain\":\"clrhost\",\"vsAppDomainId\":1},\"vsMessage\":\"Loaded \u0027/home/pi/dotnet/shared/Microsoft.NETCore.App/3.1.5/System.Threading.dll\u0027. Skipped loading symbols. Module is optimized and the debugger option \u0027Just My Code\u0027 is enabled.\"}}\n 1\u003e [DebugAdapter] \u003c--   E (module): {\"seq\":29,\"type\":\"event\",\"event\":\"module\",\"body\":{\"reason\":\"new\",\"module\":{\"id\":1009,\"name\":\"System.Runtime.Extensions.dll\",\"path\":\"/home/pi/dotnet/shared/Microsoft.NETCore.App/3.1.5/System.Runtime.Extensions.dll\",\"isOptimized\":true,\"isUserCode\":false,\"version\":\"4.700.20.27001\",\"symbolStatus\":\"Skipped loading symbols.\",\"vsLoadAddress\":\"1945554944\",\"vsPreferredLoadAddress\":\"1945554944\",\"vsModuleSize\":229376,\"vsLoadOrder\":9,\"vsIs64Bit\":false,\"vsAppDomain\":\"clrhost\",\"vsAppDomainId\":1},\"vsMessage\":\"Loaded \u0027/home/pi/dotnet/shared/Microsoft.NETCore.App/3.1.5/System.Runtime.Extensions.dll\u0027. Skipped loading symbols. Module is optimized and the debugger option \u0027Just My Code\u0027 is enabled.\"}}\n 1\u003e [DebugAdapter] \u003c--   E (module): {\"seq\":30,\"type\":\"event\",\"event\":\"module\",\"body\":{\"reason\":\"new\",\"module\":{\"id\":1010,\"name\":\"System.Text.Encoding.Extensions.dll\",\"path\":\"/home/pi/dotnet/shared/Microsoft.NETCore.App/3.1.5/System.Text.Encoding.Extensions.dll\",\"isOptimized\":true,\"isUserCode\":false,\"version\":\"4.700.20.27001\",\"symbolStatus\":\"Skipped loading symbols.\",\"vsLoadAddress\":\"1945419776\",\"vsPreferredLoadAddress\":\"1945419776\",\"vsModuleSize\":16384,\"vsLoadOrder\":10,\"vsIs64Bit\":false,\"vsAppDomain\":\"clrhost\",\"vsAppDomainId\":1},\"vsMessage\":\"Loaded \u0027/home/pi/dotnet/shared/Microsoft.NETCore.App/3.1.5/System.Text.Encoding.Extensions.dll\u0027. Skipped loading symbols. Module is optimized and the debugger option \u0027Just My Code\u0027 is enabled.\"}}\n 1\u003e [DebugAdapter] \u003c--   E (output): {\"seq\":31,\"type\":\"event\",\"event\":\"output\",\"body\":{\"category\":\"stdout\",\"output\":\"Program Starting\\n\"}}\n 1\u003e [DebugAdapter] \u003c--   E (module): {\"seq\":32,\"type\":\"event\",\"event\":\"module\",\"body\":{\"reason\":\"new\",\"module\":{\"id\":1011,\"name\":\"Swan.Lite.dll\",\"path\":\"/home/pi/VsDbgRaspberryPiInterrupt/Swan.Lite.dll\",\"isOptimized\":true,\"isUserCode\":false,\"version\":\"2.03.0.0\",\"symbolStatus\":\"Skipped loading symbols.\",\"vsLoadAddress\":\"1901916160\",\"vsPreferredLoadAddress\":\"1901916160\",\"vsModuleSize\":189440,\"vsLoadOrder\":11,\"vsIs64Bit\":false,\"vsAppDomain\":\"clrhost\",\"vsAppDomainId\":1},\"vsMessage\":\"Loaded \u0027/home/pi/VsDbgRaspberryPiInterrupt/Swan.Lite.dll\u0027. Skipped loading symbols. Module is optimized and the debugger option \u0027Just My Code\u0027 is enabled.\"}}\n 1\u003e [DebugAdapter] \u003c--   E (module): {\"seq\":33,\"type\":\"event\",\"event\":\"module\",\"body\":{\"reason\":\"new\",\"module\":{\"id\":1012,\"name\":\"Swan.dll\",\"path\":\"/home/pi/VsDbgRaspberryPiInterrupt/Swan.dll\",\"isOptimized\":true,\"isUserCode\":false,\"version\":\"2.03.1.0\",\"symbolStatus\":\"Skipped loading symbols.\",\"vsLoadAddress\":\"1901756416\",\"vsPreferredLoadAddress\":\"1901756416\",\"vsModuleSize\":159232,\"vsLoadOrder\":12,\"vsIs64Bit\":false,\"vsAppDomain\":\"clrhost\",\"vsAppDomainId\":1},\"vsMessage\":\"Loaded \u0027/home/pi/VsDbgRaspberryPiInterrupt/Swan.dll\u0027. Skipped loading symbols. Module is optimized and the debugger option \u0027Just My Code\u0027 is enabled.\"}}\n 1\u003e [DebugAdapter] \u003c--   E (module): {\"seq\":34,\"type\":\"event\",\"event\":\"module\",\"body\":{\"reason\":\"new\",\"module\":{\"id\":1013,\"name\":\"System.IO.FileSystem.dll\",\"path\":\"/home/pi/dotnet/shared/Microsoft.NETCore.App/3.1.5/System.IO.FileSystem.dll\",\"isOptimized\":true,\"isUserCode\":false,\"version\":\"4.700.20.27001\",\"symbolStatus\":\"Skipped loading symbols.\",\"vsLoadAddress\":\"1901457408\",\"vsPreferredLoadAddress\":\"1901457408\",\"vsModuleSize\":233472,\"vsLoadOrder\":13,\"vsIs64Bit\":false,\"vsAppDomain\":\"clrhost\",\"vsAppDomainId\":1},\"vsMessage\":\"Loaded \u0027/home/pi/dotnet/shared/Microsoft.NETCore.App/3.1.5/System.IO.FileSystem.dll\u0027. Skipped loading symbols. Module is optimized and the debugger option \u0027Just My Code\u0027 is enabled.\"}}\n 1\u003e [DebugAdapter] \u003c--   E (module): {\"seq\":35,\"type\":\"event\",\"event\":\"module\",\"body\":{\"reason\":\"new\",\"module\":{\"id\":1014,\"name\":\"System.Memory.dll\",\"path\":\"/home/pi/dotnet/shared/Microsoft.NETCore.App/3.1.5/System.Memory.dll\",\"isOptimized\":true,\"isUserCode\":false,\"version\":\"4.700.20.27001\",\"symbolStatus\":\"Skipped loading symbols.\",\"vsLoadAddress\":\"1901260800\",\"vsPreferredLoadAddress\":\"1901260800\",\"vsModuleSize\":196608,\"vsLoadOrder\":14,\"vsIs64Bit\":false,\"vsAppDomain\":\"clrhost\",\"vsAppDomainId\":1},\"vsMessage\":\"Loaded \u0027/home/pi/dotnet/shared/Microsoft.NETCore.App/3.1.5/System.Memory.dll\u0027. Skipped loading symbols. Module is optimized and the debugger option \u0027Just My Code\u0027 is enabled.\"}}\n 1\u003e [DebugAdapter] \u003c--   E (module): {\"seq\":36,\"type\":\"event\",\"event\":\"module\",\"body\":{\"reason\":\"new\",\"module\":{\"id\":1015,\"name\":\"System.Collections.Concurrent.dll\",\"path\":\"/home/pi/dotnet/shared/Microsoft.NETCore.App/3.1.5/System.Collections.Concurrent.dll\",\"isOptimized\":true,\"isUserCode\":false,\"version\":\"4.700.20.27001\",\"symbolStatus\":\"Skipped loading symbols.\",\"vsLoadAddress\":\"1881411584\",\"vsPreferredLoadAddress\":\"1881411584\",\"vsModuleSize\":200704,\"vsLoadOrder\":15,\"vsIs64Bit\":false,\"vsAppDomain\":\"clrhost\",\"vsAppDomainId\":1},\"vsMessage\":\"Loaded \u0027/home/pi/dotnet/shared/Microsoft.NETCore.App/3.1.5/System.Collections.Concurrent.dll\u0027. Skipped loading symbols. Module is optimized and the debugger option \u0027Just My Code\u0027 is enabled.\"}}\n 1\u003e [DebugAdapter] \u003c--   E (module): {\"seq\":37,\"type\":\"event\",\"event\":\"module\",\"body\":{\"reason\":\"new\",\"module\":{\"id\":1016,\"name\":\"System.Linq.dll\",\"path\":\"/home/pi/dotnet/shared/Microsoft.NETCore.App/3.1.5/System.Linq.dll\",\"isOptimized\":true,\"isUserCode\":false,\"version\":\"4.700.20.27001\",\"symbolStatus\":\"Skipped loading symbols.\",\"vsLoadAddress\":\"1879654400\",\"vsPreferredLoadAddress\":\"1879654400\",\"vsModuleSize\":442368,\"vsLoadOrder\":16,\"vsIs64Bit\":false,\"vsAppDomain\":\"clrhost\",\"vsAppDomainId\":1},\"vsMessage\":\"Loaded \u0027/home/pi/dotnet/shared/Microsoft.NETCore.App/3.1.5/System.Linq.dll\u0027. Skipped loading symbols. Module is optimized and the debugger option \u0027Just My Code\u0027 is enabled.\"}}\n 1\u003e [DebugAdapter] \u003c--   E (module): {\"seq\":38,\"type\":\"event\",\"event\":\"module\",\"body\":{\"reason\":\"new\",\"module\":{\"id\":1017,\"name\":\"System.Collections.dll\",\"path\":\"/home/pi/dotnet/shared/Microsoft.NETCore.App/3.1.5/System.Collections.dll\",\"isOptimized\":true,\"isUserCode\":false,\"version\":\"4.700.20.27001\",\"symbolStatus\":\"Skipped loading symbols.\",\"vsLoadAddress\":\"1879293952\",\"vsPreferredLoadAddress\":\"1879293952\",\"vsModuleSize\":360448,\"vsLoadOrder\":17,\"vsIs64Bit\":false,\"vsAppDomain\":\"clrhost\",\"vsAppDomainId\":1},\"vsMessage\":\"Loaded \u0027/home/pi/dotnet/shared/Microsoft.NETCore.App/3.1.5/System.Collections.dll\u0027. Skipped loading symbols. Module is optimized and the debugger option \u0027Just My Code\u0027 is enabled.\"}}\n 1\u003e [DebugAdapter] \u003c--   E (module): {\"seq\":39,\"type\":\"event\",\"event\":\"module\",\"body\":{\"reason\":\"new\",\"module\":{\"id\":1018,\"name\":\"System.ObjectModel.dll\",\"path\":\"/home/pi/dotnet/shared/Microsoft.NETCore.App/3.1.5/System.ObjectModel.dll\",\"isOptimized\":true,\"isUserCode\":false,\"version\":\"4.700.20.27001\",\"symbolStatus\":\"Skipped loading symbols.\",\"vsLoadAddress\":\"1881313280\",\"vsPreferredLoadAddress\":\"1881313280\",\"vsModuleSize\":98304,\"vsLoadOrder\":18,\"vsIs64Bit\":false,\"vsAppDomain\":\"clrhost\",\"vsAppDomainId\":1},\"vsMessage\":\"Loaded \u0027/home/pi/dotnet/shared/Microsoft.NETCore.App/3.1.5/System.ObjectModel.dll\u0027. Skipped loading symbols. Module is optimized and the debugger option \u0027Just My Code\u0027 is enabled.\"}}\n 1\u003e [DebugAdapter] \u003c--   E (output): {\"seq\":40,\"type\":\"event\",\"event\":\"output\",\"body\":{\"category\":\"stdout\",\"output\":\"Press Return to exit Program\\n\"}}\n 1\u003e [DebugAdapter] \u003c--   E (exited): {\"seq\":41,\"type\":\"event\",\"event\":\"exited\",\"body\":{\"exitCode\":0}}\n 1\u003e [DebugAdapter] \u003c--   E (terminated): {\"seq\":42,\"type\":\"event\",\"event\":\"terminated\",\"body\":{}}\n 1\u003e [DebugAdapter] --\u003e C (disconnect-15): {\"type\":\"request\",\"command\":\"disconnect\",\"arguments\":{},\"seq\":15}\n 1\u003e [DebugAdapter] \u003c--   E (output): {\"seq\":43,\"type\":\"event\",\"event\":\"output\",\"body\":{\"category\":\"telemetry\",\"output\":\"VS/Diagnostics/Debugger/vsdbg/DebugCompleted\",\"data\":{\"VS.Diagnostics.Debugger.vsdbg.AdapterId\":\"coreclr\",\"VS.Diagnostics.Debugger.vsdbg.DebugCompleted.BreakCounter\":0,\"VS.Diagnostics.Debugger.vsdbg.Distribution.Version\":\"10\",\"VS.Diagnostics.Debugger.vsdbg.Distribution.Name\":\"b7159782\",\"VS.Diagnostics.Debugger.vsdbg.OSFamily\":\"Linux\",\"VS.Diagnostics.Debugger.vsdbg.Version\":\"16.6.20415.1 commit:0184bb70e1ed40656c0dfa53125805036207007b\"}}}\n 1\u003e [DebugAdapter] \u003c--   R (disconnect-15) [10 ms]: {\"seq\":44,\"type\":\"response\",\"request_seq\":15,\"success\":true,\"command\":\"disconnect\"}\n 1\u003e Debug adapter process exited.\n\nThanks in advance for your help\n\nBest Regards\nUwe\n\n---\n### Original Comments\n\n#### Feedback Bot on 6/19/2020, 01:41 AM: \n\n\u003cp\u003eWe have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.\u003c/p\u003e\n\n#### Feedback Bot on 6/27/2020, 01:30 PM: \n\n\u003cp\u003eThis issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.\u003c/p\u003e\n\n\n---\n### Original Solutions\n(no solutions)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOw1Fi8w==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5NzAxMjk4NQ==",
                                           "createdAt":  "2021-03-11T20:04:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n_This issue has been moved from [a ticket on Developer Community](https://developercommunity2.visualstudio.com/t/net-core-31-remote-debugging-from-VS-2/1084386)._\n\n---\nHi,\nI have created a small dotnetcore application (attached) that uses GPIO interrupts on a Raspberry Pi.\n\nEnvironment:\n- Raspberry 3 with raspbian\n- .net core 3.1.5 and vsdbg installed according to this:\nhttps://github.com/Microsoft/MIEngine/wiki/Offroad-Debugging-of-.NET-Core-on-Linux---OSX-from-Visual-Studio\nand Scott Hanselman suggestions:\nhttps://www.hanselman.com/blog/RemoteDebuggingWithVSCodeOnWindowsToARaspberryPiUsingNETCoreOnARM.aspx\n- VS 2019 16.6.2 Community Edition\n\nThe application runs fine via ssh on the Raspberry Console.\nIf I try to debug it using the VSDbg (latest) Debugger it exits the moment the interrupt is triggered. I had it one time that the interrupt handler got called and the app exited then. In all other instances the application exited before reaching the Handler routine.\nThis is no crash, it seems that the debugger misinterprets the interrupt and closes the application. In my experience this is independent from the GPIO-Pin used.\nHere is a sample Debug Adapter Host Log:\n 1\u003e DebugAdapterHost version: 16.6.40406.1 commit:b280b02371734e7430f86e716b974ee2c22d015a\n 1\u003e Starting \u0027plink.exe\u0027 with arguments \u0027-i C:/Users/ur/source/repos/devpikey.ppk pi@devpi -batch -T /home/pi/vsdbg/vsdbg --interpreter=vscode\u0027\n 1\u003e WARNING: \u0027Language\u0027 not specified in engine registration!\n 1\u003e WARNING: \u0027LanguageId\u0027 not specified in engine registration!\n 1\u003e [DebugAdapter] --\u003e C (initialize-1): {\"type\":\"request\",\"command\":\"initialize\",\"arguments\":{\"pathFormat\":\"path\",\"clientID\":\"visualstudio\",\"clientName\":\"Visual Studio\",\"adapterID\":\"coreclr\",\"locale\":\"en-US\",\"linesStartAt1\":true,\"columnsStartAt1\":true,\"supportsVariableType\":true,\"supportsRunInTerminalRequest\":true,\"supportsMemoryReferences\":true,\"supportsProgressReporting\":true,\"supportsHandshakeRequest\":true},\"seq\":1}\n 1\u003e [DebugAdapter] \u003c--   R (initialize-1) [768 ms]: {\"seq\":0,\"type\":\"response\",\"request_seq\":1,\"success\":true,\"command\":\"initialize\",\"message\":\"\",\"body\":{\"supportsConfigurationDoneRequest\":true,\"supportsFunctionBreakpoints\":false,\"supportsConditionalBreakpoints\":true,\"supportsHitConditionalBreakpoints\":true,\"supportsEvaluateForHovers\":true,\"exceptionBreakpointFilters\":[{\"filter\":\"all\",\"label\":\"All Exceptions\",\"default\":false},{\"filter\":\"user-unhandled\",\"label\":\"User-Unhandled Exceptions\",\"default\":true}],\"supportsSetVariable\":true,\"supportsGotoTargetsRequest\":true,\"supportsModulesRequest\":true,\"additionalModuleColumns\":[{\"attributeName\":\"vsLoadAddress\",\"label\":\"Load Address\",\"type\":\"string\"},{\"attributeName\":\"vsPreferredLoadAddress\",\"label\":\"Preferred Load Address\",\"type\":\"string\"},{\"attributeName\":\"vsModuleSize\",\"label\":\"Module Size\",\"type\":\"number\"},{\"attributeName\":\"vsLoadOrder\",\"label\":\"Order\",\"type\":\"number\"},{\"attributeName\":\"vsTimestampUTC\",\"label\":\"Timestamp\",\"type\":\"unixTimestampUTC\"},{\"attributeName\":\"vsIs64Bit\",\"label\":\"64-bit\",\"type\":\"boolean\"},{\"attributeName\":\"vsAppDomain\",\"label\":\"AppDomain\",\"type\":\"string\"},{\"attributeName\":\"vsAppDomainId\",\"label\":\"AppDomainId\",\"type\":\"number\"}],\"supportedChecksumAlgorithms\":[\"MD5\",\"SHA1\",\"SHA256\"],\"supportsExceptionOptions\":true,\"supportsValueFormattingOptions\":true,\"supportsExceptionInfoRequest\":true,\"supportTerminateDebuggee\":true,\"supportsSetExpression\":true,\"supportsReadMemoryRequest\":true,\"supportsExceptionConditions\":true,\"supportsLoadSymbolsRequest\":true,\"supportsModuleSymbolSearchLog\":true,\"supportsDebuggerProperties\":true,\"supportsSetSymbolOptions\":true}}\n 1\u003e [DebugAdapter] --\u003e C (launch-2): {\"type\":\"request\",\"command\":\"launch\",\"arguments\":{\"name\":\".NET Core Launch\",\"type\":\"coreclr\",\"cwd\":\"/home/pi/VsDbgRaspberryPiInterrupt\",\"program\":\"/home/pi/dotnet/dotnet\",\"args\":\"VsDbgRaspberryPiInterrupt.dll\",\"request\":\"launch\"},\"seq\":2}\n 1\u003e [DebugAdapter] \u003c--   C (handshake-1): {\"seq\":1,\"type\":\"request\",\"command\":\"handshake\",\"arguments\":{\"value\":\"PabUPKlvE1UsPx3brhiNlasTpi08fdfcW52NAftcx+Q=\"}}\n 1\u003e [DebugAdapter] --\u003e R (handshake-1): {\"type\":\"response\",\"request_seq\":1,\"success\":true,\"command\":\"handshake\",\"body\":{\"signature\":\"5479wwQBEMqZbAPVusnkLf3lC2IwnsvD4XuuZZy9Y31OiY=\"},\"seq\":3}\n 1\u003e [DebugAdapter] \u003c--   E (output): {\"seq\":2,\"type\":\"event\",\"event\":\"output\",\"body\":{\"category\":\"console\",\"output\":\"-------------------------------------------------------------------\\nYou may only use the Microsoft .NET Core Debugger (vsdbg) with\\nVisual Studio Code, Visual Studio or Visual Studio for Mac software\\nto help you develop and test your applications.\\n-------------------------------------------------------------------\\n\"}}\n 1\u003e [DebugAdapter] \u003c--   R (launch-2) [17 ms]: {\"seq\":3,\"type\":\"response\",\"request_seq\":2,\"success\":true,\"command\":\"launch\"}\n 1\u003e [DebugAdapter] \u003c--   E (initialized): {\"seq\":4,\"type\":\"event\",\"event\":\"initialized\",\"body\":{}}\n 1\u003e [DebugAdapter] --\u003e C (setDebuggerProperty-4): {\"type\":\"request\",\"command\":\"setDebuggerProperty\",\"arguments\":{\"AllowOutOfProcessSymbols\":1},\"seq\":4}\n 1\u003e [DebugAdapter] --\u003e C (setDebuggerProperty-5): {\"type\":\"request\",\"command\":\"setDebuggerProperty\",\"arguments\":{\"DisableJITOptimization\":0},\"seq\":5}\n 1\u003e [DebugAdapter] --\u003e C (setDebuggerProperty-6): {\"type\":\"request\",\"command\":\"setDebuggerProperty\",\"arguments\":{\"EnableFastEvaluate\":1},\"seq\":6}\n 1\u003e [DebugAdapter] --\u003e C (setDebuggerProperty-7): {\"type\":\"request\",\"command\":\"setDebuggerProperty\",\"arguments\":{\"InterpreterOptions\":1},\"seq\":7}\n 1\u003e [DebugAdapter] --\u003e C (setDebuggerProperty-8): {\"type\":\"request\",\"command\":\"setDebuggerProperty\",\"arguments\":{\"JustMyCodeStepping\":1},\"seq\":8}\n 1\u003e [DebugAdapter] --\u003e C (setDebuggerProperty-9): {\"type\":\"request\",\"command\":\"setDebuggerProperty\",\"arguments\":{\"StopOnExceptionCrossingManagedBoundary\":0},\"seq\":9}\n 1\u003e [DebugAdapter] --\u003e C (setDebuggerProperty-10): {\"type\":\"request\",\"command\":\"setDebuggerProperty\",\"arguments\":{\"WarnIfNoUserCodeOnLaunch\":1},\"seq\":10}\n 1\u003e [DebugAdapter] --\u003e C (setDebuggerProperty-11): {\"type\":\"request\",\"command\":\"setDebuggerProperty\",\"arguments\":{\"EnableStepFiltering\":true},\"seq\":11}\n 1\u003e [DebugAdapter] --\u003e C (setSymbolOptions-12): {\"type\":\"request\",\"command\":\"setSymbolOptions\",\"arguments\":{\"symbolOptions\":{\"cachePath\":\"\",\"moduleFilter\":{\"mode\":\"loadAllButExcluded\",\"excludedModules\":[\"\"]}}},\"seq\":12}\n 1\u003e [DebugAdapter] \u003c--   R (setDebuggerProperty-4) [15 ms]: {\"seq\":5,\"type\":\"response\",\"request_seq\":4,\"success\":true,\"command\":\"setDebuggerProperty\",\"message\":\"\",\"body\":{}}\n 1\u003e [DebugAdapter] \u003c--   R (setDebuggerProperty-5) [14 ms]: {\"seq\":6,\"type\":\"response\",\"request_seq\":5,\"success\":true,\"command\":\"setDebuggerProperty\",\"message\":\"\",\"body\":{}}\n 1\u003e [DebugAdapter] \u003c--   R (setDebuggerProperty-6) [14 ms]: {\"seq\":7,\"type\":\"response\",\"request_seq\":6,\"success\":true,\"command\":\"setDebuggerProperty\",\"message\":\"\",\"body\":{}}\n 1\u003e [DebugAdapter] --\u003e C (setExceptionBreakpoints-13): {\"type\":\"request\",\"command\":\"setExceptionBreakpoints\",\"arguments\":{\"filters\":[],\"exceptionOptions\":[]},\"seq\":13}\n 1\u003e [DebugAdapter] \u003c--   R (setDebuggerProperty-7) [18 ms]: {\"seq\":8,\"type\":\"response\",\"request_seq\":7,\"success\":true,\"command\":\"setDebuggerProperty\",\"message\":\"\",\"body\":{}}\n 1\u003e [DebugAdapter] \u003c--   R (setDebuggerProperty-8) [18 ms]: {\"seq\":9,\"type\":\"response\",\"request_seq\":8,\"success\":true,\"command\":\"setDebuggerProperty\",\"message\":\"\",\"body\":{}}\n 1\u003e [DebugAdapter] \u003c--   R (setDebuggerProperty-9) [18 ms]: {\"seq\":10,\"type\":\"response\",\"request_seq\":9,\"success\":true,\"command\":\"setDebuggerProperty\",\"message\":\"\",\"body\":{}}\n 1\u003e [DebugAdapter] \u003c--   R (setDebuggerProperty-10) [18 ms]: {\"seq\":11,\"type\":\"response\",\"request_seq\":10,\"success\":true,\"command\":\"setDebuggerProperty\",\"message\":\"\",\"body\":{}}\n 1\u003e [DebugAdapter] \u003c--   R (setDebuggerProperty-11) [19 ms]: {\"seq\":12,\"type\":\"response\",\"request_seq\":11,\"success\":true,\"command\":\"setDebuggerProperty\",\"message\":\"\",\"body\":{}}\n 1\u003e [DebugAdapter] \u003c--   R (setSymbolOptions-12) [175 ms]: {\"seq\":13,\"type\":\"response\",\"request_seq\":12,\"success\":true,\"command\":\"setSymbolOptions\"}\n 1\u003e [DebugAdapter] \u003c--   R (setExceptionBreakpoints-13) [162 ms]: {\"seq\":14,\"type\":\"response\",\"request_seq\":13,\"success\":true,\"command\":\"setExceptionBreakpoints\"}\n 1\u003e [DebugAdapter] --\u003e C (configurationDone-14): {\"type\":\"request\",\"command\":\"configurationDone\",\"arguments\":{},\"seq\":14}\n 1\u003e [DebugAdapter] \u003c--   E (output): {\"seq\":15,\"type\":\"event\",\"event\":\"output\",\"body\":{\"category\":\"telemetry\",\"output\":\"VS/Diagnostics/Debugger/vsdbg/ProcessCreate\",\"data\":{\"VS.Diagnostics.Debugger.vsdbg.Distribution.Version\":\"10\",\"VS.Diagnostics.Debugger.vsdbg.Distribution.Name\":\"b7159782\",\"VS.Diagnostics.Debugger.vsdbg.OSFamily\":\"Linux\",\"VS.Diagnostics.Debugger.vsdbg.Version\":\"16.6.20415.1 commit:0184bb70e1ed40656c0dfa53125805036207007b\"}}}\n 1\u003e [DebugAdapter] \u003c--   E (process): {\"seq\":16,\"type\":\"event\",\"event\":\"process\",\"body\":{\"name\":\"/home/pi/dotnet/dotnet\",\"systemProcessId\":1651,\"startMethod\":\"launch\",\"pointerSize\":32}}\n 1\u003e [DebugAdapter] \u003c--   E (output): {\"seq\":17,\"type\":\"event\",\"event\":\"output\",\"body\":{\"category\":\"telemetry\",\"output\":\"VS/Diagnostics/Debugger/vsdbg/Launch\",\"data\":{\"VS.Diagnostics.Debugger.vsdbg.AdapterId\":\"coreclr\",\"VS.Diagnostics.Debugger.vsdbg.Launch.Duration\":200,\"VS.Diagnostics.Debugger.vsdbg.VisualizerFileUsed\":false,\"VS.Diagnostics.Debugger.vsdbg.TargetType\":\"Live\",\"VS.Diagnostics.Debugger.vsdbg.Distribution.Version\":\"10\",\"VS.Diagnostics.Debugger.vsdbg.Distribution.Name\":\"b7159782\",\"VS.Diagnostics.Debugger.vsdbg.OSFamily\":\"Linux\",\"VS.Diagnostics.Debugger.vsdbg.SourceFileMappings\":0,\"VS.Diagnostics.Debugger.vsdbg.Version\":\"16.6.20415.1 commit:0184bb70e1ed40656c0dfa53125805036207007b\"}}}\n 1\u003e [DebugAdapter] \u003c--   R (configurationDone-14) [14 ms]: {\"seq\":18,\"type\":\"response\",\"request_seq\":14,\"success\":true,\"command\":\"configurationDone\"}\n 1\u003e [DebugAdapter] \u003c--   E (module): {\"seq\":19,\"type\":\"event\",\"event\":\"module\",\"body\":{\"reason\":\"new\",\"module\":{\"id\":1000,\"name\":\"System.Private.CoreLib.dll\",\"path\":\"/home/pi/dotnet/shared/Microsoft.NETCore.App/3.1.5/System.Private.CoreLib.dll\",\"isOptimized\":true,\"isUserCode\":false,\"version\":\"4.700.20.26901\",\"symbolStatus\":\"Skipped loading symbols.\",\"vsLoadAddress\":\"1890004992\",\"vsPreferredLoadAddress\":\"1890004992\",\"vsModuleSize\":10014720,\"vsLoadOrder\":0,\"vsIs64Bit\":false,\"vsAppDomain\":\"DefaultDomain\",\"vsAppDomainId\":1},\"vsMessage\":\"Loaded \u0027/home/pi/dotnet/shared/Microsoft.NETCore.App/3.1.5/System.Private.CoreLib.dll\u0027. Skipped loading symbols. Module is optimized and the debugger option \u0027Just My Code\u0027 is enabled.\"}}\n 1\u003e [DebugAdapter] \u003c--   E (thread): {\"seq\":20,\"type\":\"event\",\"event\":\"thread\",\"body\":{\"reason\":\"started\",\"threadId\":1651}}\n 1\u003e [DebugAdapter] \u003c--   E (module): {\"seq\":21,\"type\":\"event\",\"event\":\"module\",\"body\":{\"reason\":\"new\",\"module\":{\"id\":1001,\"name\":\"VsDbgRaspberryPiInterrupt.dll\",\"path\":\"/home/pi/VsDbgRaspberryPiInterrupt/VsDbgRaspberryPiInterrupt.dll\",\"isOptimized\":false,\"isUserCode\":true,\"version\":\"1.00.0.0\",\"symbolStatus\":\"Symbols loaded.\",\"symbolFilePath\":\"/home/pi/VsDbgRaspberryPiInterrupt/VsDbgRaspberryPiInterrupt.pdb\",\"vsLoadAddress\":\"1966092288\",\"vsPreferredLoadAddress\":\"1966092288\",\"vsModuleSize\":5120,\"vsLoadOrder\":1,\"vsIs64Bit\":false,\"vsAppDomain\":\"clrhost\",\"vsAppDomainId\":1},\"vsMessage\":\"Loaded \u0027/home/pi/VsDbgRaspberryPiInterrupt/VsDbgRaspberryPiInterrupt.dll\u0027. Symbols loaded.\"}}\n 1\u003e [DebugAdapter] \u003c--   E (module): {\"seq\":22,\"type\":\"event\",\"event\":\"module\",\"body\":{\"reason\":\"new\",\"module\":{\"id\":1002,\"name\":\"System.Runtime.dll\",\"path\":\"/home/pi/dotnet/shared/Microsoft.NETCore.App/3.1.5/System.Runtime.dll\",\"isOptimized\":true,\"isUserCode\":false,\"version\":\"4.700.20.27001\",\"symbolStatus\":\"Skipped loading symbols.\",\"vsLoadAddress\":\"1956020224\",\"vsPreferredLoadAddress\":\"1956020224\",\"vsModuleSize\":57344,\"vsLoadOrder\":2,\"vsIs64Bit\":false,\"vsAppDomain\":\"clrhost\",\"vsAppDomainId\":1},\"vsMessage\":\"Loaded \u0027/home/pi/dotnet/shared/Microsoft.NETCore.App/3.1.5/System.Runtime.dll\u0027. Skipped loading symbols. Module is optimized and the debugger option \u0027Just My Code\u0027 is enabled.\"}}\n 1\u003e [DebugAdapter] \u003c--   E (module): {\"seq\":23,\"type\":\"event\",\"event\":\"module\",\"body\":{\"reason\":\"new\",\"module\":{\"id\":1003,\"name\":\"Unosquare.Raspberry.Abstractions.dll\",\"path\":\"/home/pi/VsDbgRaspberryPiInterrupt/Unosquare.Raspberry.Abstractions.dll\",\"isOptimized\":true,\"isUserCode\":false,\"version\":\"0.04.0.0\",\"symbolStatus\":\"Skipped loading symbols.\",\"vsLoadAddress\":\"1956003840\",\"vsPreferredLoadAddress\":\"1956003840\",\"vsModuleSize\":13312,\"vsLoadOrder\":3,\"vsIs64Bit\":false,\"vsAppDomain\":\"clrhost\",\"vsAppDomainId\":1},\"vsMessage\":\"Loaded \u0027/home/pi/VsDbgRaspberryPiInterrupt/Unosquare.Raspberry.Abstractions.dll\u0027. Skipped loading symbols. Module is optimized and the debugger option \u0027Just My Code\u0027 is enabled.\"}}\n 1\u003e [DebugAdapter] \u003c--   E (module): {\"seq\":24,\"type\":\"event\",\"event\":\"module\",\"body\":{\"reason\":\"new\",\"module\":{\"id\":1004,\"name\":\"System.Console.dll\",\"path\":\"/home/pi/dotnet/shared/Microsoft.NETCore.App/3.1.5/System.Console.dll\",\"isOptimized\":true,\"isUserCode\":false,\"version\":\"4.700.20.27001\",\"symbolStatus\":\"Skipped loading symbols.\",\"vsLoadAddress\":\"1955737600\",\"vsPreferredLoadAddress\":\"1955737600\",\"vsModuleSize\":200704,\"vsLoadOrder\":4,\"vsIs64Bit\":false,\"vsAppDomain\":\"clrhost\",\"vsAppDomainId\":1},\"vsMessage\":\"Loaded \u0027/home/pi/dotnet/shared/Microsoft.NETCore.App/3.1.5/System.Console.dll\u0027. Skipped loading symbols. Module is optimized and the debugger option \u0027Just My Code\u0027 is enabled.\"}}\n 1\u003e [DebugAdapter] \u003c--   E (module): {\"seq\":25,\"type\":\"event\",\"event\":\"module\",\"body\":{\"reason\":\"new\",\"module\":{\"id\":1005,\"name\":\"Unosquare.WiringPi.dll\",\"path\":\"/home/pi/VsDbgRaspberryPiInterrupt/Unosquare.WiringPi.dll\",\"isOptimized\":true,\"isUserCode\":false,\"version\":\"0.05.0.0\",\"symbolStatus\":\"Skipped loading symbols.\",\"vsLoadAddress\":\"1946001408\",\"vsPreferredLoadAddress\":\"1946001408\",\"vsModuleSize\":148480,\"vsLoadOrder\":5,\"vsIs64Bit\":false,\"vsAppDomain\":\"clrhost\",\"vsAppDomainId\":1},\"vsMessage\":\"Loaded \u0027/home/pi/VsDbgRaspberryPiInterrupt/Unosquare.WiringPi.dll\u0027. Skipped loading symbols. Module is optimized and the debugger option \u0027Just My Code\u0027 is enabled.\"}}\n 1\u003e [DebugAdapter] \u003c--   E (module): {\"seq\":26,\"type\":\"event\",\"event\":\"module\",\"body\":{\"reason\":\"new\",\"module\":{\"id\":1006,\"name\":\"netstandard.dll\",\"path\":\"/home/pi/dotnet/shared/Microsoft.NETCore.App/3.1.5/netstandard.dll\",\"isOptimized\":true,\"isUserCode\":false,\"version\":\"4.700.20.27001\",\"symbolStatus\":\"Skipped loading symbols.\",\"vsLoadAddress\":\"1955606528\",\"vsPreferredLoadAddress\":\"1955606528\",\"vsModuleSize\":114688,\"vsLoadOrder\":6,\"vsIs64Bit\":false,\"vsAppDomain\":\"clrhost\",\"vsAppDomainId\":1},\"vsMessage\":\"Loaded \u0027/home/pi/dotnet/shared/Microsoft.NETCore.App/3.1.5/netstandard.dll\u0027. Skipped loading symbols. Module is optimized and the debugger option \u0027Just My Code\u0027 is enabled.\"}}\n 1\u003e [DebugAdapter] \u003c--   E (module): {\"seq\":27,\"type\":\"event\",\"event\":\"module\",\"body\":{\"reason\":\"new\",\"module\":{\"id\":1007,\"name\":\"Unosquare.RaspberryIO.dll\",\"path\":\"/home/pi/VsDbgRaspberryPiInterrupt/Unosquare.RaspberryIO.dll\",\"isOptimized\":true,\"isUserCode\":false,\"version\":\"0.27.0.0\",\"symbolStatus\":\"Skipped loading symbols.\",\"vsLoadAddress\":\"1945870336\",\"vsPreferredLoadAddress\":\"1945870336\",\"vsModuleSize\":65536,\"vsLoadOrder\":7,\"vsIs64Bit\":false,\"vsAppDomain\":\"clrhost\",\"vsAppDomainId\":1},\"vsMessage\":\"Loaded \u0027/home/pi/VsDbgRaspberryPiInterrupt/Unosquare.RaspberryIO.dll\u0027. Skipped loading symbols. Module is optimized and the debugger option \u0027Just My Code\u0027 is enabled.\"}}\n 1\u003e [DebugAdapter] \u003c--   E (module): {\"seq\":28,\"type\":\"event\",\"event\":\"module\",\"body\":{\"reason\":\"new\",\"module\":{\"id\":1008,\"name\":\"System.Threading.dll\",\"path\":\"/home/pi/dotnet/shared/Microsoft.NETCore.App/3.1.5/System.Threading.dll\",\"isOptimized\":true,\"isUserCode\":false,\"version\":\"4.700.20.27001\",\"symbolStatus\":\"Skipped loading symbols.\",\"vsLoadAddress\":\"1945784320\",\"vsPreferredLoadAddress\":\"1945784320\",\"vsModuleSize\":86016,\"vsLoadOrder\":8,\"vsIs64Bit\":false,\"vsAppDomain\":\"clrhost\",\"vsAppDomainId\":1},\"vsMessage\":\"Loaded \u0027/home/pi/dotnet/shared/Microsoft.NETCore.App/3.1.5/System.Threading.dll\u0027. Skipped loading symbols. Module is optimized and the debugger option \u0027Just My Code\u0027 is enabled.\"}}\n 1\u003e [DebugAdapter] \u003c--   E (module): {\"seq\":29,\"type\":\"event\",\"event\":\"module\",\"body\":{\"reason\":\"new\",\"module\":{\"id\":1009,\"name\":\"System.Runtime.Extensions.dll\",\"path\":\"/home/pi/dotnet/shared/Microsoft.NETCore.App/3.1.5/System.Runtime.Extensions.dll\",\"isOptimized\":true,\"isUserCode\":false,\"version\":\"4.700.20.27001\",\"symbolStatus\":\"Skipped loading symbols.\",\"vsLoadAddress\":\"1945554944\",\"vsPreferredLoadAddress\":\"1945554944\",\"vsModuleSize\":229376,\"vsLoadOrder\":9,\"vsIs64Bit\":false,\"vsAppDomain\":\"clrhost\",\"vsAppDomainId\":1},\"vsMessage\":\"Loaded \u0027/home/pi/dotnet/shared/Microsoft.NETCore.App/3.1.5/System.Runtime.Extensions.dll\u0027. Skipped loading symbols. Module is optimized and the debugger option \u0027Just My Code\u0027 is enabled.\"}}\n 1\u003e [DebugAdapter] \u003c--   E (module): {\"seq\":30,\"type\":\"event\",\"event\":\"module\",\"body\":{\"reason\":\"new\",\"module\":{\"id\":1010,\"name\":\"System.Text.Encoding.Extensions.dll\",\"path\":\"/home/pi/dotnet/shared/Microsoft.NETCore.App/3.1.5/System.Text.Encoding.Extensions.dll\",\"isOptimized\":true,\"isUserCode\":false,\"version\":\"4.700.20.27001\",\"symbolStatus\":\"Skipped loading symbols.\",\"vsLoadAddress\":\"1945419776\",\"vsPreferredLoadAddress\":\"1945419776\",\"vsModuleSize\":16384,\"vsLoadOrder\":10,\"vsIs64Bit\":false,\"vsAppDomain\":\"clrhost\",\"vsAppDomainId\":1},\"vsMessage\":\"Loaded \u0027/home/pi/dotnet/shared/Microsoft.NETCore.App/3.1.5/System.Text.Encoding.Extensions.dll\u0027. Skipped loading symbols. Module is optimized and the debugger option \u0027Just My Code\u0027 is enabled.\"}}\n 1\u003e [DebugAdapter] \u003c--   E (output): {\"seq\":31,\"type\":\"event\",\"event\":\"output\",\"body\":{\"category\":\"stdout\",\"output\":\"Program Starting\\n\"}}\n 1\u003e [DebugAdapter] \u003c--   E (module): {\"seq\":32,\"type\":\"event\",\"event\":\"module\",\"body\":{\"reason\":\"new\",\"module\":{\"id\":1011,\"name\":\"Swan.Lite.dll\",\"path\":\"/home/pi/VsDbgRaspberryPiInterrupt/Swan.Lite.dll\",\"isOptimized\":true,\"isUserCode\":false,\"version\":\"2.03.0.0\",\"symbolStatus\":\"Skipped loading symbols.\",\"vsLoadAddress\":\"1901916160\",\"vsPreferredLoadAddress\":\"1901916160\",\"vsModuleSize\":189440,\"vsLoadOrder\":11,\"vsIs64Bit\":false,\"vsAppDomain\":\"clrhost\",\"vsAppDomainId\":1},\"vsMessage\":\"Loaded \u0027/home/pi/VsDbgRaspberryPiInterrupt/Swan.Lite.dll\u0027. Skipped loading symbols. Module is optimized and the debugger option \u0027Just My Code\u0027 is enabled.\"}}\n 1\u003e [DebugAdapter] \u003c--   E (module): {\"seq\":33,\"type\":\"event\",\"event\":\"module\",\"body\":{\"reason\":\"new\",\"module\":{\"id\":1012,\"name\":\"Swan.dll\",\"path\":\"/home/pi/VsDbgRaspberryPiInterrupt/Swan.dll\",\"isOptimized\":true,\"isUserCode\":false,\"version\":\"2.03.1.0\",\"symbolStatus\":\"Skipped loading symbols.\",\"vsLoadAddress\":\"1901756416\",\"vsPreferredLoadAddress\":\"1901756416\",\"vsModuleSize\":159232,\"vsLoadOrder\":12,\"vsIs64Bit\":false,\"vsAppDomain\":\"clrhost\",\"vsAppDomainId\":1},\"vsMessage\":\"Loaded \u0027/home/pi/VsDbgRaspberryPiInterrupt/Swan.dll\u0027. Skipped loading symbols. Module is optimized and the debugger option \u0027Just My Code\u0027 is enabled.\"}}\n 1\u003e [DebugAdapter] \u003c--   E (module): {\"seq\":34,\"type\":\"event\",\"event\":\"module\",\"body\":{\"reason\":\"new\",\"module\":{\"id\":1013,\"name\":\"System.IO.FileSystem.dll\",\"path\":\"/home/pi/dotnet/shared/Microsoft.NETCore.App/3.1.5/System.IO.FileSystem.dll\",\"isOptimized\":true,\"isUserCode\":false,\"version\":\"4.700.20.27001\",\"symbolStatus\":\"Skipped loading symbols.\",\"vsLoadAddress\":\"1901457408\",\"vsPreferredLoadAddress\":\"1901457408\",\"vsModuleSize\":233472,\"vsLoadOrder\":13,\"vsIs64Bit\":false,\"vsAppDomain\":\"clrhost\",\"vsAppDomainId\":1},\"vsMessage\":\"Loaded \u0027/home/pi/dotnet/shared/Microsoft.NETCore.App/3.1.5/System.IO.FileSystem.dll\u0027. Skipped loading symbols. Module is optimized and the debugger option \u0027Just My Code\u0027 is enabled.\"}}\n 1\u003e [DebugAdapter] \u003c--   E (module): {\"seq\":35,\"type\":\"event\",\"event\":\"module\",\"body\":{\"reason\":\"new\",\"module\":{\"id\":1014,\"name\":\"System.Memory.dll\",\"path\":\"/home/pi/dotnet/shared/Microsoft.NETCore.App/3.1.5/System.Memory.dll\",\"isOptimized\":true,\"isUserCode\":false,\"version\":\"4.700.20.27001\",\"symbolStatus\":\"Skipped loading symbols.\",\"vsLoadAddress\":\"1901260800\",\"vsPreferredLoadAddress\":\"1901260800\",\"vsModuleSize\":196608,\"vsLoadOrder\":14,\"vsIs64Bit\":false,\"vsAppDomain\":\"clrhost\",\"vsAppDomainId\":1},\"vsMessage\":\"Loaded \u0027/home/pi/dotnet/shared/Microsoft.NETCore.App/3.1.5/System.Memory.dll\u0027. Skipped loading symbols. Module is optimized and the debugger option \u0027Just My Code\u0027 is enabled.\"}}\n 1\u003e [DebugAdapter] \u003c--   E (module): {\"seq\":36,\"type\":\"event\",\"event\":\"module\",\"body\":{\"reason\":\"new\",\"module\":{\"id\":1015,\"name\":\"System.Collections.Concurrent.dll\",\"path\":\"/home/pi/dotnet/shared/Microsoft.NETCore.App/3.1.5/System.Collections.Concurrent.dll\",\"isOptimized\":true,\"isUserCode\":false,\"version\":\"4.700.20.27001\",\"symbolStatus\":\"Skipped loading symbols.\",\"vsLoadAddress\":\"1881411584\",\"vsPreferredLoadAddress\":\"1881411584\",\"vsModuleSize\":200704,\"vsLoadOrder\":15,\"vsIs64Bit\":false,\"vsAppDomain\":\"clrhost\",\"vsAppDomainId\":1},\"vsMessage\":\"Loaded \u0027/home/pi/dotnet/shared/Microsoft.NETCore.App/3.1.5/System.Collections.Concurrent.dll\u0027. Skipped loading symbols. Module is optimized and the debugger option \u0027Just My Code\u0027 is enabled.\"}}\n 1\u003e [DebugAdapter] \u003c--   E (module): {\"seq\":37,\"type\":\"event\",\"event\":\"module\",\"body\":{\"reason\":\"new\",\"module\":{\"id\":1016,\"name\":\"System.Linq.dll\",\"path\":\"/home/pi/dotnet/shared/Microsoft.NETCore.App/3.1.5/System.Linq.dll\",\"isOptimized\":true,\"isUserCode\":false,\"version\":\"4.700.20.27001\",\"symbolStatus\":\"Skipped loading symbols.\",\"vsLoadAddress\":\"1879654400\",\"vsPreferredLoadAddress\":\"1879654400\",\"vsModuleSize\":442368,\"vsLoadOrder\":16,\"vsIs64Bit\":false,\"vsAppDomain\":\"clrhost\",\"vsAppDomainId\":1},\"vsMessage\":\"Loaded \u0027/home/pi/dotnet/shared/Microsoft.NETCore.App/3.1.5/System.Linq.dll\u0027. Skipped loading symbols. Module is optimized and the debugger option \u0027Just My Code\u0027 is enabled.\"}}\n 1\u003e [DebugAdapter] \u003c--   E (module): {\"seq\":38,\"type\":\"event\",\"event\":\"module\",\"body\":{\"reason\":\"new\",\"module\":{\"id\":1017,\"name\":\"System.Collections.dll\",\"path\":\"/home/pi/dotnet/shared/Microsoft.NETCore.App/3.1.5/System.Collections.dll\",\"isOptimized\":true,\"isUserCode\":false,\"version\":\"4.700.20.27001\",\"symbolStatus\":\"Skipped loading symbols.\",\"vsLoadAddress\":\"1879293952\",\"vsPreferredLoadAddress\":\"1879293952\",\"vsModuleSize\":360448,\"vsLoadOrder\":17,\"vsIs64Bit\":false,\"vsAppDomain\":\"clrhost\",\"vsAppDomainId\":1},\"vsMessage\":\"Loaded \u0027/home/pi/dotnet/shared/Microsoft.NETCore.App/3.1.5/System.Collections.dll\u0027. Skipped loading symbols. Module is optimized and the debugger option \u0027Just My Code\u0027 is enabled.\"}}\n 1\u003e [DebugAdapter] \u003c--   E (module): {\"seq\":39,\"type\":\"event\",\"event\":\"module\",\"body\":{\"reason\":\"new\",\"module\":{\"id\":1018,\"name\":\"System.ObjectModel.dll\",\"path\":\"/home/pi/dotnet/shared/Microsoft.NETCore.App/3.1.5/System.ObjectModel.dll\",\"isOptimized\":true,\"isUserCode\":false,\"version\":\"4.700.20.27001\",\"symbolStatus\":\"Skipped loading symbols.\",\"vsLoadAddress\":\"1881313280\",\"vsPreferredLoadAddress\":\"1881313280\",\"vsModuleSize\":98304,\"vsLoadOrder\":18,\"vsIs64Bit\":false,\"vsAppDomain\":\"clrhost\",\"vsAppDomainId\":1},\"vsMessage\":\"Loaded \u0027/home/pi/dotnet/shared/Microsoft.NETCore.App/3.1.5/System.ObjectModel.dll\u0027. Skipped loading symbols. Module is optimized and the debugger option \u0027Just My Code\u0027 is enabled.\"}}\n 1\u003e [DebugAdapter] \u003c--   E (output): {\"seq\":40,\"type\":\"event\",\"event\":\"output\",\"body\":{\"category\":\"stdout\",\"output\":\"Press Return to exit Program\\n\"}}\n 1\u003e [DebugAdapter] \u003c--   E (exited): {\"seq\":41,\"type\":\"event\",\"event\":\"exited\",\"body\":{\"exitCode\":0}}\n 1\u003e [DebugAdapter] \u003c--   E (terminated): {\"seq\":42,\"type\":\"event\",\"event\":\"terminated\",\"body\":{}}\n 1\u003e [DebugAdapter] --\u003e C (disconnect-15): {\"type\":\"request\",\"command\":\"disconnect\",\"arguments\":{},\"seq\":15}\n 1\u003e [DebugAdapter] \u003c--   E (output): {\"seq\":43,\"type\":\"event\",\"event\":\"output\",\"body\":{\"category\":\"telemetry\",\"output\":\"VS/Diagnostics/Debugger/vsdbg/DebugCompleted\",\"data\":{\"VS.Diagnostics.Debugger.vsdbg.AdapterId\":\"coreclr\",\"VS.Diagnostics.Debugger.vsdbg.DebugCompleted.BreakCounter\":0,\"VS.Diagnostics.Debugger.vsdbg.Distribution.Version\":\"10\",\"VS.Diagnostics.Debugger.vsdbg.Distribution.Name\":\"b7159782\",\"VS.Diagnostics.Debugger.vsdbg.OSFamily\":\"Linux\",\"VS.Diagnostics.Debugger.vsdbg.Version\":\"16.6.20415.1 commit:0184bb70e1ed40656c0dfa53125805036207007b\"}}}\n 1\u003e [DebugAdapter] \u003c--   R (disconnect-15) [10 ms]: {\"seq\":44,\"type\":\"response\",\"request_seq\":15,\"success\":true,\"command\":\"disconnect\"}\n 1\u003e Debug adapter process exited.\n\nThanks in advance for your help\n\nBest Regards\nUwe\n\n---\n### Original Comments\n\n#### Feedback Bot on 6/19/2020, 01:41 AM: \n\n\u003cp\u003eWe have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.\u003c/p\u003e\n\n#### Feedback Bot on 6/27/2020, 01:30 PM: \n\n\u003cp\u003eThis issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.\u003c/p\u003e\n\n\n---\n### Original Solutions\n(no solutions)\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003evsfeedback\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-03-11T20:04:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DUWLz",
                                           "createdAt":  "2025-09-10T23:52:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of our [issue cleanup automation](https://github.com/dotnet/runtime/blob/main/docs/issue-cleanup.md).\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-10T23:52:00Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  ".net core 3.1 remote debugging from VS 2019 CE to Raspberry PI - vsdbg exits when the app wants to handle a GPIO-interrupt",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr",
                       "no-recent-activity",
                       "backlog-cleanup-candidate"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/49664",
        "createdAt":  "2021-03-15T19:02:25Z",
        "number":  49664,
        "author":  "josalem",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBjinlA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "srxqds",
                                            "createdAt":  "2021-03-16T00:07:36Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-04-11T22:06:58Z",
        "body":  "\u003e Great writeup! Any further suggestions for improving the readability of the library is highly welcomed.\r\n\r\nSure, I think my main challenges were (1) picking out the small portions of identifiers that were the important distinctive part within otherwise very long names, and (2) the abstractions that made typical datastructures and operations like array, pointer, indexing or derefencing more opaque.\r\n\r\nSuggestions:\r\n1. Now that type names show up in functions there is probably good benefit to using more compact naming choices. For example perhaps thread_session_state -\u003e tsession\r\n2. Converging on a single definition of growable array and linked list rather than using wrapper abstractions. (dictionary too, but maybe at lower priority)\r\n3. Where possible avoid using verbose iterator patterns and instead use simple C operators. For example growable array could expose the a T* and a length to use in a for loop with incrementing index variable. Linked list could expose a node with T* next field that can be dereferenced and it is null at the end.\r\n4. Reconsider if we are getting enough value from the getter/setter function pattern vs. directly accessing the fields? If we want a visually distinctive indicator of public/private to catch accidental misuse, perhaps a compact naming convention such as \u0027all private fields start with _\u0027 would suffice?\r\n\r\n_Originally posted by @noahfalk in https://github.com/dotnet/runtime/issues/49542#issuecomment-797812907_\r\n\r\nReply:\r\nI need to put focus on Mono runtime Diagnostic features at the moment, but could make a pass after that looking into some changes to compact names.\r\n\r\nFor arrays we already have a len and data functions that can be used directly to iterate arrays. Guess we could complement for similar things for list, but still keep abstraction not exposing the underlying implementations.\r\n\r\nWe could probably do other things to compact code when using iterators, like having a for loop macro that will take care of begin/end, next, value so you just code the inner parts of the loop having access to the value on each iteration, but no need to write the boiler plait code over and over again.\r\n\r\nGetter/Setter have some nice features and capabilities, we have introduce them in Mono as well in some places, but I believe the main issue is increase length in identifiers. If we can make struct member names more compact (but they still need to be clear and understandable) that will of course have positive side effects of the rest of the code. A parallel option could be to change how the getter and setters are used to simplify reading. Instead of:\r\n\r\n`ep_sequence_point_get_thread_sequence_numbers_ref (instance)`\r\n\r\nwe could do:\r\n\r\n`ep_sequence_point_get_ref (instance, thread_sequence_numbers)`\r\n\r\nand compacting some identifiers we could get:\r\n\r\n`ep_seq_point_get_ref (instance, tseq_nums)`\r\n\r\nThat will turn the getter into a function first taking struct instance as first parameter and field as second, but still keep the logic of getter (and inline function, or direct struct member access under the hood). Personally I think that increase readability a lot since you can just look at the last part to detect operator and the last parameter to see the member.\r\n\r\nAlternative:\r\n\r\n`ep_get_ref (seq_point, instance, tseq_nums)`\r\n\r\nI believe setters could be done something like this:\r\n\r\n`ep_seq_point_set (instance, tseq_nums) = 2`\r\n\r\nAlternative:\r\n\r\n`ep_set (seq_point, instance, tseq_nums) = 2`\r\n\r\nOriginally written by @lateralusX",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOWagO6g==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5OTY3NTQ0OA==",
                                           "createdAt":  "2021-03-15T19:02:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-03-15T19:02:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5OTY3NTYzNQ==",
                                           "createdAt":  "2021-03-15T19:02:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\u003e Great writeup! Any further suggestions for improving the readability of the library is highly welcomed.\r\n\r\nSure, I think my main challenges were (1) picking out the small portions of identifiers that were the important distinctive part within otherwise very long names, and (2) the abstractions that made typical datastructures and operations like array, pointer, indexing or derefencing more opaque.\r\n\r\nSuggestions:\r\n1. Now that type names show up in functions there is probably good benefit to using more compact naming choices. For example perhaps thread_session_state -\u003e tsession\r\n2. Converging on a single definition of growable array and linked list rather than using wrapper abstractions. (dictionary too, but maybe at lower priority)\r\n3. Where possible avoid using verbose iterator patterns and instead use simple C operators. For example growable array could expose the a T* and a length to use in a for loop with incrementing index variable. Linked list could expose a node with T* next field that can be dereferenced and it is null at the end.\r\n4. Reconsider if we are getting enough value from the getter/setter function pattern vs. directly accessing the fields? If we want a visually distinctive indicator of public/private to catch accidental misuse, perhaps a compact naming convention such as \u0027all private fields start with _\u0027 would suffice?\r\n\r\n_Originally posted by @noahfalk in https://github.com/dotnet/runtime/issues/49542#issuecomment-797812907_\r\n\r\nReply:\r\nI need to put focus on Mono runtime Diagnostic features at the moment, but could make a pass after that looking into some changes to compact names.\r\n\r\nFor arrays we already have a len and data functions that can be used directly to iterate arrays. Guess we could complement for similar things for list, but still keep abstraction not exposing the underlying implementations.\r\n\r\nWe could probably do other things to compact code when using iterators, like having a for loop macro that will take care of begin/end, next, value so you just code the inner parts of the loop having access to the value on each iteration, but no need to write the boiler plait code over and over again.\r\n\r\nGetter/Setter have some nice features and capabilities, we have introduce them in Mono as well in some places, but I believe the main issue is increase length in identifiers. If we can make struct member names more compact (but they still need to be clear and understandable) that will of course have positive side effects of the rest of the code. A parallel option could be to change how the getter and setters are used to simplify reading. Instead of:\r\n\r\n`ep_sequence_point_get_thread_sequence_numbers_ref (instance)`\r\n\r\nwe could do:\r\n\r\n`ep_sequence_point_get_ref (instance, thread_sequence_numbers)`\r\n\r\nand compacting some identifiers we could get:\r\n\r\n`ep_seq_point_get_ref (instance, tseq_nums)`\r\n\r\nThat will turn the getter into a function first taking struct instance as first parameter and field as second, but still keep the logic of getter (and inline function, or direct struct member access under the hood). Personally I think that increase readability a lot since you can just look at the last part to detect operator and the last parameter to see the member.\r\n\r\nAlternative:\r\n\r\n`ep_get_ref (seq_point, instance, tseq_nums)`\r\n\r\nI believe setters could be done something like this:\r\n\r\n`ep_seq_point_set (instance, tseq_nums) = 2`\r\n\r\nAlternative:\r\n\r\n`ep_set (seq_point, instance, tseq_nums) = 2`\r\n\r\nOriginally written by @lateralusX\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejosalem\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`EventPipe`, `area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-03-15T19:02:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5OTY3ODgxMQ==",
                                           "createdAt":  "2021-03-15T19:07:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBjjF1Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "noahfalk",
                                                                               "createdAt":  "2021-03-16T01:53:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "josalem",
                                           "body":  "I created a separate issue to consolidate this conversation and get it off a closed PR 😄.\r\n\r\nMy 2 cents: I don\u0027t think we should bother with attempting to fix the macros that mask the C++ and C differences, e.g., the getter/setter pairs. This library is written in C now, so I\u0027d rather get rid of the complexities of shimming between two feature sets. Specifically, I don\u0027t see ArrayLists, Lists, or HashMaps as key differentiators between the coreclr and Mono, so it seems fruitless to try and shim these container types now that we\u0027ve shifted to only using the C implementation. What are peoples\u0027 thoughts on just writing up a set of basic container classes that live in `src/native` somewhere and are usable throughout the shared code between Mono and CoreCLR?",
                                           "updatedAt":  "2021-03-15T19:07:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5OTY5NjM4Mg==",
                                           "createdAt":  "2021-03-15T19:33:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBjh-8g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "josalem",
                                                                               "createdAt":  "2021-03-15T20:46:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkoritzinsky",
                                                                               "createdAt":  "2021-03-15T22:02:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e writing up a set of basic container classes that live in src/native somewhere and are usable throughout the shared code\r\n\r\n+1. I have made similar comment in one of the EventPipe rewrite reviews. I think it can even start as something specific to eventpipe, and generalized later as needed.",
                                           "updatedAt":  "2021-03-15T19:33:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5OTcxNzgwNw==",
                                           "createdAt":  "2021-03-15T20:09:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBjhcOQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "josalem",
                                                                               "createdAt":  "2021-03-15T20:47:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "\u003e What are peoples\u0027 thoughts on just writing up a set of basic container classes that live in `src/native` somewhere and are usable throughout the shared code between Mono and CoreCLR?\r\n\r\n`src/mono/mono/eglib` does not depend on the rest of mono, is pure C.  A lot of it is not relevant, but, for example, `GSList`, `GList`, `GHashTable`, `GPtrArray`, etc could be shared.  (I think their only dependency on the rest of eglib is `g_malloc`/`g_free`.)  We would need to break up the monolithic glib.h header, but that would be a good thing, IMO.",
                                           "updatedAt":  "2021-03-15T20:11:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5OTc0Mjc2NA==",
                                           "createdAt":  "2021-03-15T20:50:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "josalem",
                                           "body":  "That sounds like a good starting point, @lambdageek. `alloc`/`free` are already shimmed in the EventPipe library, so it should be pretty easy to just use the container classes and not worry about runtime dependencies. We should keep that in mind whenever we decide to do this work.",
                                           "updatedAt":  "2021-03-15T20:50:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwMDA0MjI1Nw==",
                                           "createdAt":  "2021-03-16T07:59:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lateralusX",
                                           "body":  "Current EventPipe shim for Mono runtime already uses eglib for all container type implementations, so if we standardize on that, we have something that\u0027s already been well tested together with EventPipe library, but if we are going to break them out that will come with some refactoring as @lambdageek pointed out and we will need a way to associate custom allocators as well as maybe name adjustments unless we think the eglib naming will be something to preserve in generalized container library shared between runtimes. Another way could be to take needed container implementations from eglib, split it up into separate headers and source files under native, adjust naming and allocators and then let libraries like EventPipe use those sources in its library build.\r\n\r\nShorten the getter/setters that I suggested above would also address the issue with long names, simplify ability to spot important relevant parts when names get longer, I believe that would greatly improve readability, but need to take it for a test ride in some compact code to see how well it plays out.",
                                           "updatedAt":  "2021-03-16T08:01:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5L9jdj",
                                           "createdAt":  "2022-10-11T09:49:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCtpo6g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2022-10-11T14:49:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "lateralusX",
                                           "body":  "\u003e Current EventPipe shim for Mono runtime already uses eglib for all container type implementations, so if we standardize on that, we have something that\u0027s already been well tested together with EventPipe library, but if we are going to break them out that will come with some refactoring as @lambdageek pointed out and we will need a way to associate custom allocators as well as maybe name adjustments unless we think the eglib naming will be something to preserve in generalized container library shared between runtimes. Another way could be to take needed container implementations from eglib, split it up into separate headers and source files under native, adjust naming and allocators and then let libraries like EventPipe use those sources in its library build.\r\n\u003e \r\n\u003e Shorten the getter/setters that I suggested above would also address the issue with long names, simplify ability to spot important relevant parts when names get longer, I believe that would greatly improve readability, but need to take it for a test ride in some compact code to see how well it plays out.\r\n\r\n@lambdageek, @noahfalk, @davmason @tommcdon, @jkotas, @LakshanF, @AaronRobinsonMSFT:\r\n\r\nI\u0027m thinking about rebooting this initiative, sharing a set of eglib container types used in EventPipe with all runtimes. That would remove all the container abstractions from EventPipe shim API and simplify port of EventPipe to more runtimes. It is also a \"blocker\" doing other kinds of enhancements to the library at the moment so if we are OK pursuing that, I would start up some prototype work coming weeks.",
                                           "updatedAt":  "2022-10-11T09:50:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5L_E65",
                                           "createdAt":  "2022-10-11T14:51:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "I think there is value in doing this in the long term. I\u0027m not privy to all the other possible enhancements that EventPipe might benefit from so not in a position to say this is higher priority or not. Is there a collection of possible work items in this space?",
                                           "updatedAt":  "2022-10-11T14:51:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MC2gn",
                                           "createdAt":  "2022-10-12T08:50:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lateralusX",
                                           "body":  "\u003e I think there is value in doing this in the long term. I\u0027m not privy to all the other possible enhancements that EventPipe might benefit from so not in a position to say this is higher priority or not. Is there a collection of possible work items in this space?\r\n\r\nIn all discussions we had so far related to the potential work as described in this issue, leads back to breaking out the containers as its starting point. There are other things described in this issue that could be done first, but that is mainly internal \"cosmetic\" changes to EventPipe library and won\u0027t have any direct impact on initiatives taking the library to new runtimes/platforms, so from that perspective, breaking out the containers would probably be the work item having the most impact.",
                                           "updatedAt":  "2022-10-12T08:50:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Zl0mz",
                                           "createdAt":  "2023-04-11T10:37:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC5pfxA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2023-04-11T14:45:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "noahfalk",
                                                                               "createdAt":  "2023-04-11T22:07:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2023-04-11T22:10:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "lateralusX",
                                           "body":  "Containers are now shared, src/native/containers and used by EventPipe, simplify the runtime shim as well as usage patterns through EventPipe.",
                                           "updatedAt":  "2023-04-11T10:37:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZqA7q",
                                           "createdAt":  "2023-04-11T22:06:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "Thanks @lateralusX! That was a very nice step 👍 ",
                                           "updatedAt":  "2023-04-11T22:06:58Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "Improve readability of C EventPipe",
        "labels":  [
                       "enhancement",
                       "EventPipe",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/50264",
        "createdAt":  "2021-03-25T23:24:13Z",
        "number":  50264,
        "author":  "davmason",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-03-25T23:24:18Z",
        "body":  "Right now there is no documentation saying what is legal to call from a profiler created native thread without calling `ICorProfilerInfo4::InitializeCurrentThread()`. We have implied documentation in the fact that the methods have contracts with \"EE_THREAD_NOT_REQUIRED\" in https://github.com/dotnet/runtime/blob/main/src/coreclr/vm/proftoeeinterfaceimpl.cpp.\r\n\r\n#50080 replaced `EE_THREAD_NOT_REQUIRED` with an empty ifdef, it would be awesome if we could document the APIs formally and be able to delete the `EE_THREAD_NOT_REQUIRED` contracts.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMCTEKA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNzcxNTg4MA==",
                                           "createdAt":  "2021-03-25T23:24:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nRight now there is no documentation saying what is legal to call from a profiler created native thread without calling `ICorProfilerInfo4::InitializeCurrentThread()`. We have implied documentation in the fact that the methods have contracts with \"EE_THREAD_NOT_REQUIRED\" in https://github.com/dotnet/runtime/blob/main/src/coreclr/vm/proftoeeinterfaceimpl.cpp.\r\n\r\n#50080 replaced `EE_THREAD_NOT_REQUIRED` with an empty ifdef, it would be awesome if we could document the APIs formally and be able to delete the `EE_THREAD_NOT_REQUIRED` contracts.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edavmason\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003edavmason\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-03-25T23:24:18Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Document which profiler APIs are legal to call from a non managed thread",
        "labels":  [
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/50442",
        "createdAt":  "2021-03-30T19:26:53Z",
        "number":  50442,
        "author":  "omajid",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-02-13T17:14:40Z",
        "body":  "`debugshim.cpp`\u0027s `CLRDebuggingImpl::OpenVirtualProcess` method obtains handles to a bunch of libraries:\r\n\r\nhttps://github.com/dotnet/runtime/blob/b23205f59ab3853e4b6b43f91a7ca3900c0cc7d0/src/coreclr/debug/shim/debugshim.cpp#L172\r\n\r\nhttps://github.com/dotnet/runtime/blob/b23205f59ab3853e4b6b43f91a7ca3900c0cc7d0/src/coreclr/debug/shim/debugshim.cpp#L193\r\n\r\nhttps://github.com/dotnet/runtime/blob/b23205f59ab3853e4b6b43f91a7ca3900c0cc7d0/src/coreclr/debug/shim/debugshim.cpp#L249\r\n\r\nBut those handles are not kept around and are not used to close the libraries.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPeLGeg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxMDUxOTgyNQ==",
                                           "createdAt":  "2021-03-30T19:26:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n`debugshim.cpp`\u0027s `CLRDebuggingImpl::OpenVirtualProcess` method obtains handles to a bunch of libraries:\r\n\r\nhttps://github.com/dotnet/runtime/blob/b23205f59ab3853e4b6b43f91a7ca3900c0cc7d0/src/coreclr/debug/shim/debugshim.cpp#L172\r\n\r\nhttps://github.com/dotnet/runtime/blob/b23205f59ab3853e4b6b43f91a7ca3900c0cc7d0/src/coreclr/debug/shim/debugshim.cpp#L193\r\n\r\nhttps://github.com/dotnet/runtime/blob/b23205f59ab3853e4b6b43f91a7ca3900c0cc7d0/src/coreclr/debug/shim/debugshim.cpp#L249\r\n\r\nBut those handles are not kept around and are not used to close the libraries.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eomajid\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-03-30T19:26:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxMjYxMDQ2NA==",
                                           "createdAt":  "2021-04-02T16:45:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@omajid thank you for the bug report! Feel free to send us a PR if you are interested in contributing a fix.",
                                           "updatedAt":  "2021-04-02T16:45:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MDg0OTg4NA==",
                                           "createdAt":  "2021-05-13T21:37:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "We\u0027ve decided that due to the public interface nature of dbgshim, and the backwards compatibility nature nature of its use case, it\u0027s better to leave this as is, as it could break users of the API with a double free as the contract was not explicit.",
                                           "updatedAt":  "2021-05-13T21:37:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc494sZ6",
                                           "createdAt":  "2022-02-13T17:14:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "deeprobin",
                                           "body":  "https://github.com/dotnet/runtime/pull/51758#issuecomment-868209276\r\n@tommcdon\r\nWhat is the situation regarding this?",
                                           "updatedAt":  "2022-02-13T17:14:39Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "debugshim.cpp opens and gets handles to libraries, but doesn\u0027t close or store the handles",
        "labels":  [
                       "help wanted",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/50949",
        "createdAt":  "2021-04-08T18:11:08Z",
        "number":  50949,
        "author":  "viewizard",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-03-27T10:21:42Z",
        "body":  "Hello,\r\n\r\nI am refactor netcoredbg debugger code and would like ask your help in clarification of `ICorDebugEval2::NewParameterizedObjectNoConstructor` work.\r\n\r\nI found https://docs.microsoft.com/en-us/dotnet/framework/unmanaged-api/debugging/icordebugeval2-newparameterizedobjectnoconstructor-method\r\nwith description provided `Instantiates a new parameterized type object of the specified class without attempting to call a constructor method.`.\r\nMy test shows, that this method call static constructor, is not this mean that \"NoConstructor\" really call constructor? I am just confused by this method name, could you please confirm that static constructor are called?\r\n\r\nI would like use it at static fields evaluation by `ICorDebugType::GetStaticFieldValue` and I found, that `ICorDebugType::GetStaticFieldValue` return `S_OK` even if static constructor was not previously called for type. Is the any way I could detect this? If no, is it safe call `ICorDebugEval2::NewParameterizedObjectNoConstructor` (that I believe call static constructor only once for type) unlimited times?\r\n\r\nJust to be sure, I am right that `ICorDebugEval2::NewParameterizedObjectNoConstructor` don\u0027t execute normal constructor or finalizer by some reason in some case (I see we have `ICorDebugEval2::NewParameterizedObject` for this, but I better ask), and will not change debuggee process state in any way except user code execution in static constructor?\r\n\r\nCC @alpencolt ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOWIGeQg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNjAzMjI1Ng==",
                                           "createdAt":  "2021-04-08T18:11:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-04-08T18:11:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNjAzMzk5OA==",
                                           "createdAt":  "2021-04-08T18:13:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nHello,\r\n\r\nI am refactor netcoredbg debugger code and would like ask your help in clarification of `ICorDebugEval2::NewParameterizedObjectNoConstructor` work.\r\n\r\nI found https://docs.microsoft.com/en-us/dotnet/framework/unmanaged-api/debugging/icordebugeval2-newparameterizedobjectnoconstructor-method\r\nwith description provided `Instantiates a new parameterized type object of the specified class without attempting to call a constructor method.`.\r\nMy test shows, that this method call static constructor, is not this mean that \"NoConstructor\" really call constructor? I am just confused by this method name, could you please confirm that static constructor are called?\r\n\r\nI would like use it at static fields evaluation by `ICorDebugType::GetStaticFieldValue` and I found, that `ICorDebugType::GetStaticFieldValue` return `S_OK` even if static constructor was not previously called for type. Is the any way I could detect this? If no, is it safe call `ICorDebugEval2::NewParameterizedObjectNoConstructor` (that I believe call static constructor only once for type) unlimited times?\r\n\r\nJust to be sure, I am right that `ICorDebugEval2::NewParameterizedObjectNoConstructor` don\u0027t execute normal constructor or finalizer by some reason in some case (I see we have `ICorDebugEval2::NewParameterizedObject` for this, but I better ask), and will not change debuggee process state in any way except user code execution in static constructor?\r\n\r\nCC @alpencolt \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eviewizard\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `question`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-04-08T18:13:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YgZ5C",
                                           "createdAt":  "2023-03-27T10:21:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "viewizard",
                                           "body":  "CC  @gbalykov",
                                           "updatedAt":  "2023-03-27T10:21:41Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Questions about ICorDebugEval2::NewParameterizedObjectNoConstructor",
        "labels":  [
                       "question",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/51224",
        "createdAt":  "2021-04-14T10:40:39Z",
        "number":  51224,
        "author":  "joemey",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-04-15T19:20:43Z",
        "body":  "### Description\r\n\r\nPressing ctrl+c in the console window of an console application does not kill the debugging session but leaves the debugger in an unresponsive state. \r\n\r\nThe `Console.CancelKeyPress` event will be executed (and breakpoints will be executed) but after the event is handled the application will hang (and no tasks will be executed).\r\n\r\nRunning this on the command line with `dotnet run` or by running the executable directly will terminate the program as expected\r\n\r\nthe main thread of the following program will always be stuck with the this stacktrace\r\n\r\n```\r\nSystem.Private.CoreLib.dll!System.Threading.ManualResetEventSlim.Wait\r\nSystem.Private.CoreLib.dll!System.Threading.ManualResetEventSlim.Wait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken)\r\nSystem.Private.CoreLib.dll!System.Threading.Tasks.Task.SpinThenBlockingWait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken)\r\nSystem.Private.CoreLib.dll!System.Threading.Tasks.Task.InternalWaitCore(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken)\r\nSystem.Private.CoreLib.dll!System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(System.Threading.Tasks.Task task)\r\nSystem.Private.CoreLib.dll!System.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nConsoleApp1.dll!\u003cProgram\u003e$.\u003cMain\u003e(string[] args)\r\n```\r\n\r\n```c#\r\nusing System;\r\nusing System.Threading.Tasks;\r\n\r\nConsole.WriteLine(\"press ctrl+c to cancel\");\r\nvar tcs = new TaskCompletionSource\u003cbool\u003e(TaskCreationOptions.RunContinuationsAsynchronously);\r\nConsole.CancelKeyPress += (_, e) =\u003e\r\n{\r\n    tcs.TrySetResult(true);\r\n    //e.Cancel = true;              \u003c-- uncomment to make it work\r\n};\r\nawait tcs.Task.ConfigureAwait(false);\r\nConsole.WriteLine(\"done\");\r\n```\r\n\r\nI found this in a bigger application with async I/O loops, where some threads seemed to be stuck in `NotifyOfCrossThreadDependencySlow` similar to #42375 after the debugger got stuck.\r\n\r\n### Configuration\r\n\r\n.NET 5.0.4 (5.0.201 SDK)\r\nVisual Studio 16.9.2\r\nWindows 10 (2004)\r\nx86 and x64\r\n\r\n### Regression?\r\n\r\nUnknown\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMN9MMA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxOTk0MDQwMA==",
                                           "createdAt":  "2021-04-15T00:47:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nPressing ctrl+c in the console window of an console application does not kill the debugging session but leaves the debugger in an unresponsive state. \r\n\r\nThe `Console.CancelKeyPress` event will be executed (and breakpoints will be executed) but after the event is handled the application will hang (and no tasks will be executed).\r\n\r\nRunning this on the command line with `dotnet run` or by running the executable directly will terminate the program as expected\r\n\r\nthe main thread of the following program will always be stuck with the this stacktrace\r\n\r\n```\r\nSystem.Private.CoreLib.dll!System.Threading.ManualResetEventSlim.Wait\r\nSystem.Private.CoreLib.dll!System.Threading.ManualResetEventSlim.Wait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken)\r\nSystem.Private.CoreLib.dll!System.Threading.Tasks.Task.SpinThenBlockingWait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken)\r\nSystem.Private.CoreLib.dll!System.Threading.Tasks.Task.InternalWaitCore(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken)\r\nSystem.Private.CoreLib.dll!System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(System.Threading.Tasks.Task task)\r\nSystem.Private.CoreLib.dll!System.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nConsoleApp1.dll!\u003cProgram\u003e$.\u003cMain\u003e(string[] args)\r\n```\r\n\r\n```c#\r\nusing System;\r\nusing System.Threading.Tasks;\r\n\r\nConsole.WriteLine(\"press ctrl+c to cancel\");\r\nvar tcs = new TaskCompletionSource\u003cbool\u003e(TaskCreationOptions.RunContinuationsAsynchronously);\r\nConsole.CancelKeyPress += (_, e) =\u003e\r\n{\r\n    tcs.TrySetResult(true);\r\n    //e.Cancel = true;              \u003c-- uncomment to make it work\r\n};\r\nawait tcs.Task.ConfigureAwait(false);\r\nConsole.WriteLine(\"done\");\r\n```\r\n\r\nI found this in a bigger application with async I/O loops, where some threads seemed to be stuck in `NotifyOfCrossThreadDependencySlow` similar to #42375 after the debugger got stuck.\r\n\r\n### Configuration\r\n\r\n.NET 5.0.4 (5.0.201 SDK)\r\nVisual Studio 16.9.2\r\nWindows 10 (2004)\r\nx86 and x64\r\n\r\n### Regression?\r\n\r\nUnknown\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejoemey\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `area-System.Threading`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-04-15T00:47:12Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Debugger deadlock/hang after ctrl+c in a console application",
        "labels":  [
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/51546",
        "createdAt":  "2021-04-20T03:50:42Z",
        "number":  51546,
        "author":  "fandrei",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCZ3MHA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "noseratio",
                                            "createdAt":  "2022-04-26T13:22:08Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2021-04-20T20:46:48Z",
        "body":  "### Description\r\n\r\nIn .NET classic, the Debugger.Break() function signals a breakpoint to the attached debugger, or shows the \"attach the debugger\" window if it\u0027s not attached and then signals a breakpoint.\r\nIn .NET 5 \u0026 6 this func signals a breakpoint to the attached debugger, but does nothing when the debugger is not attached.\r\n\r\nDebugger.Launch() shows the \"attach the debugger\" window and then signals a breakpoint, but does nothing when the debugger is already attached.\r\n\r\nSo, Debugger.Break() behaves differently in .NET \u003e= 5 and there are no functions that can reproduce behavior of Debugger.Break() in .NET classic - and it was very useful.\r\n\r\n### Configuration\r\n\r\n.NET 5, 6\r\nWindows 10 x64\r\n\r\n### Regression?\r\n\r\nYes, comparing to .NET 4.8",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMRb8xw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyMjk1MzEzNQ==",
                                           "createdAt":  "2021-04-20T03:50:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nIn .NET classic, the Debugger.Break() function signals a breakpoint to the attached debugger, or shows the \"attach the debugger\" window if it\u0027s not attached and then signals a breakpoint.\r\nIn .NET 5 \u0026 6 this func signals a breakpoint to the attached debugger, but does nothing when the debugger is not attached.\r\n\r\nDebugger.Launch() shows the \"attach the debugger\" window and then signals a breakpoint, but does nothing when the debugger is already attached.\r\n\r\nSo, Debugger.Break() behaves differently in .NET \u003e= 5 and there are no functions that can reproduce behavior of Debugger.Break() in .NET classic - and it was very useful.\r\n\r\n### Configuration\r\n\r\n.NET 5, 6\r\nWindows 10 x64\r\n\r\n### Regression?\r\n\r\nYes, comparing to .NET 4.8\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003efandrei\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-04-20T03:50:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyMzU5MDA4Nw==",
                                           "createdAt":  "2021-04-20T20:46:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Looks related to #12431.  Keeping this issue active until we have a deeper understanding of the intended behavior.",
                                           "updatedAt":  "2021-04-20T20:46:48Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Debugger.Break() vs Debugger.Launch()",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/52328",
        "createdAt":  "2021-05-05T19:54:30Z",
        "number":  52328,
        "author":  "chuckries",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-05-17T22:30:34Z",
        "body":  "Originally reported here: https://developercommunity.visualstudio.com/t/The-debugger-does-not-step-through-a-met/1407274\r\n\r\nThis issue repros in VS with:\r\n- Any **x64** runtime (tested with net472 and net5.0 x64)\r\n- With JMC enabled\r\n- When stepping from the last line of the finally block in a static method called from a static constructor\r\n\r\nRepro code:\r\n```\r\nusing System;\r\n\r\nnamespace StaticTryFinally\r\n{\r\n    static class MyStaticClass\r\n    {\r\n        private const int COUNT = 10;\r\n        private static int[] values;\r\n        private static bool initComplete;\r\n\r\n        static MyStaticClass()\r\n        {\r\n            Init();\r\n        }\r\n\r\n        private static void Init()\r\n        {\r\n            values = new int[COUNT]; // bp here\r\n\r\n            for (int i = 0; i \u003c COUNT; i++)\r\n            {\r\n                try\r\n                {\r\n                    values[i] = i;\r\n                }\r\n                finally\r\n                {\r\n                    values[i] = values[i] + i;\r\n                } // step to here. step over on this line lands in InitComplete\r\n            }\r\n\r\n            initComplete = true;\r\n        }\r\n\r\n        public static bool InitComplete\r\n        {\r\n            get\r\n            {\r\n                return initComplete;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            bool complete = MyStaticClass.InitComplete;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nRepro: \r\n1. Create a new .NET 5.0 Console App in VS with the code above\r\n2. Ensure Just My Code is enabled through Debugger Options\r\n3. Set a bp on the commented line\r\n4. Step Over through the method to the closing brace of the finally block\r\n5. Step Over\r\n\r\nExpected: step stops on closing brace of the loop and the loop can continue to step\u0027d through\r\nActual: step stops in getter for InitComplete, loop has completed\r\n\r\nNotes:\r\n- This only appears to affect JMC stepping in x64 runtimes. This does not repro if you disable JMC or force the runtime to be x86\r\n- VS Debugger uses the following stepping APIs:\r\n  - ICorDebugThread::CreateStepper\r\n  - ICorDebugStepper::SetUnmappedStopMask(0)\r\n  - ICorDebugStepper::SetInterceptMask(INTERCEPT_EXCEPTION_FILTER)\r\n  - ICorDebugStepper2::SetJMC(true)\r\n  - ICorDebugStepper::StepRange\r\n- The IL ranges we pass to StepRange appear correct as they are not different between the working case (jmc off) and the non working case (jmc on)\r\n- **When ICorDebugManagedCallback::StepComplete is fired from the runtime, the process is already in the wrong place. It is the runtime that is failing to correctly stop the step in the correct location.**\r\n- I was unable to repro this in other static method scenarios, only a static method called from a static constructor. In researching this I did find that metadata for static constructor can be weird, so maybe that has something to do with it. ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMaf0rw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMjk2NTQ5Nw==",
                                           "createdAt":  "2021-05-05T19:54:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nOriginally reported here: https://developercommunity.visualstudio.com/t/The-debugger-does-not-step-through-a-met/1407274\r\n\r\nThis issue repros in VS with:\r\n- Any **x64** runtime (tested with net472 and net5.0 x64)\r\n- With JMC enabled\r\n- When stepping from the last line of the finally block in a static method called from a static constructor\r\n\r\nRepro code:\r\n```\r\nusing System;\r\n\r\nnamespace StaticTryFinally\r\n{\r\n    static class MyStaticClass\r\n    {\r\n        private const int COUNT = 10;\r\n        private static int[] values;\r\n        private static bool initComplete;\r\n\r\n        static MyStaticClass()\r\n        {\r\n            Init();\r\n        }\r\n\r\n        private static void Init()\r\n        {\r\n            values = new int[COUNT]; // bp here\r\n\r\n            for (int i = 0; i \u003c COUNT; i++)\r\n            {\r\n                try\r\n                {\r\n                    values[i] = i;\r\n                }\r\n                finally\r\n                {\r\n                    values[i] = values[i] + i;\r\n                } // step to here. step over on this line lands in InitComplete\r\n            }\r\n\r\n            initComplete = true;\r\n        }\r\n\r\n        public static bool InitComplete\r\n        {\r\n            get\r\n            {\r\n                return initComplete;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            bool complete = MyStaticClass.InitComplete;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nRepro: \r\n1. Create a new .NET 5.0 Console App in VS with the code above\r\n2. Ensure Just My Code is enabled through Debugger Options\r\n3. Set a bp on the commented line\r\n4. Step Over through the method to the closing brace of the finally block\r\n5. Step Over\r\n\r\nExpected: step stops on closing brace of the loop and the loop can continue to step\u0027d through\r\nActual: step stops in getter for InitComplete, loop has completed\r\n\r\nNotes:\r\n- This only appears to affect JMC stepping in x64 runtimes. This does not repro if you disable JMC or force the runtime to be x86\r\n- VS Debugger uses the following stepping APIs:\r\n  - ICorDebugThread::CreateStepper\r\n  - ICorDebugStepper::SetUnmappedStopMask(0)\r\n  - ICorDebugStepper::SetInterceptMask(INTERCEPT_EXCEPTION_FILTER)\r\n  - ICorDebugStepper2::SetJMC(true)\r\n  - ICorDebugStepper::StepRange\r\n- The IL ranges we pass to StepRange appear correct as they are not different between the working case (jmc off) and the non working case (jmc on)\r\n- **When ICorDebugManagedCallback::StepComplete is fired from the runtime, the process is already in the wrong place. It is the runtime that is failing to correctly stop the step in the correct location.**\r\n- I was unable to repro this in other static method scenarios, only a static method called from a static constructor. In researching this I did find that metadata for static constructor can be weird, so maybe that has something to do with it. \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003echuckries\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-05-05T19:54:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMjk2NTU3Mg==",
                                           "createdAt":  "2021-05-05T19:54:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "chuckries",
                                           "body":  "cc @tommcdon ",
                                           "updatedAt":  "2021-05-05T19:54:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMzA5MDczNQ==",
                                           "createdAt":  "2021-05-05T22:28:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@hoyosjs ",
                                           "updatedAt":  "2021-05-05T22:28:20Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[Debugging] JMC Step becomes Go from finally block in method called from static constructor.",
        "labels":  [
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/52521",
        "createdAt":  "2021-05-09T17:31:19Z",
        "number":  52521,
        "author":  "itai",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-04-06T19:26:36Z",
        "body":  "### Steps to reproduce\r\n\r\nRun the mcr.microsoft.com/dotnet/sdk:5.0.202-alpine3.13-amd64 docker image with a memory limit and privileged capabilites:\r\n\r\n```\r\ndocker run --memory 10g --memory-swap 10g --privileged --cap-add=ALL --security-opt seccomp:unconfined -it mcr.microsoft.com/dotnet/sdk:5.0.202-alpine3.13-amd64\r\n```\r\n\r\nInside the container, create a new app:\r\n```\r\ndotnet new console -o App -n App\r\n```\r\n\r\nChange App/Program.cs to the following:\r\n\r\n```c#\r\nusing System;\r\nusing System.Collections.Generic;\r\n\r\nnamespace App\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var l = new List\u003cbyte[]\u003e();\r\n            while (true)\r\n            {\r\n                l.Add(new byte[1024 * 1024 * 1024]);\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nPublish the application:\r\n```\r\ndotnet publish -c Release App/App.csproj\r\n```\r\n\r\nRun the following:\r\n```\r\nexport COMPlus_DbgEnableMiniDump=1\r\nexport COMPlus_DbgMiniDumpType=1\r\nexport COMPlus_DbgMiniDumpName=/core.dmp\r\nexport COMPlus_CreateDumpDiagnostics=1\r\n```\r\n\r\nRun the executable:\r\n```\r\ndotnet ./App/bin/Release/net5.0/App.dll\r\n```\r\nAs expected, we get an \"out of memory\" exception. However, a core dump is not created. It appears that ```createdump``` starts running but doesn\u0027t finish. The following file contains the on-screen output: [app_output.txt](https://github.com/dotnet/runtime/files/6448090/app_output.txt)\r\n\r\n### Configuration\r\n\r\n```\r\n\u003e docker --version\r\nDocker version 20.10.5, build 55c4c88\r\n```\r\n\r\nInside the container:\r\n```\r\n# dotnet --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   5.0.202\r\n Commit:    db7cc87d51\r\n\r\nRuntime Environment:\r\n OS Name:     alpine\r\n OS Version:  3.13\r\n OS Platform: Linux\r\n RID:         linux-musl-x64\r\n Base Path:   /usr/share/dotnet/sdk/5.0.202/\r\n\r\nHost (useful for support):\r\n  Version: 5.0.5\r\n  Commit:  2f740adc14\r\n\r\n.NET SDKs installed:\r\n  5.0.202 [/usr/share/dotnet/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 5.0.5 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 5.0.5 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONMPD1g==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNTg0OTIzOA==",
                                           "createdAt":  "2021-05-09T17:31:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-05-09T17:31:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNTg1MzQyNw==",
                                           "createdAt":  "2021-05-09T17:56:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Steps to reproduce\r\n\r\nRun the mcr.microsoft.com/dotnet/sdk:5.0.202-alpine3.13-amd64 docker image with a memory limit and privileged capabilites:\r\n\r\n```\r\ndocker run --memory 10g --memory-swap 10g --privileged --cap-add=ALL --security-opt seccomp:unconfined -it mcr.microsoft.com/dotnet/sdk:5.0.202-alpine3.13-amd64\r\n```\r\n\r\nInside the container, create a new app:\r\n```\r\ndotnet new console -o App -n App\r\n```\r\n\r\nChange App/Program.cs to the following:\r\n\r\n```c#\r\nusing System;\r\nusing System.Collections.Generic;\r\n\r\nnamespace App\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var l = new List\u003cbyte[]\u003e();\r\n            while (true)\r\n            {\r\n                l.Add(new byte[1024 * 1024 * 1024]);\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nPublish the application:\r\n```\r\ndotnet publish -c Release App/App.csproj\r\n```\r\n\r\nRun the following:\r\n```\r\nexport COMPlus_DbgEnableMiniDump=1\r\nexport COMPlus_DbgMiniDumpType=1\r\nexport COMPlus_DbgMiniDumpName=/core.dmp\r\nexport COMPlus_CreateDumpDiagnostics=1\r\n```\r\n\r\nRun the executable:\r\n```\r\ndotnet ./App/bin/Release/net5.0/App.dll\r\n```\r\nAs expected, we get an \"out of memory\" exception. However, a core dump is not created. It appears that ```createdump``` starts running but doesn\u0027t finish. The following file contains the on-screen output: [app_output.txt](https://github.com/dotnet/runtime/files/6448090/app_output.txt)\r\n\r\n### Configuration\r\n\r\n```\r\n\u003e docker --version\r\nDocker version 20.10.5, build 55c4c88\r\n```\r\n\r\nInside the container:\r\n```\r\n# dotnet --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   5.0.202\r\n Commit:    db7cc87d51\r\n\r\nRuntime Environment:\r\n OS Name:     alpine\r\n OS Version:  3.13\r\n OS Platform: Linux\r\n RID:         linux-musl-x64\r\n Base Path:   /usr/share/dotnet/sdk/5.0.202/\r\n\r\nHost (useful for support):\r\n  Version: 5.0.5\r\n  Commit:  2f740adc14\r\n\r\n.NET SDKs installed:\r\n  5.0.202 [/usr/share/dotnet/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 5.0.5 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 5.0.5 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eitai\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-05-09T17:56:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNjEyNDE2Nw==",
                                           "createdAt":  "2021-05-10T03:39:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "cc @mikem8361 ",
                                           "updatedAt":  "2021-05-10T03:39:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MzYxNzUxMQ==",
                                           "createdAt":  "2021-05-18T22:49:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikem8361",
                                           "body":  "From the app_output.txt it looks like createdump is getting launched but it gets killed in the middle of the dump generation because of Linux\u0027s OOM-killer.  Could you try to disable it and run this again?",
                                           "updatedAt":  "2021-05-18T22:49:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MzYxNzkwNg==",
                                           "createdAt":  "2021-05-18T22:50:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikem8361",
                                           "body":  "```\r\nTo disable the OOM-killer use the same command with the value 0:\r\n# cat /proc/sys/vm/panic_on_oom. When you set the value to 0 that means the kernel will not panic when out of memory error occurred.\r\n$ echo 0 \u003e /proc/sys/vm/panic_on_oom. ...\r\necho 1 \u003e /proc/sys/vm/panic_on_oom.\r\n```",
                                           "updatedAt":  "2021-05-18T22:50:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3ODcxODk3Nw==",
                                           "createdAt":  "2021-07-13T02:00:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been automatically marked `no recent activity` because it has been marked as `needs author feedback` but has not had any activity for 14 days. It will be closed if no further activity occurs within 7 more days. Any new comment (by anyone, not necessarily the author) will remove `no recent activity`",
                                           "updatedAt":  "2021-07-13T02:00:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3ODg0NzgwNg==",
                                           "createdAt":  "2021-07-13T07:28:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "itai",
                                           "body":  "The default value of /proc/sys/vm/panic_on_oom appears to be 0. I tried setting it to both 0 and 1 and running `dotnet ./App/bin/Release/net5.0/App.dll` and I still did not get a core dump.\r\n\r\n[run with panic_on_oom set to 0.txt](https://github.com/dotnet/runtime/files/6806752/run.with.panic_on_oom.set.to.0.txt)\r\n[run with panic_on_oom set to 1.txt](https://github.com/dotnet/runtime/files/6806753/run.with.panic_on_oom.set.to.1.txt)\r\n",
                                           "updatedAt":  "2021-07-13T07:28:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3OTI5MzM4NQ==",
                                           "createdAt":  "2021-07-13T18:06:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikem8361",
                                           "body":  "Yes, it does look like in both cases, createdump is aborted.  It seems that createdump is still being aborted by the OOM killer. It also could be aborting itself when a memory allocation fails but that would be a crash/exception/signal.  Not sure what to do about it in either case.  \r\n\r\n",
                                           "updatedAt":  "2021-07-13T18:06:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3OTQyMzQ4OQ==",
                                           "createdAt":  "2021-07-13T21:44:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikem8361",
                                           "body":  "/cc: @hoyosjs ",
                                           "updatedAt":  "2021-07-13T21:44:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg4MDk2NjI5MQ==",
                                           "createdAt":  "2021-07-15T19:46:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikem8361",
                                           "body":  "I don\u0027t know the details but I was told that it is hard to turn off the OOM killer. The above directions I found on the internet. I don\u0027t have any experience with it.",
                                           "updatedAt":  "2021-07-15T19:46:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40w8PW",
                                           "createdAt":  "2021-07-22T21:24:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikem8361",
                                           "body":  "Moving this to 7.0.0 because there is nothing we can do in createdump to prevent it from being killed in low memory scenarios ",
                                           "updatedAt":  "2021-07-22T21:24:09Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "Core dump is not created on OOM exceptions in Docker even though COMPlus_DbgEnableMiniDump is set to 1",
        "labels":  [
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/53326",
        "createdAt":  "2021-05-27T01:31:41Z",
        "number":  53326,
        "author":  "davmason",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-06-01T17:19:37Z",
        "body":  "When a profiler sets COR_PRF_MONITOR_GC one of the things we enable is the ObjectsAllocatedByClass callback. We use a CHashTableImpl of a fixed size for tracking how many of each class we\u0027ve seen allocated.\r\n\r\nThe number of buckets in the CHashTableImpl is fixed at 32 and never grows, so as the number of distinct classes grows we trend towards O(n) behavior for each lookup, and therefor O(n^2) for the total scan.\r\n\r\nWe should move to a more performant data structure. The algorithm already is not thread safe so it shouldn\u0027t be difficult to move to a new hash table implementation that can rebucket.\r\n\r\nhttps://github.com/dotnet/runtime/blob/bc0fda4e9bff863551be27e52cb84ea3bc0573cb/src/coreclr/vm/eetoprofinterfaceimpl.cpp#L1460-L1595",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMp53pw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0OTI0NjExOQ==",
                                           "createdAt":  "2021-05-27T01:31:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWhen a profiler sets COR_PRF_MONITOR_GC one of the things we enable is the ObjectsAllocatedByClass callback. We use a CHashTableImpl of a fixed size for tracking how many of each class we\u0027ve seen allocated.\r\n\r\nThe number of buckets in the CHashTableImpl is fixed at 32 and never grows, so as the number of distinct classes grows we trend towards O(n) behavior for each lookup, and therefor O(n^2) for the total scan.\r\n\r\nWe should move to a more performant data structure. The algorithm already is not thread safe so it shouldn\u0027t be difficult to move to a new hash table implementation that can rebucket.\r\n\r\nhttps://github.com/dotnet/runtime/blob/bc0fda4e9bff863551be27e52cb84ea3bc0573cb/src/coreclr/vm/eetoprofinterfaceimpl.cpp#L1460-L1595\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edavmason\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `tenet-performance`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-05-27T01:31:43Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "The profiler\u0027s class hash table (for GC ObjectsAllocatedByClass tracking) does not scale",
        "labels":  [
                       "tenet-performance",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/53635",
        "createdAt":  "2021-06-02T20:15:06Z",
        "number":  53635,
        "author":  "lambdageek",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBtLLfQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tmat",
                                            "createdAt":  "2021-06-02T20:18:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tommcdon",
                                            "createdAt":  "2021-06-02T20:56:03Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2022-04-27T21:25:05Z",
        "body":  "Motivation: Support deletion of custom attributes using EnC.\r\n\r\n**Proposal**:\r\n\r\nDocument how deleted entries look for each table (CustomAttributes table for now, other tables possibly in future) to allow Roslyn to emit deltas that logically remove metadata entities.\r\n\r\nSpecifically for the CustomAttributes table the \"delete\" update would zero out the RowId part of the Parent field and keep the rest of the entry unchanged.\r\n\r\n**Alternatives**:\r\n\r\nExtend the EnCLog format to include a new allowed value for the Function Code column: \"Delete\" with value 6.\r\nIn .NET 6 the only valid combination is a Delete function code with a Token column value that specifies a row in the CustomAttributes table.\r\n\r\n**Semantics**:\r\n\r\nThe semantics of \"Delete\" is to do a \"soft delete\" - the row is treated as unavailable and is skipped by traversals of the table.  Row indices of subsequent rows in the CustomAttributes table are not affected.\r\n\r\nFuture generations may have an EnCLog row entry that resurrects a previously deleted row with some updated valid entry using a normal update operation (function code 0 (Default)).\r\n\r\nAn EnCLog should not delete an already deleted row, but the runtime is not required to detect and signal an error.\r\n\r\nOperations that serialize or expose entire updated tables should emit the zeroed out rows with the understanding that after an update has been applied, the metadata is no longer necessarily strictly ECMA-335 conforming.\r\n\r\nRelated work:\r\n* https://github.com/dotnet/roslyn/issues/49012 - Roslyn: \"EnC: Allow adding/removing/updating attributes\"\r\n* https://github.com/dotnet/runtime/issues/53066 - CoreCLR \"Allow the CustomAttribute metadata table to be updated by ApplyChanges, with correct ordering\"\r\n* https://github.com/dotnet/runtime/issues/52993 - Mono \"Add support for deltas with CustomAttribute modifications\"\r\n* https://github.com/dotnet/aspnetcore/issues/32791 - AspNetCore \"Identify and enumerate issues preventing Hot reload in empty (minimal host) template\"",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMybvTQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1MzM1MzI4Mw==",
                                           "createdAt":  "2021-06-02T20:15:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-06-02T20:15:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1MzM1OTg5NA==",
                                           "createdAt":  "2021-06-02T20:25:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "@jkotas, @davidwrighton I would appreciate any thoughts you may have about this plan",
                                           "updatedAt":  "2021-06-02T20:25:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1MzM2NTgyOA==",
                                           "createdAt":  "2021-06-02T20:36:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Can the delete be achieved by setting the parent to 0 using the existing code? (I expect that it is how we would actually implement it in CoreCLR.) ",
                                           "updatedAt":  "2021-06-02T20:36:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1MzM3MzM0MQ==",
                                           "createdAt":  "2021-06-02T20:49:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nExtend the EnCLog format to include a new allowed value for the Function Code column: \"Delete\" with value 6.\r\nIn .NET 6 the only valid combination is a Delete function code with a Token column value that specifies a row in the CustomAttributes table.\r\n\r\nMotivation: Support deletion of custom attributes using EnC.\r\n\r\nThe semantics of \"Delete\" is to do a \"soft delete\" - the row is treated as unavailable and is skipped by traversals of the table.  Row indices of subsequent rows in the CustomAttributes table are not affected.\r\n\r\nFuture generations may have an EnCLog row with function code 0 (Default) to insert an updated valid custom attribute in the table at a previously deleted row.\r\n\r\nIt is an error to delete a deleted row.\r\n\r\nRelated work:\r\n* https://github.com/dotnet/roslyn/issues/49012 - Roslyn: \"EnC: Allow adding/removing/updating attributes\"\r\n* https://github.com/dotnet/runtime/issues/53066 - CoreCLR \"Allow the CustomAttribute metadata table to be updated by ApplyChanges, with correct ordering\"\r\n* https://github.com/dotnet/runtime/issues/52993 - Mono \"Add support for deltas with CustomAttribute modifications\"\r\n* https://github.com/dotnet/aspnetcore/issues/32791 - AspNetCore \"Identify and enumerate issues preventing Hot reload in empty (minimal host) template\"\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003elambdageek\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003emikem8361\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-06-02T20:49:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1MzM3NjQzMw==",
                                           "createdAt":  "2021-06-02T20:55:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "\u003e Can the delete be achieved by setting the parent to 0 using the existing code? (I expect that it is how we would actually implement it in CoreCLR.)\r\n\r\nYes, except apparently this is going to be a problem for System.Reflection.Metadata and Roslyn because SRM doesn\u0027t consider a 0 Parent to be valid.",
                                           "updatedAt":  "2021-06-02T20:55:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1MzM4MzQ0Mg==",
                                           "createdAt":  "2021-06-02T21:07:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Where is the problem in System.Reflection.Metadata ?",
                                           "updatedAt":  "2021-06-02T21:07:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1MzQwMjAzNg==",
                                           "createdAt":  "2021-06-02T21:40:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "MetadataBuilder validates inputs: https://source.dot.net/#System.Reflection.Metadata/System/Reflection/Metadata/Ecma335/MetadataBuilder.Tables.cs,749\r\nI\u0027d prefer not relax these validations.",
                                           "updatedAt":  "2021-06-02T21:40:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1MzQwMzg1Mg==",
                                           "createdAt":  "2021-06-02T21:44:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "Looking at the check again the validation requires token with valid kind. But it does not require the row id to be != 0. I guess it would go thru if we only set the parent row id to 0.\r\n\r\nFeels hacky though. ",
                                           "updatedAt":  "2021-06-02T21:44:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NDI3NzQ1OQ==",
                                           "createdAt":  "2021-06-04T00:51:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikem8361",
                                           "body":  "Should I go ahead and add the new ENC log delete command? Implement it by changing the parent to 0. The challenge for me will be finding the right places to skip the rows with a 0 parent. \r\n\r\nAre we sure we want to call this command just \"Delete\". The rest of the [commands](https://github.com/dotnet/runtime/blob/90e201ee2316debe2e7fac200a1c923006eb1803/src/coreclr/md/inc/metamodelrw.h#L1323) have the member type (func, method, field, etc.) in the name.  What about \"eDeltaAttributeDelete\"?",
                                           "updatedAt":  "2021-06-04T00:51:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NDI4MTA4MQ==",
                                           "createdAt":  "2021-06-04T01:01:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "Yes, should be just \"delete\" - the token in the table fully specifies what entity should be deleted.\r\nThe Add operations are different. The token in the table does not specify the kind of entity to add. It specifies its parent (type e.g.).",
                                           "updatedAt":  "2021-06-04T01:01:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NDI4MTc3MQ==",
                                           "createdAt":  "2021-06-04T01:03:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "\u003e Should I go ahead and add the new ENC log delete command? Implement it by changing the parent to 0. \r\n\r\nI think so. It is clean and should be easy to do afaict.\r\n\r\n\u003e The challenge for me will be finding the right places to skip the rows with a 0 parent.\r\n\r\nAgree that\u0027s the harder part.",
                                           "updatedAt":  "2021-06-04T01:03:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NDI4MzMyNg==",
                                           "createdAt":  "2021-06-04T01:08:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e  The challenge for me will be finding the right places to skip the rows with a 0 parent.\r\n\r\nYep, I expect that the rows with parent 0 are going to leak out. For example, it will be difficult for them to not leak out in APIs like  save to stream.\r\n\r\nDoes the debugger side maintain its snapshot of metadata - does it need to understand the new command as well to maintain its snapshot?",
                                           "updatedAt":  "2021-06-04T01:08:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NDI5MjkxMQ==",
                                           "createdAt":  "2021-06-04T01:38:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "@gregg-miskelly @isadorasophia \r\n\r\nI don\u0027t think the debugger applies metadata/IL delta. It only applies PDB delta to its symbol reader.\r\nI think the Expression Evaluator might be affected - iirc it fetches the updated metadata from the CLR. Not sure which API is used exactly.\r\n\r\n\r\n",
                                           "updatedAt":  "2021-06-04T01:38:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NDI5NDEwOA==",
                                           "createdAt":  "2021-06-04T01:41:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "\u003e Yep, I expect that the rows with parent 0 are going to leak out. \r\n\r\nPerhaps it would be better then if the CLR internally represented deleted CAs using a valid CA record that points to a well-known attribute, such as \"System.Reflection.Metadata.DeletedAttribute\" with no value and parent of the containing assembly. Then if it leaks then it wouldn\u0027t break the reader. (It would however require MemberRef to such attribute constructor to be added during the serialization).",
                                           "updatedAt":  "2021-06-04T01:45:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NDI5ODk2OQ==",
                                           "createdAt":  "2021-06-04T01:56:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e  represent deleted CAs using a valid CA record that points to a well-known attribute, such as \"System.Reflection.Metadata.DeletedAttribute\"\r\n\r\nI think that would be a lot more difficult to pull off than the parent 0 solution internally in CLR. We would have to manufacture tokens for this attribute, Roslyn would have no idea about these tokens, and they would clash on next update.\r\n\r\nIf you like the fake attribute better, would it be possible to emit it in Roslyn so that Roslyn is aware of its token?\r\n\r\n\u003e Then if it leaks then it wouldn\u0027t break the reader.\r\n\r\nAny particular situation that you are worried about? The typical readers should not be reading these rows. These rows should be only reachable by readers that enumerate all rows.",
                                           "updatedAt":  "2021-06-04T01:56:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NDMwMjg4OQ==",
                                           "createdAt":  "2021-06-04T02:08:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "\u003e Roslyn would have no idea about these tokens, and they would clash on next update.\r\n\r\nI don\u0027t think that would be an issue. What I meant is that we still use the Delete operation. The DeletedAttribute would only be found in the metadata image that is produced by the serialization. EnC does not use that image. The only metadata EnC uses are the baseline metadata that are produced by the compiler and stored on disk.\r\n\r\nThe image might be used by Expression Evaluators (assuming the debugger uses the CLR metadata serialization API to get the metadata) and anyone else who is using that serialization API - I do not know what other users  of this API are there. That\u0027s the only concern I have, that something that calls this API gets broken. If you are not concerned about these then I am not concerned :)\r\n\r\n\u003e These rows should be only reachable by readers that enumerate all rows.\r\n\r\nGood point. I think that reduces the risk.\r\n\r\n\r\n",
                                           "updatedAt":  "2021-06-04T02:09:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NDM1MzQwMQ==",
                                           "createdAt":  "2021-06-04T04:42:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "Just occurred to me that serialization needs to sort the CustomAttribute table if the result is supposed to be ECMA compliant, because there is no CustomAttributePtr table that would allow indirection (unlike, e.g. FieldPtr). In that process 0-parent entries can be filtered out. If the resulting serialized format is not ECMA compliant then I guess it\u0027s not much worse of with 0-parent entries.",
                                           "updatedAt":  "2021-06-04T04:42:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NDM4OTIzNQ==",
                                           "createdAt":  "2021-06-04T06:10:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "I do not think they have to be sorted. It is what the Sorted bit field in the `#~` stream is for. When the bit is not set, the table is not sorted and the metadata readers take care of virtually sorting it as needed. EnC metadata extensions are not documented in ECMA-335, so talking about ECMA compilance does not make sense with EnC.",
                                           "updatedAt":  "2021-06-04T06:18:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NDg4ODQwMA==",
                                           "createdAt":  "2021-06-04T17:23:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikem8361",
                                           "body":  "To test the runtime changes, I\u0027ll need a Roslyn build that uses the new ENC log delete function. ",
                                           "updatedAt":  "2021-06-04T17:23:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NDkxMTQ5MA==",
                                           "createdAt":  "2021-06-04T18:07:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "\u003e EnC metadata extensions are not documented in ECMA-335, so talking about ECMA compilance does not make sense with EnC.\r\n\r\nThe question is what is expected from the API that serializes the runtime metadata. The caller might not know whether EnC has been applied. If the expectation is that the metadata may have the extra stuff then we are fine.",
                                           "updatedAt":  "2021-06-04T18:07:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NDkxNzI0MA==",
                                           "createdAt":  "2021-06-04T18:19:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "I have been thinking about a hypothetical case where we would extend delete to support deleting fields or methods.\r\n\r\nWe would want the soft-deleted entries to be leaking out from metadata APIs for those cases. The runtime would crash in spectacular ways (with no way to continue) in number of places if it would fail to find the metadata records for the soft-delete entry. It makes me think that we should do nothing to prevent the deleted entries from leaking out.\r\n\r\nConsidering that, is it really worth it to add the special delete command? It will be indistinguishable from the update with null command.",
                                           "updatedAt":  "2021-06-04T18:19:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NDkyNTcxMw==",
                                           "createdAt":  "2021-06-04T18:32:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "isadorasophia",
                                           "body":  "@tmat In some cases the debugger currently relies on the IL delta for getting metadata information based on relative virtual addresses, e.g. reading fields on EE. Other than that, we rely on the CorDebug APIs for further EE queries -- we reload the module metadata (`ICorDebugModule::GetMetadataInterface()`) each time the module has been modified.",
                                           "updatedAt":  "2021-06-04T18:32:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NDkyOTI1NQ==",
                                           "createdAt":  "2021-06-04T18:39:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "@isadorasophia How does the debugger acquire the metadata image that\u0027s passed to Roslyn EEs?",
                                           "updatedAt":  "2021-06-04T18:39:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NDkzMjU1Nw==",
                                           "createdAt":  "2021-06-04T18:45:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "\u003e Considering that, is it really worth it to add the special delete command? It will be indistinguishable from the update with null command.\r\n\r\nWe can do either. If the runtime documents how deleted entry looks for each table (CA table for now, other tables possibly in future) and these entries can be emitted without weakening the metadata builder\u0027s checks then we don\u0027t need the new command.\r\n\r\nSo, specifically for CA table the \"delete\" update would zero out the RowId part of the Parent field and keep the rest of the entry unchanged. Sounds good?\r\n",
                                           "updatedAt":  "2021-06-04T18:45:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NDkzNTc0OQ==",
                                           "createdAt":  "2021-06-04T18:52:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "isadorasophia",
                                           "body":  "@tmat We cache the IL delta (`ManagedModuleUpdate.ILDelta`) that Roslyn gives us through the Enc API (we mostly use that as a fallback when DBI fails to provide what we need).",
                                           "updatedAt":  "2021-06-04T18:52:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NDk1MDc0NQ==",
                                           "createdAt":  "2021-06-04T19:21:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "\u003e I have been thinking about a hypothetical case where we would extend delete to support deleting fields or methods.\r\n\r\n@jkotas I think the most likely next place we\u0027ll want this is in the Semantics table for properties - Something like changing a property from get/set to get-only.  We could leave the old setter MethodDef in place, and just delete the semantics row.\r\n```diff\r\n- public MyType MyProperty {get ; set;}\r\n+ public MyType MyProperty =\u003e new MyType(\"abcd\");\r\n```\r\n",
                                           "updatedAt":  "2021-06-04T19:21:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NDk4MDkyOQ==",
                                           "createdAt":  "2021-06-04T20:26:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBtgVJQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tmat",
                                                                               "createdAt":  "2021-06-04T20:34:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davidwengier",
                                                                               "createdAt":  "2021-06-04T23:24:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jkotas",
                                           "body":  "@tmat mentioned to me over lunch that there is a concept of soft-deleted rows in the CoreCLR metadata APIs already. Look for `RegMeta::DeleteToken`. For custom attributes, it sets the parent row to 0 while preserving the token token type (just like we have been discussion above). We should reuse it.",
                                           "updatedAt":  "2021-06-04T20:27:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NDk4ODg3MA==",
                                           "createdAt":  "2021-06-04T20:45:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikem8361",
                                           "body":  "It looks like the core code can be moved to the CMiniMdRW class allowing the metadata enc code to use it. This is assuming we are still talking about a ENC Log delete function.  Should I continue with adding the delete function? \r\n\r\nThe RegMeta::DeleteToken code would make it easy to support deleting any kind of token; not just custom attributes.",
                                           "updatedAt":  "2021-06-04T20:45:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NDk5MjkyMg==",
                                           "createdAt":  "2021-06-04T20:55:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Should I continue with adding the delete function?\r\n\r\nI do not have a strong opionion on this given this discussion.\r\n\r\nThe encoding of deleted rows is part of the extended metadata spec, and it is going to leak out. There is not a big difference between encoding the deleted row on the Roslyn side and sending it over as an update vs. sending the delete EnC log entry and letting runtime side to take care of encoding it.\r\n\r\nIf you choose to add the delete function, make sure to add it everywhere, e.g. including https://github.com/dotnet/runtime/blob/main/src/libraries/System.Reflection.Metadata/src/System/Reflection/Metadata/Ecma335/EditAndContinueOperation.cs",
                                           "updatedAt":  "2021-06-04T20:55:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NDk5NDA2Ng==",
                                           "createdAt":  "2021-06-04T20:57:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "From Roslyn perspective we don\u0027t care much either. Seems like emitting the update with zeroed RowId would be simpler overall.",
                                           "updatedAt":  "2021-06-04T20:57:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NDk5NTAxNA==",
                                           "createdAt":  "2021-06-04T21:00:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "BTW, let\u0027s start a document that details the format of EnC specific metadata so that we know what\u0027s expected where.",
                                           "updatedAt":  "2021-06-04T21:00:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NDk5NTE4MQ==",
                                           "createdAt":  "2021-06-04T21:00:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikem8361",
                                           "body":  "Then I\u0027m going to leave this issue in your hands Tomas.  ",
                                           "updatedAt":  "2021-06-04T21:00:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NDk5NTkwMA==",
                                           "createdAt":  "2021-06-04T21:02:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "@mikem8361 Sounds good. Is skipping the zeroed CA entries in Reflection (and elsewhere) tracked by another issue? If so we can close this one.",
                                           "updatedAt":  "2021-06-04T21:02:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NDk5NzAxNQ==",
                                           "createdAt":  "2021-06-04T21:05:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBtfxcw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tmat",
                                                                               "createdAt":  "2021-06-04T21:08:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mikem8361",
                                           "body":  "No it isn\u0027t.  I\u0027ll rename this issue to track zero\u0027ed CA entries. ",
                                           "updatedAt":  "2021-06-04T21:05:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NDk5NzExOA==",
                                           "createdAt":  "2021-06-04T21:05:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBtgPuw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tmat",
                                                                               "createdAt":  "2021-06-04T21:08:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2021-06-04T22:56:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "I don\u0027t think it makes sense to close the issue: right now it\u0027s the only documentation of the delete semantics.  If we record them somewhere else (in docs/design/specs/ for example) we can close the issue.",
                                           "updatedAt":  "2021-06-04T21:05:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NTAwMTg5Nw==",
                                           "createdAt":  "2021-06-04T21:16:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBtgPqg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2021-06-04T22:55:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e skipping the zeroed CA entries in Reflection \r\n\r\nI do not think there is any work needed in Reflection to skip to zeroed out entries for custom attributes. If we push deletes further to e.g. methods, there may be some work required.",
                                           "updatedAt":  "2021-06-04T21:16:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NTAwMjQ0MA==",
                                           "createdAt":  "2021-06-04T21:17:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "Ah, yes, because they won\u0027t be found for the parent. Makes sense.",
                                           "updatedAt":  "2021-06-04T21:17:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NjE1OTk3Mg==",
                                           "createdAt":  "2021-06-07T18:21:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikem8361",
                                           "body":  "Who is going to do the Roslyn zero parent for CA entries \"delete\" work?  Do we need an issue?",
                                           "updatedAt":  "2021-06-07T18:21:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NjE2NjE1OA==",
                                           "createdAt":  "2021-06-07T18:31:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "@davidwengier Is already working on it in his CustomAttribute PR.",
                                           "updatedAt":  "2021-06-07T18:31:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NjM5MjAyNg==",
                                           "createdAt":  "2021-06-08T02:36:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidwengier",
                                           "body":  "Yes, updating the metadata for attributes is tracked by https://github.com/dotnet/roslyn/issues/52816",
                                           "updatedAt":  "2021-06-08T02:36:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1ODA5ODg2NQ==",
                                           "createdAt":  "2021-06-09T21:02:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidwengier",
                                           "body":  "I\u0027ve run into a slight issue implementing the delete (zero parent token) in Roslyn which could be solved by simplifying what is emitted for deleted rows. The plan agreed upon here is to zero the Parent column, and leave Constructor and Value columns as they were. The simplification would be to just set Constructor to a MemberRef to row 1, and Value to nil, for the deleted rows.\r\n\r\nWould that cause an issue for the runtime? If the deleted rows are never enumerated then presumably not, but is there any validation performed that might fail? Any checks that Constructor actually points to an attribute type for example?",
                                           "updatedAt":  "2021-06-09T21:03:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1ODE1MDg4Mg==",
                                           "createdAt":  "2021-06-09T22:48:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Constructor to a MemberRef to row 1,\r\n\r\nI think 0 would make more sense. Any reason you have picked 1?\r\n\r\nI do not see a problem with this. EnC for reflection has a general problem with race conditions between user code reflecting on something and the item being mutated by EnC. This is just one of those cases.",
                                           "updatedAt":  "2021-06-09T22:48:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1ODE2ODM4Nw==",
                                           "createdAt":  "2021-06-09T23:34:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidwengier",
                                           "body":  "\u003e I think 0 would make more sense. Any reason you have picked 1?\r\n\r\nAn abundance of caution, that\u0027s all. Happy with 0.",
                                           "updatedAt":  "2021-06-09T23:34:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1ODE3NDM5Ng==",
                                           "createdAt":  "2021-06-09T23:50:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "The Constructor is a coded index. It can\u0027t be 0. It can be MethodDef with 0 row id or MemberRef with 0 row id.\r\n\r\n",
                                           "updatedAt":  "2021-06-09T23:50:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1ODE4NzI4Mw==",
                                           "createdAt":  "2021-06-10T00:20:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBuGwCA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tmat",
                                                                               "createdAt":  "2021-06-10T00:21:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "MethodDef with row 0 is what I meant.",
                                           "updatedAt":  "2021-06-10T00:20:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1ODE4OTY0NQ==",
                                           "createdAt":  "2021-06-10T00:26:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBuG4Gg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tmat",
                                                                               "createdAt":  "2021-06-10T00:51:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidwengier",
                                           "body":  "Yep, that\u0027s what I meant too :)",
                                           "updatedAt":  "2021-06-10T00:26:46Z"
                                       }
                                   ],
                         "totalCount":  46
                     },
        "title":  "Skip the zeroed parent token (deleted) Custom Attribute entries in Reflection (and elsewhere)",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/53747",
        "createdAt":  "2021-06-04T21:51:23Z",
        "number":  53747,
        "author":  "davidwrighton",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-07-23T04:02:25Z",
        "body":  "\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\nRepro instructions for debugger bug\r\n\r\n1. Enlist in the .NET runtime repo. Put it in c:\\git3\\runtime\r\n2. Sync to commit 951b4246d672ebe355313326fa2abc36c1a23e56  (Probably not \r\n3. Install globally a recent preview build of .NET 6.\r\n4. From the root of the repo run \"build clr -c release\"\r\n5. From a developer command prompt, run \"devenv /debugexe C:\\git3\\runtime\\artifacts\\bin\\coreclr\\windows.x64.Release\\crossgen2\\crossgen2.exe -o:C:\\git3\\runtime\\artifacts\\bin\\coreclr\\windows.x64.Release\\System.Private.CoreLib.dll -r:C:\\git3\\runtime\\artifacts\\bin\\coreclr\\windows.x64.Release\\IL\\*.dll --targetarch:x64 -m:C:\\git3\\runtime\\artifacts\\bin\\coreclr\\windows.x64.Release\\StandardOptimizationData.mibc --embed-pgo-data -O C:\\git3\\runtime\\artifacts\\bin\\coreclr\\windows.x64.Release\\IL\\System.Private.CoreLib.dll --pdb --pdb-path:C:\\git3\\runtime\\artifacts\\bin\\coreclr\\windows.x64.Release\\PDB\"\r\n6. Set a breakpoint on line 1170 of C:\\git3\\runtime\\src\\coreclr\\tools\\Common\\JitInterface\\CorInfoImpl.cs\r\n7. Right click on the crossgen2 solution, choose Properties, and change the debugger type to \"Managed (.NET Core, .NET 5+)\"\r\n8. Launch crossgen2 under a debugger.\r\n9. Hit continue a bunch, play around with stepping in that function, etc.\r\n10. Eventually, you should see a screen shot like ![debugger_not_working_right_screenshot](https://user-images.githubusercontent.com/10779849/120865598-335ac700-c543-11eb-9996-2666bd9ae4a0.png)\r\n\r\n\r\n\r\n### Configuration\r\n\r\nI have a 12 core machine, which I believe likely exacerbates this bug. crossgen2 has a feature which disables parallelism, and when I use that feature, I never see this failure. \r\n\r\nx64, Windows 10, .NET 6 preview 3, and 4. (And probably 5). \r\n### Regression?\r\n\r\nNo idea.\r\n\r\n### Other information\r\n\r\nSeems to not repro when not running heavily parallelized code. Crossgen2 is an application which is ..\r\n1. Highly parallelized\r\n2. Throws lots of exceptions\r\n3. Does a great deal of allocation\r\n4. Makes significant use of both p/invoke and reverse p/invoke.\r\n\r\nFrom windbg of a crashdump of the affected process the problematic thread shows the following callstacks with !clrstack and regular stack walking.\r\n```\r\n0:049\u003e !clrstack\r\nOS Thread Id: 0x306c (49)\r\n        Child SP               IP Call Site\r\n000000AB0167C460 00007ffd1a9d640e Internal.JitInterface.CorInfoImpl.resolveVirtualMethod(Internal.JitInterface.CORINFO_DEVIRTUALIZATION_INFO*)\r\n000000AB0167C560 00007ffd1a9d5a1e Internal.JitInterface.CorInfoImpl._resolveVirtualMethod(IntPtr, IntPtr*, Internal.JitInterface.CORINFO_DEVIRTUALIZATION_INFO*)\r\n000000AB0167EDB8 00007ffd81b51657 [InlinedCallFrame: 000000ab0167edb8] Internal.JitInterface.CorInfoImpl.JitCompileMethod(IntPtr ByRef, IntPtr, IntPtr, IntPtr, Internal.JitInterface.CORINFO_METHOD_INFO ByRef, UInt32, IntPtr ByRef, UInt32 ByRef)\r\n000000AB0167EDB8 00007ffd1a9af2b8 [InlinedCallFrame: 000000ab0167edb8] Internal.JitInterface.CorInfoImpl.JitCompileMethod(IntPtr ByRef, IntPtr, IntPtr, IntPtr, Internal.JitInterface.CORINFO_METHOD_INFO ByRef, UInt32, IntPtr ByRef, UInt32 ByRef)\r\n000000AB0167ED70 00007ffd1a9af2b8 ILStubClass.IL_STUB_PInvoke(IntPtr ByRef, IntPtr, IntPtr, IntPtr, Internal.JitInterface.CORINFO_METHOD_INFO ByRef, UInt32, IntPtr ByRef, UInt32 ByRef)\r\n000000AB0167EF10 00007ffd1a9a79b1 Internal.JitInterface.CorInfoImpl.CompileMethodInternal(ILCompiler.DependencyAnalysis.IMethodNode, Internal.IL.MethodIL)\r\n000000AB0167F160 00007ffd1a9a2323 Internal.JitInterface.CorInfoImpl.CompileMethod(ILCompiler.DependencyAnalysis.ReadyToRun.MethodWithGCInfo, ILCompiler.Logger)\r\n000000AB0167F220 00007ffd1a99e7ba ILCompiler.ReadyToRunCodegenCompilation.b__36_0(ILCompiler.DependencyAnalysisFramework.DependencyNodeCore`1\u003cILCompiler.DependencyAnalysis.NodeFactory\u003e)\r\n000000AB0167F490 00007ffd89b79d23 System.Threading.Tasks.Parallel+c__DisplayClass33_0`2[[System.__Canon, System.Private.CoreLib],[System.__Canon, System.Private.CoreLib]].b__0(Int32) [/_/src/libraries/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs @ 2223]\r\n000000AB0167F4E0 00007ffd89b786a0 System.Threading.Tasks.Parallel+c__DisplayClass19_0`1[[System.__Canon, System.Private.CoreLib]].b__1(System.Threading.Tasks.RangeWorker ByRef, Int32, Boolean ByRef) [/_/src/libraries/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs @ 1144]\r\n000000AB0167F580 00007ffd89b77b94 System.Threading.Tasks.TaskReplicator+Replica`1[[System.Threading.Tasks.RangeWorker, System.Threading.Tasks.Parallel]].ExecuteAction(Boolean ByRef) [/_/src/libraries/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/TaskReplicator.cs @ 122]\r\n000000AB0167F5B0 00007ffd89b77913 System.Threading.Tasks.TaskReplicator+Replica.Execute() [/_/src/libraries/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/TaskReplicator.cs @ 77]\r\n000000AB0167F620 00007ffd89b77ac8 System.Threading.Tasks.TaskReplicator+Replica+c.b__7_0(System.Object) [/_/src/libraries/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/TaskReplicator.cs @ 81]\r\n000000AB0167F650 00007ffd797e2294 System.Threading.Tasks.Task.InnerInvoke() [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2387]\r\n000000AB0167F690 00007ffd797e6a96 System.Threading.Tasks.Task+c.\u003c.cctor\u003eb__284_0(System.Object) [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2369]\r\n000000AB0167F6C0 00007ffd797ce2f5 System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(System.Threading.Thread, System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object) [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs @ 268]\r\n000000AB0167F710 00007ffd797e1fcc System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef, System.Threading.Thread) [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2331]\r\n000000AB0167F7B0 00007ffd797e1ec3 System.Threading.Tasks.Task.ExecuteEntryUnsafe(System.Threading.Thread) [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2265]\r\n000000AB0167F7F0 00007ffd797e1e6a System.Threading.Tasks.Task.ExecuteFromThreadPool(System.Threading.Thread) [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2256]\r\n000000AB0167F820 00007ffd797d6d78 System.Threading.ThreadPoolWorkQueue.Dispatch() [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ThreadPoolWorkQueue.cs @ 708]\r\n000000AB0167F8C0 00007ffd797dd367 System.Threading.PortableThreadPool+WorkerThread.WorkerThreadStart() [/_/src/libraries/System.Private.CoreLib/src/System/Threading/PortableThreadPool.WorkerThread.cs @ 58]\r\n000000AB0167F9D0 00007ffd797c34e5 System.Threading.Thread.StartCallback() [/_/src/coreclr/System.Private.CoreLib/src/System/Threading/Thread.CoreCLR.cs @ 105]\r\n000000AB0167FC40 00007ffd79fc1e43 [DebuggerU2MCatchHandlerFrame: 000000ab0167fc40] \r\n0:049\u003e k\r\n # Child-SP          RetAddr               Call Site\r\n00 000000ab`0167b538 00007ffe`2aab168e     ntdll!NtWaitForSingleObject+0x14\r\n01 000000ab`0167b540 00007ffd`79ff7b18     KERNELBASE!WaitForSingleObjectEx+0x8e\r\n02 (Inline Function) --------`--------     coreclr!CLREventWaitHelper2+0x6 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\vm\\synch.cpp @ 372] \r\n03 000000ab`0167b5e0 00007ffd`7a13c998     coreclr!CLREventWaitHelper+0x28 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\vm\\synch.cpp @ 397] \r\n04 (Inline Function) --------`--------     coreclr!CLREventBase::WaitEx+0x12 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\vm\\synch.cpp @ 466] \r\n05 (Inline Function) --------`--------     coreclr!CLREventBase::Wait+0x12 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\vm\\synch.cpp @ 412] \r\n06 000000ab`0167b640 00007ffd`79f5e6dd     coreclr!Thread::WaitSuspendEventsHelper+0xc8 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\vm\\threadsuspend.cpp @ 4598] \r\n07 (Inline Function) --------`--------     coreclr!Thread::WaitSuspendEvents+0x8 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\vm\\threadsuspend.cpp @ 4635] \r\n08 000000ab`0167b700 00007ffd`79f5a0c6     coreclr!Thread::RareEnablePreemptiveGC+0x81 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\vm\\threadsuspend.cpp @ 2425] \r\n09 (Inline Function) --------`--------     coreclr!Thread::EnablePreemptiveGC+0x18 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\vm\\threads.h @ 2003] \r\n0a 000000ab`0167b740 00007ffd`7a0a6d36     coreclr!Thread::RareDisablePreemptiveGC+0xe6 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\vm\\threadsuspend.cpp @ 2167] \r\n0b (Inline Function) --------`--------     coreclr!Thread::DisablePreemptiveGC+0x16 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\vm\\threads.h @ 1951] \r\n0c 000000ab`0167b7b0 00007ffd`7a1d1525     coreclr!EEDbgInterfaceImpl::DisablePreemptiveGC+0x36 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\vm\\eedbginterfaceimpl.cpp @ 649] \r\n0d (Inline Function) --------`--------     coreclr!GCHolderEEInterface\u003c0,1,1\u003e::LeaveInternal+0x35 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\debug\\ee\\debugger.h @ 260] \r\n0e (Inline Function) --------`--------     coreclr!GCHolderEEInterface\u003c0,1,1\u003e::{dtor}+0x35 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\debug\\ee\\debugger.h @ 303] \r\n0f 000000ab`0167b7e0 00007ffd`7a1d114a     coreclr!DebuggerController::DispatchPatchOrSingleStep+0x355 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\debug\\ee\\controller.cpp @ 3017] \r\n10 000000ab`0167b8c0 00007ffd`7a1d8cc6     coreclr!DebuggerController::DispatchNativeException+0x1ba [D:\\workspace\\_work\\1\\s\\src\\coreclr\\debug\\ee\\controller.cpp @ 4291] \r\n11 000000ab`0167b910 00007ffd`79fd4494     coreclr!Debugger::FirstChanceNativeException+0xa6 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\debug\\ee\\debugger.cpp @ 5631] \r\n12 000000ab`0167b960 00007ffd`79fac3d4     coreclr!IsDebuggerFault+0x64 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\vm\\excep.cpp @ 6575] \r\n13 000000ab`0167b9a0 00007ffd`79fac32f     coreclr!CLRVectoredExceptionHandlerPhase2+0x94 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\vm\\excep.cpp @ 7282] \r\n14 000000ab`0167b9e0 00007ffd`79fac26a     coreclr!CLRVectoredExceptionHandler+0x8b [D:\\workspace\\_work\\1\\s\\src\\coreclr\\vm\\excep.cpp @ 7198] \r\n15 000000ab`0167ba40 00007ffe`2cfe8a4c     coreclr!CLRVectoredExceptionHandlerShim+0xea [D:\\workspace\\_work\\1\\s\\src\\coreclr\\vm\\excep.cpp @ 7937] \r\n16 000000ab`0167ba90 00007ffe`2cfc1276     ntdll!RtlpCallVectoredHandlers+0x108\r\n17 000000ab`0167bb30 00007ffe`2d010cae     ntdll!RtlDispatchException+0x66\r\n18 000000ab`0167bd40 00007ffd`1a9d640e     ntdll!KiUserExceptionDispatch+0x2e\r\n19 000000ab`0167c460 00007ffd`1a9d5a1e     0x00007ffd`1a9d640e\r\n1a 000000ab`0167c560 00007ffd`81b51657     0x00007ffd`1a9d5a1e\r\n1b 000000ab`0167c5f0 00007ffd`7e325c09     jitinterface_x64!JitInterfaceWrapper::resolveVirtualMethod+0x27 [C:\\git3\\runtime\\src\\coreclr\\tools\\aot\\jitinterface\\jitinterface.h @ 338] \r\n1c 000000ab`0167c620 00007ffd`7e3c0113     clrjit_win_x64_x64!Compiler::impDevirtualizeCall+0x1b5 [C:\\git3\\runtime\\src\\coreclr\\jit\\importer.cpp @ 20891] \r\n1d 000000ab`0167c960 00007ffd`7e39ca70     clrjit_win_x64_x64!Compiler::impImportCall+0xe03 [C:\\git3\\runtime\\src\\coreclr\\jit\\importer.cpp @ 8932] \r\n1e 000000ab`0167cc20 00007ffd`7e39aa5d     clrjit_win_x64_x64!Compiler::impImportBlockCode+0x3e0 [C:\\git3\\runtime\\src\\coreclr\\jit\\importer.cpp @ 14545] \r\n1f 000000ab`0167d300 00007ffd`7e39a6be     clrjit_win_x64_x64!Compiler::impImportBlock+0x7d [C:\\git3\\runtime\\src\\coreclr\\jit\\importer.cpp @ 17641] \r\n20 000000ab`0167d3e0 00007ffd`7e39a0ee     clrjit_win_x64_x64!Compiler::impImport+0x40e [C:\\git3\\runtime\\src\\coreclr\\jit\\importer.cpp @ 18736] \r\n21 000000ab`0167d450 00007ffd`7e3c95fb     clrjit_win_x64_x64!Compiler::fgImport+0xe [C:\\git3\\runtime\\src\\coreclr\\jit\\flowgraph.cpp @ 632] \r\n22 (Inline Function) --------`--------     clrjit_win_x64_x64!Phase::Run+0x1e [C:\\git3\\runtime\\src\\coreclr\\jit\\phase.cpp @ 61] \r\n23 (Inline Function) --------`--------     clrjit_win_x64_x64!DoPhase+0x52 [C:\\git3\\runtime\\src\\coreclr\\jit\\phase.h @ 136] \r\n24 000000ab`0167d480 00007ffd`7e392ab1     clrjit_win_x64_x64!Compiler::compCompile+0x16b [C:\\git3\\runtime\\src\\coreclr\\jit\\compiler.cpp @ 4493] \r\n25 000000ab`0167d6f0 00007ffd`7e3bda8a     clrjit_win_x64_x64!Compiler::compCompileHelper+0x291 [C:\\git3\\runtime\\src\\coreclr\\jit\\compiler.cpp @ 6470] \r\n26 000000ab`0167d7a0 00007ffd`7e3be644     clrjit_win_x64_x64!Compiler::compCompile+0x24a [C:\\git3\\runtime\\src\\coreclr\\jit\\compiler.cpp @ 5753] \r\n27 000000ab`0167d850 00007ffd`7e3ef939     clrjit_win_x64_x64!jitNativeCode+0x2b4 [C:\\git3\\runtime\\src\\coreclr\\jit\\compiler.cpp @ 7103] \r\n28 000000ab`0167d9f0 00007ffd`81b51150     clrjit_win_x64_x64!\u003clambda_c7e1be22c8a3313b95abda4db0169a1c\u003e::operator()+0x129 [C:\\git3\\runtime\\src\\coreclr\\jit\\fginline.cpp @ 979] \r\n29 000000ab`0167da50 00007ffd`7e3926fb     jitinterface_x64!JitInterfaceWrapper::runWithErrorTrap+0x10 [C:\\git3\\runtime\\src\\coreclr\\tools\\aot\\jitinterface\\jitinterface.cpp @ 31] \r\n2a (Inline Function) --------`--------     clrjit_win_x64_x64!Compiler::eeRunWithErrorTrapImp+0x41 [C:\\git3\\runtime\\src\\coreclr\\jit\\ee_il_dll.cpp @ 1235] \r\n2b (Inline Function) --------`--------     clrjit_win_x64_x64!Compiler::eeRunWithErrorTrap+0x41 [C:\\git3\\runtime\\src\\coreclr\\jit\\compiler.h @ 7843] \r\n2c 000000ab`0167da80 00007ffd`7e3bd115     clrjit_win_x64_x64!Compiler::fgInvokeInlineeCompiler+0x16b [C:\\git3\\runtime\\src\\coreclr\\jit\\fginline.cpp @ 993] \r\n2d 000000ab`0167e550 00007ffd`7e3bdf86     clrjit_win_x64_x64!Compiler::fgMorphCallInlineHelper+0xb9 [C:\\git3\\runtime\\src\\coreclr\\jit\\morph.cpp @ 6656] \r\n2e (Inline Function) --------`--------     clrjit_win_x64_x64!Compiler::fgMorphCallInline+0x1a [C:\\git3\\runtime\\src\\coreclr\\jit\\morph.cpp @ 6536] \r\n2f 000000ab`0167e580 00007ffd`7e3c9862     clrjit_win_x64_x64!Compiler::fgInline+0x256 [C:\\git3\\runtime\\src\\coreclr\\jit\\fginline.cpp @ 155] \r\n30 (Inline Function) --------`--------     clrjit_win_x64_x64!Phase::Run+0x1e [C:\\git3\\runtime\\src\\coreclr\\jit\\phase.cpp @ 61] \r\n31 (Inline Function) --------`--------     clrjit_win_x64_x64!DoPhase+0x4f [C:\\git3\\runtime\\src\\coreclr\\jit\\phase.h @ 136] \r\n32 000000ab`0167e6e0 00007ffd`7e392ab1     clrjit_win_x64_x64!Compiler::compCompile+0x3d2 [C:\\git3\\runtime\\src\\coreclr\\jit\\compiler.cpp @ 4666] \r\n33 000000ab`0167e950 00007ffd`7e3bda8a     clrjit_win_x64_x64!Compiler::compCompileHelper+0x291 [C:\\git3\\runtime\\src\\coreclr\\jit\\compiler.cpp @ 6470] \r\n34 000000ab`0167ea00 00007ffd`7e3be644     clrjit_win_x64_x64!Compiler::compCompile+0x24a [C:\\git3\\runtime\\src\\coreclr\\jit\\compiler.cpp @ 5753] \r\n35 000000ab`0167eab0 00007ffd`7e3d87b3     clrjit_win_x64_x64!jitNativeCode+0x2b4 [C:\\git3\\runtime\\src\\coreclr\\jit\\compiler.cpp @ 7103] \r\n36 000000ab`0167ec50 00007ffd`81b54ee4     clrjit_win_x64_x64!CILJit::compileMethod+0x83 [C:\\git3\\runtime\\src\\coreclr\\jit\\ee_il_dll.cpp @ 279] \r\n37 000000ab`0167ecc0 00007ffd`1a9af2b8     jitinterface_x64!JitCompileMethod+0xe4 [C:\\git3\\runtime\\src\\coreclr\\tools\\aot\\jitinterface\\jitwrapper.cpp @ 36] \r\n38 000000ab`0167ed70 00007ffd`1a9a79b1     0x00007ffd`1a9af2b8\r\n39 000000ab`0167ef10 00007ffd`1a9a2323     0x00007ffd`1a9a79b1\r\n3a 000000ab`0167f160 00007ffd`1a99e7ba     0x00007ffd`1a9a2323\r\n3b 000000ab`0167f220 00007ffd`89b79d23     0x00007ffd`1a99e7ba\r\n3c 000000ab`0167f490 00007ffd`89b786a0     System_Threading_Tasks_Parallel!System.Threading.Tasks.Parallel+\u003c\u003ec__DisplayClass33_0`2[System.__Canon, System.__Canon]::\u003cForEachWorker\u003eb__0(System.Int32)$##6000072+0x33\r\n3d 000000ab`0167f4e0 00007ffd`89b77b94     System_Threading_Tasks_Parallel!System.Threading.Tasks.Parallel+\u003c\u003ec__DisplayClass19_0`1[System.__Canon]::\u003cForWorker\u003eb__1(System.Threading.Tasks.RangeWorker\u0026, System.Int32, System.Boolean\u0026)$##6000067+0x1d0\r\n3e 000000ab`0167f580 00007ffd`89b77913     System_Threading_Tasks_Parallel!System.Threading.Tasks.TaskReplicator+Replica`1[System.Threading.Tasks.RangeWorker]::ExecuteAction(System.Boolean\u0026)$##60000CE+0x24\r\n3f 000000ab`0167f5b0 00007ffd`89b77ac8     System_Threading_Tasks_Parallel!System.Threading.Tasks.TaskReplicator+Replica::Execute()$##60000C5+0x53\r\n40 000000ab`0167f620 00007ffd`797e2294     System_Threading_Tasks_Parallel!System.Threading.Tasks.TaskReplicator+Replica+\u003c\u003ec::\u003cExecute\u003eb__7_0(System.Object)$##60000CB+0x18\r\n41 000000ab`0167f650 00007ffd`797e6a96     System_Private_CoreLib!System.Threading.Tasks.Task::InnerInvoke()$##6002C72+0x34\r\n42 000000ab`0167f690 00007ffd`797ce2f5     System_Private_CoreLib!System.Threading.Tasks.Task+\u003c\u003ec::\u003c.cctor\u003eb__284_0(System.Object)$##6002D17+0x16\r\n43 000000ab`0167f6c0 00007ffd`797e1fcc     System_Private_CoreLib!System.Threading.ExecutionContext::RunFromThreadPoolDispatchLoop(System.Threading.Thread, System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)$##60028CB+0x35\r\n44 000000ab`0167f710 00007ffd`797e1ec3     System_Private_CoreLib!System.Threading.Tasks.Task::ExecuteWithThreadLocal(System.Threading.Tasks.Task\u0026, System.Threading.Thread)$##6002C71+0xac\r\n45 000000ab`0167f7b0 00007ffd`797e1e6a     System_Private_CoreLib!System.Threading.Tasks.Task::ExecuteEntryUnsafe(System.Threading.Thread)$##6002C6F+0x53\r\n46 000000ab`0167f7f0 00007ffd`797d6d78     System_Private_CoreLib!System.Threading.Tasks.Task::ExecuteFromThreadPool(System.Threading.Thread)$##6002C6E+0xa\r\n47 000000ab`0167f820 00007ffd`797dd367     System_Private_CoreLib!System.Boolean System.Threading.ThreadPoolWorkQueue::Dispatch()$##6002A17+0x128\r\n48 000000ab`0167f8c0 00007ffd`797c34e5     System_Private_CoreLib!System.Threading.PortableThreadPool+WorkerThread::WorkerThreadStart()$##6002AF1+0x117\r\n49 000000ab`0167f9d0 00007ffd`79fc1e43     System_Private_CoreLib!System.Threading.Thread::StartCallback()$##60026AF+0x65\r\n4a 000000ab`0167fa10 00007ffd`79ec12a8     coreclr!CallDescrWorkerInternal+0x83\r\n4b 000000ab`0167fa50 00007ffd`79fa1b49     coreclr!DispatchCallSimple+0x80 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 225] \r\n4c 000000ab`0167fae0 00007ffd`79fe2edc     coreclr!ThreadNative::KickOffThread_Worker+0x89 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158] \r\n4d (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\workspace\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7297] \r\n4e 000000ab`0167fb40 00007ffd`79fe3211     coreclr!ManagedThreadBase_DispatchMiddle+0x8c [D:\\workspace\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7341] \r\n4f 000000ab`0167fc00 00007ffd`79fe331d     coreclr!ManagedThreadBase_DispatchOuter+0xb1 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7501] \r\n50 000000ab`0167fca0 00007ffd`79eb814c     coreclr!ManagedThreadBase_FullTransition+0x1d [D:\\workspace\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7547] \r\n51 (Inline Function) --------`--------     coreclr!ManagedThreadBase::KickOff+0x1c [D:\\workspace\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7581] \r\n52 000000ab`0167fcf0 00007ffe`2b6b7034     coreclr!ThreadNative::KickOffThread+0xdc [D:\\workspace\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230] \r\n53 000000ab`0167fd60 00007ffe`2cfc2651     kernel32!BaseThreadInitThunk+0x14\r\n54 000000ab`0167fd90 00000000`00000000     ntdll!RtlUserThreadStart+0x21\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONMXdVg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NTAxOTc0NQ==",
                                           "createdAt":  "2021-06-04T21:51:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-06-04T21:51:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NTAyMDU0MA==",
                                           "createdAt":  "2021-06-04T21:53:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\nRepro instructions for debugger bug\r\n\r\n1. Enlist in the .NET runtime repo. Put it in c:\\git3\\runtime\r\n2. Sync to commit 951b4246d672ebe355313326fa2abc36c1a23e56  (Probably not \r\n3. Install globally a recent preview build of .NET 6.\r\n4. From the root of the repo run \"build clr -c release\"\r\n5. From a developer command prompt, run \"devenv /debugexe C:\\git3\\runtime\\artifacts\\bin\\coreclr\\windows.x64.Release\\crossgen2\\crossgen2.exe -o:C:\\git3\\runtime\\artifacts\\bin\\coreclr\\windows.x64.Release\\System.Private.CoreLib.dll -r:C:\\git3\\runtime\\artifacts\\bin\\coreclr\\windows.x64.Release\\IL\\*.dll --targetarch:x64 -m:C:\\git3\\runtime\\artifacts\\bin\\coreclr\\windows.x64.Release\\StandardOptimizationData.mibc --embed-pgo-data -O C:\\git3\\runtime\\artifacts\\bin\\coreclr\\windows.x64.Release\\IL\\System.Private.CoreLib.dll --pdb --pdb-path:C:\\git3\\runtime\\artifacts\\bin\\coreclr\\windows.x64.Release\\PDB\"\r\n6. Set a breakpoint on line 1170 of C:\\git3\\runtime\\src\\coreclr\\tools\\Common\\JitInterface\\CorInfoImpl.cs\r\n7. Right click on the crossgen2 solution, choose Properties, and change the debugger type to \"Managed (.NET Core, .NET 5+)\"\r\n8. Launch crossgen2 under a debugger.\r\n9. Hit continue a bunch, play around with stepping in that function, etc.\r\n10. Eventually, you should see a screen shot like ![debugger_not_working_right_screenshot](https://user-images.githubusercontent.com/10779849/120865598-335ac700-c543-11eb-9996-2666bd9ae4a0.png)\r\n\r\n\r\n\r\n### Configuration\r\n\r\nI have a 12 core machine, which I believe likely exacerbates this bug. crossgen2 has a feature which disables parallelism, and when I use that feature, I never see this failure. \r\n\r\nx64, Windows 10, .NET 6 preview 3, and 4. (And probably 5). \r\n### Regression?\r\n\r\nNo idea.\r\n\r\n### Other information\r\n\r\nSeems to not repro when not running heavily parallelized code. Crossgen2 is an application which is ..\r\n1. Highly parallelized\r\n2. Throws lots of exceptions\r\n3. Does a great deal of allocation\r\n4. Makes significant use of both p/invoke and reverse p/invoke.\r\n\r\nFrom windbg of a crashdump of the affected process the problematic thread shows the following callstacks with !clrstack and regular stack walking.\r\n```\r\n0:049\u003e !clrstack\r\nOS Thread Id: 0x306c (49)\r\n        Child SP               IP Call Site\r\n000000AB0167C460 00007ffd1a9d640e Internal.JitInterface.CorInfoImpl.resolveVirtualMethod(Internal.JitInterface.CORINFO_DEVIRTUALIZATION_INFO*)\r\n000000AB0167C560 00007ffd1a9d5a1e Internal.JitInterface.CorInfoImpl._resolveVirtualMethod(IntPtr, IntPtr*, Internal.JitInterface.CORINFO_DEVIRTUALIZATION_INFO*)\r\n000000AB0167EDB8 00007ffd81b51657 [InlinedCallFrame: 000000ab0167edb8] Internal.JitInterface.CorInfoImpl.JitCompileMethod(IntPtr ByRef, IntPtr, IntPtr, IntPtr, Internal.JitInterface.CORINFO_METHOD_INFO ByRef, UInt32, IntPtr ByRef, UInt32 ByRef)\r\n000000AB0167EDB8 00007ffd1a9af2b8 [InlinedCallFrame: 000000ab0167edb8] Internal.JitInterface.CorInfoImpl.JitCompileMethod(IntPtr ByRef, IntPtr, IntPtr, IntPtr, Internal.JitInterface.CORINFO_METHOD_INFO ByRef, UInt32, IntPtr ByRef, UInt32 ByRef)\r\n000000AB0167ED70 00007ffd1a9af2b8 ILStubClass.IL_STUB_PInvoke(IntPtr ByRef, IntPtr, IntPtr, IntPtr, Internal.JitInterface.CORINFO_METHOD_INFO ByRef, UInt32, IntPtr ByRef, UInt32 ByRef)\r\n000000AB0167EF10 00007ffd1a9a79b1 Internal.JitInterface.CorInfoImpl.CompileMethodInternal(ILCompiler.DependencyAnalysis.IMethodNode, Internal.IL.MethodIL)\r\n000000AB0167F160 00007ffd1a9a2323 Internal.JitInterface.CorInfoImpl.CompileMethod(ILCompiler.DependencyAnalysis.ReadyToRun.MethodWithGCInfo, ILCompiler.Logger)\r\n000000AB0167F220 00007ffd1a99e7ba ILCompiler.ReadyToRunCodegenCompilation.b__36_0(ILCompiler.DependencyAnalysisFramework.DependencyNodeCore`1\u003cILCompiler.DependencyAnalysis.NodeFactory\u003e)\r\n000000AB0167F490 00007ffd89b79d23 System.Threading.Tasks.Parallel+c__DisplayClass33_0`2[[System.__Canon, System.Private.CoreLib],[System.__Canon, System.Private.CoreLib]].b__0(Int32) [/_/src/libraries/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs @ 2223]\r\n000000AB0167F4E0 00007ffd89b786a0 System.Threading.Tasks.Parallel+c__DisplayClass19_0`1[[System.__Canon, System.Private.CoreLib]].b__1(System.Threading.Tasks.RangeWorker ByRef, Int32, Boolean ByRef) [/_/src/libraries/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs @ 1144]\r\n000000AB0167F580 00007ffd89b77b94 System.Threading.Tasks.TaskReplicator+Replica`1[[System.Threading.Tasks.RangeWorker, System.Threading.Tasks.Parallel]].ExecuteAction(Boolean ByRef) [/_/src/libraries/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/TaskReplicator.cs @ 122]\r\n000000AB0167F5B0 00007ffd89b77913 System.Threading.Tasks.TaskReplicator+Replica.Execute() [/_/src/libraries/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/TaskReplicator.cs @ 77]\r\n000000AB0167F620 00007ffd89b77ac8 System.Threading.Tasks.TaskReplicator+Replica+c.b__7_0(System.Object) [/_/src/libraries/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/TaskReplicator.cs @ 81]\r\n000000AB0167F650 00007ffd797e2294 System.Threading.Tasks.Task.InnerInvoke() [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2387]\r\n000000AB0167F690 00007ffd797e6a96 System.Threading.Tasks.Task+c.\u003c.cctor\u003eb__284_0(System.Object) [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2369]\r\n000000AB0167F6C0 00007ffd797ce2f5 System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(System.Threading.Thread, System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object) [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs @ 268]\r\n000000AB0167F710 00007ffd797e1fcc System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef, System.Threading.Thread) [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2331]\r\n000000AB0167F7B0 00007ffd797e1ec3 System.Threading.Tasks.Task.ExecuteEntryUnsafe(System.Threading.Thread) [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2265]\r\n000000AB0167F7F0 00007ffd797e1e6a System.Threading.Tasks.Task.ExecuteFromThreadPool(System.Threading.Thread) [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2256]\r\n000000AB0167F820 00007ffd797d6d78 System.Threading.ThreadPoolWorkQueue.Dispatch() [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ThreadPoolWorkQueue.cs @ 708]\r\n000000AB0167F8C0 00007ffd797dd367 System.Threading.PortableThreadPool+WorkerThread.WorkerThreadStart() [/_/src/libraries/System.Private.CoreLib/src/System/Threading/PortableThreadPool.WorkerThread.cs @ 58]\r\n000000AB0167F9D0 00007ffd797c34e5 System.Threading.Thread.StartCallback() [/_/src/coreclr/System.Private.CoreLib/src/System/Threading/Thread.CoreCLR.cs @ 105]\r\n000000AB0167FC40 00007ffd79fc1e43 [DebuggerU2MCatchHandlerFrame: 000000ab0167fc40] \r\n0:049\u003e k\r\n # Child-SP          RetAddr               Call Site\r\n00 000000ab`0167b538 00007ffe`2aab168e     ntdll!NtWaitForSingleObject+0x14\r\n01 000000ab`0167b540 00007ffd`79ff7b18     KERNELBASE!WaitForSingleObjectEx+0x8e\r\n02 (Inline Function) --------`--------     coreclr!CLREventWaitHelper2+0x6 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\vm\\synch.cpp @ 372] \r\n03 000000ab`0167b5e0 00007ffd`7a13c998     coreclr!CLREventWaitHelper+0x28 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\vm\\synch.cpp @ 397] \r\n04 (Inline Function) --------`--------     coreclr!CLREventBase::WaitEx+0x12 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\vm\\synch.cpp @ 466] \r\n05 (Inline Function) --------`--------     coreclr!CLREventBase::Wait+0x12 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\vm\\synch.cpp @ 412] \r\n06 000000ab`0167b640 00007ffd`79f5e6dd     coreclr!Thread::WaitSuspendEventsHelper+0xc8 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\vm\\threadsuspend.cpp @ 4598] \r\n07 (Inline Function) --------`--------     coreclr!Thread::WaitSuspendEvents+0x8 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\vm\\threadsuspend.cpp @ 4635] \r\n08 000000ab`0167b700 00007ffd`79f5a0c6     coreclr!Thread::RareEnablePreemptiveGC+0x81 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\vm\\threadsuspend.cpp @ 2425] \r\n09 (Inline Function) --------`--------     coreclr!Thread::EnablePreemptiveGC+0x18 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\vm\\threads.h @ 2003] \r\n0a 000000ab`0167b740 00007ffd`7a0a6d36     coreclr!Thread::RareDisablePreemptiveGC+0xe6 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\vm\\threadsuspend.cpp @ 2167] \r\n0b (Inline Function) --------`--------     coreclr!Thread::DisablePreemptiveGC+0x16 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\vm\\threads.h @ 1951] \r\n0c 000000ab`0167b7b0 00007ffd`7a1d1525     coreclr!EEDbgInterfaceImpl::DisablePreemptiveGC+0x36 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\vm\\eedbginterfaceimpl.cpp @ 649] \r\n0d (Inline Function) --------`--------     coreclr!GCHolderEEInterface\u003c0,1,1\u003e::LeaveInternal+0x35 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\debug\\ee\\debugger.h @ 260] \r\n0e (Inline Function) --------`--------     coreclr!GCHolderEEInterface\u003c0,1,1\u003e::{dtor}+0x35 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\debug\\ee\\debugger.h @ 303] \r\n0f 000000ab`0167b7e0 00007ffd`7a1d114a     coreclr!DebuggerController::DispatchPatchOrSingleStep+0x355 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\debug\\ee\\controller.cpp @ 3017] \r\n10 000000ab`0167b8c0 00007ffd`7a1d8cc6     coreclr!DebuggerController::DispatchNativeException+0x1ba [D:\\workspace\\_work\\1\\s\\src\\coreclr\\debug\\ee\\controller.cpp @ 4291] \r\n11 000000ab`0167b910 00007ffd`79fd4494     coreclr!Debugger::FirstChanceNativeException+0xa6 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\debug\\ee\\debugger.cpp @ 5631] \r\n12 000000ab`0167b960 00007ffd`79fac3d4     coreclr!IsDebuggerFault+0x64 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\vm\\excep.cpp @ 6575] \r\n13 000000ab`0167b9a0 00007ffd`79fac32f     coreclr!CLRVectoredExceptionHandlerPhase2+0x94 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\vm\\excep.cpp @ 7282] \r\n14 000000ab`0167b9e0 00007ffd`79fac26a     coreclr!CLRVectoredExceptionHandler+0x8b [D:\\workspace\\_work\\1\\s\\src\\coreclr\\vm\\excep.cpp @ 7198] \r\n15 000000ab`0167ba40 00007ffe`2cfe8a4c     coreclr!CLRVectoredExceptionHandlerShim+0xea [D:\\workspace\\_work\\1\\s\\src\\coreclr\\vm\\excep.cpp @ 7937] \r\n16 000000ab`0167ba90 00007ffe`2cfc1276     ntdll!RtlpCallVectoredHandlers+0x108\r\n17 000000ab`0167bb30 00007ffe`2d010cae     ntdll!RtlDispatchException+0x66\r\n18 000000ab`0167bd40 00007ffd`1a9d640e     ntdll!KiUserExceptionDispatch+0x2e\r\n19 000000ab`0167c460 00007ffd`1a9d5a1e     0x00007ffd`1a9d640e\r\n1a 000000ab`0167c560 00007ffd`81b51657     0x00007ffd`1a9d5a1e\r\n1b 000000ab`0167c5f0 00007ffd`7e325c09     jitinterface_x64!JitInterfaceWrapper::resolveVirtualMethod+0x27 [C:\\git3\\runtime\\src\\coreclr\\tools\\aot\\jitinterface\\jitinterface.h @ 338] \r\n1c 000000ab`0167c620 00007ffd`7e3c0113     clrjit_win_x64_x64!Compiler::impDevirtualizeCall+0x1b5 [C:\\git3\\runtime\\src\\coreclr\\jit\\importer.cpp @ 20891] \r\n1d 000000ab`0167c960 00007ffd`7e39ca70     clrjit_win_x64_x64!Compiler::impImportCall+0xe03 [C:\\git3\\runtime\\src\\coreclr\\jit\\importer.cpp @ 8932] \r\n1e 000000ab`0167cc20 00007ffd`7e39aa5d     clrjit_win_x64_x64!Compiler::impImportBlockCode+0x3e0 [C:\\git3\\runtime\\src\\coreclr\\jit\\importer.cpp @ 14545] \r\n1f 000000ab`0167d300 00007ffd`7e39a6be     clrjit_win_x64_x64!Compiler::impImportBlock+0x7d [C:\\git3\\runtime\\src\\coreclr\\jit\\importer.cpp @ 17641] \r\n20 000000ab`0167d3e0 00007ffd`7e39a0ee     clrjit_win_x64_x64!Compiler::impImport+0x40e [C:\\git3\\runtime\\src\\coreclr\\jit\\importer.cpp @ 18736] \r\n21 000000ab`0167d450 00007ffd`7e3c95fb     clrjit_win_x64_x64!Compiler::fgImport+0xe [C:\\git3\\runtime\\src\\coreclr\\jit\\flowgraph.cpp @ 632] \r\n22 (Inline Function) --------`--------     clrjit_win_x64_x64!Phase::Run+0x1e [C:\\git3\\runtime\\src\\coreclr\\jit\\phase.cpp @ 61] \r\n23 (Inline Function) --------`--------     clrjit_win_x64_x64!DoPhase+0x52 [C:\\git3\\runtime\\src\\coreclr\\jit\\phase.h @ 136] \r\n24 000000ab`0167d480 00007ffd`7e392ab1     clrjit_win_x64_x64!Compiler::compCompile+0x16b [C:\\git3\\runtime\\src\\coreclr\\jit\\compiler.cpp @ 4493] \r\n25 000000ab`0167d6f0 00007ffd`7e3bda8a     clrjit_win_x64_x64!Compiler::compCompileHelper+0x291 [C:\\git3\\runtime\\src\\coreclr\\jit\\compiler.cpp @ 6470] \r\n26 000000ab`0167d7a0 00007ffd`7e3be644     clrjit_win_x64_x64!Compiler::compCompile+0x24a [C:\\git3\\runtime\\src\\coreclr\\jit\\compiler.cpp @ 5753] \r\n27 000000ab`0167d850 00007ffd`7e3ef939     clrjit_win_x64_x64!jitNativeCode+0x2b4 [C:\\git3\\runtime\\src\\coreclr\\jit\\compiler.cpp @ 7103] \r\n28 000000ab`0167d9f0 00007ffd`81b51150     clrjit_win_x64_x64!\u003clambda_c7e1be22c8a3313b95abda4db0169a1c\u003e::operator()+0x129 [C:\\git3\\runtime\\src\\coreclr\\jit\\fginline.cpp @ 979] \r\n29 000000ab`0167da50 00007ffd`7e3926fb     jitinterface_x64!JitInterfaceWrapper::runWithErrorTrap+0x10 [C:\\git3\\runtime\\src\\coreclr\\tools\\aot\\jitinterface\\jitinterface.cpp @ 31] \r\n2a (Inline Function) --------`--------     clrjit_win_x64_x64!Compiler::eeRunWithErrorTrapImp+0x41 [C:\\git3\\runtime\\src\\coreclr\\jit\\ee_il_dll.cpp @ 1235] \r\n2b (Inline Function) --------`--------     clrjit_win_x64_x64!Compiler::eeRunWithErrorTrap+0x41 [C:\\git3\\runtime\\src\\coreclr\\jit\\compiler.h @ 7843] \r\n2c 000000ab`0167da80 00007ffd`7e3bd115     clrjit_win_x64_x64!Compiler::fgInvokeInlineeCompiler+0x16b [C:\\git3\\runtime\\src\\coreclr\\jit\\fginline.cpp @ 993] \r\n2d 000000ab`0167e550 00007ffd`7e3bdf86     clrjit_win_x64_x64!Compiler::fgMorphCallInlineHelper+0xb9 [C:\\git3\\runtime\\src\\coreclr\\jit\\morph.cpp @ 6656] \r\n2e (Inline Function) --------`--------     clrjit_win_x64_x64!Compiler::fgMorphCallInline+0x1a [C:\\git3\\runtime\\src\\coreclr\\jit\\morph.cpp @ 6536] \r\n2f 000000ab`0167e580 00007ffd`7e3c9862     clrjit_win_x64_x64!Compiler::fgInline+0x256 [C:\\git3\\runtime\\src\\coreclr\\jit\\fginline.cpp @ 155] \r\n30 (Inline Function) --------`--------     clrjit_win_x64_x64!Phase::Run+0x1e [C:\\git3\\runtime\\src\\coreclr\\jit\\phase.cpp @ 61] \r\n31 (Inline Function) --------`--------     clrjit_win_x64_x64!DoPhase+0x4f [C:\\git3\\runtime\\src\\coreclr\\jit\\phase.h @ 136] \r\n32 000000ab`0167e6e0 00007ffd`7e392ab1     clrjit_win_x64_x64!Compiler::compCompile+0x3d2 [C:\\git3\\runtime\\src\\coreclr\\jit\\compiler.cpp @ 4666] \r\n33 000000ab`0167e950 00007ffd`7e3bda8a     clrjit_win_x64_x64!Compiler::compCompileHelper+0x291 [C:\\git3\\runtime\\src\\coreclr\\jit\\compiler.cpp @ 6470] \r\n34 000000ab`0167ea00 00007ffd`7e3be644     clrjit_win_x64_x64!Compiler::compCompile+0x24a [C:\\git3\\runtime\\src\\coreclr\\jit\\compiler.cpp @ 5753] \r\n35 000000ab`0167eab0 00007ffd`7e3d87b3     clrjit_win_x64_x64!jitNativeCode+0x2b4 [C:\\git3\\runtime\\src\\coreclr\\jit\\compiler.cpp @ 7103] \r\n36 000000ab`0167ec50 00007ffd`81b54ee4     clrjit_win_x64_x64!CILJit::compileMethod+0x83 [C:\\git3\\runtime\\src\\coreclr\\jit\\ee_il_dll.cpp @ 279] \r\n37 000000ab`0167ecc0 00007ffd`1a9af2b8     jitinterface_x64!JitCompileMethod+0xe4 [C:\\git3\\runtime\\src\\coreclr\\tools\\aot\\jitinterface\\jitwrapper.cpp @ 36] \r\n38 000000ab`0167ed70 00007ffd`1a9a79b1     0x00007ffd`1a9af2b8\r\n39 000000ab`0167ef10 00007ffd`1a9a2323     0x00007ffd`1a9a79b1\r\n3a 000000ab`0167f160 00007ffd`1a99e7ba     0x00007ffd`1a9a2323\r\n3b 000000ab`0167f220 00007ffd`89b79d23     0x00007ffd`1a99e7ba\r\n3c 000000ab`0167f490 00007ffd`89b786a0     System_Threading_Tasks_Parallel!System.Threading.Tasks.Parallel+\u003c\u003ec__DisplayClass33_0`2[System.__Canon, System.__Canon]::\u003cForEachWorker\u003eb__0(System.Int32)$##6000072+0x33\r\n3d 000000ab`0167f4e0 00007ffd`89b77b94     System_Threading_Tasks_Parallel!System.Threading.Tasks.Parallel+\u003c\u003ec__DisplayClass19_0`1[System.__Canon]::\u003cForWorker\u003eb__1(System.Threading.Tasks.RangeWorker\u0026, System.Int32, System.Boolean\u0026)$##6000067+0x1d0\r\n3e 000000ab`0167f580 00007ffd`89b77913     System_Threading_Tasks_Parallel!System.Threading.Tasks.TaskReplicator+Replica`1[System.Threading.Tasks.RangeWorker]::ExecuteAction(System.Boolean\u0026)$##60000CE+0x24\r\n3f 000000ab`0167f5b0 00007ffd`89b77ac8     System_Threading_Tasks_Parallel!System.Threading.Tasks.TaskReplicator+Replica::Execute()$##60000C5+0x53\r\n40 000000ab`0167f620 00007ffd`797e2294     System_Threading_Tasks_Parallel!System.Threading.Tasks.TaskReplicator+Replica+\u003c\u003ec::\u003cExecute\u003eb__7_0(System.Object)$##60000CB+0x18\r\n41 000000ab`0167f650 00007ffd`797e6a96     System_Private_CoreLib!System.Threading.Tasks.Task::InnerInvoke()$##6002C72+0x34\r\n42 000000ab`0167f690 00007ffd`797ce2f5     System_Private_CoreLib!System.Threading.Tasks.Task+\u003c\u003ec::\u003c.cctor\u003eb__284_0(System.Object)$##6002D17+0x16\r\n43 000000ab`0167f6c0 00007ffd`797e1fcc     System_Private_CoreLib!System.Threading.ExecutionContext::RunFromThreadPoolDispatchLoop(System.Threading.Thread, System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)$##60028CB+0x35\r\n44 000000ab`0167f710 00007ffd`797e1ec3     System_Private_CoreLib!System.Threading.Tasks.Task::ExecuteWithThreadLocal(System.Threading.Tasks.Task\u0026, System.Threading.Thread)$##6002C71+0xac\r\n45 000000ab`0167f7b0 00007ffd`797e1e6a     System_Private_CoreLib!System.Threading.Tasks.Task::ExecuteEntryUnsafe(System.Threading.Thread)$##6002C6F+0x53\r\n46 000000ab`0167f7f0 00007ffd`797d6d78     System_Private_CoreLib!System.Threading.Tasks.Task::ExecuteFromThreadPool(System.Threading.Thread)$##6002C6E+0xa\r\n47 000000ab`0167f820 00007ffd`797dd367     System_Private_CoreLib!System.Boolean System.Threading.ThreadPoolWorkQueue::Dispatch()$##6002A17+0x128\r\n48 000000ab`0167f8c0 00007ffd`797c34e5     System_Private_CoreLib!System.Threading.PortableThreadPool+WorkerThread::WorkerThreadStart()$##6002AF1+0x117\r\n49 000000ab`0167f9d0 00007ffd`79fc1e43     System_Private_CoreLib!System.Threading.Thread::StartCallback()$##60026AF+0x65\r\n4a 000000ab`0167fa10 00007ffd`79ec12a8     coreclr!CallDescrWorkerInternal+0x83\r\n4b 000000ab`0167fa50 00007ffd`79fa1b49     coreclr!DispatchCallSimple+0x80 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 225] \r\n4c 000000ab`0167fae0 00007ffd`79fe2edc     coreclr!ThreadNative::KickOffThread_Worker+0x89 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158] \r\n4d (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\workspace\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7297] \r\n4e 000000ab`0167fb40 00007ffd`79fe3211     coreclr!ManagedThreadBase_DispatchMiddle+0x8c [D:\\workspace\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7341] \r\n4f 000000ab`0167fc00 00007ffd`79fe331d     coreclr!ManagedThreadBase_DispatchOuter+0xb1 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7501] \r\n50 000000ab`0167fca0 00007ffd`79eb814c     coreclr!ManagedThreadBase_FullTransition+0x1d [D:\\workspace\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7547] \r\n51 (Inline Function) --------`--------     coreclr!ManagedThreadBase::KickOff+0x1c [D:\\workspace\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7581] \r\n52 000000ab`0167fcf0 00007ffe`2b6b7034     coreclr!ThreadNative::KickOffThread+0xdc [D:\\workspace\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230] \r\n53 000000ab`0167fd60 00007ffe`2cfc2651     kernel32!BaseThreadInitThunk+0x14\r\n54 000000ab`0167fd90 00000000`00000000     ntdll!RtlUserThreadStart+0x21\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edavidwrighton\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-06-04T21:53:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NTAyMTIyNw==",
                                           "createdAt":  "2021-06-04T21:54:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@hoyosjs ",
                                           "updatedAt":  "2021-06-04T21:54:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NTA5MjI4OA==",
                                           "createdAt":  "2021-06-04T23:07:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidwrighton",
                                           "body":  "Also, if instead of inserting a breakpoint, the code is modified to throw a null reference exception, the issue will reproduce much more reliably.",
                                           "updatedAt":  "2021-06-04T23:07:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40xd1W",
                                           "createdAt":  "2021-07-23T04:02:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "We deprioritized this as we updated the runtime version and could no longer repro. Please let me know if this happens again.",
                                           "updatedAt":  "2021-07-23T04:02:11Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Unexpected debugger reports that process is in an undebuggable break state when using regular managed breakpoints",
        "labels":  [
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/54017",
        "createdAt":  "2021-06-10T17:51:28Z",
        "number":  54017,
        "author":  "jander-msft",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-03-24T14:12:55Z",
        "body":  "### Description\r\n\r\nWhen running `dotnet run` on a project as a background process (e.g. `dotnet run \u0026`), the child process that is the application will be zombied and the diagnostics server in the `dotnet run` process is stalled.\r\n\r\nRepro steps:\r\n1. mkdir TestApp\r\n1. cd TestApp\r\n1. dotnet new webapp\r\n1. dotnet run \u0026\r\n\r\n```\r\ndotnet run \u0026\r\n[1] 1074\r\nBuilding...\r\n```\r\n\r\nThe expected bound addresses from the web application do not seem to be bound:\r\n```\r\ncurl http://localhost:5000\r\ncurl: (7) Failed to connect to localhost port 5000: Connection refused\r\n```\r\n\r\nOutput from `ps aux` (removed other processes):\r\n```\r\nps aux\r\nUSER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\r\njander    1074  3.5  0.5 3547660 66996 pts/0   Tl   08:53   0:00 dotnet run\r\njander    1093 15.6  0.0      0     0 pts/0    Z    08:53   0:01 [dotnet] \u003cdefunct\u003e\r\n```\r\n\r\n### Configuration\r\n\r\n.NET 5.0.6\r\nUbuntu 18.04 x64 on WSL 2\r\n\r\n```\r\ndotnet --list-runtimes\r\nMicrosoft.AspNetCore.All 2.1.28 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\nMicrosoft.AspNetCore.App 2.1.28 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\nMicrosoft.AspNetCore.App 3.1.15 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\nMicrosoft.AspNetCore.App 5.0.6 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\nMicrosoft.NETCore.App 2.1.28 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\nMicrosoft.NETCore.App 3.1.15 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\nMicrosoft.NETCore.App 5.0.6 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n```\r\n\r\n```\r\ndotnet --list-sdks\r\n2.1.816 [/usr/share/dotnet/sdk]\r\n3.1.409 [/usr/share/dotnet/sdk]\r\n5.0.300 [/usr/share/dotnet/sdk]\r\n```\r\n\r\n### Regression?\r\n\r\nSeems to repro for .NET Core 3.1 applications as well. However, I did have .NET Core 2.1 runtimes, .NET 5 runtimes, and the .NET 5 SDK installed on the OS.\r\n\r\n### Other information\r\n\r\nUsing `nohup` to run it in the background (e.g. `nohup dotnet run \u0026`) seems to work correctly. Running `dotnet run` as a foreground process works as expected.\r\n\r\nAttempting to use diagnostics tools to communicate with the diagnostics server in the `dotnet run` process has any of those diagnostics tools hang:\r\n\r\nAttempting to use dotnet-dump on the `dotnet run` process (the dotnet-dump process will run indefinitely until process 1074 is killed):\r\n```\r\ndotnet dump collect --type Full -p 1074\r\n\r\nWriting full to /home/jander/core_20210610_094401\r\n```\r\n\r\nAnother example is using dotnet-monitor to enumerate processes on the system will hang indefinitely until process 1074 is killed:\r\n```\r\ndotnet monitor collect --no-auth\r\n...\r\ncurl -k https://localhost:52323/processes\r\n```\r\n\r\ncall stack of dotnet-monitor that is trying to issue the ProcessInfo command over the diagnostics port:\r\n```\r\nSystem.Net.Sockets.dll!System.Net.Sockets.SocketPal.Receive(System.Net.Sockets.SafeSocketHandle socket, System.Net.Sockets.SocketFlags flags, System.Span\u003cbyte\u003e buffer, byte[] socketAddress, ref int socketAddressLen = 0, out System.Net.Sockets.SocketFlags receivedFlags = 1761477460, out Interop.Error errno = SUCCESS)\r\nSystem.Net.Sockets.dll!System.Net.Sockets.SocketPal.TryCompleteReceiveFrom(System.Net.Sockets.SafeSocketHandle socket, System.Span\u003cbyte\u003e buffer, System.Collections.Generic.IList\u003cSystem.ArraySegment\u003cbyte\u003e\u003e buffers, System.Net.Sockets.SocketFlags flags, byte[] socketAddress, ref int socketAddressLen, out int bytesReceived = 0, out System.Net.Sockets.SocketFlags receivedFlags = 1761477460, out System.Net.Sockets.SocketError errorCode = Success)\r\nSystem.Net.Sockets.dll!System.Net.Sockets.SocketAsyncContext.ReceiveFrom(System.Memory\u003cbyte\u003e buffer, ref System.Net.Sockets.SocketFlags flags = None, byte[] socketAddress = null, ref int socketAddressLen = 0, int timeout = -1, out int bytesReceived = 0)\r\nSystem.Net.Sockets.dll!System.Net.Sockets.SocketPal.Receive(System.Net.Sockets.SafeSocketHandle handle, byte[] buffer, int offset, int count, System.Net.Sockets.SocketFlags socketFlags, out int bytesTransferred)\r\nSystem.Net.Sockets.dll!System.Net.Sockets.Socket.Receive(byte[] buffer = {byte[14]}, int offset = 0, int size, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode = 2116193192)\r\nSystem.Net.Sockets.dll!System.Net.Sockets.NetworkStream.Read(byte[] buffer, int offset, int size)\r\nSystem.Private.CoreLib.dll!System.IO.BinaryReader.ReadBytes(int count = 14)\r\nMicrosoft.Diagnostics.NETCore.Client.dll!Microsoft.Diagnostics.NETCore.Client.IpcHeader.TryParse(System.IO.BinaryReader reader = {System.IO.BinaryReader})\r\nMicrosoft.Diagnostics.NETCore.Client.dll!Microsoft.Diagnostics.NETCore.Client.IpcMessage.Parse(System.IO.Stream stream = {Microsoft.Diagnostics.NETCore.Client.ExposedSocketNetworkStream})\r\nMicrosoft.Diagnostics.NETCore.Client.dll!Microsoft.Diagnostics.NETCore.Client.IpcClient.Read(System.IO.Stream stream = {Microsoft.Diagnostics.NETCore.Client.ExposedSocketNetworkStream})\r\nMicrosoft.Diagnostics.NETCore.Client.dll!Microsoft.Diagnostics.NETCore.Client.IpcClient.SendMessage(Microsoft.Diagnostics.NETCore.Client.IpcEndpoint endpoint = {Microsoft.Diagnostics.NETCore.Client.PidIpcEndpoint}, Microsoft.Diagnostics.NETCore.Client.IpcMessage message = {Microsoft.Diagnostics.NETCore.Client.IpcMessage})\r\nMicrosoft.Diagnostics.NETCore.Client.dll!Microsoft.Diagnostics.NETCore.Client.DiagnosticsClient.GetProcessInfo()\r\nMicrosoft.Diagnostics.Monitoring.dll!Microsoft.Diagnostics.Monitoring.EndpointInfo.FromProcessId(int processId = 1074)\r\nMicrosoft.Diagnostics.Monitoring.dll!Microsoft.Diagnostics.Monitoring.ClientEndpointInfoSource.GetEndpointInfoAsync.AnonymousMethod__2()\r\nSystem.Private.CoreLib.dll!System.Threading.Tasks.Task\u003cMicrosoft.Diagnostics.Monitoring.EndpointInfo\u003e.InnerInvoke()\r\nSystem.Private.CoreLib.dll!System.Threading.Tasks.Task..cctor.AnonymousMethod__274_0(object obj)\r\nSystem.Private.CoreLib.dll!System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(System.Threading.Thread threadPoolThread = {System.Threading.Thread}, System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state)\r\nSystem.Private.CoreLib.dll!System.Threading.Tasks.Task.ExecuteWithThreadLocal(ref System.Threading.Tasks.Task currentTaskSlot = Id = 2, Status = Running, Method = \"Microsoft.Diagnostics.Monitoring.EndpointInfo \u003cGetEndpointInfoAsync\u003eb__2()\", Result = \"{Not yet computed}\", System.Threading.Thread threadPoolThread)\r\nSystem.Private.CoreLib.dll!System.Threading.Tasks.Task.ExecuteEntryUnsafe(System.Threading.Thread threadPoolThread)\r\nSystem.Private.CoreLib.dll!System.Threading.Tasks.Task.ExecuteFromThreadPool(System.Threading.Thread threadPoolThread)\r\nSystem.Private.CoreLib.dll!System.Threading.ThreadPoolWorkQueue.Dispatch()\r\nSystem.Private.CoreLib.dll!System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()\r\n```\r\n\r\nI have core dumps of process 1074 (the `dotnet run` process), process 1142 (the `dotnet-monitor` process).\r\n\r\nRelated https://github.com/dotnet/dotnet-monitor/issues/399\r\n\r\ncc @josalem",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONOOhtQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1ODgzODUxMQ==",
                                           "createdAt":  "2021-06-10T17:51:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nWhen running `dotnet run` on a project as a background process (e.g. `dotnet run \u0026`), the child process that is the application will be zombied and the diagnostics server in the `dotnet run` process is stalled.\r\n\r\nRepro steps:\r\n1. mkdir TestApp\r\n1. cd TestApp\r\n1. dotnet new webapp\r\n1. dotnet run \u0026\r\n\r\n```\r\ndotnet run \u0026\r\n[1] 1074\r\nBuilding...\r\n```\r\n\r\nThe expected bound addresses from the web application do not seem to be bound:\r\n```\r\ncurl http://localhost:5000\r\ncurl: (7) Failed to connect to localhost port 5000: Connection refused\r\n```\r\n\r\nOutput from `ps aux` (removed other processes):\r\n```\r\nps aux\r\nUSER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\r\njander    1074  3.5  0.5 3547660 66996 pts/0   Tl   08:53   0:00 dotnet run\r\njander    1093 15.6  0.0      0     0 pts/0    Z    08:53   0:01 [dotnet] \u003cdefunct\u003e\r\n```\r\n\r\n### Configuration\r\n\r\n.NET 5.0.6\r\nUbuntu 18.04 x64 on WSL 2\r\n\r\n```\r\ndotnet --list-runtimes\r\nMicrosoft.AspNetCore.All 2.1.28 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\nMicrosoft.AspNetCore.App 2.1.28 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\nMicrosoft.AspNetCore.App 3.1.15 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\nMicrosoft.AspNetCore.App 5.0.6 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\nMicrosoft.NETCore.App 2.1.28 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\nMicrosoft.NETCore.App 3.1.15 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\nMicrosoft.NETCore.App 5.0.6 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n```\r\n\r\n```\r\ndotnet --list-sdks\r\n2.1.816 [/usr/share/dotnet/sdk]\r\n3.1.409 [/usr/share/dotnet/sdk]\r\n5.0.300 [/usr/share/dotnet/sdk]\r\n```\r\n\r\n### Regression?\r\n\r\nUnknown at this time, will attempt on prior .NET Core versions soon.\r\n\r\n### Other information\r\n\r\nUsing `nohup` to run it in the background (e.g. `nohup dotnet run \u0026`) seems to work correctly. Running `dotnet run` as a foreground process works as expected.\r\n\r\nAttempting to use diagnostics tools to communicate with the diagnostics server in the `dotnet run` process has any of those diagnostics tools hang:\r\n\r\nAttempting to use dotnet-dump on the `dotnet run` process (the dotnet-dump process will run indefinitely until process 1074 is killed):\r\n```\r\ndotnet dump collect --type Full -p 1074\r\n\r\nWriting full to /home/jander/core_20210610_094401\r\n```\r\n\r\nAnother example is using dotnet-monitor to enumerate processes on the system will hang indefinitely until process 1074 is killed:\r\n```\r\ndotnet monitor collect --no-auth\r\n...\r\ncurl -k https://localhost:52323/processes\r\n```\r\n\r\ncall stack of dotnet-monitor that is trying to issue the ProcessInfo command over the diagnostics port:\r\n```\r\nSystem.Net.Sockets.dll!System.Net.Sockets.SocketPal.Receive(System.Net.Sockets.SafeSocketHandle socket, System.Net.Sockets.SocketFlags flags, System.Span\u003cbyte\u003e buffer, byte[] socketAddress, ref int socketAddressLen = 0, out System.Net.Sockets.SocketFlags receivedFlags = 1761477460, out Interop.Error errno = SUCCESS)\r\nSystem.Net.Sockets.dll!System.Net.Sockets.SocketPal.TryCompleteReceiveFrom(System.Net.Sockets.SafeSocketHandle socket, System.Span\u003cbyte\u003e buffer, System.Collections.Generic.IList\u003cSystem.ArraySegment\u003cbyte\u003e\u003e buffers, System.Net.Sockets.SocketFlags flags, byte[] socketAddress, ref int socketAddressLen, out int bytesReceived = 0, out System.Net.Sockets.SocketFlags receivedFlags = 1761477460, out System.Net.Sockets.SocketError errorCode = Success)\r\nSystem.Net.Sockets.dll!System.Net.Sockets.SocketAsyncContext.ReceiveFrom(System.Memory\u003cbyte\u003e buffer, ref System.Net.Sockets.SocketFlags flags = None, byte[] socketAddress = null, ref int socketAddressLen = 0, int timeout = -1, out int bytesReceived = 0)\r\nSystem.Net.Sockets.dll!System.Net.Sockets.SocketPal.Receive(System.Net.Sockets.SafeSocketHandle handle, byte[] buffer, int offset, int count, System.Net.Sockets.SocketFlags socketFlags, out int bytesTransferred)\r\nSystem.Net.Sockets.dll!System.Net.Sockets.Socket.Receive(byte[] buffer = {byte[14]}, int offset = 0, int size, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode = 2116193192)\r\nSystem.Net.Sockets.dll!System.Net.Sockets.NetworkStream.Read(byte[] buffer, int offset, int size)\r\nSystem.Private.CoreLib.dll!System.IO.BinaryReader.ReadBytes(int count = 14)\r\nMicrosoft.Diagnostics.NETCore.Client.dll!Microsoft.Diagnostics.NETCore.Client.IpcHeader.TryParse(System.IO.BinaryReader reader = {System.IO.BinaryReader})\r\nMicrosoft.Diagnostics.NETCore.Client.dll!Microsoft.Diagnostics.NETCore.Client.IpcMessage.Parse(System.IO.Stream stream = {Microsoft.Diagnostics.NETCore.Client.ExposedSocketNetworkStream})\r\nMicrosoft.Diagnostics.NETCore.Client.dll!Microsoft.Diagnostics.NETCore.Client.IpcClient.Read(System.IO.Stream stream = {Microsoft.Diagnostics.NETCore.Client.ExposedSocketNetworkStream})\r\nMicrosoft.Diagnostics.NETCore.Client.dll!Microsoft.Diagnostics.NETCore.Client.IpcClient.SendMessage(Microsoft.Diagnostics.NETCore.Client.IpcEndpoint endpoint = {Microsoft.Diagnostics.NETCore.Client.PidIpcEndpoint}, Microsoft.Diagnostics.NETCore.Client.IpcMessage message = {Microsoft.Diagnostics.NETCore.Client.IpcMessage})\r\nMicrosoft.Diagnostics.NETCore.Client.dll!Microsoft.Diagnostics.NETCore.Client.DiagnosticsClient.GetProcessInfo()\r\nMicrosoft.Diagnostics.Monitoring.dll!Microsoft.Diagnostics.Monitoring.EndpointInfo.FromProcessId(int processId = 1074)\r\nMicrosoft.Diagnostics.Monitoring.dll!Microsoft.Diagnostics.Monitoring.ClientEndpointInfoSource.GetEndpointInfoAsync.AnonymousMethod__2()\r\nSystem.Private.CoreLib.dll!System.Threading.Tasks.Task\u003cMicrosoft.Diagnostics.Monitoring.EndpointInfo\u003e.InnerInvoke()\r\nSystem.Private.CoreLib.dll!System.Threading.Tasks.Task..cctor.AnonymousMethod__274_0(object obj)\r\nSystem.Private.CoreLib.dll!System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(System.Threading.Thread threadPoolThread = {System.Threading.Thread}, System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state)\r\nSystem.Private.CoreLib.dll!System.Threading.Tasks.Task.ExecuteWithThreadLocal(ref System.Threading.Tasks.Task currentTaskSlot = Id = 2, Status = Running, Method = \"Microsoft.Diagnostics.Monitoring.EndpointInfo \u003cGetEndpointInfoAsync\u003eb__2()\", Result = \"{Not yet computed}\", System.Threading.Thread threadPoolThread)\r\nSystem.Private.CoreLib.dll!System.Threading.Tasks.Task.ExecuteEntryUnsafe(System.Threading.Thread threadPoolThread)\r\nSystem.Private.CoreLib.dll!System.Threading.Tasks.Task.ExecuteFromThreadPool(System.Threading.Thread threadPoolThread)\r\nSystem.Private.CoreLib.dll!System.Threading.ThreadPoolWorkQueue.Dispatch()\r\nSystem.Private.CoreLib.dll!System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()\r\n```\r\n\r\nI have core dumps of process 1074 (the `dotnet run` process), process 1142 (the `dotnet-monitor` process).\r\n\r\ncc @josalem\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejander-msft\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-06-10T17:51:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1ODg0NDc0OQ==",
                                           "createdAt":  "2021-06-10T17:58:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "josalem",
                                           "body":  "Is the process marked as `defunct` before attempting to do anything over the diagnostics IPC? This may be unrelated to the diagnostics server if so.\r\n\r\nDo you see the same behavior if you do `dotnet \u003cpath/to/dll\u003e \u0026` or `dotnet exec \u003c/path/to/dll\u003e \u0026`?",
                                           "updatedAt":  "2021-06-10T17:58:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1ODg2MDcxMw==",
                                           "createdAt":  "2021-06-10T18:13:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jander-msft",
                                           "body":  "\u003e Is the process marked as `defunct` before attempting to do anything over the diagnostics IPC? This may be unrelated to the diagnostics server if so.\r\n\r\nYes, the process is defunct before attempting diagnostics IPC. However, its the child process (1093) that is defunct, but the parent `dotnet run` process (1074) is still running and its (1074) diagnostics IPC is stalled.\r\n\r\nI\u0027ll check the `dotnet \u003cpath/to/dll\u003e` variants and see what happens.",
                                           "updatedAt":  "2021-06-10T18:13:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1ODg3NjE2MA==",
                                           "createdAt":  "2021-06-10T18:28:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jander-msft",
                                           "body":  "\u003e Do you see the same behavior if you do `dotnet \u003cpath/to/dll\u003e \u0026` or `dotnet exec \u003c/path/to/dll\u003e \u0026`?\r\n\r\nNo, these seem to work correctly.",
                                           "updatedAt":  "2021-06-10T18:28:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1ODg3OTU2OQ==",
                                           "createdAt":  "2021-06-10T18:31:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "josalem",
                                           "body":  "This smells like this old SDK/PAL issue: https://github.com/dotnet/sdk/issues/8050.\r\n\r\nLet\u0027s take a look at the child process\u0027s call stack in the memory dump and see where it is in execution.",
                                           "updatedAt":  "2021-06-10T18:31:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2MTQ3NTcyMA==",
                                           "createdAt":  "2021-06-15T12:58:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nWhen running `dotnet run` on a project as a background process (e.g. `dotnet run \u0026`), the child process that is the application will be zombied and the diagnostics server in the `dotnet run` process is stalled.\r\n\r\nRepro steps:\r\n1. mkdir TestApp\r\n1. cd TestApp\r\n1. dotnet new webapp\r\n1. dotnet run \u0026\r\n\r\n```\r\ndotnet run \u0026\r\n[1] 1074\r\nBuilding...\r\n```\r\n\r\nThe expected bound addresses from the web application do not seem to be bound:\r\n```\r\ncurl http://localhost:5000\r\ncurl: (7) Failed to connect to localhost port 5000: Connection refused\r\n```\r\n\r\nOutput from `ps aux` (removed other processes):\r\n```\r\nps aux\r\nUSER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\r\njander    1074  3.5  0.5 3547660 66996 pts/0   Tl   08:53   0:00 dotnet run\r\njander    1093 15.6  0.0      0     0 pts/0    Z    08:53   0:01 [dotnet] \u003cdefunct\u003e\r\n```\r\n\r\n### Configuration\r\n\r\n.NET 5.0.6\r\nUbuntu 18.04 x64 on WSL 2\r\n\r\n```\r\ndotnet --list-runtimes\r\nMicrosoft.AspNetCore.All 2.1.28 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\nMicrosoft.AspNetCore.App 2.1.28 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\nMicrosoft.AspNetCore.App 3.1.15 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\nMicrosoft.AspNetCore.App 5.0.6 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\nMicrosoft.NETCore.App 2.1.28 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\nMicrosoft.NETCore.App 3.1.15 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\nMicrosoft.NETCore.App 5.0.6 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n```\r\n\r\n```\r\ndotnet --list-sdks\r\n2.1.816 [/usr/share/dotnet/sdk]\r\n3.1.409 [/usr/share/dotnet/sdk]\r\n5.0.300 [/usr/share/dotnet/sdk]\r\n```\r\n\r\n### Regression?\r\n\r\nUnknown at this time, will attempt on prior .NET Core versions soon.\r\n\r\n### Other information\r\n\r\nUsing `nohup` to run it in the background (e.g. `nohup dotnet run \u0026`) seems to work correctly. Running `dotnet run` as a foreground process works as expected.\r\n\r\nAttempting to use diagnostics tools to communicate with the diagnostics server in the `dotnet run` process has any of those diagnostics tools hang:\r\n\r\nAttempting to use dotnet-dump on the `dotnet run` process (the dotnet-dump process will run indefinitely until process 1074 is killed):\r\n```\r\ndotnet dump collect --type Full -p 1074\r\n\r\nWriting full to /home/jander/core_20210610_094401\r\n```\r\n\r\nAnother example is using dotnet-monitor to enumerate processes on the system will hang indefinitely until process 1074 is killed:\r\n```\r\ndotnet monitor collect --no-auth\r\n...\r\ncurl -k https://localhost:52323/processes\r\n```\r\n\r\ncall stack of dotnet-monitor that is trying to issue the ProcessInfo command over the diagnostics port:\r\n```\r\nSystem.Net.Sockets.dll!System.Net.Sockets.SocketPal.Receive(System.Net.Sockets.SafeSocketHandle socket, System.Net.Sockets.SocketFlags flags, System.Span\u003cbyte\u003e buffer, byte[] socketAddress, ref int socketAddressLen = 0, out System.Net.Sockets.SocketFlags receivedFlags = 1761477460, out Interop.Error errno = SUCCESS)\r\nSystem.Net.Sockets.dll!System.Net.Sockets.SocketPal.TryCompleteReceiveFrom(System.Net.Sockets.SafeSocketHandle socket, System.Span\u003cbyte\u003e buffer, System.Collections.Generic.IList\u003cSystem.ArraySegment\u003cbyte\u003e\u003e buffers, System.Net.Sockets.SocketFlags flags, byte[] socketAddress, ref int socketAddressLen, out int bytesReceived = 0, out System.Net.Sockets.SocketFlags receivedFlags = 1761477460, out System.Net.Sockets.SocketError errorCode = Success)\r\nSystem.Net.Sockets.dll!System.Net.Sockets.SocketAsyncContext.ReceiveFrom(System.Memory\u003cbyte\u003e buffer, ref System.Net.Sockets.SocketFlags flags = None, byte[] socketAddress = null, ref int socketAddressLen = 0, int timeout = -1, out int bytesReceived = 0)\r\nSystem.Net.Sockets.dll!System.Net.Sockets.SocketPal.Receive(System.Net.Sockets.SafeSocketHandle handle, byte[] buffer, int offset, int count, System.Net.Sockets.SocketFlags socketFlags, out int bytesTransferred)\r\nSystem.Net.Sockets.dll!System.Net.Sockets.Socket.Receive(byte[] buffer = {byte[14]}, int offset = 0, int size, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode = 2116193192)\r\nSystem.Net.Sockets.dll!System.Net.Sockets.NetworkStream.Read(byte[] buffer, int offset, int size)\r\nSystem.Private.CoreLib.dll!System.IO.BinaryReader.ReadBytes(int count = 14)\r\nMicrosoft.Diagnostics.NETCore.Client.dll!Microsoft.Diagnostics.NETCore.Client.IpcHeader.TryParse(System.IO.BinaryReader reader = {System.IO.BinaryReader})\r\nMicrosoft.Diagnostics.NETCore.Client.dll!Microsoft.Diagnostics.NETCore.Client.IpcMessage.Parse(System.IO.Stream stream = {Microsoft.Diagnostics.NETCore.Client.ExposedSocketNetworkStream})\r\nMicrosoft.Diagnostics.NETCore.Client.dll!Microsoft.Diagnostics.NETCore.Client.IpcClient.Read(System.IO.Stream stream = {Microsoft.Diagnostics.NETCore.Client.ExposedSocketNetworkStream})\r\nMicrosoft.Diagnostics.NETCore.Client.dll!Microsoft.Diagnostics.NETCore.Client.IpcClient.SendMessage(Microsoft.Diagnostics.NETCore.Client.IpcEndpoint endpoint = {Microsoft.Diagnostics.NETCore.Client.PidIpcEndpoint}, Microsoft.Diagnostics.NETCore.Client.IpcMessage message = {Microsoft.Diagnostics.NETCore.Client.IpcMessage})\r\nMicrosoft.Diagnostics.NETCore.Client.dll!Microsoft.Diagnostics.NETCore.Client.DiagnosticsClient.GetProcessInfo()\r\nMicrosoft.Diagnostics.Monitoring.dll!Microsoft.Diagnostics.Monitoring.EndpointInfo.FromProcessId(int processId = 1074)\r\nMicrosoft.Diagnostics.Monitoring.dll!Microsoft.Diagnostics.Monitoring.ClientEndpointInfoSource.GetEndpointInfoAsync.AnonymousMethod__2()\r\nSystem.Private.CoreLib.dll!System.Threading.Tasks.Task\u003cMicrosoft.Diagnostics.Monitoring.EndpointInfo\u003e.InnerInvoke()\r\nSystem.Private.CoreLib.dll!System.Threading.Tasks.Task..cctor.AnonymousMethod__274_0(object obj)\r\nSystem.Private.CoreLib.dll!System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(System.Threading.Thread threadPoolThread = {System.Threading.Thread}, System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state)\r\nSystem.Private.CoreLib.dll!System.Threading.Tasks.Task.ExecuteWithThreadLocal(ref System.Threading.Tasks.Task currentTaskSlot = Id = 2, Status = Running, Method = \"Microsoft.Diagnostics.Monitoring.EndpointInfo \u003cGetEndpointInfoAsync\u003eb__2()\", Result = \"{Not yet computed}\", System.Threading.Thread threadPoolThread)\r\nSystem.Private.CoreLib.dll!System.Threading.Tasks.Task.ExecuteEntryUnsafe(System.Threading.Thread threadPoolThread)\r\nSystem.Private.CoreLib.dll!System.Threading.Tasks.Task.ExecuteFromThreadPool(System.Threading.Thread threadPoolThread)\r\nSystem.Private.CoreLib.dll!System.Threading.ThreadPoolWorkQueue.Dispatch()\r\nSystem.Private.CoreLib.dll!System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()\r\n```\r\n\r\nI have core dumps of process 1074 (the `dotnet run` process), process 1142 (the `dotnet-monitor` process).\r\n\r\nRelated https://github.com/dotnet/dotnet-monitor/issues/399\r\n\r\ncc @josalem\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejander-msft\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-06-15T12:58:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2MTY2NDk2OA==",
                                           "createdAt":  "2021-06-15T16:52:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "josalem",
                                           "body":  "@jander-msft let me know if you want some help investigating at the dumps.",
                                           "updatedAt":  "2021-06-15T16:52:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2ODIxODAxNg==",
                                           "createdAt":  "2021-06-25T05:37:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jander-msft",
                                           "body":  "Sync\u0027d with @josalem. We found that this does not repro on MacOS X nor on Windows.\r\n\r\nI tried this on Ubuntu 18.04 x64 in a virtual machine in Hyper-V and it does reproduce there too. So this seems to be at least an issue on Ubuntu, if not other Linux distros.",
                                           "updatedAt":  "2021-06-25T05:37:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40xdwg",
                                           "createdAt":  "2021-07-23T04:01:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "@josalem Is this a 6.0 target issue? Can we repro this in 3.1/5.0 eventpipe?",
                                           "updatedAt":  "2021-07-23T04:01:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40y7So",
                                           "createdAt":  "2021-07-23T16:44:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "josalem",
                                           "body":  "@hoyosjs I don\u0027t believe this issue is due to EventPipe. I don\u0027t have a root cause, but this happens regardless of whether you configure EventPipe. I haven\u0027t been able to repro this on my machines, but Justin was able to under a Linux VM and container. We didn\u0027t check whether this happens for 3.1 or 5.0.",
                                           "updatedAt":  "2021-07-23T16:44:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40y-Lg",
                                           "createdAt":  "2021-07-23T17:05:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBzriPQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "josalem",
                                                                               "createdAt":  "2021-07-23T17:06:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jander-msft",
                                           "body":  "\u003e We didn\u0027t check whether this happens for 3.1 or 5.0.\r\n\r\nI was able to repro this for both .NET Core 3.1 and .NET 5.0 (see \"Regression?\" in original description).",
                                           "updatedAt":  "2021-07-23T17:05:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40y-SJ",
                                           "createdAt":  "2021-07-23T17:06:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "josalem",
                                           "body":  "Ah good note, I missed that.",
                                           "updatedAt":  "2021-07-23T17:06:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4046G1",
                                           "createdAt":  "2021-07-27T08:51:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB0DMuQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "josalem",
                                                                               "createdAt":  "2021-07-27T15:54:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "Given the number of bugs we have left in 6.0 I\u0027m skeptical we\u0027ll get to this one in time. Given that the issue already exists in 3.1 and 5 if this is serious I assume we\u0027ll need a workaround elsewhere regardless.",
                                           "updatedAt":  "2021-07-27T08:51:15Z"
                                       }
                                   ],
                         "totalCount":  13
                     },
        "title":  "`dotnet run` in background will zombie child process and stall its own diagnostics server",
        "labels":  [
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/54414",
        "createdAt":  "2021-06-18T13:07:53Z",
        "number":  54414,
        "author":  "k15tfu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-04-27T21:25:06Z",
        "body":  "I have an idea of getting managed thread names in ClrMD which is based on `ISOSDacInterface` interface.\r\n\r\nAt the moment there is no fast way to get this via DAC SOS API, we can only do this by enumerating all objects and taking the ones of type `System.Threading.Thread`. This takes about 2.2 seconds for my application, versus ~1ms when using `ClrmdRuntime.Threads` (https://github.com/microsoft/clrmd/blob/957981f36eeccb6e9d266407df6522ca5cfbd899/src/Microsoft.Diagnostics.Runtime/src/Implementation/ClrmdRuntime.cs#L27).\r\n\r\nNow it looks like we can extend DAC API to get `Thread::m_ExposedObject` (https://github.com/dotnet/runtime/blob/556582d964cc21b82a88d7154e915076f6f9008e/src/coreclr/src/vm/threads.h#L2342-L2346) of given thread, so we will be able to read object fields to get the managed thread name (https://docs.microsoft.com/en-us/dotnet/api/system.threading.thread.name). The same thing is already used for debuggers in `DacDbiInterfaceImpl::GetThreadObject()`, but we cannot use it with ClrMD because it requires an initialized `IDacDbiInterface` interface.\r\n\r\nAs an advantage, the SOS `clrstack` command (https://github.com/dotnet/diagnostics/blob/main/documentation/sos-debugging-extension.md) can also use it to show managed thread names.\r\n\r\nLinked issues: https://github.com/Microsoft/clrmd/issues/57\r\n\r\ncc @mikem8361 @leculver",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOM3_66A==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2NDAyNTMyMA==",
                                           "createdAt":  "2021-06-18T13:07:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nI have an idea of getting managed thread names in ClrMD which is based on `ISOSDacInterface` interface.\r\n\r\nAt the moment there is no fast way to get this via DAC SOS API, we can only do this by enumerating all objects and taking the ones of type `System.Threading.Thread`. This takes about 2.2 seconds for my application, versus ~1ms when using `ClrmdRuntime.Threads` (https://github.com/microsoft/clrmd/blob/957981f36eeccb6e9d266407df6522ca5cfbd899/src/Microsoft.Diagnostics.Runtime/src/Implementation/ClrmdRuntime.cs#L27).\r\n\r\nNow it looks like we can extend DAC API to get `Thread::m_ExposedObject` (https://github.com/dotnet/runtime/blob/556582d964cc21b82a88d7154e915076f6f9008e/src/coreclr/src/vm/threads.h#L2342-L2346) of given thread, so we will be able to read object fields to get the managed thread name (https://docs.microsoft.com/en-us/dotnet/api/system.threading.thread.name). The same thing is already used for debuggers in `DacDbiInterfaceImpl::GetThreadObject()`, but we cannot use it with ClrMD because it requires an initialized `IDacDbiInterface` interface.\r\n\r\nAs an advantage, the SOS `clrstack` command (https://github.com/dotnet/diagnostics/blob/main/documentation/sos-debugging-extension.md) can also use it to show managed thread names.\r\n\r\nLinked issues: https://github.com/Microsoft/clrmd/issues/57\r\n\r\ncc @mikem8361 @leculver\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ek15tfu\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-06-18T13:07:59Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Ability to get managed threads handles via DAC API",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/55128",
        "createdAt":  "2021-07-03T16:02:54Z",
        "number":  55128,
        "author":  "diehell02",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-10-05T18:19:49Z",
        "body":  "I found a problem that a cpp crash catcher tool could not work on .NET Core.\r\nIt was work fine on .NET Framework.\r\n\r\nI use C++/CLI to run our native lib, and when the crash occurs, CrashRpt will catch the crash info by Windows System Message.\r\nBut on .NET Core, the console will print the crash information, like this:\r\n```\r\nFatal error. System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\r\nRepeat 2 times:\r\n--------------------------------\r\n   at \u003cModule\u003e.NativeCppDemo.MyNativeCppTestClass.memberFunctionAddFunCrash(NativeCppDemo.MyNativeCppTestClass*, Int32, Int32, Boolean)\r\n--------------------------------\r\n   at ClrCrashTest.ClrTest.memberFunAddCrash(Int32, Int32, Boolean, Boolean)\r\n   at DotNetLib.Lib.Hello(IntPtr, Int32)\r\n```\r\nAnd CrashRpt couldn\u0027t get the crash information.\r\n\r\nDoes it seem that the .NET Core runtime intercepts the crash information throw to the Windows system? If so, how could I disable this?\r\n\r\nIt\u0027s very important for us because if this problem could not be solved, we maybe need to downgrade to .NET Framework, it\u0027s a very terrible decision.\r\n\r\nPlease help me.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONBE1Nw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3MzQyOTM5NQ==",
                                           "createdAt":  "2021-07-03T16:02:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-07-03T16:02:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3MzQzNzM1Nw==",
                                           "createdAt":  "2021-07-03T16:58:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nI found a problem that a cpp crash catcher tool could not work on .NET Core.\r\nIt was work fine on .NET Framework.\r\n\r\nI use C++/CLI to run our native lib, and when the crash occurs, CrashRpt will catch the crash info by Windows System Message.\r\nBut on .NET Core, the console will print the crash information, like this:\r\n```\r\nFatal error. System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\r\nRepeat 2 times:\r\n--------------------------------\r\n   at \u003cModule\u003e.NativeCppDemo.MyNativeCppTestClass.memberFunctionAddFunCrash(NativeCppDemo.MyNativeCppTestClass*, Int32, Int32, Boolean)\r\n--------------------------------\r\n   at ClrCrashTest.ClrTest.memberFunAddCrash(Int32, Int32, Boolean, Boolean)\r\n   at DotNetLib.Lib.Hello(IntPtr, Int32)\r\n```\r\nAnd CrashRpt couldn\u0027t get the crash information.\r\n\r\nDoes it seem that the .NET Core runtime intercepts the crash information throw to the Windows system? If so, how could I disable this?\r\n\r\nIt\u0027s very important for us because if this problem could not be solved, we maybe need to downgrade to .NET Framework, it\u0027s a very terrible decision.\r\n\r\nPlease help me.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ediehell02\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-07-03T16:58:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3MzQzNzk4MA==",
                                           "createdAt":  "2021-07-03T17:02:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  ".NET Core calls RaiseFailFastException Windows API in this case. .NET Framework called RaiseFailFastException in number of situations as well, .NET Core may be calling it more situations. \r\n\r\nDoes CrashRpt tool have a problem with RaiseFailFastException ?",
                                           "updatedAt":  "2021-07-03T17:02:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3MzU0Mjk2Nw==",
                                           "createdAt":  "2021-07-04T08:05:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "diehell02",
                                           "body":  "area\r\n\r\n\u003e .NET Core calls RaiseFailFastException Windows API in this case. .NET Framework called RaiseFailFastException in number of situations as well, .NET Core may be calling it more situations.\r\n\u003e \r\n\u003e Does CrashRpt tool have a problem with RaiseFailFastException ?\r\n\r\nThanks for your reply.\r\n\r\nYes, CrashRpt maybe not support RaiseFailFastException.\r\nHave any method to stop the behavior of call RaiseFailFastException?\r\nOr would you know how to get the crash call stack by RaiseFailFastException? Because the purpose of us is to get the call stack when the crash occurs.\r\nIf CrashRpt does not support it, we need to find a way to get the call stack.",
                                           "updatedAt":  "2021-07-04T08:05:53Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Why CrashRpt could not catch the Crash information for .NET Core?",
        "labels":  [
                       "question",
                       "tracking-external-issue",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/56135",
        "createdAt":  "2021-07-22T08:16:29Z",
        "number":  56135,
        "author":  "ThomasMader",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-04-27T21:25:07Z",
        "body":  "I am referring to https://github.com/dotnet/runtime/blob/v5.0.8/docs/design/coreclr/botr/xplat-minidump-generation.md .\r\n\r\nI tried to use the documented environment variables to activate the minidump creation of the CLR from within my application by doing the following right at the start.\r\n\r\n`Environment.SetEnvironmentVariable(\"COMPlus_DbgEnableMiniDump\", \"1\");`\r\n\r\nI expected that this might not work because I figured the CLR needs that information right at the start and the application start is too late for that.\r\nNevertheless I asked myself if it would not be possible to provide a way to communicate that back to the CLR somehow.\r\n\r\nA working solution is clearly to create some kind of wrapper to set first the environment variables and then start the application.\r\nThis is just a bit inconvenient and I thought that if talking back to the CLR is not possible another solution might be to provide the environment variables to the build and the build incorporates that information into the startup process of the CLR or maybe even some kind of initialization callback.\r\n\r\nI can see that all of that is probably too much for too little gain but maybe there are better solutions to the problem I am currently not seeing.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONblCOA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc40u_pt",
                                           "createdAt":  "2021-07-22T08:16:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-07-22T08:16:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40v66-",
                                           "createdAt":  "2021-07-22T14:53:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nI am referring to https://github.com/dotnet/runtime/blob/v5.0.8/docs/design/coreclr/botr/xplat-minidump-generation.md .\r\n\r\nI tried to use the documented environment variables to activate the minidump creation of the CLR from within my application by doing the following right at the start.\r\n\r\n`Environment.SetEnvironmentVariable(\"COMPlus_DbgEnableMiniDump\", \"1\");`\r\n\r\nI expected that this might not work because I figured the CLR needs that information right at the start and the application start is too late for that.\r\nNevertheless I asked myself if it would not be possible to provide a way to communicate that back to the CLR somehow.\r\n\r\nA working solution is clearly to create some kind of wrapper to set first the environment variables and then start the application.\r\nThis is just a bit inconvenient and I thought that if talking back to the CLR is not possible another solution might be to provide the environment variables to the build and the build incorporates that information into the startup process of the CLR or maybe even some kind of initialization callback.\r\n\r\nI can see that all of that is probably too much for too little gain but maybe there are better solutions to the problem I am currently not seeing.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eThomasMader\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-07-22T14:53:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40zKc1",
                                           "createdAt":  "2021-07-23T18:37:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "@dotnet/dotnet-diag I think this is worth - I\u0027d considered making this an event-pipe command at some point, but making it in-proc makes sense too for scenarios where vars are hard to set. ",
                                           "updatedAt":  "2021-07-23T18:37:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40zK2O",
                                           "createdAt":  "2021-07-23T18:40:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBz8jhw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "kdubau",
                                                                               "createdAt":  "2021-07-25T20:04:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "AraHaan",
                                                                               "createdAt":  "2021-07-27T02:21:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "mikem8361",
                                           "body":  "@kdubau (Kyle White) from the VS4Mac team also asked about allowing something like this.",
                                           "updatedAt":  "2021-07-23T18:40:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40zhD8",
                                           "createdAt":  "2021-07-23T21:20:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "I think the principle that an app developer can enable the setting for their app independent of the particular environment it runs in is perfectly reasonable. The first approach that comes to mind would be making it a configuration setting in runtimeconfig.json, but managed APIs are also an option if there are scenarios where devs need to decide the behavior dynamically at runtime. ",
                                           "updatedAt":  "2021-07-23T21:20:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40zhnF",
                                           "createdAt":  "2021-07-23T21:26:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AraHaan",
                                           "body":  "I would love to actually be able to call the function in the runtime that allows dumping myself too. Currently it requires manual p/invokes to MiniDumpWriteDump and a few other Windows API functions just to get all the things I need in order to properly do everything that is needed. And the code in particular is an .NET Standard 2.0 library where I would like it to work to create dumps on windows, macos, and linux all from the same code and compilation. I could use reflection to probe for it like I do with GetExceptionPointers as .NET Standard lacks that member directly while it might be loaded into say a runtime that contains that function and so it works and runs it (even though that same codebase also uses source generators btw).",
                                           "updatedAt":  "2021-07-23T21:27:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc400yBh",
                                           "createdAt":  "2021-07-25T20:10:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kdubau",
                                           "body":  "\u003eif there are scenarios where devs need to decide the behavior dynamically at runtime.\r\n\r\nThis is what I was thinking for our (Visual Studio for Mac) scenario. We want to configure the `COMPlus_DbgMiniDumpName` dynamically at runtime.",
                                           "updatedAt":  "2021-07-25T20:10:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4039Wi",
                                           "createdAt":  "2021-07-26T23:04:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "Odd, I thought I commented earlier but I no longer see it in the history. Apologies if I am repeating myself...\r\n\r\n\u003e I would love to actually be able to call the function in the runtime that allows dumping myself too\r\n\r\nI think you are asking to create dumps on demand whereas the original request is to configure the runtime for capturing crash dumps if they occur in the future. For your use case I think you could use Microsoft.Diagnostics.NetCore.Client NuGet package with the [WriteDump API](https://docs.microsoft.com/en-us/dotnet/core/diagnostics/microsoft-diagnostics-netcore-client#writedump-method). Older versions of the runtime only supported this on Linux, but in .NET 5 we added Windows dump support and in .NET 6 we have Mac dump support. I haven\u0027t personally tried to make an app create a dump of itself but it seems like it should work.",
                                           "updatedAt":  "2021-07-26T23:04:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc404M3l",
                                           "createdAt":  "2021-07-27T01:55:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AraHaan",
                                           "body":  "\u003e I think you are asking to create dumps on demand whereas the original request is to configure the runtime for capturing crash dumps if they occur in the future. For your use case I think you could use Microsoft.Diagnostics.NetCore.Client NuGet package with the [WriteDump API](https://docs.microsoft.com/en-us/dotnet/core/diagnostics/microsoft-diagnostics-netcore-client#writedump-method). Older versions of the runtime only supported this on Linux, but in .NET 5 we added Windows dump support and in .NET 6 we have Mac dump support. I haven\u0027t personally tried to make an app create a dump of itself but it seems like it should work.\r\n\r\nSo basically that is safe to reference in the library even when it only targets .NET Standard 2.0 and where it most likely will be running on the .NET 5 or 6 runtime (as in when my library gets referenced in a .NET 5 or 6 project)?\r\n",
                                           "updatedAt":  "2021-07-27T01:57:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc404OjG",
                                           "createdAt":  "2021-07-27T02:14:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "The process hosting the library needs to be NS2.0 or a netcoreapp2.1 or later. However, the target process needs to be 3.1 or above (5.0 if you want windows dumps, and 6.0 for machO native dumps as Noah pointed out) to get the dump support. ",
                                           "updatedAt":  "2021-07-27T02:14:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc404PST",
                                           "createdAt":  "2021-07-27T02:23:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AraHaan",
                                           "body":  "\u003e The process hosting the library needs to be NS2.0 or a netcoreapp2.1 or later. However, the target process needs to be 3.1 or above (5.0 if you want windows dumps, and 6.0 for machO native dumps as Noah pointed out) to get the dump support.\r\n\r\nI see, well cant the process hosting the library also be the target process then? This is because the processes that consumes my library then technically would be the hosting process while also being the target process 🤔.\r\n\r\nI do admit however, it can theoretically remove all P/Invokes that I currently use in my codebase just by using that though and gain xplat dumping capabilies which is then a free enhancement.",
                                           "updatedAt":  "2021-07-27T02:25:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc404Pss",
                                           "createdAt":  "2021-07-27T02:29:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBz8mOg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "AraHaan",
                                                                               "createdAt":  "2021-07-27T02:30:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "\u003e I see, well cant the process hosting the library also be the target process then? This is because the processes that consumes my library then technically would be the hosting process while also being the target process 🤔.\r\n\r\nYes, at that point you have to be 3.1+ in Linux, 5.0+ on windows, and 6.0+ on macOS.",
                                           "updatedAt":  "2021-07-27T02:29:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc404Q-6",
                                           "createdAt":  "2021-07-27T02:45:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AraHaan",
                                           "body":  "As for the process id that api takes in, is it the .NET version of process id or the native process id\u0027s (those docs do not explicitly specify which ones)?",
                                           "updatedAt":  "2021-07-27T02:46:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc404S5S",
                                           "createdAt":  "2021-07-27T03:09:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "\u003e is it the .NET version of process id or the native process id\u0027s\r\n\r\nThere should be no distinction, ie calling win32 [GetCurrentProcessId()](https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getcurrentprocessid) returns the same number as Process.GetCurrentProcess().Id, which is the same ID as you\u0027d find in task manager. ",
                                           "updatedAt":  "2021-07-27T03:09:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc404Tu5",
                                           "createdAt":  "2021-07-27T03:18:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AraHaan",
                                           "body":  "I thought that property had a breaking change in .NET 5 where it would return the managed process ids instead.",
                                           "updatedAt":  "2021-07-27T03:18:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc404Y6Q",
                                           "createdAt":  "2021-07-27T04:23:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBz9Jaw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "AraHaan",
                                                                               "createdAt":  "2021-07-27T04:37:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "\u003e I thought that property had a breaking change in .NET 5 where it would return the managed process ids instead.\r\n\r\nIf there was a change I am unaware of it. I did a quick test on .NET 5 Windows with the managed API and it gave the expected ID.",
                                           "updatedAt":  "2021-07-27T04:23:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41uPCZ",
                                           "createdAt":  "2021-08-18T17:53:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ThomasMader",
                                           "body":  "It\u0027s a bit off topic but it is related to this so I mention it just briefly.\r\n\r\nAn option to restart the program (or start any program) in case the CLR crashed would also be convenient. With the enabled dump option the start of the new process should be done after the dump was created to be able to immediately send a crash report for example.\r\nThat could be done from the program itself for all exceptions which are catchable but if the VM would offer that I guess it could be made to work for more exception cases and when doing it from the program itself the dump was not yet created.",
                                           "updatedAt":  "2021-08-18T17:53:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41uUI4",
                                           "createdAt":  "2021-08-18T18:24:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AraHaan",
                                           "body":  "I implemented a better way with my MiniDump library (now it\u0027s xplat thanks to some logic that is xplat from a separate package) which is located at https://github.com/Elskom/Sdk.\r\n\r\nNote: Updated code is not pushed to nuget.org yet so you would need to manually copy everything from it over if you want to use it for now.\r\n\r\nI had to decide whether to basically do the following back then:\r\n- Use CsWin32 to generate Windows only MiniDumps but do nothing on other platforms.\r\n- Use the xplat nuget package that basically tells the .NET runtime itself to generate a core dump on Non-Windows platforms while it generates a proper minidump on Windows platforms without needing any conditional checks (aka ``IsWindows()``, ``IsLinux()``, ``IsMac()``, etc checks).\r\n\r\nSo then I decided on the latter without the conditional checks per platform for special dumping logic for each one.",
                                           "updatedAt":  "2021-08-18T18:28:29Z"
                                       }
                                   ],
                         "totalCount":  18
                     },
        "title":  "Enable minidump creation directly from application",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/56335",
        "createdAt":  "2021-07-26T22:00:46Z",
        "number":  56335,
        "author":  "vritant24",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-11-01T17:54:34Z",
        "body":  "### Description\r\n\r\nFor a following line of code: \r\n```cs\r\npublic void TestAreEqual()\r\n{\r\n    Assert.AreEqual(2, 0);\r\n}\r\n\r\n```\r\nThe Stack Trace is\r\n```cs\r\nMessage: \r\nAssert.AreEqual failed. Expected:\u003c2\u003e. Actual:\u003c0\u003e. \r\n\r\nStack Trace: \r\nCalculatorTests.TestAreEqual() line 36\r\n```\r\nBut when changed to the following snippet and hot reload the changes,\r\n```cs\r\npublic void TestAreEqual()\r\n{\r\n    Assert.AreEqual(2, 1);\r\n}\r\n```\r\nThe stack trace changes to:\r\n```cs\r\nMessage: \r\nAssert.AreEqual failed. Expected:\u003c2\u003e. Actual:\u003c1\u003e. \r\n\r\nStack Trace: \r\nTestAreEqual() in MSTestProject.dll:token 0x6000006+0x1\r\n```\r\n\r\nThe updates in this case are being retrieved from the EnC Hot reload service and all\r\nthe `medataDelta`, the `ilDelta` and the `pdbDelta` are being correctly passed into the `AssemblyExtensions.ApplyUpdate` api.\r\n\r\n### Configuration\r\nUsing .NET  6.0.100-preview.6.21355.2\r\nWindows 10\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOiNr96Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc4032Ua",
                                           "createdAt":  "2021-07-26T22:00:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-07-26T22:00:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc404HAL",
                                           "createdAt":  "2021-07-27T00:42:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "@vritant24 does this happen for both mono and CoreCLR?",
                                           "updatedAt":  "2021-07-27T00:42:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc404HDn",
                                           "createdAt":  "2021-07-27T00:43:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nFor a following line of code: \r\n```cs\r\npublic void TestAreEqual()\r\n{\r\n    Assert.AreEqual(2, 0);\r\n}\r\n\r\n```\r\nThe Stack Trace is\r\n```cs\r\nMessage: \r\nAssert.AreEqual failed. Expected:\u003c2\u003e. Actual:\u003c0\u003e. \r\n\r\nStack Trace: \r\nCalculatorTests.TestAreEqual() line 36\r\n```\r\nBut when changed to the following snippet and hot reload the changes,\r\n```cs\r\npublic void TestAreEqual()\r\n{\r\n    Assert.AreEqual(2, 1);\r\n}\r\n```\r\nThe stack trace changes to:\r\n```cs\r\nMessage: \r\nAssert.AreEqual failed. Expected:\u003c2\u003e. Actual:\u003c1\u003e. \r\n\r\nStack Trace: \r\nTestAreEqual() in MSTestProject.dll:token 0x6000006+0x1\r\n```\r\n\r\nThe updates in this case are being retrieved from the EnC Hot reload service and all\r\nthe `medataDelta`, the `ilDelta` and the `pdbDelta` are being correctly passed into the `AssemblyExtensions.ApplyUpdate` api.\r\n\r\n### Configuration\r\nUsing .NET  6.0.100-preview.6.21355.2\r\nWindows 10\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003evritant24\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-07-27T00:43:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc404HS6",
                                           "createdAt":  "2021-07-27T00:46:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "cc: @mikem8361 ",
                                           "updatedAt":  "2021-07-27T00:46:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc404Vda",
                                           "createdAt":  "2021-07-27T03:40:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vritant24",
                                           "body":  "\u003e @vritant24 does this happen for both mono and CoreCLR?\r\n\r\nI haven’t given this a try in Mono as my scenario only involves coreCLR. For context I’m running into this in VS as part of the Hot Reload in test execution experience.",
                                           "updatedAt":  "2021-07-27T03:40:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4043A-",
                                           "createdAt":  "2021-07-27T08:31:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "@mikem8361 - Triage this to 7.0 if it doesn\u0027t fit.\r\nThis was a known limitation for ENC and I am guessing nothing has been implemented at this point to resolve it for Hot Reload? With ENC it wasn\u0027t possible because the runtime didn\u0027t have access to the modified PDB. Now with Hot Reload we do have the delta so it is plausible we could resolve this with enough work.",
                                           "updatedAt":  "2021-07-27T08:31:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc406GnT",
                                           "createdAt":  "2021-07-27T16:14:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikem8361",
                                           "body":  "Moved to 7.0 given that the scope of this work won\u0027t fit in 6.0.",
                                           "updatedAt":  "2021-07-27T16:14:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc409O4x",
                                           "createdAt":  "2021-07-28T16:55:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB0PgwQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hoyosjs",
                                                                               "createdAt":  "2021-07-28T17:37:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "(Adding myself, because it\u0027s probably broken in Mono, too)",
                                           "updatedAt":  "2021-07-28T16:55:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5E0DMR",
                                           "createdAt":  "2022-06-13T22:14:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vritant24",
                                           "body":  "Will this not be done in the .NET 7 timeframe?",
                                           "updatedAt":  "2022-06-13T22:14:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5E3cz2",
                                           "createdAt":  "2022-06-14T15:51:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOChxf3A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vritant24",
                                                                               "createdAt":  "2022-06-14T15:56:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mikem8361",
                                           "body":  "No,  this will not fix in our .NET 7 schedule. ",
                                           "updatedAt":  "2022-06-14T15:51:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6I2v3p",
                                           "createdAt":  "2024-08-19T09:04:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MarcinZiabek",
                                           "body":  "Are there any plans to cover this enhancement in the dotnet 9 or 10 releases? Access to stack-trace could be very useful in UI libraries utilizing hot-reload capability, and providing a mapping from visual representation to code declaration. I would like to use it in the upcoming version of the QuestPDF Companion application (click on any location in the PDF document to be redirect to corresponding code responsible for that content). Dotnet watch is a good workaround but it degrades development experience.",
                                           "updatedAt":  "2024-08-19T09:04:20Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "Using ApplyUpdate for Hot Reload shows stack traces not mappable to source",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/56782",
        "createdAt":  "2021-08-03T16:41:23Z",
        "number":  56782,
        "author":  "clguiman",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-05-17T22:34:35Z",
        "body":  "[StackOverflowExceptionExample-5.0.3-focal-Debug.crash.dmp.zip](https://github.com/dotnet/runtime/files/6925689/StackOverflowExceptionExample-5.0.3-focal-Debug.crash.dmp.zip)\r\n\r\nRunning the `clrstack -i` command in dotnet-dump for the attached file will output the following:\r\n\r\n```clrstack -i\r\nLoaded C:\\Users\\clguiman\\AppData\\Local\\Temp\\SymbolCache\\mscordbi.dll/elf-buildid-coreclr-6f2a82c0d58863af64fa115aa90cf3cde25eb60d/mscordbi.dll\r\nLoaded C:\\Users\\clguiman\\AppData\\Local\\Temp\\SymbolCache\\mscordaccore.dll/elf-buildid-coreclr-6f2a82c0d58863af64fa115aa90cf3cde25eb60d/mscordaccore.dll\r\n\r\nDumping managed stack and managed variables using ICorDebug.\r\n\r\nChild SP         IP               Call Site\r\n00007F5EA4DE6DE0 00007f5ea6298dff [NativeStackFrame]\r\nStack walk complete.\r\n```\r\nThe issue also reproduces in the Visual Studio Debugger (`ICorDebugExceptionObjectCallStackEnum::GetCount` returns 0).\r\n\r\nThe stack walk succeeds when when using `clrstack`, so it seems there\u0027s an issue with the `ICorDebug` implementation.\r\n```\r\nclrstack\r\nOS Thread Id: 0x1 (0)\r\n        Child SP               IP Call Site\r\n00007F5EA4DE2D50 00007f5ea6298dff [FaultingExceptionFrame: 00007f5ea4de2d50]\r\n00007FFF4196C000 00007F5E2C485D19 StackOverflowExceptionExample.Program.InfiniteRecurse()\r\n00007FFF4196C010 00007F5E2C485D1E StackOverflowExceptionExample.Program.InfiniteRecurse()\r\n00007FFF4196C020 00007F5E2C485D1E StackOverflowExceptionExample.Program.InfiniteRecurse()\r\n00007FFF4196C030 00007F5E2C485D1E StackOverflowExceptionExample.Program.InfiniteRecurse()\r\n00007FFF4196C040 00007F5E2C485D1E StackOverflowExceptionExample.Program.InfiniteRecurse()\r\n00007FFF4196C050 00007F5E2C485D1E StackOverflowExceptionExample.Program.InfiniteRecurse()\r\n00007FFF4196C060 00007F5E2C485D1E StackOverflowExceptionExample.Program.InfiniteRecurse()\r\n00007FFF4196C070 00007F5E2C485D1E StackOverflowExceptionExample.Program.InfiniteRecurse()\r\n00007FFF4196C080 00007F5E2C485D1E StackOverflowExceptionExample.Program.InfiniteRecurse()\r\n00007FFF4196C090 00007F5E2C485D1E StackOverflowExceptionExample.Program.InfiniteRecurse()\r\n00007FFF4196C0A0 00007F5E2C485D1E StackOverflowExceptionExample.Program.InfiniteRecurse()\r\n00007FFF4196C0B0 00007F5E2C485D1E StackOverflowExceptionExample.Program.InfiniteRecurse()\r\n00007FFF4196C0C0 00007F5E2C485D1E StackOverflowExceptionExample.Program.InfiniteRecurse()\r\n00007FFF4196C0D0 00007F5E2C485D1E StackOverflowExceptionExample.Program.InfiniteRecurse()\r\n...\r\n```\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONTdBqQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc41MLN2",
                                           "createdAt":  "2021-08-04T05:54:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n[StackOverflowExceptionExample-5.0.3-focal-Debug.crash.dmp.zip](https://github.com/dotnet/runtime/files/6925689/StackOverflowExceptionExample-5.0.3-focal-Debug.crash.dmp.zip)\r\n\r\nRunning the `clrstack -i` command in dotnet-dump for the attached file will output the following:\r\n\r\n```clrstack -i\r\nLoaded C:\\Users\\clguiman\\AppData\\Local\\Temp\\SymbolCache\\mscordbi.dll/elf-buildid-coreclr-6f2a82c0d58863af64fa115aa90cf3cde25eb60d/mscordbi.dll\r\nLoaded C:\\Users\\clguiman\\AppData\\Local\\Temp\\SymbolCache\\mscordaccore.dll/elf-buildid-coreclr-6f2a82c0d58863af64fa115aa90cf3cde25eb60d/mscordaccore.dll\r\n\r\nDumping managed stack and managed variables using ICorDebug.\r\n\r\nChild SP         IP               Call Site\r\n00007F5EA4DE6DE0 00007f5ea6298dff [NativeStackFrame]\r\nStack walk complete.\r\n```\r\nThe issue also reproduces in the Visual Studio Debugger (`ICorDebugExceptionObjectCallStackEnum::GetCount` returns 0).\r\n\r\nThe stack walk succeeds when when using `clrstack`, so it seems there\u0027s an issue with the `ICorDebug` implementation.\r\n```\r\nclrstack\r\nOS Thread Id: 0x1 (0)\r\n        Child SP               IP Call Site\r\n00007F5EA4DE2D50 00007f5ea6298dff [FaultingExceptionFrame: 00007f5ea4de2d50]\r\n00007FFF4196C000 00007F5E2C485D19 StackOverflowExceptionExample.Program.InfiniteRecurse()\r\n00007FFF4196C010 00007F5E2C485D1E StackOverflowExceptionExample.Program.InfiniteRecurse()\r\n00007FFF4196C020 00007F5E2C485D1E StackOverflowExceptionExample.Program.InfiniteRecurse()\r\n00007FFF4196C030 00007F5E2C485D1E StackOverflowExceptionExample.Program.InfiniteRecurse()\r\n00007FFF4196C040 00007F5E2C485D1E StackOverflowExceptionExample.Program.InfiniteRecurse()\r\n00007FFF4196C050 00007F5E2C485D1E StackOverflowExceptionExample.Program.InfiniteRecurse()\r\n00007FFF4196C060 00007F5E2C485D1E StackOverflowExceptionExample.Program.InfiniteRecurse()\r\n00007FFF4196C070 00007F5E2C485D1E StackOverflowExceptionExample.Program.InfiniteRecurse()\r\n00007FFF4196C080 00007F5E2C485D1E StackOverflowExceptionExample.Program.InfiniteRecurse()\r\n00007FFF4196C090 00007F5E2C485D1E StackOverflowExceptionExample.Program.InfiniteRecurse()\r\n00007FFF4196C0A0 00007F5E2C485D1E StackOverflowExceptionExample.Program.InfiniteRecurse()\r\n00007FFF4196C0B0 00007F5E2C485D1E StackOverflowExceptionExample.Program.InfiniteRecurse()\r\n00007FFF4196C0C0 00007F5E2C485D1E StackOverflowExceptionExample.Program.InfiniteRecurse()\r\n00007FFF4196C0D0 00007F5E2C485D1E StackOverflowExceptionExample.Program.InfiniteRecurse()\r\n...\r\n```\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eclguiman\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-08-04T05:54:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41NmcM",
                                           "createdAt":  "2021-08-04T15:32:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@clguiman thanks for reporting this issue! The example shows an ELF dumps collected on Linux and analyzed on Windows.  Do you see the same behavior when running dotnet-dump locally on the same Linux machine where the dump was originally collected? ",
                                           "updatedAt":  "2021-08-04T15:32:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41N0Gp",
                                           "createdAt":  "2021-08-04T16:50:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB1HxLA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2021-08-04T19:01:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "schmittjoseph",
                                           "body":  "@tommcdon I verified that the dotnet-dump behavior is identical when running on the Linux machine/container:\r\n\r\n```\r\nLoading core dump: /coredumps/StackOverflowExceptionExample-5.0.3-focal-Debug.crash.dmp ...\r\n\u003e clrstack -i\r\n\r\nDumping managed stack and managed variables using ICorDebug.\r\n=============================================================================\r\nChild SP         IP               Call Site\r\n00007F5EA4DE6DE0 00007f5ea6298dff [NativeStackFrame]\r\nStack walk complete.\r\n=============================================================================\r\n```\r\n```\r\n\u003e clrstack\r\nOS Thread Id: 0x1 (0)\r\n        Child SP               IP Call Site\r\n00007F5EA4DE2D50 00007f5ea6298dff [FaultingExceptionFrame: 00007f5ea4de2d50]\r\n00007FFF4196C000 00007F5E2C485D19 StackOverflowExceptionExample.Program.InfiniteRecurse()\r\n00007FFF4196C010 00007F5E2C485D1E StackOverflowExceptionExample.Program.InfiniteRecurse()\r\n00007FFF4196C020 00007F5E2C485D1E StackOverflowExceptionExample.Program.InfiniteRecurse()\r\n00007FFF4196C030 00007F5E2C485D1E StackOverflowExceptionExample.Program.InfiniteRecurse()\r\n00007FFF4196C040 00007F5E2C485D1E StackOverflowExceptionExample.Program.InfiniteRecurse()\r\n...\r\n```",
                                           "updatedAt":  "2021-08-04T16:50:13Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[dotnet-dump] \"clrstack -i\" fails to walk the call stack of a thread that has a StackOverflow exception",
        "labels":  [
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/57784",
        "createdAt":  "2021-08-19T21:32:30Z",
        "number":  57784,
        "author":  "hoyosjs",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODLpPdQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "am11",
                                            "createdAt":  "2021-08-19T21:55:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tmost-utilidata",
                                            "createdAt":  "2025-08-18T19:03:38Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-05-14T20:26:14Z",
        "body":  "There\u0027s an ABI breaking change between LTTNG-ust 2.12 and 2.13, so they\u0027ve reved their soname from `liblttng-ust.so.0` to `liblttng-ust.so.1`. We link against the former. Given some distros will start supporting newer versions, customers will likely end up upgrading packages and realize they can\u0027t load `libcoreclrtraceptprovider.so`. We should investigate avenues to support multiple versions as needed using compilation tricks like the ones used in System.Security for openssl. Other possibility is to only support 2.13 and that brings us come code sanity advantages - this would only happen in .NET 7+ realistically.\r\n\r\n@brianrob @dotnet/dotnet-diag ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOq7_PyQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc41x29f",
                                           "createdAt":  "2021-08-19T21:32:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThere\u0027s an ABI breaking change between LTTNG-ust 2.12 and 2.13, so they\u0027ve reved their soname from `liblttng-ust.so.0` to `liblttng-ust.so.1`. We link against the former. Given some distros will start supporting newer versions, customers will likely end up upgrading packages and realize they can\u0027t load `libcoreclrtraceptprovider.so`. We should investigate avenues to support multiple versions as needed using compilation tricks like the ones used in System.Security for openssl. Other possibility is to only support 2.13 and that brings us come code sanity advantages - this would only happen in .NET 7+ realistically.\r\n\r\n@brianrob @dotnet/dotnet-diag \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ehoyosjs\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-08-19T21:32:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41x6F1",
                                           "createdAt":  "2021-08-19T21:55:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "\u003e using compilation tricks like the ones used in System.Security for openssl\r\n\r\nNote, same (shim) tricks are used for libnuma.so, which is closer to where coreclrtraceptprovider lives. 🙂",
                                           "updatedAt":  "2021-08-19T21:55:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41x65W",
                                           "createdAt":  "2021-08-19T22:01:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "Thanks. The shim approach is tempting. We sort of codegen the trace points, so this one will be interesting if we decide to support both. ",
                                           "updatedAt":  "2021-08-19T22:01:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44Up1M",
                                           "createdAt":  "2021-10-16T15:48:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB-wHGg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "josalem",
                                                                               "createdAt":  "2021-10-18T17:12:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "am11",
                                           "body":  "After some digging, it turned out `lttng/tracepoint.h` header (the one we use) does things quite differently than libssl, libnuma ones. It differs in the following manner:\r\n\r\n* We use `TACEPOINT_*` macros which (during the macro expansion) binds to `__tracepoints__init` method and the related code chunks.\r\n   * We stay consistent and do not directly use any non-macro APIs.\r\n* The `__tracepoints__init` itself uses `dlopen(3)` and uses the ABI-versioned flavor `liblttng-ust.so.0`, `liblttng-ust.so.1` (For 2.13).\r\n    * They even have explicit validation checks in 2.13 to ensure that the current process does not have `so.0` loaded. e.g. https://github.com/lttng/lttng-ust/blob/d2a010d/src/lib/lttng-ust-tracepoint/tracepoint.c#L611-L642\r\n\r\nHere is the expansion of macros for our generated `tpdotnetruntimemonoprofiler.h`:\r\n\r\n```sh\r\n# on Ubuntu x64\r\n$ ./build.sh clr\r\n$ clang-9 -E \\\r\n    artifacts/obj/coreclr/Linux.x64.Debug/pal/src/eventprovider/lttngprovider/lttng/tpdotnetruntimemonoprofiler.h \\\r\n    -Isrc/coreclr/pal/inc/rt -Isrc/coreclr/pal/inc \u003e dump\r\n````\r\nthe dump looks like this: http://sprunge.us/J5rsv3 (and file tpdotnetruntimemonoprofiler.h: http://sprunge.us/LPmIuJ). Search for `__tracepoints__init` or `dlopen(\"liblttng`. It is quite noisy, so I made a copy, removed `#include \"palrt.h\"` etc. and kept only one probe, here is the shorter version of this expansion: http://sprunge.us/BK0q1V, at the very end of this file is the code of interest.\r\n\r\nI will defer to @janvorli as to the best approach for lttngshim. One option is that we install both versions on the official build machine, and compile both v0 and v1 implementations in our code with our pseudo init; which will probe for .so.1, and if not found, .so.0, then select the implementation based on the result. This approach will prevent us from stamping out symbols of `liblttng-ust{-tracepoint}.so` and we will still be using their init mechanism (which seem to take care of \"shared access\" scenarios).",
                                           "updatedAt":  "2021-10-18T18:20:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44XhCO",
                                           "createdAt":  "2021-10-18T11:55:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB-xhQA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2021-10-18T15:28:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "josalem",
                                                                               "createdAt":  "2021-10-18T17:14:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "hoyosjs",
                                                                               "createdAt":  "2021-10-18T19:45:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@am11 thank you for the analysis! I\u0027ll take a look into the possibilities of shimming lttng and consider your suggestion.",
                                           "updatedAt":  "2021-10-18T11:55:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44Y9Fq",
                                           "createdAt":  "2021-10-18T18:51:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Thanks. I actually found about dlopen/dlsym pattern in their code when I commented out these lines (to see what breaks) https://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/coreclr/pal/src/eventprovider/lttngprovider/CMakeLists.txt#L63-L68\r\njust to find out it had no effect on the build result (still succeeds) other than we (unnecessarily) link to `liblttng-ust{-tracepoint}.so.0`. :slightly_smiling_face: All public APIs in their header are already shim-like macro (without multi-version support):\r\n\r\n* https://lttng.org/man/3/lttng-ust/v2.12/\r\n* https://lttng.org/man/3/lttng-ust/v2.13/",
                                           "updatedAt":  "2021-10-18T18:54:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44ZFfi",
                                           "createdAt":  "2021-10-18T19:34:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "It seems that we will need to create and distribute two flavors of the libcoreclrtraceptprovider.so, one compiled with one version of lttng and the other with the other one. Then we would try to load one and if we fail, try to load the other. It seems that\u0027s essentially what @am11 has suggested, right @am11? ",
                                           "updatedAt":  "2021-10-18T19:34:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44ZHI8",
                                           "createdAt":  "2021-10-18T19:45:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "Yes, and that also seems to be what needs to happen from my understanding.",
                                           "updatedAt":  "2021-10-18T19:45:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44ZJcA",
                                           "createdAt":  "2021-10-18T19:58:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "@janvorli, yes, that\u0027s what I was thinking. It will be cleaner, as it will save us from using macro post-expansion calls. The quickest way to get there is to duplicate python code (as macro names are changed in 2.13). \r\n\r\n#### Part II - python free implementation\r\n\r\nHowever, in a separate project, we can replace the python scripts with lttngshim which will dynamically define those macros (at build time) and we can expand it without needing to build code. It is more work as python scripts read the XML (ETL manifest) file and generates multiple header and code files. If we think replacing python is a good idea, then I was imagining for:\r\n\r\n* input: we define a static header with our events and groups and keep it in sync with  `src/coreclr/vm/ClrEtwAll.man` (manually at first, as it\u0027s only a few times a year we add/modify events; if we have more time, we can use XmlPeek msbuild task to update the header files when msbuild is present .. because cmake doesn\u0027t support xml parsing)\r\n* output, instead of creating too many header and code files (this is half of what we produce: https://gist.github.com/am11/404d99384eaae7259bcabdd06ff5e307), we can make one and ifdef out the flavors: coreclr, mono, rundom, private and stress.",
                                           "updatedAt":  "2021-10-18T20:08:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44ZM8U",
                                           "createdAt":  "2021-10-18T20:15:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "brianrob",
                                           "body":  "One thing to add here: Using `src\\coreclr\\vm\\ClrEtwAll.man` as the one source of truth means that all other tools that consume events only have to look at one source of truth.  For example, TraceEvent-based tools use the manifest to generate C# code that gets used to parse the events.",
                                           "updatedAt":  "2021-10-18T20:15:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44ZOkL",
                                           "createdAt":  "2021-10-18T20:24:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "\u003e One thing to add here: Using `src\\coreclr\\vm\\ClrEtwAll.man` as the one source of truth means that all other tools that consume events only have to look at one source of truth\r\n\r\nI understand the rationale, and using `XmlPeek` -based parsing to dynamically generate the header is an option. However, in varied parts of runtime code base, we do manually keep lists in-sync which infrequently change, a few examples:\r\nhttps://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/coreclr/debug/inc/dbgtargetcontext.h#L29\r\nhttps://github.com/dotnet/runtime/blob/462ab6e7a65dec97944e408b1959e71276f83988/src/libraries/Common/src/Interop/Unix/System.Native/Interop.UnixFileSystemTypes.cs#L15\r\nhttps://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/libraries/Native/Unix/System.Globalization.Native/pal_calendarData.h#L13",
                                           "updatedAt":  "2021-10-18T20:24:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44ZPKh",
                                           "createdAt":  "2021-10-18T20:28:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB-ypYQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "noahfalk",
                                                                               "createdAt":  "2021-10-18T22:01:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "brianrob",
                                           "body":  "Agree that we have precedent for duplicate lists that have to be kept in sync, I\u0027d just rather not add another one.  :)",
                                           "updatedAt":  "2021-10-18T20:28:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44ZPP5",
                                           "createdAt":  "2021-10-18T20:28:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB-x9DQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "josalem",
                                                                               "createdAt":  "2021-10-18T20:33:11Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "Yes, but eventing is one of those things that often doesn\u0027t get updated much, but it gets updated by more than their known maintainers. Maintaining it outside the manifest is brittle. That\u0027s the main reason the python scripts have changed. It could easily be a little C# app that we stick in clr.prereqs and reads the manifest; we could stub them for bring up or generate them in a separate machine if needed if all we are trying to do is get rid of the Python dependency. There\u0027s prior art for this with the DAC table generation.",
                                           "updatedAt":  "2021-10-18T20:31:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44Z1yu",
                                           "createdAt":  "2021-10-19T01:46:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "\u003e but it gets updated by more than their known maintainers\r\n\r\nLooking at git history of ClrEtwAll.man, it doesn\u0027t seem that way.\r\n\r\n\u003e It could easily be a little C# app\r\n\r\nWhy would the C# app better than a simple msbuild XmlPeek like https://github.com/dotnet/runtime/blob/b201a16e1a642f9532c8ea4e42d23af8f4484a36/src/libraries/System.Runtime.InteropServices/tests/TestAssets/NativeExports/NativeExports.csproj#L49?",
                                           "updatedAt":  "2021-10-19T01:46:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44ao_8",
                                           "createdAt":  "2021-10-19T09:01:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "Both C# app and msbuild would be problematic for bring-up of new platforms where we need to be able to build runtime native parts without pre-existing .NET runtime. So it seems it would be preferable to use a shell script instead if we wanted to drop python.",
                                           "updatedAt":  "2021-10-19T09:01:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44asge",
                                           "createdAt":  "2021-10-19T09:18:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "@janvorli for bring up, do you consider LTTNG crucial? Eventing in general is important for breadcrumbs, but I don\u0027t see why on bring up the source can\u0027t be checked in for the time being or stubbed out until it\u0027s deemed usable. We didn\u0027t want bash - we\u0027d need bash + cmd. That\u0027s why it\u0027s python right now. I don\u0027t see all that much issue in python at the moment, but I know @am11 and @jkotas have a different opinion around having it as a dependency.",
                                           "updatedAt":  "2021-10-19T09:18:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44awhL",
                                           "createdAt":  "2021-10-19T09:38:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "I was thinking about a header containing a list of macros with event definitions (similar to`ecalllist.h`), checked into the source control.\r\n\r\nThat header file containing definitions could be generated/update with msbuild task when msbuild is available. On new platforms, where msbuild is not available and we pass `-skipmanaged` etc. to `build-runtime.sh` (i.e. not a common scenario or something used by any CI leg), chances of someone adding a new event that updates ETL manifest in the same commit where they are porting runtime on a new platform does not sound likely.\r\n\r\nRegarding the shell script option, it would require an additional dependency on xml parsing tool which I was avoiding.",
                                           "updatedAt":  "2021-10-19T09:38:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44bSZZ",
                                           "createdAt":  "2021-10-19T12:35:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "\u003e for bring up, do you consider LTTNG crucial?\r\n\r\nNo, however we would need to enable building runtime without eventing. However, it would be nicer to be able to build all native parts even on a new platform. In the past, we\u0027ve done bringup using an existing .NET SDK as a basis where we\u0027ve replaced all native binaries be ones built on the new platform. So having all of them makes things complete. Also, I am not sure how would the source build that is expected to be used by distros handle this case.",
                                           "updatedAt":  "2021-10-19T12:35:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44bUB0",
                                           "createdAt":  "2021-10-19T12:44:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e I was thinking about a header containing a list of macros with event definition\r\n\r\nThis looks similar to what I have suggested in https://github.com/dotnet/runtime/pull/39052#issuecomment-656709021\r\n\r\n\u003e Also, I am not sure how would the source build that is expected to be used by distros handle this case.\r\n\r\nI believe that source build assumes pre-built SDK. It does not bootstrap from nothing.",
                                           "updatedAt":  "2021-10-19T12:44:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44bUwK",
                                           "createdAt":  "2021-10-19T12:48:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "\u003e This looks similar to what I have suggested in #39052 (comment)\r\n\r\nAh, I\u0027ve  forgotten about this comment, that sounds like the best solution to take care of my concern.",
                                           "updatedAt":  "2021-10-19T12:48:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46pi0U",
                                           "createdAt":  "2021-12-01T19:06:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "omajid",
                                           "body":  "FWIW, Fedora 36 has picked up this version of lttng-ust and I am seeing crashes (in crossgen2!) there while trying to build .NET 6. Here\u0027s the backtrace from lldb:\r\n\r\n```\r\n* thread #1, name = \u0027crossgen2\u0027, stop reason = signal SIGSEGV: invalid address (fault address: 0x10)\r\n    frame #0: 0x00007ffff71dcb82 liblttng-ust.so.1`check_event_provider + 162\r\nliblttng-ust.so.1`check_event_provider:\r\n-\u003e  0x7ffff71dcb82 \u003c+162\u003e: movq   0x10(%rax), %rdi\r\n    0x7ffff71dcb86 \u003c+166\u003e: callq  0x7ffff71dca40            ; check_type_provider\r\n    0x7ffff71dcb8b \u003c+171\u003e: movl   %eax, %r12d\r\n    0x7ffff71dcb8e \u003c+174\u003e: testb  %al, %al\r\n(lldb) bt\r\n* thread #1, name = \u0027crossgen2\u0027, stop reason = signal SIGSEGV: invalid address (fault address: 0x10)\r\n  * frame #0: 0x00007ffff71dcb82 liblttng-ust.so.1`check_event_provider + 162\r\n    frame #1: 0x00007ffff71e24d1 liblttng-ust.so.1`lttng_ust_probe_register + 33\r\n    frame #2: 0x00007ffff72957b5 libcoreclrtraceptprovider.so`lttng_ust__events_init__DotNETRuntime() at ust-tracepoint-event.h:1198:14\r\n\r\n```\r\n\r\nIs there a fix for this planned?",
                                           "updatedAt":  "2021-12-01T19:09:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46pqqS",
                                           "createdAt":  "2021-12-01T19:51:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCE2uZA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "omajid",
                                                                               "createdAt":  "2021-12-01T22:35:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "am11",
                                           "body":  "\u003e Is there a fix for this planned?\r\n\r\nCurrent workaround is to disable event trace by deleting the following block before build: https://github.com/dotnet/runtime/blob/9d4ce4048c08317e320d5b826df7f12d50b7d083/src/coreclr/clrfeatures.cmake#L5-L7\r\n\r\nSupporting both ABI versions of liblttng-ust in parallel would require more work than a few liner fix.",
                                           "updatedAt":  "2021-12-01T19:51:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46sVPV",
                                           "createdAt":  "2021-12-02T14:52:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "omajid",
                                           "body":  "Disabling feature like this:\r\n\r\n```diff\r\ndiff --git a/src/coreclr/clrfeatures.cmake b/src/coreclr/clrfeatures.cmake\r\nindex f82ff1aa4e7..dfab148dbc3 100644\r\n--- a/src/coreclr/clrfeatures.cmake\r\n+++ b/src/coreclr/clrfeatures.cmake\r\n@@ -3,7 +3,7 @@ if(CLR_CMAKE_TARGET_TIZEN_LINUX)\r\n endif()\r\n \r\n if(NOT DEFINED FEATURE_EVENT_TRACE)\r\n-  set(FEATURE_EVENT_TRACE 1)\r\n+  set(FEATURE_EVENT_TRACE 0)\r\n endif(NOT DEFINED FEATURE_EVENT_TRACE)\r\n \r\n if(NOT DEFINED FEATURE_PERFTRACING AND FEATURE_EVENT_TRACE)\r\n```\r\n\r\nOr even\r\n\r\n```diff\r\ndiff --git a/src/coreclr/clrfeatures.cmake b/src/coreclr/clrfeatures.cmake\r\nindex f82ff1aa4e7..54a61c808e6 100644\r\n--- a/src/coreclr/clrfeatures.cmake\r\n+++ b/src/coreclr/clrfeatures.cmake\r\n@@ -3,7 +3,6 @@ if(CLR_CMAKE_TARGET_TIZEN_LINUX)\r\n endif()\r\n \r\n if(NOT DEFINED FEATURE_EVENT_TRACE)\r\n-  set(FEATURE_EVENT_TRACE 1)\r\n endif(NOT DEFINED FEATURE_EVENT_TRACE)\r\n \r\n if(NOT DEFINED FEATURE_PERFTRACING AND FEATURE_EVENT_TRACE)\r\n```\r\n\r\nDoesn\u0027t seem to work too well out of the box. A `./build.sh` produces:\r\n\r\n```\r\n  /home/omajid/devel/dotnet/runtime/src/coreclr/inc/profilepriv.h:388:34: error: unknown type name \u0027EventPipeProvider\u0027\r\n      void EventPipeEventDelivered(EventPipeProvider *provider, DWORD eventId, DWORD eventVersion, ULONG cbMetadataBlob, LPCBYTE metadataBlob, ULONG cbEventData,                                                                           \r\n                                   ^                                                                                    /home/omajid/devel/dotnet/runtime/src/coreclr/inc/profilepriv.h:390:35: error: unknown type name \u0027EventPipeProvider\u0027\r\n      void EventPipeProviderCreated(EventPipeProvider *provider);                                                     \r\n                                    ^\r\n  /home/omajid/devel/dotnet/runtime/src/coreclr/vm/eetoprofinterfaceimpl.h:462:9: error: unknown type name \u0027EventPipeProvider\u0027                                                                                                              \r\n          EventPipeProvider *provider,                                                                                \r\n          ^                                                                                                           \r\n  /home/omajid/devel/dotnet/runtime/src/coreclr/vm/eetoprofinterfaceimpl.h:475:38: error: unknown type name \u0027EventPipeProvider\u0027                                                                                                             \r\n      HRESULT EventPipeProviderCreated(EventPipeProvider *provider);                                                  \r\n                                       ^\r\n  /home/omajid/devel/dotnet/runtime/src/coreclr/inc/profilepriv.h:388:34: error: unknown type name \u0027EventPipeProvider\u0027\r\n      void EventPipeEventDelivered(EventPipeProvider *provider, DWORD eventId, DWORD eventVersion, ULONG cbMetadataBlob, LPCBYTE metadataBlob, ULONG cbEventData,                                                                           \r\n                                   ^                                                                                  \r\n  /home/omajid/devel/dotnet/runtime/src/coreclr/inc/profilepriv.h:390:35: error: unknown type name \u0027EventPipeProvider\u0027\r\n      void EventPipeProviderCreated(EventPipeProvider *provider);                                                     \r\n                                    ^                                           \r\n```\r\n\r\nAnd many similar errors.",
                                           "updatedAt":  "2021-12-02T17:57:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46tSqO",
                                           "createdAt":  "2021-12-02T19:51:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Sounds like something has regressed since https://github.com/dotnet/runtime/pull/32746. :)\r\nThis scenario is not tested in the CI (build on linux by disabling `FEATURE_EVENT_TRACE`). Perhaps we also need to delete: https://github.com/dotnet/runtime/blob/ad9979381706d1976e4d26e13cb88d6147264968/src/coreclr/clrdefinitions.cmake#L119-L121 and set this to `false`: https://github.com/dotnet/runtime/blob/ad9979381706d1976e4d26e13cb88d6147264968/src/coreclr/clr.featuredefines.props#L17",
                                           "updatedAt":  "2021-12-02T19:51:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46tlLc",
                                           "createdAt":  "2021-12-02T21:47:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "Is disabling loading LTTNG support enough for now? `COMPlus_LTTng=0`",
                                           "updatedAt":  "2021-12-02T21:47:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46touH",
                                           "createdAt":  "2021-12-02T22:09:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "omajid",
                                           "body":  "\u003e Is disabling loading LTTNG support enough for now? `COMPlus_LTTng=0`\r\n\r\nIt\u0027s good enough for me, personally. And it\u0027s enough for the source-build builds I care about. But end-users who upgrade to distributions that have lttng-ust (Fedora \u003e= 36, Arch Linux, probably more soon) will run into crashes at runtime and will not even know about this workaround.",
                                           "updatedAt":  "2021-12-02T22:09:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46tupk",
                                           "createdAt":  "2021-12-02T22:52:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Unless someone is already working on it, I think we should stop pursuing \"convert event generator to shim\" part for now and focus on multi-version support first. It includes the following:\r\n\r\n* keeping lttng-ust headers in source tree (`src/native/external/lttng` perhaps? as @jkotas proposed for zlib etc.)\r\n* building two versions of our existing provider: `libcoreclrtraceptprovider.so.0` and `libcoreclrtraceptprovider.so.1` for each liblttng-ust ABI/SO version.\r\n* adding a mechanism to load suitable lttng, we have prior art for this in src/coreclr/pal, the initialization logic for libcoreclrtraceptprovider (but there might be some fallouts due to the dynamic linkage which appreantly is not needed https://github.com/dotnet/runtime/issues/57784#issuecomment-946065770?)\r\n\r\nConversion to shim would be nice, but it has many moving parts; even if we do the conversion first, it will probably not exempt the above steps.",
                                           "updatedAt":  "2021-12-02T23:12:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46vCdM",
                                           "createdAt":  "2021-12-03T10:36:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e Fedora 36 has picked up this version of lttng-ust and I am seeing crashes (in crossgen2!) there while trying to build .NET 6. Here\u0027s the backtrace from lldb:\r\n\r\nI\u0027m reproducing this issue.\r\n\r\n```\r\n  * frame #0: 0x00007f8885a47b82 liblttng-ust.so.1`check_event_provider + 162\r\n    frame #1: 0x00007f8885a4d4d1 liblttng-ust.so.1`lttng_ust_probe_register + 33\r\n    frame #2: 0x00007f8885b007b5 libcoreclrtraceptprovider.so`lttng_ust__events_init__DotNETRuntime() at ust-tracepoint-event.h:1198:14\r\n    frame #3: 0x00007f888683fa2e ld-linux-x86-64.so.2`call_init(l=\u003cunavailable\u003e, argc=10, argv=0x00007ffcd00cfd88, env=0x00007ffcd00cfde0) at dl-init.c:70:3\r\n    frame #4: 0x00007f888683fb1c ld-linux-x86-64.so.2`_dl_init(main_map=0x0000556bd608a290, argc=10, argv=0x00007ffcd00cfd88, env=0x00007ffcd00cfde0) at dl-init.c:117:5\r\n    frame #5: 0x00007f88864534c5 libc.so.6`_dl_catch_exception + 229\r\n    frame #6: 0x00007f88868437de ld-linux-x86-64.so.2`dl_open_worker at dl-open.c:821:5\r\n    frame #7: 0x00007f8886453468 libc.so.6`_dl_catch_exception + 136\r\n    frame #8: 0x00007f8886843b5c ld-linux-x86-64.so.2`_dl_open at dl-open.c:896:17\r\n    frame #9: 0x00007f888638294c libc.so.6`dlopen_doit + 92\r\n    frame #10: 0x00007f8886453468 libc.so.6`_dl_catch_exception + 136\r\n    frame #11: 0x00007f8886453533 libc.so.6`_dl_catch_error + 51\r\n    frame #12: 0x00007f888638244e libc.so.6`_dlerror_run + 142\r\n    frame #13: 0x00007f88863829d8 libc.so.6`dlopen@GLIBC_2.2.5 + 72\r\n    frame #14: 0x00007f8885fd6893 libcoreclr.so`PAL_InitializeTracing() at tracepointprovider.cpp:116:9\r\n    frame #15: 0x00007f888683fa2e ld-linux-x86-64.so.2`call_init(l=\u003cunavailable\u003e, argc=10, argv=0x00007ffcd00cfd88, env=0x00007ffcd00cfde0) at dl-init.c:70:3\r\n    frame #16: 0x00007f888683fb1c ld-linux-x86-64.so.2`_dl_init(main_map=0x0000556bd6060050, argc=10, argv=0x00007ffcd00cfd88, env=0x00007ffcd00cfde0) at dl-init.c:117:5\r\n    frame #17: 0x00007f88864534c5 libc.so.6`_dl_catch_exception + 229\r\n    frame #18: 0x00007f88868437de ld-linux-x86-64.so.2`dl_open_worker at dl-open.c:821:5\r\n    frame #19: 0x00007f8886453468 libc.so.6`_dl_catch_exception + 136\r\n    frame #20: 0x00007f8886843b5c ld-linux-x86-64.so.2`_dl_open at dl-open.c:896:17\r\n    frame #21: 0x00007f888638294c libc.so.6`dlopen_doit + 92\r\n    frame #22: 0x00007f8886453468 libc.so.6`_dl_catch_exception + 136\r\n    frame #23: 0x00007f8886453533 libc.so.6`_dl_catch_error + 51\r\n    frame #24: 0x00007f888638244e libc.so.6`_dlerror_run + 142\r\n    frame #25: 0x00007f88863829d8 libc.so.6`dlopen@GLIBC_2.2.5 + 72\r\n    frame #26: 0x00007f8886274ead libhostpolicy.so`pal::load_library(path=\"/home/tmds/rpmbuild/BUILD/dotnet-9e8b04bbff820c93c142f99a507a46b976f5c14c-x64-bootstrap/src/aspnetcore.ae1a6cbe225b99c0bf38b7e31bf60cb653b73a52/artifacts/source-build/self/package-cache/microsoft.netcore.app.crossgen2.linux-x64/6.0.0/tools/libcoreclr.so\", dll=0x00007f888629e0a0) at pal.unix.cpp:230:12\r\n...\r\n```\r\n\r\nI think the build works fine while using the prebuilts that link against `liblttng-ust.so.0`: It silently fails to load `libcoreclrtraceptprovider.so`.\r\n\r\nIn the stacktrace we see `liblttng-ust.so.1` is loaded. I think these are binaries that got built against that. The `SIGSEGV` occurs in `check_event_provider` which is meant to validate the tracepoints. This may a regression in LTTng.",
                                           "updatedAt":  "2021-12-03T10:36:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46vfqx",
                                           "createdAt":  "2021-12-03T13:39:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "I can reproduce the issue by invoking corerun on a hello world console app.\r\n\r\nThe crash happens at this line: https://github.com/lttng/lttng-ust/blob/4c155a06d838e1ab5d385abd1d73ae56e71b7d5e/src/lib/lttng-ust/lttng-probes.c#L153.\r\n\r\nThe field is null.\r\n\r\n```\r\n(gdb) p *tp_class\r\n$3 = {struct_size = 48, fields = 0x7ffff73ab2e0 \u003clttng_ust__event_fields___DotNETRuntime___GCStart\u003e, nr_fields = 2, \r\n  probe_callback = 0x7ffff7364820 \u003clttng_ust__event_probe__DotNETRuntime___GCStart(void*, unsigned int, unsigned int)\u003e, \r\n  signature = 0x7ffff738e720 \u003c__tp_event_signature___DotNETRuntime___GCStart\u003e \"const unsigned int, Count, const unsigned int, Reason\", probe_desc = 0x7ffff73a1470 \u003clttng_ust__probe_desc___DotNETRuntime\u003e}\r\n(gdb) p tp_class-\u003efields[0]\r\n$4 = (const struct lttng_ust_event_field * const) 0x0\r\n(gdb) p tp_class-\u003efields[1]\r\n$5 = (const struct lttng_ust_event_field * const) 0x0\r\n```\r\n\r\n`GCStart` has 2 fields as we see in definition below, but the array has null pointers for them.\r\n```\r\n#define GCStart_TRACEPOINT_ARGS \\\r\nTP_ARGS( \\\r\n        const unsigned int, Count, \\\r\n        const unsigned int, Reason \\\r\n)\r\nTRACEPOINT_EVENT_CLASS(\r\n    DotNETRuntime,\r\n    GCStart,\r\n    GCStart_TRACEPOINT_ARGS,\r\n     TP_FIELDS(\r\n        ctf_integer(unsigned int, Count, Count)\r\n        ctf_integer(unsigned int, Reason, Reason)\r\n    )\r\n)\r\n```",
                                           "updatedAt":  "2021-12-03T13:39:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46vmSA",
                                           "createdAt":  "2021-12-03T14:17:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e The field is null.\r\n\r\nThese fields get initialized dynamically.\r\n```\r\nstatic const struct lttng_ust_event_field * const lttng_ust__event_fields___DotNETRuntime___GCStart[] = { new (const struct lttng_ust_event_field) { .struct_size = sizeof(struct lttng_ust_event_field), .name = \"Count\", .type = ((struct lttng_ust_type_common *) new (struct lttng_ust_type_integer) { .parent = { .type = lttng_ust_type_integer, }, .struct_size = sizeof(struct lttng_ust_type_integer), .size = sizeof(unsigned int) * 8, .alignment = 1 * 8, .signedness = (std::is_signed\u003cunsigned int\u003e::value), .reverse_byte_order = 1234 != 1234, .base = 10, }), .nowrite = 0, .nofilter = 0, }, new (const struct lttng_ust_event_field) { .struct_size = sizeof(struct lttng_ust_event_field), .name = \"Reason\", .type = ((struct lttng_ust_type_common *) new (struct lttng_ust_type_integer) { .parent = { .type = lttng_ust_type_integer, }, .struct_size = sizeof(struct lttng_ust_type_integer), .size = sizeof(unsigned int) * 8, .alignment = 1 * 8, .signedness = (std::is_signed\u003cunsigned int\u003e::value), .reverse_byte_order = 1234 != 1234, .base = 10, }), .nowrite = 0, .nofilter = 0, }, new (const struct lttng_ust_event_field) { .struct_size = sizeof(struct lttng_ust_event_field), .name = \"dummy\", .type = ((struct lttng_ust_type_common *) new (struct lttng_ust_type_integer) { .parent = { .type = lttng_ust_type_integer, }, .struct_size = sizeof(struct lttng_ust_type_integer), .size = sizeof(int) * 8, .alignment = 1 * 8, .signedness = (std::is_signed\u003cint\u003e::value), .reverse_byte_order = 1234 != 1234, .base = 10, }), .nowrite = 0, .nofilter = 0, }, }; static const struct lttng_ust_tracepoint_class lttng_ust__event_class___DotNETRuntime___GCStart = { .struct_size = sizeof(struct lttng_ust_tracepoint_class), .fields = lttng_ust__event_fields___DotNETRuntime___GCStart, .nr_fields = (sizeof(lttng_ust__event_fields___DotNETRuntime___GCStart) / sizeof((lttng_ust__event_fields___DotNETRuntime___GCStart)[0])) - 1, .probe_callback = (void (*)(void)) \u0026lttng_ust__event_probe__DotNETRuntime___GCStart, .signature = __tp_event_signature___DotNETRuntime___GCStart, .probe_desc = \u0026lttng_ust__probe_desc___DotNETRuntime, };\r\n```\r\nIt seems they have not been initialized (yet):\r\n```\r\n(gdb) p lttng_ust__event_fields___DotNETRuntime___GCStart\r\n$1 = {0x0, 0x0, 0x0}\r\n```",
                                           "updatedAt":  "2021-12-03T14:38:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46wcN1",
                                           "createdAt":  "2021-12-03T19:35:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "\u003e I think the build works fine\r\n\r\nbinary built against `liblttng-ust.so.0` can not work against `.so.1` without running into validation errors; per the release notes of ABI breaking change.",
                                           "updatedAt":  "2021-12-03T19:35:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46wdto",
                                           "createdAt":  "2021-12-03T19:45:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e binary built against liblttng-ust.so.0 can not work against .so.1 without running into validation errors; per the release notes of ABI breaking change.\r\n\r\nYes, but it doesn\u0027t get used.\r\n\r\nBecause `libcoreclrtraceptprovider.so` is linked against `liblttng-ust.so.0`, and that is not available, the library silently fails to load here:\r\n\r\nhttps://github.com/dotnet/runtime/blob/b0159122f3570decd8ced6228681a210e2711de6/src/coreclr/pal/src/misc/tracepointprovider.cpp#L120-L122",
                                           "updatedAt":  "2021-12-03T19:45:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46wgDn",
                                           "createdAt":  "2021-12-03T20:02:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Yes, in addition to updating PAL (adding version probing at run-time), I think we would also need two versions of `libcoreclrtraceptprovider` .so.0 and .so.0 to cover the supported matrix. The version selection part is yet to be implemented. It is the same situation as we once had with openssl, where we used to require 1.0 until later version support came along.\r\n\r\nlttng is a bit tricky as we use their macro based APIs and their headers expand those macros to dlopen (with hardcoded SO version) calls at build time, so we would need both set of headers on the build machine.\r\n\r\nThat\u0027s why I think best way is to have those headers in our source tree under `src/native/external/lttng` (where we were thinking to eventually move rest of the similar vendor code in the repo).",
                                           "updatedAt":  "2021-12-03T20:02:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46xfa4",
                                           "createdAt":  "2021-12-04T16:15:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "This issue is about adding support for both versions.\r\nI\u0027ve created a separate issue for the crash we see on Fedora 36: https://github.com/dotnet/runtime/issues/62398.",
                                           "updatedAt":  "2021-12-04T16:15:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46xqRu",
                                           "createdAt":  "2021-12-04T21:38:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "\u003e This issue is about adding support for both versions.\r\n\r\nReason for adding this support is because .NET apps started to crash on systems with newer lttng library.\r\nIf #62398 is about a temporary fix like `if NOT dlopen(liblttng-ust.so.0) then do what DOTNET_LTTng=0 does to disable eventing`, then it makes sense we can probably backport that to 6.0 until the multi-version support arrives.",
                                           "updatedAt":  "2021-12-04T21:38:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46zLq1",
                                           "createdAt":  "2021-12-06T07:07:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e If #62398 is about\r\n\r\nThat is about .NET crashing when built against `liblttng-ust.so.1` on Fedora 36.\r\n\r\n\u003e .NET apps started to crash\r\n\r\nFrom what I see, .NET built against `liblttng-ust.so.0` doesn\u0027t crash on systems that have `liblttng-ust.so.1`.\r\n\r\n```\r\n$ dnf list installed lttng-ust\r\nInstalled Packages\r\nlttng-ust.x86_64                                        2.13.0-1.fc36                                         @rawhide\r\n$ ls /usr/lib64/liblttng-ust.so.1\r\n/usr/lib64/liblttng-ust.so.1\r\n$ which dotnet\r\n~/dotnet-60/dotnet\r\n$ ldd ~/dotnet-60/shared/Microsoft.NETCore.App/6.0.0/libcoreclrtraceptprovider.so\r\n\tlinux-vdso.so.1 (0x00007ffe6f571000)\r\n\tliblttng-ust.so.0 =\u003e not found\r\n\tlibstdc++.so.6 =\u003e /lib64/libstdc++.so.6 (0x00007f6e3571d000)\r\n\tlibm.so.6 =\u003e /lib64/libm.so.6 (0x00007f6e3563d000)\r\n\tlibgcc_s.so.1 =\u003e /lib64/libgcc_s.so.1 (0x00007f6e35622000)\r\n\tlibc.so.6 =\u003e /lib64/libc.so.6 (0x00007f6e35419000)\r\n\t/lib64/ld-linux-x86-64.so.2 (0x00007f6e359fb000)\r\n$ dotnet new console -o /tmp/console\r\nThe template \"Console App\" was created successfully.\r\n\r\nProcessing post-creation actions...\r\nRunning \u0027dotnet restore\u0027 on /tmp/console/console.csproj...\r\n  Determining projects to restore...\r\n  Restored /tmp/console/console.csproj (in 129 ms).\r\nRestore succeeded.\r\n$ dotnet run --project /tmp/console\r\nHello, World!\r\n```",
                                           "updatedAt":  "2021-12-06T07:07:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46zgq-",
                                           "createdAt":  "2021-12-06T09:13:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "@tmds, point is `liblttng-ust.so.1` is not supported, needs work, we would need to support both versions..\r\n\r\n\u003e `if NOT dlopen(liblttng-ust.so.0) then do what DOTNET_LTTng=0 does to disable eventing`\r\n\r\nthis should fix the crash you are seeing. Besides, the crash you are seeing is same as #60407 which was closed as a duplicate.",
                                           "updatedAt":  "2021-12-06T09:13:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46z0ok",
                                           "createdAt":  "2021-12-06T10:57:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "For source-built .NET we care more about https://github.com/dotnet/runtime/issues/62398 than we do about this issue.\r\nAnd the fix for https://github.com/dotnet/runtime/issues/62398 should be backported to 6.0, while this feature might not.",
                                           "updatedAt":  "2021-12-06T10:57:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46z8LN",
                                           "createdAt":  "2021-12-06T11:37:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Source build has patching mechanism in place, you can disable lttng feature at build time as discussed above. ",
                                           "updatedAt":  "2021-12-06T11:37:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6EkJjc",
                                           "createdAt":  "2024-07-11T22:37:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Livius90",
                                           "body":  "Is it still not resolved after 3 years?",
                                           "updatedAt":  "2024-07-11T22:37:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6rn98F",
                                           "createdAt":  "2025-05-14T08:56:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOESFEyQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Werner-Prbk",
                                                                               "createdAt":  "2025-05-14T12:09:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "roosen",
                                           "body":  "This is getting a complete mess; the current latest .NET runtime 9.0.4 of arm and arm64 for linux each link to a different version of liblttng-ust.so:\n```\nhenri@seven:~/Downloads/dotnet$ objdump -x dotnet-runtime-9.0.4-linux-arm/shared/Microsoft.NETCore.App/9.0.4/libcoreclrtraceptprovider.so | grep NEEDED\n  NEEDED               liblttng-ust.so.1\n  NEEDED               libstdc++.so.6\n  NEEDED               libm.so.6\n  NEEDED               libgcc_s.so.1\n  NEEDED               libc.so.6\n  NEEDED               ld-linux-armhf.so.3\nhenri@seven:~/Downloads/dotnet$ objdump -x dotnet-runtime-9.0.4-linux-arm64/shared/Microsoft.NETCore.App/9.0.4/libcoreclrtraceptprovider.so | grep NEEDED\n  NEEDED               liblttng-ust.so.0\n  NEEDED               libstdc++.so.6\n  NEEDED               libm.so.6\n  NEEDED               libgcc_s.so.1\n  NEEDED               libc.so.6\n  NEEDED               ld-linux-aarch64.so.1\n```\nPlease make a consistent decision which dependency is needed and make it consistent least within a certain DotNet release.",
                                           "updatedAt":  "2025-05-14T08:56:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6rsSeE",
                                           "createdAt":  "2025-05-14T14:43:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "The version we link to depends on what distro we build against. We try to build against the oldest distro we can to ensure as broad compatibility as possible. For arm64/x64, the target is Ubuntu 16.04, so that .NET can work on distros with glibc 2.23 or newer. But for arm32, we couldn\u0027t choose that due to some things not working properly on arm32 when built against that glibc. I am not sure if I remember it correctly, but I believe it was a libc move to 64 bit file time even on 32 bit systems. So we have to target Ubuntu 22.04 for arm32. We could move arm64/x64 to that one too, but that would mean loosing support for distros with glibc older than 2.35. ",
                                           "updatedAt":  "2025-05-14T14:43:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6rsTH7",
                                           "createdAt":  "2025-05-14T14:44:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOESGzsw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-05-14T15:00:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "janvorli",
                                           "body":  "You can find details on the compatibility here: https://github.com/dotnet/core/blob/main/release-notes/9.0/supported-os.md",
                                           "updatedAt":  "2025-05-14T14:44:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6rspHw",
                                           "createdAt":  "2025-05-14T15:09:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "\u003e The version we link to depends on what distro we build against\n\nYup and that is by design, as-in https://github.com/dotnet/runtime/blob/main/docs/project/linux-build-methodology.md.\n\n\u003e We could move arm64/x64 to that one too, but that would mean loosing support for distros with glibc older than 2.35.\n\nYes, and I don\u0027t think lttng-ust is a good reason to bump libc version by 12.\n\nDistro packages maintain that kind of thing behind the scenes. For MSFT builds, we could add lttng-ust to `src/native/external` to make it seamless. This is how we are streamlining all other dependencies.",
                                           "updatedAt":  "2025-05-14T15:09:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6rvrEx",
                                           "createdAt":  "2025-05-14T19:58:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOESJaLw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "brianrob",
                                                                               "createdAt":  "2025-05-14T20:01:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e we could add lttng-ust to src/native/external to make it seamless\n\nWe are not actively investing into making lttng support better. Our bet is that it will get replaced by https://docs.kernel.org/trace/user_events.html",
                                           "updatedAt":  "2025-05-14T19:58:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6rv8_J",
                                           "createdAt":  "2025-05-14T20:25:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "\u003e We are not actively investing into making lttng support better. Our bet is that it will get replaced by [docs.kernel.org/trace/user_events.html](https://docs.kernel.org/trace/user_events.html)\n\nYup, I\u0027m following `src/native/external/LinuxTracepoints` progress and related discussions. I was suggesting that compared to updating glibc baseline (by 12 minor versions) for lttng-ust, it is better to align it with rest of the external deps which solves the problem without changing the libc baseline.\n\nIf we don\u0027t want to make any further changes in this regard, then maybe we should close this issue?",
                                           "updatedAt":  "2025-05-14T20:26:13Z"
                                       }
                                   ],
                         "totalCount":  46
                     },
        "title":  "LTTNG-UST 2.13 changes soname breaking loading of libcoreclrtraceptprovider",
        "labels":  [
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/58747",
        "createdAt":  "2021-09-07T11:17:45Z",
        "number":  58747,
        "author":  "ramondeklein",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-02-28T22:51:03Z",
        "body":  "ARM-based systems with limited storage often don\u0027t have storage to save a complete dump (mostly \u003e170MB). Dump files are highly compressible, so I would like to create a compressed dump. This is typically possible using `createdump -f - \u003cpid\u003e | gzip \u003e coredump.gz`. Unfortunately, the `createdump` utility doesn\u0027t support writing to standard output.\r\n\r\nFor now I tried to do the following that works, but is pretty nasty to run:\r\n```\r\n$ PID=12345 \u0026\u0026 ssh -t root@hostname \"stty -onlcr; createdump --full -f /dev/tty $PID \u003e /dev/null\" \u003e gateway.dmp\r\n```\r\nIt writes directly via `/dev/tty` and the `stty -onlycr` disables the newline conversions, so this kind-of works. But if my host is remote, then it still needs to send a 170MB file. It would be much better when it supported writing to standard output, so the dump can be compressed during creation.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONoQX5g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc42fewJ",
                                           "createdAt":  "2021-09-07T11:24:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ramondeklein",
                                           "body":  "I guess it could be easily changed by changing [this method](https://github.com/dotnet/runtime/blob/f57b6e7308e9db32e63488aa5e8f938934f54cf0/src/coreclr/debug/createdump/dumpwriter.cpp#L24):\r\n\r\n```csharp\r\nbool\r\nDumpWriter::OpenDump(const char* dumpFileName)\r\n{\r\n    m_fd = open(dumpFileName, O_WRONLY|O_CREAT|O_TRUNC, 0664);\r\n    if (m_fd == -1)\r\n    {\r\n        fprintf(stderr, \"Could not open output %s: %d %s\\n\", dumpFileName, errno, strerror(errno));\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n```\r\nIf the `dumpFileName` is set to `-`, then it uses file descriptor 1 (stdout).",
                                           "updatedAt":  "2021-09-07T11:24:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42ff80",
                                           "createdAt":  "2021-09-07T11:33:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ramondeklein",
                                           "body":  "I also found another workaround, by using `/proc/self/fd/1` as the filename, so it effectively writes to stdout:\r\n```\r\n$ createdump --full -f /proc/self/fd/1 \u003cpid\u003e | gzip -9 \u003e dump.gz\r\n```\r\nThis solves the issue, but using `-` would have been a bit more intuitive.",
                                           "updatedAt":  "2021-09-07T11:33:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42hBAE",
                                           "createdAt":  "2021-09-07T20:57:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@mikem8361 ",
                                           "updatedAt":  "2021-09-07T20:57:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42hBfm",
                                           "createdAt":  "2021-09-07T21:01:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikem8361",
                                           "body":  "See https://github.com/dotnet/runtime/issues/9840\r\n",
                                           "updatedAt":  "2021-09-07T21:01:35Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "createdump cannot write to stdout",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/60920",
        "createdAt":  "2021-10-27T15:55:38Z",
        "number":  60920,
        "author":  "ww898",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-02-15T08:30:32Z",
        "body":  "Hi @davmason,\r\nthe original issue #13436 was automatically closed. The problem was reproduced also on .NET 5.0.11.\r\n\r\n\u003e @ww898 this behavior is due to permissions issues. I set up a repro machine, and running as a regular user I cannot attach dotnet-trace to the process, but when running as adminstrator I can. Can you verify if running as administrator allows you to attach?\r\n\r\nWe are always making the attach under the elevated administrator.\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPfz75w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc44zqeT",
                                           "createdAt":  "2021-10-27T15:55:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-10-27T15:55:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44z1iH",
                                           "createdAt":  "2021-10-27T16:46:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nHi @davmason,\r\nthe original issue #13436 was automatically closed. The problem was reproduced also on .NET 5.0.11.\r\n\r\n\u003e @ww898 this behavior is due to permissions issues. I set up a repro machine, and running as a regular user I cannot attach dotnet-trace to the process, but when running as adminstrator I can. Can you verify if running as administrator allows you to attach?\r\n\r\nWe are always making the attach under the elevated administrator.\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eww898\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-10-27T16:46:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc444wt3",
                                           "createdAt":  "2021-10-29T03:37:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davmason",
                                           "body":  "Hi @ww898, I was unable to repro the problem running as an administrator. Could you put together a sample that demonstrates the issue so I can debug it?",
                                           "updatedAt":  "2021-10-29T03:37:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49_Pvn",
                                           "createdAt":  "2022-02-15T08:24:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ww898",
                                           "body":  "Hi, I\u0027m sorry for delay. We deceided to share with Microsoft [the memory dump with both clr.dll and coreclr.dll inside](https://drive.google.com/file/d/11J8JhgnzR16DTqq9Uhrw5Q3RLbrpyEtM/view?usp=sharing).\r\nSHA256 for archive `w3wp.7z`: `95e96d9da80d28bea628e92332f766c5c4bee211121bcc23a52e41c055a6c3b8`\r\nSHA256 for dump `w3wp.dmp`: `30ed7108df9b0bdd34cc514d0268e66196aa39f9dfdc8e78e02756b781847d60`\r\n\r\n```\r\n0:000\u003e lm\r\nstart             end                 module name\r\n...\r\n00007ff8`d4750000 00007ff8`d4c4c000   coreclr    (private pdb symbols)  d:\\symbols\\coreclr.pdb\\FCE8DD479F8D42EDB1E92DD6E95C89481\\coreclr.pdb\r\n00007ff8`ed620000 00007ff8`ed782000   clrjit     (private pdb symbols)  d:\\symbols\\clrjit.pdb\\604EDA6CDD67471BB5C29F9EEEAE23801\\clrjit.pdb\r\n...\r\n00007ff9`66830000 00007ff9`672f1000   clr        (pdb symbols)          d:\\symbols\\clr.pdb\\A3302A186051467992E54258A7B448B62\\clr.pdb\r\n00007ff9`67300000 00007ff9`673aa000   mscoreei   (pdb symbols)          d:\\symbols\\mscoreei.pdb\\31101406D47041A785B3B16E76CF91182\\mscoreei.pdb\r\n00007ff9`673b0000 00007ff9`67415000   mscoree    (pdb symbols)          d:\\symbols\\mscoree.pdb\\A427DDE86D9DB3804926D6CE51CD2E8B1\\mscoree.pdb\r\n...\r\n```",
                                           "updatedAt":  "2022-02-15T08:30:32Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Continue #13436",
        "labels":  [
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/64299",
        "createdAt":  "2021-11-09T17:05:12Z",
        "number":  64299,
        "author":  "BjarkeCK",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC7LL1g==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TorVestergaard",
                                            "createdAt":  "2021-11-09T18:25:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Yanitrix",
                                            "createdAt":  "2021-11-11T20:57:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "iwillspeak",
                                            "createdAt":  "2021-11-11T21:12:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ClxS",
                                            "createdAt":  "2021-11-11T22:28:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JohnKiller",
                                            "createdAt":  "2021-11-11T22:44:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MohamedA-Ibrahim",
                                            "createdAt":  "2021-11-11T22:57:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GeorgDangl",
                                            "createdAt":  "2021-11-11T23:22:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MasterMann",
                                            "createdAt":  "2021-11-12T01:51:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Kryptos-FR",
                                            "createdAt":  "2021-11-12T03:39:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "EduardoLarios",
                                            "createdAt":  "2021-11-12T05:00:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "viktor-svub",
                                            "createdAt":  "2021-11-12T05:29:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rgwood",
                                            "createdAt":  "2021-11-12T06:25:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Helco",
                                            "createdAt":  "2021-11-12T08:28:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "itayporezky",
                                            "createdAt":  "2021-11-12T11:00:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gbtb",
                                            "createdAt":  "2021-11-12T12:25:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Vazde",
                                            "createdAt":  "2022-01-27T19:23:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mellinoe",
                                            "createdAt":  "2022-02-17T08:44:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "szymski",
                                            "createdAt":  "2023-03-11T05:12:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SamiG42",
                                            "createdAt":  "2023-04-03T12:30:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "miyu",
                                            "createdAt":  "2024-01-03T20:04:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bneumann",
                                            "createdAt":  "2024-09-20T08:16:05Z"
                                        }
                                    ],
                          "totalCount":  21
                      },
        "updatedAt":  "2024-01-03T20:31:06Z",
        "body":  "# The problem\r\n\r\nThings can quickly go wrong if a hot reload occurs mid-frame. Imagine half of a frame running with old code, and the other half running with new code.\r\n\r\n```cs\r\nwhile(applicationIsRunning)\r\n{\r\n\t// The less rest time between each frame, the higher the probablity \r\n\t// of a hot-reload occurring mid-frame, possibly resulting in invalid application state.\r\n\tRenderFrame(); \r\n\tRest();\r\n}\r\n```\r\n\r\nInvalid application state can easily cause any number of issues. Everything from hard crashes, to mysterious bugs that send developers on goose chases, debugging problems that could have never occurred in the first place.\r\n\r\nAll applications are subject to these kinds of problems, but there is an easy solution, and one that is especially easy to implement in software that has a notion of a \"frame\" or a \"tick\", as shown in the example above.\r\n\r\n# Proposed Solution\r\n\r\nWe need to be able to tell the Hot Reload agent, _not_ to patch our application while a frame is being computed. There are many ways to achieve this, so this is simply meant to get the ball rolling.\r\n\r\nI propose you provide the ability to acquire a handle, from which you can interact with the Hot Reload agent. Upon requesting it, it is then ensured that only the first host requesting it gets the right to use it. That way, the API makes it clear that specifying sync-points is not something that should be done arbitrary places, without considering other sync-points, as they would quickly start conflicting with each other. If it is possible for a process with multiple threads to sync up with one global sync-point, it would still be possible for the developer to ensure that manually.\r\n\r\nThe handle itself can be acquired in many different ways, but since you\u0027re already providing hooks via MetadataUpdateHandlerAttribute, I assume we can also get some kind of handle going forward, the question then becomes, what does the handle need to do?\r\n\r\n## Option 1) (Bad) Let us pause and continue the hot reload agent\r\n\r\nI wanted to mention this solution because it might be a solution one could dream up, but it has problems. \r\n\r\n```cs\r\nwhile(applicationIsRunning)\r\n{\r\n\thotReloadHandle.Pause();\r\n\tRenderFrame();\r\n\thotReloadHandle.Continue();\r\n\tRest();\r\n}\r\n```\r\n\r\n**Why is it bad?**\r\n\r\nWhile I\u0027m sure that there are cases where a sync-point would happen so rarely that specifying a period where hot reloading should not occur would make more sense, a sync-point is much more flexible, and you get a lot more control, and while achieving a sync-point effect using the API above is possible, it would look kind of silly, and it wouldn\u0027t even be obvious that it would work:\r\n\r\n```cs\r\nhotReloadHandle.Pause();\r\nwhile(applicationIsRunning)\r\n{\r\n\tRenderFrame();\r\n\tRest();\r\n\thotReloadHandle.Continue();\r\n\thotReloadHandle.Pause();\r\n}\r\n```\r\n\r\n## Option 2) Let us introduce a sync point\r\n\r\nThis is how Live++ (Hot Reloading for c++) solves this issue:\r\n[https://liveplusplus.tech/docs/documentation.html#enabling_livepp](https://liveplusplus.tech/docs/documentation.html#enabling_livepp)\r\n\r\n```cs\r\nwhile(applicationIsRunning)\r\n{\r\n\thotReloadHandle.SyncPoint(out var types);\r\n\t\r\n\tbool didPatch = types?.Length != 0; // And perhaps the syncPoint could return a bool.\r\n\r\n\tRenderFrame();\r\n}\r\n\r\nThe downside of this approach is that you do not get to clear cashes before the hot reload takes place. So that is why I\u0027d go straight to something like option 3.\r\n\r\n```\r\n\r\n## Option 3) Give us full control\r\n\r\nIf you agree that providing a way to solve this problem is a good idea, I would encourage you to consider a more explicit implementation. It would both open up many more possibilities and encourage developers to consider them and provide a great hotload experience. With this approach, developers can profile things, provide user feedback, and so on..\r\n\r\n```cs\r\nwhile(applicationIsRunning)\r\n{\r\n\tRenderFrame();\r\n\r\n\t// Returns true when types has been queued up for patching.\r\n\tif (hotReloadHandle.RequireHotReload()) \r\n\t{\r\n\t\t// Lock in on what is about to be hotreloaded, **but do not apply the patch yet** !!!!!!!\r\n\t\thotReloadHandle.BeginHotReload(out var types);\r\n\r\n\t\t// Do what needs to be done with the **old code** before the hotload takes place\r\n\t\tClearCachesAndWhatNotUsingOldCode();\r\n\r\n\t\t// Trigger all MetadataUpdateHandlerAttribute events and \r\n\t\t// Patch assemblies / perform the hot reload\r\n\t\thotReloadHandle.EndHotReload(); \r\n\t}\r\n}\r\n```\r\n\r\n# Other suggestions to further improve the hot relaoding experience:\r\n\r\n## Add the ability to control if a full reload is required or not.\r\n\r\nI feel like this one is self explanitory. Some code changes can only, and should only, have an effect with a full reload.\r\n\r\n```cs\r\n[assembly: MetadataUpdateHandler(typeof(UpdateHandler))]\t\r\ninternal static class UpdateHandler\r\n{\r\n        public static bool ShouldPerformFullReload(Type[] types)\r\n        {\r\n\t        if (types.Contains(typeof(Startup)))\r\n\t        {\r\n\t\t        return true;\r\n\t        }\r\n        \r\n\t        return false;\r\n        }\r\n}\r\n\r\n\r\n```\r\nOr / and: one might imagine an attribute, that makes specifying this behaviour more easy:\r\n```cs\r\n[System.Reflection.Metadata.NotHotReloadable] // Or:\r\n[System.Reflection.Metadata.HotReloading.RequireFullReload]\r\npublic class Startup\r\n{\r\n\t\r\n}\r\n```\r\n\r\n## A big problem with UpdateApplication and ClearCache\r\n\r\n[https://docs.microsoft.com/en-us/dotnet/api/system.reflection.metadata.metadataupdatehandlerattribute?view=net-6.0](https://docs.microsoft.com/en-us/dotnet/api/system.reflection.metadata.metadataupdatehandlerattribute?view=net-6.0)\r\n\r\nUpdateApplication and ClearCache do not block the Hot Reload! Both of them _should_ be running _before_ the patch takes place, and perhaps that is when they are invoked?\r\n\r\nMaybe this was done deliberately because something was slow and you wanted to speed up hot-reloading? If not blocking is the intended behaviour for this. At least getting a `OnBeboreHotReload(Type[] types)` where we know that it is the old code clearing doing the work, would be appreciated.\r\n\r\n(Of course, if the ability to add a sync point is added in a good way, we can clear caches safely there too)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOb9BSkw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc45etUR",
                                           "createdAt":  "2021-11-09T17:05:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one area label.",
                                           "updatedAt":  "2021-11-09T17:05:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45jocb",
                                           "createdAt":  "2021-11-10T18:53:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCCOzEg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "BjarkeCK",
                                                                               "createdAt":  "2021-11-10T20:27:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ClxS",
                                                                               "createdAt":  "2021-11-11T22:28:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "Vazde",
                                           "body":  "Slightly related to this is also the way `dotnet watch` (at least) restarts the process on rude edits. It seems that it plainly just kills the process? I\u0027d like to see that this aspect was a bit more cooperative, too.\r\n\r\nI\u0027m not aware of the platform specifics, but would it be possible to first call CloseMainWindow on the process, and only after a timeout kill it? This would allow the application to save its state for the next run, or do any special cleanup it needs to.",
                                           "updatedAt":  "2021-11-10T18:53:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45j8Vv",
                                           "createdAt":  "2021-11-10T20:32:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BjarkeCK",
                                           "body":  "\u003e Slightly related to this is also the way `dotnet watch` (at least) restarts the process on rude edits. It seems that it plainly just kills the process? I\u0027d like to see that this aspect was a bit more cooperative, too.\r\n\u003e \r\n\u003e I\u0027m not aware of the platform specifics, but would it be possible to first call CloseMainWindow on the process, and only after a timeout kill it? This would allow the application to save its state for the next run, or do any special cleanup it needs to.\r\n\r\nI\u0027ve been wanting this too (I believe it closes gracefully through VS btw). In my case, I only want to save and recover state, if the window was closed and opened by a watch run session, and not when opened from scratch. Perhaps you can somehow go through the parent process and figure that out, but they could also introduce an `OnBeforeReload` event or something equivalent, where we could do that work.",
                                           "updatedAt":  "2021-11-10T20:32:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc485bBv",
                                           "createdAt":  "2022-01-25T22:56:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-01-25T22:56:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc488Bn7",
                                           "createdAt":  "2022-01-26T16:27:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n# The problem\r\n\r\nThings can quickly go wrong if a hot reload occurs mid-frame. Imagine half of a frame running with old code, and the other half running with new code.\r\n\r\n```cs\r\nwhile(applicationIsRunning)\r\n{\r\n\t// The less rest time between each frame, the higher the probablity \r\n\t// of a hot-reload occurring mid-frame, possibly resulting in invalid application state.\r\n\tRenderFrame(); \r\n\tRest();\r\n}\r\n```\r\n\r\nInvalid application state can easily cause any number of issues. Everything from hard crashes, to mysterious bugs that send developers on goose chases, debugging problems that could have never occurred in the first place.\r\n\r\nAll applications are subject to these kinds of problems, but there is an easy solution, and one that is especially easy to implement in software that has a notion of a \"frame\" or a \"tick\", as shown in the example above.\r\n\r\n# Proposed Solution\r\n\r\nWe need to be able to tell the Hot Reload agent, _not_ to patch our application while a frame is being computed. There are many ways to achieve this, so this is simply meant to get the ball rolling.\r\n\r\nI propose you provide the ability to acquire a handle, from which you can interact with the Hot Reload agent. Upon requesting it, it is then ensured that only the first host requesting it gets the right to use it. That way, the API makes it clear that specifying sync-points is not something that should be done arbitrary places, without considering other sync-points, as they would quickly start conflicting with each other. If it is possible for a process with multiple threads to sync up with one global sync-point, it would still be possible for the developer to ensure that manually.\r\n\r\nThe handle itself can be acquired in many different ways, but since you\u0027re already providing hooks via MetadataUpdateHandlerAttribute, I assume we can also get some kind of handle going forward, the question then becomes, what does the handle need to do?\r\n\r\n## Option 1) (Bad) Let us pause and continue the hot reload agent\r\n\r\nI wanted to mention this solution because it might be a solution one could dream up, but it has problems. \r\n\r\n```cs\r\nwhile(applicationIsRunning)\r\n{\r\n\thotReloadHandle.Pause();\r\n\tRenderFrame();\r\n\thotReloadHandle.Continue();\r\n\tRest();\r\n}\r\n```\r\n\r\n**Why is it bad?**\r\n\r\nWhile I\u0027m sure that there are cases where a sync-point would happen so rarely that specifying a period where hot reloading should not occur would make more sense, a sync-point is much more flexible, and you get a lot more control, and while achieving a sync-point effect using the API above is possible, it would look kind of silly, and it wouldn\u0027t even be obvious that it would work:\r\n\r\n```cs\r\nhotReloadHandle.Pause();\r\nwhile(applicationIsRunning)\r\n{\r\n\tRenderFrame();\r\n\tRest();\r\n\thotReloadHandle.Continue();\r\n\thotReloadHandle.Pause();\r\n}\r\n```\r\n\r\n## Option 2) Let us introduce a sync point\r\n\r\nThis is how Live++ (Hot Reloading for c++) solves this issue:\r\n[https://liveplusplus.tech/docs/documentation.html#enabling_livepp](https://liveplusplus.tech/docs/documentation.html#enabling_livepp)\r\n\r\n```cs\r\nwhile(applicationIsRunning)\r\n{\r\n\thotReloadHandle.SyncPoint(out var types);\r\n\t\r\n\tbool didPatch = types?.Length != 0; // And perhaps the syncPoint could return a bool.\r\n\r\n\tRenderFrame();\r\n}\r\n\r\nThe downside of this approach is that you do not get to clear cashes before the hot reload takes place. So that is why I\u0027d go straight to something like option 3.\r\n\r\n```\r\n\r\n## Option 3) Give us full control\r\n\r\nIf you agree that providing a way to solve this problem is a good idea, I would encourage you to consider a more explicit implementation. It would both open up many more possibilities and encourage developers to consider them and provide a great hotload experience. With this approach, developers can profile things, provide user feedback, and so on..\r\n\r\n```cs\r\nwhile(applicationIsRunning)\r\n{\r\n\tRenderFrame();\r\n\r\n\t// Returns true when types has been queued up for patching.\r\n\tif (hotReloadHandle.RequireHotReload()) \r\n\t{\r\n\t\t// Lock in on what is about to be hotreloaded, **but do not apply the patch yet** !!!!!!!\r\n\t\thotReloadHandle.BeginHotReload(out var types);\r\n\r\n\t\t// Do what needs to be done with the **old code** before the hotload takes place\r\n\t\tClearCachesAndWhatNotUsingOldCode();\r\n\r\n\t\t// Trigger all MetadataUpdateHandlerAttribute events and \r\n\t\t// Patch assemblies / perform the hot reload\r\n\t\thotReloadHandle.EndHotReload(); \r\n\t}\r\n}\r\n```\r\n\r\n# Other suggestions to further improve the hot relaoding experience:\r\n\r\n## Add the ability to control if a full reload is required or not.\r\n\r\nI feel like this one is self explanitory. Some code changes can only, and should only, have an effect with a full reload.\r\n\r\n```cs\r\n[assembly: MetadataUpdateHandler(typeof(UpdateHandler))]\t\r\ninternal static class UpdateHandler\r\n{\r\n        public static bool ShouldPerformFullReload(Type[] types)\r\n        {\r\n\t        if (types.Contains(typeof(Startup)))\r\n\t        {\r\n\t\t        return true;\r\n\t        }\r\n        \r\n\t        return false;\r\n        }\r\n}\r\n\r\n\r\n```\r\nOr / and: one might imagine an attribute, that makes specifying this behaviour more easy:\r\n```cs\r\n[System.Reflection.Metadata.NotHotReloadable] // Or:\r\n[System.Reflection.Metadata.HotReloading.RequireFullReload]\r\npublic class Startup\r\n{\r\n\t\r\n}\r\n```\r\n\r\n## A big problem with UpdateApplication and ClearCache\r\n\r\n[https://docs.microsoft.com/en-us/dotnet/api/system.reflection.metadata.metadataupdatehandlerattribute?view=net-6.0](https://docs.microsoft.com/en-us/dotnet/api/system.reflection.metadata.metadataupdatehandlerattribute?view=net-6.0)\r\n\r\nUpdateApplication and ClearCache do not block the Hot Reload! Both of them _should_ be running _before_ the patch takes place, and perhaps that is when they are invoked?\r\n\r\nMaybe this was done deliberately because something was slow and you wanted to speed up hot-reloading? If not blocking is the intended behaviour for this. At least getting a `OnBeboreHotReload(Type[] types)` where we know that it is the old code clearing doing the work, would be appreciated.\r\n\r\n(Of course, if the ability to add a sync point is added in a good way, we can clear caches safely there too)\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eBjarkeCK\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-01-26T16:27:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5v0FKT",
                                           "createdAt":  "2024-01-03T20:22:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODRXlKg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "darthdeus",
                                                                               "createdAt":  "2024-01-03T21:06:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "BjarkeCK",
                                                                               "createdAt":  "2024-01-04T05:55:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Vazde",
                                                                               "createdAt":  "2024-01-05T13:03:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "miyu",
                                           "body":  "Extending @BjarkeCK\u0027s point, it\u0027d be useful for various live-development scenarios to know when a rude edit happens.\r\n\r\nOption 3 could be extended as follows. On code edit:\r\n\r\n1. The runtime signals to application whether an unpatched edit has been made and whether a hot-reload can be applied\r\n2. The application can request the runtime continue executing (or alternatively, has the responsibility to request the reload).\r\n\r\n```csharp\r\nclass HotReloadHandle\r\n{\r\n        // APIs for polling hot reload state\r\n\tbool IsUnpatchedEditMade { get; }\r\n\tbool IsUnpatchedRudeEditMade { get; }\r\n        bool IsEditPatchable { get; }\r\n        Type[] EditedTypes { get; }\r\n        Type[] PatchableTypes { get; }\r\n\r\n        // APIs for applying hot reloads\r\n        // returns true if hot reload begins, outputs patchableTypes if so.\r\n        // returns false if hot reload doesn\u0027t begin.\r\n        //     - Either RudeTypes is empty (no changes available, so no hotreload happened) or\r\n        //        RudeTypes is populated (changes were available but couldn\u0027t be applied).\r\n        bool TryBeginHotReload(out Type[] patchableTypes, out Type[] rudeTypes);\r\n        void EndHotReload();\r\n        void CancelHotReload();\r\n}\r\n```\r\n\r\nHere\u0027s the modified example:\r\n\r\n```csharp\r\nwhile(applicationIsRunning)\r\n{\r\n\tRenderFrame();\r\n\r\n        // assume the below collection tostring expands to a select + string.join\r\n\tConsole.WriteLine($\"Hot Reload Edited {hotReloadHandle.IsUnpatchedEditMade} Patchable {hotReloadHandle.IsEditPatchable} Rude {hotReloadHandle.IsUnpatchedRudeEditMade} Types {hotReloadHandle.EditedTypes} {hotReloadHandle.PatchableTypes}\");\r\n\r\n\tif (hotReloadHandle.TryBeginHotReload(out var patchableTypes, out var rudeTypes)) \r\n\t{\r\n\t\tDoWhatever();\r\n\r\n\t\t// Trigger all MetadataUpdateHandlerAttribute events and \r\n\t\t// Patch assemblies / perform the hot reload\r\n\t\thotReloadHandle.EndHotReload(); // vs CancelHotReload()\r\n\t} else {\r\n\t        // Either a rude edit or no change made\r\n                if (rudeTypes.Length \u003e 0) {\r\n\t\t\t// Do things like Application.Restart() or DisplayWarning()\r\n                }\r\n\t}\r\n}\r\n```",
                                           "updatedAt":  "2024-01-03T20:31:06Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Improve the overall stability of Hot Reloading by allowing us to declare sync points for the hot reload agent.",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/61890",
        "createdAt":  "2021-11-21T16:36:08Z",
        "number":  61890,
        "author":  "jkotas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-05-17T22:47:56Z",
        "body":  "Repro:\r\n```\r\nusing System.Runtime.Intrinsics;\r\nusing System.Runtime.Intrinsics.X86;\r\n\r\nbyte mask = (byte)Random.Shared.Next(10);\r\nvar m = Avx2.AlignRight(default(Vector256\u003cbyte\u003e), default(Vector256\u003cbyte\u003e), mask);\r\n```\r\n\r\nRun this under VS 2022 debugger and try to step into `Avx2.AlignRight`.\r\n\r\nExpected result: Able to step into `Avx2.AlignRight` and see its code.\r\n\r\nActual result: Unable to step into `Avx2.AlignRight`. I have tried disabling \"Just My Code\", enabling .NET Framework source stepping, going to disassembly window and stepping there, ... nothing works.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOOidGIQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc46GwtZ",
                                           "createdAt":  "2021-11-21T16:36:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-runtime-intrinsics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nRepro:\r\n```\r\nusing System.Runtime.Intrinsics;\r\nusing System.Runtime.Intrinsics.X86;\r\n\r\nbyte mask = (byte)Random.Shared.Next(10);\r\nvar m = Avx2.AlignRight(default(Vector256\u003cbyte\u003e), default(Vector256\u003cbyte\u003e), mask);\r\n```\r\n\r\nRun this under VS debugger and try to step into `Avx2.AlignRight`.\r\n\r\nExpected result: Able to step into `Avx2.AlignRight` and see its code.\r\nActual result: Unable to step into `Avx2.AlignRight`. I have tried disabling \"Just My Code\", going to disassembly window and stepping there, ... nothing works.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejkotas\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Runtime.Intrinsics`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-11-21T16:36:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46Gwt6",
                                           "createdAt":  "2021-11-21T16:36:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nRepro:\r\n```\r\nusing System.Runtime.Intrinsics;\r\nusing System.Runtime.Intrinsics.X86;\r\n\r\nbyte mask = (byte)Random.Shared.Next(10);\r\nvar m = Avx2.AlignRight(default(Vector256\u003cbyte\u003e), default(Vector256\u003cbyte\u003e), mask);\r\n```\r\n\r\nRun this under VS debugger and try to step into `Avx2.AlignRight`.\r\n\r\nExpected result: Able to step into `Avx2.AlignRight` and see its code.\r\nActual result: Unable to step into `Avx2.AlignRight`. I have tried disabling \"Just My Code\", going to disassembly window and stepping there, ... nothing works.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejkotas\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Runtime.Intrinsics`, `area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-11-21T16:36:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46GwvG",
                                           "createdAt":  "2021-11-21T16:36:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "See https://github.com/dotnet/runtime/issues/61877#issuecomment-974768007 for full context.",
                                           "updatedAt":  "2021-11-21T16:36:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46Gx6n",
                                           "createdAt":  "2021-11-21T17:05:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "This is expected AFAIK. Most intrinsics synthesize trees behind the scenes and so there is no user code to actually step into.\r\n\r\nIn the case of something like `Avx2.AlignRight` (and other hardware intrinsics) the C# implementation is simply a recursive call to itself and all the interesting logic (the up to 256 statement jump table) is generated entirely during codegen.\r\n\r\nThis is done to save space, reduce errors, and simplify the implementation overall.\r\n\r\n--------------------------\r\n\r\nNow, I don\u0027t know why you can\u0027t single step into the recursive call https://github.com/dotnet/runtime/blob/69b5d67d9418d672609aa6e2c418a3d4ae00ad18/src/libraries/System.Private.CoreLib/src/System/Runtime/Intrinsics/X86/Avx2.cs#L105-L109\r\n\r\nPerhaps this has something to do with R2R?",
                                           "updatedAt":  "2021-11-21T17:05:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46GyUt",
                                           "createdAt":  "2021-11-21T17:14:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCDcvww==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tannergooding",
                                                                               "createdAt":  "2021-11-21T17:21:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Now, I don\u0027t know why you can\u0027t single step into the recursive call\r\n\r\nRight. And you should be able to see the disassembly that was the key part preventing from self-diagnosing #61877. \r\n\r\n\u003e Perhaps this has something to do with R2R?\r\n\r\nStill does not work, even with R2R disabled. ",
                                           "updatedAt":  "2021-11-21T17:14:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46H7dg",
                                           "createdAt":  "2021-11-22T06:04:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "zvrba",
                                           "body":  "Yes, being able to see disassembly would have helped immensly. But now that I\u0027ve thought a bit more about it, I\u0027ve come to think that codegen is behaving unreasonably: I asked it to emit a particular instruction, but it couldn\u0027t and it emitted snail-slow code instead. What it _should_ have done, IMO, is emit code that throws `InvalidProgramException` with a reasonable message.\r\n\r\nIf one _still_ wanted CLR to emit \"whatever helper code\" is necessary when direct translation is impossible, there could exist an \"intrinsic\" in a sub-namespace say `Emulated` , so `Avx2.Emulated.AlignRight`.\r\n\r\n@tannergooding Doesn\u0027t codegen know about semantics about VPALIGNR? It could emit only a 16-element jump table. Higher values of the immediate byte always result in zero result. ",
                                           "updatedAt":  "2021-11-22T06:06:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46J0Yh",
                                           "createdAt":  "2021-11-22T15:39:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCDprqg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkotas",
                                                                               "createdAt":  "2021-11-22T15:40:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "zvrba",
                                                                               "createdAt":  "2021-11-23T05:55:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e  I asked it to emit a particular instruction\r\n\r\nAnd it did. It emitted `palignr` and generated the correct code to handle what you gave as the input.\r\n\r\n\u003e but it couldn\u0027t and it emitted snail-slow code instead.\r\n\r\nThe hardware intrinsics emit particular instructions. There is no guarantee on how fast or slow they will be (`CPUID` is always expensive, `PEXT/PDEP` are really expensive on certain hardware, etc), just that some instruction will be emitted to handle a given method.\r\n\r\nThere may be surrounding code emitted as part of that to ensure results end up in the target register if the instruction is \"Read-Modify-Write\". Folding may be done in other cases to allow something more efficient and remove the need for an explicit load/store.\r\n\r\nIn the case of values that require constant inputs, they may emit a call to a jump table to ensure the relevant instruction is emitted instead.\r\n\r\nAs with any performance oriented code, you should profile and measure the impact of the code you write for every platform/target you care about.\r\n\r\n\u003e What it should have done, IMO, is emit code that throws InvalidProgramException with a reasonable message.\r\n\r\nThat leads to otherwise \"standard\" .NET behavior not working. It means these instructions can\u0027t be used indirectly (via function pointers/delegates). It means they can\u0027t reliably be used in contexts where something becomes a constant after inlining and so will be constant in \"hot code\", etc.\r\n\r\nWe made the decision that intrinsics would work just like normal methods and would be optimized where-possible to be inline instructions. This results in the right thing happening the majority of the time, but in some edge cases or in debug code may result in functioning code that runs a bit slower.\r\n",
                                           "updatedAt":  "2021-11-22T15:39:02Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Debugger is not able to step into non-inlined hardware intrinsics",
        "labels":  [
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/62232",
        "createdAt":  "2021-11-27T08:57:19Z",
        "number":  62232,
        "author":  "Mucksh",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC2HiFw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jeremybparagon",
                                            "createdAt":  "2022-08-22T20:19:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "2mik",
                                            "createdAt":  "2024-02-26T10:09:15Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-02-26T10:14:28Z",
        "body":  "Hi, i think I found a little bug, I hope this is the right place to report it. Happens for me both in VS Code and Visual Studio (2022) on Windows 10 using  .net 6. .net 5, and .net Framework 4.8 has no problems with it.\r\n\r\nNot sure if it\u0027s already reported or a strange thing that only happens to me.\r\n\r\n### Description\r\n\r\nIt seems to happen if you have a select statement that off an `IEnumerable` of any type except int, when it uses a method to change the type to an int and you place a `Where` startement with any check after that.\r\nI played a little bit around and it seems only to happen with an int and didn\u0027t found other type combinations or situations where this happens.\r\n\r\nThe simplest way to reproduce would be something like that:\r\n\r\n```\r\n        static void Main(string[] args)\r\n        {\r\n            var list = new[] { \"1\", \"4\", \"h\", \"l1\", \"7\" };\r\n            var parsedList = list.Select(item =\u003e DoSomething(item)).Where(item =\u003e item == 1).ToList();\r\n        }\r\n        public static int DoSomething\u003cT\u003e(T input)\r\n        {\r\n            return 1;\r\n        }\r\n```\r\n\r\nJust place a breakpoint in DoSomething and run.\r\n\r\nVS Goes into break mode: (\"Your app has entered a break state, but no code is currently executing that is supported by the selected debug engine (e.g. only native runtime code is executing).\") - stepping seems still to work, no other error is shown\r\n\r\nVS Code : the callstack shows: \"Error processing `stackTrace` request. Unknown Error 0x80131c49\" - and seems to be completely stuck\r\n\r\nOverstepping it is completely safe\r\n\r\nLike I said, when changing the .net version to 5 or framework 4.8 the error won\u0027t occure\r\n\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOdQyZ7A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc46oFMF",
                                           "createdAt":  "2021-12-01T12:16:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-12-01T12:16:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46o-26",
                                           "createdAt":  "2021-12-01T16:39:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nHi, i think I found a little bug, I hope this is the right place to report it. Happens for me both in VS Code and Visual Studio (2022) on Windows 10 using  .net 6. .net 5, and .net Framework 4.8 has no problems with it.\r\n\r\nNot sure if it\u0027s already reported or a strange thing that only happens to me.\r\n\r\n### Description\r\n\r\nIt seems to happen if you have a select statement that off an `IEnumerable` of any type except int, when it uses a method to change the type to an int and you place a `Where` startement with any check after that.\r\nI played a little bit around and it seems only to happen with an int and didn\u0027t found other type combinations or situations where this happens.\r\n\r\nThe simplest way to reproduce would be something like that:\r\n\r\n```\r\n        static void Main(string[] args)\r\n        {\r\n            var list = new[] { \"1\", \"4\", \"h\", \"l1\", \"7\" };\r\n            var parsedList = list.Select(item =\u003e DoSomething(item)).Where(item =\u003e item == 1).ToList();\r\n        }\r\n        public static int DoSomething\u003cT\u003e(T input)\r\n        {\r\n            return 1;\r\n        }\r\n```\r\n\r\nJust place a breakpoint in DoSomething and run.\r\n\r\nVS Goes into break mode: (\"Your app has entered a break state, but no code is currently executing that is supported by the selected debug engine (e.g. only native runtime code is executing).\") - stepping seems still to work, no other error is shown\r\n\r\nVS Code : the callstack shows: \"Error processing `stackTrace` request. Unknown Error 0x80131c49\" - and seems to be completely stuck\r\n\r\nOverstepping it is completely safe\r\n\r\nLike I said, when changing the .net version to 5 or framework 4.8 the error won\u0027t occure\r\n\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMucksh\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-12-01T16:39:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46pgwM",
                                           "createdAt":  "2021-12-01T18:56:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@Mucksh Thanks for the bug report!  As a workaround, please try setting COMPLUS_ReadyToRun=0 in project properties.\r\nIn the project\u0027s `launchSettings.json`:\r\n```json\r\n{\r\n  \"profiles\": {\r\n    \"ConsoleApp29\": {\r\n      \"commandName\": \"Project\",\r\n      \"environmentVariables\": {\r\n        \"COMPLUS_ReadyToRun\": \"0\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```",
                                           "updatedAt":  "2021-12-01T18:56:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5I5GrX",
                                           "createdAt":  "2022-08-22T20:18:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeremybparagon",
                                           "body":  "I\u0027m running into this too. The workaround mentioned above doesn\u0027t seem to be making a difference for me.\r\n\r\nHere is my minimal example:\r\n\r\n```c#\r\nvar objects = new object[1];\r\nvar sum = objects.Select(f).Sum();\r\nConsole.WriteLine(sum);\r\n\r\ndouble f(object o)\r\n{\r\n    // Put a breakpoint anywhere in this function (or any nested method you call from this function).\r\n    // The debugger will hit it but not be able to show the breakpoint that it hit.\r\n\r\n    // Add any code you like here.\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\nOne workaround that will likely get me by is to add a call to `ToList()` before the call to `Where` when I\u0027m debugging and this gets me stuck.\r\n\r\nOne thing to note is that when a user runs into this, it\u0027s a bit of a challenge to figure out what the issue is in a large codebase. If I\u0027m correct, breakpoints won\u0027t work for any nested code that gets called for the `Select`, and since you don\u0027t get a stack trace, you don\u0027t know where to look for the problem. This might be even more of a setback if you want to break on exceptions, since it can be harder to narrow down where the exception is happening to implement the workaround.\r\n\r\nSome additional notes: I\u0027m thinking the issue occurs when the `selector` takes an object as input and returns a value with a type from the built-in value types (verified for `bool` and `double`). The issue doesn\u0027t just occur for `Where`, but also for some other methods like `Sum` and `Aggregate`. The issue occurs even if the `selector` is a lambda expression.",
                                           "updatedAt":  "2022-08-22T20:40:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5n0WoX",
                                           "createdAt":  "2023-09-30T14:24:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "astride",
                                           "body":  "One workaround that works for me is letting your source object be a `List` rather than an array.\r\n\r\nIn OP\u0027s code example, changing\r\n\r\n```\r\nvar list = new[] { \"1\", \"4\", \"h\", \"l1\", \"7\" };\r\n```\r\n\r\nto\r\n\r\n```\r\nvar list = new List\u003cstring\u003e { \"1\", \"4\", \"h\", \"l1\", \"7\" };\r\n```\r\n\r\nled to the breakpoint inside `DoSomething()` being hit when debugging (Visual Studio 22, Windows 11, targeting .NET 6).",
                                           "updatedAt":  "2023-09-30T14:24:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc51DJns",
                                           "createdAt":  "2024-02-26T10:14:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "2mik",
                                           "body":  "In my case the issue occurs with a list.\r\n\r\n```\r\nList\u003cMyClass\u003e list;\r\nlist.ForEach(item =\u003e DoSomething(item));\r\n```\r\n\r\nIf I cange the code as below, the debugger works well:\r\n```\r\nforeach (MyClass item in list)\r\n{\r\n  DoSomething(item);\r\n}\r\n```\r\n\r\nVS 2022, version 17.8.7\r\n.NET 8",
                                           "updatedAt":  "2024-02-26T10:14:28Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Debugger can\u0027t step into a function in a given situation with Linq",
        "labels":  [
                       "bug",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/62243",
        "createdAt":  "2021-12-01T17:41:12Z",
        "number":  62243,
        "author":  "k15tfu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCE5XUQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "eterekhin",
                                            "createdAt":  "2021-12-01T18:18:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ForNeVeR",
                                            "createdAt":  "2021-12-02T06:31:38Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2022-05-17T22:49:11Z",
        "body":  "Hi!\r\n\r\nFound the following crash when debugging .NET Core 3.1 / .NET 5 managed app on macOS x64:\r\n```\r\nProcess:               vsdbg [29442]\r\nPath:                  /Applications/Visual Studio.app/Contents/Resources/lib/monodevelop/AddIns/DotNetCore.Debugger/Adapter/vsdbg\r\nIdentifier:            vsdbg\r\nVersion:               0\r\nCode Type:             X86-64 (Native)\r\nParent Process:        bash [29440]\r\nResponsible:           VisualStudio [29414]\r\nUser ID:               502\r\n\r\nDate/Time:             [...]\r\nOS Version:            macOS 11.6.1 (20G224)\r\nReport Version:        12\r\nBridge OS Version:     6.0 (19P549)\r\nAnonymous UUID:        [...]\r\n\r\n\r\nTime Awake Since Boot: 1400000 seconds\r\n\r\nSystem Integrity Protection: enabled\r\n\r\nCrashed Thread:        10\r\n\r\nException Type:        EXC_BAD_ACCESS (SIGSEGV)\r\nException Codes:       KERN_INVALID_ADDRESS at 0x0000000000000000\r\nException Note:        EXC_CORPSE_NOTIFY\r\n\r\nTermination Signal:    Segmentation fault: 11\r\nTermination Reason:    Namespace SIGNAL, Code 0xb\r\nTerminating Process:   exc handler [29442]\r\n\r\nExternal Modification Warnings:\r\nProcess used task_for_pid().\r\n\r\nVM Regions Near 0:\r\n--\u003e \r\n    __TEXT                      102a98000-102a9d000    [   20K] r-x/rwx SM=COW  /Applications/Visual Studio.app/Contents/Resources/lib/monodevelop/AddIns/DotNetCore.Debugger/Adapter/vsdbg\r\n[...]\r\nThread 10 Crashed:\r\n0   libmscordbi.dylib             \t0x00000001046dfe81 CordbNativeFrame::GetLocalRegisterValue(CorDebugRegister, CordbType*, ICorDebugValue**) + 913\r\n1   libmscordbi.dylib             \t0x00000001046e6edf CordbJITILFrame::GetArgument(unsigned int, ICorDebugValue**) + 575\r\n2   ???                           \t0x000000010a692588 0 + 4469630344\r\n3   ???                           \t0x000000010a6873ea 0 + 4469584874\r\n4   ???                           \t0x000000010a6d6779 0 + 4469909369\r\n5   ???                           \t0x000000010b106cef 0 + 4480593135\r\n6   ???                           \t0x000000010b0d3957 0 + 4480383319\r\n7   ???                           \t0x000000010b0d371d 0 + 4480382749\r\n8   ???                           \t0x000000010b5ef2da 0 + 4485739226\r\n9   ???                           \t0x000000010b5ee434 0 + 4485735476\r\n10  ???                           \t0x000000010b5ee2eb 0 + 4485735147\r\n11  ???                           \t0x000000010b5eda5f 0 + 4485732959\r\n12  ???                           \t0x000000010b0db04f 0 + 4480413775\r\n13  ???                           \t0x000000010b2cf6a6 0 + 4482463398\r\n14  ???                           \t0x000000010b2cf4f2 0 + 4482462962\r\n15  ???                           \t0x000000010b2cf2d4 0 + 4482462420\r\n16  ???                           \t0x000000010b2d0740 0 + 4482467648\r\n17  ???                           \t0x000000010abddc37 0 + 4475182135\r\n18  ???                           \t0x000000010de5d165 0 + 4528132453\r\n19  libvsdebugeng.dylib           \t0x000000010314b6b1 dispatcher::XapiGetLocalValuesWorkListItem::Invoke(dispatcher::XapiThreadOperation*, dispatcher::DkmWorkList*) + 97\r\n20  libvsdebugeng.dylib           \t0x000000010317bcb8 dispatcher::DkmWorkList::Invoke(dispatcher::XapiThreadOperation*) + 168\r\n21  libvsdebugeng.dylib           \t0x000000010317ccdd dispatcher::XapiInvokeWorkListAsyncTask::ExecuteTask(dispatcher::XapiThreadOperation*) + 13\r\n22  libvsdebugeng.dylib           \t0x0000000103168ff8 dispatcher::XapiWorkerThread::ProcessAsyncTask(dispatcher::XapiWorkerThreadAsyncTask*, dispatcher::XapiThreadOperation*) + 24\r\n23  libvsdebugeng.dylib           \t0x0000000103168c4b dispatcher::XapiWorkerThread::ThreadRoutine() + 235\r\n24  libvsbaseservices.dylib       \t0x0000000103564f28 CorUnix::CPalThread::ThreadEntry(void*) + 328\r\n25  libsystem_pthread.dylib       \t0x00007fff203838fc _pthread_start + 224\r\n26  libsystem_pthread.dylib       \t0x00007fff2037f443 thread_start + 15\r\n[...]\r\n```\r\n\r\nHere are steps to reproduce:\r\n1. Create a simple project with:\r\n```\r\nusing System;\r\n\r\nnamespace mathround_csharp\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var d = Math.Round(2.33, 2);\r\n            Console.WriteLine(d);\r\n        }\r\n    }\r\n}\r\n```\r\n2. Set function breakpoint on `Math.Round`, for ex. in Visual Studio for Mac v8.10.14\r\n3. Start Debugging\r\n![image](https://user-images.githubusercontent.com/979106/144283244-588aeb2d-cad2-4cbd-8fe2-6c4a5f50ff29.png)\r\n4. Enable \"Show External Code\"\r\n5. Switch to the top frame `System.Math.Round(double value, int digits) in :0`\r\n6. Open \"Locals\" tab, after that it immediately crashes like above\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOOqaO0g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc46pMIp",
                                           "createdAt":  "2021-12-01T17:41:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-12-01T17:41:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46po7S",
                                           "createdAt":  "2021-12-01T19:41:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nHi!\r\n\r\nFound the following crash when debugging .NET Core 3.1 / .NET 5 managed app on macOS x64:\r\n```\r\nProcess:               vsdbg [29442]\r\nPath:                  /Applications/Visual Studio.app/Contents/Resources/lib/monodevelop/AddIns/DotNetCore.Debugger/Adapter/vsdbg\r\nIdentifier:            vsdbg\r\nVersion:               0\r\nCode Type:             X86-64 (Native)\r\nParent Process:        bash [29440]\r\nResponsible:           VisualStudio [29414]\r\nUser ID:               502\r\n\r\nDate/Time:             [...]\r\nOS Version:            macOS 11.6.1 (20G224)\r\nReport Version:        12\r\nBridge OS Version:     6.0 (19P549)\r\nAnonymous UUID:        [...]\r\n\r\n\r\nTime Awake Since Boot: 1400000 seconds\r\n\r\nSystem Integrity Protection: enabled\r\n\r\nCrashed Thread:        10\r\n\r\nException Type:        EXC_BAD_ACCESS (SIGSEGV)\r\nException Codes:       KERN_INVALID_ADDRESS at 0x0000000000000000\r\nException Note:        EXC_CORPSE_NOTIFY\r\n\r\nTermination Signal:    Segmentation fault: 11\r\nTermination Reason:    Namespace SIGNAL, Code 0xb\r\nTerminating Process:   exc handler [29442]\r\n\r\nExternal Modification Warnings:\r\nProcess used task_for_pid().\r\n\r\nVM Regions Near 0:\r\n--\u003e \r\n    __TEXT                      102a98000-102a9d000    [   20K] r-x/rwx SM=COW  /Applications/Visual Studio.app/Contents/Resources/lib/monodevelop/AddIns/DotNetCore.Debugger/Adapter/vsdbg\r\n[...]\r\nThread 10 Crashed:\r\n0   libmscordbi.dylib             \t0x00000001046dfe81 CordbNativeFrame::GetLocalRegisterValue(CorDebugRegister, CordbType*, ICorDebugValue**) + 913\r\n1   libmscordbi.dylib             \t0x00000001046e6edf CordbJITILFrame::GetArgument(unsigned int, ICorDebugValue**) + 575\r\n2   ???                           \t0x000000010a692588 0 + 4469630344\r\n3   ???                           \t0x000000010a6873ea 0 + 4469584874\r\n4   ???                           \t0x000000010a6d6779 0 + 4469909369\r\n5   ???                           \t0x000000010b106cef 0 + 4480593135\r\n6   ???                           \t0x000000010b0d3957 0 + 4480383319\r\n7   ???                           \t0x000000010b0d371d 0 + 4480382749\r\n8   ???                           \t0x000000010b5ef2da 0 + 4485739226\r\n9   ???                           \t0x000000010b5ee434 0 + 4485735476\r\n10  ???                           \t0x000000010b5ee2eb 0 + 4485735147\r\n11  ???                           \t0x000000010b5eda5f 0 + 4485732959\r\n12  ???                           \t0x000000010b0db04f 0 + 4480413775\r\n13  ???                           \t0x000000010b2cf6a6 0 + 4482463398\r\n14  ???                           \t0x000000010b2cf4f2 0 + 4482462962\r\n15  ???                           \t0x000000010b2cf2d4 0 + 4482462420\r\n16  ???                           \t0x000000010b2d0740 0 + 4482467648\r\n17  ???                           \t0x000000010abddc37 0 + 4475182135\r\n18  ???                           \t0x000000010de5d165 0 + 4528132453\r\n19  libvsdebugeng.dylib           \t0x000000010314b6b1 dispatcher::XapiGetLocalValuesWorkListItem::Invoke(dispatcher::XapiThreadOperation*, dispatcher::DkmWorkList*) + 97\r\n20  libvsdebugeng.dylib           \t0x000000010317bcb8 dispatcher::DkmWorkList::Invoke(dispatcher::XapiThreadOperation*) + 168\r\n21  libvsdebugeng.dylib           \t0x000000010317ccdd dispatcher::XapiInvokeWorkListAsyncTask::ExecuteTask(dispatcher::XapiThreadOperation*) + 13\r\n22  libvsdebugeng.dylib           \t0x0000000103168ff8 dispatcher::XapiWorkerThread::ProcessAsyncTask(dispatcher::XapiWorkerThreadAsyncTask*, dispatcher::XapiThreadOperation*) + 24\r\n23  libvsdebugeng.dylib           \t0x0000000103168c4b dispatcher::XapiWorkerThread::ThreadRoutine() + 235\r\n24  libvsbaseservices.dylib       \t0x0000000103564f28 CorUnix::CPalThread::ThreadEntry(void*) + 328\r\n25  libsystem_pthread.dylib       \t0x00007fff203838fc _pthread_start + 224\r\n26  libsystem_pthread.dylib       \t0x00007fff2037f443 thread_start + 15\r\n[...]\r\n```\r\n\r\nHere are steps to reproduce:\r\n1. Create a simple project with:\r\n```\r\nusing System;\r\n\r\nnamespace mathround_csharp\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var d = Math.Round(2.33, 2);\r\n            Console.WriteLine(d);\r\n        }\r\n    }\r\n}\r\n```\r\n2. Set function breakpoint on `Math.Round`, for ex. in Visual Studio for Mac v8.10.14\r\n3. Start Debugging\r\n![image](https://user-images.githubusercontent.com/979106/144283244-588aeb2d-cad2-4cbd-8fe2-6c4a5f50ff29.png)\r\n4. Enable \"Show External Code\"\r\n5. Switch to the top frame `System.Math.Round(double value, int digits) in :0`\r\n6. Open \"Locals\" tab, after that it immediately crashes like above\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ek15tfu\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-12-01T19:41:33Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "ICorDebugILFrame.GetArgument causes EXC_BAD_ACCESS (SIGSEGV) when used for Math.Round()",
        "labels":  [
                       "bug",
                       "os-mac-os-x",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/62626",
        "createdAt":  "2021-12-10T09:07:01Z",
        "number":  62626,
        "author":  "hueifeng",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-04-23T17:29:34Z",
        "body":  "In address -summary, I found inside MEM_COMMIT to 4.423 GB, but I can only get in eeheap 405618688 bytes, I passed! Heap -s can get the memory is very small.Memory. Now I don\u0027t know, how can I investigate the remaining memory of MEM COMMIT .\r\n\r\n How can I see how these memory spilled?Usually I can use! Heap -s to see the disclosure issues of Windows NT, but I can\u0027t see it in this.\r\n\r\n!address -summary MEM_COMMIT 4.423 GB\r\n\r\n```\r\n0:000\u003e !address -summary\r\n\r\n--- Usage Summary ---------------- RgnCount ----------- Total Size -------- %ofBusy %ofTotal\r\nFree                                    579     7df9`74541000 ( 125.974 TB)           98.42%\r\n\u003cunknown\u003e                               912      206`7c9dc000 (   2.025 TB)  99.99%    1.58%\r\nImage                                   972        0`06a01000 ( 106.004 MB)   0.00%    0.00%\r\nHeap                                     81        0`05a27000 (  90.152 MB)   0.00%    0.00%\r\nStack                                   114        0`02a80000 (  42.500 MB)   0.00%    0.00%\r\nOther                                     9        0`001de000 (   1.867 MB)   0.00%    0.00%\r\nTEB                                      38        0`0004c000 ( 304.000 kB)   0.00%    0.00%\r\nPEB                                       1        0`00001000 (   4.000 kB)   0.00%    0.00%\r\n\r\n--- Type Summary (for busy) ------ RgnCount ----------- Total Size -------- %ofBusy %ofTotal\r\nMEM_MAPPED                              220      200`062b0000 (   2.000 TB)  98.74%    1.56%\r\nMEM_PRIVATE                             935        6`7edfe000 (  25.982 GB)   1.25%    0.02%\r\nMEM_IMAGE                               972        0`06a01000 ( 106.004 MB)   0.00%    0.00%\r\n\r\n--- State Summary ---------------- RgnCount ----------- Total Size -------- %ofBusy %ofTotal\r\nMEM_FREE                                579     7df9`74541000 ( 125.974 TB)           98.42%\r\nMEM_RESERVE                             296      205`709f6000 (   2.021 TB)  99.79%    1.58%\r\nMEM_COMMIT                             1831        1`1b0b9000 (   4.423 GB)   0.21%    0.00%\r\n\r\n--- Protect Summary (for commit) - RgnCount ----------- Total Size -------- %ofBusy %ofTotal\r\nPAGE_READWRITE                          862        1`0e1cc000 (   4.221 GB)   0.20%    0.00%\r\nPAGE_READONLY                           579        0`0659a000 ( 101.602 MB)   0.00%    0.00%\r\nPAGE_EXECUTE_READ                       159        0`04f2b000 (  79.168 MB)   0.00%    0.00%\r\nPAGE_NOACCESS                            80        0`01550000 (  21.312 MB)   0.00%    0.00%\r\nPAGE_EXECUTE_READWRITE                   19        0`002ba000 (   2.727 MB)   0.00%    0.00%\r\nPAGE_WRITECOPY                           94        0`001aa000 (   1.664 MB)   0.00%    0.00%\r\nPAGE_READWRITE | PAGE_GUARD              38        0`00074000 ( 464.000 kB)   0.00%    0.00%\r\n\r\n--- Largest Region by Usage ----------- Base Address -------- Region Size ----------\r\nFree                                    21e`6c05c000     7bd5`f48f4000 ( 123.836 TB)\r\n\u003cunknown\u003e                              7dfd`d8ac0000      1f7`68898000 (   1.966 TB)\r\nImage                                  7ff9`71121000        0`009ba000 (   9.727 MB)\r\nHeap                                    218`83c71000        0`00eff000 (  14.996 MB)\r\nStack                                    22`cad80000        0`0017c000 (   1.484 MB)\r\nOther                                   218`f1b50000        0`00181000 (   1.504 MB)\r\nTEB                                      22`ca410000        0`00002000 (   8.000 kB)\r\nPEB                                      22`ca40f000        0`00001000 (   4.000 kB)\r\n```\r\n\r\n\r\n!eeheap -gc 405618688 bytes.\r\n\r\n```\r\n0:000\u003e !eeheap -gc\r\nNumber of GC Heaps: 12\r\n------------------------------\r\nHeap 0 (00000218F3182A40)\r\ngeneration 0 starts at 0x00000218F34C9DB0\r\ngeneration 1 starts at 0x00000218F3477478\r\ngeneration 2 starts at 0x00000218F3461000\r\nephemeral segment allocation context: none\r\n         segment             begin         allocated         committed    allocated size    committed size\r\n00000218F3460000  00000218F3461000  00000218F3A0BDC8  00000218F3F02000  0x5aadc8(5942728)  0xaa1000(11145216)\r\nLarge object heap starts at 0x0000021BF3461000\r\n         segment             begin         allocated         committed    allocated size    committed size\r\n0000021BF3460000  0000021BF3461000  0000021BF449E8D0  0000021BF44BF000  0x103d8d0(17029328)  0x105e000(17162240)\r\nPinned object heap starts at 0x0000021CB3461000\r\n0000021CB3460000  0000021CB3461000  0000021CB3464FF0  0000021CB3472000  0x3ff0(16368)  0x11000(69632)\r\nAllocated Heap Size:       Size: 0x15ec688 (22988424) bytes.\r\nCommitted Heap Size:       Size: 0x1aff000 (28307456) bytes.\r\n------------------------------\r\nHeap 1 (00000218F31AE470)\r\ngeneration 0 starts at 0x00000219334C05F8\r\ngeneration 1 starts at 0x0000021933471E28\r\ngeneration 2 starts at 0x0000021933461000\r\nephemeral segment allocation context: none\r\n         segment             begin         allocated         committed    allocated size    committed size\r\n0000021933460000  0000021933461000  0000021933A20610  0000021933EE2000  0x5bf610(6026768)  0xa81000(11014144)\r\nLarge object heap starts at 0x0000021C03461000\r\n         segment             begin         allocated         committed    allocated size    committed size\r\n0000021C03460000  0000021C03461000  0000021C0451F4E8  0000021C04520000  0x10be4e8(17556712)  0x10bf000(17559552)\r\nPinned object heap starts at 0x0000021CC3461000\r\n0000021CC3460000  0000021CC3461000  0000021CC3462030  0000021CC3472000  0x1030(4144)  0x11000(69632)\r\nAllocated Heap Size:       Size: 0x167eb28 (23587624) bytes.\r\nCommitted Heap Size:       Size: 0x1b40000 (28573696) bytes.\r\n------------------------------\r\nHeap 2 (00000218F31DD200)\r\ngeneration 0 starts at 0x00000219734967E0\r\ngeneration 1 starts at 0x000002197346DFB0\r\ngeneration 2 starts at 0x0000021973461000\r\nephemeral segment allocation context: none\r\n         segment             begin         allocated         committed    allocated size    committed size\r\n0000021973460000  0000021973461000  00000219734987F8  0000021973E52000  0x377f8(227320)  0x9f1000(10424320)\r\nLarge object heap starts at 0x0000021C13461000\r\n         segment             begin         allocated         committed    allocated size    committed size\r\n0000021C13460000  0000021C13461000  0000021C14B631F8  0000021C14B83000  0x17021f8(24125944)  0x1722000(24256512)\r\nPinned object heap starts at 0x0000021CD3461000\r\n0000021CD3460000  0000021CD3461000  0000021CD3461018  0000021CD3462000  0x18(24)  0x1000(4096)\r\nAllocated Heap Size:       Size: 0x1739a08 (24353288) bytes.\r\nCommitted Heap Size:       Size: 0x2113000 (34680832) bytes.\r\n------------------------------\r\nHeap 3 (00000218F3208F70)\r\ngeneration 0 starts at 0x00000219B34B7828\r\ngeneration 1 starts at 0x00000219B3489AB8\r\ngeneration 2 starts at 0x00000219B3461000\r\nephemeral segment allocation context: none\r\n         segment             begin         allocated         committed    allocated size    committed size\r\n00000219B3460000  00000219B3461000  00000219B3A17840  00000219B3EC2000  0x5b6840(5990464)  0xa61000(10883072)\r\nLarge object heap starts at 0x0000021C23461000\r\n         segment             begin         allocated         committed    allocated size    committed size\r\n0000021C23460000  0000021C23461000  0000021C24B43768  0000021C24B83000  0x16e2768(23996264)  0x1722000(24256512)\r\nPinned object heap starts at 0x0000021CE3461000\r\n0000021CE3460000  0000021CE3461000  0000021CE3462030  0000021CE3472000  0x1030(4144)  0x11000(69632)\r\nAllocated Heap Size:       Size: 0x1c99fd8 (29990872) bytes.\r\nCommitted Heap Size:       Size: 0x2183000 (35139584) bytes.\r\n------------------------------\r\nHeap 4 (00000218F3234CE0)\r\ngeneration 0 starts at 0x00000219F34DC428\r\ngeneration 1 starts at 0x00000219F34730F0\r\ngeneration 2 starts at 0x00000219F3461000\r\nephemeral segment allocation context: none\r\n         segment             begin         allocated         committed    allocated size    committed size\r\n00000219F3460000  00000219F3461000  00000219F3BAA440  00000219F3EE2000  0x749440(7640128)  0xa81000(11014144)\r\nLarge object heap starts at 0x0000021C33461000\r\n         segment             begin         allocated         committed    allocated size    committed size\r\n0000021C33460000  0000021C33461000  0000021C3410D580  0000021C3412E000  0xcac580(13288832)  0xccd000(13422592)\r\nPinned object heap starts at 0x0000021CF3461000\r\n0000021CF3460000  0000021CF3461000  0000021CF3465030  0000021CF3472000  0x4030(16432)  0x11000(69632)\r\nAllocated Heap Size:       Size: 0x13f99f0 (20945392) bytes.\r\nCommitted Heap Size:       Size: 0x174e000 (24436736) bytes.\r\n------------------------------\r\nHeap 5 (0000021D7EDD1EF0)\r\ngeneration 0 starts at 0x0000021A334F9AF8\r\ngeneration 1 starts at 0x0000021A33485C40\r\ngeneration 2 starts at 0x0000021A33461000\r\nephemeral segment allocation context: none\r\n         segment             begin         allocated         committed    allocated size    committed size\r\n0000021A33460000  0000021A33461000  0000021A33A59B10  0000021A33F02000  0x5f8b10(6261520)  0xaa1000(11145216)\r\nLarge object heap starts at 0x0000021C43461000\r\n         segment             begin         allocated         committed    allocated size    committed size\r\n0000021C43460000  0000021C43461000  0000021C444BCE08  0000021C4451C000  0x105be08(17153544)  0x10bb000(17543168)\r\nPinned object heap starts at 0x0000021D03461000\r\n0000021D03460000  0000021D03461000  0000021D03461018  0000021D03462000  0x18(24)  0x1000(4096)\r\nAllocated Heap Size:       Size: 0x1654930 (23415088) bytes.\r\nCommitted Heap Size:       Size: 0x1b5c000 (28688384) bytes.\r\n------------------------------\r\nHeap 6 (0000021D7EDFD920)\r\ngeneration 0 starts at 0x0000021A73495A38\r\ngeneration 1 starts at 0x0000021A73469D68\r\ngeneration 2 starts at 0x0000021A73461000\r\nephemeral segment allocation context: none\r\n         segment             begin         allocated         committed    allocated size    committed size\r\n0000021A73460000  0000021A73461000  0000021A73A15A50  0000021A73E92000  0x5b4a50(5982800)  0xa31000(10686464)\r\nLarge object heap starts at 0x0000021C53461000\r\n         segment             begin         allocated         committed    allocated size    committed size\r\n0000021C53460000  0000021C53461000  0000021C549CAFA8  0000021C549CB000  0x1569fa8(22454184)  0x156a000(22454272)\r\nPinned object heap starts at 0x0000021D13461000\r\n0000021D13460000  0000021D13461000  0000021D13461018  0000021D13462000  0x18(24)  0x1000(4096)\r\nAllocated Heap Size:       Size: 0x1b1ea10 (28437008) bytes.\r\nCommitted Heap Size:       Size: 0x1f9b000 (33140736) bytes.\r\n------------------------------\r\nHeap 7 (0000021D7EE29690)\r\ngeneration 0 starts at 0x0000021AB35B3700\r\ngeneration 1 starts at 0x0000021AB3580548\r\ngeneration 2 starts at 0x0000021AB3461000\r\nephemeral segment allocation context: none\r\n         segment             begin         allocated         committed    allocated size    committed size\r\n0000021AB3460000  0000021AB3461000  0000021AB39D3718  0000021AB3FC2000  0x572718(5711640)  0xb61000(11931648)\r\nLarge object heap starts at 0x0000021C63461000\r\n         segment             begin         allocated         committed    allocated size    committed size\r\n0000021C63460000  0000021C63461000  0000021C649CCBF8  0000021C649ED000  0x156bbf8(22461432)  0x158c000(22593536)\r\nPinned object heap starts at 0x0000021D23461000\r\n0000021D23460000  0000021D23461000  0000021D23461018  0000021D23462000  0x18(24)  0x1000(4096)\r\nAllocated Heap Size:       Size: 0x1ade328 (28173096) bytes.\r\nCommitted Heap Size:       Size: 0x20ed000 (34525184) bytes.\r\n------------------------------\r\nHeap 8 (0000021D7EE55400)\r\ngeneration 0 starts at 0x0000021AF3496810\r\ngeneration 1 starts at 0x0000021AF3472A28\r\ngeneration 2 starts at 0x0000021AF3461000\r\nephemeral segment allocation context: none\r\n         segment             begin         allocated         committed    allocated size    committed size\r\n0000021AF3460000  0000021AF3461000  0000021AF39F6828  0000021AF3E92000  0x595828(5855272)  0xa31000(10686464)\r\nLarge object heap starts at 0x0000021C73461000\r\n         segment             begin         allocated         committed    allocated size    committed size\r\n0000021C73460000  0000021C73461000  0000021C7492E5F8  0000021C7494F000  0x14cd5f8(21812728)  0x14ee000(21946368)\r\nPinned object heap starts at 0x0000021D33461000\r\n0000021D33460000  0000021D33461000  0000021D33461830  0000021D33462000  0x830(2096)  0x1000(4096)\r\nAllocated Heap Size:       Size: 0x1a63650 (27670096) bytes.\r\nCommitted Heap Size:       Size: 0x1f1f000 (32632832) bytes.\r\n------------------------------\r\nHeap 9 (0000021D7EE81170)\r\ngeneration 0 starts at 0x0000021B334DE9E0\r\ngeneration 1 starts at 0x0000021B334A73C8\r\ngeneration 2 starts at 0x0000021B33461000\r\nephemeral segment allocation context: none\r\n         segment             begin         allocated         committed    allocated size    committed size\r\n0000021B33460000  0000021B33461000  0000021B33A409F8  0000021B33E82000  0x5df9f8(6158840)  0xa21000(10620928)\r\nLarge object heap starts at 0x0000021C83461000\r\n         segment             begin         allocated         committed    allocated size    committed size\r\n0000021C83460000  0000021C83461000  0000021C849E9DF8  0000021C84A0A000  0x1588df8(22580728)  0x15a9000(22712320)\r\nPinned object heap starts at 0x0000021D43461000\r\n0000021D43460000  0000021D43461000  0000021D43461018  0000021D43462000  0x18(24)  0x1000(4096)\r\nAllocated Heap Size:       Size: 0x1b68808 (28739592) bytes.\r\nCommitted Heap Size:       Size: 0x1fca000 (33333248) bytes.\r\n------------------------------\r\nHeap 10 (0000021D7EEADD80)\r\ngeneration 0 starts at 0x0000021B73544EC8\r\ngeneration 1 starts at 0x0000021B73504C18\r\ngeneration 2 starts at 0x0000021B73461000\r\nephemeral segment allocation context: none\r\n         segment             begin         allocated         committed    allocated size    committed size\r\n0000021B73460000  0000021B73461000  0000021B73AEAEE0  0000021B73F42000  0x689ee0(6856416)  0xae1000(11407360)\r\nLarge object heap starts at 0x0000021C93461000\r\n         segment             begin         allocated         committed    allocated size    committed size\r\n0000021C93460000  0000021C93461000  0000021C955DEF78  0000021C955DF000  0x217df78(35118968)  0x217e000(35119104)\r\nPinned object heap starts at 0x0000021D53461000\r\n0000021D53460000  0000021D53461000  0000021D53468450  0000021D53472000  0x7450(29776)  0x11000(69632)\r\nAllocated Heap Size:       Size: 0x280f2a8 (42005160) bytes.\r\nCommitted Heap Size:       Size: 0x2c5f000 (46526464) bytes.\r\n------------------------------\r\nHeap 11 (0000021D7EED9980)\r\ngeneration 0 starts at 0x0000021BB34C6550\r\ngeneration 1 starts at 0x0000021BB34784A8\r\ngeneration 2 starts at 0x0000021BB3461000\r\nephemeral segment allocation context: none\r\n         segment             begin         allocated         committed    allocated size    committed size\r\n0000021BB3460000  0000021BB3461000  0000021BB3906568  0000021BB3EA2000  0x4a5568(4871528)  0xa41000(10752000)\r\nLarge object heap starts at 0x0000021CA3461000\r\n         segment             begin         allocated         committed    allocated size    committed size\r\n0000021CA3460000  0000021CA3461000  0000021CA55A4DB8  0000021CA55A5000  0x2143db8(34880952)  0x2144000(34881536)\r\nPinned object heap starts at 0x0000021D63461000\r\n0000021D63460000  0000021D63461000  0000021D6346CF88  0000021D63472000  0xbf88(49032)  0x11000(69632)\r\nAllocated Heap Size:       Size: 0x25f52a8 (39801512) bytes.\r\nCommitted Heap Size:       Size: 0x2b85000 (45633536) bytes.\r\n------------------------------\r\nGC Allocated Heap Size:    Size: 0x14459f90 (340107152) bytes.\r\nGC Committed Heap Size:    Size: 0x182d4000 (405618688) bytes.\r\n```\r\n!heap -s\r\n\r\n```\r\n0:000\u003e !heap -s\r\n\r\n\r\n************************************************************************************************************************\r\n                                              NT HEAP STATS BELOW\r\n************************************************************************************************************************\r\nLFH Key                   : 0xa893144b6b979747\r\nTermination on corruption : ENABLED\r\n          Heap     Flags   Reserv  Commit  Virt   Free  List   UCR  Virt  Lock  Fast \r\n                            (k)     (k)    (k)     (k) length      blocks cont. heap \r\n-------------------------------------------------------------------------------------\r\n00000218f1710000 00000002   65320  14712  64928   5575   163    16    2      c   LFH\r\n    External fragmentation  38 % (163 free blocks)\r\n00000218f1660000 00008000      64      4     64      2     1     1    0      0      \r\n00000218f16f0000 00001002    3516   2388   3124    200    58     3    0      0   LFH\r\n00000218f3360000 00001002      60      8     60      2     1     1    0      0      \r\n00000218f3450000 00041002      60      8     60      5     1     1    0      0      \r\n0000021d7fa40000 00001002    3516   1460   3124     89    25     3    0      0   LFH\r\n0000021d7fc00000 00001002      60      8     60      5     1     1    0      0      \r\n0000021d7fbc0000 00001002     452     32     60      5     2     1    0      0   LFH\r\n-------------------------------------------------------------------------------------\r\n\r\n```\r\n\r\nhttps://github.com/hueifeng/MemoryLeak",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOe49X5Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc47Db4G",
                                           "createdAt":  "2021-12-10T09:07:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-12-10T09:07:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47E1VF",
                                           "createdAt":  "2021-12-10T16:39:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nIn address -summary, I found inside MEM_COMMIT to 4.423 GB, but I can only get in eeheap 405618688 bytes, I passed! Heap -s can get the memory is very small.Memory. Now I don\u0027t know, how can I investigate the remaining memory of MEM COMMIT .\r\n\r\n How can I see how these memory spilled?Usually I can use! Heap -s to see the disclosure issues of Windows NT, but I can\u0027t see it in this.\r\n\r\n!address -summary MEM_COMMIT 4.423 GB\r\n\r\n```\r\n0:000\u003e !address -summary\r\n\r\n--- Usage Summary ---------------- RgnCount ----------- Total Size -------- %ofBusy %ofTotal\r\nFree                                    579     7df9`74541000 ( 125.974 TB)           98.42%\r\n\u003cunknown\u003e                               912      206`7c9dc000 (   2.025 TB)  99.99%    1.58%\r\nImage                                   972        0`06a01000 ( 106.004 MB)   0.00%    0.00%\r\nHeap                                     81        0`05a27000 (  90.152 MB)   0.00%    0.00%\r\nStack                                   114        0`02a80000 (  42.500 MB)   0.00%    0.00%\r\nOther                                     9        0`001de000 (   1.867 MB)   0.00%    0.00%\r\nTEB                                      38        0`0004c000 ( 304.000 kB)   0.00%    0.00%\r\nPEB                                       1        0`00001000 (   4.000 kB)   0.00%    0.00%\r\n\r\n--- Type Summary (for busy) ------ RgnCount ----------- Total Size -------- %ofBusy %ofTotal\r\nMEM_MAPPED                              220      200`062b0000 (   2.000 TB)  98.74%    1.56%\r\nMEM_PRIVATE                             935        6`7edfe000 (  25.982 GB)   1.25%    0.02%\r\nMEM_IMAGE                               972        0`06a01000 ( 106.004 MB)   0.00%    0.00%\r\n\r\n--- State Summary ---------------- RgnCount ----------- Total Size -------- %ofBusy %ofTotal\r\nMEM_FREE                                579     7df9`74541000 ( 125.974 TB)           98.42%\r\nMEM_RESERVE                             296      205`709f6000 (   2.021 TB)  99.79%    1.58%\r\nMEM_COMMIT                             1831        1`1b0b9000 (   4.423 GB)   0.21%    0.00%\r\n\r\n--- Protect Summary (for commit) - RgnCount ----------- Total Size -------- %ofBusy %ofTotal\r\nPAGE_READWRITE                          862        1`0e1cc000 (   4.221 GB)   0.20%    0.00%\r\nPAGE_READONLY                           579        0`0659a000 ( 101.602 MB)   0.00%    0.00%\r\nPAGE_EXECUTE_READ                       159        0`04f2b000 (  79.168 MB)   0.00%    0.00%\r\nPAGE_NOACCESS                            80        0`01550000 (  21.312 MB)   0.00%    0.00%\r\nPAGE_EXECUTE_READWRITE                   19        0`002ba000 (   2.727 MB)   0.00%    0.00%\r\nPAGE_WRITECOPY                           94        0`001aa000 (   1.664 MB)   0.00%    0.00%\r\nPAGE_READWRITE | PAGE_GUARD              38        0`00074000 ( 464.000 kB)   0.00%    0.00%\r\n\r\n--- Largest Region by Usage ----------- Base Address -------- Region Size ----------\r\nFree                                    21e`6c05c000     7bd5`f48f4000 ( 123.836 TB)\r\n\u003cunknown\u003e                              7dfd`d8ac0000      1f7`68898000 (   1.966 TB)\r\nImage                                  7ff9`71121000        0`009ba000 (   9.727 MB)\r\nHeap                                    218`83c71000        0`00eff000 (  14.996 MB)\r\nStack                                    22`cad80000        0`0017c000 (   1.484 MB)\r\nOther                                   218`f1b50000        0`00181000 (   1.504 MB)\r\nTEB                                      22`ca410000        0`00002000 (   8.000 kB)\r\nPEB                                      22`ca40f000        0`00001000 (   4.000 kB)\r\n```\r\n\r\n\r\n!eeheap -gc 405618688 bytes.\r\n\r\n```\r\n0:000\u003e !eeheap -gc\r\nNumber of GC Heaps: 12\r\n------------------------------\r\nHeap 0 (00000218F3182A40)\r\ngeneration 0 starts at 0x00000218F34C9DB0\r\ngeneration 1 starts at 0x00000218F3477478\r\ngeneration 2 starts at 0x00000218F3461000\r\nephemeral segment allocation context: none\r\n         segment             begin         allocated         committed    allocated size    committed size\r\n00000218F3460000  00000218F3461000  00000218F3A0BDC8  00000218F3F02000  0x5aadc8(5942728)  0xaa1000(11145216)\r\nLarge object heap starts at 0x0000021BF3461000\r\n         segment             begin         allocated         committed    allocated size    committed size\r\n0000021BF3460000  0000021BF3461000  0000021BF449E8D0  0000021BF44BF000  0x103d8d0(17029328)  0x105e000(17162240)\r\nPinned object heap starts at 0x0000021CB3461000\r\n0000021CB3460000  0000021CB3461000  0000021CB3464FF0  0000021CB3472000  0x3ff0(16368)  0x11000(69632)\r\nAllocated Heap Size:       Size: 0x15ec688 (22988424) bytes.\r\nCommitted Heap Size:       Size: 0x1aff000 (28307456) bytes.\r\n------------------------------\r\nHeap 1 (00000218F31AE470)\r\ngeneration 0 starts at 0x00000219334C05F8\r\ngeneration 1 starts at 0x0000021933471E28\r\ngeneration 2 starts at 0x0000021933461000\r\nephemeral segment allocation context: none\r\n         segment             begin         allocated         committed    allocated size    committed size\r\n0000021933460000  0000021933461000  0000021933A20610  0000021933EE2000  0x5bf610(6026768)  0xa81000(11014144)\r\nLarge object heap starts at 0x0000021C03461000\r\n         segment             begin         allocated         committed    allocated size    committed size\r\n0000021C03460000  0000021C03461000  0000021C0451F4E8  0000021C04520000  0x10be4e8(17556712)  0x10bf000(17559552)\r\nPinned object heap starts at 0x0000021CC3461000\r\n0000021CC3460000  0000021CC3461000  0000021CC3462030  0000021CC3472000  0x1030(4144)  0x11000(69632)\r\nAllocated Heap Size:       Size: 0x167eb28 (23587624) bytes.\r\nCommitted Heap Size:       Size: 0x1b40000 (28573696) bytes.\r\n------------------------------\r\nHeap 2 (00000218F31DD200)\r\ngeneration 0 starts at 0x00000219734967E0\r\ngeneration 1 starts at 0x000002197346DFB0\r\ngeneration 2 starts at 0x0000021973461000\r\nephemeral segment allocation context: none\r\n         segment             begin         allocated         committed    allocated size    committed size\r\n0000021973460000  0000021973461000  00000219734987F8  0000021973E52000  0x377f8(227320)  0x9f1000(10424320)\r\nLarge object heap starts at 0x0000021C13461000\r\n         segment             begin         allocated         committed    allocated size    committed size\r\n0000021C13460000  0000021C13461000  0000021C14B631F8  0000021C14B83000  0x17021f8(24125944)  0x1722000(24256512)\r\nPinned object heap starts at 0x0000021CD3461000\r\n0000021CD3460000  0000021CD3461000  0000021CD3461018  0000021CD3462000  0x18(24)  0x1000(4096)\r\nAllocated Heap Size:       Size: 0x1739a08 (24353288) bytes.\r\nCommitted Heap Size:       Size: 0x2113000 (34680832) bytes.\r\n------------------------------\r\nHeap 3 (00000218F3208F70)\r\ngeneration 0 starts at 0x00000219B34B7828\r\ngeneration 1 starts at 0x00000219B3489AB8\r\ngeneration 2 starts at 0x00000219B3461000\r\nephemeral segment allocation context: none\r\n         segment             begin         allocated         committed    allocated size    committed size\r\n00000219B3460000  00000219B3461000  00000219B3A17840  00000219B3EC2000  0x5b6840(5990464)  0xa61000(10883072)\r\nLarge object heap starts at 0x0000021C23461000\r\n         segment             begin         allocated         committed    allocated size    committed size\r\n0000021C23460000  0000021C23461000  0000021C24B43768  0000021C24B83000  0x16e2768(23996264)  0x1722000(24256512)\r\nPinned object heap starts at 0x0000021CE3461000\r\n0000021CE3460000  0000021CE3461000  0000021CE3462030  0000021CE3472000  0x1030(4144)  0x11000(69632)\r\nAllocated Heap Size:       Size: 0x1c99fd8 (29990872) bytes.\r\nCommitted Heap Size:       Size: 0x2183000 (35139584) bytes.\r\n------------------------------\r\nHeap 4 (00000218F3234CE0)\r\ngeneration 0 starts at 0x00000219F34DC428\r\ngeneration 1 starts at 0x00000219F34730F0\r\ngeneration 2 starts at 0x00000219F3461000\r\nephemeral segment allocation context: none\r\n         segment             begin         allocated         committed    allocated size    committed size\r\n00000219F3460000  00000219F3461000  00000219F3BAA440  00000219F3EE2000  0x749440(7640128)  0xa81000(11014144)\r\nLarge object heap starts at 0x0000021C33461000\r\n         segment             begin         allocated         committed    allocated size    committed size\r\n0000021C33460000  0000021C33461000  0000021C3410D580  0000021C3412E000  0xcac580(13288832)  0xccd000(13422592)\r\nPinned object heap starts at 0x0000021CF3461000\r\n0000021CF3460000  0000021CF3461000  0000021CF3465030  0000021CF3472000  0x4030(16432)  0x11000(69632)\r\nAllocated Heap Size:       Size: 0x13f99f0 (20945392) bytes.\r\nCommitted Heap Size:       Size: 0x174e000 (24436736) bytes.\r\n------------------------------\r\nHeap 5 (0000021D7EDD1EF0)\r\ngeneration 0 starts at 0x0000021A334F9AF8\r\ngeneration 1 starts at 0x0000021A33485C40\r\ngeneration 2 starts at 0x0000021A33461000\r\nephemeral segment allocation context: none\r\n         segment             begin         allocated         committed    allocated size    committed size\r\n0000021A33460000  0000021A33461000  0000021A33A59B10  0000021A33F02000  0x5f8b10(6261520)  0xaa1000(11145216)\r\nLarge object heap starts at 0x0000021C43461000\r\n         segment             begin         allocated         committed    allocated size    committed size\r\n0000021C43460000  0000021C43461000  0000021C444BCE08  0000021C4451C000  0x105be08(17153544)  0x10bb000(17543168)\r\nPinned object heap starts at 0x0000021D03461000\r\n0000021D03460000  0000021D03461000  0000021D03461018  0000021D03462000  0x18(24)  0x1000(4096)\r\nAllocated Heap Size:       Size: 0x1654930 (23415088) bytes.\r\nCommitted Heap Size:       Size: 0x1b5c000 (28688384) bytes.\r\n------------------------------\r\nHeap 6 (0000021D7EDFD920)\r\ngeneration 0 starts at 0x0000021A73495A38\r\ngeneration 1 starts at 0x0000021A73469D68\r\ngeneration 2 starts at 0x0000021A73461000\r\nephemeral segment allocation context: none\r\n         segment             begin         allocated         committed    allocated size    committed size\r\n0000021A73460000  0000021A73461000  0000021A73A15A50  0000021A73E92000  0x5b4a50(5982800)  0xa31000(10686464)\r\nLarge object heap starts at 0x0000021C53461000\r\n         segment             begin         allocated         committed    allocated size    committed size\r\n0000021C53460000  0000021C53461000  0000021C549CAFA8  0000021C549CB000  0x1569fa8(22454184)  0x156a000(22454272)\r\nPinned object heap starts at 0x0000021D13461000\r\n0000021D13460000  0000021D13461000  0000021D13461018  0000021D13462000  0x18(24)  0x1000(4096)\r\nAllocated Heap Size:       Size: 0x1b1ea10 (28437008) bytes.\r\nCommitted Heap Size:       Size: 0x1f9b000 (33140736) bytes.\r\n------------------------------\r\nHeap 7 (0000021D7EE29690)\r\ngeneration 0 starts at 0x0000021AB35B3700\r\ngeneration 1 starts at 0x0000021AB3580548\r\ngeneration 2 starts at 0x0000021AB3461000\r\nephemeral segment allocation context: none\r\n         segment             begin         allocated         committed    allocated size    committed size\r\n0000021AB3460000  0000021AB3461000  0000021AB39D3718  0000021AB3FC2000  0x572718(5711640)  0xb61000(11931648)\r\nLarge object heap starts at 0x0000021C63461000\r\n         segment             begin         allocated         committed    allocated size    committed size\r\n0000021C63460000  0000021C63461000  0000021C649CCBF8  0000021C649ED000  0x156bbf8(22461432)  0x158c000(22593536)\r\nPinned object heap starts at 0x0000021D23461000\r\n0000021D23460000  0000021D23461000  0000021D23461018  0000021D23462000  0x18(24)  0x1000(4096)\r\nAllocated Heap Size:       Size: 0x1ade328 (28173096) bytes.\r\nCommitted Heap Size:       Size: 0x20ed000 (34525184) bytes.\r\n------------------------------\r\nHeap 8 (0000021D7EE55400)\r\ngeneration 0 starts at 0x0000021AF3496810\r\ngeneration 1 starts at 0x0000021AF3472A28\r\ngeneration 2 starts at 0x0000021AF3461000\r\nephemeral segment allocation context: none\r\n         segment             begin         allocated         committed    allocated size    committed size\r\n0000021AF3460000  0000021AF3461000  0000021AF39F6828  0000021AF3E92000  0x595828(5855272)  0xa31000(10686464)\r\nLarge object heap starts at 0x0000021C73461000\r\n         segment             begin         allocated         committed    allocated size    committed size\r\n0000021C73460000  0000021C73461000  0000021C7492E5F8  0000021C7494F000  0x14cd5f8(21812728)  0x14ee000(21946368)\r\nPinned object heap starts at 0x0000021D33461000\r\n0000021D33460000  0000021D33461000  0000021D33461830  0000021D33462000  0x830(2096)  0x1000(4096)\r\nAllocated Heap Size:       Size: 0x1a63650 (27670096) bytes.\r\nCommitted Heap Size:       Size: 0x1f1f000 (32632832) bytes.\r\n------------------------------\r\nHeap 9 (0000021D7EE81170)\r\ngeneration 0 starts at 0x0000021B334DE9E0\r\ngeneration 1 starts at 0x0000021B334A73C8\r\ngeneration 2 starts at 0x0000021B33461000\r\nephemeral segment allocation context: none\r\n         segment             begin         allocated         committed    allocated size    committed size\r\n0000021B33460000  0000021B33461000  0000021B33A409F8  0000021B33E82000  0x5df9f8(6158840)  0xa21000(10620928)\r\nLarge object heap starts at 0x0000021C83461000\r\n         segment             begin         allocated         committed    allocated size    committed size\r\n0000021C83460000  0000021C83461000  0000021C849E9DF8  0000021C84A0A000  0x1588df8(22580728)  0x15a9000(22712320)\r\nPinned object heap starts at 0x0000021D43461000\r\n0000021D43460000  0000021D43461000  0000021D43461018  0000021D43462000  0x18(24)  0x1000(4096)\r\nAllocated Heap Size:       Size: 0x1b68808 (28739592) bytes.\r\nCommitted Heap Size:       Size: 0x1fca000 (33333248) bytes.\r\n------------------------------\r\nHeap 10 (0000021D7EEADD80)\r\ngeneration 0 starts at 0x0000021B73544EC8\r\ngeneration 1 starts at 0x0000021B73504C18\r\ngeneration 2 starts at 0x0000021B73461000\r\nephemeral segment allocation context: none\r\n         segment             begin         allocated         committed    allocated size    committed size\r\n0000021B73460000  0000021B73461000  0000021B73AEAEE0  0000021B73F42000  0x689ee0(6856416)  0xae1000(11407360)\r\nLarge object heap starts at 0x0000021C93461000\r\n         segment             begin         allocated         committed    allocated size    committed size\r\n0000021C93460000  0000021C93461000  0000021C955DEF78  0000021C955DF000  0x217df78(35118968)  0x217e000(35119104)\r\nPinned object heap starts at 0x0000021D53461000\r\n0000021D53460000  0000021D53461000  0000021D53468450  0000021D53472000  0x7450(29776)  0x11000(69632)\r\nAllocated Heap Size:       Size: 0x280f2a8 (42005160) bytes.\r\nCommitted Heap Size:       Size: 0x2c5f000 (46526464) bytes.\r\n------------------------------\r\nHeap 11 (0000021D7EED9980)\r\ngeneration 0 starts at 0x0000021BB34C6550\r\ngeneration 1 starts at 0x0000021BB34784A8\r\ngeneration 2 starts at 0x0000021BB3461000\r\nephemeral segment allocation context: none\r\n         segment             begin         allocated         committed    allocated size    committed size\r\n0000021BB3460000  0000021BB3461000  0000021BB3906568  0000021BB3EA2000  0x4a5568(4871528)  0xa41000(10752000)\r\nLarge object heap starts at 0x0000021CA3461000\r\n         segment             begin         allocated         committed    allocated size    committed size\r\n0000021CA3460000  0000021CA3461000  0000021CA55A4DB8  0000021CA55A5000  0x2143db8(34880952)  0x2144000(34881536)\r\nPinned object heap starts at 0x0000021D63461000\r\n0000021D63460000  0000021D63461000  0000021D6346CF88  0000021D63472000  0xbf88(49032)  0x11000(69632)\r\nAllocated Heap Size:       Size: 0x25f52a8 (39801512) bytes.\r\nCommitted Heap Size:       Size: 0x2b85000 (45633536) bytes.\r\n------------------------------\r\nGC Allocated Heap Size:    Size: 0x14459f90 (340107152) bytes.\r\nGC Committed Heap Size:    Size: 0x182d4000 (405618688) bytes.\r\n```\r\n!heap -s\r\n\r\n```\r\n0:000\u003e !heap -s\r\n\r\n\r\n************************************************************************************************************************\r\n                                              NT HEAP STATS BELOW\r\n************************************************************************************************************************\r\nLFH Key                   : 0xa893144b6b979747\r\nTermination on corruption : ENABLED\r\n          Heap     Flags   Reserv  Commit  Virt   Free  List   UCR  Virt  Lock  Fast \r\n                            (k)     (k)    (k)     (k) length      blocks cont. heap \r\n-------------------------------------------------------------------------------------\r\n00000218f1710000 00000002   65320  14712  64928   5575   163    16    2      c   LFH\r\n    External fragmentation  38 % (163 free blocks)\r\n00000218f1660000 00008000      64      4     64      2     1     1    0      0      \r\n00000218f16f0000 00001002    3516   2388   3124    200    58     3    0      0   LFH\r\n00000218f3360000 00001002      60      8     60      2     1     1    0      0      \r\n00000218f3450000 00041002      60      8     60      5     1     1    0      0      \r\n0000021d7fa40000 00001002    3516   1460   3124     89    25     3    0      0   LFH\r\n0000021d7fc00000 00001002      60      8     60      5     1     1    0      0      \r\n0000021d7fbc0000 00001002     452     32     60      5     2     1    0      0   LFH\r\n-------------------------------------------------------------------------------------\r\n\r\n```\r\n\r\nhttps://github.com/hueifeng/MemoryLeak\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ehueifeng\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`question`, `area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-12-10T16:39:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47FvEn",
                                           "createdAt":  "2021-12-10T22:58:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@Maoni0 @mikem8361 @cshung ",
                                           "updatedAt":  "2021-12-10T22:58:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47FzSA",
                                           "createdAt":  "2021-12-10T23:43:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "You could try `!address` without the `-summary` flag to figure out what the individual pieces of commits are. Trying your repro locally, I could find quite a bit of module images and mapped files.\r\n\r\nYou can also try `!eeheap` without the `-gc` option to see what other heaps the CLR internally uses.",
                                           "updatedAt":  "2021-12-10T23:43:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47GGag",
                                           "createdAt":  "2021-12-11T04:32:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hueifeng",
                                           "body":  "I don\u0027t quite understand if my application is calling `virtualAlloc`, but its physical memory is very high.\r\n\r\n![image](https://user-images.githubusercontent.com/34702552/145663601-b7b13436-de7c-4fb9-9274-125aeb084e07.png)\r\n\r\nRun this [Program](https://github.com/hueifeifeng/memoryleak), access to `http://localhost:5000/excel`, you can find that its memory has been growing, this is actually because there is no timely `dispose` .  \r\n\r\nFor now, I\u0027m using `!finalizequeue` to see, but I don\u0027t understand if I go through Windbg to check memory problems, for the program\u0027s problems can not be found in visible memory?\r\n\r\n```\r\n0:000\u003e !finalizequeue\r\nSyncBlocks to be cleaned up: 0\r\nFree-Threaded Interfaces to be released: 0\r\nMTA Interfaces to be released: 0\r\nSTA Interfaces to be released: 0\r\n----------------------------------\r\n------------------------------\r\nHeap 0\r\ngeneration 0 has 5 finalizable objects (000001830FEB0BA8-\u003e000001830FEB0BD0)\r\ngeneration 1 has 69 finalizable objects (000001830FEB0980-\u003e000001830FEB0BA8)\r\ngeneration 2 has 0 finalizable objects (000001830FEB0980-\u003e000001830FEB0980)\r\nReady for finalization 0 objects (000001830FEB0BD0-\u003e000001830FEB0BD0)\r\n------------------------------\r\nHeap 1\r\ngeneration 0 has 5 finalizable objects (000001830FEB0F50-\u003e000001830FEB0F78)\r\ngeneration 1 has 32 finalizable objects (000001830FEB0E50-\u003e000001830FEB0F50)\r\ngeneration 2 has 0 finalizable objects (000001830FEB0E50-\u003e000001830FEB0E50)\r\nReady for finalization 0 objects (000001830FEB0F78-\u003e000001830FEB0F78)\r\n------------------------------\r\nHeap 2\r\ngeneration 0 has 6 finalizable objects (000001830BEBC728-\u003e000001830BEBC758)\r\ngeneration 1 has 127 finalizable objects (000001830BEBC330-\u003e000001830BEBC728)\r\ngeneration 2 has 0 finalizable objects (000001830BEBC330-\u003e000001830BEBC330)\r\nReady for finalization 0 objects (000001830BEBC758-\u003e000001830BEBC758)\r\n------------------------------\r\nHeap 3\r\ngeneration 0 has 11 finalizable objects (000001830BF1D170-\u003e000001830BF1D1C8)\r\ngeneration 1 has 78 finalizable objects (000001830BF1CF00-\u003e000001830BF1D170)\r\ngeneration 2 has 0 finalizable objects (000001830BF1CF00-\u003e000001830BF1CF00)\r\nReady for finalization 0 objects (000001830BF1D1C8-\u003e000001830BF1D1C8)\r\n------------------------------\r\nHeap 4\r\ngeneration 0 has 6 finalizable objects (000001837AB892F8-\u003e000001837AB89328)\r\ngeneration 1 has 55 finalizable objects (000001837AB89140-\u003e000001837AB892F8)\r\ngeneration 2 has 0 finalizable objects (000001837AB89140-\u003e000001837AB89140)\r\nReady for finalization 0 objects (000001837AB89328-\u003e000001837AB89328)\r\n------------------------------\r\nHeap 5\r\ngeneration 0 has 8 finalizable objects (000001887BBC6D68-\u003e000001887BBC6DA8)\r\ngeneration 1 has 41 finalizable objects (000001887BBC6C20-\u003e000001887BBC6D68)\r\ngeneration 2 has 0 finalizable objects (000001887BBC6C20-\u003e000001887BBC6C20)\r\nReady for finalization 0 objects (000001887BBC6DA8-\u003e000001887BBC6DA8)\r\n------------------------------\r\nHeap 6\r\ngeneration 0 has 8 finalizable objects (00000183790A2A80-\u003e00000183790A2AC0)\r\ngeneration 1 has 60 finalizable objects (00000183790A28A0-\u003e00000183790A2A80)\r\ngeneration 2 has 0 finalizable objects (00000183790A28A0-\u003e00000183790A28A0)\r\nReady for finalization 0 objects (00000183790A2AC0-\u003e00000183790A2AC0)\r\n------------------------------\r\nHeap 7\r\ngeneration 0 has 5 finalizable objects (000001830BAF04E8-\u003e000001830BAF0510)\r\ngeneration 1 has 37 finalizable objects (000001830BAF03C0-\u003e000001830BAF04E8)\r\ngeneration 2 has 0 finalizable objects (000001830BAF03C0-\u003e000001830BAF03C0)\r\nReady for finalization 0 objects (000001830BAF0510-\u003e000001830BAF0510)\r\nStatistics for all finalizable objects (including all objects ready for finalization):\r\n              MT    Count    TotalSize Class Name\r\n00007ffc2dc23818        1           24 System.Net.Security.SafeCredentialReference\r\n00007ffc2dac4238        1           24 System.WeakReference\r\n00007ffc2d6eb908        1           24 System.WeakReference`1[[Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServerOptions, Microsoft.AspNetCore.Server.Kestrel.Core]]\r\n00007ffc2d6e4120        1           24 System.WeakReference`1[[System.Runtime.Loader.AssemblyLoadContext, System.Private.CoreLib]]\r\n00007ffc2d572b68        1           24 System.WeakReference`1[[Microsoft.Extensions.DependencyInjection.ServiceProvider, Microsoft.Extensions.DependencyInjection]]\r\n00007ffc2d429258        1           24 System.WeakReference`1[[System.IO.FileSystemWatcher, System.IO.FileSystem.Watcher]]\r\n00007ffc2dd15c20        1           32 Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle\r\n00007ffc2d6de4d8        1           32 Internal.Cryptography.Pal.Native.SafeLocalAllocHandle\r\n00007ffc2d68fa00        1           32 Internal.Cryptography.Pal.Native.SafeCertStoreHandle\r\n00007ffc2d3a5cc0        1           32 System.Net.Quic.Implementations.MsQuic.Internal.SafeMsQuicRegistrationHandle\r\n00007ffc2db390c8        1           40 Interop+WinHttp+SafeWinHttpHandle\r\n00007ffc2d69a420        1           40 Internal.Cryptography.Pal.Native.SafeCertContextHandle\r\n00007ffc2d5bea18        1           40 System.Diagnostics.EventLog\r\n00007ffc2dc29a38        1           48 System.Net.Security.SafeFreeCredential_SECURITY\r\n00007ffc2d963f80        2           48 System.WeakReference`1[[System.Text.RegularExpressions.RegexReplacement, System.Text.RegularExpressions]]\r\n00007ffc2d7a3750        2           48 System.WeakReference`1[[Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.KestrelConnection, Microsoft.AspNetCore.Server.Kestrel.Core]]\r\n00007ffc2d685e10        1           56 System.Runtime.CompilerServices.ConditionalWeakTable`2+Container[[System.Buffers.TlsOverPerCoreLockedStacksArrayPool`1+ThreadLocalArray[[System.Char, System.Private.CoreLib]][], System.Private.CoreLib],[System.Object, System.Private.CoreLib]]\r\n00007ffc2d44c4d0        1           56 System.Runtime.CompilerServices.ConditionalWeakTable`2+Container[[System.Buffers.TlsOverPerCoreLockedStacksArrayPool`1+ThreadLocalArray[[System.Byte, System.Private.CoreLib]][], System.Private.CoreLib],[System.Object, System.Private.CoreLib]]\r\n00007ffc2d96be68        1           64 CellStore`1[[System.Uri, System.Private.Uri]]\r\n00007ffc2d96b780        1           64 FlagCellStore\r\n00007ffc2d96af48        1           64 CellStore`1[[System.Object, System.Private.CoreLib]]\r\n00007ffc2d96a5b8        1           64 CellStore`1[[OfficeOpenXml.ExcelCoreValue, Magicodes.IE.EPPlus]]\r\n00007ffc2d6ddab8        2           64 Internal.Cryptography.Pal.Native.SafeChainEngineHandle\r\n00007ffc2d69d528        2           64 Internal.Win32.SafeHandles.SafeRegistryHandle\r\n00007ffc2d685bc8        2           64 Microsoft.Win32.SafeHandles.SafeWaitHandle\r\n00007ffc2d685280        3           72 System.Threading.ThreadInt64PersistentCounter+ThreadLocalNodeFinalizationHelper\r\n00007ffc2d5f5f50        3           72 System.Runtime.InteropServices.PosixSignalRegistration\r\n00007ffc2d4299d0        1           72 Microsoft.Win32.SafeHandles.SafeFileHandle\r\n00007ffc2d6e40b8        1           80 System.Runtime.Loader.DefaultAssemblyLoadContext\r\n00007ffc2dac9ed0        2           96 PageIndex\r\n00007ffc2d96d0c8        2           96 ColumnIndex\r\n00007ffc2d464470        3          120 System.Gen2GcCallback\r\n00007ffc2d40a620        1          120 System.IO.FileSystemWatcher\r\n00007ffc2d96bc18        2          128 CellStore`1[[System.Int32, System.Private.CoreLib]]\r\n00007ffc2dac20c8        2          144 System.Reflection.Emit.DynamicResolver\r\n00007ffc2d680f10        3          144 System.Threading.LowLevelLock\r\n00007ffc2d683c48        3          168 System.Threading.ThreadPoolWorkQueueThreadLocals\r\n00007ffc2d681e80        1          176 System.Threading.LowLevelLifoSemaphore\r\n00007ffc2dc25ef0        1          184 System.Collections.Concurrent.CDSCollectionETWBCLProvider\r\n00007ffc2db8e658        1          184 System.Net.NetEventSource\r\n00007ffc2db8c378        1          184 System.Net.NetEventSource\r\n00007ffc2db38f90        1          184 System.Net.NetEventSource\r\n00007ffc2d90c658        1          184 Microsoft.IO.RecyclableMemoryStreamManager+Events\r\n00007ffc2d689b48        1          184 Microsoft.AspNetCore.Certificates.Generation.CertificateManager+CertificateManagerEventSource\r\n00007ffc2d66f9f8        1          184 System.Diagnostics.Tracing.FrameworkEventSource\r\n00007ffc2d66b720        1          184 System.Net.NetEventSource\r\n00007ffc2d44d128        1          184 System.Buffers.ArrayPoolEventSource\r\n00007ffc2d2e2ec8        1          184 System.Diagnostics.Tracing.NativeRuntimeEventSource\r\n00007ffc2d694e10        1          192 System.Threading.Tasks.TplEventSource\r\n00007ffc2d572ab0        1          192 Microsoft.Extensions.DependencyInjection.DependencyInjectionEventSource\r\n00007ffc2d505f00        1          200 Microsoft.Extensions.Logging.EventSource.LoggingEventSource\r\n00007ffc2db8ade8        1          224 System.Net.NameResolutionTelemetry\r\n00007ffc2d428b08        7          224 System.Threading.PreAllocatedOverlapped\r\n00007ffc2d563c78        1          232 System.Diagnostics.DiagnosticSourceEventSource\r\n00007ffc2d61fe88        1          240 Microsoft.AspNetCore.Hosting.HostingEventSource\r\n00007ffc2db6b788        8          256 System.Threading.TimerQueue+AppDomainTimerSafeHandle\r\n00007ffc2d690270        1          280 System.Net.Sockets.SocketsTelemetry\r\n00007ffc2db6bc80        1          296 System.Net.Http.HttpTelemetry\r\n00007ffc2d68b998        1          336 Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.KestrelEventSource\r\n00007ffc2dc21998        1          360 System.Net.Security.NetSecurityTelemetry\r\n00007ffc2d2dae28        1          384 System.Diagnostics.Tracing.RuntimeEventSource\r\n00007ffc2d66ad60       10          480 System.Net.Sockets.SafeSocketHandle\r\n00007ffc2d2e0240       21          504 System.WeakReference`1[[System.Diagnostics.Tracing.EventSource, System.Private.CoreLib]]\r\n00007ffc2d2b0538        9          648 System.Threading.Thread\r\n00007ffc2d77a188        2          704 Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketReceiver\r\n00007ffc2d90cec0        6          960 Microsoft.IO.RecyclableMemoryStream\r\n00007ffc2d5fc658       10         1280 System.Net.Sockets.Socket\r\n00007ffc2d68d898        4         1536 System.Net.Sockets.Socket+AwaitableSocketAsyncEventArgs\r\n00007ffc2d2dc778       42         4704 System.Diagnostics.Tracing.EventSource+OverrideEventProvider\r\n00007ffc2daec058      356        14240 System.Drawing.Bitmap\r\nTotal 553 objects\r\n\r\n```",
                                           "updatedAt":  "2021-12-11T04:36:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57UaxN",
                                           "createdAt":  "2024-04-22T09:42:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "baoqger",
                                           "body":  "do you have any update on this issue? ",
                                           "updatedAt":  "2024-04-22T09:42:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57j1fl",
                                           "createdAt":  "2024-04-23T17:29:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "\u003e do you have any update on this issue?\r\n\r\nNo, I am not actively working on this issue, is our suggestion above works for you?\r\n\r\n\u003e You could try `!address` without the `-summary` flag to figure out what the individual pieces of commits are. Trying your repro locally, I could find quite a bit of module images and mapped files.\r\n\u003e \r\n\u003e You can also try `!eeheap` without the `-gc` option to see what other heaps the CLR internally uses.\r\n\r\nBeside that, we have a new [`!maddress`](https://github.com/dotnet/diagnostics/commit/22e135e59ace69d48e2787359d40a70f0c374e47) command built by @leculver, feel free to try that one as well.\r\n\r\n@tommcdon, can this issue be closed?",
                                           "updatedAt":  "2024-04-23T17:29:33Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "How do I get the distribution of application memory in Windbg ",
        "labels":  [
                       "question",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/63244",
        "createdAt":  "2021-12-31T22:42:53Z",
        "number":  63244,
        "author":  "deeprobin",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-05-02T19:01:55Z",
        "body":  "### Description\r\n\r\nHowever, according to the docs, this one is no longer being raised\r\n\r\n### Reproduction Steps\r\n\r\nRun the following (This reproduces without running under the debugger):\r\n\r\nVariant 1:\r\n```cs\r\nEnvironment.FailFast(\"Testing\");\r\n```\r\n\r\nVariant 2:\r\n```cs\r\nusing System.Runtime.InteropServices;\r\n\r\nvar sectionBytes = new byte[2912012];\r\nvar funcAddr = 1828651008u;\r\nMarshal.Copy(sectionBytes, 0, (IntPtr)funcAddr, sectionBytes.Length);\r\n```\r\n\r\n### Expected behavior\r\n\r\nThere is a reported usage of Environment.FailFast\r\n\r\n### Actual behavior\r\n\r\nAn unhandled ExecutionEngineException is reported.\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n.NET 7.0.100-alpha.1.21568.2\r\nOS: Windows 10 Pro Version 21H1 (Build 19043.1415)\r\nArchitecture: AMD64",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOfKaYhA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc47z5ro",
                                           "createdAt":  "2021-12-31T22:42:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-12-31T22:42:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47z5wp",
                                           "createdAt":  "2021-12-31T22:46:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Could you please make the repro standalone? This depends on your pinvoke signatures, etc.\r\n\r\nIs funcAddr valid? Why do you expect a fail fast?",
                                           "updatedAt":  "2021-12-31T22:46:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc470l0I",
                                           "createdAt":  "2022-01-02T00:34:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "deeprobin",
                                           "body":  "\u003e Could you please make the repro standalone? This depends on your pinvoke signatures, etc.\r\n\u003e \r\n\u003e Is funcAddr valid? Why do you expect a fail fast?\r\n\r\nI have scaled down the example accordingly.\r\nFuncAddress is valid at the time. (Edit: Apparently it was not valid after all, but the ExecutionEngineException is still a problem, since it is obsolete).\r\n\r\nI can\u0027t tell you the exact procedure, but I assumed FailFast, because according to the documentation the ExecutionEngineException was replaced by it.",
                                           "updatedAt":  "2022-01-02T01:24:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc470mAb",
                                           "createdAt":  "2022-01-02T00:44:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "deeprobin",
                                           "body":  "Have now noticed that the ExecutionEngineException occurs when the `destination` parameter is not IntPtr.Zero.\r\nFor ex.\r\n```cs\r\nvar sectionBytes = new byte[2912012];\r\nvar funcAddr = 1u;\r\nMarshal.Copy(sectionBytes, 0, (IntPtr)funcAddr, sectionBytes.Length);\r\n```\r\n\r\nStrangely enough, the ExecutionEngineException only occurs when the byte array reaches a certain size. If there is a maximum size for this I think we should use a more readable exception. On my system, the maximum size seems to be 2048 bytes.\r\n\r\n```cs\r\nvar sectionBytes = new byte[2048];\r\nvar funcAddr = 1u;\r\nMarshal.Copy(sectionBytes, 0, (IntPtr)funcAddr, sectionBytes.Length); // System.NullReferenceException: \u0027Object reference not set to an instance of an object.\u0027\r\n```\r\n\r\n```cs\r\nvar sectionBytes = new byte[2912012];\r\nvar funcAddr = 1u;\r\nMarshal.Copy(sectionBytes, 0, (IntPtr)funcAddr, sectionBytes.Length);\r\n```\r\n\r\nStrangely enough, the ExecutionEngineException only occurs when the byte array reaches a certain size. If there is a maximum size for this I think we should use a more readable exception. On my system, the maximum size seems to be 2048 bytes.\r\n\r\n```cs\r\nvar sectionBytes = new byte[2049];\r\nvar funcAddr = 1u;\r\nMarshal.Copy(sectionBytes, 0, (IntPtr)funcAddr, sectionBytes.Length); // System.ExecutionEngineException\r\n\r\n```",
                                           "updatedAt":  "2022-01-02T00:44:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc470maX",
                                           "createdAt":  "2022-01-02T01:02:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "deeprobin",
                                           "body":  "https://github.com/dotnet/runtime/blob/b42188a8143f3c7971a7ab1c735e31d8349e7991/src/libraries/System.Private.CoreLib/src/System/Runtime/InteropServices/Marshal.cs#L260\r\nhttps://github.com/dotnet/runtime/blob/b42188a8143f3c7971a7ab1c735e31d8349e7991/src/libraries/System.Private.CoreLib/src/System/Span.cs#L310-L324\r\n\r\nStrangely enough, setting the breakpoint caused me to get an error message in the console.\r\n\r\n```\r\nFatal error. Internal CLR error. (0x80131506)\r\n   at System.Buffer._Memmove(Byte ByRef, Byte ByRef, UIntPtr)\r\n   at System.Buffer.Memmove(Byte ByRef, Byte ByRef, UIntPtr)\r\n   at System.Runtime.InteropServices.Marshal.CopyToNative[[System.Byte, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](Byte[], Int32, IntPtr, Int32)\r\n   at System.Runtime.InteropServices.Marshal.Copy(Byte[], Int32, IntPtr, Int32)\r\n   at Program.\u003cMain\u003e$(System.String[])\r\n```\r\n\r\nAfter further analysis I came to the conclusion that the error takes place in Buffer.BulkMoveWithWriteBarrier.\r\n\r\nhttps://github.com/dotnet/runtime/blob/b42188a8143f3c7971a7ab1c735e31d8349e7991/src/coreclr/System.Private.CoreLib/src/System/Buffer.CoreCLR.cs#L34-L40\r\n\r\nUnfortunately the debugger didn\u0027t want to continue debugging, so I had to follow the rest of the process in my head.\r\nBulkMoveWithWriteBarrierChunk is 0x4000 (dec: 16384). In the case of 2049 bytes we are still below this limit, so we get into _BulkMoveWithWriteBarrier where this error occurs\r\n\r\nhttps://github.com/dotnet/runtime/blob/b42188a8143f3c7971a7ab1c735e31d8349e7991/src/coreclr/System.Private.CoreLib/src/System/Buffer.CoreCLR.cs#L44-L75\r\n\r\nSince this error also occurs in release mode, I guess the error actually occurs in `__BulkMoveWithWriteBarrier` (internal call).\r\nhttps://github.com/dotnet/runtime/blob/b42188a8143f3c7971a7ab1c735e31d8349e7991/src/coreclr/System.Private.CoreLib/src/System/Buffer.CoreCLR.cs#L77-L78\r\n\r\nhttps://github.com/dotnet/runtime/blob/24e7a4a1a101d91b6666dc6f44137574246fdd9c/src/coreclr/vm/comutilnative.cpp#L648-L657\r\n",
                                           "updatedAt":  "2022-01-02T01:02:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc470mno",
                                           "createdAt":  "2022-01-02T01:09:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "deeprobin",
                                           "body":  "## Behavior in .NET Framework 4.8\r\n### Invalid funcAddr\r\n```\r\nSystem.AccessViolationException: \u0027Es wurde versucht, im geschützten Speicher zu lesen oder zu schreiben. Dies ist häufig ein Hinweis darauf, dass anderer Speicher beschädigt ist.\u0027\r\n```\r\n### Valid funcAddr\r\nEverything works\r\n\r\n## Behavior in .NET Core 2.1/3.1 \u0026 .NET 5/6/7\r\n### Invalid funcAddr\r\n```\r\nSystem.ExecutionEngineException\r\n```\r\n### Valid funcAddr\r\nEverything works",
                                           "updatedAt":  "2022-01-02T01:21:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc470nhs",
                                           "createdAt":  "2022-01-02T01:40:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "deeprobin",
                                           "body":  "My guess is that some _ASSERTE is causing this.\r\nhttps://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/coreclr/inc/debugmacros.h#L83-L89",
                                           "updatedAt":  "2022-01-02T01:40:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc470ns1",
                                           "createdAt":  "2022-01-02T01:49:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "The arguments of `Marshal.Copy` are unmanaged pointers. Passing an invalid unmanaged pointer into methods like `Marshal.Copy` has unspecified behavior. It can silently corrupt data, it can crash inside the runtime or in some other place. There is no reliable way for runtime to validate the unmanaged pointers.\r\n\r\n\u003e Behavior in .NET Framework 4.8\r\n\r\nIt is by design that the behavior with invalid unmanaged pointers can vary between different runtime versions.",
                                           "updatedAt":  "2022-01-02T01:49:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc470n2I",
                                           "createdAt":  "2022-01-02T01:54:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Should the [docs ](https://docs.microsoft.com/en-us/dotnet/api/system.executionengineexception?view=net-6.0)be saying this?\r\n```\r\nExecutionEngineException previously indicated an unspecified fatal error in the runtime. The runtime no longer raises this exception so this type is obsolete.\r\n```",
                                           "updatedAt":  "2022-01-02T01:54:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc470onH",
                                           "createdAt":  "2022-01-02T02:26:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Should the docs be saying this?\r\n\r\nI think so. It is accurate description of the runtime behavior, for both .NET Framework and .NET Core.\r\n\r\n`COR_E_EXECUTIONENGINE` `0x80131506` error code is used to signal fatal error. The internal uses of this error code by the runtime are not converted into raising of `ExecutionEngineException`.",
                                           "updatedAt":  "2022-01-02T02:26:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4709CR",
                                           "createdAt":  "2022-01-02T16:00:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "deeprobin",
                                           "body":  "As I understand it, this exception should not be thrown anymore. Practically it is still thrown.\r\n\r\nWhat is the further procedure?",
                                           "updatedAt":  "2022-01-02T16:00:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc471AzF",
                                           "createdAt":  "2022-01-02T17:57:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Practically it is still thrown.\r\n\r\nWhere do you see it thrown? \r\n\r\n`Fatal error. Internal CLR error. (0x80131506)` error message does not say anything about `ExecutionEngineException` being thrown.",
                                           "updatedAt":  "2022-01-02T17:57:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc471A0z",
                                           "createdAt":  "2022-01-02T17:58:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "deeprobin",
                                           "body":  "@jkotas In Visual Studio 22\r\n\r\n",
                                           "updatedAt":  "2022-01-02T17:58:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc471BlN",
                                           "createdAt":  "2022-01-02T18:24:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nHowever, according to the docs, this one is no longer being raised\r\n\r\n### Reproduction Steps\r\n\r\nRun under Visual Studio 2022 debugger:\r\n\r\nVariant 1:\r\n```cs\r\nEnvironment.FailFast(\"Testing\");\r\n```\r\n\r\nVariant 2:\r\n```cs\r\nusing System.Runtime.InteropServices;\r\n\r\nvar sectionBytes = new byte[2912012];\r\nvar funcAddr = 1828651008u;\r\nMarshal.Copy(sectionBytes, 0, (IntPtr)funcAddr, sectionBytes.Length);\r\n```\r\n\r\n### Expected behavior\r\n\r\nVS debugger reports usage of Environment.FailFast\r\n\r\n### Actual behavior\r\n\r\nVS debugger reports unhandled ExecutionEngineException\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n.NET 7.0.100-alpha.1.21568.2\r\nOS: Windows 10 Pro Version 21H1 (Build 19043.1415)\r\nArchitecture: AMD64\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edeeprobin\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-01-02T18:24:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc471BoK",
                                           "createdAt":  "2022-01-02T18:25:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "@deeprobin I agree that it is confusing that the VS debugger reports `FailFast` as unhandled `ExecutionEngineException`. I have edited the top post to make it clear that this issue is about VS debugger behavior.",
                                           "updatedAt":  "2022-01-02T18:25:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc471B0D",
                                           "createdAt":  "2022-01-02T18:32:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "deeprobin",
                                           "body":  "@jkotas Great! Thanks 👍🏼 ",
                                           "updatedAt":  "2022-01-02T18:32:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5AxNxy",
                                           "createdAt":  "2022-04-02T13:37:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "deeprobin",
                                           "body":  "Should we create an external issue at Visual Studio for this?",
                                           "updatedAt":  "2022-04-02T13:37:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ov6oW",
                                           "createdAt":  "2022-11-20T16:57:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "I must admit that it\u0027s indeed quite confusing when debugger points to `ExecutionEngineException` right at the comment that states that `The runtime no longer raises this exception so this type is obsolete.` 🙂 ",
                                           "updatedAt":  "2022-11-20T16:57:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RFGXu",
                                           "createdAt":  "2022-12-20T21:26:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikelle-rogers",
                                           "body":  "I changed the title of this issue, because I found that it also reports the ExecutionEngineException outside of the debugger. ",
                                           "updatedAt":  "2022-12-20T21:26:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RFLcH",
                                           "createdAt":  "2022-12-20T21:33:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikelle-rogers",
                                           "body":  "\u003e Have now noticed that the ExecutionEngineException occurs when the `destination` parameter is not IntPtr.Zero. For ex.\r\n\u003e \r\n\u003e ```cs\r\n\u003e var sectionBytes = new byte[2912012];\r\n\u003e var funcAddr = 1u;\r\n\u003e Marshal.Copy(sectionBytes, 0, (IntPtr)funcAddr, sectionBytes.Length);\r\n\u003e ```\r\n\u003e \r\n\u003e Strangely enough, the ExecutionEngineException only occurs when the byte array reaches a certain size. If there is a maximum size for this I think we should use a more readable exception. On my system, the maximum size seems to be 2048 bytes.\r\n\u003e \r\n\u003e ```cs\r\n\u003e var sectionBytes = new byte[2048];\r\n\u003e var funcAddr = 1u;\r\n\u003e Marshal.Copy(sectionBytes, 0, (IntPtr)funcAddr, sectionBytes.Length); // System.NullReferenceException: \u0027Object reference not set to an instance of an object.\u0027\r\n\u003e ```\r\n\u003e \r\n\u003e ```cs\r\n\u003e var sectionBytes = new byte[2912012];\r\n\u003e var funcAddr = 1u;\r\n\u003e Marshal.Copy(sectionBytes, 0, (IntPtr)funcAddr, sectionBytes.Length);\r\n\u003e ```\r\n\u003e \r\n\u003e Strangely enough, the ExecutionEngineException only occurs when the byte array reaches a certain size. If there is a maximum size for this I think we should use a more readable exception. On my system, the maximum size seems to be 2048 bytes.\r\n\u003e \r\n\u003e ```cs\r\n\u003e var sectionBytes = new byte[2049];\r\n\u003e var funcAddr = 1u;\r\n\u003e Marshal.Copy(sectionBytes, 0, (IntPtr)funcAddr, sectionBytes.Length); // System.ExecutionEngineException\r\n\u003e ```\r\n\r\nI found this to be the case as well.",
                                           "updatedAt":  "2022-12-20T21:33:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RFMg_",
                                           "createdAt":  "2022-12-20T21:33:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikelle-rogers",
                                           "body":  "cc @janvorli ",
                                           "updatedAt":  "2022-12-20T21:33:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RFaGB",
                                           "createdAt":  "2022-12-20T21:53:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "I might have misunderstood the problem, but when I try the example with sectionBytes size \u003e= 2049 on Windows 10, I get:\r\n```\r\nFatal error. Internal CLR error. (0x80131506)\r\n   at System.Buffer._Memmove(Byte ByRef, Byte ByRef, UIntPtr)\r\n   at System.Runtime.InteropServices.Marshal.CopyToNative[[System.Byte, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](Byte[], Int32, IntPtr, Int32)\r\n   at Program.\u003cMain\u003e$(System.String[])\r\n```\r\n\r\nI don\u0027t see any unhanled ExecutionEngineException.\r\n",
                                           "updatedAt":  "2022-12-20T21:53:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RFaYy",
                                           "createdAt":  "2022-12-20T21:55:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Does Environment.FailFast repro the issue without the debugger?",
                                           "updatedAt":  "2022-12-20T21:55:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RFahC",
                                           "createdAt":  "2022-12-20T21:56:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "It seems 0x80131506 is COR_E_EXECUTIONENGINE",
                                           "updatedAt":  "2022-12-20T21:56:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RFcIj",
                                           "createdAt":  "2022-12-20T22:04:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "Right, but it is not an unhandled exception. It is not clear to me what is the expected behavior in this case. The problem most likely happens due to the fact that the failure address is out of the null reference area, so the AV cannot be translated to NullReferenceException. ",
                                           "updatedAt":  "2022-12-20T22:04:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RFc4Y",
                                           "createdAt":  "2022-12-20T22:07:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCxl3JQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2022-12-20T22:08:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "janvorli",
                                           "body":  "Hmm, actually, the issue is not due to the address not being in the null reference detection area. The failure with size=2049 happens at address 0x20, so it should have been reported as null reference. I\u0027ll investigate it further.",
                                           "updatedAt":  "2022-12-20T22:07:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RFgdD",
                                           "createdAt":  "2022-12-20T22:28:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "It is clear now why the size changes the behavior. For sizes \u003c= 2048, the copying is implemented fully in managed code. For sizes above that, the copying is delegated to the `memcpy` native function.\r\nIf it was using the `JIT_MemCpy`, it would be correctly translated to `NullReferenceException`. It is just a thin wrapper around `memmove`, accessing memory at src and dst so that the AV is triggered in this wrapper. `memcpy` is not recognized in any way, so it is considered to be general runtime code that is not allowed to cause null reference exception, thus the fail fast. We cannot reliably detect that an address is inside of `memcpy` as there are multiple variants that are executed based on the current architecture, block sizes etc. \r\nIt is not clear to me why the managed code doesn\u0027t call `JIT_MemCpy` and calls `memcpy` directly instead.",
                                           "updatedAt":  "2022-12-20T22:28:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RFkSt",
                                           "createdAt":  "2022-12-20T22:49:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "Correction - the managed code calls `__MemMove` QCALL (implemented by `Buffer_MemMove` in the native runtime)  which in turn calls `memmove` which in turn calls `memcpy`.",
                                           "updatedAt":  "2022-12-20T22:49:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RFk67",
                                           "createdAt":  "2022-12-20T22:53:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "It seems that to ensure we are getting `NullReferenceException` even for blocks larger than 2048, we would either need to call `JIT_MemCpy` from the `Buffer_MemMove` or modify the managed System.Buffer._MemMove to access the dst and src before invoking the QCALL.\r\ncc: @jkotas for additional thoughts.",
                                           "updatedAt":  "2022-12-20T22:53:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RGVpT",
                                           "createdAt":  "2022-12-21T00:54:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "`(void*)1` is invalid unmanaged pointer. Operations that end up reading or writing invalid unmanaged pointers have unspecified behavior as I have said in https://github.com/dotnet/runtime/issues/63244#issuecomment-1003649845 . They can throw arbitrary exception, crash with fail fast, silently corrupt process data, ... . \r\n\r\nThe special handling of faults in the page at address zero is internal implementation detail of the runtime that allows JIT to elide explicit null checks in managed code. It is not meant to reliably sanitize accesses of invalid unmanaged pointers that happen to point into the page at address zero.\r\n\r\nI believe that the only problem to solve here is how Visual Studio reports fail fasts. To reproduce the problem, create console app that does just `Environment.FailFast(\"Testing\");` and press F5 in Visual Studio. You will see:\r\n\r\n![image](https://user-images.githubusercontent.com/6668460/208793602-dfbe4b2b-d83f-4244-aba5-9dc72fbcd446.png)\r\n\r\n\"Exception of type \u0027ExecutionEngineException\u0027 was thrown\" message is very confusing. There was no actual ExecutionEngineException thrown, and the [documentation](https://learn.microsoft.com/en-us/dotnet/api/system.executionengineexception) says that the runtime does not raise this exception anymore. \r\n\r\nThe problem with the confusing error message does not reproduce outside debugger. Yes, the error code in the error message is `COR_E_EXECUTIONENGINE` but the error message does not say that there was an `ExecutionEngineException` exception thrown.\r\n\r\nThe VS debugger reports fail fasts in much better way for .NET Framework. For .NET Framework, the debugger displays:\r\n![image](https://user-images.githubusercontent.com/6668460/208794557-7ddfe649-d384-43e3-b52c-a737d1c9abfa.png)\r\nWe have removed Managed Debugging Assistants in .NET Core, so the problem might have been introduced by that.",
                                           "updatedAt":  "2022-12-21T00:54:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RGVt6",
                                           "createdAt":  "2022-12-21T00:54:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nHowever, according to the docs, this one is no longer being raised\r\n\r\n### Reproduction Steps\r\n\r\nRun the following (This reproduces without running under the debugger):\r\n\r\nVariant 1:\r\n```cs\r\nEnvironment.FailFast(\"Testing\");\r\n```\r\n\r\nVariant 2:\r\n```cs\r\nusing System.Runtime.InteropServices;\r\n\r\nvar sectionBytes = new byte[2912012];\r\nvar funcAddr = 1828651008u;\r\nMarshal.Copy(sectionBytes, 0, (IntPtr)funcAddr, sectionBytes.Length);\r\n```\r\n\r\n### Expected behavior\r\n\r\nThere is a reported usage of Environment.FailFast\r\n\r\n### Actual behavior\r\n\r\nAn unhandled ExecutionEngineException is reported.\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n.NET 7.0.100-alpha.1.21568.2\r\nOS: Windows 10 Pro Version 21H1 (Build 19043.1415)\r\nArchitecture: AMD64\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edeeprobin\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `area-VM-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-12-21T00:54:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5R5_9y",
                                           "createdAt":  "2023-01-06T21:33:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODgauMg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2024-05-02T19:01:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mikelle-rogers",
                                           "body":  "This is a result of bad interaction between Visual Studio and the runtime- there is no exception, but the UI makes it look like there is. Prior reporting relied on MDAs (Managed Debugging Assistants), but we do not plan on bringing them back. We will reconsider fixing this issue in a future release.",
                                           "updatedAt":  "2023-01-06T21:33:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58ppiE",
                                           "createdAt":  "2024-05-02T19:01:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODgaydg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkotas",
                                                                               "createdAt":  "2024-05-02T19:10:19Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "colejohnson66",
                                           "body":  "So the issue is a confused debugger?",
                                           "updatedAt":  "2024-05-02T19:01:55Z"
                                       }
                                   ],
                         "totalCount":  33
                     },
        "title":  "Environment.FailFast is reported as ExecutionEngineException",
        "labels":  [
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/63370",
        "createdAt":  "2022-01-04T21:46:20Z",
        "number":  63370,
        "author":  "noahfalk",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-05-17T22:52:56Z",
        "body":  "### Description\n\nIn some cases when a .NET app triggers a stack overflow we deadlock while trying to do our error handling HandleFatalStackOverflow. For many services there are automatic mechanisms to relaunch an app that crashes, but apps which hang are harder to detect and recover so it is greatly prefered for the app to exit. \r\n\r\nThe underlying cause appears to be two conflicting assumptions:\r\n1. Code in the standard exception handling path assumes it is safe to invoke the CRT heap allocator while in co-op mode. That allocator has a lock which could block on another thread.\r\n2. Code in the fatal error handling path assumes that we can reliably do a mode transition after an SO has occured. \r\n\r\nThe most straightforward solution I see so far would be modifying HandleFatalStackOverflow to do a transition from co-op-\u003epreemptive before it invokes DoFavor and then it would never transition back because the function doesn\u0027t return. This would avoid having the Crst inside DoFavor trying to toggle the GC mode.\n\n### Reproduction Steps\n\nI don\u0027t have a repro but we do have stack traces from a dump that do a pretty good job of illustrating the problem:\r\n\r\nThis thread is in cooperative mode and won’t exit cooperative mode until it is able to complete it’s CRT heap allocation\r\n```\r\n  56  Id: 1b320.1bfc4 Suspend: 0 Teb: 000000a6`8afe1000 Unfrozen \"\"\r\n# Child-SP          RetAddr               Call Site\r\n00 000000a6`93a359f8 00007ffe`aa2ddc7d     ntdll!ZwWaitForAlertByThreadId+0x14 [minkernel\\ntdll\\daytona\\objfre\\amd64\\usrstubs.asm @ 4019] \r\n01 000000a6`93a35a00 00007ffe`aa2dd9a1     ntdll!RtlpWaitOnAddressWithTimeout+0x81 [minkernel\\ntos\\rtl\\waitaddr.c @ 851] \r\n02 (Inline Function) --------`--------     ntdll!RtlpWaitOnAddress+0xb7 [minkernel\\ntos\\rtl\\waitaddr.c @ 1094] \r\n03 000000a6`93a35a30 00007ffe`aa2fad6c     ntdll!RtlpWaitOnCriticalSection+0x1a1 [minkernel\\ntos\\rtl\\resource.c @ 1610] \r\n04 000000a6`93a35b30 00007ffe`aa2fabd2     ntdll!RtlpEnterCriticalSectionContended+0x18c [minkernel\\ntos\\rtl\\resource.c @ 2317] \r\n05 000000a6`93a35b90 00007ffe`aa2eef62     ntdll!RtlEnterCriticalSection+0x42 [minkernel\\ntos\\rtl\\resource.c @ 1923] \r\n06 (Inline Function) --------`--------     ntdll!RtlAcquireLockRoutine+0x21 [minkernel\\ntos\\rtl\\heappriv.h @ 383] \r\n07 000000a6`93a35bc0 00007ffe`aa2ef2a4     ntdll!RtlpAllocateUserBlockFromHeap+0x56 [minkernel\\ntos\\rtl\\heaplowf.c @ 557] \r\n08 000000a6`93a35c60 00007ffe`aa2e9ffd     ntdll!RtlpAllocateUserBlock+0x118 [minkernel\\ntos\\rtl\\heaplowf.c @ 810] \r\n09 000000a6`93a35cb0 00007ffe`aa2e916a     ntdll!RtlpLowFragHeapAllocFromContext+0x67d [minkernel\\ntos\\rtl\\heaplowf.c @ 4590] \r\n0a 000000a6`93a35d70 00007ffe`0975ea31     ntdll!RtlpAllocateHeapInternal+0x12a [minkernel\\ntos\\rtl\\heap.c @ 2368] \r\n0b (Inline Function) --------`--------     coreclr!ClrMalloc+0x1e [D:\\workspace\\_work\\1\\s\\src\\coreclr\\src\\utilcode\\clrhost_nodependencies.cpp @ 258]\r\n0c (Inline Function) --------`--------     coreclr!operator new[]+0x1e [D:\\workspace\\_work\\1\\s\\src\\coreclr\\src\\utilcode\\clrhost_nodependencies.cpp @ 382] \r\n0d 000000a6`93a35e70 00007ffe`096fee28     coreclr!StackTraceInfo::AllocateStackTrace+0x31 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\src\\vm\\excep.cpp @ 3302] \r\n0e 000000a6`93a35ea0 00007ffe`096ff027     coreclr!ExceptionTracker::GetOrCreateTracker+0x1d0 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\src\\vm\\exceptionhandling.cpp @ 3858] \r\n0f 000000a6`93a35f30 00007ffe`aa36a94f     coreclr!ProcessCLRException+0x167 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\src\\vm\\exceptionhandling.cpp @ 999] \r\n10 000000a6`93a36160 00007ffe`aa2f61aa     ntdll!RtlpExecuteHandlerForException+0xf [minkernel\\ntos\\rtl\\amd64\\xcptmisc.asm @ 132] \r\n11 000000a6`93a36190 00007ffe`aa2f3331     ntdll!RtlDispatchException+0x25a [minkernel\\ntos\\rtl\\amd64\\exdsptch.c @ 655] \r\n12 000000a6`93a368e0 00007ffe`a78e7d7c     ntdll!RtlRaiseException+0x1f1 [minkernel\\ntos\\rtl\\amd64\\raise.c @ 240] \r\n13 000000a6`93a370c0 00007ffe`09709b46     KERNELBASE!RaiseException+0x6c [minkernel\\kernelbase\\xcpt.c @ 936] \r\n14 000000a6`93a371a0 00007ffe`09709619     coreclr!RaiseTheExceptionInternalOnly+0x29a [D:\\workspace\\_work\\1\\s\\src\\coreclr\\src\\vm\\excep.cpp @ 2806] \r\n15 000000a6`93a372b0 00007ffd`ac391cd0     coreclr!IL_Throw+0xd9 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\src\\vm\\jithelpers.cpp @ 4185] \r\n```\r\n\r\nThis thread is in preemptive mode and is blocked waiting for the GC to complete to do a transition back to co-op, it holds the CRT heap lock\r\n```\r\n  54  Id: 1b320.f04c Suspend: 0 Teb: 000000a6`8aec3000 Unfrozen \"\"\r\n# Child-SP          RetAddr               Call Site\r\n00 000000a6`937316e8 00007ffe`a78d01de     ntdll!ZwWaitForSingleObject+0x14 [minkernel\\ntdll\\daytona\\objfre\\amd64\\usrstubs.asm @ 251] \r\n01 000000a6`937316f0 00007ffe`096fcfd0     KERNELBASE!WaitForSingleObjectEx+0x8e [minkernel\\kernelbase\\synch.c @ 1328] \r\n02 (Inline Function) --------`--------     coreclr!CLREventWaitHelper2+0x6 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\src\\vm\\synch.cpp @ 376] \r\n03 000000a6`93731790 00007ffe`096a54a5     coreclr!CLREventWaitHelper+0x20 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\src\\vm\\synch.cpp @ 401] \r\n04 000000a6`937317f0 00007ffe`097cad0e     coreclr!Thread::RareDisablePreemptiveGC+0x1ad [D:\\workspace\\_work\\1\\s\\src\\coreclr\\src\\vm\\threadsuspend.cpp @ 2387] \r\n05 (Inline Function) --------`--------     coreclr!Thread::DisablePreemptiveGC+0x13f861 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\src\\vm\\threads.h @ 1974] \r\n06 000000a6`93731860 00007ffe`099a6430     coreclr!CrstBase::Enter+0x13f8fe [D:\\workspace\\_work\\1\\s\\src\\coreclr\\src\\vm\\crst.cpp @ 333] \r\n07 (Inline Function) --------`--------     coreclr!CrstBase::AcquireLock+0x8 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\src\\vm\\crst.h @ 187] \r\n08 (Inline Function) --------`--------     coreclr!CrstBase::CrstHolder::{ctor}+0x10 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\src\\vm\\crst.h @ 382] \r\n09 000000a6`93731890 00007ffe`0999a5c6     coreclr!DebuggerRCThread::DoFavor+0x3c [D:\\workspace\\_work\\1\\s\\src\\coreclr\\src\\debug\\ee\\rcthread.cpp @ 1724] \r\n0a 000000a6`93731900 00007ffe`0987d994     coreclr!Debugger::RequestFavor+0x46 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\src\\debug\\ee\\debugger.cpp @ 2461] \r\n0b 000000a6`93731930 00007ffe`0987da84     coreclr!EEPolicy::HandleFatalStackOverflow+0x2a0 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\src\\vm\\eepolicy.cpp @ 692] \r\n0c 000000a6`93731ed0 00007ffe`097ea36c     coreclr!EEPolicy::HandleStackOverflow+0x74 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\src\\vm\\eepolicy.cpp @ 149] \r\n0d 000000a6`93731f10 00007ffe`aa36a94f     coreclr!ProcessCLRException+0xeb4ac [D:\\workspace\\_work\\1\\s\\src\\coreclr\\src\\vm\\exceptionhandling.cpp @ 893] \r\n0e 000000a6`93732140 00007ffe`aa2f61aa     ntdll!RtlpExecuteHandlerForException+0xf [minkernel\\ntos\\rtl\\amd64\\xcptmisc.asm @ 132] \r\n0f 000000a6`93732170 00007ffe`aa36993e     ntdll!RtlDispatchException+0x25a [minkernel\\ntos\\rtl\\amd64\\exdsptch.c @ 655] \r\n10 000000a6`937328c0 00007ffe`aa2e908f     ntdll!KiUserExceptionDispatch+0x2e [minkernel\\ntos\\rtl\\amd64\\trampoln.asm @ 755] \r\n11 000000a6`93732fc0 00007ffe`aa2eef74     ntdll!RtlpAllocateHeapInternal+0x4f [minkernel\\ntos\\rtl\\heap.c @ 2257] \r\n12 000000a6`937330c0 00007ffe`aa2ef2a4     ntdll!RtlpAllocateUserBlockFromHeap+0x68 [minkernel\\ntos\\rtl\\heaplowf.c @ 558]\r\n```\r\n\r\nThis thread is trying to do a GC and is blocked until all threads exit co-op mode:\r\n```\r\n   3  Id: 1b320.30c54 Suspend: 0 Teb: 000000a6`8aebb000 Unfrozen \"\"\r\n# Child-SP          RetAddr               Call Site\r\n00 000000a6`8ba7f178 00007ffe`a78d01de     ntdll!ZwWaitForSingleObject+0x14 [minkernel\\ntdll\\daytona\\objfre\\amd64\\usrstubs.asm @ 251] \r\n01 000000a6`8ba7f180 00007ffe`096fcfd0     KERNELBASE!WaitForSingleObjectEx+0x8e [minkernel\\kernelbase\\synch.c @ 1328] \r\n02 (Inline Function) --------`--------     coreclr!CLREventWaitHelper2+0x6 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\src\\vm\\synch.cpp @ 376] \r\n03 000000a6`8ba7f220 00007ffe`097010a1     coreclr!CLREventWaitHelper+0x20 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\src\\vm\\synch.cpp @ 401] \r\n04 (Inline Function) --------`--------     coreclr!CLREventBase::WaitEx+0xd [D:\\workspace\\_work\\1\\s\\src\\coreclr\\src\\vm\\synch.cpp @ 470] \r\n05 (Inline Function) --------`--------     coreclr!CLREventBase::Wait+0xd [D:\\workspace\\_work\\1\\s\\src\\coreclr\\src\\vm\\synch.cpp @ 416] \r\n06 000000a6`8ba7f280 00007ffe`09755973     coreclr!ThreadSuspend::SuspendRuntime+0x239 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\src\\vm\\threadsuspend.cpp @ 3859] \r\n07 000000a6`8ba7f340 00007ffe`096f30a4     coreclr!ThreadSuspend::SuspendEE+0x283 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\src\\vm\\threadsuspend.cpp @ 6144] \r\n08 (Inline Function) --------`--------     coreclr!GCToEEInterface::SuspendEE+0x26 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\src\\vm\\gcenv.ee.cpp @ 26] \r\n09 000000a6`8ba7f4e0 00007ffe`099671b8     coreclr!WKS::GCHeap::GarbageCollectGeneration+0x154 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\src\\gc\\gc.cpp @ 37714]\r\n```\r\n\r\nIn short thread 3 is waiting on thread 56, 56 is waiting on 54, and 54 is waiting on 3. \r\n\n\n### Expected behavior\n\nStackOverflow error handling completes, the thread exits with an unhandled exception and the app is terminated by the OS.\n\n### Actual behavior\n\nStackOverflow error handling hangs, the app isn\u0027t terminated.\n\n### Regression?\n\nNot that I am aware of\n\n### Known Workarounds\n\nNot that I am aware of\n\n### Configuration\n\nWindows x64, not sure of the coreclr version but the issue is likely present in many versions\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOO-oX-Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc476hf5",
                                           "createdAt":  "2022-01-04T21:52:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nIn some cases when a .NET app triggers a stack overflow we deadlock while trying to do our error handling HandleFatalStackOverflow. For many services there are automatic mechanisms to relaunch an app that crashes, but apps which hang are harder to detect and recover so it is greatly prefered for the app to exit. \r\n\r\nThe underlying cause appears to be two conflicting assumptions:\r\n1. Code in the standard exception handling path assumes it is safe to invoke the CRT heap allocator while in co-op mode. That allocator has a lock which could block on another thread.\r\n2. Code in the fatal error handling path assumes that we can reliably do a mode transition after an SO has occured. \r\n\r\nThe most straightforward solution I see so far would be modifying HandleFatalStackOverflow to do a transition from co-op-\u003epreemptive before it invokes DoFavor and then it would never transition back because the function doesn\u0027t return. This would avoid having the Crst inside DoFavor trying to toggle the GC mode.\n\n### Reproduction Steps\n\nI don\u0027t have a repro but we do have stack traces from a dump that do a pretty good job of illustrating the problem:\r\n\r\nThis thread is in cooperative mode and won’t exit cooperative mode until it is able to complete it’s CRT heap allocation\r\n```\r\n  56  Id: 1b320.1bfc4 Suspend: 0 Teb: 000000a6`8afe1000 Unfrozen \"\"\r\n# Child-SP          RetAddr               Call Site\r\n00 000000a6`93a359f8 00007ffe`aa2ddc7d     ntdll!ZwWaitForAlertByThreadId+0x14 [minkernel\\ntdll\\daytona\\objfre\\amd64\\usrstubs.asm @ 4019] \r\n01 000000a6`93a35a00 00007ffe`aa2dd9a1     ntdll!RtlpWaitOnAddressWithTimeout+0x81 [minkernel\\ntos\\rtl\\waitaddr.c @ 851] \r\n02 (Inline Function) --------`--------     ntdll!RtlpWaitOnAddress+0xb7 [minkernel\\ntos\\rtl\\waitaddr.c @ 1094] \r\n03 000000a6`93a35a30 00007ffe`aa2fad6c     ntdll!RtlpWaitOnCriticalSection+0x1a1 [minkernel\\ntos\\rtl\\resource.c @ 1610] \r\n04 000000a6`93a35b30 00007ffe`aa2fabd2     ntdll!RtlpEnterCriticalSectionContended+0x18c [minkernel\\ntos\\rtl\\resource.c @ 2317] \r\n05 000000a6`93a35b90 00007ffe`aa2eef62     ntdll!RtlEnterCriticalSection+0x42 [minkernel\\ntos\\rtl\\resource.c @ 1923] \r\n06 (Inline Function) --------`--------     ntdll!RtlAcquireLockRoutine+0x21 [minkernel\\ntos\\rtl\\heappriv.h @ 383] \r\n07 000000a6`93a35bc0 00007ffe`aa2ef2a4     ntdll!RtlpAllocateUserBlockFromHeap+0x56 [minkernel\\ntos\\rtl\\heaplowf.c @ 557] \r\n08 000000a6`93a35c60 00007ffe`aa2e9ffd     ntdll!RtlpAllocateUserBlock+0x118 [minkernel\\ntos\\rtl\\heaplowf.c @ 810] \r\n09 000000a6`93a35cb0 00007ffe`aa2e916a     ntdll!RtlpLowFragHeapAllocFromContext+0x67d [minkernel\\ntos\\rtl\\heaplowf.c @ 4590] \r\n0a 000000a6`93a35d70 00007ffe`0975ea31     ntdll!RtlpAllocateHeapInternal+0x12a [minkernel\\ntos\\rtl\\heap.c @ 2368] \r\n0b (Inline Function) --------`--------     coreclr!ClrMalloc+0x1e [D:\\workspace\\_work\\1\\s\\src\\coreclr\\src\\utilcode\\clrhost_nodependencies.cpp @ 258]\r\n0c (Inline Function) --------`--------     coreclr!operator new[]+0x1e [D:\\workspace\\_work\\1\\s\\src\\coreclr\\src\\utilcode\\clrhost_nodependencies.cpp @ 382] \r\n0d 000000a6`93a35e70 00007ffe`096fee28     coreclr!StackTraceInfo::AllocateStackTrace+0x31 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\src\\vm\\excep.cpp @ 3302] \r\n0e 000000a6`93a35ea0 00007ffe`096ff027     coreclr!ExceptionTracker::GetOrCreateTracker+0x1d0 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\src\\vm\\exceptionhandling.cpp @ 3858] \r\n0f 000000a6`93a35f30 00007ffe`aa36a94f     coreclr!ProcessCLRException+0x167 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\src\\vm\\exceptionhandling.cpp @ 999] \r\n10 000000a6`93a36160 00007ffe`aa2f61aa     ntdll!RtlpExecuteHandlerForException+0xf [minkernel\\ntos\\rtl\\amd64\\xcptmisc.asm @ 132] \r\n11 000000a6`93a36190 00007ffe`aa2f3331     ntdll!RtlDispatchException+0x25a [minkernel\\ntos\\rtl\\amd64\\exdsptch.c @ 655] \r\n12 000000a6`93a368e0 00007ffe`a78e7d7c     ntdll!RtlRaiseException+0x1f1 [minkernel\\ntos\\rtl\\amd64\\raise.c @ 240] \r\n13 000000a6`93a370c0 00007ffe`09709b46     KERNELBASE!RaiseException+0x6c [minkernel\\kernelbase\\xcpt.c @ 936] \r\n14 000000a6`93a371a0 00007ffe`09709619     coreclr!RaiseTheExceptionInternalOnly+0x29a [D:\\workspace\\_work\\1\\s\\src\\coreclr\\src\\vm\\excep.cpp @ 2806] \r\n15 000000a6`93a372b0 00007ffd`ac391cd0     coreclr!IL_Throw+0xd9 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\src\\vm\\jithelpers.cpp @ 4185] \r\n```\r\n\r\nThis thread is in preemptive mode and is blocked waiting for the GC to complete to do a transition back to co-op, it holds the CRT heap lock\r\n```\r\n  54  Id: 1b320.f04c Suspend: 0 Teb: 000000a6`8aec3000 Unfrozen \"\"\r\n# Child-SP          RetAddr               Call Site\r\n00 000000a6`937316e8 00007ffe`a78d01de     ntdll!ZwWaitForSingleObject+0x14 [minkernel\\ntdll\\daytona\\objfre\\amd64\\usrstubs.asm @ 251] \r\n01 000000a6`937316f0 00007ffe`096fcfd0     KERNELBASE!WaitForSingleObjectEx+0x8e [minkernel\\kernelbase\\synch.c @ 1328] \r\n02 (Inline Function) --------`--------     coreclr!CLREventWaitHelper2+0x6 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\src\\vm\\synch.cpp @ 376] \r\n03 000000a6`93731790 00007ffe`096a54a5     coreclr!CLREventWaitHelper+0x20 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\src\\vm\\synch.cpp @ 401] \r\n04 000000a6`937317f0 00007ffe`097cad0e     coreclr!Thread::RareDisablePreemptiveGC+0x1ad [D:\\workspace\\_work\\1\\s\\src\\coreclr\\src\\vm\\threadsuspend.cpp @ 2387] \r\n05 (Inline Function) --------`--------     coreclr!Thread::DisablePreemptiveGC+0x13f861 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\src\\vm\\threads.h @ 1974] \r\n06 000000a6`93731860 00007ffe`099a6430     coreclr!CrstBase::Enter+0x13f8fe [D:\\workspace\\_work\\1\\s\\src\\coreclr\\src\\vm\\crst.cpp @ 333] \r\n07 (Inline Function) --------`--------     coreclr!CrstBase::AcquireLock+0x8 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\src\\vm\\crst.h @ 187] \r\n08 (Inline Function) --------`--------     coreclr!CrstBase::CrstHolder::{ctor}+0x10 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\src\\vm\\crst.h @ 382] \r\n09 000000a6`93731890 00007ffe`0999a5c6     coreclr!DebuggerRCThread::DoFavor+0x3c [D:\\workspace\\_work\\1\\s\\src\\coreclr\\src\\debug\\ee\\rcthread.cpp @ 1724] \r\n0a 000000a6`93731900 00007ffe`0987d994     coreclr!Debugger::RequestFavor+0x46 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\src\\debug\\ee\\debugger.cpp @ 2461] \r\n0b 000000a6`93731930 00007ffe`0987da84     coreclr!EEPolicy::HandleFatalStackOverflow+0x2a0 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\src\\vm\\eepolicy.cpp @ 692] \r\n0c 000000a6`93731ed0 00007ffe`097ea36c     coreclr!EEPolicy::HandleStackOverflow+0x74 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\src\\vm\\eepolicy.cpp @ 149] \r\n0d 000000a6`93731f10 00007ffe`aa36a94f     coreclr!ProcessCLRException+0xeb4ac [D:\\workspace\\_work\\1\\s\\src\\coreclr\\src\\vm\\exceptionhandling.cpp @ 893] \r\n0e 000000a6`93732140 00007ffe`aa2f61aa     ntdll!RtlpExecuteHandlerForException+0xf [minkernel\\ntos\\rtl\\amd64\\xcptmisc.asm @ 132] \r\n0f 000000a6`93732170 00007ffe`aa36993e     ntdll!RtlDispatchException+0x25a [minkernel\\ntos\\rtl\\amd64\\exdsptch.c @ 655] \r\n10 000000a6`937328c0 00007ffe`aa2e908f     ntdll!KiUserExceptionDispatch+0x2e [minkernel\\ntos\\rtl\\amd64\\trampoln.asm @ 755] \r\n11 000000a6`93732fc0 00007ffe`aa2eef74     ntdll!RtlpAllocateHeapInternal+0x4f [minkernel\\ntos\\rtl\\heap.c @ 2257] \r\n12 000000a6`937330c0 00007ffe`aa2ef2a4     ntdll!RtlpAllocateUserBlockFromHeap+0x68 [minkernel\\ntos\\rtl\\heaplowf.c @ 558]\r\n```\r\n\r\nThis thread is trying to do a GC and is blocked until all threads exit co-op mode:\r\n```\r\n   3  Id: 1b320.30c54 Suspend: 0 Teb: 000000a6`8aebb000 Unfrozen \"\"\r\n# Child-SP          RetAddr               Call Site\r\n00 000000a6`8ba7f178 00007ffe`a78d01de     ntdll!ZwWaitForSingleObject+0x14 [minkernel\\ntdll\\daytona\\objfre\\amd64\\usrstubs.asm @ 251] \r\n01 000000a6`8ba7f180 00007ffe`096fcfd0     KERNELBASE!WaitForSingleObjectEx+0x8e [minkernel\\kernelbase\\synch.c @ 1328] \r\n02 (Inline Function) --------`--------     coreclr!CLREventWaitHelper2+0x6 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\src\\vm\\synch.cpp @ 376] \r\n03 000000a6`8ba7f220 00007ffe`097010a1     coreclr!CLREventWaitHelper+0x20 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\src\\vm\\synch.cpp @ 401] \r\n04 (Inline Function) --------`--------     coreclr!CLREventBase::WaitEx+0xd [D:\\workspace\\_work\\1\\s\\src\\coreclr\\src\\vm\\synch.cpp @ 470] \r\n05 (Inline Function) --------`--------     coreclr!CLREventBase::Wait+0xd [D:\\workspace\\_work\\1\\s\\src\\coreclr\\src\\vm\\synch.cpp @ 416] \r\n06 000000a6`8ba7f280 00007ffe`09755973     coreclr!ThreadSuspend::SuspendRuntime+0x239 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\src\\vm\\threadsuspend.cpp @ 3859] \r\n07 000000a6`8ba7f340 00007ffe`096f30a4     coreclr!ThreadSuspend::SuspendEE+0x283 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\src\\vm\\threadsuspend.cpp @ 6144] \r\n08 (Inline Function) --------`--------     coreclr!GCToEEInterface::SuspendEE+0x26 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\src\\vm\\gcenv.ee.cpp @ 26] \r\n09 000000a6`8ba7f4e0 00007ffe`099671b8     coreclr!WKS::GCHeap::GarbageCollectGeneration+0x154 [D:\\workspace\\_work\\1\\s\\src\\coreclr\\src\\gc\\gc.cpp @ 37714]\r\n```\r\n\r\nIn short thread 3 is waiting on thread 56, 56 is waiting on 54, and 54 is waiting on 3. \r\n\n\n### Expected behavior\n\nStackOverflow error handling completes, the thread exits with an unhandled exception and the app is terminated by the OS.\n\n### Actual behavior\n\nStackOverflow error handling hangs, the app isn\u0027t terminated.\n\n### Regression?\n\nNot that I am aware of\n\n### Known Workarounds\n\nNot that I am aware of\n\n### Configuration\n\nWindows x64, not sure of the coreclr version but the issue is likely present in many versions\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003enoahfalk\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-01-04T21:52:04Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Deadlock on stack overflow",
        "labels":  [
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/63506",
        "createdAt":  "2022-01-07T17:10:33Z",
        "number":  63506,
        "author":  "tommcdon",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-04-27T21:25:09Z",
        "body":  "Enable debugging ARM64 linux dumps on x64-hosted machines",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPA53yA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc48DnL4",
                                           "createdAt":  "2022-01-07T17:10:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nEnable debugging ARM64 linux dumps on x64-hosted machines\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003etommcdon\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`enhancement`, `area-Diagnostics-coreclr`, `area-Infrastructure-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e7.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-01-07T17:10:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48DnN4",
                                           "createdAt":  "2022-01-07T17:10:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@hoyosjs @mikem8361 ",
                                           "updatedAt":  "2022-01-07T17:10:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48DnZn",
                                           "createdAt":  "2022-01-07T17:11:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Scenario here for me was looking at a dump from a unit test failure on Arm64, without access to Arm64 hardware, using WSL2 because I wanted to get the native frames in lldb as well.",
                                           "updatedAt":  "2022-01-07T17:11:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48DnfI",
                                           "createdAt":  "2022-01-07T17:12:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "one area label or labeler bot gets confused :)",
                                           "updatedAt":  "2022-01-07T17:12:10Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Build x64/arm64 cross-architecture DAC for Linux",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/63838",
        "createdAt":  "2022-01-15T23:38:04Z",
        "number":  63838,
        "author":  "crjc",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-05-17T22:54:49Z",
        "body":  "When a breakpoint is triggered within a custom host on MacOS, a fatal exception is thrown, such as `.NET ThreadPool Worker (12): EXC_BREAKPOINT (code=EXC_I386_BPT, subcode=0x0)`.\r\n\r\nI am unable to test if this issue affects other platforms, so I\u0027m not quite sure if I\u0027m doing something wrong.\r\n\r\n## To reproduce:\r\nI can reproduce this issue with a small modification to the hosting sample at https://github.com/dotnet/samples/tree/main/core/hosting\r\n\r\nSimply update the `Hello` method (https://github.com/dotnet/samples/blob/bbca35a308cdc8eec06c89d29c3b0ee1214b2cb9/core/hosting/src/DotNetLib/Lib.cs#L17) to the following:\r\n```cs\r\npublic static int Hello(IntPtr arg, int argLength)\r\n{\r\n    if (argLength \u003c System.Runtime.InteropServices.Marshal.SizeOf(typeof(LibArgs)))\r\n    {\r\n        return 1;\r\n    }\r\n\r\n    LibArgs libArgs = Marshal.PtrToStructure\u003cLibArgs\u003e(arg);\r\n    Console.WriteLine($\"Hello, world! from {nameof(Lib)} [count: {s_CallCount++}]\");\r\n    PrintLibArgs(libArgs);\r\n\r\n    // added:\r\n    Task.Run(async () =\u003e\r\n    {\r\n        while (true)\r\n        {\r\n            Console.WriteLine(\"Test!\");\r\n            await Task.Delay(10);\r\n        }\r\n    }).Wait();\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\nAfter making the modification, the following steps will trigger the exception:\r\n\r\n1. Run the application so that you can see the console being flooded with \u0027Test!\u0027\r\n2. Open the Lib.cs file in Visual Studio Code \r\n3. Attach the VS Code debugger to the running process\r\n4. Add a breakpoint to the `Console.WriteLine(\"Test!\");` line\r\n5. The application will hit the breakpoint and trigger the fatal exception\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPIa5Dg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc48bO2p",
                                           "createdAt":  "2022-01-15T23:38:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWhen a breakpoint is triggered within a custom host on MacOS, a fatal exception is thrown, such as `.NET ThreadPool Worker (12): EXC_BREAKPOINT (code=EXC_I386_BPT, subcode=0x0)`.\r\n\r\nI am unable to test if this issue affects other platforms, so I\u0027m not quite sure if I\u0027m doing something wrong.\r\n\r\n## To reproduce:\r\nI can reproduce this issue with a small modification to the hosting sample at https://github.com/dotnet/samples/tree/main/core/hosting\r\n\r\nSimply update the `Hello` method (https://github.com/dotnet/samples/blob/bbca35a308cdc8eec06c89d29c3b0ee1214b2cb9/core/hosting/src/DotNetLib/Lib.cs#L17) to the following:\r\n```cs\r\npublic static int Hello(IntPtr arg, int argLength)\r\n{\r\n    if (argLength \u003c System.Runtime.InteropServices.Marshal.SizeOf(typeof(LibArgs)))\r\n    {\r\n        return 1;\r\n    }\r\n\r\n    LibArgs libArgs = Marshal.PtrToStructure\u003cLibArgs\u003e(arg);\r\n    Console.WriteLine($\"Hello, world! from {nameof(Lib)} [count: {s_CallCount++}]\");\r\n    PrintLibArgs(libArgs);\r\n\r\n    // added:\r\n    Task.Run(async () =\u003e\r\n    {\r\n        while (true)\r\n        {\r\n            Console.WriteLine(\"Test!\");\r\n            await Task.Delay(10);\r\n        }\r\n    }).Wait();\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\nAfter making the modification, the following steps will trigger the exception:\r\n\r\n1. Run the application so that you can see the console being flooded with \u0027Test!\u0027\r\n2. Open the Lib.cs file in Visual Studio Code \r\n3. Attach the VS Code debugger to the running process\r\n4. Add a breakpoint to the `Console.WriteLine(\"Test!\");` line\r\n5. The application will hit the breakpoint and trigger the fatal exception\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ecrjc\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-01-15T23:38:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48hrkO",
                                           "createdAt":  "2022-01-18T14:24:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@hoyosjs ",
                                           "updatedAt":  "2022-01-18T14:24:52Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Custom host throws exception when using breakpoints",
        "labels":  [
                       "question",
                       "os-mac-os-x",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/63950",
        "createdAt":  "2022-01-18T19:54:54Z",
        "number":  63950,
        "author":  "josalem",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCqpm_Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pjanotti",
                                            "createdAt":  "2022-05-21T19:12:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jander-msft",
                                            "createdAt":  "2022-09-20T03:34:16Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2022-11-10T15:07:57Z",
        "body":  "This will require changes in the IPC library in src/native/eventpipe as well as the diagnostics client. It will only work in versions of Windows newer than Win 10 1804 (TODO: verify this version). This may cause complications as we can\u0027t enable/disable this based on a RID, e.g., win7. We\u0027ll need some kind of runtime check to determine whether we should use a UDS.\r\n\r\n\r\nCC @dotnet/dotnet-monitor @lateralusX @tommcdon ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOThufXw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc48i58U",
                                           "createdAt":  "2022-01-18T19:54:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThis will require changes in the IPC library in src/native/eventpipe as well as the diagnostics client. It will only work in versions of Windows newer than Win 10 1804 (TODO: verify this version). This may cause complications as we can\u0027t enable/disable this based on a RID, e.g., win7. We\u0027ll need some kind of runtime check to determine whether we should use a UDS.\r\n\r\n\r\nCC @dotnet/dotnet-monitor @lateralusX @tommcdon \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejosalem\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`EventPipe`, `area-Diagnostics-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e7.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-01-18T19:54:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5OG59f",
                                           "createdAt":  "2022-11-10T15:07:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AloisKraus",
                                           "body":  "Is this still on the roadmap? No dot-monitor support for Windows? ETW also does not work. What should one use to monitor not only CPU but also CPU Sampling on Windows Containers which are running in HyperV isolation? ",
                                           "updatedAt":  "2022-11-10T15:07:57Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Explore whether to enable Unix Domain Socket support for Diagnostics Server on Windows",
        "labels":  [
                       "enhancement",
                       "EventPipe",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/64668",
        "createdAt":  "2022-02-02T05:25:11Z",
        "number":  64668,
        "author":  "tristanlabelle",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-05-17T22:56:07Z",
        "body":  "### Description\r\n\r\nI\u0027m P/Invoking the `midiInOpen` Win32 API with a callback delegate, but any breakpoints in the method are ignored when the callback happens on a midi user-mode driver thread (`wdmaud.drv thread`), whereas they work when the method is called on the main thread.\r\n\r\nThis reproes in a Packaged WinUI 3 project but not with a Console project nor with a WPF Core project. It also reproes with the `waveInOpen` APIs, see my comment below for that repro.\r\n\r\n### Reproduction Steps\r\n\r\nRepro project: [MidiBreakpointBugRepro.zip](https://github.com/dotnet/runtime/files/7987399/MidiBreakpointBugRepro.zip)\r\n\r\nPrerequisite: the computer must be connected to a MIDI device such as a digital piano, because the repro uses the `midiInOpen` API, which can only succeed in the presence of such a device.\r\n\r\n- Open Visual Studio 2022\r\n- Create a `Blank App, Packaged (WinUI 3 in Desktop)` project\r\n- Add a NuGet reference to `Microsoft.Windows.CsWin32`\r\n- Add a `NativeMethods.txt` file containing:\r\n\r\n```\r\nmidiInOpen\r\nmidiInStart\r\nLPMIDICALLBACK\r\n```\r\n\r\n- Modify the `App` class with the code below.\r\n- Put a breakpoint at `OnMidiMessage` entry, where indicated by a comment.\r\n- Start debugging.\r\n\r\n```cs\r\nusing Microsoft.UI.Xaml;\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.Runtime.InteropService\r\nusing Windows.Win32.Media.Audio;\r\nusing Windows.Win32.Media.Multimedia;\r\nusing static Windows.Win32.PInvoke;\r\n\r\nnamespace MidiBreakpointBugRepro // Your namespace might be different\r\n{\r\n    public partial class App : Application\r\n    {\r\n        private static readonly LPMIDICALLBACK callback = OnMidiMessage;\r\n\r\n        public App()\r\n        {\r\n            this.InitializeComponent();\r\n        }\r\n\r\n        protected override void OnLaunched(LaunchActivatedEventArgs args)\r\n        {\r\n            var result = midiInOpen(out HMIDIIN handle, uDeviceID: 0,\r\n                dwCallback: (nuint)(nint)Marshal.GetFunctionPointerForDelegate(callback),\r\n                dwInstance: 0, MIDI_WAVE_OPEN_TYPE.CALLBACK_FUNCTION);\r\n            if (result != 0) throw new Exception(\"MIDI input device 0 could not be opened, is a midi device connected?\");\r\n\r\n            result = midiInStart(handle);\r\n            if (result != 0) throw new Exception();\r\n        }\r\n\r\n        private static void OnMidiMessage(HDRVR hdrvr, uint uMsg, nuint dwUser, nuint dw1, nuint dw2)\r\n        { // \u003c-- Put a breakpoint here\r\n            Debugger.Break();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### Expected behavior\r\n\r\nThe breakpoint on `OnMidiMessage` entry and the `Debugger.Break()` both stop execution and highlight the line in source code, whether the callback is called within the `midiInStart` call, on the main thread, or later from the user-mode midi driver thread.\r\n\r\n### Actual behavior\r\n\r\nWhen the callback is called within `midiInStart` on the main thread, both the breakpoint and `Debugger.Break()` stop execution and highlight the source code line.\r\n\r\nWhen the callback is later called from the user-mode midi driver thread (`wdmaud.drv thread`), the method entry breakpoint is not hit and the `Debugger.Break()` stops execution with \"Source not available\" and a call stack showing:\r\n\r\n```\r\n \tntdll.dll!NtWaitForSingleObject\u001e()\tUnknown\r\n \tKernelBase.dll!WaitForSingleObjectEx\u001e()\tUnknown\r\n \tntdll.dll!RtlpCallVectoredHandlers()\tUnknown\r\n \tntdll.dll!RtlDispatchException()\tUnknown\r\n\tntdll.dll!KiUserExceptionDispatch\u001e()\tUnknown\r\n```\r\n\r\nThe net effect is that this function and all of its downstream calls cannot be debugged, except by using printf (`Debug.WriteLine`). It\u0027s like all `int 3`\u0027s had vanished on that thread.\r\n\r\n### Regression?\r\n\r\nRegression from Console or WPF (.net core) app to WinUI 3.0 Packaged app.\r\nLikely regression from .NET Framework.\r\n\r\n### Known Workarounds\r\n\r\nAt times, a combination of `Debug.WriteLine` and `Debugger.Break()` calls seem to revive the debugger on that thread, but it is inconsistent and not production-safe.\r\n\r\n### Configuration\r\n\r\n.NET 6.0.1 (Visual Studio 2022 17.0.5 and 17.1.0 preview 5.0)\r\nWindows 11, version 10.0.22000\r\nReproes when run as x86 and x64 both\r\nDoes not appear to be specific to that configuration\r\n\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPVUqXA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc49P-fS",
                                           "createdAt":  "2022-02-02T05:25:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nI\u0027m P/Invoking the `midiInOpen` Win32 API with a callback delegate, and but any breakpoints in the method are ignored when the callback happens on a midi user-mode driver thread (`wdmaud.drv thread`). This reproes in a WinUI 3 project but not with a Console project.\n\n### Reproduction Steps\n\nPrerequisite: the computer must be connected to a MIDI device such as a digital piano.\r\n\r\n- Open Visual Studio 2022\r\n- Create a `Blank App, Packaged (WinUI 3 in Desktop)` project\r\n- Add a NuGet reference to `Microsoft.Windows.CsWin32`\r\n- Add a `NativeMethods.txt` file containing:\r\n\r\n```\r\nMMSYSERR_NOERROR\r\nmidiInOpen\r\nmidiInStart\r\nMM_MIM_OPEN\r\nLPMIDICALLBACK\r\n```\r\n\r\n- Modify the `App` class with the code below.\r\n- Put a breakpoint at `OnMidiMessage` entry, where indicated by a comment.\r\n- Start debugging.\r\n\r\n```cs\r\n    public partial class App : Application\r\n    {\r\n        private static readonly LPMIDICALLBACK callback = OnMidiMessage;\r\n\r\n        public App()\r\n        {\r\n            this.InitializeComponent();\r\n        }\r\n\r\n        protected override void OnLaunched(LaunchActivatedEventArgs args)\r\n        {\r\n            var result = midiInOpen(out HMIDIIN handle, uDeviceID: 0,\r\n                dwCallback: (nuint)(nint)Marshal.GetFunctionPointerForDelegate(callback),\r\n                dwInstance: 0, MIDI_WAVE_OPEN_TYPE.CALLBACK_FUNCTION);\r\n            if (result != 0) throw new Exception(\"MIDI input device 0 could not be opened, is a midi device connected?\");\r\n\r\n            result = midiInStart(handle);\r\n            if (result != 0) throw new Exception();\r\n        }\r\n\r\n        private static void OnMidiMessage(HDRVR hdrvr, uint uMsg, nuint dwUser, nuint dw1, nuint dw2)\r\n        { // \u003c-- Put a breakpoint here\r\n            Debugger.Break();\r\n        }\r\n    }\r\n```\n\n### Expected behavior\n\nThe breakpoint on `OnMidiMessage` entry and the `Debugger.Break()` both stop execution and highlight the line in source code, whether the callback is called within the `midiInStart` call, on the main thread, or later from the user-mode midi driver thread.\n\n### Actual behavior\n\nWhen the callback is called within `midiInStart` on the main thread, both the breakpoint and `Debugger.Break()` stop execution and highlight the source code line.\r\n\r\nWhen the callback is later called from the user-mode midi driver thread (`wdmaud.drv thread`), the method entry breakpoint is not hit and the `Debugger.Break()` stops execution with \"Source not available\" and a call stack showing `ntdll.dll!_NtWaitForSingleObject@12\u001e()`.\n\n### Regression?\n\nRegression from Console to WinUI 3.0 app.\r\nLikely regression from .NET Framework.\n\n### Known Workarounds\n\nInserting an artificial `Debug.WriteLine` calls seem to fix the debugger from that point on.\n\n### Configuration\n\n.NET 6.0.1 (Visual Studio 2022 17.0.5 and 17.1.0 preview 5.0)\r\nWindows 11, version 10.0.22000\r\nReproes when run as x86 and x64 both\r\nDoes not appear to be specific to that configuration\r\n\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003etristanlabelle\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-02-02T05:25:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49UD4G",
                                           "createdAt":  "2022-02-03T07:07:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@tristanlabelle Thanks for reporting this issue.  I do not have a MIDI device readily available to reproduce the issue.  On an initial look at the problem, the issue appears to be stack inbalance issue caused by incorrect PInvoke signatures.  \r\n\r\nThe [callback](https://docs.microsoft.com/en-us/previous-versions/dd798460(v=vs.85)) function signature for [midiOpenIn](https://docs.microsoft.com/windows/win32/api//mmeapi/nf-mmeapi-midiinopen#parameters) is as follows:\r\n```cpp\r\nvoid CALLBACK MidiInProc(\r\n   HMIDIIN   hMidiIn,\r\n   UINT      wMsg,\r\n   DWORD_PTR dwInstance,\r\n   DWORD_PTR dwParam1,\r\n   DWORD_PTR dwParam2\r\n);\r\n```\r\nCsWin32 code generation expects it to be:\r\n```cs\r\n[UnmanagedFunctionPointerAttribute(CallingConvention.Winapi)]\r\ninternal unsafe delegate void LPMIDICALLBACK(winmdroot.Media.Multimedia.HDRVR hdrvr, uint uMsg, nuint dwUser, nuint dw1, nuint dw2);\r\n```\r\nThe expected parameter type for the first argument is `HMIDIIN` which I believe is typedef\u0027d to `HANDLE`.  Notice `HDRVR` is defined as a struct:  \r\n```cs\r\ninternal readonly partial struct HDRVR : IEquatable\u003cHDRVR\u003e\r\n{\r\n    internal readonly nint Value;\r\n    internal HDRVR(nint value) =\u003e this.Value = value;\r\n    public static implicit operator nint(HDRVR value) =\u003e value.Value;\r\n    public static explicit operator HDRVR(nint value) =\u003e new HDRVR(value);\r\n    public static bool operator ==(HDRVR left, HDRVR right) =\u003e left.Value == right.Value;\r\n    public static bool operator !=(HDRVR left, HDRVR right) =\u003e !(left == right);\r\n\r\n    public bool Equals(HDRVR other) =\u003e this.Value == other.Value;\r\n\r\n    public override bool Equals(object obj) =\u003e obj is HDRVR other \u0026\u0026 this.Equals(other);\r\n\r\n    public override int GetHashCode() =\u003e this.Value.GetHashCode();\r\n}\r\n```\r\nA possible (untested) fix is to write a custom signature for the callback method, for example:\r\n\r\n```cs\r\n[UnmanagedFunctionPointerAttribute(CallingConvention.Winapi)]\r\ninternal unsafe delegate void My_LPMIDICALLBACK(IntPtr hdrvr, uint uMsg, nuint dwUser, nuint dw1, nuint dw2);\r\n\r\nprivate static readonly My_LPMIDICALLBACK callback = OnMidiMessage;\r\n```\r\n\r\nHope this helps!",
                                           "updatedAt":  "2022-02-03T07:07:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49VSpc",
                                           "createdAt":  "2022-02-03T13:28:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tristanlabelle",
                                           "body":  "Hi @tommcdon , we met at Microsoft :)! I tried your suggestion with no luck. I think a bad marshaling would be likely to break the callback no matter which thread it was on, and the code is able to go several frames deep without exploding due to corrupt register contents or something such in my real-life repro.\r\n\r\nI created a new repro using the similar `waveInOpen` API, which should only require a microphone device. Could you give it a try?\r\n\r\n[WaveInBreakpointBugRepro.zip](https://github.com/dotnet/runtime/files/7994891/WaveInBreakpointBugRepro.zip)\r\n\r\n```cs\r\nvar waveFormat = new WAVEFORMATEX\r\n{\r\n    cbSize = (ushort)Unsafe.SizeOf\u003cWAVEFORMATEX\u003e(),\r\n    wFormatTag = (ushort)WAVE_FORMAT_PCM,\r\n    nSamplesPerSec = 22050,\r\n    nChannels = 2,\r\n    wBitsPerSample = 16,\r\n};\r\n\r\nwaveFormat.nBlockAlign = (ushort)(waveFormat.nChannels * waveFormat.wBitsPerSample / 8);\r\nwaveFormat.nAvgBytesPerSec = waveFormat.nBlockAlign * waveFormat.nSamplesPerSec;\r\n\r\nHWAVEIN handle = default;\r\nvar result = waveInOpen(\u0026handle, uDeviceID: WAVE_MAPPER,\r\n    pwfx: in waveFormat,\r\n    dwCallback: (nuint)(nint)Marshal.GetFunctionPointerForDelegate(callback),\r\n    dwInstance: 0, MIDI_WAVE_OPEN_TYPE.CALLBACK_FUNCTION);\r\nif (result != 0) throw new Exception(\"WAVE input device 0 could not be opened, is a microphone connected?\");\r\n\r\nvar waveHdr = (WAVEHDR*)Marshal.AllocHGlobal(Unsafe.SizeOf\u003cWAVEHDR\u003e());\r\n*waveHdr = new WAVEHDR(); // Zero out\r\nwaveHdr-\u003edwBufferLength = waveFormat.nBlockAlign * 1024U;\r\nwaveHdr-\u003elpData = (byte*)Marshal.AllocHGlobal((int)waveHdr-\u003edwBufferLength);\r\nresult = waveInPrepareHeader(handle, waveHdr, (uint)Unsafe.SizeOf\u003cWAVEHDR\u003e());\r\nif (result != 0) throw new Exception();\r\n\r\nresult = waveInAddBuffer(handle, waveHdr, (uint)Unsafe.SizeOf\u003cWAVEHDR\u003e());\r\nif (result != 0) throw new Exception();\r\n\r\nresult = waveInStart(handle);\r\nif (result != 0) throw new Exception();\r\n```\r\n\r\nNativeMethods.txt\r\n```\r\nwaveInOpen\r\nwaveInPrepareHeader\r\nwaveInStart\r\nwaveInAddBuffer\r\nLPWAVECALLBACK\r\nWAVEHDR\r\nWAVE_MAPPER\r\nWAVE_FORMAT_PCM\r\nMIDI_WAVE_OPEN_TYPE\r\n```",
                                           "updatedAt":  "2022-02-03T20:13:21Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Managed debugger does not hit breakpoints on callbacks from native thread",
        "labels":  [
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/65047",
        "createdAt":  "2022-02-09T02:12:35Z",
        "number":  65047,
        "author":  "hoyosjs",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCN41NQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tommcdon",
                                            "createdAt":  "2022-02-09T18:20:01Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2022-02-09T02:13:52Z",
        "body":  "### Description\r\n\r\nThere\u0027s a deadlock in the interaction between the debugger and getting the IL-\u003enative mappings from an R2R imag. Particularly a thread can end up taking the controller lock and try to get information from the R2R info manager for native to IL offsets. If this happens while another thread is suspending we\u0027ll deadlock; the thread retrieving offset information *should* be in COOP mode but we are running in preemptive.\r\n\r\n### Reproduction Steps\r\n\r\nTake the following C# app and mark a breakpoint as denoted by the comment. Step in, and out, and over. Eventually you\u0027ll get to a point where performing an async break (pause) won\u0027t work, the app will be unresponsive, but so will be the debugger. You\u0027ve gotten into a hang on both sides.\r\n\r\n```csharp\r\nList\u003cTask\u003e tasks = new List\u003cTask\u003e();\r\nfor (int i = 0; i \u003c 20; i++)\r\n{\r\n    Task t = Task.Run(async () =\u003e\r\n    {\r\n        CancellationTokenSource cts = new CancellationTokenSource();\r\n        var timer = new System.Threading.Timer(\r\n        (state) =\u003e\r\n        {\r\n            cts.Cancel();\r\n        }, cts, TimeSpan.FromMilliseconds(10), TimeSpan.FromMilliseconds(1));\r\n        await Task.Run(() =\u003e cts.Token.WaitHandle.WaitOne()); // Add breakpoint here\r\n    });\r\n    tasks.Add(t);\r\n}\r\nTask.WaitAll(tasks.ToArray());\r\n```\r\n\r\n### Expected behavior\r\n\r\nThings run appropriately and stepping works.\r\n\r\n### Actual behavior\r\n\r\nA thread tries to notify the debugger of an event. In the process, the prestub for a method forces the code to get loaded from an R2R image. We are creating the DJI representing the method getting loaded and we get to `Debugger::MapAndBindFunctionPatches` where we grab the controller lock and we are trying to map all patches to DJI\u0027s where appropriate. All the functions up to that point are marked `GC_TRIGGERS`, but while resolving IL to native maps, we get to `DebuggerJitInfo::MapILOffsetToMapEntry` where we set `GC_NOTRIGGERS`. Later we get to `ReadyToRunInfo::GetMethodDescForEntryPointInNativeImage` and access `m_entryPointToMethodDescMap` where we end up in `HashMap::LookupValue`. That frame sets up a GCCoopHackNoThread holder with a true conditional which sets `STATIC_CONTRACT_MODE_COOPERATIVE`; all this points that we expect to be in COOP mode. Ironically, the frame that sets up the holder seems to hint that the holder should set up the COOP transition. The holder proved the opposite as `m_WasCoop == false`. Because of this we try toggling the GC from preemptive to cooperative mode and end up in the `DisablePreemptiveGC` -\u003e `RareDisablePreemptiveGC` transition, and within this call, another thread is achieving suspension. This results in a call to `EnablePreemptiveGC` -\u003e `RareEnablePreemptiveGC` to park the thread at a GC safepoint and we end up waiting on the debugger events to be set. We will never set such events because that requires us to finish suspension, but there\u0027s threads that are notifying the CLR of exceptions which require the controller lock they are stuck in COOP mode. See the thread stack with the controller lock followed by an example of a thread that can\u0027t properly suspend:\r\n\r\n```log\r\n0:012\u003e k\r\n # Child-SP          RetAddr               Call Site\r\n...\r\n06 000000aa`99b7d9e0 00007ffe`4931d8b6     coreclr!Thread::WaitSuspendEventsHelper+0xc8 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threadsuspend.cpp @ 4594] \r\n07 (Inline Function) --------`--------     coreclr!Thread::WaitSuspendEvents+0x8 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threadsuspend.cpp @ 4631] \r\n08 000000aa`99b7daa0 00007ffe`491fe3d0     coreclr!Thread::RareEnablePreemptiveGC+0xd6436 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threadsuspend.cpp @ 2409] \r\n09 (Inline Function) --------`--------     coreclr!Thread::EnablePreemptiveGC+0x16 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.h @ 2044] \r\n0a 000000aa`99b7dae0 00007ffe`4923a2fc     coreclr!Thread::RareDisablePreemptiveGC+0xc8 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threadsuspend.cpp @ 2151] \r\n0b (Inline Function) --------`--------     coreclr!Thread::DisablePreemptiveGC+0x1d [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.h @ 1992] \r\n0c (Inline Function) --------`--------     coreclr!GCHolderBase::EnterInternalCoop_HackNoThread+0x15a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.h @ 5402] \r\n0d (Inline Function) --------`--------     coreclr!GCCoopHackNoThread::{ctor}+0x15a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.h @ 5627] \r\n0e 000000aa`99b7db60 00007ffe`4923a0a5     coreclr!HashMap::LookupValue+0x1d4 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\hash.cpp @ 553] \r\n0f (Inline Function) --------`--------     coreclr!PtrHashMap::LookupValue+0x1e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\hash.h @ 597] \r\n10 (Inline Function) --------`--------     coreclr!ReadyToRunInfo::GetMethodDescForEntryPointInNativeImage+0x26 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\readytoruninfo.cpp @ 357] \r\n11 (Inline Function) --------`--------     coreclr!ReadyToRunInfo::GetMethodDescForEntryPoint+0x2d [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\readytoruninfo.cpp @ 65] \r\n12 000000aa`99b7dbf0 00007ffe`4919830e     coreclr!ReadyToRunJitManager::JitCodeToMethodInfo+0x125 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\codeman.cpp @ 6913] \r\n13 000000aa`99b7dc60 00007ffe`4950d261     coreclr!EECodeInfo::Init+0x76 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jitinterface.cpp @ 14919] \r\n14 (Inline Function) --------`--------     coreclr!EECodeInfo::{ctor}+0x14 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\codeman.h @ 1730] \r\n15 000000aa`99b7dca0 00007ffe`49355abf     coreclr!ReadyToRunJitManager::GetBoundariesAndVars+0x21 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\codeman.cpp @ 6802] \r\n16 000000aa`99b7dd30 00007ffe`494ae523     coreclr!DebugInfoManager::GetBoundariesAndVars+0x7b [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\debuginfostore.cpp @ 789] \r\n17 000000aa`99b7dd90 00007ffe`494aeb7a     coreclr!DebuggerJitInfo::LazyInitBounds+0x103 [D:\\a\\_work\\1\\s\\src\\coreclr\\debug\\ee\\functioninfo.cpp @ 924] \r\n18 (Inline Function) --------`--------     coreclr!DebuggerJitInfo::GetSequenceMap+0x5 [D:\\a\\_work\\1\\s\\src\\coreclr\\debug\\ee\\debugger.h @ 1473] \r\n19 000000aa`99b7df30 00007ffe`494aecf3     coreclr!DebuggerJitInfo::MapILOffsetToMapEntry+0x2a [D:\\a\\_work\\1\\s\\src\\coreclr\\debug\\ee\\functioninfo.cpp @ 312] \r\n1a 000000aa`99b7df60 00007ffe`494936c4     coreclr!DebuggerJitInfo::MapILOffsetToNative+0x37 [D:\\a\\_work\\1\\s\\src\\coreclr\\debug\\ee\\functioninfo.cpp @ 382] \r\n1b (Inline Function) --------`--------     coreclr!DebuggerJitInfo::ILToNativeOffsetIterator::Init+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\debug\\ee\\functioninfo.cpp @ 466] \r\n1c (Inline Function) --------`--------     coreclr!DebuggerJitInfo::InitILToNativeOffsetIterator+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\debug\\ee\\functioninfo.cpp @ 363] \r\n1d 000000aa`99b7dfb0 00007ffe`494a4ec6     coreclr!DebuggerController::AddBindAndActivateILSlavePatch+0xac [D:\\a\\_work\\1\\s\\src\\coreclr\\debug\\ee\\controller.cpp @ 1889] \r\n1e 000000aa`99b7e060 00007ffe`494a4ce6     coreclr!Debugger::MapPatchToDJI+0x4a [D:\\a\\_work\\1\\s\\src\\coreclr\\debug\\ee\\debugger.cpp @ 5044] \r\n1f 000000aa`99b7e090 00007ffe`493274f4     coreclr!Debugger::MapAndBindFunctionPatches+0x202 [D:\\a\\_work\\1\\s\\src\\coreclr\\debug\\ee\\debugger.cpp @ 4952] \u003c-- this frame grabs the controller lock\r\n20 000000aa`99b7e110 00007ffe`4917a858     coreclr!Debugger::JITComplete+0xc21f4 [D:\\a\\_work\\1\\s\\src\\coreclr\\debug\\ee\\debugger.cpp @ 2536] \r\n21 000000aa`99b7e150 00007ffe`49174957     coreclr!ReadyToRunInfo::GetEntryPoint+0x1088 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\readytoruninfo.cpp @ 1017] \r\n22 (Inline Function) --------`--------     coreclr!MethodDesc::GetPrecompiledR2RCode+0x8e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 617] \r\n23 (Inline Function) --------`--------     coreclr!MethodDesc::GetPrecompiledCode+0x92 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 470] \r\n24 (Inline Function) --------`--------     coreclr!MethodDesc::PrepareILBasedCode+0x22d [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 420] \r\n25 (Inline Function) --------`--------     coreclr!MethodDesc::PrepareCode+0x22d [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 332] \r\n26 000000aa`99b7e2b0 00007ffe`4917418c     coreclr!CodeVersionManager::PublishVersionableCodeIfNecessary+0x477 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\codeversion.cpp @ 1701] \r\n27 000000aa`99b7e7e0 00007ffe`49173eeb     coreclr!MethodDesc::DoPrestub+0x16c [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 2215] \r\n28 000000aa`99b7e900 00007ffe`492ab275     coreclr!PreStubWorker+0x21b [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 2039]\r\n... \r\n```\r\n\r\n```log\r\n00 000000aa`9aa7e008 00007ffe`ee21d70d     ntdll!ZwWaitForAlertByThreadId+0x14 [minkernel\\ntdll\\daytona\\objfre\\amd64\\usrstubs.asm @ 4019] \r\n01 000000aa`9aa7e010 00007ffe`ee21d431     ntdll!RtlpWaitOnAddressWithTimeout+0x81 [minkernel\\ntos\\rtl\\waitaddr.c @ 851] \r\n02 (Inline Function) --------`--------     ntdll!RtlpWaitOnAddress+0xb7 [minkernel\\ntos\\rtl\\waitaddr.c @ 1094] \r\n03 000000aa`9aa7e040 00007ffe`ee23a5dc     ntdll!RtlpWaitOnCriticalSection+0x1a1 [minkernel\\ntos\\rtl\\resource.c @ 1610] \r\n04 000000aa`9aa7e140 00007ffe`ee23a442     ntdll!RtlpEnterCriticalSectionContended+0x18c [minkernel\\ntos\\rtl\\resource.c @ 2317] \r\n05 000000aa`9aa7e1a0 00007ffe`4917974a     ntdll!RtlEnterCriticalSection+0x42 [minkernel\\ntos\\rtl\\resource.c @ 1923] \r\n06 000000aa`9aa7e1d0 00007ffe`494927d8     coreclr!CrstBase::Enter+0x5a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\crst.cpp @ 328] \r\n07 (Inline Function) --------`--------     coreclr!CrstBase::AcquireLock+0x5 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\crst.h @ 187] \r\n08 (Inline Function) --------`--------     coreclr!CrstBase::CrstHolder::{ctor}+0xf [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\crst.h @ 382] \r\n09 000000aa`9aa7e200 00007ffe`49494c20     coreclr!DebuggerController::ControllerLockHolder::ControllerLockHolder+0x1c [D:\\a\\_work\\1\\s\\src\\coreclr\\debug\\ee\\controller.h @ 1036] \r\n0a 000000aa`9aa7e230 00007ffe`4933e4fd     coreclr!DebuggerController::DispatchExceptionHook+0x34 [D:\\a\\_work\\1\\s\\src\\coreclr\\debug\\ee\\controller.cpp @ 3352] \r\n0b 000000aa`9aa7e280 00007ffe`492a7fee     coreclr!DebuggerController::DispatchNativeException+0x96501 [D:\\a\\_work\\1\\s\\src\\coreclr\\debug\\ee\\controller.cpp @ 4209] \r\n0c 000000aa`9aa7e2d0 00007ffe`49287668     coreclr!Debugger::FirstChanceNativeException+0x5e [D:\\a\\_work\\1\\s\\src\\coreclr\\debug\\ee\\debugger.cpp @ 5574] \r\n0d 000000aa`9aa7e320 00007ffe`4928755d     coreclr!IsDebuggerFault+0x6c [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\excep.cpp @ 6592] \r\n0e 000000aa`9aa7e360 00007ffe`492874a6     coreclr!CLRVectoredExceptionHandlerPhase2+0x91 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\excep.cpp @ 7361] \r\n0f 000000aa`9aa7e3c0 00007ffe`492873aa     coreclr!CLRVectoredExceptionHandler+0xc2 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\excep.cpp @ 7277] \r\n10 000000aa`9aa7e480 00007ffe`ee27bfea     coreclr!CLRVectoredExceptionHandlerShim+0xea [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\excep.cpp @ 8016] \r\n11 000000aa`9aa7e4d0 00007ffe`ee235812     ntdll!RtlpCallVectoredHandlers+0x112 [minkernel\\ntdll\\vectxcpt.c @ 204] \r\n12 (Inline Function) --------`--------     ntdll!RtlCallVectoredExceptionHandlers+0xe [minkernel\\ntdll\\vectxcpt.c @ 358] \r\n13 000000aa`9aa7e570 00007ffe`ee2a730e     ntdll!RtlDispatchException+0x62 [minkernel\\ntos\\rtl\\amd64\\exdsptch.c @ 390] \r\n14 000000aa`9aa7e7c0 00007ffd`e98b7f42     ntdll!KiUserExceptionDispatch+0x2e [minkernel\\ntos\\rtl\\amd64\\trampoln.asm @ 751] \r\n15 000000aa`9aa7f5b0 00007ffe`1f9f9eeb     deadlockTom!ConsoleApp28.Program.\u003c\u003ec.\u003c\u003cMain\u003eb__0_0\u003ed.MoveNext+0x232\r\n16 000000aa`9aa7f6a0 00007ffe`1f9f9fc2     System_Private_CoreLib!System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start+0x36143a1b\r\n17 000000aa`9aa7f700 00007ffd`e98b7053     System_Private_CoreLib!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start+0x3613e0c2\r\n18 000000aa`9aa7f740 00007ffe`1f97ed5f     deadlockTom!ConsoleApp28.Program.\u003c\u003ec.\u003cMain\u003eb__0_0+0xb3\r\n19 000000aa`9aa7f7b0 00007ffe`1f7d6b9f     System_Private_CoreLib!System.Threading.Tasks.Task\u003cSystem.Threading.Tasks.Task\u003e.InnerInvoke+0x2f [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Future.cs @ 503] \r\n1a 000000aa`9aa7f7f0 00007ffe`1f7bccd5     System_Private_CoreLib!System.Threading.Tasks.Task.\u003c\u003ec.\u003c.cctor\u003eb__271_0+0x2f\r\n1b 000000aa`9aa7f820 00007ffe`1f7d1e98     System_Private_CoreLib!System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop+0x35 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs @ 268] \r\n1c 000000aa`9aa7f870 00007ffe`1f7d1da3     System_Private_CoreLib!System.Threading.Tasks.Task.ExecuteWithThreadLocal+0x98 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2331] \r\n1d 000000aa`9aa7f910 00007ffe`1f7d1d4a     System_Private_CoreLib!System.Threading.Tasks.Task.ExecuteEntryUnsafe+0x53 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2271] \r\n1e 000000aa`9aa7f950 00007ffe`1f7c572a     System_Private_CoreLib!System.Threading.Tasks.Task.ExecuteFromThreadPool+0xa [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2256] \r\n1f 000000aa`9aa7f980 00007ffe`1f7cd22a     System_Private_CoreLib!System.Threading.ThreadPoolWorkQueue.Dispatch+0x2ca\r\n20 000000aa`9aa7fa10 00007ffe`1f7b1c6f     System_Private_CoreLib!System.Threading.PortableThreadPool.WorkerThread.WorkerThreadStart+0x14a [/_/src/libraries/System.Private.CoreLib/src/System/Threading/PortableThreadPool.WorkerThread.cs @ 63] \r\n21 000000aa`9aa7fb20 00007ffe`492aa243     System_Private_CoreLib!System.Threading.Thread.StartCallback+0x3f [/_/src/coreclr/System.Private.CoreLib/src/System/Threading/Thread.CoreCLR.cs @ 106] \r\n22 000000aa`9aa7fb60 00007ffe`4919d29c     coreclr!CallDescrWorkerInternal+0x83\r\n23 000000aa`9aa7fba0 00007ffe`4928bb43     coreclr!DispatchCallSimple+0x80 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 220] \r\n24 000000aa`9aa7fc30 00007ffe`491f84c5     coreclr!ThreadNative::KickOffThread_Worker+0x63 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158] \r\n25 (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7317] \r\n26 000000aa`9aa7fc90 00007ffe`491f83ca     coreclr!ManagedThreadBase_DispatchMiddle+0x85 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7361] \r\n27 000000aa`9aa7fd70 00007ffe`491f81e9     coreclr!ManagedThreadBase_DispatchOuter+0xae [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7520] \r\n28 (Inline Function) --------`--------     coreclr!ManagedThreadBase_FullTransition+0x2d [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7565] \r\n29 (Inline Function) --------`--------     coreclr!ManagedThreadBase::KickOff+0x2d [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7600] \r\n2a 000000aa`9aa7fe10 00007ffe`ec5954e0     coreclr!ThreadNative::KickOffThread+0x79 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230] \r\n2b 000000aa`9aa7fe70 00007ffe`ee20485b     kernel32!BaseThreadInitThunk+0x10 [clientcore\\base\\win32\\client\\thread.c @ 75] \r\n2c 000000aa`9aa7fea0 00000000`00000000     ntdll!RtlUserThreadStart+0x2b [minkernel\\ntdll\\rtlstrt.c @ 1152] \r\n```\r\n\r\n### Regression?\r\n\r\nExists since at least 5.0 and there\u0027s no report in the wild yet. \r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n6.0.0 x64 windows\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPZZfwg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc49ll_C",
                                           "createdAt":  "2022-02-09T02:12:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nThere\u0027s a deadlock in the interaction between the debugger and getting the IL-\u003enative mappings from an R2R imag. Particularly a thread can end up taking the controller lock and try to get information from the R2R info manager for native to IL offsets. If this happens while another thread is suspending we\u0027ll deadlock; the thread retrieving offset information *should* be in COOP mode but we are running in preemptive.\n\n### Reproduction Steps\n\nTake the following C# app and mark a breakpoint as denoted by the comment. Step in, and out, and over. Eventually you\u0027ll get to a point where performing an async break (pause) won\u0027t work, the app will be unresponsive, but so will be the debugger. You\u0027ve gotten into a hang on both sides.\r\n\r\n```csharp\r\nList\u003cTask\u003e tasks = new List\u003cTask\u003e();\r\nfor (int i = 0; i \u003c 20; i++)\r\n{\r\n    Task t = Task.Run(async () =\u003e\r\n    {\r\n        CancellationTokenSource cts = new CancellationTokenSource();\r\n        var timer = new System.Threading.Timer(\r\n        (state) =\u003e\r\n        {\r\n            cts.Cancel();\r\n        }, cts, TimeSpan.FromMilliseconds(10), TimeSpan.FromMilliseconds(1));\r\n        await Task.Run(() =\u003e cts.Token.WaitHandle.WaitOne()); // Add breakpoint here\r\n    });\r\n    tasks.Add(t);\r\n}\r\nTask.WaitAll(tasks.ToArray());\r\n```\n\n### Expected behavior\n\nThings run appropriately and stepping works.\n\n### Actual behavior\n\nA thread tries to notify the debugger of an event. In the process, the prestub for a method forces the code to get loaded from an R2R image. We are creating the DJI representing the method getting loaded and we get to `Debugger::MapAndBindFunctionPatches` where we grab the controller lock and we are trying to map all patches to DJI\u0027s where appropriate. All the functions up to that point are marked `GC_TRIGGERS`, but while resolving IL to native maps, we get to `DebuggerJitInfo::MapILOffsetToMapEntry` where we set `GC_NOTRIGGERS`. Later we get to `ReadyToRunInfo::GetMethodDescForEntryPointInNativeImage` and access `m_entryPointToMethodDescMap` where we end up in `HashMap::LookupValue`. That frame sets up a GCCoopHackNoThread holder with a true conditional which sets `STATIC_CONTRACT_MODE_COOPERATIVE`; all this points that we expect to be in COOP mode. Ironically, the frame that sets up the holder seems to hint that the holder should set up the COOP transition. The holder proved the opposite as `m_WasCoop == false`. Because of this we try toggling the GC from preemptive to cooperative mode and end up in the `DisablePreemptiveGC` -\u003e `RareDisablePreemptiveGC` transition, and within this call, another thread is achieving suspension. This results in a call to `EnablePreemptiveGC` -\u003e `RareEnablePreemptiveGC` to park the thread at a GC safepoint and we end up waiting on the debugger events to be set. We will never set such events because that requires us to finish suspension, but there\u0027s threads that are notifying the CLR of exceptions which require the controller lock they are stuck in COOP mode. See the thread stack with the controller lock followed by an example of a thread that can\u0027t properly suspend:\r\n\r\n```log\r\n0:012\u003e k\r\n # Child-SP          RetAddr               Call Site\r\n...\r\n06 000000aa`99b7d9e0 00007ffe`4931d8b6     coreclr!Thread::WaitSuspendEventsHelper+0xc8 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threadsuspend.cpp @ 4594] \r\n07 (Inline Function) --------`--------     coreclr!Thread::WaitSuspendEvents+0x8 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threadsuspend.cpp @ 4631] \r\n08 000000aa`99b7daa0 00007ffe`491fe3d0     coreclr!Thread::RareEnablePreemptiveGC+0xd6436 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threadsuspend.cpp @ 2409] \r\n09 (Inline Function) --------`--------     coreclr!Thread::EnablePreemptiveGC+0x16 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.h @ 2044] \r\n0a 000000aa`99b7dae0 00007ffe`4923a2fc     coreclr!Thread::RareDisablePreemptiveGC+0xc8 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threadsuspend.cpp @ 2151] \r\n0b (Inline Function) --------`--------     coreclr!Thread::DisablePreemptiveGC+0x1d [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.h @ 1992] \r\n0c (Inline Function) --------`--------     coreclr!GCHolderBase::EnterInternalCoop_HackNoThread+0x15a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.h @ 5402] \r\n0d (Inline Function) --------`--------     coreclr!GCCoopHackNoThread::{ctor}+0x15a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.h @ 5627] \r\n0e 000000aa`99b7db60 00007ffe`4923a0a5     coreclr!HashMap::LookupValue+0x1d4 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\hash.cpp @ 553] \r\n0f (Inline Function) --------`--------     coreclr!PtrHashMap::LookupValue+0x1e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\hash.h @ 597] \r\n10 (Inline Function) --------`--------     coreclr!ReadyToRunInfo::GetMethodDescForEntryPointInNativeImage+0x26 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\readytoruninfo.cpp @ 357] \r\n11 (Inline Function) --------`--------     coreclr!ReadyToRunInfo::GetMethodDescForEntryPoint+0x2d [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\readytoruninfo.cpp @ 65] \r\n12 000000aa`99b7dbf0 00007ffe`4919830e     coreclr!ReadyToRunJitManager::JitCodeToMethodInfo+0x125 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\codeman.cpp @ 6913] \r\n13 000000aa`99b7dc60 00007ffe`4950d261     coreclr!EECodeInfo::Init+0x76 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jitinterface.cpp @ 14919] \r\n14 (Inline Function) --------`--------     coreclr!EECodeInfo::{ctor}+0x14 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\codeman.h @ 1730] \r\n15 000000aa`99b7dca0 00007ffe`49355abf     coreclr!ReadyToRunJitManager::GetBoundariesAndVars+0x21 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\codeman.cpp @ 6802] \r\n16 000000aa`99b7dd30 00007ffe`494ae523     coreclr!DebugInfoManager::GetBoundariesAndVars+0x7b [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\debuginfostore.cpp @ 789] \r\n17 000000aa`99b7dd90 00007ffe`494aeb7a     coreclr!DebuggerJitInfo::LazyInitBounds+0x103 [D:\\a\\_work\\1\\s\\src\\coreclr\\debug\\ee\\functioninfo.cpp @ 924] \r\n18 (Inline Function) --------`--------     coreclr!DebuggerJitInfo::GetSequenceMap+0x5 [D:\\a\\_work\\1\\s\\src\\coreclr\\debug\\ee\\debugger.h @ 1473] \r\n19 000000aa`99b7df30 00007ffe`494aecf3     coreclr!DebuggerJitInfo::MapILOffsetToMapEntry+0x2a [D:\\a\\_work\\1\\s\\src\\coreclr\\debug\\ee\\functioninfo.cpp @ 312] \r\n1a 000000aa`99b7df60 00007ffe`494936c4     coreclr!DebuggerJitInfo::MapILOffsetToNative+0x37 [D:\\a\\_work\\1\\s\\src\\coreclr\\debug\\ee\\functioninfo.cpp @ 382] \r\n1b (Inline Function) --------`--------     coreclr!DebuggerJitInfo::ILToNativeOffsetIterator::Init+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\debug\\ee\\functioninfo.cpp @ 466] \r\n1c (Inline Function) --------`--------     coreclr!DebuggerJitInfo::InitILToNativeOffsetIterator+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\debug\\ee\\functioninfo.cpp @ 363] \r\n1d 000000aa`99b7dfb0 00007ffe`494a4ec6     coreclr!DebuggerController::AddBindAndActivateILSlavePatch+0xac [D:\\a\\_work\\1\\s\\src\\coreclr\\debug\\ee\\controller.cpp @ 1889] \r\n1e 000000aa`99b7e060 00007ffe`494a4ce6     coreclr!Debugger::MapPatchToDJI+0x4a [D:\\a\\_work\\1\\s\\src\\coreclr\\debug\\ee\\debugger.cpp @ 5044] \r\n1f 000000aa`99b7e090 00007ffe`493274f4     coreclr!Debugger::MapAndBindFunctionPatches+0x202 [D:\\a\\_work\\1\\s\\src\\coreclr\\debug\\ee\\debugger.cpp @ 4952] \u003c-- this frame grabs the controller lock\r\n20 000000aa`99b7e110 00007ffe`4917a858     coreclr!Debugger::JITComplete+0xc21f4 [D:\\a\\_work\\1\\s\\src\\coreclr\\debug\\ee\\debugger.cpp @ 2536] \r\n21 000000aa`99b7e150 00007ffe`49174957     coreclr!ReadyToRunInfo::GetEntryPoint+0x1088 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\readytoruninfo.cpp @ 1017] \r\n22 (Inline Function) --------`--------     coreclr!MethodDesc::GetPrecompiledR2RCode+0x8e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 617] \r\n23 (Inline Function) --------`--------     coreclr!MethodDesc::GetPrecompiledCode+0x92 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 470] \r\n24 (Inline Function) --------`--------     coreclr!MethodDesc::PrepareILBasedCode+0x22d [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 420] \r\n25 (Inline Function) --------`--------     coreclr!MethodDesc::PrepareCode+0x22d [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 332] \r\n26 000000aa`99b7e2b0 00007ffe`4917418c     coreclr!CodeVersionManager::PublishVersionableCodeIfNecessary+0x477 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\codeversion.cpp @ 1701] \r\n27 000000aa`99b7e7e0 00007ffe`49173eeb     coreclr!MethodDesc::DoPrestub+0x16c [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 2215] \r\n28 000000aa`99b7e900 00007ffe`492ab275     coreclr!PreStubWorker+0x21b [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 2039]\r\n... \r\n```\r\n\r\n```log\r\n00 000000aa`9aa7e008 00007ffe`ee21d70d     ntdll!ZwWaitForAlertByThreadId+0x14 [minkernel\\ntdll\\daytona\\objfre\\amd64\\usrstubs.asm @ 4019] \r\n01 000000aa`9aa7e010 00007ffe`ee21d431     ntdll!RtlpWaitOnAddressWithTimeout+0x81 [minkernel\\ntos\\rtl\\waitaddr.c @ 851] \r\n02 (Inline Function) --------`--------     ntdll!RtlpWaitOnAddress+0xb7 [minkernel\\ntos\\rtl\\waitaddr.c @ 1094] \r\n03 000000aa`9aa7e040 00007ffe`ee23a5dc     ntdll!RtlpWaitOnCriticalSection+0x1a1 [minkernel\\ntos\\rtl\\resource.c @ 1610] \r\n04 000000aa`9aa7e140 00007ffe`ee23a442     ntdll!RtlpEnterCriticalSectionContended+0x18c [minkernel\\ntos\\rtl\\resource.c @ 2317] \r\n05 000000aa`9aa7e1a0 00007ffe`4917974a     ntdll!RtlEnterCriticalSection+0x42 [minkernel\\ntos\\rtl\\resource.c @ 1923] \r\n06 000000aa`9aa7e1d0 00007ffe`494927d8     coreclr!CrstBase::Enter+0x5a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\crst.cpp @ 328] \r\n07 (Inline Function) --------`--------     coreclr!CrstBase::AcquireLock+0x5 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\crst.h @ 187] \r\n08 (Inline Function) --------`--------     coreclr!CrstBase::CrstHolder::{ctor}+0xf [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\crst.h @ 382] \r\n09 000000aa`9aa7e200 00007ffe`49494c20     coreclr!DebuggerController::ControllerLockHolder::ControllerLockHolder+0x1c [D:\\a\\_work\\1\\s\\src\\coreclr\\debug\\ee\\controller.h @ 1036] \r\n0a 000000aa`9aa7e230 00007ffe`4933e4fd     coreclr!DebuggerController::DispatchExceptionHook+0x34 [D:\\a\\_work\\1\\s\\src\\coreclr\\debug\\ee\\controller.cpp @ 3352] \r\n0b 000000aa`9aa7e280 00007ffe`492a7fee     coreclr!DebuggerController::DispatchNativeException+0x96501 [D:\\a\\_work\\1\\s\\src\\coreclr\\debug\\ee\\controller.cpp @ 4209] \r\n0c 000000aa`9aa7e2d0 00007ffe`49287668     coreclr!Debugger::FirstChanceNativeException+0x5e [D:\\a\\_work\\1\\s\\src\\coreclr\\debug\\ee\\debugger.cpp @ 5574] \r\n0d 000000aa`9aa7e320 00007ffe`4928755d     coreclr!IsDebuggerFault+0x6c [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\excep.cpp @ 6592] \r\n0e 000000aa`9aa7e360 00007ffe`492874a6     coreclr!CLRVectoredExceptionHandlerPhase2+0x91 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\excep.cpp @ 7361] \r\n0f 000000aa`9aa7e3c0 00007ffe`492873aa     coreclr!CLRVectoredExceptionHandler+0xc2 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\excep.cpp @ 7277] \r\n10 000000aa`9aa7e480 00007ffe`ee27bfea     coreclr!CLRVectoredExceptionHandlerShim+0xea [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\excep.cpp @ 8016] \r\n11 000000aa`9aa7e4d0 00007ffe`ee235812     ntdll!RtlpCallVectoredHandlers+0x112 [minkernel\\ntdll\\vectxcpt.c @ 204] \r\n12 (Inline Function) --------`--------     ntdll!RtlCallVectoredExceptionHandlers+0xe [minkernel\\ntdll\\vectxcpt.c @ 358] \r\n13 000000aa`9aa7e570 00007ffe`ee2a730e     ntdll!RtlDispatchException+0x62 [minkernel\\ntos\\rtl\\amd64\\exdsptch.c @ 390] \r\n14 000000aa`9aa7e7c0 00007ffd`e98b7f42     ntdll!KiUserExceptionDispatch+0x2e [minkernel\\ntos\\rtl\\amd64\\trampoln.asm @ 751] \r\n15 000000aa`9aa7f5b0 00007ffe`1f9f9eeb     deadlockTom!ConsoleApp28.Program.\u003c\u003ec.\u003c\u003cMain\u003eb__0_0\u003ed.MoveNext+0x232\r\n16 000000aa`9aa7f6a0 00007ffe`1f9f9fc2     System_Private_CoreLib!System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start+0x36143a1b\r\n17 000000aa`9aa7f700 00007ffd`e98b7053     System_Private_CoreLib!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start+0x3613e0c2\r\n18 000000aa`9aa7f740 00007ffe`1f97ed5f     deadlockTom!ConsoleApp28.Program.\u003c\u003ec.\u003cMain\u003eb__0_0+0xb3\r\n19 000000aa`9aa7f7b0 00007ffe`1f7d6b9f     System_Private_CoreLib!System.Threading.Tasks.Task\u003cSystem.Threading.Tasks.Task\u003e.InnerInvoke+0x2f [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Future.cs @ 503] \r\n1a 000000aa`9aa7f7f0 00007ffe`1f7bccd5     System_Private_CoreLib!System.Threading.Tasks.Task.\u003c\u003ec.\u003c.cctor\u003eb__271_0+0x2f\r\n1b 000000aa`9aa7f820 00007ffe`1f7d1e98     System_Private_CoreLib!System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop+0x35 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs @ 268] \r\n1c 000000aa`9aa7f870 00007ffe`1f7d1da3     System_Private_CoreLib!System.Threading.Tasks.Task.ExecuteWithThreadLocal+0x98 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2331] \r\n1d 000000aa`9aa7f910 00007ffe`1f7d1d4a     System_Private_CoreLib!System.Threading.Tasks.Task.ExecuteEntryUnsafe+0x53 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2271] \r\n1e 000000aa`9aa7f950 00007ffe`1f7c572a     System_Private_CoreLib!System.Threading.Tasks.Task.ExecuteFromThreadPool+0xa [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2256] \r\n1f 000000aa`9aa7f980 00007ffe`1f7cd22a     System_Private_CoreLib!System.Threading.ThreadPoolWorkQueue.Dispatch+0x2ca\r\n20 000000aa`9aa7fa10 00007ffe`1f7b1c6f     System_Private_CoreLib!System.Threading.PortableThreadPool.WorkerThread.WorkerThreadStart+0x14a [/_/src/libraries/System.Private.CoreLib/src/System/Threading/PortableThreadPool.WorkerThread.cs @ 63] \r\n21 000000aa`9aa7fb20 00007ffe`492aa243     System_Private_CoreLib!System.Threading.Thread.StartCallback+0x3f [/_/src/coreclr/System.Private.CoreLib/src/System/Threading/Thread.CoreCLR.cs @ 106] \r\n22 000000aa`9aa7fb60 00007ffe`4919d29c     coreclr!CallDescrWorkerInternal+0x83\r\n23 000000aa`9aa7fba0 00007ffe`4928bb43     coreclr!DispatchCallSimple+0x80 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 220] \r\n24 000000aa`9aa7fc30 00007ffe`491f84c5     coreclr!ThreadNative::KickOffThread_Worker+0x63 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158] \r\n25 (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7317] \r\n26 000000aa`9aa7fc90 00007ffe`491f83ca     coreclr!ManagedThreadBase_DispatchMiddle+0x85 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7361] \r\n27 000000aa`9aa7fd70 00007ffe`491f81e9     coreclr!ManagedThreadBase_DispatchOuter+0xae [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7520] \r\n28 (Inline Function) --------`--------     coreclr!ManagedThreadBase_FullTransition+0x2d [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7565] \r\n29 (Inline Function) --------`--------     coreclr!ManagedThreadBase::KickOff+0x2d [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7600] \r\n2a 000000aa`9aa7fe10 00007ffe`ec5954e0     coreclr!ThreadNative::KickOffThread+0x79 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230] \r\n2b 000000aa`9aa7fe70 00007ffe`ee20485b     kernel32!BaseThreadInitThunk+0x10 [clientcore\\base\\win32\\client\\thread.c @ 75] \r\n2c 000000aa`9aa7fea0 00000000`00000000     ntdll!RtlUserThreadStart+0x2b [minkernel\\ntdll\\rtlstrt.c @ 1152] \r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n6.0.0 x64 windows\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ehoyosjs\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-02-09T02:12:39Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Debugger deadlock: Controller lock taken under R2R info loading results in suspension deadlock",
        "labels":  [
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/66000",
        "createdAt":  "2022-03-01T12:06:48Z",
        "number":  66000,
        "author":  "rakista112",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-05-17T22:59:36Z",
        "body":  "### Description\n\nWe\u0027re getting a CoCreateInstance error when trying to load the profiler in my NetCore 3.0 app.\r\n\n\n### Reproduction Steps\n\n1. Build coreclr in docker with `FROM mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.15-20211214164127-f0ea7ba` as  base image\r\n2. use the release from https://codeload.github.com/dotnet/coreclr/tar.gz/release/3.0\r\n3. add these statements in the docker file  \r\n`RUN cd /code/coreclr/src/pal/src/libunwind/src/mi/ \u0026\u0026 sed -i \u002728d\u0027 dyn-info-list.c`\r\n`RUN cd /code/coreclr \u0026\u0026 ./build.sh x64 release configureonly skipgenerateversion nopgooptimize skiptests`\r\n`RUN cd /code/coreclr/bin/obj/Linux.x64.Release/src/pal \u0026\u0026 make`\r\n\r\n4. Set CORECLR_ENABLE_PROFILING, CORECLR_PROFILER and CORECLR_PROFILER_PATH environment variables\r\n\r\n5. build your profiler with that library.\r\n6. Run the net core 3.0 application\r\n\r\n\r\n\n\n### Expected behavior\n\nThe profiler should attach and create logs\n\n### Actual behavior\n\nThis error is printed when the application runs.\r\n`Loading profiler failed during CoCreateInstance. Profiler CLSID: \u0027{************}\u0027. HRESULT: 0x8007007e.  Process ID (decimal): 161. Message ID: [0x2504]..NET Core SDK (3.1.416)`\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.net version: 3.1.416\r\nAlpine \r\nx86_64\r\nI don\u0027t know\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOQQEp8Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc4-57VE",
                                           "createdAt":  "2022-03-01T12:06:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nWe\u0027re getting a CoCreateInstance error when trying to load the profiler in my NetCore 3.0 app.\r\n\n\n### Reproduction Steps\n\n1. Build coreclr in docker with `FROM mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.15-20211214164127-f0ea7ba` as  base image\r\n2. use the release from https://codeload.github.com/dotnet/coreclr/tar.gz/release/3.0\r\n3. add these statements in the docker file  \r\n`RUN cd /code/coreclr/src/pal/src/libunwind/src/mi/ \u0026\u0026 sed -i \u002728d\u0027 dyn-info-list.c`\r\n`RUN cd /code/coreclr \u0026\u0026 ./build.sh x64 release configureonly skipgenerateversion nopgooptimize skiptests`\r\n`RUN cd /code/coreclr/bin/obj/Linux.x64.Release/src/pal \u0026\u0026 make`\r\n\r\n4. Set CORECLR_ENABLE_PROFILING, CORECLR_PROFILER and CORECLR_PROFILER_PATH environment variables\r\n\r\n5. build your profiler with that library.\r\n6. Run the net core 3.0 application\r\n\r\n\r\n\n\n### Expected behavior\n\nThe profiler should attach and create logs\n\n### Actual behavior\n\nThis error is printed when the application runs.\r\n`Loading profiler failed during CoCreateInstance. Profiler CLSID: \u0027{************}\u0027. HRESULT: 0x8007007e.  Process ID (decimal): 161. Message ID: [0x2504]..NET Core SDK (3.1.416)`\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.net version: 3.1.416\r\nAlpine \r\nx86_64\r\nI don\u0027t know\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003erakista112\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-03-01T12:06:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-6Fm6",
                                           "createdAt":  "2022-03-01T12:55:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rakista112",
                                           "body":  "\r\nWhen I run it with strace, I see these errors before it writes the cocreate instance error\r\n`open(\"/lib/libuuid.so.1\", O_RDONLY|O_LARGEFILE|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\nopen(\"/usr/local/lib/libuuid.so.1\", O_RDONLY|O_LARGEFILE|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\nopen(\"/usr/lib/libuuid.so.1\", O_RDONLY|O_LARGEFILE|O_CLOEXEC) = -1 ENOENT (No such file or directory)`\r\n`open(\"/usr/share/locale/en_US.UTF-8/LC_MESSAGES/messages.mo\", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)\r\nopen(\"/usr/share/locale/en_US.utf8/LC_MESSAGES/messages.mo\", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)\r\nopen(\"/usr/share/locale/en_US/LC_MESSAGES/messages.mo\", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)\r\nopen(\"/usr/share/locale/en.UTF-8/LC_MESSAGES/messages.mo\", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)\r\nopen(\"/usr/share/locale/en.utf8/LC_MESSAGES/messages.mo\", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)\r\nopen(\"/usr/share/locale/en/LC_MESSAGES/messages.mo\", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)`\r\n\r\nI fixed the uuid ones by running `apk add libuuid` but I don\u0027t know where to get the `messages.mo` files",
                                           "updatedAt":  "2022-03-01T12:55:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_A5N6",
                                           "createdAt":  "2022-03-02T17:39:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@davmason ",
                                           "updatedAt":  "2022-03-02T17:39:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_BbNa",
                                           "createdAt":  "2022-03-02T20:16:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davmason",
                                           "body":  "Hi @rakista112,\r\n\r\nI am not familiar with that particular messages.mo file. This type of error is usually caused by your profiler having a dependency at build time that is unsatisfied at run time. It may be worthwhile to check your profiler build system to see what libraries you are building against, and making sure that all of those are installed in the container.\r\n\r\nFrom searching around, it might be gettext or msgfmt, but I can\u0027t find anything definitive. ",
                                           "updatedAt":  "2022-03-02T20:16:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_WU1m",
                                           "createdAt":  "2022-03-09T11:18:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rakista112",
                                           "body":  "@davmason I tried installing gettext and still got the same messages. here\u0027s the full strace logs of just running an application `strace -o strace_logs.txt dotnet AspNetCoreWebApp.dll`, if it helps\r\n[strace_logs.txt](https://github.com/dotnet/runtime/files/8214160/strace_logs.txt)\r\n",
                                           "updatedAt":  "2022-03-09T11:18:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ACp9v",
                                           "createdAt":  "2022-03-21T21:27:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davmason",
                                           "body":  "Hi again @rakista112,\r\n\r\nI am not sure how to help effectively here. The messages.mo is not provided as part of the runtime, it is something that is linked during the build process for the profiler you are trying to load.\r\n\r\nYou either have to find the library that provides it and install it on the target system, or statically link dependencies for the profiler",
                                           "updatedAt":  "2022-03-21T21:27:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5A-tJd",
                                           "createdAt":  "2022-04-06T11:51:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rakista112",
                                           "body":  "Okay, thanks I\u0027ll check my libraries/dependecies. I have a dependency on Boost 1.76 and coreclr PAL. ",
                                           "updatedAt":  "2022-04-06T11:51:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5A_Jfm",
                                           "createdAt":  "2022-04-06T13:49:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Just curious, why does it say CoCreateInstance when there is no COM on this platform - should that message be changed?",
                                           "updatedAt":  "2022-04-06T13:49:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BAOo0",
                                           "createdAt":  "2022-04-06T18:11:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "The hresult `0x8007007e` is `ERROR_MOD_NOT_FOUND` - `The specified module could not be found`.  And the error \"Loading profiler failed during CoCreateInstance..\" is `IDS_E_PROF_CCI_FAILED`: https://github.com/dotnet/runtime/blob/135e566b1fd4712c57f62e89234fca6fb2e5d674/src/coreclr/dlls/mscorrc/mscorrc.rc#L732\r\n\r\nThere error seems to be reported here: https://github.com/dotnet/runtime/blob/abb7df59eb4f8c813c07ddd6f46f94e59604577d/src/coreclr/vm/eetoprofinterfaceimpl.cpp#L321\r\n\r\nHope this helps!",
                                           "updatedAt":  "2022-04-06T18:11:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BAQRO",
                                           "createdAt":  "2022-04-06T18:18:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "On non-Windows, we still use a CLSID to instantiate the profiler, but it\u0027s an opaque GUID, and we handle it all ourselves? If that\u0027s the case, should we call these something different than a CLSID? ",
                                           "updatedAt":  "2022-04-06T18:18:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BAQdx",
                                           "createdAt":  "2022-04-06T18:19:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "\u003e Just curious, why does it say CoCreateInstance when there is no COM on this platform - should that message be changed?\r\n\u003e On non-Windows, we still use a CLSID to instantiate the profiler, but it\u0027s an opaque GUID, and we handle it all ourselves? If that\u0027s the case, should we call these something different than a CLSID?\r\n\r\nI agree the message is confusing for x-plat scenarios.  It probably should say \"Loading profiler failed\" and instead of providing a CLSID it should provide the path.\r\n\r\nThe runtime implements a function called \"FakeCoCreateInstance\" which provides a cross-plat friendly mechanism for the profiler:\r\nhttps://github.com/dotnet/runtime/blob/d94ca5706c95b950719155905ec9a2d889160cbc/src/coreclr/utilcode/util.cpp#L233-L273",
                                           "updatedAt":  "2022-04-06T18:19:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BASnx",
                                           "createdAt":  "2022-04-06T18:28:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "\u003e On non-Windows, we still use a CLSID to instantiate the profiler, but it\u0027s an opaque GUID, and we handle it all ourselves? \r\n\r\nI believe we still use the CLSID in profiler class factory\u0027s CreateInstance call- \r\n- https://docs.microsoft.com/en-us/dotnet/core/runtime-config/debugging-profiling#profiler-location\r\n- https://github.com/dotnet/runtime/blob/main/docs/design/coreclr/profiling/Profiler%20Loading.md\r\n\r\n",
                                           "updatedAt":  "2022-04-06T18:28:47Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "Getting \"Loading profiler failed during CoCreateInstance\" error building on Alpine",
        "labels":  [
                       "area-Diagnostics-coreclr",
                       "os-alpine"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/66238",
        "createdAt":  "2022-03-05T11:51:48Z",
        "number":  66238,
        "author":  "namazso",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-05-17T23:53:32Z",
        "body":  "In https://github.com/dotnet/runtime/blob/main/src/coreclr/unwinder/amd64/unwinder_amd64.cpp the `UnwindEpilogue` function may not work on functions where no volatile registers are saved but RFLAGS is. An example of such a function would be `KiSetAddressPolicy` from ntoskrnl, or you can just make one on your own:\r\n\r\n```\r\ntestfn PROC FRAME\r\n    pushfq\r\n    .allocstack 8\r\n    nop\r\n    .beginepilog\r\n    pop rcx\r\n    ret\r\ntestfn ENDP\r\n```\r\n\r\nUnwinding this with rip pointing at the pop instruction will fail.\r\n\r\nAccording to the comment in the function this is a valid canonical epilog, however this part: https://github.com/dotnet/runtime/blob/main/src/coreclr/unwinder/amd64/unwinder_amd64.cpp#L515-L516 will skip the 8 byte stack allocation when looking for push opcodes.\r\n\r\nNote that this file says `Everything below is borrowed from minkernel\\ntos\\rtl\\amd64\\exdsptch.c file from Windows` a few lines before the bug, so I suspect this might be a Windows bug. Not sure where I should report this, but this repo has the buggy code so I thought it\u0027d be appropriate.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOQ1GtrA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc4_Kn7c",
                                           "createdAt":  "2022-03-05T11:51:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nIn https://github.com/dotnet/runtime/blob/main/src/coreclr/unwinder/amd64/unwinder_amd64.cpp the `UnwindEpilogue` function may not work on functions where no volatile registers are saved but RFLAGS is. An example of such a function would be `KiSetAddressPolicy` from ntoskrnl, or you can just make one on your own:\r\n\r\n```\r\ntestfn PROC FRAME\r\n    pushfq\r\n    .allocstack 8\r\n    nop\r\n    .beginepilog\r\n    pop rcx\r\n    ret\r\ntestfn ENDP\r\n```\r\n\r\nUnwinding this with rip pointing at the pop instruction will fail.\r\n\r\nAccording to the comment in the function this is a valid canonical epilog, however this part: https://github.com/dotnet/runtime/blob/main/src/coreclr/unwinder/amd64/unwinder_amd64.cpp#L515-L516 will skip the 8 byte stack allocation when looking for push opcodes.\r\n\r\nNote that this file says `Everything below is borrowed from minkernel\\ntos\\rtl\\amd64\\exdsptch.c file from Windows` a few lines before the bug, so I suspect this might be a Windows bug. Not sure where I should report this, but this repo has the buggy code so I thought it\u0027d be appropriate.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003enamazso\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-03-05T11:51:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_K_sO",
                                           "createdAt":  "2022-03-05T23:05:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@hoyosjs ",
                                           "updatedAt":  "2022-03-05T23:05:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_n3WH",
                                           "createdAt":  "2022-03-14T23:40:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@namazso The comment says that the case you have mentioned should be handled by the UWOP_ALLOC_SMALL 8: https://github.com/dotnet/runtime/blob/917a0b1bfce3d664fe46587faceb056bca8936f6/src/coreclr/unwinder/amd64/unwinder_amd64.cpp#L586-L600. Have you tried to step through the unwinder code to see where it fails?",
                                           "updatedAt":  "2022-03-14T23:40:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_n4fT",
                                           "createdAt":  "2022-03-14T23:50:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "namazso",
                                           "body":  "@janvorli It would, if the code earlier: https://github.com/dotnet/runtime/blob/917a0b1bfce3d664fe46587faceb056bca8936f6/src/coreclr/unwinder/amd64/unwinder_amd64.cpp#L513-L522 \r\nwouldn\u0027t already skip it (as there are no push opcodes). it increments FirstPushIndex past the ALLOC_SMALL. Then that value is ised to initialize Index: https://github.com/dotnet/runtime/blob/917a0b1bfce3d664fe46587faceb056bca8936f6/src/coreclr/unwinder/amd64/unwinder_amd64.cpp#L557 so here `Index \u003c CountOfCodes` fails: https://github.com/dotnet/runtime/blob/917a0b1bfce3d664fe46587faceb056bca8936f6/src/coreclr/unwinder/amd64/unwinder_amd64.cpp#L591\r\n\r\nI\u0027ll check again tomorrow to make sure though \r\n",
                                           "updatedAt":  "2022-03-14T23:52:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DUUqv",
                                           "createdAt":  "2022-05-17T23:01:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@janvorli is this something we should fix outside of diagnostic scenarios for 7.0?",
                                           "updatedAt":  "2022-05-17T23:01:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DUa2s",
                                           "createdAt":  "2022-05-17T23:51:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "namazso",
                                           "body":  "Oh wow i totally forgot that tomorrow thing. Anyways..\r\n\r\n@tommcdon  Probably no. In fact this only affects handwritten assembly, or functions that use the __getcallerseflags intrinsic, neither of which happens here. I was emulating prologs and epilogs of ntoskrnl for checking my implementation of a sanity checker that was based on the code here, and ran into this. Simply opened the bug because the code is just not correct, or at the very least not in sync with what its comments tell and MSVC does.",
                                           "updatedAt":  "2022-05-17T23:51:40Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Epilog unwinding code may fail in certain cases",
        "labels":  [
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/66649",
        "createdAt":  "2022-03-15T10:12:42Z",
        "number":  66649,
        "author":  "hakenr",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-05-17T23:03:25Z",
        "body":  "### Description\n\nnet6 (6.0.101) ASP.NET Core application, running in Azure App Service (Windows) with Azure Application Insights\r\nseveral times a day there is a request which hangs for tens of seconds (times out)\r\nthe Application Insights profiler shows 10+ sec waiting times in `CodeVersionManager::LockHolder` when JITing dynamic code (EFCore lambdas, Newtonsoft.Json, etc.), usually in `LambdaCompiler.Compile`:\r\n![image](https://user-images.githubusercontent.com/12828888/158353452-8f5ee45d-cb7a-4077-96fe-6ef383306f3f.png)\r\n![image](https://user-images.githubusercontent.com/12828888/158353477-374f5578-2ab3-417d-b2d6-64b7a6b974b5.png)\r\n\r\nIt seems there is a situation where the `CodeVersionManager::LockHolder` is not able to obtain the lock and times-out.\r\nhttps://github.com/dotnet/coreclr/blob/a9f3fc16483eecfc47fb79c362811d870be02249/src/vm/jitinterface.cpp#L8091-L8102\n\n### Reproduction Steps\n\nUnfortunately, I\u0027m not able to provide simple repro.\r\nIt seems it is a combination of Application Insights Profiler + LambdaCompiler.Compile.\n\n### Expected behavior\n\nQuick LambdaCompiler.Compile run.\n\n### Actual behavior\n\n LambdaCompiler.Compile() takes more than 10 sec in some cases.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nDisabling the Application Insights Profiler will probably help (will confirm later).\n\n### Configuration\n\n_No response_\n\n### Other information\n\nYou can download the .diagsessions here: https://drive.google.com/drive/folders/1mpWkhgGf5R-29Cdvf3XFnH1Aka-OCRZJ?usp=sharing\r\n\r\nI will try to gather a memory dump from that very specific moment. Will upload later.\r\n\r\ncc @jkotas",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOQN6Rew==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc4_pU1E",
                                           "createdAt":  "2022-03-15T10:12:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nnet6 (6.0.101) ASP.NET Core application, running in Azure App Service (Windows) with Azure Application Insights\r\nseveral times a day there is a request which hangs for tens of seconds (times out)\r\nthe Application Insights profiler shows 10+ sec waiting times in `CodeVersionManager::LockHolder` when JITing dynamic code (EFCore lambdas, Newtonsoft.Json, etc.), usually in `LambdaCompiler.Compile`:\r\n![image](https://user-images.githubusercontent.com/12828888/158353452-8f5ee45d-cb7a-4077-96fe-6ef383306f3f.png)\r\n![image](https://user-images.githubusercontent.com/12828888/158353477-374f5578-2ab3-417d-b2d6-64b7a6b974b5.png)\r\n\r\nIt seems there is a situation where the `CodeVersionManager::LockHolder` is not able to obtain the lock and times-out.\r\nhttps://github.com/dotnet/coreclr/blob/a9f3fc16483eecfc47fb79c362811d870be02249/src/vm/jitinterface.cpp#L8091-L8102\n\n### Reproduction Steps\n\nUnfortunately, I\u0027m not able to provide simple repro.\r\nIt seems it is a combination of Application Insights Profiler + LambdaCompiler.Compile.\n\n### Expected behavior\n\nQuick LambdaCompiler.Compile run.\n\n### Actual behavior\n\n LambdaCompiler.Compile() takes more than 10 sec in some cases.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nDisabling the Application Insights Profiler will probably help (will confirm later).\n\n### Configuration\n\n_No response_\n\n### Other information\n\nYou can download the .diagsessions here: https://drive.google.com/drive/folders/1mpWkhgGf5R-29Cdvf3XFnH1Aka-OCRZJ?usp=sharing\r\n\r\nI will try to gather a memory dump from that very specific moment. Will upload later.\r\n\r\ncc @jkotas\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ehakenr\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-03-15T10:12:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_pnIq",
                                           "createdAt":  "2022-03-15T11:22:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @JulieLeeMSFT\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nnet6 (6.0.101) ASP.NET Core application, running in Azure App Service (Windows) with Azure Application Insights\r\nseveral times a day there is a request which hangs for tens of seconds (times out)\r\nthe Application Insights profiler shows 10+ sec waiting times in `CodeVersionManager::LockHolder` when JITing dynamic code (EFCore lambdas, Newtonsoft.Json, etc.), usually in `LambdaCompiler.Compile`:\r\n![image](https://user-images.githubusercontent.com/12828888/158353452-8f5ee45d-cb7a-4077-96fe-6ef383306f3f.png)\r\n![image](https://user-images.githubusercontent.com/12828888/158353477-374f5578-2ab3-417d-b2d6-64b7a6b974b5.png)\r\n\r\nIt seems there is a situation where the `CodeVersionManager::LockHolder` is not able to obtain the lock and times-out.\r\nhttps://github.com/dotnet/coreclr/blob/a9f3fc16483eecfc47fb79c362811d870be02249/src/vm/jitinterface.cpp#L8091-L8102\n\n### Reproduction Steps\n\nUnfortunately, I\u0027m not able to provide simple repro.\r\nIt seems it is a combination of Application Insights Profiler + LambdaCompiler.Compile.\n\n### Expected behavior\n\nQuick LambdaCompiler.Compile run.\n\n### Actual behavior\n\n LambdaCompiler.Compile() takes more than 10 sec in some cases.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nDisabling the Application Insights Profiler will probably help (will confirm later).\n\n### Configuration\n\n_No response_\n\n### Other information\n\nYou can download the .diagsessions here: https://drive.google.com/drive/folders/1mpWkhgGf5R-29Cdvf3XFnH1Aka-OCRZJ?usp=sharing\r\n\r\nI will try to gather a memory dump from that very specific moment. Will upload later.\r\n\r\ncc @jkotas\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ehakenr\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-CodeGen-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-03-15T11:22:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_pzbr",
                                           "createdAt":  "2022-03-15T12:21:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nnet6 (6.0.101) ASP.NET Core application, running in Azure App Service (Windows) with Azure Application Insights\r\nseveral times a day there is a request which hangs for tens of seconds (times out)\r\nthe Application Insights profiler shows 10+ sec waiting times in `CodeVersionManager::LockHolder` when JITing dynamic code (EFCore lambdas, Newtonsoft.Json, etc.), usually in `LambdaCompiler.Compile`:\r\n![image](https://user-images.githubusercontent.com/12828888/158353452-8f5ee45d-cb7a-4077-96fe-6ef383306f3f.png)\r\n![image](https://user-images.githubusercontent.com/12828888/158353477-374f5578-2ab3-417d-b2d6-64b7a6b974b5.png)\r\n\r\nIt seems there is a situation where the `CodeVersionManager::LockHolder` is not able to obtain the lock and times-out.\r\nhttps://github.com/dotnet/coreclr/blob/a9f3fc16483eecfc47fb79c362811d870be02249/src/vm/jitinterface.cpp#L8091-L8102\n\n### Reproduction Steps\n\nUnfortunately, I\u0027m not able to provide simple repro.\r\nIt seems it is a combination of Application Insights Profiler + LambdaCompiler.Compile.\n\n### Expected behavior\n\nQuick LambdaCompiler.Compile run.\n\n### Actual behavior\n\n LambdaCompiler.Compile() takes more than 10 sec in some cases.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nDisabling the Application Insights Profiler will probably help (will confirm later).\n\n### Configuration\n\n_No response_\n\n### Other information\n\nYou can download the .diagsessions here: https://drive.google.com/drive/folders/1mpWkhgGf5R-29Cdvf3XFnH1Aka-OCRZJ?usp=sharing\r\n\r\nI will try to gather a memory dump from that very specific moment. Will upload later.\r\n\r\ncc @jkotas\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ehakenr\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `area-TieredCompilation-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-03-15T12:21:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_pzyy",
                                           "createdAt":  "2022-03-15T12:22:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Looks like a deadlock in ReJIT. cc @noahfalk @kouvel ",
                                           "updatedAt":  "2022-03-15T12:22:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_qmeU",
                                           "createdAt":  "2022-03-15T15:36:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@josalem @davmason ",
                                           "updatedAt":  "2022-03-15T15:37:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_63K_",
                                           "createdAt":  "2022-03-18T13:09:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hakenr",
                                           "body":  "Unfortunately, we were unable to take a proper memory dump to show the problem.\r\nOn the other hand, I can confirm that after disabling the Azure Application Insights Profiler, the problem completely disappeared.",
                                           "updatedAt":  "2022-03-18T13:09:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5AmA7z",
                                           "createdAt":  "2022-03-30T22:40:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davmason",
                                           "body":  "@hakenr is disabling Application Insights a suitable workaround for you? \r\n\r\nI am surprised to see this deadlock, it essentially means that two separate threads are jitting methods and their inlining decisions are deadlocked on each other. Without a dump it\u0027s hard to reason about.\r\n\r\nI wonder if another thread is involved somehow, maybe an orphaned lock? A dump would be the way to make progress",
                                           "updatedAt":  "2022-03-30T22:40:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5An6Dj",
                                           "createdAt":  "2022-03-31T07:33:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hakenr",
                                           "body":  "@davmason Yes, disabling Application Insights (just the AI Profiler) is acceptable for us and all the issues disappeared right after that.\r\n\r\nI\u0027d be happy to get you the memory dump, but I haven\u0027t been successful so far and would need help with it. So far I\u0027ve tried setting up an [Azure AppService Auto-Healing rule](https://azure-advice.com/2020/11/19/using-auto-heal-to-capture-memory-dumps-for-slow-requests/) that would catch the dump on a single long-running request, but it didn\u0027t create any dumps.\r\n\r\nI can see using `procdump` directly from the AppService console as another option, but I would need help defining parameters that would catch the dump at the right time. For example, some kind of breakpoint?",
                                           "updatedAt":  "2022-03-31T07:33:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ArRUM",
                                           "createdAt":  "2022-03-31T20:40:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davmason",
                                           "body":  "If you can use procdump you have these options for triggers, do any of them catch the issue? Hopefully the low CPU one is applicable.\r\n\r\n```\r\n-C: Trigger core dump generation when CPU exceeds or equals specified value (0 to 100 * nCPU)\r\n-c: Trigger core dump generation when CPU is less than specified value (0 to 100 * nCPU)\r\n-M: Trigger core dump generation when memory commit limit exceeds or equals specified value (MB)\r\n-m: Trigger core dump generation when memory commit limit is less than specified value (MB)\r\n-T: Trigger core dump generation when thread count exceeds or equals specified value.\r\n-F: Trigger core dump generation when filedescriptor count exceeds or equals specified value.\r\n```\r\n\r\nWe also would need a full memory dump (-ma). Hopefully something like this would catch it.\r\n\r\n`procdump -p \u003cpid\u003e -s 5 -c 50 -ma`.\r\n\r\nThat would wait for the process to have less than (50/NumCores)% CPU usage for 5 seconds before collecting a dump. I just guessed at the CPU usage, you may have to tweak it.",
                                           "updatedAt":  "2022-03-31T20:40:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5A0VCP",
                                           "createdAt":  "2022-04-04T11:52:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hakenr",
                                           "body":  "@davmason, unfortunately, I think none of these generic conditions is applicable. It is a ASP.NET Core LOB application and the \"low CPU\" limit will be met most of the time.\r\n\r\nCurrently the most promising condition is \"long request duration\" where there will be some extra dumps but among them there should be those catching the issue. But I don\u0027t see such a condition in procdump.\r\n\r\nAnother option might a specific breakpoint, but as it is a deadlock I\u0027m not sure we will be able to find a point which will be specific enough.\r\n",
                                           "updatedAt":  "2022-04-04T11:52:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5A2e7q",
                                           "createdAt":  "2022-04-04T21:20:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davmason",
                                           "body":  "I can\u0027t think of any breakpoints that would catch the deadlock out of the box, but we could probably construct something.\r\n\r\nIt should be possible to create one though, I\u0027m imagining something like your UI thread updates a timestamp every time it goes through the message loop, and a background thread checks the timestamp and triggers a breakpoint if it\u0027s been too long. ",
                                           "updatedAt":  "2022-04-04T21:20:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5A3pF7",
                                           "createdAt":  "2022-04-05T06:48:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hakenr",
                                           "body":  "Interesting idea. I should be able to create the dump directly from my code, so I just need help figuring out the conditions under which it should occur.",
                                           "updatedAt":  "2022-04-05T06:48:09Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "[JIT] CodeVersionManager::LockHolder lock(Profiler ReJIT?)",
        "labels":  [
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/66653",
        "createdAt":  "2022-03-15T13:23:03Z",
        "number":  66653,
        "author":  "ww898",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCTJPUw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Wraith2",
                                            "createdAt":  "2022-03-15T18:06:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "teo-tsirpanis",
                                            "createdAt":  "2022-03-16T07:19:31Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2022-03-16T08:28:01Z",
        "body":  "Our customers are frequently asking us in which assembly load context the assembly was loaded. The profiling API doesn\u0027t allow to associate assembly load context name+id and loaded assembly in this moment. Could you please extend the API?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOP7WELw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc4_qCEM",
                                           "createdAt":  "2022-03-15T13:23:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nOur customers are frequently asking us in which assembly load context the assembly was loaded. The profiling API doesn\u0027t allow to associate assembly load context name+id and loaded assembly int this moment. Could you please extend the API?\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eww898\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-AssemblyLoader-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-03-15T13:23:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_qak2",
                                           "createdAt":  "2022-03-15T14:56:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nOur customers are frequently asking us in which assembly load context the assembly was loaded. The profiling API doesn\u0027t allow to associate assembly load context name+id and loaded assembly in this moment. Could you please extend the API?\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eww898\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-AssemblyLoader-coreclr`, `area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-03-15T14:56:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_tFQs",
                                           "createdAt":  "2022-03-16T06:29:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "@davmason ",
                                           "updatedAt":  "2022-03-16T06:29:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_tYQv",
                                           "createdAt":  "2022-03-16T08:28:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davmason",
                                           "body":  "Hi @ww898,\r\n\r\nI think adding ALC information to the profiling APIs is a good idea, but currently our work for .net 7 is already planned. This is on our backlog now but I do not know when it will get scheduled.\r\n\r\nAs always, we are happy to take community contributions. This would require some design work so please reach have a conversation if you decide to go that route.",
                                           "updatedAt":  "2022-03-16T08:28:01Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Ability to collect infromation about an assembly load context in profiling API",
        "labels":  [
                       "area-Diagnostics-coreclr",
                       "feature-request"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/67760",
        "createdAt":  "2022-04-08T15:10:04Z",
        "number":  67760,
        "author":  "sgmunn",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-05-17T23:05:07Z",
        "body":  "### Description\n\nWriting a Xamarin.mac app that does not show in the Dock using \r\n\r\n`LSUIElement=true` or `NSApplication.SharedApplication.ActivationPolicy = NSApplicationActivationPolicy.Accessory` \r\n\r\nresults in an application that does not generate crash dumps with createdump, nor can it handle signals via `PosixSignalRegistration.Create(PosixSignal.SIGTERM, SignalReceived);`\n\n### Reproduction Steps\n\nI tried to repro this using dotnet new macOS, but I couldn\u0027t get past a build bug with lipo returning 137. I converted a legacy Xamarin.Mac app instead.\r\n\r\n1. File | New | Cocoa app in VS Mac\r\n2. rewrite the csproj with the following\r\n\r\n```\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cLangVersion\u003eLatest\u003c/LangVersion\u003e\r\n    \u003cAutoGenerateBindingRedirects\u003efalse\u003c/AutoGenerateBindingRedirects\u003e\r\n    \u003cConfiguration Condition=\"$(Configuration) == \u0027\u0027\"\u003eDebug\u003c/Configuration\u003e\r\n    \u003cPlatformTarget Condition=\"$(PlatformTarget) == \u0027\u0027\"\u003eAnyCPU\u003c/PlatformTarget\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cTargetFramework\u003enet6.0-macos\u003c/TargetFramework\u003e\r\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n    \u003cRuntimeIdentifiers\u003eosx-x64;osx-arm64\u003c/RuntimeIdentifiers\u003e\r\n    \u003cUseMonoRuntime\u003efalse\u003c/UseMonoRuntime\u003e\r\n    \u003cLinkMode\u003eSdkOnly\u003c/LinkMode\u003e\r\n\r\n    \u003cSupportedOSPlatformVersion\u003e10.15\u003c/SupportedOSPlatformVersion\u003e\r\n    \u003cMonoMacResourcePrefix\u003eResources\u003c/MonoMacResourcePrefix\u003e\r\n\r\n    \u003cMonoBundlingExtraArgs\u003e--setenv:COMPlus_CreateDumpDiagnostics=1 --setenv:COMPlus_DbgEnableMiniDump=1 --setenv:COMPlus_EnableCrashReport=1 --setenv:COMPlus_EnableDumpOnSigTerm=1 --marshal-objectivec-exceptions=throwmanagedexception --marshal-managed-exceptions=throwobjectivecexception --package-debug-symbols:true\u003c/MonoBundlingExtraArgs\u003e\r\n  \u003c/PropertyGroup\u003e\r\n  \r\n\u003c/Project\u003e\r\n```\r\n\r\n3. In ViewController.cs, change the signature of the constructor to use NativeHandle instead of IntPtr\r\n4. Build and run\r\n5. Force quit the app, you should see a crash report writing to %tmpdir% and the output from createdump in the application output pad in vsmac.\r\n6. Edit Info.plist and add the following\r\n\r\n```\r\n\u003ckey\u003eLSUIElement\u003c/key\u003e\r\n\u003cstring\u003e1\u003c/string\u003e\t\r\n```\r\n\r\n7. rebuild and run\r\n8. Force quit again, this time you will not see a core dump and no output from createdump in the application output pad.\r\n\r\nSimilarly, you can swap step 6 for adding \r\n\r\n```\r\nNSApplication.SharedApplication.ActivationPolicy = NSApplicationActivationPolicy.Accessory\r\n```\r\n\r\nin the AppDelegate in DidFinishLaunching and get the same results. One note though, I did get a core dump about 2 times out of 10 or so. \r\n\r\nAlso, hooking up a signal handler like `PosixSignalRegistration.Create(PosixSignal.SIGTERM, SignalReceived);` would work/not work in the same manner.\r\n\r\n\n\n### Expected behavior\n\ncreatedump should produce a core dump when a signal is sent to the process regardless of LSUIElement or ActivationPolicy settings\n\n### Actual behavior\n\ncreatedump only produced a core dump if LSUIElement is false / 0, ActivationPolicy = Regular.\n\n### Regression?\n\nDon\u0027t think so\n\n### Known Workarounds\n\nNone\n\n### Configuration\n\n6.02 servicing builds for vsmac.\r\n\r\n```\r\n  \u003cItemGroup\u003e\r\n    \u003cFrameworkReference Update=\"Microsoft.NETCore.App\" RuntimeFrameworkVersion=\"6.0.2-servicing.1.22101.5\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n```\r\n\r\nworkloadVersion = \"12.1.301-preview.13.4\"\r\n\r\nRunning on macOS 12.3.1 Arm64, although I am pretty sure this also fails on x64.\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOQlG4wQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5BJXo2",
                                           "createdAt":  "2022-04-08T15:10:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nWriting a Xamarin.mac app that does not show in the Dock using \r\n\r\n`LSUIElement=true` or `NSApplication.SharedApplication.ActivationPolicy = NSApplicationActivationPolicy.Accessory` \r\n\r\nresults in an application that does not generate crash dumps with createdump, nor can it handle signals via `PosixSignalRegistration.Create(PosixSignal.SIGTERM, SignalReceived);`\n\n### Reproduction Steps\n\nI tried to repro this using dotnet new macOS, but I couldn\u0027t get past a build bug with lipo returning 137. I converted a legacy Xamarin.Mac app instead.\r\n\r\n1. File | New | Cocoa app in VS Mac\r\n2. rewrite the csproj with the following\r\n\r\n```\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cLangVersion\u003eLatest\u003c/LangVersion\u003e\r\n    \u003cAutoGenerateBindingRedirects\u003efalse\u003c/AutoGenerateBindingRedirects\u003e\r\n    \u003cConfiguration Condition=\"$(Configuration) == \u0027\u0027\"\u003eDebug\u003c/Configuration\u003e\r\n    \u003cPlatformTarget Condition=\"$(PlatformTarget) == \u0027\u0027\"\u003eAnyCPU\u003c/PlatformTarget\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cTargetFramework\u003enet6.0-macos\u003c/TargetFramework\u003e\r\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n    \u003cRuntimeIdentifiers\u003eosx-x64;osx-arm64\u003c/RuntimeIdentifiers\u003e\r\n    \u003cUseMonoRuntime\u003efalse\u003c/UseMonoRuntime\u003e\r\n    \u003cLinkMode\u003eSdkOnly\u003c/LinkMode\u003e\r\n\r\n    \u003cSupportedOSPlatformVersion\u003e10.15\u003c/SupportedOSPlatformVersion\u003e\r\n    \u003cMonoMacResourcePrefix\u003eResources\u003c/MonoMacResourcePrefix\u003e\r\n\r\n    \u003cMonoBundlingExtraArgs\u003e--setenv:COMPlus_CreateDumpDiagnostics=1 --setenv:COMPlus_DbgEnableMiniDump=1 --setenv:COMPlus_EnableCrashReport=1 --setenv:COMPlus_EnableDumpOnSigTerm=1 --marshal-objectivec-exceptions=throwmanagedexception --marshal-managed-exceptions=throwobjectivecexception --package-debug-symbols:true\u003c/MonoBundlingExtraArgs\u003e\r\n  \u003c/PropertyGroup\u003e\r\n  \r\n\u003c/Project\u003e\r\n```\r\n\r\n3. In ViewController.cs, change the signature of the constructor to use NativeHandle instead of IntPtr\r\n4. Build and run\r\n5. Force quit the app, you should see a crash report writing to %tmpdir% and the output from createdump in the application output pad in vsmac.\r\n6. Edit Info.plist and add the following\r\n\r\n```\r\n\u003ckey\u003eLSUIElement\u003c/key\u003e\r\n\u003cstring\u003e1\u003c/string\u003e\t\r\n```\r\n\r\n7. rebuild and run\r\n8. Force quit again, this time you will not see a core dump and no output from createdump in the application output pad.\r\n\r\nSimilarly, you can swap step 6 for adding \r\n\r\n```\r\nNSApplication.SharedApplication.ActivationPolicy = NSApplicationActivationPolicy.Accessory\r\n```\r\n\r\nin the AppDelegate in DidFinishLaunching and get the same results. One note though, I did get a core dump about 2 times out of 10 or so. \r\n\r\nAlso, hooking up a signal handler like `PosixSignalRegistration.Create(PosixSignal.SIGTERM, SignalReceived);` would work/not work in the same manner.\r\n\r\n\n\n### Expected behavior\n\ncreatedump should produce a core dump when a signal is sent to the process regardless of LSUIElement or ActivationPolicy settings\n\n### Actual behavior\n\ncreatedump only produced a core dump if LSUIElement is false / 0, ActivationPolicy = Regular.\n\n### Regression?\n\nDon\u0027t think so\n\n### Known Workarounds\n\nNone\n\n### Configuration\n\n6.02 servicing builds for vsmac.\r\n\r\n```\r\n  \u003cItemGroup\u003e\r\n    \u003cFrameworkReference Update=\"Microsoft.NETCore.App\" RuntimeFrameworkVersion=\"6.0.2-servicing.1.22101.5\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n```\r\n\r\nworkloadVersion = \"12.1.301-preview.13.4\"\r\n\r\nRunning on macOS 12.3.1 Arm64, although I am pretty sure this also fails on x64.\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003esgmunn\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-04-08T15:10:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BJpQ8",
                                           "createdAt":  "2022-04-08T16:08:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@mikem8361 ",
                                           "updatedAt":  "2022-04-08T16:08:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Bh8GH",
                                           "createdAt":  "2022-04-14T17:04:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kdubau",
                                           "body":  "@dalexsoto @rolfbjarne any ideas where to start investigating this?",
                                           "updatedAt":  "2022-04-14T17:04:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BspfU",
                                           "createdAt":  "2022-04-19T07:46:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rolfbjarne",
                                           "body":  "Can you run `createdump` from the command line (with the app running) as described under \"Command Line Usage\" here: https://github.com/dotnet/runtime/blob/main/docs/design/coreclr/botr/xplat-minidump-generation.md#configurationpolicy?\r\n\r\nI\u0027m guessing that CoreCLR will launch `createdump` automatically when a signal occurs, I think I\u0027d first look into whether this is happening or not (by debugging the app using lldb).",
                                           "updatedAt":  "2022-04-19T07:46:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CUQuz",
                                           "createdAt":  "2022-04-28T20:06:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCaZETQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2022-04-28T20:11:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "sgmunn",
                                           "body":  "This seems to be more of an issue for signals sent to the app, as opposed to (for example) intentional crashes. For example, adding the following code to a button in the view does produce a crash report\r\n\r\n```\r\n[DllImport(\"libc\")]\r\nstatic extern void abort();\r\n\r\npublic static void Abrt()\r\n{\r\n\tConsole.WriteLine(\"About to abort...\");\r\n\tabort();\r\n}\r\n```\r\nSimilarly, the following will also crash and produce a crash report\r\n\r\n```\r\n[UnmanagedFunctionPointer(CallingConvention.Cdecl)]\r\ndelegate void callback();\r\n\r\npublic static void Segv()\r\n{\r\n\tMarshal.GetDelegateForFunctionPointer((IntPtr)123, typeof(callback));\r\n}\r\n```\r\n",
                                           "updatedAt":  "2022-04-28T20:06:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CUbjB",
                                           "createdAt":  "2022-04-28T21:03:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCaZx6A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2022-04-28T21:20:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "janvorli",
                                           "body":  "I am starting to think that this issue may be related to the fact that macOS intentionally prevents sending signals to threads executing dispatch queue stuff. E.g. code running in UI event handlers etc. This is described in https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/ThreadMigration/ThreadMigration.html.\r\n",
                                           "updatedAt":  "2022-04-28T21:03:06Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "createdump / signals do not work with macOS application that has LSUIElement=true",
        "labels":  [
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/68013",
        "createdAt":  "2022-04-14T08:30:56Z",
        "number":  68013,
        "author":  "lulu58",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-05-17T23:06:12Z",
        "body":  "Hello,\r\nI created a simple dotnetcore application (attached) that doestn´t work as expected while remote debugging.\r\nHave a Raspberry Pi 3B with Raspberry OS, remoting with ssh.\r\nIf started from VS2019, the first attempt to read the file failes after start the app. After overwriting, the second read is ok.\r\nThe file remains in the app dir.\r\nIf you try to debug again from VS2019, the same behavior: first read failed, second read ok.\r\nStarting from a ssh console, the first read is ok. \r\nI updated the .net core 3 and vsdbg to latest version on Raspberry Pi.\r\nAm I wrong, or is there a bug in the vsdbg?\r\n[Program.zip](https://github.com/dotnet/runtime/files/8487514/Program.zip)\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOQbUv2Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Bfx3L",
                                           "createdAt":  "2022-04-14T08:31:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nHello,\r\nI created a simple dotnetcore application (attached) that doestn´t work as expected while remote debugging.\r\nHave a Raspberry Pi 3B with Raspberry OS, remoting with ssh.\r\nIf started from VS2019, the first attempt to read the file failes after start the app. After overwriting, the second read is ok.\r\nThe file remains in the app dir.\r\nIf you try to debug again from VS2019, the same behavior: first read failed, second read ok.\r\nStarting from a ssh console, the first read is ok. \r\nI updated the .net core 3 and vsdbg to latest version on Raspberry Pi.\r\nAm I wrong, or is there a bug in the vsdbg?\r\n[Program.zip](https://github.com/dotnet/runtime/files/8487514/Program.zip)\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003elulu58\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-04-14T08:31:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Bh6Qs",
                                           "createdAt":  "2022-04-14T16:59:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Hi @lulu58, this sounds like it could be a permissions or file location issue, where the app is running as a different user or perhaps is running from a different working directory.  When configuring vs 2019 remote debugging, are you logging in with the same ssh credentials to the raspberry pi 3?  Adding @caslan who might have other suggestions.",
                                           "updatedAt":  "2022-04-14T16:59:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BtS_Z",
                                           "createdAt":  "2022-04-19T09:37:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lulu58",
                                           "body":  "Hi Tom,\r\nI checked my ssh credentials again. If there were missing access rights, wouln\u0027t then also the writing and the second reading of the file fail? ",
                                           "updatedAt":  "2022-04-19T09:37:17Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  ".net core 3.1 remote debugging from VS 2019 to Raspberry PI - can\u0027t open existing file",
        "labels":  [
                       "question",
                       "tracking-external-issue",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/68018",
        "createdAt":  "2022-04-14T12:15:50Z",
        "number":  68018,
        "author":  "ArseniiCherniaev",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODNEjGw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "theramzay",
                                            "createdAt":  "2022-06-17T14:57:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cyril265",
                                            "createdAt":  "2022-07-01T21:37:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "g4ther",
                                            "createdAt":  "2022-07-13T01:29:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PascalSenn",
                                            "createdAt":  "2022-09-11T02:03:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dpiatkowski",
                                            "createdAt":  "2022-09-12T17:14:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ijat",
                                            "createdAt":  "2022-10-02T12:25:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "wojtek-viirtue",
                                            "createdAt":  "2023-02-03T13:17:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ipetrushevskiy",
                                            "createdAt":  "2023-03-10T10:54:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vzam",
                                            "createdAt":  "2023-04-26T06:42:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "diegosps",
                                            "createdAt":  "2023-05-03T17:05:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pederlh",
                                            "createdAt":  "2023-06-08T11:41:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JoakimJohesan",
                                            "createdAt":  "2023-06-15T06:31:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Sljcom",
                                            "createdAt":  "2023-08-01T08:22:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Vivokas20",
                                            "createdAt":  "2024-01-19T11:10:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jukkahyv",
                                            "createdAt":  "2024-02-05T12:48:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "glebasos",
                                            "createdAt":  "2024-04-10T09:01:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xsoheilalizadeh",
                                            "createdAt":  "2024-05-13T10:17:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Eagl61",
                                            "createdAt":  "2024-05-23T22:27:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rodion-m",
                                            "createdAt":  "2024-06-06T18:34:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MoienTajik",
                                            "createdAt":  "2024-08-30T21:25:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "justin-caldicott",
                                            "createdAt":  "2024-09-18T18:14:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NinoFloris",
                                            "createdAt":  "2024-09-19T16:08:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Matte15",
                                            "createdAt":  "2024-09-26T06:17:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AntPolkanov",
                                            "createdAt":  "2024-10-08T22:44:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TobyChurches",
                                            "createdAt":  "2024-10-08T23:12:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "matt-goldman-ssw",
                                            "createdAt":  "2024-10-08T23:12:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "matt-goldman",
                                            "createdAt":  "2024-10-08T23:13:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lukecookssw",
                                            "createdAt":  "2024-10-08T23:14:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SamBWagner",
                                            "createdAt":  "2024-10-08T23:15:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "joshbermanssw",
                                            "createdAt":  "2024-10-08T23:20:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tkapa",
                                            "createdAt":  "2024-10-08T23:24:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JackDevAU",
                                            "createdAt":  "2024-10-08T23:29:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AttackOnMorty",
                                            "createdAt":  "2024-10-08T23:45:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tiagov8",
                                            "createdAt":  "2024-10-09T00:26:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GabbyWard",
                                            "createdAt":  "2024-10-09T00:31:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vladislav-kir",
                                            "createdAt":  "2024-10-09T01:08:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "babakamyljanovssw",
                                            "createdAt":  "2024-10-09T01:45:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Marxoz",
                                            "createdAt":  "2024-10-09T03:33:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ricksu978",
                                            "createdAt":  "2024-10-09T03:55:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "andrewwaltosssw",
                                            "createdAt":  "2024-10-09T05:18:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "zacharykeeping",
                                            "createdAt":  "2024-10-09T06:28:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PothieuG",
                                            "createdAt":  "2024-10-09T06:30:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Ben0189",
                                            "createdAt":  "2024-10-09T22:31:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "amankumarrr",
                                            "createdAt":  "2024-10-09T22:33:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "danielmackay",
                                            "createdAt":  "2024-10-17T23:58:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dguisinger",
                                            "createdAt":  "2024-11-28T06:50:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "N-Olbert",
                                            "createdAt":  "2025-08-28T14:12:35Z"
                                        }
                                    ],
                          "totalCount":  47
                      },
        "updatedAt":  "2025-08-15T15:31:35Z",
        "body":  "### Description\n\nWe\u0027ve noticed the following problem with the debugging of applications if `justMyCode` option is disabled. Stepping into a code could cause target process crash. Only macos-arm64 configurations are affected.\r\n\r\n```\r\nProcess:               dotnet [2347]\r\nPath:                  /usr/local/share/dotnet/dotnet\r\nIdentifier:            dotnet\r\nVersion:               ???\r\nCode Type:             ARM-64 (Native)\r\nParent Process:        dotnet [2344]\r\nResponsible:           rider [926]\r\nUser ID:               502\r\n\r\nDate/Time:             2022-04-14 12:46:20.611 +03:00\r\nOS Version:            macOS 12.3.1 (21E258)\r\nReport Version:        12\r\nAnonymous UUID:        56926882-A171-9A29-1ACF-C4826A4C5C72\r\n\r\nTime Awake Since Boot: 720 seconds\r\n\r\nSystem Integrity Protection: enabled\r\n\r\nCrashed Thread:        29\r\n\r\nException Type:        EXC_BAD_ACCESS (SIGBUS)\r\nException Codes:       KERN_PROTECTION_FAILURE at 0x0000000290e46320\r\nException Note:        EXC_CORPSE_NOTIFY\r\n\r\nTermination Reason:    Namespace SIGNAL, Code 0xa\r\nTerminating Process:   exc handler [2347]\r\n\r\nVM Region Info: 0x290e46320 is in 0x285360000-0x2ffff0000;  bytes after start: 195978016  bytes before end: 1864015071\r\n      REGION TYPE                    START - END         [ VSIZE] PRT/MAX SHRMOD  REGION DETAIL\r\n      VM_ALLOCATE                 2852a0000-285360000    [  768K] rw-/rwx SM=ZER  \r\n---\u003e  VM_ALLOCATE                 285360000-2ffff0000    [  1.9G] ---/rwx SM=ZER  \r\n      VM_ALLOCATE                 2ffff0000-2ffff8000    [   32K] rw-/rwx SM=PRV  \r\n\r\n...\r\n\r\nThread 29 Crashed:: .NET ThreadPool Worker\r\n0   libcoreclr.dylib                  0x0000000100f548ec VirtualCallStubManager::predictStubKind(unsigned long) + 152\r\n1   libcoreclr.dylib                  0x0000000100f548d8 VirtualCallStubManager::predictStubKind(unsigned long) + 132\r\n2   libcoreclr.dylib                  0x0000000100f57c78 VirtualCallStubManager::getStubKind(unsigned long, int) + 36\r\n3   libcoreclr.dylib                  0x0000000100f57e20 VirtualCallStubManager::CheckIsStub_Internal(unsigned long) + 16\r\n4   libcoreclr.dylib                  0x0000000100f5c5a4 VirtualCallStubManagerManager::CheckIsStub_Internal(unsigned long) + 116\r\n5   libcoreclr.dylib                  0x0000000100f34878 StubManager::CheckIsStub_Worker(unsigned long) + 188\r\n6   libcoreclr.dylib                  0x0000000100f34bdc StubManager::TraceStub(unsigned long, TraceDestination*) + 164\r\n7   libcoreclr.dylib                  0x0000000100eab830 EEDbgInterfaceImpl::TraceStub(unsigned char const*, TraceDestination*) + 20\r\n8   libcoreclr.dylib                  0x0000000101140d68 DebuggerStepper::TrapStepInto(ControllerStackInfo*, unsigned char const*, TraceDestination*) + 164\r\n9   libcoreclr.dylib                  0x0000000101140e00 DebuggerStepper::TrapStepInHelper(ControllerStackInfo*, unsigned char const*, unsigned char const*, bool, bool) + 32\r\n10  libcoreclr.dylib                  0x0000000101141250 DebuggerStepper::TrapStep(ControllerStackInfo*, bool) + 900\r\n11  libcoreclr.dylib                  0x000000010114314c DebuggerStepper::TriggerSingleStep(Thread*, unsigned char const*) + 1256\r\n12  libcoreclr.dylib                  0x000000010113d8c0 DebuggerController::ScanForTriggers(unsigned char const*, Thread*, _CONTEXT*, DebuggerControllerQueue*, SCAN_TRIGGER, TP_RESULT*) + 316\r\n13  libcoreclr.dylib                  0x000000010113e294 DebuggerController::DispatchPatchOrSingleStep(Thread*, _CONTEXT*, unsigned char const*, SCAN_TRIGGER) + 268\r\n14  libcoreclr.dylib                  0x000000010113f6cc DebuggerController::DispatchNativeException(_EXCEPTION_RECORD*, _CONTEXT*, unsigned int, Thread*) + 596\r\n15  libcoreclr.dylib                  0x000000010114bf28 Debugger::FirstChanceNativeException(_EXCEPTION_RECORD*, _CONTEXT*, unsigned int, Thread*) + 124\r\n16  libcoreclr.dylib                  0x0000000101079300 HandleHardwareException(PAL_SEHException*) + 272\r\n17  libcoreclr.dylib                  0x0000000100e21c18 SEHProcessException(PAL_SEHException*) + 352\r\n18  libcoreclr.dylib                  0x0000000100e58184 PAL_DispatchException + 196\r\n19  libcoreclr.dylib                  0x0000000100e57dd8 PAL_DispatchExceptionWrapper + 16\r\n20  ???                               0x000000028010c404 0x0 + 10738516996\r\n21  ???                               0x0000000283cb2c1c 0x0 + 10801064988\r\n22  ???                               0x0000000285024cf4 0x0 + 10821455092\r\n23  ???                               0x0000000285024bf8 0x0 + 10821454840\r\n24  ???                               0x0000000285024848 0x0 + 10821453896\r\n25  ???                               0x00000002850222d8 0x0 + 10821444312\r\n26  ???                               0x00000002850244b4 0x0 + 10821452980\r\n27  ???                               0x00000002850221bc 0x0 + 10821444028\r\n28  ???                               0x00000002850244b4 0x0 + 10821452980\r\n29  ???                               0x00000002850221bc 0x0 + 10821444028\r\n30  ???                               0x00000002850219a8 0x0 + 10821441960\r\n31  ???                               0x0000000285021414 0x0 + 10821440532\r\n32  ???                               0x000000028501f1b0 0x0 + 10821431728\r\n33  ???                               0x000000028501ed98 0x0 + 10821430680\r\n34  ???                               0x00000002850103ec 0x0 + 10821370860\r\n35  ???                               0x000000028500fa78 0x0 + 10821368440\r\n36  ???                               0x000000028500c720 0x0 + 10821355296\r\n37  ???                               0x000000028500c32c 0x0 + 10821354284\r\n38  ???                               0x000000028500c280 0x0 + 10821354112\r\n39  ???                               0x000000028500be18 0x0 + 10821352984\r\n40  ???                               0x000000028500b7c0 0x0 + 10821351360\r\n41  ???                               0x000000028500af64 0x0 + 10821349220\r\n42  ???                               0x0000000284a62cd0 0x0 + 10815417552\r\n43  ???                               0x0000000284a6205c 0x0 + 10815414364\r\n44  ???                               0x0000000284a61fb0 0x0 + 10815414192\r\n45  ???                               0x0000000284a61f50 0x0 + 10815414096\r\n46  ???                               0x0000000284a5fde8 0x0 + 10815405544\r\n47  ???                               0x0000000284a5fc34 0x0 + 10815405108\r\n48  ???                               0x0000000284a5fb88 0x0 + 10815404936\r\n49  ???                               0x0000000284a5fb28 0x0 + 10815404840\r\n50  ???                               0x0000000283cb039c 0x0 + 10801054620\r\n51  ???                               0x0000000284a540ec 0x0 + 10815357164\r\n52  ???                               0x0000000284a53f00 0x0 + 10815356672\r\n53  ???                               0x0000000284a306a8 0x0 + 10815211176\r\n54  ???                               0x0000000284a2ff3c 0x0 + 10815209276\r\n55  ???                               0x0000000284a2f9c4 0x0 + 10815207876\r\n56  ???                               0x0000000284a2f918 0x0 + 10815207704\r\n57  ???                               0x0000000284a2f8b4 0x0 + 10815207604\r\n58  ???                               0x0000000284a2c800 0x0 + 10815195136\r\n59  ???                               0x0000000284a2c72c 0x0 + 10815194924\r\n60  ???                               0x00000002849f9390 0x0 + 10814985104\r\n61  ???                               0x0000000284fafa50 0x0 + 10820975184\r\n62  ???                               0x0000000282831ba8 0x0 + 10779564968\r\n63  ???                               0x0000000284faf784 0x0 + 10820974468\r\n64  ???                               0x0000000284faf5a0 0x0 + 10820973984\r\n65  ???                               0x000000028498f140 0x0 + 10814550336\r\n66  ???                               0x000000028498eb10 0x0 + 10814548752\r\n67  ???                               0x000000028498ad74 0x0 + 10814532980\r\n68  ???                               0x0000000284faf544 0x0 + 10820973892\r\n69  ???                               0x0000000284faf434 0x0 + 10820973620\r\n70  ???                               0x00000002849feb68 0x0 + 10815007592\r\n71  ???                               0x00000002849fb350 0x0 + 10814993232\r\n72  ???                               0x0000000284faf348 0x0 + 10820973384\r\n73  ???                               0x0000000282831ba8 0x0 + 10779564968\r\n74  ???                               0x0000000284faf190 0x0 + 10820972944\r\n75  ???                               0x0000000284faf058 0x0 + 10820972632\r\n76  ???                               0x000000028498f140 0x0 + 10814550336\r\n77  ???                               0x000000028498eb10 0x0 + 10814548752\r\n78  ???                               0x000000028498ad74 0x0 + 10814532980\r\n79  ???                               0x00000002849d6cd0 0x0 + 10814844112\r\n80  ???                               0x00000002849d6be0 0x0 + 10814843872\r\n81  ???                               0x00000002849d6acc 0x0 + 10814843596\r\n82  ???                               0x00000002849fc79c 0x0 + 10814998428\r\n83  ???                               0x0000000284faf000 0x0 + 10820972544\r\n84  ???                               0x0000000282831ba8 0x0 + 10779564968\r\n85  ???                               0x0000000284faee48 0x0 + 10820972104\r\n86  ???                               0x0000000284faed10 0x0 + 10820971792\r\n87  ???                               0x000000028497e728 0x0 + 10814482216\r\n88  ???                               0x00000002849a9d08 0x0 + 10814659848\r\n89  ???                               0x00000002849a9bb4 0x0 + 10814659508\r\n90  ???                               0x00000002849a9b54 0x0 + 10814659412\r\n91  ???                               0x00000002849a99bc 0x0 + 10814659004\r\n92  ???                               0x00000002849a6c48 0x0 + 10814647368\r\n93  ???                               0x00000002849d5c30 0x0 + 10814839856\r\n94  ???                               0x0000000282831ba8 0x0 + 10779564968\r\n95  ???                               0x00000002849d596c 0x0 + 10814839148\r\n96  ???                               0x00000002849d5484 0x0 + 10814837892\r\n97  ???                               0x0000000283359ca8 0x0 + 10791263400\r\n98  ???                               0x0000000283354bd4 0x0 + 10791242708\r\n99  ???                               0x0000000283353598 0x0 + 10791237016\r\n100 ???                               0x000000028200d8b4 0x0 + 10771028148\r\n101 ???                               0x000000028200d6c4 0x0 + 10771027652\r\n102 ???                               0x000000028200cf50 0x0 + 10771025744\r\n103 libcoreclr.dylib                  0x0000000101107d88 CallDescrWorkerInternal + 132\r\n104 libcoreclr.dylib                  0x0000000100f78484 DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) + 284\r\n105 libcoreclr.dylib                  0x0000000100f8d854 ThreadNative::KickOffThread_Worker(void*) + 148\r\n106 libcoreclr.dylib                  0x0000000100f43320 ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) + 260\r\n107 libcoreclr.dylib                  0x0000000100f43898 ManagedThreadBase::KickOff(void (*)(void*), void*) + 32\r\n108 libcoreclr.dylib                  0x0000000100f8d92c ThreadNative::KickOffThread(void*) + 172\r\n109 libcoreclr.dylib                  0x0000000100e55e68 CorUnix::CPalThread::ThreadEntry(void*) + 380\r\n110 libsystem_pthread.dylib           0x00000001aceee26c _pthread_start + 148\r\n111 libsystem_pthread.dylib           0x00000001acee908c thread_start + 8\r\n\r\n...\r\n\r\nThread 29 crashed with ARM Thread State (64-bit):\r\n   x0: 0x0000600003740730   x1: 0x0000000290e46320   x2: 0x0000000000000001   x3: 0x0000000100e68918\r\n   x4: 0x0000000000000000   x5: 0x0000000000000000   x6: 0x0000000170a3b368   x7: 0x0000000170a3b308\r\n   x8: 0x0000000170a3d220   x9: 0x000000013501a000  x10: 0x0000000000000002  x11: 0x0000000000000000\r\n  x12: 0x0000000280134f61  x13: 0x0000000170a43220  x14: 0x0000000000000000  x15: 0x00000001acef5630\r\n  x16: 0x00000000000000a0  x17: 0x0000600003740690  x18: 0x0000000000000000  x19: 0x0000000290e46320\r\n  x20: 0x000000010130ca60  x21: 0x00000001acef5630  x22: 0x0000000170a3d2f8  x23: 0x00000001acef5630\r\n  x24: 0x0000000170a3d2f0  x25: 0x0000000101314000  x26: 0x0000000101315670  x27: 0x00000000ffffffff\r\n  x28: 0x0000000000000002   fp: 0x0000000170a3d280   lr: 0x0000000100f548d8\r\n   sp: 0x0000000170a3d220   pc: 0x0000000100f548ec cpsr: 0x0000000060001000  far: 0x0000000290e46320\r\n  esr: 0x0000000092000006\r\n\r\nBinary Images:\r\n       0x1003dc000 -        0x1003e8000 +dotnet (???) \u003c0ED2FF17-1F2E-3580-8655-B55846441074\u003e /usr/local/share/dotnet/dotnet\r\n       0x100498000 -        0x1004f8000 dyld (???) \u003cFBB89662-E6F2-3434-B542-F75185AC5E74\u003e /usr/lib/dyld\r\n       0x1006bc000 -        0x100700000 +libhostfxr.dylib (???) \u003cFC549AD0-AF0B-3A5F-B737-A438074D62B7\u003e /usr/local/share/dotnet/host/fxr/6.0.0/libhostfxr.dylib\r\n       0x10072c000 -        0x100768000 +libhostpolicy.dylib (???) \u003c6281B33A-19D4-3EB6-8AF0-16022A2562CA\u003e /usr/local/share/dotnet/shared/Microsoft.NETCore.App/6.0.0/libhostpolicy.dylib\r\n       0x100e18000 -        0x1012e8000 +libcoreclr.dylib (???) \u003c40D5325D-B096-3BA7-977A-C338C716C45C\u003e /usr/local/share/dotnet/shared/Microsoft.NETCore.App/6.0.0/libcoreclr.dylib\r\n       0x10d614000 -        0x10d624000 +libSystem.Native.dylib (???) \u003c22ADAF12-9321-36F7-BA85-ABC08EA66E7B\u003e /usr/local/share/dotnet/shared/Microsoft.NETCore.App/6.0.0/libSystem.Native.dylib\r\n       0x1aceaf000 -        0x1acee7000 libsystem_kernel.dylib (???) \u003c1D7B3B8E-75A1-34EA-AA52-9F7C23155C55\u003e /usr/lib/system/libsystem_kernel.dylib\r\n       0x1acee7000 -        0x1acef4000 libsystem_pthread.dylib (???) \u003cCEE8BC77-6923-34D9-89A3-6F8F7279605E\u003e /usr/lib/system/libsystem_pthread.dylib\r\n       0x1acf36000 -        0x1ad47c000 com.apple.CoreFoundation (6.9 - 1858.112) \u003c8E1809FF-F5B1-3D9E-BE15-F2E7B1D8CE51\u003e /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation\r\n\r\nExternal Modification Summary:\r\n Calls made by other processes targeting this process:\r\n    task_for_pid: 0\r\n    thread_create: 0\r\n    thread_set_state: 0\r\n Calls made by this process:\r\n    task_for_pid: 0\r\n    thread_create: 0\r\n    thread_set_state: 0\r\n Calls made by all processes on this machine:\r\n    task_for_pid: 0\r\n    thread_create: 0\r\n    thread_set_state: 0\r\n\r\nVM Region Summary:\r\nReadOnly portion of Libraries: Total=670.9M resident=0K(0%) swapped_out_or_unallocated=670.9M(100%)\r\nWritable regions: Total=1.3G written=0K(0%) resident=0K(0%) swapped_out=0K(0%) unallocated=1.3G(100%)\r\n\r\n                                VIRTUAL   REGION \r\nREGION TYPE                        SIZE    COUNT (non-coalesced) \r\n===========                     =======  ======= \r\nActivity Tracing                   256K        1 \r\nKernel Alloc Once                   32K        1 \r\nMALLOC                           256.2M       32 \r\nMALLOC guard page                   96K        5 \r\nMALLOC_MEDIUM (reserved)         584.0M        5         reserved VM address space (unallocated)\r\nMALLOC_NANO (reserved)           384.0M        1         reserved VM address space (unallocated)\r\nSTACK GUARD                       56.5M       32 \r\nStack                             24.0M       32 \r\nVM_ALLOCATE                       22.2G      921 \r\nVM_ALLOCATE (reserved)              64K        1         reserved VM address space (unallocated)\r\n__AUTH                             220K       44 \r\n__AUTH_CONST                      2887K      122 \r\n__DATA                            1259K      122 \r\n__DATA_CONST                      3904K      130 \r\n__DATA_DIRTY                       233K       50 \r\n__LINKEDIT                       586.3M        9 \r\n__OBJC_CONST                       260K       29 \r\n__OBJC_RO                         82.9M        1 \r\n__OBJC_RW                         3152K        1 \r\n__TEXT                            84.5M      136 \r\n__UNICODE                          592K        1 \r\ndyld private memory               1024K        1 \r\nmapped file                       33.6M       21 \r\nshared memory                       80K        5 \r\n===========                     =======  ======= \r\nTOTAL                             24.3G     1703 \r\nTOTAL, minus reserved VM space    23.3G     1703 \r\n```\r\n[Here\u0027s](https://github.com/dotnet/runtime/files/8489002/dotnet-2022-04-14-124620.ips.zip) the initial ips report file.\r\n\n\n### Reproduction Steps\n\n* Open [the following project](https://github.com/dotnet/runtime/files/8488894/WebApi.zip) in VS Code\r\n* Toggle a breakpoint in file `WeatherForecastController.cs` on line 25\r\n* Start debugging and perform Get request\r\n* Press step into\n\n### Expected behavior\n\nThe debug session is still alive and the app is working\n\n### Actual behavior\n\nApplication crash\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nSetting \u0027justMyCode\u0027 property to true allows me to properly debug the application.\n\n### Configuration\n\n* .NET 6\r\n* macOS\r\n* ARM 64\r\n\r\nThe issue is specific to this configuration\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOlWuMVg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Bg0zp",
                                           "createdAt":  "2022-04-14T12:15:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-04-14T12:15:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Bg15j",
                                           "createdAt":  "2022-04-14T12:21:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ArseniiCherniaev",
                                           "body":  "[The initial issue](https://youtrack.jetbrains.com/issue/RIDER-69625) in Rider bug tracker.",
                                           "updatedAt":  "2022-04-14T12:21:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Bg-1I",
                                           "createdAt":  "2022-04-14T13:04:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nWe\u0027ve noticed the following problem with the debugging of applications if `justMyCode` option is disabled. Stepping into a code could cause target process crash. Only macos-arm64 configurations are affected.\r\n\r\n```\r\nProcess:               dotnet [2347]\r\nPath:                  /usr/local/share/dotnet/dotnet\r\nIdentifier:            dotnet\r\nVersion:               ???\r\nCode Type:             ARM-64 (Native)\r\nParent Process:        dotnet [2344]\r\nResponsible:           rider [926]\r\nUser ID:               502\r\n\r\nDate/Time:             2022-04-14 12:46:20.611 +03:00\r\nOS Version:            macOS 12.3.1 (21E258)\r\nReport Version:        12\r\nAnonymous UUID:        56926882-A171-9A29-1ACF-C4826A4C5C72\r\n\r\nTime Awake Since Boot: 720 seconds\r\n\r\nSystem Integrity Protection: enabled\r\n\r\nCrashed Thread:        29\r\n\r\nException Type:        EXC_BAD_ACCESS (SIGBUS)\r\nException Codes:       KERN_PROTECTION_FAILURE at 0x0000000290e46320\r\nException Note:        EXC_CORPSE_NOTIFY\r\n\r\nTermination Reason:    Namespace SIGNAL, Code 0xa\r\nTerminating Process:   exc handler [2347]\r\n\r\nVM Region Info: 0x290e46320 is in 0x285360000-0x2ffff0000;  bytes after start: 195978016  bytes before end: 1864015071\r\n      REGION TYPE                    START - END         [ VSIZE] PRT/MAX SHRMOD  REGION DETAIL\r\n      VM_ALLOCATE                 2852a0000-285360000    [  768K] rw-/rwx SM=ZER  \r\n---\u003e  VM_ALLOCATE                 285360000-2ffff0000    [  1.9G] ---/rwx SM=ZER  \r\n      VM_ALLOCATE                 2ffff0000-2ffff8000    [   32K] rw-/rwx SM=PRV  \r\n\r\n...\r\n\r\nThread 29 Crashed:: .NET ThreadPool Worker\r\n0   libcoreclr.dylib                  0x0000000100f548ec VirtualCallStubManager::predictStubKind(unsigned long) + 152\r\n1   libcoreclr.dylib                  0x0000000100f548d8 VirtualCallStubManager::predictStubKind(unsigned long) + 132\r\n2   libcoreclr.dylib                  0x0000000100f57c78 VirtualCallStubManager::getStubKind(unsigned long, int) + 36\r\n3   libcoreclr.dylib                  0x0000000100f57e20 VirtualCallStubManager::CheckIsStub_Internal(unsigned long) + 16\r\n4   libcoreclr.dylib                  0x0000000100f5c5a4 VirtualCallStubManagerManager::CheckIsStub_Internal(unsigned long) + 116\r\n5   libcoreclr.dylib                  0x0000000100f34878 StubManager::CheckIsStub_Worker(unsigned long) + 188\r\n6   libcoreclr.dylib                  0x0000000100f34bdc StubManager::TraceStub(unsigned long, TraceDestination*) + 164\r\n7   libcoreclr.dylib                  0x0000000100eab830 EEDbgInterfaceImpl::TraceStub(unsigned char const*, TraceDestination*) + 20\r\n8   libcoreclr.dylib                  0x0000000101140d68 DebuggerStepper::TrapStepInto(ControllerStackInfo*, unsigned char const*, TraceDestination*) + 164\r\n9   libcoreclr.dylib                  0x0000000101140e00 DebuggerStepper::TrapStepInHelper(ControllerStackInfo*, unsigned char const*, unsigned char const*, bool, bool) + 32\r\n10  libcoreclr.dylib                  0x0000000101141250 DebuggerStepper::TrapStep(ControllerStackInfo*, bool) + 900\r\n11  libcoreclr.dylib                  0x000000010114314c DebuggerStepper::TriggerSingleStep(Thread*, unsigned char const*) + 1256\r\n12  libcoreclr.dylib                  0x000000010113d8c0 DebuggerController::ScanForTriggers(unsigned char const*, Thread*, _CONTEXT*, DebuggerControllerQueue*, SCAN_TRIGGER, TP_RESULT*) + 316\r\n13  libcoreclr.dylib                  0x000000010113e294 DebuggerController::DispatchPatchOrSingleStep(Thread*, _CONTEXT*, unsigned char const*, SCAN_TRIGGER) + 268\r\n14  libcoreclr.dylib                  0x000000010113f6cc DebuggerController::DispatchNativeException(_EXCEPTION_RECORD*, _CONTEXT*, unsigned int, Thread*) + 596\r\n15  libcoreclr.dylib                  0x000000010114bf28 Debugger::FirstChanceNativeException(_EXCEPTION_RECORD*, _CONTEXT*, unsigned int, Thread*) + 124\r\n16  libcoreclr.dylib                  0x0000000101079300 HandleHardwareException(PAL_SEHException*) + 272\r\n17  libcoreclr.dylib                  0x0000000100e21c18 SEHProcessException(PAL_SEHException*) + 352\r\n18  libcoreclr.dylib                  0x0000000100e58184 PAL_DispatchException + 196\r\n19  libcoreclr.dylib                  0x0000000100e57dd8 PAL_DispatchExceptionWrapper + 16\r\n20  ???                               0x000000028010c404 0x0 + 10738516996\r\n21  ???                               0x0000000283cb2c1c 0x0 + 10801064988\r\n22  ???                               0x0000000285024cf4 0x0 + 10821455092\r\n23  ???                               0x0000000285024bf8 0x0 + 10821454840\r\n24  ???                               0x0000000285024848 0x0 + 10821453896\r\n25  ???                               0x00000002850222d8 0x0 + 10821444312\r\n26  ???                               0x00000002850244b4 0x0 + 10821452980\r\n27  ???                               0x00000002850221bc 0x0 + 10821444028\r\n28  ???                               0x00000002850244b4 0x0 + 10821452980\r\n29  ???                               0x00000002850221bc 0x0 + 10821444028\r\n30  ???                               0x00000002850219a8 0x0 + 10821441960\r\n31  ???                               0x0000000285021414 0x0 + 10821440532\r\n32  ???                               0x000000028501f1b0 0x0 + 10821431728\r\n33  ???                               0x000000028501ed98 0x0 + 10821430680\r\n34  ???                               0x00000002850103ec 0x0 + 10821370860\r\n35  ???                               0x000000028500fa78 0x0 + 10821368440\r\n36  ???                               0x000000028500c720 0x0 + 10821355296\r\n37  ???                               0x000000028500c32c 0x0 + 10821354284\r\n38  ???                               0x000000028500c280 0x0 + 10821354112\r\n39  ???                               0x000000028500be18 0x0 + 10821352984\r\n40  ???                               0x000000028500b7c0 0x0 + 10821351360\r\n41  ???                               0x000000028500af64 0x0 + 10821349220\r\n42  ???                               0x0000000284a62cd0 0x0 + 10815417552\r\n43  ???                               0x0000000284a6205c 0x0 + 10815414364\r\n44  ???                               0x0000000284a61fb0 0x0 + 10815414192\r\n45  ???                               0x0000000284a61f50 0x0 + 10815414096\r\n46  ???                               0x0000000284a5fde8 0x0 + 10815405544\r\n47  ???                               0x0000000284a5fc34 0x0 + 10815405108\r\n48  ???                               0x0000000284a5fb88 0x0 + 10815404936\r\n49  ???                               0x0000000284a5fb28 0x0 + 10815404840\r\n50  ???                               0x0000000283cb039c 0x0 + 10801054620\r\n51  ???                               0x0000000284a540ec 0x0 + 10815357164\r\n52  ???                               0x0000000284a53f00 0x0 + 10815356672\r\n53  ???                               0x0000000284a306a8 0x0 + 10815211176\r\n54  ???                               0x0000000284a2ff3c 0x0 + 10815209276\r\n55  ???                               0x0000000284a2f9c4 0x0 + 10815207876\r\n56  ???                               0x0000000284a2f918 0x0 + 10815207704\r\n57  ???                               0x0000000284a2f8b4 0x0 + 10815207604\r\n58  ???                               0x0000000284a2c800 0x0 + 10815195136\r\n59  ???                               0x0000000284a2c72c 0x0 + 10815194924\r\n60  ???                               0x00000002849f9390 0x0 + 10814985104\r\n61  ???                               0x0000000284fafa50 0x0 + 10820975184\r\n62  ???                               0x0000000282831ba8 0x0 + 10779564968\r\n63  ???                               0x0000000284faf784 0x0 + 10820974468\r\n64  ???                               0x0000000284faf5a0 0x0 + 10820973984\r\n65  ???                               0x000000028498f140 0x0 + 10814550336\r\n66  ???                               0x000000028498eb10 0x0 + 10814548752\r\n67  ???                               0x000000028498ad74 0x0 + 10814532980\r\n68  ???                               0x0000000284faf544 0x0 + 10820973892\r\n69  ???                               0x0000000284faf434 0x0 + 10820973620\r\n70  ???                               0x00000002849feb68 0x0 + 10815007592\r\n71  ???                               0x00000002849fb350 0x0 + 10814993232\r\n72  ???                               0x0000000284faf348 0x0 + 10820973384\r\n73  ???                               0x0000000282831ba8 0x0 + 10779564968\r\n74  ???                               0x0000000284faf190 0x0 + 10820972944\r\n75  ???                               0x0000000284faf058 0x0 + 10820972632\r\n76  ???                               0x000000028498f140 0x0 + 10814550336\r\n77  ???                               0x000000028498eb10 0x0 + 10814548752\r\n78  ???                               0x000000028498ad74 0x0 + 10814532980\r\n79  ???                               0x00000002849d6cd0 0x0 + 10814844112\r\n80  ???                               0x00000002849d6be0 0x0 + 10814843872\r\n81  ???                               0x00000002849d6acc 0x0 + 10814843596\r\n82  ???                               0x00000002849fc79c 0x0 + 10814998428\r\n83  ???                               0x0000000284faf000 0x0 + 10820972544\r\n84  ???                               0x0000000282831ba8 0x0 + 10779564968\r\n85  ???                               0x0000000284faee48 0x0 + 10820972104\r\n86  ???                               0x0000000284faed10 0x0 + 10820971792\r\n87  ???                               0x000000028497e728 0x0 + 10814482216\r\n88  ???                               0x00000002849a9d08 0x0 + 10814659848\r\n89  ???                               0x00000002849a9bb4 0x0 + 10814659508\r\n90  ???                               0x00000002849a9b54 0x0 + 10814659412\r\n91  ???                               0x00000002849a99bc 0x0 + 10814659004\r\n92  ???                               0x00000002849a6c48 0x0 + 10814647368\r\n93  ???                               0x00000002849d5c30 0x0 + 10814839856\r\n94  ???                               0x0000000282831ba8 0x0 + 10779564968\r\n95  ???                               0x00000002849d596c 0x0 + 10814839148\r\n96  ???                               0x00000002849d5484 0x0 + 10814837892\r\n97  ???                               0x0000000283359ca8 0x0 + 10791263400\r\n98  ???                               0x0000000283354bd4 0x0 + 10791242708\r\n99  ???                               0x0000000283353598 0x0 + 10791237016\r\n100 ???                               0x000000028200d8b4 0x0 + 10771028148\r\n101 ???                               0x000000028200d6c4 0x0 + 10771027652\r\n102 ???                               0x000000028200cf50 0x0 + 10771025744\r\n103 libcoreclr.dylib                  0x0000000101107d88 CallDescrWorkerInternal + 132\r\n104 libcoreclr.dylib                  0x0000000100f78484 DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) + 284\r\n105 libcoreclr.dylib                  0x0000000100f8d854 ThreadNative::KickOffThread_Worker(void*) + 148\r\n106 libcoreclr.dylib                  0x0000000100f43320 ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) + 260\r\n107 libcoreclr.dylib                  0x0000000100f43898 ManagedThreadBase::KickOff(void (*)(void*), void*) + 32\r\n108 libcoreclr.dylib                  0x0000000100f8d92c ThreadNative::KickOffThread(void*) + 172\r\n109 libcoreclr.dylib                  0x0000000100e55e68 CorUnix::CPalThread::ThreadEntry(void*) + 380\r\n110 libsystem_pthread.dylib           0x00000001aceee26c _pthread_start + 148\r\n111 libsystem_pthread.dylib           0x00000001acee908c thread_start + 8\r\n\r\n...\r\n\r\nThread 29 crashed with ARM Thread State (64-bit):\r\n   x0: 0x0000600003740730   x1: 0x0000000290e46320   x2: 0x0000000000000001   x3: 0x0000000100e68918\r\n   x4: 0x0000000000000000   x5: 0x0000000000000000   x6: 0x0000000170a3b368   x7: 0x0000000170a3b308\r\n   x8: 0x0000000170a3d220   x9: 0x000000013501a000  x10: 0x0000000000000002  x11: 0x0000000000000000\r\n  x12: 0x0000000280134f61  x13: 0x0000000170a43220  x14: 0x0000000000000000  x15: 0x00000001acef5630\r\n  x16: 0x00000000000000a0  x17: 0x0000600003740690  x18: 0x0000000000000000  x19: 0x0000000290e46320\r\n  x20: 0x000000010130ca60  x21: 0x00000001acef5630  x22: 0x0000000170a3d2f8  x23: 0x00000001acef5630\r\n  x24: 0x0000000170a3d2f0  x25: 0x0000000101314000  x26: 0x0000000101315670  x27: 0x00000000ffffffff\r\n  x28: 0x0000000000000002   fp: 0x0000000170a3d280   lr: 0x0000000100f548d8\r\n   sp: 0x0000000170a3d220   pc: 0x0000000100f548ec cpsr: 0x0000000060001000  far: 0x0000000290e46320\r\n  esr: 0x0000000092000006\r\n\r\nBinary Images:\r\n       0x1003dc000 -        0x1003e8000 +dotnet (???) \u003c0ED2FF17-1F2E-3580-8655-B55846441074\u003e /usr/local/share/dotnet/dotnet\r\n       0x100498000 -        0x1004f8000 dyld (???) \u003cFBB89662-E6F2-3434-B542-F75185AC5E74\u003e /usr/lib/dyld\r\n       0x1006bc000 -        0x100700000 +libhostfxr.dylib (???) \u003cFC549AD0-AF0B-3A5F-B737-A438074D62B7\u003e /usr/local/share/dotnet/host/fxr/6.0.0/libhostfxr.dylib\r\n       0x10072c000 -        0x100768000 +libhostpolicy.dylib (???) \u003c6281B33A-19D4-3EB6-8AF0-16022A2562CA\u003e /usr/local/share/dotnet/shared/Microsoft.NETCore.App/6.0.0/libhostpolicy.dylib\r\n       0x100e18000 -        0x1012e8000 +libcoreclr.dylib (???) \u003c40D5325D-B096-3BA7-977A-C338C716C45C\u003e /usr/local/share/dotnet/shared/Microsoft.NETCore.App/6.0.0/libcoreclr.dylib\r\n       0x10d614000 -        0x10d624000 +libSystem.Native.dylib (???) \u003c22ADAF12-9321-36F7-BA85-ABC08EA66E7B\u003e /usr/local/share/dotnet/shared/Microsoft.NETCore.App/6.0.0/libSystem.Native.dylib\r\n       0x1aceaf000 -        0x1acee7000 libsystem_kernel.dylib (???) \u003c1D7B3B8E-75A1-34EA-AA52-9F7C23155C55\u003e /usr/lib/system/libsystem_kernel.dylib\r\n       0x1acee7000 -        0x1acef4000 libsystem_pthread.dylib (???) \u003cCEE8BC77-6923-34D9-89A3-6F8F7279605E\u003e /usr/lib/system/libsystem_pthread.dylib\r\n       0x1acf36000 -        0x1ad47c000 com.apple.CoreFoundation (6.9 - 1858.112) \u003c8E1809FF-F5B1-3D9E-BE15-F2E7B1D8CE51\u003e /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation\r\n\r\nExternal Modification Summary:\r\n Calls made by other processes targeting this process:\r\n    task_for_pid: 0\r\n    thread_create: 0\r\n    thread_set_state: 0\r\n Calls made by this process:\r\n    task_for_pid: 0\r\n    thread_create: 0\r\n    thread_set_state: 0\r\n Calls made by all processes on this machine:\r\n    task_for_pid: 0\r\n    thread_create: 0\r\n    thread_set_state: 0\r\n\r\nVM Region Summary:\r\nReadOnly portion of Libraries: Total=670.9M resident=0K(0%) swapped_out_or_unallocated=670.9M(100%)\r\nWritable regions: Total=1.3G written=0K(0%) resident=0K(0%) swapped_out=0K(0%) unallocated=1.3G(100%)\r\n\r\n                                VIRTUAL   REGION \r\nREGION TYPE                        SIZE    COUNT (non-coalesced) \r\n===========                     =======  ======= \r\nActivity Tracing                   256K        1 \r\nKernel Alloc Once                   32K        1 \r\nMALLOC                           256.2M       32 \r\nMALLOC guard page                   96K        5 \r\nMALLOC_MEDIUM (reserved)         584.0M        5         reserved VM address space (unallocated)\r\nMALLOC_NANO (reserved)           384.0M        1         reserved VM address space (unallocated)\r\nSTACK GUARD                       56.5M       32 \r\nStack                             24.0M       32 \r\nVM_ALLOCATE                       22.2G      921 \r\nVM_ALLOCATE (reserved)              64K        1         reserved VM address space (unallocated)\r\n__AUTH                             220K       44 \r\n__AUTH_CONST                      2887K      122 \r\n__DATA                            1259K      122 \r\n__DATA_CONST                      3904K      130 \r\n__DATA_DIRTY                       233K       50 \r\n__LINKEDIT                       586.3M        9 \r\n__OBJC_CONST                       260K       29 \r\n__OBJC_RO                         82.9M        1 \r\n__OBJC_RW                         3152K        1 \r\n__TEXT                            84.5M      136 \r\n__UNICODE                          592K        1 \r\ndyld private memory               1024K        1 \r\nmapped file                       33.6M       21 \r\nshared memory                       80K        5 \r\n===========                     =======  ======= \r\nTOTAL                             24.3G     1703 \r\nTOTAL, minus reserved VM space    23.3G     1703 \r\n```\r\n[Here\u0027s](https://github.com/dotnet/runtime/files/8489002/dotnet-2022-04-14-124620.ips.zip) the initial ips report file.\r\n\n\n### Reproduction Steps\n\n* Open [the following project](https://github.com/dotnet/runtime/files/8488894/WebApi.zip) in VS Code\r\n* Toggle a breakpoint in file `WeatherForecastController.cs` on line 25\r\n* Start debugging and perform Get request\r\n* Press step into\n\n### Expected behavior\n\nThe debug session is still alive and the app is working\n\n### Actual behavior\n\nApplication crash\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nSetting \u0027justMyCode\u0027 property to true allows me to properly debug the application.\n\n### Configuration\n\n* .NET 6\r\n* macOS\r\n* ARM 64\r\n\r\nThe issue is specific to this configuration\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eArsenyChernyaev\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-04-14T13:04:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Bi1vP",
                                           "createdAt":  "2022-04-14T21:40:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@hoyosjs ",
                                           "updatedAt":  "2022-04-14T21:40:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FFIGU",
                                           "createdAt":  "2022-06-17T15:14:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEPul7A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "artsiomrusak",
                                                                               "createdAt":  "2022-06-18T19:04:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cyril265",
                                                                               "createdAt":  "2022-06-29T11:21:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gurgendav",
                                                                               "createdAt":  "2022-06-29T11:29:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PascalSenn",
                                                                               "createdAt":  "2022-09-14T20:46:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vaags",
                                                                               "createdAt":  "2022-11-30T07:33:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "suchoss",
                                                                               "createdAt":  "2022-12-27T17:33:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Sljcom",
                                                                               "createdAt":  "2023-08-01T08:22:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gabrbuiv",
                                                                               "createdAt":  "2023-11-26T12:56:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Eagl61",
                                                                               "createdAt":  "2024-05-23T22:47:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DimaOrdenov",
                                                                               "createdAt":  "2024-07-12T09:35:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "WoZ",
                                                                               "createdAt":  "2024-11-28T10:15:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "doubleday",
                                                                               "createdAt":  "2025-04-26T07:10:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  12
                                                         },
                                           "author":  "theramzay",
                                           "body":  "Same story with dotnet 6.0.301, Mac m1 pro. Any updates? This is very annoying issue -- literally preventing from normal work.",
                                           "updatedAt":  "2022-06-17T15:14:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FurY3",
                                           "createdAt":  "2022-06-29T11:26:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD1U7fQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gurgendav",
                                                                               "createdAt":  "2022-06-29T11:29:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "theramzay",
                                                                               "createdAt":  "2022-06-29T11:35:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PascalSenn",
                                                                               "createdAt":  "2022-09-14T21:06:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "BAndysc",
                                                                               "createdAt":  "2022-10-19T02:59:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "suchoss",
                                                                               "createdAt":  "2022-12-27T17:33:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ipetrushevskiy",
                                                                               "createdAt":  "2023-03-10T10:54:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kpko",
                                                                               "createdAt":  "2023-07-28T21:04:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Sljcom",
                                                                               "createdAt":  "2023-08-01T08:22:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gabrbuiv",
                                                                               "createdAt":  "2023-11-26T12:56:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Eagl61",
                                                                               "createdAt":  "2024-05-23T22:48:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DimaOrdenov",
                                                                               "createdAt":  "2024-07-12T09:35:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SamBWagner",
                                                                               "createdAt":  "2024-10-08T23:15:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  12
                                                         },
                                           "author":  "cyril265",
                                           "body":  "Don\u0027t want to be rude but how is this major bug not being prioritized?",
                                           "updatedAt":  "2022-06-29T11:26:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FuvBs",
                                           "createdAt":  "2022-06-29T11:42:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "theramzay",
                                           "body":  "\u003e Don\u0027t want to be rude but how is this major bug not being prioritized?\r\n\r\nYeh, this \"future\" milestone makes me and my colleagues very depressive. We have to go manually to the code, set break point and then go to it by \"F5\" instead just use \"F11\" -- very frustrated experience.",
                                           "updatedAt":  "2022-06-29T11:42:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HGUed",
                                           "createdAt":  "2022-07-22T18:35:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@ramzzzay thanks for the feedback.  Moving back to .NET 7 for further investigation.",
                                           "updatedAt":  "2022-07-22T18:35:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IHmsj",
                                           "createdAt":  "2022-08-09T22:26:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "derekbking",
                                           "body":  "Experiencing this issue on my M1 Macbook as well. Debugging external libraries feels very clunky at the moment.",
                                           "updatedAt":  "2022-08-09T22:26:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IHxqS",
                                           "createdAt":  "2022-08-09T23:42:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "@derekbking I am looking at this at the moment. I know why this is happening, just trying to see all cases where it could happen. Is the library you\u0027re stepping into public? Is it part of the .NET platform (any system or ASP libraries?)? Just want to make sure I\u0027ll address all these issues.",
                                           "updatedAt":  "2022-08-09T23:42:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IOaIi",
                                           "createdAt":  "2022-08-11T09:15:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MiguelFernandezCimp",
                                           "body":  "This is impacting my workflow as well, we recently switched to .net for one of our projects and this makes it very annoying and hard to sell :( \r\n\r\n@hoyosjs I\u0027ve seen it happening on any library. You can still press F12 into those methods that are from other libraries / internal and set a breakpoint, that would work. But if you don\u0027t do that, and just keep stepping into, then it crashes.... ",
                                           "updatedAt":  "2022-08-11T09:15:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IT2TT",
                                           "createdAt":  "2022-08-12T14:19:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCqewJA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "theramzay",
                                                                               "createdAt":  "2022-08-12T14:22:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "albertocruzdg",
                                           "body":  "Is there any chance this can be resolved in a .NET 6.0.x release?",
                                           "updatedAt":  "2022-08-12T14:19:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IUiCk",
                                           "createdAt":  "2022-08-12T17:17:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "If the fix is low risk enough - given how many of you are experiencing this issue - I will take it to shiproom to request a 6.0 backport.",
                                           "updatedAt":  "2022-08-12T17:17:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IUirY",
                                           "createdAt":  "2022-08-12T17:21:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "derekbking",
                                           "body":  "\u003e @derekbking I am looking at this at the moment. I know why this is happening, just trying to see all cases where it could happen. Is the library you\u0027re stepping into public? Is it part of the .NET platform (any system or ASP libraries?)? Just want to make sure I\u0027ll address all these issues.\r\n\r\nIt’s happening on nuget libraries hosted internally by my company.",
                                           "updatedAt":  "2022-08-12T17:21:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IUj52",
                                           "createdAt":  "2022-08-12T17:27:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "\u003e It’s happening on nuget libraries hosted internally by my company.\r\n\r\nHi @derekbking!  Out of curiosity, are these nuget packages built with crossgen (ready2run)?  Do you see the issue when stepping into one of the libraries included with the nuget package or when stepping through them and into a System.Private.CoreLib (or other R2R) library?  The reason why we ask is that this bug is tracking a very specific issue where stepping into a r2r image on macos arm64 causes the process to crash.  If this is not an R2R issue, I suggest that we open a separate github issue to track that and if possible, share a repro of the issue.",
                                           "updatedAt":  "2022-08-12T17:27:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KJEOS",
                                           "createdAt":  "2022-09-12T15:13:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Removing the \"blocking-release\" tag as the fix is likely more involved than we can fit into the .net 7 release, and so we will target addressing this issue in .net 7 servicing.  ",
                                           "updatedAt":  "2022-09-12T15:13:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KWEzS",
                                           "createdAt":  "2022-09-14T21:04:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODjAFPA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mmesdag",
                                                                               "createdAt":  "2022-09-14T21:12:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dtarachan",
                                                                               "createdAt":  "2022-09-21T17:15:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mirekkukla",
                                                                               "createdAt":  "2023-01-29T19:27:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dgioulakis",
                                                                               "createdAt":  "2023-03-13T18:44:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gbrantzos",
                                                                               "createdAt":  "2023-06-23T14:56:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AndriiKuznietsov",
                                                                               "createdAt":  "2024-01-24T17:41:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Glinte",
                                                                               "createdAt":  "2024-04-30T23:36:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Eagl61",
                                                                               "createdAt":  "2024-05-23T22:38:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  8
                                                         },
                                           "author":  "PascalSenn",
                                           "body":  "Hi @tommcdon \r\n\r\nI am still trying to understand this issue, but it seems like this basically breaks debugging in rider on m1 macs. at least this issue is where jetbrains referes to in the following issues.\r\n\r\n- https://youtrack.jetbrains.com/issue/RIDER-69625\r\n- https://youtrack.jetbrains.com/issue/RIDER-82121/Rider-stops-debugger-after-exiting-method\r\n- https://youtrack.jetbrains.com/issue/RIDER-79904/Random-crash-when-debugging-a-NET-6-Application-using-M1M1-Pro-Macs\r\n- https://youtrack.jetbrains.com/issue/RIDER-76256/Debugger-crashes-when-stepping-in-tor\r\n\r\nSo as this issue only surface on the new M1 chips it will affect an increasing number of people. In JetBrains Rider the `justMyCode` is disabled by default and when you step into/out of a method you likely end up in external code. \r\nAs this bug basically kills the application instantly in this case, every dotnet developer on a M1 mac will not be able to use Rider properly. \r\n\r\nI am not sure what @ArsenyChernyaev and the rider team can do to avoid this inconvenience other than enabling `justMyCode` on M1 Macs by default until this issue is resolved. But to be honest, source stepping is more or less the biggest selling point of rider, because (when it works) its super powerful and very well done. \r\n\r\nOf course there are workarounds. Like opening up a method with F12, then setting a breakpoint, then running to that breakpoint with F5. But it is really a massive pain. \r\n\r\nI understand that this might not make it into the release of .NET 7. I mean, who am I to judge, you guys are busy and know what you do.\r\nI just want to make you aware that this issue is probably affecting every developer on a M1 Mac that uses rider. ",
                                           "updatedAt":  "2022-09-14T21:04:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KWKmt",
                                           "createdAt":  "2022-09-14T21:33:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODgKlyw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "PascalSenn",
                                                                               "createdAt":  "2022-09-15T08:44:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Carael",
                                                                               "createdAt":  "2022-09-15T09:00:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "ezhevita",
                                                                               "createdAt":  "2022-09-15T15:41:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "cyril265",
                                                                               "createdAt":  "2022-09-16T12:30:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "kawwik",
                                                                               "createdAt":  "2022-09-20T18:40:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "niklasstich",
                                                                               "createdAt":  "2022-10-04T11:24:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "BrunoJuchli",
                                                                               "createdAt":  "2022-11-14T10:34:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "suchoss",
                                                                               "createdAt":  "2022-12-27T17:36:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "mayconbeserra",
                                                                               "createdAt":  "2023-01-25T10:15:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "wojtek-viirtue",
                                                                               "createdAt":  "2023-03-31T01:19:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "antonovicha",
                                                                               "createdAt":  "2023-05-04T13:34:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Sljcom",
                                                                               "createdAt":  "2023-07-24T17:38:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "kpko",
                                                                               "createdAt":  "2023-07-28T21:06:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "amirsabanovic",
                                                                               "createdAt":  "2024-01-11T14:01:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Glinte",
                                                                               "createdAt":  "2024-04-30T23:36:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  15
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "I am currently looking at this - there\u0027s just a few cases where it happens. A workaround is to start the debugging session with the env var `DOTNET_ReadyToRun=0` set. And I want to apologize that this is affecting so many of you - m1 has brought some unique challenges to how different layers were implemented and we are looking at how we can hunt the tail of issues here.",
                                           "updatedAt":  "2022-09-14T21:34:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KX6kk",
                                           "createdAt":  "2022-09-15T08:44:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCx12Gw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "suchoss",
                                                                               "createdAt":  "2022-12-27T17:37:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "PascalSenn",
                                           "body":  "@hoyosjs  I was not aware of this flag and it does indeed seem to improve the debugging experience. Thanks for helping out!\r\n\r\nI have updated the issues on the JetBrains issue tracker to point other users into the right direction. \r\n\r\nFor anyone interested: https://docs.microsoft.com/en-us/dotnet/core/runtime-config/compilation#readytorun",
                                           "updatedAt":  "2022-09-15T08:50:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Rd8qU",
                                           "createdAt":  "2022-12-28T17:17:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC2Ypag==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mayconbeserra",
                                                                               "createdAt":  "2023-02-07T22:38:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PascalSenn",
                                                                               "createdAt":  "2023-02-08T08:40:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "petrkoutnycz",
                                                                               "createdAt":  "2023-02-20T08:58:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "suchoss",
                                           "body":  "@hoyosjs \r\nWith **m1** if I use `DOTNET_ReadyToRun=0` together with `justMyCode` enabled, then it still doesn\u0027t work in some specific cases. I can try to create a minimalistic project where the debugger silently fails and kills debugging session even with both options set. It will take me some time, so let me know if you need it.\r\n\r\nBtw. what is the status of this issue? Can we expect it in a near future?",
                                           "updatedAt":  "2022-12-28T17:17:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Uu780",
                                           "createdAt":  "2023-02-07T23:03:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODNnGRA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "theramzay",
                                                                               "createdAt":  "2023-02-08T09:18:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "esersahin",
                                                                               "createdAt":  "2023-02-17T19:13:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cyril265",
                                                                               "createdAt":  "2023-02-26T15:08:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alanpangexperian",
                                                                               "createdAt":  "2023-03-04T01:00:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vzam",
                                                                               "createdAt":  "2023-03-07T08:21:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dgioulakis",
                                                                               "createdAt":  "2023-03-10T22:34:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rmagruder",
                                                                               "createdAt":  "2023-03-21T17:34:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gabrbuiv",
                                                                               "createdAt":  "2023-11-26T13:00:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  8
                                                         },
                                           "author":  "gbreen12",
                                           "body":  "Any updates on this issue?",
                                           "updatedAt":  "2023-02-07T23:03:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5XS5zf",
                                           "createdAt":  "2023-03-10T22:35:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODT8UdA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "theramzay",
                                                                               "createdAt":  "2023-03-11T13:44:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vzam",
                                                                               "createdAt":  "2023-03-17T11:51:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rmagruder",
                                                                               "createdAt":  "2023-03-21T17:34:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bmcclory",
                                                                               "createdAt":  "2023-05-10T19:28:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JoakimJohesan",
                                                                               "createdAt":  "2023-06-15T06:31:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Sljcom",
                                                                               "createdAt":  "2023-07-24T17:35:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gabrbuiv",
                                                                               "createdAt":  "2023-11-26T13:00:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "yahoo0742",
                                                                               "createdAt":  "2024-01-18T00:06:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AndriiKuznietsov",
                                                                               "createdAt":  "2024-01-24T17:42:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  9
                                                         },
                                           "author":  "dgioulakis",
                                           "body":  "Was so excited to get started working with my new macbook. This is literally the first thing I ran into almost immediately. 😒 Please prioritize a fix for this.",
                                           "updatedAt":  "2023-03-10T22:35:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Y4Gtk",
                                           "createdAt":  "2023-03-30T23:47:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "albertocruzdg",
                                           "body":  "7.0.0 is already out, will this be moved to an in-progress milestone?",
                                           "updatedAt":  "2023-03-30T23:47:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hpCtB",
                                           "createdAt":  "2023-07-17T13:30:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODBoP6Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cauefelipe1",
                                                                               "createdAt":  "2023-07-17T16:12:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "theramzay",
                                                                               "createdAt":  "2023-07-17T16:30:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Sljcom",
                                                                               "createdAt":  "2023-07-24T17:35:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "mmesdag",
                                           "body":  "Any updates here? Likelihood of the fix making the .net 8 release?",
                                           "updatedAt":  "2023-07-17T13:30:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hqNN7",
                                           "createdAt":  "2023-07-17T16:13:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODBoP8Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "theramzay",
                                                                               "createdAt":  "2023-07-17T16:30:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Sljcom",
                                                                               "createdAt":  "2023-07-24T17:35:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "cauefelipe1",
                                           "body":  "I would like an update on this as well. This is impacting a lot of the daily work here.",
                                           "updatedAt":  "2023-07-17T16:13:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hqYaY",
                                           "createdAt":  "2023-07-17T16:42:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODjMqBA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cauefelipe1",
                                                                               "createdAt":  "2023-07-17T23:49:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "petrkoutnycz",
                                                                               "createdAt":  "2023-09-07T07:11:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Glinte",
                                                                               "createdAt":  "2024-04-30T23:37:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Eagl61",
                                                                               "createdAt":  "2024-05-25T11:28:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@mmesdag @cauefelipe1 we apologize for the long time it is taking to address this issue.  This is a very difficult issue to solve - and so I have added the hard-problem label to help communicate that we are working on it but setting expectations that this is a difficult one to fix.  For context, the \"bug\" here has likely existed for a very, very long time.  The regression (stepping into non-user code) was introduced when we enabled the Ready-To-Run on M1 in a .NET 6 servicing update.  Just for your reference, there is a workaround which we hope isn\u0027t too difficult to use - https://github.com/dotnet/runtime/issues/68018#issuecomment-1247324589.",
                                           "updatedAt":  "2023-07-17T16:42:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iaHP2",
                                           "createdAt":  "2023-07-26T05:40:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "peppy",
                                           "body":  "Weirdly, the `DOTNET_ReadyToRun=0` workaround doesn\u0027t seem to work for me in Rider (crash when stepping into non-local code). I\u0027ve attempted specifying it at a system level but it doesn\u0027t seem to do anything:\r\n\r\n![JetBrains Rider 2023-07-26 at 05 30 35](https://github.com/dotnet/runtime/assets/191335/69faff41-4369-4ad2-860b-3d22c6091fdc)\r\n\r\nDisabling just-my-code does work and is an amicable resolution if you don\u0027t need to step into internals of other libraries:\r\n\r\n![image](https://github.com/dotnet/runtime/assets/191335/b62633db-b590-4bdd-9abe-3e6863b2bfb3)\r\n",
                                           "updatedAt":  "2023-07-26T05:40:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zw7Kv",
                                           "createdAt":  "2024-02-13T19:06:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "PascalSenn",
                                           "body":  " Something is weird about this issue. \r\n \r\n @hoyosjs worte:\r\n\u003e I am currently looking at this - there\u0027s just a few cases where it happens\r\n\r\n@tommcdon wrote:\r\n\u003e  Just for your reference, there is a workaround which we hope isn\u0027t too difficult to use \r\n\r\nFrom these comments i take the issue only affects a small subset of users and that there is a workaround for this. \r\n\r\nBut then i wonder why my debugger experience is broken since over a year.  (instead of `Stepping Into (F11)` a async method, I `Go To Defintion (F12)`, set the breaking point inside and then `Continue (F5)` to this breakpoint - i have to do this since over a year). \r\n\r\nThat\u0027s an issue that affects every day and i guess i just learned to live with it. \r\n\r\nThe point of this comment is not to put more pressure on @tommcdon, @hoyosjs   or anyone else. I just wonder:\r\nCould it be that there is a misunderstanding here? \r\n\r\nIf the bug only affects a small subset of cases + there is a workaround for it, but the folks over at jetbrains tell us that the reason for the debugger crashes is this issue; then either the classification  \"a few cases\" here is wrong (as it happens daily to me) or the classification `Third Party Problem` over at jetbrians is wrong. \r\n\r\nCould it be that this is not the same bug?\r\n\r\nRelevant Your track issue):\r\nhttps://youtrack.jetbrains.com/issue/RIDER-69625/Debugger-crashes-if-trying-to-debug-external-code-on-macOS-while-debugging-ASP.NET-projects\r\n\r\n",
                                           "updatedAt":  "2024-02-13T19:09:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5z0R5b",
                                           "createdAt":  "2024-02-14T04:59:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODWq7tQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "theramzay",
                                                                               "createdAt":  "2024-02-14T05:11:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "peppy",
                                           "body":  "For whatever it\u0027s worth, Jetbrains have hard blocked this feature for now, likely due to overwhelming reports from users of the brokenness:\r\n\r\n![2024-02-14 12 58 42@2x](https://github.com/dotnet/runtime/assets/191335/03db96dc-971d-47c3-a54b-afa6158d77a3)\r\n\r\n\u003e But then i wonder why my debugger experience is broken since over a year. (instead of Stepping Into (F11) a async method, I Go To Defintion (F12), set the breaking point inside and then Continue (F5) to this breakpoint - i have to do this since over a year).\r\n\r\nThis matches my experience.",
                                           "updatedAt":  "2024-02-14T04:59:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5z0UP_",
                                           "createdAt":  "2024-02-14T05:13:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "theramzay",
                                           "body":  "\u003e For whatever it\u0027s worth, Jetbrains have hard blocked this feature for now, likely due to overwhelming reports from users of the brokenness:\n\u003e \n\u003e \n\u003e \n\u003e ![2024-02-14 12 58 42@2x](https://github.com/dotnet/runtime/assets/191335/03db96dc-971d-47c3-a54b-afa6158d77a3)\n\u003e \n\u003e \n\u003e \n\u003e \u003e But then i wonder why my debugger experience is broken since over a year. (instead of Stepping Into (F11) a async method, I Go To Defintion (F12), set the breaking point inside and then Continue (F5) to this breakpoint - i have to do this since over a year).\n\u003e \n\u003e \n\u003e \n\u003e This matches my experience.\n\nAnd my experience too for two years. ",
                                           "updatedAt":  "2024-02-14T05:13:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50NDMm",
                                           "createdAt":  "2024-02-17T01:33:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dluc",
                                           "body":  "While using Rider (2023.3.3), the workaround with `DOTNET_ReadyToRun=0`/`COMPlus_ReadyToRun=0` is either not working or Rider has disabled the feature entirely (https://youtrack.jetbrains.com/issue/RIDER-96203).\r\n\r\nAre there other workarounds? Maybe debug using an old version of .NET (when possible)?\r\n\r\nJetBrains tickets pointing here:\r\n* https://youtrack.jetbrains.com/issue/RIDER-69625\r\n* https://youtrack.jetbrains.com/issue/RIDER-96203\r\n* https://youtrack.jetbrains.com/issue/RIDER-98504\r\n* https://youtrack.jetbrains.com/issue/RIDER-102673",
                                           "updatedAt":  "2024-02-17T01:33:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc51AQkl",
                                           "createdAt":  "2024-02-25T17:08:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "WoZ",
                                           "body":  "It affects me too. JFYI",
                                           "updatedAt":  "2024-02-25T17:08:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc511oFl",
                                           "createdAt":  "2024-03-04T16:31:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "markusroessler",
                                           "body":  "Same happens on my M2 Mac Book when stepping into assemblies whose PDBs have the source code embedded.",
                                           "updatedAt":  "2024-03-04T16:31:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc53VYKj",
                                           "createdAt":  "2024-03-16T19:08:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODjL9sg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "janbiehl",
                                                                               "createdAt":  "2024-03-29T18:06:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Eagl61",
                                                                               "createdAt":  "2024-05-23T22:44:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "suchoss",
                                                                               "createdAt":  "2024-05-25T07:45:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "lukevp",
                                           "body":  "This is also impacting me and makes Rider almost unusable for debugging when external libraries are involved.",
                                           "updatedAt":  "2024-03-16T19:08:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc56Am2n",
                                           "createdAt":  "2024-04-10T09:11:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODk1PEQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "theramzay",
                                                                               "createdAt":  "2024-04-10T09:12:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Glinte",
                                                                               "createdAt":  "2024-04-30T23:34:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "suchoss",
                                                                               "createdAt":  "2024-05-25T07:45:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rodion-m",
                                                                               "createdAt":  "2024-06-06T18:36:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "ForNeVeR",
                                           "body":  "Is there any news on the issue? Can confirm that `DOTNET_ReadyToRun=0` doesn\u0027t help.",
                                           "updatedAt":  "2024-04-10T09:11:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-6GkM",
                                           "createdAt":  "2024-05-24T10:09:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Eagl61",
                                           "body":  "Any news please? Is it possible to use something in MacOS to debug external code in .Net? Because sometimes this feature saves “life” and time.",
                                           "updatedAt":  "2024-05-24T10:09:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5---h-",
                                           "createdAt":  "2024-05-24T22:23:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "\u003e Is there any news on the issue? Can confirm that DOTNET_ReadyToRun=0 doesn\u0027t help.\r\n\r\nThat... is not expected. Is there any repro you have that DOTNET_ReadyToRun doesn\u0027t fix?",
                                           "updatedAt":  "2024-05-24T22:23:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_Auni",
                                           "createdAt":  "2024-05-25T06:27:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD819YQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "suchoss",
                                                                               "createdAt":  "2024-05-25T07:46:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Eagl61",
                                                                               "createdAt":  "2024-05-25T10:33:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "WoZ",
                                                                               "createdAt":  "2024-11-28T10:15:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "PascalSenn",
                                           "body":  "Essentially, debugging third-party asynchronous code can cause the application to crash. This typically occurs when you exit the method and step through the asynchronous state machine. \r\n\r\nRider has since disabled the feature to step through third-party code on macOS, as it is highly problematic. Because if you press `F10` to step to the next line and you are on a `return`, you would end up stepping through the statemachine which causes an application crash.\r\n\r\nThis issue is not limited to specific cases; it happens consistently.\r\n\r\nhttps://github.com/dotnet/runtime/issues/68018#issuecomment-1942205103\r\n\r\nIt\u0027s known problem:\r\n\r\n- https://youtrack.jetbrains.com/issue/RIDER-69625\r\n- https://youtrack.jetbrains.com/issue/RIDER-96203\r\n- https://youtrack.jetbrains.com/issue/RIDER-98504\r\n- https://youtrack.jetbrains.com/issue/RIDER-102673",
                                           "updatedAt":  "2024-05-25T06:27:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_BvqJ",
                                           "createdAt":  "2024-05-25T09:38:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODjMkPQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Eagl61",
                                                                               "createdAt":  "2024-05-25T11:01:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "dluc",
                                           "body":  "I hope that Windows transitioning to Qualcomm ARM CPUs will lead to more .NET developers focusing on ARM, ultimately increasing the visibility of this issue.",
                                           "updatedAt":  "2024-05-25T09:38:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_CMLN",
                                           "createdAt":  "2024-05-25T13:55:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "It would help if this issue is updated with details like stacktrace of the crash and .NET runtime version. The code referenced by the stacktrace in the top post does not exist in .NET 8 (it was deleted in #83632).",
                                           "updatedAt":  "2024-05-25T13:55:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CFSIq",
                                           "createdAt":  "2024-06-21T09:56:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD819Zw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ForNeVeR",
                                                                               "createdAt":  "2024-06-21T10:12:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mikelle-rogers",
                                                                               "createdAt":  "2024-07-24T00:51:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "WoZ",
                                                                               "createdAt":  "2024-11-28T10:15:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "ArseniiCherniaev",
                                           "body":  "I\u0027ve just checked the state of the issue in .NET 9 Preview 5. Here\u0027s [the sample project](https://github.com/user-attachments/files/15925633/TestApp.zip) and [the related ips report](https://github.com/user-attachments/files/15925935/TestApp-2024-06-21-113815.ips.zip).\r\nHowever, I can confirm that in .NET 9 `DOTNET_ReadyToRun` helps in many known cases (not in this one, though)\r\n\r\n",
                                           "updatedAt":  "2024-06-21T09:56:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CJpBn",
                                           "createdAt":  "2024-06-21T23:06:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e [the related ips report](https://github.com/user-attachments/files/15925935/TestApp-2024-06-21-113815.ips.zip).\r\n\r\n`(Data Abort) byte write Permission fault` at:\r\n```\r\nDebuggerController::ApplyPatch(DebuggerControllerPatch*)\r\nDebuggerController::AddAndActivateNativePatchForAddress(unsigned char const*, FramePointer, bool, TraceType)\r\nDebuggerController::PatchTrace(TraceDestination*, FramePointer, bool)\r\nDebuggerStepper::TrapStepInto(ControllerStackInfo*, unsigned char const*, TraceDestination*)\r\nDebuggerStepper::TrapStepInHelper(ControllerStackInfo*, unsigned char const*, unsigned char const*, bool, bool)\r\nDebuggerStepper::TrapStep(ControllerStackInfo*, bool)\r\nDebuggerStepper::TriggerSingleStep(Thread*, unsigned char const*)\r\nDebuggerController::ScanForTriggers(unsigned char const*, Thread*, _CONTEXT*, DebuggerControllerQueue*, SCAN_TRIGGER, TP_RESULT*)\r\nDebuggerController::DispatchPatchOrSingleStep(Thread*, _CONTEXT*, unsigned char const*, SCAN_TRIGGER)\r\nDebuggerController::DispatchNativeException(_EXCEPTION_RECORD*, _CONTEXT*, unsigned int, Thread*)\r\nDebugger::FirstChanceNativeException(_EXCEPTION_RECORD*, _CONTEXT*, unsigned int, Thread*, int)\r\nHandleHardwareException(PAL_SEHException*)\r\nSEHProcessException(PAL_SEHException*)\r\nPAL_DispatchExceptionInner(_CONTEXT*, _EXCEPTION_RECORD*)\r\nPAL_DispatchException\r\nPAL_DispatchExceptionWrapper\r\n...\r\nCallDescrWorkerInternal\r\nMethodDescCallSite::CallTargetWorker(unsigned long long const*, unsigned long long*, int)\r\nRunMain(MethodDesc*, short, int*, PtrArray**)\r\nAssembly::ExecuteMainMethod(PtrArray**, int)\r\n```\r\n\r\nIt would be useful to find out what is the method that we are trying to patch here.",
                                           "updatedAt":  "2024-06-21T23:06:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CJp19",
                                           "createdAt":  "2024-06-21T23:12:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "We flip permissions around these patches here; https://github.com/dotnet/runtime/blob/4b9a1b2d956f4a10a28b8f5f3f725e76eb6fb826/src/coreclr/debug/ee/controller.cpp#L1344-L1397 \r\n\r\nHow does the thread safety work here - what prevents some other thread doing the same permission flip and colliding with the permissions flip done by the current thread?\r\n\r\ncc @janvorli ",
                                           "updatedAt":  "2024-06-21T23:13:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ILiNT",
                                           "createdAt":  "2024-08-12T19:08:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Since #106105 is a partial fix, moving this tracking issue to .NET 10 to track a more complete fix in the next release",
                                           "updatedAt":  "2024-08-12T19:08:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MnYVZ",
                                           "createdAt":  "2024-09-18T18:22:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOESh22w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Eagl61",
                                                                               "createdAt":  "2024-09-18T18:32:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "christianklauss",
                                                                               "createdAt":  "2024-09-19T10:11:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NinoFloris",
                                                                               "createdAt":  "2024-09-19T16:07:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eugeniugrigoras",
                                                                               "createdAt":  "2024-09-24T16:57:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "keshavkaul",
                                                                               "createdAt":  "2024-10-01T13:53:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "attilah",
                                                                               "createdAt":  "2024-10-02T19:16:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AntPolkanov",
                                                                               "createdAt":  "2024-10-08T22:43:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SamBWagner",
                                                                               "createdAt":  "2024-10-08T23:16:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "josh-baker-cko",
                                                                               "createdAt":  "2024-11-05T16:01:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dguisinger",
                                                                               "createdAt":  "2024-11-28T06:52:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "theramzay",
                                                                               "createdAt":  "2024-11-28T08:27:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AndriiKuznietsov",
                                                                               "createdAt":  "2024-11-28T08:28:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "WoZ",
                                                                               "createdAt":  "2024-11-28T10:16:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ipjohnson",
                                                                               "createdAt":  "2025-02-15T02:47:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jpc632",
                                                                               "createdAt":  "2025-05-18T13:35:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  15
                                                         },
                                           "author":  "justin-caldicott",
                                           "body":  "Most devs will be using an Apple silicon Mac. Hope the priority of this can be bumped up. It\u0027s hard to debug when not able to step into/add breakpoints to external (sometimes other NuGet packages from your own org) packages. Using Rider.",
                                           "updatedAt":  "2024-09-18T18:22:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6VVU47",
                                           "createdAt":  "2024-11-28T07:04:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOESh23g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "theramzay",
                                                                               "createdAt":  "2024-11-28T08:26:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AndriiKuznietsov",
                                                                               "createdAt":  "2024-11-28T08:28:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "WoZ",
                                                                               "createdAt":  "2024-11-28T10:16:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eagl16",
                                                                               "createdAt":  "2024-11-28T10:18:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NinoFloris",
                                                                               "createdAt":  "2024-11-28T10:21:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "throw-away-github",
                                                                               "createdAt":  "2024-11-28T18:37:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jpc632",
                                                                               "createdAt":  "2025-05-18T13:35:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "dguisinger",
                                           "body":  "I am struggling through constant debugger crashes with .NET 8 on MacOS due to this issue... are we really saying we can\u0027t have a fix for this in the current LTS?  Its another 11 months until .NET 10 comes out.",
                                           "updatedAt":  "2024-11-28T07:04:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6VWr17",
                                           "createdAt":  "2024-11-28T10:16:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOESh24A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "theramzay",
                                                                               "createdAt":  "2024-11-28T12:25:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dguisinger",
                                                                               "createdAt":  "2024-11-28T17:43:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "throw-away-github",
                                                                               "createdAt":  "2024-11-28T18:37:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jpc632",
                                                                               "createdAt":  "2025-05-18T13:35:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "WoZ",
                                           "body":  "It\u0027s frustrating. 2.5 years without any reaction.",
                                           "updatedAt":  "2024-11-28T10:16:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6VZ3lG",
                                           "createdAt":  "2024-11-28T17:48:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOESh27Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "eagl16",
                                                                               "createdAt":  "2024-11-28T17:50:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "throw-away-github",
                                                                               "createdAt":  "2024-11-28T18:37:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "BAndysc",
                                                                               "createdAt":  "2024-11-28T18:46:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "theramzay",
                                                                               "createdAt":  "2024-11-29T07:56:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "theramzay",
                                                                               "createdAt":  "2024-11-29T07:57:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jpc632",
                                                                               "createdAt":  "2025-05-18T13:36:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "jpc632",
                                                                               "createdAt":  "2025-05-18T13:36:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "dguisinger",
                                           "body":  "The worst part is the number of people who are probably struggling with it and thinking this is Rider\u0027s fault... I know every time I ran into it I did - until I stumbled across this yesterday.  When I go to developer conferences, its like 90% macbooks... are you guys telling me nobody on the dotnet team uses a Mac for development?  This goes unnoticed and uncared about for this long and that its now \"we will fix it in a year\".",
                                           "updatedAt":  "2024-11-28T17:48:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Va4xW",
                                           "createdAt":  "2024-11-28T23:35:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD-RtGg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2024-11-29T00:25:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "suchoss",
                                                                               "createdAt":  "2024-11-29T08:40:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ledzep443",
                                                                               "createdAt":  "2024-12-09T23:20:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "jkotas",
                                           "body":  "- Rider implemented workaround that disables stepping in external code. If you are seeing crashes on up-to-date Rider, it is probably some other issue.\n- .NET 9 has a better workaround that avoids crashes, but it can lead to suboptimal stepping behavior in some situations.\n- The proper fix is work in progress for .NET 10. As you can see from the linked PRs, it is not a simple fix.",
                                           "updatedAt":  "2024-11-28T23:35:08Z"
                                       }
                                   ],
                         "totalCount":  49
                     },
        "title":  "Application crash while stepping into if \u0027justMyCode\u0027 is disabled",
        "labels":  [
                       "bug",
                       "arch-arm64",
                       "os-mac-os-x",
                       "area-Diagnostics-coreclr",
                       "hard-problem"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/68446",
        "createdAt":  "2022-04-23T19:43:37Z",
        "number":  68446,
        "author":  "davidfowl",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-23T21:28:53Z",
        "body":  "We should mark known blocking methods (call an that mutates the thread state) so that event pipe can distinguish between time on the stack because of blocking vs not. While this won\u0027t be perfect when calling foreign code (pinvokes etc) we should be able to have tool distinguish the very common know cases.\r\n\r\ncc @noahfalk @brianrob ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZnThGQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5CBTh6",
                                           "createdAt":  "2022-04-23T19:43:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-04-23T19:43:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CCT2i",
                                           "createdAt":  "2022-04-24T19:20:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWe should known blocking methods so that event pipe can distinguish between time on the stack because of blocking vs not. While this won\u0027t be perfect when calling foreign code (pinvokes etc) we should be able to have tool distinguish the very common know cases.\r\n\r\ncc @noahfalk @brianrob \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edavidfowl\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-04-24T19:20:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CCk4n",
                                           "createdAt":  "2022-04-25T01:33:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCZj56g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davidfowl",
                                                                               "createdAt":  "2022-04-25T02:11:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "Presumably this would only be useful when coupled with tooling that can recognize some hypothetical new blocking marker so I\u0027d expect this to need work in TraceEvent/Perfview/VS before it has any end-user value. This will need prioritization as part of an E2E profiling scenario.",
                                           "updatedAt":  "2022-04-25T01:33:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CCp4Q",
                                           "createdAt":  "2022-04-25T02:12:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "We should do the work in the runtime because of the schedule, we can update tools out of band ",
                                           "updatedAt":  "2022-04-25T02:12:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CHViT",
                                           "createdAt":  "2022-04-26T02:03:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCZxPVg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "davidfowl",
                                                                               "createdAt":  "2022-04-26T03:40:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "brianrob",
                                           "body":  "This could be a very nice way to curate the \"time spent\" in a profile.  Imagine having categories such as \"blocked time\", \"locks\", \"external\", etc.  I like this, but I agree that we need to plan what the E2E looks like before we do the work in the runtime.  Agreed that the work in out-of-band tools can wait - just want to make sure that we accurately plan the scenario so that what we do in the runtime ends up working.  FWIW, we might be able to do some of this with existing events, such as Contention/Start and Contention/Stop.  Same with GC time.",
                                           "updatedAt":  "2022-04-26T02:03:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CfhX3",
                                           "createdAt":  "2022-05-03T02:43:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I\u0027m guessing we can also accomplish a similar thing purely on the tools side by special casing blocking APIs and categorizing blocked time as such.",
                                           "updatedAt":  "2022-05-03T02:43:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CiT7B",
                                           "createdAt":  "2022-05-03T16:23:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "brianrob",
                                           "body":  "There is likely a lot that can happen in the tools.  It won\u0027t be perfect (e.g. inlining could impact our ability to see particular frames that represent blocked time), but we should come up with a list and then see what we\u0027d have to do to support each one.",
                                           "updatedAt":  "2022-05-03T16:23:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mZl3T",
                                           "createdAt":  "2023-09-13T16:51:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@lateralusX ",
                                           "updatedAt":  "2023-09-13T16:51:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mdOEZ",
                                           "createdAt":  "2023-09-14T07:47:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODH_axw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2023-09-27T20:15:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "lateralusX",
                                           "body":  "I have been thinking to improve our sample profiler since I originally ported EventPipe to Mono, that could give us more options to do additional thread analyses in the future. The initial idea is to make the internals of EventPipe sample profiler runtime specifics, so each runtime implementation and platform can use different techniques on how to stop/sample/restart threads. In current sample profiler we use STW \"Stop The World\" to run this sequence on all platforms, but that adds a bunch of side effects and potential overhead (for example, CoreCLR will trigger GC events as a side effect). On Mono, we had an alternative approach in the past where we used pthread signals on platforms supporting it, meaning that the sample thread would raise async signals to threads that dumped samples, without bringing complete runtime to a halt on every sample interval. Since a thread in signal state can only call async signal safe API\u0027s (EventPipe is not async signal safe), we would need to store the data in a lock free queue that the sample thread would write to EventPipe on every sample interval. To make that accurate we would need a new V2 of our sample profiler event, since our current event uses the timestamp from EventPipe as the timestamp for the sample, but since timestamps can happen async we would need to let each thread sample its own time and that time will then be included as a value on the new V2 of sample profile event. Since we would need to extend the sample profiler event with additional fields, we could then take the opportunity to include optional additional data on the sample profiler event, like a threads current cpu time (user/kernel thread time) and if we include that data, tools could start to calculate how much CPU time a specific thread used over time and since we carry callstacks with the sample profile events it is possible to find blocking methods.\r\n\r\nEach runtime could then implement the internal sampling mechanism differently based on runtime and platform support, but still making sure we get additional data on the new version of the sample profile event regardless if runtime uses STW, signals or some other method to capture that data on every sample interval. If the platform is not capable to retrieve things like user, kernel thread time, then these fields will be 0, so tooling need to view them as optional.",
                                           "updatedAt":  "2023-09-14T07:53:10Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Improve event pipe thread time analysis by detecting blocking methods",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/68585",
        "createdAt":  "2022-04-27T04:29:46Z",
        "number":  68585,
        "author":  "nxbear",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-05-17T23:07:52Z",
        "body":  "### Description\r\n\r\nTo develop CLR profiler in Linux, I\u0027m testing using samples in \"clr-samples\", but when \"CorProfilerInfo-\u003eGetFunctionInfo\" function called, crash occurs on libcoreclr.so.\r\n\r\n### Reproduction Steps\r\n\r\nI tested using the Dockerfile below.\r\n\r\n- Run the docker instance\r\n  * `docker run -d --name clrprofiler clrprofiler`\r\n- Enter into the clrprofiler instance\r\n  * `docker exec -it clrprofiler bash`\r\n- Profiler is built on \"/Profiler/clr-samples/ProfilingAPI/ReJITEnterLeaveHooks/Profiler.so\"\r\n- I created a default console program in \"/Profiler/TestConsoleProgram\".\r\n- Running the TestConsoleProgram with the \"dotnet run\" command causes a libcoreclr.so crash.\r\n  * `cd /Profiler/TestConsoleProgram`\r\n  * `dotnet run`\r\n\r\n[Dockerfile.txt](https://github.com/dotnet/runtime/files/8568328/Dockerfile.txt)\r\n\r\n```\r\nFROM mcr.microsoft.com/dotnet/sdk:5.0\r\n\r\nRUN apt-get update \u0026\u0026 apt-get install procps telnet vim net-tools libc6-dev lsof git clang -y\r\n#RUN dotnet tool install -g dotnet-sos\r\n#RUN /root/.dotnet/tools/dotnet-sos install\r\nWORKDIR /Profiler\r\nRUN git clone https://github.com/microsoft/clr-samples.git\r\nRUN git clone https://github.com/dotnet/runtime --branch v5.0.16\r\n#RUN git clone https://github.com/dotnet/runtime\r\n\r\nENV CORECLR_ENABLE_PROFILING=1\r\nENV CORECLR_PROFILER={cf0d821e-299b-5307-a3d8-b283c03916dd}\r\nENV CORECLR_PROFILER_PATH=/Profiler/clr-samples/ProfilingAPI/ReJITEnterLeaveHooks/Profiler.so\r\n#ENV CORECLR_PROFILER_PATH=/Profiler/clr-samples/ProfilingAPI/ELTProfiler/Profiler.so\r\n\r\nENV CORECLR_PATH=../../../runtime/src/coreclr\r\nENV BuildOS=Linux\r\nENV BuildArch=x64\r\nENV BuildType=Release\r\nENV Output=Profiler.so\r\n\r\nRUN mkdir TestConsoleProgram \u0026\u0026 cd TestConsoleProgram \u0026\u0026 dotnet new console \u0026\u0026 dotnet build\r\nRUN cd clr-samples/ProfilingAPI/ReJITEnterLeaveHooks \u0026\u0026 ./build.sh\r\n#RUN cd clr-samples/ProfilingAPI/ELTProfiler \u0026\u0026 ./build.sh\r\n\r\nCMD tail -f /dev/null\r\n```\r\n\r\n### Expected behavior\r\n\r\nThe \"Hello, World\" message must be output without a TestConsoleProgram crash.\r\nAnd need to be able to get information from Profiler(CorProfilerInfo-\u003eGetFunctionInfo).\r\n\r\n### Actual behavior\r\n\r\nTestConsoleProgram immediately crashes upon execution like this.\r\n\r\n```\r\nroot@f8dd57281989:/Profiler/TestConsoleProgram# ls\r\nProgram.cs  TestConsoleProgram.csproj  bin  obj\r\nroot@f8dd57281989:/Profiler/TestConsoleProgram# dotnet run\r\nSegmentation fault\r\nroot@f8dd57281989:/Profiler/TestConsoleProgram#\r\n```\r\n\r\nand below is the result from LLDB(attached to TestConsoleProgram).\r\n\r\n```\r\n(lldb) continue\r\nProcess 32 resuming\r\nProcess 32 stopped\r\n* thread #1, name = \u0027dotnet\u0027, stop reason = signal SIGSEGV: invalid address (fault address: 0x59452862)\r\n    frame #0: 0x00007f96d27bcd7c libcoreclr.so`___lldb_unnamed_symbol6863$$libcoreclr.so + 92\r\nlibcoreclr.so`___lldb_unnamed_symbol6863$$libcoreclr.so:\r\n-\u003e  0x7f96d27bcd7c \u003c+92\u003e:  movzbl 0x2(%rbx), %ecx\r\n    0x7f96d27bcd80 \u003c+96\u003e:  shlq   $0x3, %rcx\r\n    0x7f96d27bcd84 \u003c+100\u003e: negq   %rcx\r\n    0x7f96d27bcd87 \u003c+103\u003e: movq   -0x18(%rbx,%rcx), %rcx\r\n(lldb)\r\n```\r\n\r\n\r\n### Regression?\r\n\r\nIt works OK when built and used in Windows.\r\n\"CorProfilerInfo-\u003eGetFunctionInfo\" also returns the function information properly.\r\n\r\nTried .NET 5.0.\r\n\r\n### Known Workarounds\r\n\r\nNope.\r\n\r\n### Configuration\r\n\r\n`Which version of .NET is the code running on?` : .NET 5\r\n`What OS and version, and what distro if applicable?` : Used docker image \"FROM mcr.microsoft.com/dotnet/sdk:5.0\"\r\n`What is the architecture (x64, x86, ARM, ARM64)?` : Architecture : x86_64 GNU/Linux\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOQlM5_w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5CMUz-",
                                           "createdAt":  "2022-04-27T04:29:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nTo develop CLR profiler in Linux, I\u0027m testing using samples in \"clr-samples\", but when \"CorProfilerInfo-\u003eGetFunctionInfo\" function called, crash occurs on libcoreclr.so.\n\n### Reproduction Steps\n\nI tested using the Dockerfile below.\r\n\r\n- Run the docker instance\r\n  * `docker run -d --name clrprofiler clrprofiler`\r\n- Enter into the clrprofiler instance\r\n  * `docker exec -it clrprofiler bash`\r\n- Profiler is built on \"/Profiler/clr-samples/ProfilingAPI/ReJITEnterLeaveHooks/Profiler.so\"\r\n- I created a default console program in \"/Profiler/TestConsoleProgram\".\r\n- Running the TestConsoleProgram with the \"dotnet run\" command causes a libcoreclr.so crash.\r\n  * `cd /Profiler/TestConsoleProgram`\r\n  * `dotnet run`\r\n\r\n[Dockerfile.txt](https://github.com/dotnet/runtime/files/8568328/Dockerfile.txt)\r\n\r\n```\r\nFROM mcr.microsoft.com/dotnet/sdk:5.0\r\n\r\nRUN apt-get update \u0026\u0026 apt-get install procps telnet vim net-tools libc6-dev lsof git clang -y\r\n#RUN dotnet tool install -g dotnet-sos\r\n#RUN /root/.dotnet/tools/dotnet-sos install\r\nWORKDIR /Profiler\r\nRUN git clone https://github.com/microsoft/clr-samples.git\r\nRUN git clone https://github.com/dotnet/runtime --branch v5.0.16\r\n#RUN git clone https://github.com/dotnet/runtime\r\n\r\nENV CORECLR_ENABLE_PROFILING=1\r\nENV CORECLR_PROFILER={cf0d821e-299b-5307-a3d8-b283c03916dd}\r\nENV CORECLR_PROFILER_PATH=/Profiler/clr-samples/ProfilingAPI/ReJITEnterLeaveHooks/Profiler.so\r\n#ENV CORECLR_PROFILER_PATH=/Profiler/clr-samples/ProfilingAPI/ELTProfiler/Profiler.so\r\n\r\nENV CORECLR_PATH=../../../runtime/src/coreclr\r\nENV BuildOS=Linux\r\nENV BuildArch=x64\r\nENV BuildType=Release\r\nENV Output=Profiler.so\r\n\r\nRUN mkdir TestConsoleProgram \u0026\u0026 cd TestConsoleProgram \u0026\u0026 dotnet new console \u0026\u0026 dotnet build\r\nRUN cd clr-samples/ProfilingAPI/ReJITEnterLeaveHooks \u0026\u0026 ./build.sh\r\n#RUN cd clr-samples/ProfilingAPI/ELTProfiler \u0026\u0026 ./build.sh\r\n\r\nCMD tail -f /dev/null\r\n```\n\n### Expected behavior\n\nThe \"Hello, World\" message must be output without a TestConsoleProgram crash.\r\nAnd need to be able to get information from Profiler(CorProfilerInfo-\u003eGetFunctionInfo).\n\n### Actual behavior\n\nTestConsoleProgram immediately crashes upon execution like this.\r\n\r\n```\r\nroot@f8dd57281989:/Profiler/TestConsoleProgram# ls\r\nProgram.cs  TestConsoleProgram.csproj  bin  obj\r\nroot@f8dd57281989:/Profiler/TestConsoleProgram# dotnet run\r\nSegmentation fault\r\nroot@f8dd57281989:/Profiler/TestConsoleProgram#\r\n```\r\n\r\nand below is the result from LLDB(attached to TestConsoleProgram).\r\n\r\n```\r\n(lldb) continue\r\nProcess 32 resuming\r\nProcess 32 stopped\r\n* thread #1, name = \u0027dotnet\u0027, stop reason = signal SIGSEGV: invalid address (fault address: 0x59452862)\r\n    frame #0: 0x00007f96d27bcd7c libcoreclr.so`___lldb_unnamed_symbol6863$$libcoreclr.so + 92\r\nlibcoreclr.so`___lldb_unnamed_symbol6863$$libcoreclr.so:\r\n-\u003e  0x7f96d27bcd7c \u003c+92\u003e:  movzbl 0x2(%rbx), %ecx\r\n    0x7f96d27bcd80 \u003c+96\u003e:  shlq   $0x3, %rcx\r\n    0x7f96d27bcd84 \u003c+100\u003e: negq   %rcx\r\n    0x7f96d27bcd87 \u003c+103\u003e: movq   -0x18(%rbx,%rcx), %rcx\r\n(lldb)\r\n```\r\n\n\n### Regression?\n\nIt works OK when built and used in Windows.\r\n\"CorProfilerInfo-\u003eGetFunctionInfo\" also returns the function information properly.\r\n\r\nTried .NET Core 3.1 and .NET 5.0. But both of them failed.\n\n### Known Workarounds\n\nNope.\n\n### Configuration\n\n`Which version of .NET is the code running on?` : .NET 5\r\n`What OS and version, and what distro if applicable?` : Used docker image \"FROM mcr.microsoft.com/dotnet/sdk:5.0\"\r\n`What is the architecture (x64, x86, ARM, ARM64)?` : Architecture : x86_64 GNU/Linux\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003enxbear\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-04-27T04:29:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CPdwy",
                                           "createdAt":  "2022-04-27T18:35:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@davmason ",
                                           "updatedAt":  "2022-04-27T18:35:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CUzn_",
                                           "createdAt":  "2022-04-28T23:40:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davmason",
                                           "body":  "Hi @nxbear,\r\n\r\nIt would be difficult or impossible to diagnose without further information. Could you please fetch symbols [dotnet-symbol](https://docs.microsoft.com/en-us/dotnet/core/diagnostics/dotnet-symbol) can help, and get a callstack and locals for the crash?\r\n\r\nUsually a crash like this means an invalid parameter was passed in to GetFunctionInfo, this will help us dig deeper.",
                                           "updatedAt":  "2022-04-28T23:40:33Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Crash occurs when using profiler at clr-samples(https://github.com/microsoft/clr-samples)",
        "labels":  [
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/68836",
        "createdAt":  "2022-05-03T20:48:40Z",
        "number":  68836,
        "author":  "asundheim",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-05-23T21:27:01Z",
        "body":  "The enum value for `CorGCReferenceType.CorReferenceFinalizer` is set to `80000002` when it should be `0x80000002` - found in https://github.com/dotnet/runtime/blob/fc2f06e5588bef13cc3c3c619c476746f9982bf8/src/coreclr/inc/cordebug.idl#L2564\r\nhttps://github.com/dotnet/runtime/blob/fc2f06e5588bef13cc3c3c619c476746f9982bf8/src/coreclr/inc/cordebug.idl#L2579\r\n\r\nOfficial docs reference this as `0x80000002`:\r\nhttps://docs.microsoft.com/en-us/dotnet/framework/unmanaged-api/debugging/corgcreferencetype-enumeration\r\nhttps://docs.microsoft.com/en-us/dotnet/api/microsoft.visualstudio.cordebuginterop.corgcreferencetype?view=visualstudiosdk-2022",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOQ6kPhg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Cjk_s",
                                           "createdAt":  "2022-05-03T20:48:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThe enum value for `CorGCReferenceType.CorReferenceFinalizer` is set to `80000002` when it should be `0x80000002` - found in https://github.com/dotnet/runtime/blob/fc2f06e5588bef13cc3c3c619c476746f9982bf8/src/coreclr/inc/cordebug.idl#L2564\r\nhttps://github.com/dotnet/runtime/blob/fc2f06e5588bef13cc3c3c619c476746f9982bf8/src/coreclr/inc/cordebug.idl#L2579\r\n\r\nOfficial docs reference this as `0x80000002`:\r\nhttps://docs.microsoft.com/en-us/dotnet/framework/unmanaged-api/debugging/corgcreferencetype-enumeration\r\nhttps://docs.microsoft.com/en-us/dotnet/api/microsoft.visualstudio.cordebuginterop.corgcreferencetype?view=visualstudiosdk-2022\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003easundheim\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-05-03T20:48:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CnGuv",
                                           "createdAt":  "2022-05-04T16:17:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Adding @hoyosjs \r\nThank you for finding this issue! The enum value has been in .NET Core since 1.0 and so changing it would break behavior when targeting older .NET core versions.    Based off of this I suggest we update the docs to reflect current behavior.",
                                           "updatedAt":  "2022-05-04T16:17:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DkIer",
                                           "createdAt":  "2022-05-21T06:16:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "@tommcdon I think this might be worth fixing to be honest. Without the hexadecimal the value now becomes `0x4C4B402`. This means it is including more handles during enumeration than expected. We could fix up the header file as suggested and then respect the current value in the implementation to be a synonym for `CorReferenceFinalizer`.",
                                           "updatedAt":  "2022-05-21T06:16:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DqHJS",
                                           "createdAt":  "2022-05-23T20:34:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "\u003e @tommcdon I think this might be worth fixing to be honest. Without the hexadecimal the value now becomes `0x4C4B402`. This means it is including more handles during enumeration than expected. We could fix up the header file as suggested and then respect the current value in the implementation to be a synonym for `CorReferenceFinalizer`.\r\n\r\nThanks Aaron! We moved this issue out to Future assuming 1) debugger side of the code and so all debuggers would need to recompile against the updated IDL and then special case previous .NET Framework and .NET Core builds, 2) DacGcReference.dwType\u0027s are not treated as bitmasks not logically OR\u0027d together.  Please let us know if these assumptions are incorrect.",
                                           "updatedAt":  "2022-05-23T20:34:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DqQ-G",
                                           "createdAt":  "2022-05-23T21:27:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "Basically it\u0027s possible to do this: redefine the header to have CorReferenceFinalizer and CorReferenceFinalizer_legacy. If CorReferenceFinalizer_legacy is passed in, pass `CorReferenceFinalizer` to `DacHandleWalker`. I am not too familiar with the handle table walks, but the expected flag would have 1 bit vs two in the one we have currently (given that HANDLE_MAX_INTERNAL_TYPES is 12), so it does walk a bit more potentially. I am not sure if it\u0027s often the case that we use teh 11th bit, but the fix should not be breaking or require recompiles. ",
                                           "updatedAt":  "2022-05-23T21:27:01Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Incorrect enum value for cordebug CorGCReferenceType",
        "labels":  [
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/69294",
        "createdAt":  "2022-05-13T03:27:41Z",
        "number":  69294,
        "author":  "austinkinross",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-05-18T05:48:23Z",
        "body":  "### Description\n\nWe have a large end-to-end test suite of a WPF application that runs on x64 (.NET 4.5) and ARM64 (.NET 6.0, CLR.Version = 6.0.21.52210).\r\n\r\nOn the ARM64 PC, we have sporadic test failures. The tests throw an exception when they fail, which our test infrastructure is meant to catch and log. However, this logging part (which calls methods such as Exception.Source) regularly crashes on ARM64 while trying to retrieve the exception\u0027s callstack:\r\n\r\n```\r\n000000F00F77AC00 00007ffc3f12de14 [HelperMethodFrame_2OBJ: 000000f00f77ac00] System.Diagnostics.StackTrace.GetStackFramesInternal(System.Diagnostics.StackFrameHelper, Int32, Boolean, System.Exception)\r\n000000F00F77AF90 00007ffc28b05f84 System.Diagnostics.StackFrameHelper.InitializeSourceInfo(Int32, Boolean, System.Exception) [/_/src/coreclr/System.Private.CoreLib/src/System/Diagnostics/StackFrameHelper.cs @ 90]\r\n000000F00F77B060 00007ffc28b06a58 System.Diagnostics.StackTrace.CaptureStackTrace(Int32, Boolean, System.Exception) [/_/src/coreclr/System.Private.CoreLib/src/System/Diagnostics/StackTrace.CoreCLR.cs @ 62]\r\n000000F00F77B0C0 00007ffc28b06e0c System.Diagnostics.StackTrace..ctor(System.Exception, Boolean) [/_/src/libraries/System.Private.CoreLib/src/System/Diagnostics/StackTrace.cs @ 95]\r\n000000F00F77B0E0 00007ffc2881e8cc System.Exception.CreateSourceName() [/_/src/coreclr/System.Private.CoreLib/src/System/Exception.CoreCLR.cs @ 90]\r\n000000F00F77B100 00007ffc2881f46c System.Exception.get_Source() [/_/src/libraries/System.Private.CoreLib/src/System/Exception.cs @ 92]\r\n[our code]\r\n```\r\n\r\nWe can\u0027t open ARM64 crash dumps in VS, so I\u0027m limited to WinDBG. Above is the output of !clrstack.\r\n\r\nAre there any known issues in this area? We don\u0027t have any problem like this on x64 (.NET 4.5).\r\n\r\n\n\n### Reproduction Steps\n\nWe don\u0027t have a reliable repro. We have a lot of crash dumps though in case they are helpful.\n\n### Expected behavior\n\nNo crash\n\n### Actual behavior\n\nCrash\n\n### Regression?\n\nWe do not have this problem with .NET 4.5 (x64). I don\u0027t know if the issue is ARM64 or .NET 6.0 or both.\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET 6.0.21.52210\r\nWindows 10 20H2, ARM64\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOQ1Q8ZA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5DF6A4",
                                           "createdAt":  "2022-05-13T03:27:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nWe have a large end-to-end test suite of a WPF application that runs on x64 (.NET 4.5) and ARM64 (.NET 6.0, CLR.Version = 6.0.21.52210).\r\n\r\nOn the ARM64 PC, we have sporadic test failures. The tests throw an exception when they fail, which our test infrastructure is meant to catch and log. However, this logging part (which calls methods such as Exception.Source) regularly crashes on ARM64 while trying to retrieve the exception\u0027s callstack:\r\n\r\n```\r\n000000F00F77AC00 00007ffc3f12de14 [HelperMethodFrame_2OBJ: 000000f00f77ac00] System.Diagnostics.StackTrace.GetStackFramesInternal(System.Diagnostics.StackFrameHelper, Int32, Boolean, System.Exception)\r\n000000F00F77AF90 00007ffc28b05f84 System.Diagnostics.StackFrameHelper.InitializeSourceInfo(Int32, Boolean, System.Exception) [/_/src/coreclr/System.Private.CoreLib/src/System/Diagnostics/StackFrameHelper.cs @ 90]\r\n000000F00F77B060 00007ffc28b06a58 System.Diagnostics.StackTrace.CaptureStackTrace(Int32, Boolean, System.Exception) [/_/src/coreclr/System.Private.CoreLib/src/System/Diagnostics/StackTrace.CoreCLR.cs @ 62]\r\n000000F00F77B0C0 00007ffc28b06e0c System.Diagnostics.StackTrace..ctor(System.Exception, Boolean) [/_/src/libraries/System.Private.CoreLib/src/System/Diagnostics/StackTrace.cs @ 95]\r\n000000F00F77B0E0 00007ffc2881e8cc System.Exception.CreateSourceName() [/_/src/coreclr/System.Private.CoreLib/src/System/Exception.CoreCLR.cs @ 90]\r\n000000F00F77B100 00007ffc2881f46c System.Exception.get_Source() [/_/src/libraries/System.Private.CoreLib/src/System/Exception.cs @ 92]\r\n[our code]\r\n```\r\n\r\nWe can\u0027t open ARM64 crash dumps in VS, so I\u0027m limited to WinDBG. Above is the output of !clrstack.\r\n\r\nAre there any known issues in this area? We don\u0027t have any problem like this on x64 (.NET 4.5).\r\n\r\n\n\n### Reproduction Steps\n\nWe don\u0027t have a reliable repro. We have a lot of crash dumps though in case they are helpful.\n\n### Expected behavior\n\nNo crash\n\n### Actual behavior\n\nCrash\n\n### Regression?\n\nWe do not have this problem with .NET 4.5 (x64). I don\u0027t know if the issue is ARM64 or .NET 6.0 or both.\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET 6.0.21.52210\r\nWindows 10 20H2, ARM64\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eaustinkinross\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-05-13T03:27:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DGOmh",
                                           "createdAt":  "2022-05-13T06:37:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "Is it possible to share the dump with us internally please? My info is on my profile. ",
                                           "updatedAt":  "2022-05-13T06:37:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DISDc",
                                           "createdAt":  "2022-05-13T16:36:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "austinkinross",
                                           "body":  "Yeah sure, I\u0027ll ping you offline",
                                           "updatedAt":  "2022-05-13T16:36:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DVDxk",
                                           "createdAt":  "2022-05-18T05:48:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "Replying offline as I don\u0027t know if this is internal information. Essentially - this looks like a corruption and not a stack walk issue. I can\u0027t easily tell what\u0027s going on as the corruption happened in a place that makes it hard to know anything (can\u0027t see roots of anything and a manual search tells me this object is not rooted anywhere.\r\n ",
                                           "updatedAt":  "2022-05-18T05:48:19Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Regular crash in Exception.Source on ARM64 (.NET 6.0)",
        "labels":  [
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/69489",
        "createdAt":  "2022-05-18T13:00:17Z",
        "number":  69489,
        "author":  "kgorro",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-15T20:20:18Z",
        "body":  "I created a profiler for dotnet framework and netcore. I tried to build it with release/main of the coreclr runtime and build it also in OSX m1. When I tested the profiler I encountered the error below:\r\nProfiler was prevented from loading notification due to app setting [0x2509]. \r\nPlease look at the screenshots below:\r\n![image-20220513-123443](https://user-images.githubusercontent.com/49682861/169044037-8dc7c137-31fb-40ac-9d05-675c231a36fa.png)\r\nOther distro of OSX works fine but in m1 it throws this error even though I build the coreclr runtime in release/main branch.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORq8q5Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5DWj3o",
                                           "createdAt":  "2022-05-18T13:00:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nI created a profiler for dotnet framework and netcore. I tried to build it with release/main of the coreclr runtime and build it also in OSX m1. When I tested the profiler I encountered the error below:\r\nProfiler was prevented from loading notification due to app setting [0x2509]. \r\nPlease look at the screenshots below:\r\n![image-20220513-123443](https://user-images.githubusercontent.com/49682861/169044037-8dc7c137-31fb-40ac-9d05-675c231a36fa.png)\r\nOther distro of OSX works fine but in m1 it throws this error even though I build the coreclr runtime in release/main branch.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ekgorro\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-05-18T13:00:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DWn55",
                                           "createdAt":  "2022-05-18T13:15:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@davmason ",
                                           "updatedAt":  "2022-05-18T13:15:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DYzTQ",
                                           "createdAt":  "2022-05-18T21:37:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davmason",
                                           "body":  "Hi @kgorro,\r\n\r\nThere are two errors going on there:\r\n\r\n`Profiler was prevented from loading notification profiler due to app settings` - this error means that someone set `CORECLR_ENABLE_NOTIFICATION_PROFILERS=0` in the process. Reading through the code, we issue the error preemptively, so there may or may not be a profiler that was trying to load. I will open a PR to change the order so it only emits that warning if a profiler was actively blocked.\r\n\r\n`The profiler has requested that the CLR instance not load the profiler into this process.` - this error means that the runtime tried to load the profiler, but the profiler returned `CORPROF_E_PROFILER_CANCEL_ACTIVATION` from Initialize, so we aborted loading.\r\n\r\nIs this a profiler you are building yourself, or one you are trying to run from external sources? How to fix these errors depends on what you\u0027re trying to achieve",
                                           "updatedAt":  "2022-05-18T21:37:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DZ_Zw",
                                           "createdAt":  "2022-05-19T00:59:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kgorro",
                                           "body":  "Hi @davmason ,\r\nIt is our own profiler. The only thing I see with that is ICorProfilerInfo7 was failed to be initialized? that is the only thing in our codebase will throw CORPROF_E_PROFILER_CANCEL_ACTIVATION. So .NET7 runtime does not support anymore ICorProfilerInfo7 ?\r\n",
                                           "updatedAt":  "2022-05-19T00:59:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Da4so",
                                           "createdAt":  "2022-05-19T03:18:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davmason",
                                           "body":  "ICorProfilerInfo7 is still supported, have you debugged your `Initialize()` callback to see what is going on? If the runtime is not giving ICorProfilerInfo7 that is a serious bug, but looking at the code it should work.\r\n\r\nFYI I opened https://github.com/dotnet/runtime/pull/69538 to change the message output location",
                                           "updatedAt":  "2022-05-19T03:18:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DbKe_",
                                           "createdAt":  "2022-05-19T04:39:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kgorro",
                                           "body":  "@davmason , I debug it and it fails here:\r\n![image](https://user-images.githubusercontent.com/49682861/169206264-860bbef1-d092-423d-9a97-61033c7e55fc.png)\r\n",
                                           "updatedAt":  "2022-05-19T04:39:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DbncZ",
                                           "createdAt":  "2022-05-19T07:11:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davmason",
                                           "body":  "Can you tell me what the value is returned in `queryInterfaceResult` when it fails and what `__uuidof(ICorProfilerInfo7)` evaluates to?",
                                           "updatedAt":  "2022-05-19T07:11:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DfnVS",
                                           "createdAt":  "2022-05-20T01:43:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kgorro",
                                           "body":  "@davmason I am still logging it, it seems I cannot print it, I will get back to you, I am to dump all necessary values",
                                           "updatedAt":  "2022-05-20T01:43:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Do2hR",
                                           "createdAt":  "2022-05-23T14:56:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kgorro",
                                           "body":  "@davmason I tried to update my runtime branch to use the main branch as m1 will only work with .net7, so the error got change and I am not to see it is pointing to my initialize method anymore.\r\nThis is the error:\r\nLoading profiler failed.  There was an unhandled exception while trying to instantiate the profiler COM object.  Please ensure the CLSID is associated with a valid profiler designed to work with this version of the runtime",
                                           "updatedAt":  "2022-05-23T14:56:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DqB_o",
                                           "createdAt":  "2022-05-23T20:08:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davmason",
                                           "body":  "@kgorro that error means an exception occurred during the call to Initialize, which likely means something went wrong in the profiler. Are you able to get a callstack of the exception in a debugger?",
                                           "updatedAt":  "2022-05-23T20:08:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DqvHj",
                                           "createdAt":  "2022-05-24T00:42:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kgorro",
                                           "body":  "@davmason I am having hard time because m1 has problems installing gdb.",
                                           "updatedAt":  "2022-05-24T00:42:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DrjQe",
                                           "createdAt":  "2022-05-24T07:04:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davmason",
                                           "body":  "Have you tried debugging with lldb? ",
                                           "updatedAt":  "2022-05-24T07:04:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FAF6u",
                                           "createdAt":  "2022-06-16T13:18:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kgorro",
                                           "body":  "@davmason we fix the issue with CORPROF_E_PROFILER_CANCEL_ACTIVATION and it is attaching and at somepoint we are seeing the error below:\r\n![image](https://user-images.githubusercontent.com/49682861/174078356-d57111a2-6039-4043-9676-c0e3ed7992db.png)\r\n\r\nand the backtrace:\r\n![image](https://user-images.githubusercontent.com/49682861/174081588-1e3fb081-b30e-4c06-91bd-de472d7e9440.png)\r\n\r\nWhen I check the way we call GetModuleInfo2 is correct and it works with other environment and it is only failing in M1.",
                                           "updatedAt":  "2022-06-16T13:41:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FBrfq",
                                           "createdAt":  "2022-06-16T19:45:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davmason",
                                           "body":  "That error usually means that a bogus ModuleID was passed in.  What does `memory read 0x80090018` show?",
                                           "updatedAt":  "2022-06-16T19:45:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FB7IU",
                                           "createdAt":  "2022-06-16T21:08:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kgorro",
                                           "body":  "@davmason \r\n![image](https://user-images.githubusercontent.com/49682861/174167504-5dc74a49-686d-45ef-b48c-74decbd79c4d.png)\r\n",
                                           "updatedAt":  "2022-06-16T21:21:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FEz_p",
                                           "createdAt":  "2022-06-17T13:46:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kgorro",
                                           "body":  "@davmason do you think it is related to COMPlus_ZapDisable?\r\n",
                                           "updatedAt":  "2022-06-20T07:33:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FUzbC",
                                           "createdAt":  "2022-06-22T13:13:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kgorro",
                                           "body":  "@davmason any update on this?",
                                           "updatedAt":  "2022-06-22T13:13:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Gryrl",
                                           "createdAt":  "2022-07-15T20:20:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davmason",
                                           "body":  "As we discussed over email, this is likely a configuration issue with the profiler - moving it out from 7.0.0, but leaving it open to track.",
                                           "updatedAt":  "2022-07-15T20:20:09Z"
                                       }
                                   ],
                         "totalCount":  18
                     },
        "title":  "Profiling API: Profiler was prevented from loading notification  0x2509",
        "labels":  [
                       "question",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/70541",
        "createdAt":  "2022-06-10T02:52:05Z",
        "number":  70541,
        "author":  "vindicatorr",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-06-26T15:17:44Z",
        "body":  "### Description\n\nReference: https://github.com/OmniSharp/omnisharp-vscode/issues/5249\r\nCoredumps while debugging in vscode, but running via dotnet cli does NOT result in any coredump.\n\n### Reproduction Steps\n\n```\r\npublic class catchMeTest\r\n{\r\n    public struct UplinkAccessResult\r\n    {\r\n        public System.IntPtr access;\r\n\r\n        public System.IntPtr error;\r\n    };\r\n\r\n    [System.Runtime.InteropServices.DllImport(dllName: \"uplink-c/libuplink.so\")]\r\n    public extern static catchMeTest.UplinkAccessResult uplink_parse_access(System.String accessString);\r\n\r\n    static void OnUnhandledException(System.Object pObject, System.UnhandledExceptionEventArgs pUnhandledExceptionEventArgs)\r\n    {\r\n        System.Console.WriteLine(\"unhandled\" + pUnhandledExceptionEventArgs.ExceptionObject.ToString());\r\n    }\r\n\r\n    static void OnFirstChanceException(System.Object? pObject, System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs pUnhandledExceptionEventArgs)\r\n    {\r\n        System.Console.WriteLine(\"first\" + pUnhandledExceptionEventArgs.Exception.ToString());\r\n    }\r\n\r\n    public static System.Int32 Main(System.String[] pArgs)\r\n    {\r\n        System.AppDomain.CurrentDomain.FirstChanceException += OnFirstChanceException;\r\n        System.AppDomain.CurrentDomain.UnhandledException += OnUnhandledException;\r\n        \r\n        catchMeTest.uplink_parse_access(\"test\");\r\n\r\n        System.Console.WriteLine(\"Hello, World!\");\r\n\r\n        return 0;\r\n    }\r\n}\r\n```\n\n### Expected behavior\n\nRun, or catch the exception.\n\n### Actual behavior\n\n```\r\n* thread #1, name = \u0027dotnet\u0027, stop reason = signal SIGSEGV\r\n  * frame #0: 0x00007f71cbdf2e84 libcoreclr.so`DebuggerController::ScanForTriggers(address=\"\\xccAVSH\\x8dl$\\U00000010\\xff\\U00000015\\t\\xa3i\", thread=0x0000563f15c17240, context=0x00007f7114001100, pDcq=0x00007f71cc799cd0, stWhat=ST_PATCH, pTpr=0x00007f71cc799c7c) at controller.cpp:2573\r\n    frame #1: 0x00007f71cbdf39b1 libcoreclr.so`DebuggerController::DispatchPatchOrSingleStep(thread=0x0000563f15c17240, context=0x00007f7114001100, address=\"\\xccAVSH\\x8dl$\\U00000010\\xff\\U00000015\\t\\xa3i\", which=ST_PATCH) at controller.cpp:2957:12\r\n    frame #2: 0x00007f71cbdf4e6f libcoreclr.so`DebuggerController::DispatchNativeException(pException=\u003cunavailable\u003e, pContext=0x00007f7114001100, dwCode=\u003cunavailable\u003e, pCurThread=0x0000563f15c17240) at controller.cpp:0:9\r\n    frame #3: 0x00007f71cbe024f4 libcoreclr.so`Debugger::FirstChanceNativeException(this=0x0000563f15be3af0, exception=0x00007f71140015d0, context=0x00007f7114001100, code=2147483651, thread=0x0000563f15c17240) at debugger.cpp:5574:18\r\n    frame #4: 0x00007f71cbd0aae8 libcoreclr.so`HandleHardwareException(ex=0x00007f71cc79a410) at exceptionhandling.cpp:5313:36\r\n    frame #5: 0x00007f71cbf122a1 libcoreclr.so`SEHProcessException(exception=0x00007f71cc79a410) at seh.cpp:267:21\r\n    frame #6: 0x00007f71cbf13f45 libcoreclr.so`common_signal_handler(code=5, siginfo=\u003cunavailable\u003e, sigcontext=0x00007f71cc79aac0, numParams=\u003cunavailable\u003e) at signal.cpp:991:9\r\n    frame #7: 0x00007f71cbf13652 libcoreclr.so`sigtrap_handler(code=5, siginfo=0x00007f71cc79abf0, context=0x00007f71cc79aac0) at signal.cpp:649:13\r\n    frame #8: 0x00007f71cc2788e0 libc.so.6`___lldb_unnamed_symbol3219 + 1\r\n    frame #9: 0x00007f7152048b41\r\n    frame #10: 0x00007f71cbbf000b libcoreclr.so`MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int) at callhelpers.cpp:67:5\r\n    frame #11: 0x00007f71cbbeffb0 libcoreclr.so`MethodDescCallSite::CallTargetWorker(this=\u003cunavailable\u003e, pArguments=0x0000000000000000, pReturnValue=0x0000000000000000, cbReturnValue=0) at callhelpers.cpp:543:9\r\n    frame #12: 0x00007f71cbab96b1 libcoreclr.so`AppDomain::RaiseExitProcessEvent() [inlined] MethodDescCallSite::Call(this=\u003cunavailable\u003e, pArguments=\u003cunavailable\u003e) at callhelpers.h:458:9\r\n    frame #13: 0x00007f71cbab96a3 libcoreclr.so`AppDomain::RaiseExitProcessEvent() at appdomain.cpp:4293:19\r\n    frame #14: 0x00007f71cbc38feb libcoreclr.so`FinalizerThread::FinalizerThreadStart(args=\u003cunavailable\u003e) at finalizerthread.cpp:395:13\r\n    frame #15: 0x00007f71cbf4d50e libcoreclr.so`CorUnix::CPalThread::ThreadEntry(pvParam=0x0000563f15c18190) at thread.cpp:1862:16\r\n    frame #16: 0x00007f71cc2c654d libc.so.6`___lldb_unnamed_symbol3481 + 717\r\n    frame #17: 0x00007f71cc34bb14 libc.so.6`__clone + 68\r\n```\n\n### Regression?\n\nI\u0027ve successfully done interop before, but don\u0027t know how many revisions before and this is the first I\u0027m doing it with this library.\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nMicrosoft.NETCore.App 6.0.2\r\nArch Linux\r\nx64\n\n### Other information\n\nI\u0027ve only included what I thought was most relevent/direct. For more possible missing detail, check the reference link above.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOUehQng==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5EqB2Q",
                                           "createdAt":  "2022-06-10T02:52:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-06-10T02:52:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EqX0w",
                                           "createdAt":  "2022-06-10T05:27:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nReference: https://github.com/OmniSharp/omnisharp-vscode/issues/5249\r\nCoredumps while debugging in vscode, but running via dotnet cli does NOT result in any coredump.\n\n### Reproduction Steps\n\n```\r\npublic class catchMeTest\r\n{\r\n    public struct UplinkAccessResult\r\n    {\r\n        public System.IntPtr access;\r\n\r\n        public System.IntPtr error;\r\n    };\r\n\r\n    [System.Runtime.InteropServices.DllImport(dllName: \"uplink-c/libuplink.so\")]\r\n    public extern static catchMeTest.UplinkAccessResult uplink_parse_access(System.String accessString);\r\n\r\n    static void OnUnhandledException(System.Object pObject, System.UnhandledExceptionEventArgs pUnhandledExceptionEventArgs)\r\n    {\r\n        System.Console.WriteLine(\"unhandled\" + pUnhandledExceptionEventArgs.ExceptionObject.ToString());\r\n    }\r\n\r\n    static void OnFirstChanceException(System.Object? pObject, System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs pUnhandledExceptionEventArgs)\r\n    {\r\n        System.Console.WriteLine(\"first\" + pUnhandledExceptionEventArgs.Exception.ToString());\r\n    }\r\n\r\n    public static System.Int32 Main(System.String[] pArgs)\r\n    {\r\n        System.AppDomain.CurrentDomain.FirstChanceException += OnFirstChanceException;\r\n        System.AppDomain.CurrentDomain.UnhandledException += OnUnhandledException;\r\n        \r\n        catchMeTest.uplink_parse_access(\"test\");\r\n\r\n        System.Console.WriteLine(\"Hello, World!\");\r\n\r\n        return 0;\r\n    }\r\n}\r\n```\n\n### Expected behavior\n\nRun, or catch the exception.\n\n### Actual behavior\n\n```\r\n* thread #1, name = \u0027dotnet\u0027, stop reason = signal SIGSEGV\r\n  * frame #0: 0x00007f71cbdf2e84 libcoreclr.so`DebuggerController::ScanForTriggers(address=\"\\xccAVSH\\x8dl$\\U00000010\\xff\\U00000015\\t\\xa3i\", thread=0x0000563f15c17240, context=0x00007f7114001100, pDcq=0x00007f71cc799cd0, stWhat=ST_PATCH, pTpr=0x00007f71cc799c7c) at controller.cpp:2573\r\n    frame #1: 0x00007f71cbdf39b1 libcoreclr.so`DebuggerController::DispatchPatchOrSingleStep(thread=0x0000563f15c17240, context=0x00007f7114001100, address=\"\\xccAVSH\\x8dl$\\U00000010\\xff\\U00000015\\t\\xa3i\", which=ST_PATCH) at controller.cpp:2957:12\r\n    frame #2: 0x00007f71cbdf4e6f libcoreclr.so`DebuggerController::DispatchNativeException(pException=\u003cunavailable\u003e, pContext=0x00007f7114001100, dwCode=\u003cunavailable\u003e, pCurThread=0x0000563f15c17240) at controller.cpp:0:9\r\n    frame #3: 0x00007f71cbe024f4 libcoreclr.so`Debugger::FirstChanceNativeException(this=0x0000563f15be3af0, exception=0x00007f71140015d0, context=0x00007f7114001100, code=2147483651, thread=0x0000563f15c17240) at debugger.cpp:5574:18\r\n    frame #4: 0x00007f71cbd0aae8 libcoreclr.so`HandleHardwareException(ex=0x00007f71cc79a410) at exceptionhandling.cpp:5313:36\r\n    frame #5: 0x00007f71cbf122a1 libcoreclr.so`SEHProcessException(exception=0x00007f71cc79a410) at seh.cpp:267:21\r\n    frame #6: 0x00007f71cbf13f45 libcoreclr.so`common_signal_handler(code=5, siginfo=\u003cunavailable\u003e, sigcontext=0x00007f71cc79aac0, numParams=\u003cunavailable\u003e) at signal.cpp:991:9\r\n    frame #7: 0x00007f71cbf13652 libcoreclr.so`sigtrap_handler(code=5, siginfo=0x00007f71cc79abf0, context=0x00007f71cc79aac0) at signal.cpp:649:13\r\n    frame #8: 0x00007f71cc2788e0 libc.so.6`___lldb_unnamed_symbol3219 + 1\r\n    frame #9: 0x00007f7152048b41\r\n    frame #10: 0x00007f71cbbf000b libcoreclr.so`MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int) at callhelpers.cpp:67:5\r\n    frame #11: 0x00007f71cbbeffb0 libcoreclr.so`MethodDescCallSite::CallTargetWorker(this=\u003cunavailable\u003e, pArguments=0x0000000000000000, pReturnValue=0x0000000000000000, cbReturnValue=0) at callhelpers.cpp:543:9\r\n    frame #12: 0x00007f71cbab96b1 libcoreclr.so`AppDomain::RaiseExitProcessEvent() [inlined] MethodDescCallSite::Call(this=\u003cunavailable\u003e, pArguments=\u003cunavailable\u003e) at callhelpers.h:458:9\r\n    frame #13: 0x00007f71cbab96a3 libcoreclr.so`AppDomain::RaiseExitProcessEvent() at appdomain.cpp:4293:19\r\n    frame #14: 0x00007f71cbc38feb libcoreclr.so`FinalizerThread::FinalizerThreadStart(args=\u003cunavailable\u003e) at finalizerthread.cpp:395:13\r\n    frame #15: 0x00007f71cbf4d50e libcoreclr.so`CorUnix::CPalThread::ThreadEntry(pvParam=0x0000563f15c18190) at thread.cpp:1862:16\r\n    frame #16: 0x00007f71cc2c654d libc.so.6`___lldb_unnamed_symbol3481 + 717\r\n    frame #17: 0x00007f71cc34bb14 libc.so.6`__clone + 68\r\n```\n\n### Regression?\n\nI\u0027ve successfully done interop before, but don\u0027t know how many revisions before and this is the first I\u0027m doing it with this library.\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nMicrosoft.NETCore.App 6.0.2\r\nArch Linux\r\nx64\n\n### Other information\n\nI\u0027ve only included what I thought was most relevent/direct. For more possible missing detail, check the reference link above.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003evindicatorr\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-06-10T05:27:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EsOtH",
                                           "createdAt":  "2022-06-10T14:50:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@vindicatorr  This is possibly related to #63199.  Would you mind try a recent [.NET 7 preview build](https://dotnet.microsoft.com/en-us/download/dotnet/7.0) to see if the issue still reproduces?",
                                           "updatedAt":  "2022-06-12T02:33:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EsOxb",
                                           "createdAt":  "2022-06-10T14:50:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been marked `needs-author-action` and may be missing some important information.",
                                           "updatedAt":  "2022-06-10T14:50:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ettpu",
                                           "createdAt":  "2022-06-11T02:03:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOChX7Pw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2022-06-12T02:33:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vindicatorr",
                                           "body":  "7.0:\r\n```\r\n* thread #1, name = \u0027dotnet\u0027, stop reason = signal SIGSEGV\r\n  * frame #0: 0x00007f135808fa34 libcoreclr.so`DebuggerController::ScanForTriggers(address=\"\\xccSPH\\x8dl$\\U00000010\\xff\\U000000152\\xfdm\", thread=0x0000556d97d91060, context=0x00007ed22c001130, pDcq=0x00007f13588dfcc0, stWhat=ST_PATCH, pTpr=0x00007f13588dfc6c) at controller.cpp:2572\r\n    frame #1: 0x00007f1358090561 libcoreclr.so`DebuggerController::DispatchPatchOrSingleStep(thread=0x0000556d97d91060, context=0x00007ed22c001130, address=\"\\xccSPH\\x8dl$\\U00000010\\xff\\U000000152\\xfdm\", which=ST_PATCH) at controller.cpp:2956:12\r\n    frame #2: 0x00007f1358091a2f libcoreclr.so`DebuggerController::DispatchNativeException(pException=\u003cunavailable\u003e, pContext=0x00007ed22c001130, dwCode=\u003cunavailable\u003e, pCurThread=0x0000556d97d91060) at controller.cpp:0:9\r\n    frame #3: 0x00007f135809f064 libcoreclr.so`Debugger::FirstChanceNativeException(this=0x0000556d97d4e220, exception=0x00007ed22c001600, context=0x00007ed22c001130, code=2147483651, thread=0x0000556d97d91060) at debugger.cpp:5542:18\r\n    frame #4: 0x00007f1357fa1c95 libcoreclr.so`HandleHardwareException(ex=0x00007f13588e0400) at exceptionhandling.cpp:5310:36\r\n    frame #5: 0x00007f13581ac171 libcoreclr.so`SEHProcessException(exception=0x00007f13588e0400) at seh.cpp:267:21\r\n    frame #6: 0x00007f13581adea5 libcoreclr.so`common_signal_handler(code=5, siginfo=\u003cunavailable\u003e, sigcontext=0x00007f13588e0ac0, numParams=\u003cunavailable\u003e) at signal.cpp:999:9\r\n    frame #7: 0x00007f13581ad5b2 libcoreclr.so`sigtrap_handler(code=5, siginfo=0x00007f13588e0bf0, context=0x00007f13588e0ac0) at signal.cpp:656:13\r\n    frame #8: 0x00007f13583be8e0 libc.so.6`___lldb_unnamed_symbol3219 + 1\r\n    frame #9: 0x00007f12de1a7541\r\n    frame #10: 0x00007f1357e8caa4 libcoreclr.so`MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int) at callhelpers.cpp:67:5\r\n    frame #11: 0x00007f1357e8ca49 libcoreclr.so`MethodDescCallSite::CallTargetWorker(this=\u003cunavailable\u003e, pArguments=0x0000000000000000, pReturnValue=0x0000000000000000, cbReturnValue=0) at callhelpers.cpp:538:9\r\n    frame #12: 0x00007f1357d5f631 libcoreclr.so`AppDomain::RaiseExitProcessEvent() [inlined] MethodDescCallSite::Call(this=\u003cunavailable\u003e, pArguments=\u003cunavailable\u003e) at callhelpers.h:458:9\r\n    frame #13: 0x00007f1357d5f623 libcoreclr.so`AppDomain::RaiseExitProcessEvent() at appdomain.cpp:3964:19\r\n    frame #14: 0x00007f1357ed4a3b libcoreclr.so`FinalizerThread::FinalizerThreadStart(args=\u003cunavailable\u003e) at finalizerthread.cpp:395:13\r\n    frame #15: 0x00007f13581e740e libcoreclr.so`CorUnix::CPalThread::ThreadEntry(pvParam=0x0000556d97d91fb0) at thread.cpp:1829:16\r\n    frame #16: 0x00007f135840c54d libc.so.6`___lldb_unnamed_symbol3481 + 717\r\n    frame #17: 0x00007f1358491b14 libc.so.6`__clone + 68\r\n```",
                                           "updatedAt":  "2022-06-11T02:03:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Gjep3",
                                           "createdAt":  "2022-07-13T21:40:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@vindicatorr  It looks like the issue is reproduced on an unsupported OS flavor of Linux - Arch Linux.  Does this issue reproduce on a supported distro?  ",
                                           "updatedAt":  "2022-07-13T21:40:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Gjetm",
                                           "createdAt":  "2022-07-13T21:41:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been marked `needs-author-action` and may be missing some important information.",
                                           "updatedAt":  "2022-07-13T21:41:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GtvSc",
                                           "createdAt":  "2022-07-17T04:33:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vindicatorr",
                                           "body":  "You say \"supported\", but I like to think of dists like Arch and Gentoo as a preview of what\u0027s coming, so it would just be a matter of time before it reaches a \"supported\" dist.\r\n\r\nIn any case, I did spin up an `Ubuntu 20.04.4` VM, compiled `uplink-c` for that dist, and it\u0027s happening here as well:\r\n```\r\n                Stack trace of thread 16379:\r\n                #0  0x00007f9c3943da34 n/a (\u003cpathToDotnet\u003e/shared/Microsoft.NETCore.App/7.0.0-preview.4.22229.4/libcoreclr.so + 0x4fda34)\r\n                #1  0x00007f9c3943e561 n/a (\u003cpathToDotnet\u003e/shared/Microsoft.NETCore.App/7.0.0-preview.4.22229.4/libcoreclr.so + 0x4fe561)\r\n                #2  0x00007f9c3943fa2f n/a (\u003cpathToDotnet\u003e/shared/Microsoft.NETCore.App/7.0.0-preview.4.22229.4/libcoreclr.so + 0x4ffa2f)\r\n                #3  0x00007f9c3944d064 n/a (\u003cpathToDotnet\u003e/shared/Microsoft.NETCore.App/7.0.0-preview.4.22229.4/libcoreclr.so + 0x50d064)\r\n                #4  0x00007f9c3934fc95 n/a (\u003cpathToDotnet\u003e/shared/Microsoft.NETCore.App/7.0.0-preview.4.22229.4/libcoreclr.so + 0x40fc95)\r\n                #5  0x00007f9c3955a171 n/a (\u003cpathToDotnet\u003e/shared/Microsoft.NETCore.App/7.0.0-preview.4.22229.4/libcoreclr.so + 0x61a171)\r\n                #6  0x00007f9c3955bea5 n/a (\u003cpathToDotnet\u003e/shared/Microsoft.NETCore.App/7.0.0-preview.4.22229.4/libcoreclr.so + 0x61bea5)\r\n                #7  0x00007f9c3955b5b2 n/a (\u003cpathToDotnet\u003e/shared/Microsoft.NETCore.App/7.0.0-preview.4.22229.4/libcoreclr.so + 0x61b5b2)\r\n                #8  0x00007f9c39c86420 __restore_rt (libpthread.so.0 + 0x14420)\r\n                #9  0x00007f9bbffc0b95 n/a (n/a + 0x0)\r\n                #10 0x00007f9c39403ee7 n/a (\u003cpathToDotnet\u003e/shared/Microsoft.NETCore.App/7.0.0-preview.4.22229.4/libcoreclr.so + 0x4c3ee7)\r\n                #11 0x00007f9c3923aaa4 n/a (\u003cpathToDotnet\u003e/shared/Microsoft.NETCore.App/7.0.0-preview.4.22229.4/libcoreclr.so + 0x2faaa4)\r\n                #12 0x00007f9c3911806b n/a (\u003cpathToDotnet\u003e/shared/Microsoft.NETCore.App/7.0.0-preview.4.22229.4/libcoreclr.so + 0x1d806b)\r\n                #13 0x00007f9c391183a1 n/a (\u003cpathToDotnet\u003e/shared/Microsoft.NETCore.App/7.0.0-preview.4.22229.4/libcoreclr.so + 0x1d83a1)\r\n                #14 0x00007f9c3914ac3d n/a (\u003cpathToDotnet\u003e/shared/Microsoft.NETCore.App/7.0.0-preview.4.22229.4/libcoreclr.so + 0x20ac3d)\r\n                #15 0x00007f9c395e458f n/a (\u003cpathToDotnet\u003e/shared/Microsoft.NETCore.App/7.0.0-preview.4.22229.4/libcoreclr.so + 0x6a458f)\r\n                #16 0x00007f9c3968e731 n/a (\u003cpathToDotnet\u003e/shared/Microsoft.NETCore.App/7.0.0-preview.4.22229.4/libhostpolicy.so + 0x28731)\r\n                #17 0x00007f9c3968ebc1 n/a (\u003cpathToDotnet\u003e/shared/Microsoft.NETCore.App/7.0.0-preview.4.22229.4/libhostpolicy.so + 0x28bc1)\r\n                #18 0x00007f9c3968f5ec n/a (\u003cpathToDotnet\u003e/shared/Microsoft.NETCore.App/7.0.0-preview.4.22229.4/libhostpolicy.so + 0x295ec)\r\n                #19 0x00007f9c396e8a24 n/a (\u003cpathToDotnet\u003e/host/fxr/7.0.0-preview.4.22229.4/libhostfxr.so + 0x25a24)\r\n                #20 0x00007f9c396e7159 n/a (\u003cpathToDotnet\u003e/host/fxr/7.0.0-preview.4.22229.4/libhostfxr.so + 0x24159)\r\n                #21 0x00007f9c396e260b n/a (\u003cpathToDotnet\u003e/host/fxr/7.0.0-preview.4.22229.4/libhostfxr.so + 0x1f60b)\r\n                #22 0x000055ecbab7baaa n/a (\u003cpathToDotnet\u003e/dotnet + 0x17aaa)\r\n                #23 0x000055ecbab7bf20 n/a (\u003cpathToDotnet\u003e/dotnet + 0x17f20)\r\n                #24 0x00007f9c39752083 __libc_start_main (libc.so.6 + 0x24083)\r\n                #25 0x000055ecbab70029 n/a (\u003cpathToDotnet\u003e/dotnet + 0xc029)\r\n```",
                                           "updatedAt":  "2022-07-17T04:33:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5R6FCe",
                                           "createdAt":  "2023-01-06T21:54:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikelle-rogers",
                                           "body":  "Moving to future because it doesn\u0027t fit with the priorities of this release. We will reconsider in a future release.",
                                           "updatedAt":  "2023-01-06T21:54:22Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "SIGSEGV Coredump From Interop Debugging In VSCode",
        "labels":  [
                       "bug",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/71409",
        "createdAt":  "2022-06-28T22:43:18Z",
        "number":  71409,
        "author":  "janvorli",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-13T21:44:46Z",
        "body":  "While testing a fix to a problem with thread context setting race with async signal handling on macOS (tested on arm64), I have found that the profiler/elt/slowpathenter test (and two other profiler tests) consistently fail with assert:\r\n```\r\nAssert failure(PID 82438 [0x00014206], Thread: 39495468 [0x25aa72c]): GetThread()-\u003ePreemptiveGCDisabled()\r\n    File: /Users/janvorli/git/runtime3/src/coreclr/vm/proftoeeinterfaceimpl.cpp Line: 10522\r\n    Image: /Users/janvorli/git/runtime3/artifacts/tests/coreclr/OSX.arm64.Checked/Tests/Core_Root/corerun\r\n```\r\n\r\nLooking at core dump from the crash, I have found that the issue is that `ProfileEnterNaked` is called from an `UnmanagedCallersOnly` marked method `System.ConsolePal.InvalidateTerminalSettings`. So the thread is in preemtive mode.\r\n\r\nHere is the call stack:\r\n```\r\n  * frame #0: 0x000000019e3019b8 libsystem_kernel.dylib`__pthread_kill + 8\r\n    frame #1: 0x000000019e334eb0 libsystem_pthread.dylib`pthread_kill + 288\r\n    frame #2: 0x000000019e272314 libsystem_c.dylib`abort + 164\r\n    frame #3: 0x000000010399f308 libcoreclr.dylib`::PROCAbort(signal=\u003cunavailable\u003e) at process.cpp:2667:5 [opt]\r\n    frame #4: 0x000000010399f1d8 libcoreclr.dylib`::RaiseFailFastException(pExceptionRecord=\u003cunavailable\u003e, pContextRecord=\u003cunavailable\u003e, dwFlags=\u003cunavailable\u003e) at process.cpp:1264:5 [opt]\r\n    frame #5: 0x0000000103d952cc libcoreclr.dylib`TerminateOnAssert() at debug.cpp:201:5 [opt]\r\n    frame #6: 0x0000000103d95908 libcoreclr.dylib`::_DbgBreakCheck(szFile=\"/Users/janvorli/git/runtime3/src/coreclr/vm/proftoeeinterfaceimpl.cpp\", iLine=10522, szExpr=\u003cunavailable\u003e, fConstrained=\u003cunavailable\u003e) at debug.cpp:414:5 [opt]\r\n    frame #7: 0x0000000103d95c98 libcoreclr.dylib`_DbgBreakCheckNoThrow(szFile=\"/Users/janvorli/git/runtime3/src/coreclr/vm/proftoeeinterfaceimpl.cpp\", iLine=10522, szExpr=\"GetThread()-\u003ePreemptiveGCDisabled()\", fConstrained=NO) at debug.cpp:433:18 [opt]\r\n    frame #8: 0x0000000103d95ff0 libcoreclr.dylib`::DbgAssertDialog(szFile=\"/Users/janvorli/git/runtime3/src/coreclr/vm/proftoeeinterfaceimpl.cpp\", iLine=10522, szExpr=\u003cunavailable\u003e) at debug.cpp:0 [opt]\r\n    frame #9: 0x0000000103c3eaf8 libcoreclr.dylib`::ProfileEnter(clientData=10761103408, platformSpecificHandle=0x000000016d5e2e00) at proftoeeinterfaceimpl.cpp:10522:5 [opt]\r\n    frame #10: 0x0000000103d617f0 libcoreclr.dylib`ProfileEnterNaked + 80\r\n    frame #11: 0x0000000281261bcc System.ConsolePal.InvalidateTerminalSettings()\r\n    frame #12: 0x00000001030f8afc libSystem.Native.dylib`SignalHandlerLoop(arg=\u003cunavailable\u003e) at pal_signal.c:339:17 [opt]\r\n    frame #13: 0x000000019e335240 libsystem_pthread.dylib`_pthread_start + 148\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORc53Bg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Fswm9",
                                           "createdAt":  "2022-06-28T22:43:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWhile testing a fix to a problem with thread context setting race with async signal handling on macOS (tested on arm64), I have found that the profiler/elt/slowpathenter test (and two other profiler tests) consistently fail with assert:\r\n```\r\nAssert failure(PID 82438 [0x00014206], Thread: 39495468 [0x25aa72c]): GetThread()-\u003ePreemptiveGCDisabled()\r\n    File: /Users/janvorli/git/runtime3/src/coreclr/vm/proftoeeinterfaceimpl.cpp Line: 10522\r\n    Image: /Users/janvorli/git/runtime3/artifacts/tests/coreclr/OSX.arm64.Checked/Tests/Core_Root/corerun\r\n```\r\n\r\nLooking at core dump from the crash, I have found that the issue is that `ProfileEnterNaked` is called from an `UnmanagedCallersOnly` marked method `System.ConsolePal.InvalidateTerminalSettings`. So the thread is in preemtive mode.\r\n\r\nHere is the call stack:\r\n```\r\n  * frame #0: 0x000000019e3019b8 libsystem_kernel.dylib`__pthread_kill + 8\r\n    frame #1: 0x000000019e334eb0 libsystem_pthread.dylib`pthread_kill + 288\r\n    frame #2: 0x000000019e272314 libsystem_c.dylib`abort + 164\r\n    frame #3: 0x000000010399f308 libcoreclr.dylib`::PROCAbort(signal=\u003cunavailable\u003e) at process.cpp:2667:5 [opt]\r\n    frame #4: 0x000000010399f1d8 libcoreclr.dylib`::RaiseFailFastException(pExceptionRecord=\u003cunavailable\u003e, pContextRecord=\u003cunavailable\u003e, dwFlags=\u003cunavailable\u003e) at process.cpp:1264:5 [opt]\r\n    frame #5: 0x0000000103d952cc libcoreclr.dylib`TerminateOnAssert() at debug.cpp:201:5 [opt]\r\n    frame #6: 0x0000000103d95908 libcoreclr.dylib`::_DbgBreakCheck(szFile=\"/Users/janvorli/git/runtime3/src/coreclr/vm/proftoeeinterfaceimpl.cpp\", iLine=10522, szExpr=\u003cunavailable\u003e, fConstrained=\u003cunavailable\u003e) at debug.cpp:414:5 [opt]\r\n    frame #7: 0x0000000103d95c98 libcoreclr.dylib`_DbgBreakCheckNoThrow(szFile=\"/Users/janvorli/git/runtime3/src/coreclr/vm/proftoeeinterfaceimpl.cpp\", iLine=10522, szExpr=\"GetThread()-\u003ePreemptiveGCDisabled()\", fConstrained=NO) at debug.cpp:433:18 [opt]\r\n    frame #8: 0x0000000103d95ff0 libcoreclr.dylib`::DbgAssertDialog(szFile=\"/Users/janvorli/git/runtime3/src/coreclr/vm/proftoeeinterfaceimpl.cpp\", iLine=10522, szExpr=\u003cunavailable\u003e) at debug.cpp:0 [opt]\r\n    frame #9: 0x0000000103c3eaf8 libcoreclr.dylib`::ProfileEnter(clientData=10761103408, platformSpecificHandle=0x000000016d5e2e00) at proftoeeinterfaceimpl.cpp:10522:5 [opt]\r\n    frame #10: 0x0000000103d617f0 libcoreclr.dylib`ProfileEnterNaked + 80\r\n    frame #11: 0x0000000281261bcc System.ConsolePal.InvalidateTerminalSettings()\r\n    frame #12: 0x00000001030f8afc libSystem.Native.dylib`SignalHandlerLoop(arg=\u003cunavailable\u003e) at pal_signal.c:339:17 [opt]\r\n    frame #13: 0x000000019e335240 libsystem_pthread.dylib`_pthread_start + 148\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejanvorli\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-06-28T22:43:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Fsw1u",
                                           "createdAt":  "2022-06-28T22:45:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "Repro:\r\nRun this in one console:\r\n```\r\nfor i in `seq 1 1000000`; do killall -SIGWINCH corerun; done\r\n```\r\n\r\nRun the coreclr test in another console like this:\r\n```\r\nartifacts/tests/coreclr/OSX.arm64.Checked/profiler/elt/slowpatheltenter/slowpatheltenter.sh -coreroot=/Users/janvorli/git/runtime3/artifacts/tests/coreclr/OSX.arm64.Checked/Tests/Core_Root\r\n```",
                                           "updatedAt":  "2022-06-28T22:45:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FsxA6",
                                           "createdAt":  "2022-06-28T22:46:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "The same issue happens in profiler/unittest/inlining and profiler/elt/slowpatheltleave tests",
                                           "updatedAt":  "2022-06-28T22:46:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Fv-54",
                                           "createdAt":  "2022-06-29T16:25:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@davmason ",
                                           "updatedAt":  "2022-06-29T16:25:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Fwf9_",
                                           "createdAt":  "2022-06-29T18:24:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "Seems related to https://github.com/dotnet/runtime/issues/68760",
                                           "updatedAt":  "2022-06-29T18:24:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FzMqU",
                                           "createdAt":  "2022-06-30T10:31:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davmason",
                                           "body":  "It is the same as #68760. @janvorli - is this blocking you?",
                                           "updatedAt":  "2022-06-30T10:31:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FzncG",
                                           "createdAt":  "2022-06-30T12:28:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@davmason no, I just wanted to report it. The repro requires the async signals being sent to the process and so it would probably be very rare to repro without sending the stream of signals to it.",
                                           "updatedAt":  "2022-06-30T12:28:53Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "profiler/elt/slowpatheltenter crash on macOS when SIGWINCH signal is received",
        "labels":  [
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/71472",
        "createdAt":  "2022-06-30T01:58:51Z",
        "number":  71472,
        "author":  "afilatov-st",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODAiYxQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sakshamsaxena",
                                            "createdAt":  "2022-07-28T03:44:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "maheshwariST",
                                            "createdAt":  "2022-08-10T19:45:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kanoshin",
                                            "createdAt":  "2022-08-10T20:43:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TDavtyan-ST",
                                            "createdAt":  "2022-08-11T06:57:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mkozhevnikov",
                                            "createdAt":  "2022-08-11T13:31:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alikhanovlevon",
                                            "createdAt":  "2022-08-15T09:55:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DannyRizko",
                                            "createdAt":  "2022-08-17T22:07:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xsoheilalizadeh",
                                            "createdAt":  "2022-12-22T07:34:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vvrnv",
                                            "createdAt":  "2023-01-16T08:40:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jadanah",
                                            "createdAt":  "2023-05-30T15:53:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mjeanrichard",
                                            "createdAt":  "2024-03-06T14:23:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kztitan",
                                            "createdAt":  "2025-03-26T21:55:15Z"
                                        }
                                    ],
                          "totalCount":  12
                      },
        "updatedAt":  "2025-07-30T15:56:34Z",
        "body":  "### Description\n\nIn a Kubernetes environment, we have a process that normally consumes around 3.8 Gi.\r\nWhen we run `dotnet-dump collect`, it causes the process to increase memory usage up to around 7.2 Gi.\r\nSince we have a 6 Gi memory limit for the Pod, `dotnet-dump` cannot finish dump generation and fails with a ` System.IO.EndOfStreamException: Unable to read beyond the end of the stream` exception.\r\n\r\nIf we set a higher memory limit, `dotnet-dump collect` succeeded, approximately doubling the used memory.\r\nIs this expected behavior? Is it possible to make it just save the dump to the file without consuming more memory?\n\n### Reproduction Steps\n\nRun `dotnet-dump collect --process-id 1`\n\n### Expected behavior\n\nA dump file is created\n\n### Actual behavior\n\nDump file generation failed and the process may be crashed\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOapK9ag==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Fx8dH",
                                           "createdAt":  "2022-06-30T03:53:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@afilatov-st  Thanks for the bug report! I do not believe that memory doubling is expected in this scenario (though some memory usage is expected).  Dotnet-Dump sends an IPC command using a domain socket on Linux to the target process to collect a dump.  The target process will then launch createdump as a child process to collect a dump of the parent process.  When the memory is doubled - is it the target process\u0027s memory that increases, createdump, or dotnet-dump itself that uses the extra memory?\r\n@mikem8361 @hoyosjs ",
                                           "updatedAt":  "2022-06-30T03:53:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FyXrr",
                                           "createdAt":  "2022-06-30T06:45:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "afilatov-st",
                                           "body":  "@tommcdon thanks for the prompt response!\r\nthe crash happens pretty quickly, so I had to run the following script in a parallel session\r\n```\r\nwhile true                      \r\ndo \r\n  ps aux;\r\n  sleep 0.5;\r\ndone\r\n```\r\nit shows that the RSS of the target dotnet process is in its initial value of 3.6 Gb for around 5 seconds, then it quickly grows to 6.2 Gb before Kubernetes kills it.",
                                           "updatedAt":  "2022-06-30T06:45:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FyYE8",
                                           "createdAt":  "2022-06-30T06:47:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "afilatov-st",
                                           "body":  "For the context, the Docker image is based on `mcr.microsoft.com/dotnet/aspnet:6.0.5-bullseye-slim-amd64`",
                                           "updatedAt":  "2022-06-30T06:47:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GZzam",
                                           "createdAt":  "2022-07-12T00:28:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikem8361",
                                           "body":  "Can you try a heap dump by add `--type Heap` to the dotnet-dump collect command line?\r\n\r\nWe think maybe when createdump is reading memory to write pages to the dump file that causes them to be \"swapped\" back in or read from the module files into the target process memory.  A heap dump doesn\u0027t touch/read most of the module pages.",
                                           "updatedAt":  "2022-07-12T00:28:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GZzfD",
                                           "createdAt":  "2022-07-12T00:29:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been marked `needs-author-action` and may be missing some important information.",
                                           "updatedAt":  "2022-07-12T00:29:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GfP_S",
                                           "createdAt":  "2022-07-12T23:32:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "afilatov-st",
                                           "body":  "`--type Heap` behaves in the same way",
                                           "updatedAt":  "2022-07-12T23:32:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GjgBQ",
                                           "createdAt":  "2022-07-13T21:48:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Our current working theory is that createdump is reading memory from the target process which causes pages to be \"swapped\" back in or read from the module files into the target process memory.   This requires more involved investigation and so moving .net 8.\r\n\r\n@afilatov-st  Can you provide details on how memory is being measured?",
                                           "updatedAt":  "2022-07-13T21:48:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GoM8K",
                                           "createdAt":  "2022-07-14T22:07:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "afilatov-st",
                                           "body":  "@tommcdon I run `ps aux` and assume RSS column shows me the memory consumed",
                                           "updatedAt":  "2022-07-14T22:07:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HYkRB",
                                           "createdAt":  "2022-07-28T03:47:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sakshamsaxena",
                                           "body":  "I\u0027m facing a highly similar situation. The memory shoots to almost double, and no dump is finally generated. I\u0027m not sure about the exact error since that pod shell is also killed.\r\n@afilatov-st Were you able to figure out a workaround that didn\u0027t involve increasing the memory just so that the dump could be collected ?",
                                           "updatedAt":  "2022-07-28T03:47:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HhfXt",
                                           "createdAt":  "2022-07-29T21:36:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "afilatov-st",
                                           "body":  "@sakshamsaxena unfortunately not",
                                           "updatedAt":  "2022-07-29T21:36:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HhfyM",
                                           "createdAt":  "2022-07-29T21:40:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "afilatov-st",
                                           "body":  "I also found that if you create an app simply consuming managed byte arrays, then you can create dumps of it without this problem.\r\nHowever, in our application, I suppose we use unmanaged libraries which consume unmanaged buffers and this problem occurs. However, I could not reproduce it with the synthetic tests using unmanaged memory via `Marshal.AllocHGlobal`.\r\n\r\nIf the dotnet team can provide some guidance on the problem\u0027s root cause, I could try to reproduce it, it would be beneficial for everybody.",
                                           "updatedAt":  "2022-07-29T21:40:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Hx64X",
                                           "createdAt":  "2022-08-03T17:33:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC1ND_A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "afilatov-st",
                                                                               "createdAt":  "2022-08-03T17:40:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "botinko",
                                                                               "createdAt":  "2022-08-03T18:00:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "oscartorres9",
                                                                               "createdAt":  "2023-02-01T08:15:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "mikem8361",
                                           "body":  "I\u0027ve been investigating this and figured out why createdump\u0027s memory usage is increasing so much but I don\u0027t have any fix yet. I haven\u0027t come up with any work around other than creating \"full\" dumps or any fix especially one that will fit in our 7.0 schedule.\r\n",
                                           "updatedAt":  "2022-08-03T17:33:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Hy554",
                                           "createdAt":  "2022-08-03T21:55:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikem8361",
                                           "body":  "I put that comment in the wrong issue.  This was supposed to be in issue https://github.com/dotnet/runtime/issues/72148.  The workaround of creating a full dump won\u0027t help in the target process memory usage. It may even make it worse.",
                                           "updatedAt":  "2022-08-03T21:55:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IDVOi",
                                           "createdAt":  "2022-08-09T02:14:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "\u003e However, in our application, I suppose we use unmanaged libraries which consume unmanaged buffers and this problem occurs. However, I could not reproduce it with the synthetic tests using unmanaged memory via Marshal.AllocHGlobal.\r\n\r\nThank you for the information. The \"ps aux\" command outputs the resident set size of the process, however, it does not count pages that have been swapped out. My hypothesis is that createdump is causing these swapped out pages to be paged back into the process causing RSS to increase.  Createdump will read memory pages in the target process and writes them to a dump file.  In order to write a dump these pages must be read from the process and so if they are swapped out by the OS, it is reasonable to assume that the working will increase while they are being read.   I suggest using [getrusage](https://man7.org/linux/man-pages/man2/getrusage.2.html) to output various statistics to determine if the memory usage is actually increasing or is being swapped back into memory when createdump runs.  It would be useful to track the \"Maximum\" resident set size.  Assuming that createdump is merely swapping the pages back into memory, I\u0027m guessing that the max RSS metric should not increase.  To fully understand what pages are getting pulled back in, we would need to track OS page faults.  Since this issue does not appear to be a dotnet issue at this time, I\u0027m moving this issue to the Future milestone.  ",
                                           "updatedAt":  "2022-08-09T02:14:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IDWNO",
                                           "createdAt":  "2022-08-09T02:20:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCqPdWQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2022-08-09T02:23:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "afilatov-st",
                                           "body":  "\u003eMy hypothesis is that createdump is causing these swapped out pages to be paged back into the process causing RSS to increase\r\n\r\nThanks for the answer. I doubt it because the app is run under a Kubernetes environment where the swap should be off. I\u0027ll check with `getrusage` and get back with the results.",
                                           "updatedAt":  "2022-08-09T02:20:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IDXKt",
                                           "createdAt":  "2022-08-09T02:28:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "\u003e\u003e the app is run under a Kubernetes environment where the swap should be of\r\n\r\nIt seems that recent versions of Kubernetes does support swap files: \r\nhttps://kubernetes.io/blog/2021/08/09/run-nodes-with-swap-alpha/\r\n\r\nIs it possible the environment has swap memory usage enabled?",
                                           "updatedAt":  "2022-08-09T02:28:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IM7SS",
                                           "createdAt":  "2022-08-10T22:29:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCqYzFw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2022-08-11T02:47:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "afilatov-st",
                                           "body":  "@tommcdon I confirmed that the swap is off.",
                                           "updatedAt":  "2022-08-10T22:29:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5INDUj",
                                           "createdAt":  "2022-08-10T23:04:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "afilatov-st",
                                           "body":  "Also, I don\u0027t think I can use the `getrusage` C function in our case instead I can run `cat /proc/1/status` or `cat /proc/1/meminfo`, let me know if you need info from those.",
                                           "updatedAt":  "2022-08-10T23:04:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5INg2X",
                                           "createdAt":  "2022-08-11T02:53:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Yes `/proc/1/status` would be useful, but I\u0027m also wondering if dumping `/proc/1/maps` periodically to a log file would tell us *what* pages are getting pulled in so we can see what the cause of the memory increase is.  Or maybe we should build a custom copy of createdump that dumps that info before and after it runs to help us understand what is happening.  This would at least help us to narrow down the problem further.",
                                           "updatedAt":  "2022-08-11T02:53:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IRm0C",
                                           "createdAt":  "2022-08-11T23:01:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "afilatov-st",
                                           "body":  "I\u0027ve executed `cat /proc/1/status` in a loop with 0.5 seconds delay while running `dotnet-dump` in a parallel session. `cat` was executed 24 times until the process crashed.\r\nHere is the gist showing how properties were changing until the app crashed: https://gist.github.com/afilatov-st/bac68f56676f05c549695d25a8808aa4\r\n(properties that did not change omitted)\r\nInitial memory used: 3.7 GiB\r\nMemory used when crashed: 6.63 GiB\r\nKubernetes memory limit: 7 GiB\r\n",
                                           "updatedAt":  "2022-08-11T23:02:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ITBdx",
                                           "createdAt":  "2022-08-12T10:07:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "VmSize and VmData won\u0027t say much here (it says and reserves 8 gigs, with \u003c 500mb being shared pages).  VmHWM and VmRss with RssAnon/RssFile tell us what you say - process 1 sees a rise in private resident working memory - with no further text segments getting loaded into the process. The memory starts growing once ptrace has stopped the process threads. It\u0027s interesting VmPTE grows but not VmStk, so paging is happening, and no stack movements are notoriously observed on the main thread. Createdump has a loop where it stops every thread asynchronously and waits. I see an involuntary context switch there at that time too and you have 464 threads. I wonder if we are taking time to suspend threads and in that process you\u0027re grabbing a bunch of unmanaged memory.",
                                           "updatedAt":  "2022-08-12T10:07:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KELCU",
                                           "createdAt":  "2022-09-10T03:27:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "afilatov-st",
                                           "body":  "It seems I was able to reproduce the problem in a synthetic test. I created 450 threads in the thread pool. When the dump is made the memory usage jumps to 3.72 Gb.\r\n\r\nProgram to reproduce:\r\n\r\n`Program.cs`\r\n```cs\r\nstatic void ThreadCallback(object state)\r\n{\r\n    while (true) {\r\n        Thread.Sleep(1000);\r\n    }\r\n}\r\nThreadPool.SetMinThreads(450, 1);\r\nfor (var i = 0; i \u003c 450; i++) {\r\n    ThreadPool.QueueUserWorkItem(ThreadCallback);\r\n}\r\nConsole.WriteLine(\"Started\");\r\nThread.Sleep(Timeout.Infinite);\r\n```\r\n\r\n`DumpTest.csproj`\r\n```xml\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n    \u003cPropertyGroup\u003e\r\n        \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n        \u003cTargetFramework\u003enet6.0\u003c/TargetFramework\u003e\r\n        \u003cImplicitUsings\u003eenable\u003c/ImplicitUsings\u003e\r\n    \u003c/PropertyGroup\u003e\r\n\u003c/Project\u003e\r\n```\r\n\r\n`Dockerfile`\r\n```dockerfile\r\nFROM mcr.microsoft.com/dotnet/sdk:6.0.400-1-bullseye-slim AS build-env\r\nWORKDIR /app\r\nCOPY ./DumpTest.csproj ./Program.cs ./\r\nRUN dotnet publish -c Release -o out\r\n\r\nFROM mcr.microsoft.com/dotnet/aspnet:6.0.8-bullseye-slim\r\nWORKDIR /app\r\nCOPY --from=build-env /app/out .\r\nENTRYPOINT [\"dotnet\", \"DumpTest.dll\"]\r\n```\r\n\r\nThe test was done on the `amd64` node.\r\n\r\nI also noticed that if the dump was successfully made the CPU usage stays slightly increased, but this is not the main concern for now.",
                                           "updatedAt":  "2022-09-10T04:25:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KWs3v",
                                           "createdAt":  "2022-09-15T01:28:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "afilatov-st",
                                           "body":  "What\u0027s also interesting, is that if the threads finish (remove the loop from the callback), then the dump also makes the program use gigabytes of mem after the dump is created. Setting ThreadPool min threads to 1 after threads are completed does not seem to change the situation.\r\n\r\nSo, can it be that somehow the dump process makes thread stacks (AFAIK 8 Mb on Linux) \"used\"? That correlates with the amount of memory: 450 * 8 Mb ≈ 3.5Gb.\r\n\r\n",
                                           "updatedAt":  "2022-09-15T01:28:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LG2fE",
                                           "createdAt":  "2022-09-27T21:45:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "afilatov-st",
                                           "body":  "@mikem8361 I\u0027ve tested `COMPlus_EnableFastHeapDumps=1` you mentioned in https://github.com/dotnet/diagnostics/issues/3401 but it does not seem to help",
                                           "updatedAt":  "2022-09-27T21:45:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MLsdq",
                                           "createdAt":  "2022-10-13T20:20:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "afilatov-st",
                                           "body":  "@mikem8361 @tommcdon \r\nhello, I sorry to bother you, but do you have any updates or further suggestions? ",
                                           "updatedAt":  "2022-10-13T20:20:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MLuqZ",
                                           "createdAt":  "2022-10-13T20:26:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikem8361",
                                           "body":  "Sorry, we haven\u0027t made any progress this issue.",
                                           "updatedAt":  "2022-10-13T20:26:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Qp49P",
                                           "createdAt":  "2022-12-15T14:13:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC1NFew==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "oscartorres9",
                                                                               "createdAt":  "2023-02-01T08:19:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ezsilmar",
                                           "body":  "Hello, I\u0027m facing the same issue with `createdump` increasing the memory usage of the application up to a point it fails with OOM. By comparing `/proc/\u003cpid\u003e/smaps` content before and after the dump I split the memory usage increase (I mean VmRSS increase) into 3 categories: related to code of the libraries, related to thread stacks, and other anonymous regions.\r\n\r\nThe most interesting finding is that there\u0027s a difference between operating systems. On WSL2 Ubuntu I only get RssFile increase for the libraries regions:\r\n```\r\nTotal increase: 34828 KB\r\n        Libs: 34668 KB\r\n        Stack: 0 KB\r\n        Other: 160 KB\r\n```\r\n\r\nHowever on production environment with CentOS I get:\r\n```\r\nTotal increase: 149468 KB\r\n        Libs: 5840 KB\r\n        Stack: 122740 KB\r\n        Other: 20888 KB\r\n```\r\n\r\nI also built a custom version of createdump, where I could do some printf debugging. I don\u0027t find any difference in the syscalls used on CentOS and Ubuntu, in both cases it\u0027s `process_vm_readv`. The pattern in which the memory is read also seem to be the same: we first read 1 byte from every page of the region, then combine the regions, then read in 16K chunks. On both OSes for thread stacks 8MB are read, but on CentOS this read results in the 8MB block being committed in the parent process.\r\n\r\nOne more thing to add, I think we should not concentrate on the thread stacks specifically. With the real app I found that while stack traces account for 2GB of the increase, we have 3.5GB of other anonymous regions committed. Probably related to memory usage of native libs like Kafka client, no idea how to find out what exactly they are.\r\n\r\nWhile the issue is easily reproducible I don\u0027t know what to look at further. Would you have any ideas what I could try? Thanks!",
                                           "updatedAt":  "2022-12-15T14:13:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QqN3_",
                                           "createdAt":  "2022-12-15T15:11:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Adding a few other folks in case there are thoughts on next steps to investigate the target process memory increase  @jkotas @janvorli ",
                                           "updatedAt":  "2022-12-15T15:11:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QqW96",
                                           "createdAt":  "2022-12-15T15:36:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ezsilmar",
                                           "body":  "Just remembered something: I\u0027m quite sure the issue is not related to start-stop of the threads as was suggested above. The memory usage doesn\u0027t grow before the first attempt to read a memory region [here](https://github.com/dotnet/runtime/blob/590388ba0bd8f6761ca60179897c82c8971bcaa9/src/coreclr/debug/createdump/crashinfo.cpp#L204) and validating it by reading a single byte in `InsertMemoryRegion -\u003e ValidRegion -\u003e ReadProcessMemory` [here](https://github.com/dotnet/runtime/blob/590388ba0bd8f6761ca60179897c82c8971bcaa9/src/coreclr/debug/createdump/crashinfo.cpp#L691). Reading one byte from every segment is enough to commit it on CentOS: tested it by printing the content of `/proc/\u003cpid\u003e/smaps` directly from `createdump` before the validation and before the actual copying of memory in the dump file.\r\n\r\nWonder if @afilatov-st also experienced the issue on CentOS. Also it\u0027s not related to containerized environment as I was testing on baremetal and containers, apart from making it crash with OOM the memory increase was the same.",
                                           "updatedAt":  "2022-12-15T15:36:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QqcyB",
                                           "createdAt":  "2022-12-15T15:52:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCxVSMQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkotas",
                                                                               "createdAt":  "2022-12-15T15:59:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "janvorli",
                                           "body":  "Regarding the WSL 2 Ubuntu vs CentOS, there is definitely a difference in handling committed memory (the actual reason is not WSL 2, but the kernel version). We\u0027ve seen difference in memory accounting between older and more recent kernel in #72067.\r\nAs for the dump creation causing memory usage growth, I think it makes sense. We include memory ranges that were never touched before and so physical memory pages were not backing those. But once we read them to store them in the dump, we cause the allocation of the physical pages. \r\nOne thing that we could try is to use the `mincore` function (https://man7.org/linux/man-pages/man2/mincore.2.html). For a given memory range, it extracts a bitmap of pages that are resident in memory. So we could use it as a filter to skip pages that are not resident. I guess there will be few gotchas for things like shared libraries pages, but maybe for those, we could just include them as their total size is going to be minimal.",
                                           "updatedAt":  "2022-12-15T15:52:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QrP_l",
                                           "createdAt":  "2022-12-15T18:14:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikem8361",
                                           "body":  "It doesn\u0027t look like `mincore` can be called on a remote process so I\u0027m not sure how createdump would use it.  It is a good idea not to include memory than hasn\u0027t been touched/paged in, but I\u0027m not sure how to do it yet.",
                                           "updatedAt":  "2022-12-15T18:14:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QrWDC",
                                           "createdAt":  "2022-12-15T18:36:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "Then it seems that `/proc/pid/pagemap` could be used to extract similar info. See https://www.kernel.org/doc/Documentation/vm/pagemap.txt",
                                           "updatedAt":  "2022-12-15T18:36:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Qv4Nm",
                                           "createdAt":  "2022-12-16T12:55:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODAcTLQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2022-12-16T14:23:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "janvorli",
                                                                               "createdAt":  "2022-12-16T14:34:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "afilatov-st",
                                                                               "createdAt":  "2022-12-16T19:33:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "hoyosjs",
                                                                               "createdAt":  "2022-12-20T00:29:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "freddyrios",
                                                                               "createdAt":  "2023-07-12T08:32:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "ezsilmar",
                                           "body":  "Good news, I wrote a PoC using `/proc/pid/pagemap`, the results are impressive! \r\n\r\nOnly small increase in the libs size, no stacks or anon memory increase, the dump file size down from 171 MB to 33 MB for a test application. Tested `clrstack`, `dumpheap -stat`, couple of `do` with `dotnet-dump analyze`, everything seems to work. I\u0027ll cleanup my changes and make a PR next week.",
                                           "updatedAt":  "2022-12-16T12:55:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QyqBm",
                                           "createdAt":  "2022-12-16T19:15:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikem8361",
                                           "body":  "That is great news. The only thing I\u0027m concerned about is the permissions (container config, seccomp profile, etc) necessary to open /proc/pid/pagemap.  If it isn\u0027t any different than opening /proc/pid/maps or /proc/pid/mem than we should be good.\r\n\r\n/cc: @hoyosjs ",
                                           "updatedAt":  "2022-12-16T19:15:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Q6MdO",
                                           "createdAt":  "2022-12-19T10:31:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCxhw7w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2022-12-19T19:51:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hoyosjs",
                                                                               "createdAt":  "2022-12-19T23:33:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "ezsilmar",
                                           "body":  "Indeed I have some concerns about permissions. From [kernel pagemap doc](https://www.kernel.org/doc/Documentation/vm/pagemap.txt):\r\n```\r\nSince Linux 4.0 only users with the CAP_SYS_ADMIN capability can get PFNs.\r\nIn 4.0 and 4.1 opens by unprivileged fail with -EPERM.\r\nStarting from 4.2 the PFN field is zeroed if the user does not have CAP_SYS_ADMIN.\r\nReason: information about PFNs helps in exploiting Rowhammer vulnerability.\r\n```\r\nBoth kernels I tested on were \u003e 4.2 so I was able to retrieve `present` and `swapped` flags we need but got zeroed out PFN. I think to try open the file and if it fails fallback to the current behavior.",
                                           "updatedAt":  "2022-12-19T10:31:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Q-zK3",
                                           "createdAt":  "2022-12-19T23:56:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "afilatov-st",
                                           "body":  "@ezsilmar it would be nice to know if fallback happened. A log record to the console or any other way... ",
                                           "updatedAt":  "2022-12-19T23:56:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Q-4zu",
                                           "createdAt":  "2022-12-20T00:12:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "This should also be OK since we  already use maps, so we could just use llseek + pagemaps for looking this up.\r\n\r\nIn terms of AppArmor, pagemap will need ptrace read perms. seccomp would be OK for the most part because of that as long as the kernel is 4.8+. Also, are the PFNs zero\u0027d out but other bits left? For 4.1 \u003c we\u0027ll probably need to live with the painful paging behavior if they don\u0027t add CAP_ADMIN (unless we have a way to do it inproc before we start createdump, but I am not sure it\u0027s easy to make it exception safe). I\u0027ll keep looking if SeLinux or containerd add restrictions around this, but I doubt other that the CAP_ADMIN we\u0027ll see any.\r\n\r\nAs for kernel versions, we\u0027ll need to be careful - .NET 6 and 7 still support CentOS 7 which uses kernel 3.10. There\u0027s also other OSs with community support that we don\u0027t want to break with heavy reliance on procFS. ",
                                           "updatedAt":  "2022-12-20T00:12:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RN_PQ",
                                           "createdAt":  "2022-12-22T09:41:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCx3gIQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2022-12-22T16:42:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "afilatov-st",
                                                                               "createdAt":  "2022-12-22T18:49:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "botinko",
                                                                               "createdAt":  "2022-12-28T11:38:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "ezsilmar",
                                           "body":  "@afilatov-st Regarding a backport: I already [did one for .NET 5](https://github.com/criteo-forks/runtime/releases/tag/v5.0.9-criteo4) and will do for .NET 6 today. Note it\u0027s only Linux binaries that were built with CentOS 7 docker image following [this instruction](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/linux-instructions.md). Feel free to cherry-pick it and compile yourself if you need something else :) \r\n\r\nTo check that fallback happened you should run `dotnet-dump collect -p \u003cpid\u003e --diag`. It will print messages into the output of the application, then search for `FAILED`\r\n",
                                           "updatedAt":  "2022-12-22T09:41:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RPtd9",
                                           "createdAt":  "2022-12-22T16:37:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCx3gJw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "botinko",
                                                                               "createdAt":  "2022-12-28T11:38:24Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ezsilmar",
                                           "body":  "Backport for .NET 6 based on 6.0.12: \r\n- https://github.com/criteo-forks/runtime/commit/ea1c6bcb1181149b44ddd00e977d0b7c7c0abdd8 \r\n- [CentOS binaries](https://github.com/criteo-forks/runtime/releases/tag/v6.0.12-criteo1)",
                                           "updatedAt":  "2022-12-22T16:37:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RQTeU",
                                           "createdAt":  "2022-12-22T18:49:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "afilatov-st",
                                           "body":  "@ezsilmar thank you so much!",
                                           "updatedAt":  "2022-12-22T18:49:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RZA88",
                                           "createdAt":  "2022-12-26T23:58:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "Opening this for backport tracking",
                                           "updatedAt":  "2022-12-26T23:58:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5SUfMO",
                                           "createdAt":  "2023-01-12T23:26:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "We are pausing the port for a bit - some pages are not getting properly reported in dumps and will take a bit to get fixed.",
                                           "updatedAt":  "2023-01-12T23:26:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5e4Eso",
                                           "createdAt":  "2023-06-14T18:08:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "FischlerA",
                                           "body":  "Are there any news or plans to move forward with the fix?",
                                           "updatedAt":  "2023-06-14T18:08:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5f3o7Q",
                                           "createdAt":  "2023-06-26T22:47:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@FischlerA thanks for checking in on this issue.  We plan on continuing the investigation but given our current backlog of issues this will likely move to .NET 9.  Is this issue blocking for your scenario?  ",
                                           "updatedAt":  "2023-06-26T22:47:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gaF2O",
                                           "createdAt":  "2023-07-03T06:39:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC_5LIA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2023-07-05T13:25:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "FischlerA",
                                           "body":  "\u003e @FischlerA thanks for checking in on this issue. We plan on continuing the investigation but given our current backlog of issues this will likely move to .NET 9. Is this issue blocking for your scenario?\r\n\r\nNot any more, we were able to increase the max memory to more than double the initial setting and were able to get a dump.",
                                           "updatedAt":  "2023-07-03T06:39:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gplfh",
                                           "createdAt":  "2023-07-05T10:52:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ezsilmar",
                                           "body":  "Hi @tommcdon could you please confirm if you were talking about the backport being paused until .NET 9 or about the fix not being available in .NET 8? I thought the PR https://github.com/dotnet/runtime/pull/79853 was merged so I hoped it would be a part of .NET 8 release this November.\r\n\r\nAlso if you face any particular issue with the backport or the fix please let me know the details I may be able to look into it.",
                                           "updatedAt":  "2023-07-05T10:52:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gqkY1",
                                           "createdAt":  "2023-07-05T13:34:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@ezsilmar the dumps were incomplete leading to command failures in SOS.  The code change is reading the [kernel pagemap](https://www.kernel.org/doc/Documentation/vm/pagemap.txt) to determine which pages to write to the dump, but there seems to be some discrepancy between the documented kernel behavior and what we are observing.  For example, we have found that some of the pages used by the GC seem to be marked as though it were not in use, however, are indeed needed in the dump.  While we didn\u0027t revert the change in .NET 8, we didn\u0027t back port it to .NET 6/7 due to these reasons.  @hoyosjs can provide further details.",
                                           "updatedAt":  "2023-07-05T13:34:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gutUJ",
                                           "createdAt":  "2023-07-06T02:22:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "@ezsilmar the main issue is there are some zero pages that don\u0027t get reported by pagemap - essentially they get reserved by the GC, but they get lazily initialized. The gaps in the dump make heap verification algorithms fail since elements of arrays for example will find memory missing that should be 0\u0027s.",
                                           "updatedAt":  "2023-07-06T02:22:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gw-V4",
                                           "createdAt":  "2023-07-06T10:44:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ezsilmar",
                                           "body":  "@hoyosjs thanks for the explanation! If I get it right there\u0027s no issue form the OS or createdump perspective: the GC reserved some memory but didn\u0027t commit or write to it yet, so it doesn\u0027t appear in the pagemap. Then in the dump the heap verification algorithm expects these pages to be available and zeroed out but can\u0027t find them and crashes. \r\n\r\nIf it\u0027s only a heap verification problem (is it a part of dotnet-dump?) I wonder if we may fix it there directly. I.e. treat the unavailable pages as zeroed out. \r\n\r\nOr if we can somehow detect these pages in createdump and include them in the dump. Not sure it\u0027s possible to check if these pages are reserved and zeroed out without actually reading and committing them.",
                                           "updatedAt":  "2023-07-06T10:44:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qkr1q",
                                           "createdAt":  "2023-10-31T20:43:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ezgambac",
                                           "body":  "@tommcdon @hoyosjs Is there an eta for having heap analyzers fixed?\r\nThis doubling memory issue makes dotnet dump unusable in the required scenarios, like debugging why is there high memory, as k8s will kill the pod.",
                                           "updatedAt":  "2023-10-31T20:43:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qlEmG",
                                           "createdAt":  "2023-10-31T22:06:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "@ezgambac Even in the case this got improved (the change wasn\u0027t backed out; it\u0027s just flagged off since it will make commands like `verifyheap` in SOS fail), it will still force memory swapping and some growth since the dumper itself runs in the cgroup of the container. For OOM, there\u0027s other options that could work since they are started in the init process\u0027s context if you have access to the host.",
                                           "updatedAt":  "2023-10-31T22:06:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qlG4l",
                                           "createdAt":  "2023-10-31T22:17:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ezgambac",
                                           "body":  "@hoyosjs What do you suggest doing then for the scenario where the pod is running at 80% memory then?\r\nWe currently have dotnet monitor 6, which uses an older version of dotnet dump, but from what you are saying, even if we moved to latest, the dumper would generate enough extra memory that k8s will kill the process?\r\nFrom following this thread, it seemed like the change @ezsilmar had significantly reduced the memory consumption by dotnet dump while getting a dump. Would this dump be analyzable by perfview/visual studio?",
                                           "updatedAt":  "2023-10-31T22:17:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qlKHy",
                                           "createdAt":  "2023-10-31T22:32:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "It\u0027s analyzable, but you might get tooling telling you that the heap is inconsistent. You need to deploy the app with `DOTNET_DbgDisablePagemapUse=0` and this is only there in .NET 8. Do you have access to the host (node)? ",
                                           "updatedAt":  "2023-10-31T22:32:56Z"
                                       }
                                   ],
                         "totalCount":  53
                     },
        "title":  "dotnet-dump makes process to double its used memory and fails",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/71786",
        "createdAt":  "2022-07-07T22:35:08Z",
        "number":  71786,
        "author":  "hoyosjs",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCxrIGw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tommcdon",
                                            "createdAt":  "2022-07-07T22:38:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "exyi",
                                            "createdAt":  "2023-08-01T18:11:49Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2023-08-01T18:40:47Z",
        "body":  "Looks like W^X regressed the linux JIT-perf map support. Looks like recorded address is the RW mapping instead of the RX used to execute. \r\n\r\n7.0: \r\n\r\n![image](https://user-images.githubusercontent.com/19413848/177881996-f75faca2-f63f-467b-9ada-7c7fda07f909.png)\r\n\r\nPrior\r\n\r\n![image](https://user-images.githubusercontent.com/19413848/177882014-2aaef201-f17f-4fa4-b4f8-4d568725d85c.png)\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYv8PGQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5GO7Rf",
                                           "createdAt":  "2022-07-07T22:35:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-07-07T22:35:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GO8VE",
                                           "createdAt":  "2022-07-07T22:38:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nLooks like W^X regressed the linux JIT-perf map support. Looks like recorded address is the RW mapping instead of the RX used to execute. \r\n\r\n7.0: \r\n\r\n![image](https://user-images.githubusercontent.com/19413848/177881996-f75faca2-f63f-467b-9ada-7c7fda07f909.png)\r\n\r\nPrior\r\n\r\n![image](https://user-images.githubusercontent.com/19413848/177882014-2aaef201-f17f-4fa4-b4f8-4d568725d85c.png)\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ehoyosjs\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e7.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-07-07T22:38:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Gmw5M",
                                           "createdAt":  "2022-07-14T15:11:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Hi @brianrob! I am looking for an owner to drive a fix for this for .NET 7.  Are you planning to take a look at this issue?",
                                           "updatedAt":  "2022-07-14T15:11:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GnMOt",
                                           "createdAt":  "2022-07-14T17:01:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCmyWYw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2022-07-14T18:57:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "brianrob",
                                           "body":  "@tommcdon, yes, I am currently looking at this, but definitely want to have an owner from your team to drive this.  Thanks!",
                                           "updatedAt":  "2022-07-14T17:01:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5G01Jr",
                                           "createdAt":  "2022-07-18T20:12:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davmason",
                                           "body":  "@brianrob, I am happy to work with you. What is needed from our side?",
                                           "updatedAt":  "2022-07-18T20:12:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ILdF_",
                                           "createdAt":  "2022-08-10T16:30:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@brianrob as a workaround for this issue I am guessing we could disable W^X via environment variable in the perfcollect script.  It seems that we have no clear fix in the runtime and its possible this will require linux kernel debugging as well as upstreaming changes to Linux so that Linux perf tool correctly understands jit maps + double mapping.  We are driving our .net 7 issues down and I am thinking this is something we can move out to .net 8.  Do you have any concerns with moving this to .net 8?  ",
                                           "updatedAt":  "2022-08-10T16:30:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IMuyB",
                                           "createdAt":  "2022-08-10T21:29:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Moving to 8.0 as we have a workaround ",
                                           "updatedAt":  "2022-08-10T21:29:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IMxA3",
                                           "createdAt":  "2022-08-10T21:39:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCqYxOA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2022-08-11T02:24:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "brianrob",
                                           "body":  "@tommcdon I am following up to see if this will work.  For adhoc profiling, this would mean that we can\u0027t profile anything with R^X enabled, and it wouldn\u0027t be a change to perfcollect, but instead, would be a change to the instructions for users (it\u0027s the process we\u0027re collecting that needs the env variable, not perfcollect).  I am more concerned about production profiling, so I am following up there to see if this is a problem.  I\u0027ll report back.",
                                           "updatedAt":  "2022-08-10T21:39:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JhIOC",
                                           "createdAt":  "2022-08-31T21:06:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "brianrob",
                                           "body":  "To close the loop here, the production profiling scenarios that I was concerned about have made fixes to react to this change.\r\n\r\nI have also made a change to the Linux perf tool to address this in future releases of perf: https://lore.kernel.org/all/20220805220645.95855-1-brianrob@linux.microsoft.com/\r\n\r\nI don\u0027t know how quickly this change will propagate, so it is likely worthwhile to try and fix this in the product, and consider backporting it.",
                                           "updatedAt":  "2022-08-31T21:06:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LGprg",
                                           "createdAt":  "2022-09-27T20:50:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "I\u0027ve hit this issue today. It\u0027s hard to read the profiles now.\r\n\r\n![image](https://user-images.githubusercontent.com/6011991/192632329-bf251ba1-aa13-48cc-964d-6634e02a949e.png)\r\n\r\n\u003e we could disable W^X via environment variable\r\n\r\nWhich env var do I need to set to disable it?\r\n",
                                           "updatedAt":  "2022-09-27T20:50:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LHQ6O",
                                           "createdAt":  "2022-09-28T00:01:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODCao7Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adamsitnik",
                                                                               "createdAt":  "2022-09-28T08:32:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "exyi",
                                                                               "createdAt":  "2023-08-01T18:13:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "davmason",
                                           "body":  "You have to set `DOTNET_EnableWriteXorExecute=0` before the process launches",
                                           "updatedAt":  "2022-09-28T00:01:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5i_w8Z",
                                           "createdAt":  "2023-08-01T18:40:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "exyi",
                                           "body":  "This took me quite a while to find, so if it\u0027s hard to fix, it would help if dotnet could somehow point the user to disabling W^X for profiling (detect perf and print warning? rename the memfd?). And Google please index the following text and help the next guy :]\r\n\r\nIf, after profiling using Linux perf profiler, the flamegraph is full of `[unknown]`, `memfd:doublemapper (deleted)` or the `perf report` looks like\r\n\r\n```\r\n+   14.04%     0.00%  .NET TP Worker   memfd:doublemapper (deleted)  [.] 0x00007f608d6882bc\r\n+   14.01%     0.00%  .NET TP Worker   memfd:doublemapper (deleted)  [.] 0x00007f608d688232\r\n+   13.95%     0.00%  .NET TP Worker   memfd:doublemapper (deleted)  [.] 0x00007f6086b4722c\r\n+   13.92%     0.00%  .NET TP Worker   memfd:doublemapper (deleted)  [.] 0x00007f608d687ea6\r\n+   13.90%     0.00%  .NET TP Worker   memfd:doublemapper (deleted)  [.] 0x00007f608cae05d5\r\n+   13.90%     0.00%  .NET TP Worker   memfd:doublemapper (deleted)  [.] 0x00007f608cae0734\r\n+   13.84%     0.00%  .NET TP Worker   memfd:doublemapper (deleted)  [.] 0x00007f608d730d5b\r\n+   13.74%     0.00%  .NET TP Worker   memfd:doublemapper (deleted)  [.] 0x00007f608d750b1d\r\n+   13.73%     0.00%  .NET TP Worker   memfd:doublemapper (deleted)  [.] 0x00007f608d750a8c\r\n+   13.72%     0.00%  .NET TP Worker   memfd:doublemapper (deleted)  [.] 0x00007f6086b3c1bf\r\n+   13.70%     0.00%  .NET TP Worker   memfd:doublemapper (deleted)  [.] 0x00007f608d73011a\r\n+   13.66%     0.00%  .NET TP Worker   memfd:doublemapper (deleted)  [.] 0x00007f608d750a48\r\n+   13.65%     0.00%  .NET TP Worker   memfd:doublemapper (deleted)  [.] 0x00007f608d6fbe80\r\n+   13.62%     0.00%  .NET TP Worker   memfd:doublemapper (deleted)  [.] 0x00007f608d750982\r\n+   13.57%     0.00%  .NET TP Worker   memfd:doublemapper (deleted)  [.] 0x00007f608d75162e\r\n```\r\n\r\nYou have to disable W^X by setting the `DOTNET_EnableWriteXorExecute` environment variable to 0. Minimal script for profiling might thus look like:\r\n\r\n```\r\nexport DOTNET_PerfMapEnabled=1\r\nexport DOTNET_EnableWriteXorExecute=0\r\nperf record -F 997 -g dotnet TheApp.dll\r\n```",
                                           "updatedAt":  "2023-08-01T18:40:47Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "Linux perf support regressed on W^X enabled runs",
        "labels":  [
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/72023",
        "createdAt":  "2022-07-12T14:32:17Z",
        "number":  72023,
        "author":  "kevingosse",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-14T14:07:19Z",
        "body":  "### Description\r\n\r\nWe noticed some crashes with our profiler during calls to `DoStackSnapshot`, with an error code `0x8013135E` (`CORPROF_E_STACKSNAPSHOT_INVALID_TGT_THREAD`). Upon further inspection, it seems to happen when the thread dies before `DoStackSnapshot` has time to suspend it. \r\n\r\n[This article](https://github.com/dotnet/runtime/blob/05473449c1db9edbbbc565b39d73a59bf517de96/docs/design/coreclr/profiling/davbr-blog-archive/Profiler%20stack%20walking%20Basics%20and%20beyond.md) explains that we should block the calls to `ICorProfilerCallback::ThreadDestroyed` while walking the thread to prevent that from happening. Unfortunately, that\u0027s already what we\u0027re going.\r\n\r\nThe issue is that the EE shutdown sequence [starts by setting `g_fEEShutDown` to `ShutDown_Start`,](https://github.com/dotnet/runtime/blob/05473449c1db9edbbbc565b39d73a59bf517de96/src/coreclr/vm/ceemain.cpp#L1214) then run a bunch of step, before [calling `ICorProfilerInfo::Shutdown`](https://github.com/dotnet/runtime/blob/05473449c1db9edbbbc565b39d73a59bf517de96/src/coreclr/vm/ceemain.cpp#L1290), notifying the profiler that is should stop trying to walk threads. On the other hand, when a thread dies, [it checks if `g_fEEShutDown != 0`](https://github.com/dotnet/runtime/blob/2d41986530818cc494888905dd2b6dcfedfbcc18/src/coreclr/vm/threads.cpp#L2975), and [calls `ThreadDestroyed` ](https://github.com/dotnet/runtime/blob/2d41986530818cc494888905dd2b6dcfedfbcc18/src/coreclr/vm/threads.cpp#L3058)only if that\u0027s not the case.\r\n\r\nIt means that there is a window of time, between the moment when `g_fEEShutDown` is set to `ShutDown_Start` and the moment when `ICorProfilerInfo::Shutdown` is called, during which the profiler isn\u0027t notified when a thread dies.\r\n\r\nThe issue is not critical because the crash happens at shutdown, but it\u0027s still an inconvenience. I don\u0027t know what\u0027s the best way to fix it, but I believe `ThreadDestroyed` should keep being called until `g_fEEShutDown` is set to `ShutDown_Profiler`. Or `DoStackSnapshot` shouldn\u0027t tear down the process when it receives an invalid thread handle: https://github.com/dotnet/runtime/blob/05473449c1db9edbbbc565b39d73a59bf517de96/src/coreclr/vm/proftoeeinterfaceimpl.cpp#L8493\r\n\r\n### Reproduction Steps\r\n\r\nHard to reproduce since it\u0027s a race condition, but basically have a profiler continuously call `DoStackSnapshot` during shutdown.\r\n\r\n### Expected behavior\r\n\r\n`ICorProfilerInfo::ThreadDestroyed` should be called for the dying thread, **or** `DoStackSnapshot` shouldn\u0027t tear down the process.\r\n\r\n### Actual behavior\r\n\r\n`DoStackSnapshot` tears down the process with an error code `CORPROF_E_STACKSNAPSHOT_INVALID_TGT_THREAD`\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORpnpPg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5GcWQf",
                                           "createdAt":  "2022-07-12T14:32:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nWe noticed some crashes with our profiler during calls to `DoStackSnapshot`, with an error code `0x8013135E` (`CORPROF_E_STACKSNAPSHOT_INVALID_TGT_THREAD`). Upon further inspection, it seems to happen when the thread dies before `DoStackSnapshot` has time to suspend it. \r\n\r\n[This article](https://github.com/dotnet/runtime/blob/05473449c1db9edbbbc565b39d73a59bf517de96/docs/design/coreclr/profiling/davbr-blog-archive/Profiler%20stack%20walking%20Basics%20and%20beyond.md) explains that we should block the calls to `ICorProfilerCallback::ThreadDestroyed` while walking the thread to prevent that from happening. Unfortunately, that\u0027s already what we\u0027re going.\r\n\r\nThe issue is that the EE shutdown sequence [starts by setting `g_fEEShutDown` to `ShutDown_Start`,](https://github.com/dotnet/runtime/blob/05473449c1db9edbbbc565b39d73a59bf517de96/src/coreclr/vm/ceemain.cpp#L1214) then run a bunch of step, before [calling `ICorProfilerInfo::Shutdown`](https://github.com/dotnet/runtime/blob/05473449c1db9edbbbc565b39d73a59bf517de96/src/coreclr/vm/ceemain.cpp#L1290), notifying the profiler that is should stop trying to walk threads. On the other hand, when a thread dies, \r\n[it checks if `g_fEEShutDown != 0`](https://github.com/dotnet/runtime/blob/2d41986530818cc494888905dd2b6dcfedfbcc18/src/coreclr/vm/threads.cpp#L2975), and [calls `ThreadDestroyed` ](https://github.com/dotnet/runtime/blob/2d41986530818cc494888905dd2b6dcfedfbcc18/src/coreclr/vm/threads.cpp#L3058)only if that\u0027s not the case.\r\n\r\nIt means that there is a window of time, between the moment when `g_fEEShutDown` is set to `ShutDown_Start` and the moment when `ICorProfilerInfo::Shutdown` is called, during which the profiler isn\u0027t notified when a thread dies.\r\n\r\nThe issue is not critical because the crash happens at shutdown, but it\u0027s still an inconvenience. I don\u0027t know what\u0027s the best way to fix it, but I believe `ThreadDestroyed` should keep being called until `g_fEEShutDown` is set to `ShutDown_Profiler`. Or `DoStackSnapshot` shouldn\u0027t tear down the process when it receives an invalid thread handle (https://github.com/dotnet/runtime/blob/05473449c1db9edbbbc565b39d73a59bf517de96/src/coreclr/vm/proftoeeinterfaceimpl.cpp#L8493).\n\n### Reproduction Steps\n\nHard to reproduce since it\u0027s a race condition, but basically have a profiler continuously call `DoStackSnapshot` during shutdown.\n\n### Expected behavior\n\n`ICorProfilerInfo::ThreadDestroyed` should be called for the dying thread, **or** `DoStackSnapshot` shouldn\u0027t tear down the process.\n\n### Actual behavior\n\n`DoStackSnapshot` tears down the process with an error code `CORPROF_E_STACKSNAPSHOT_INVALID_TGT_THREAD`\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ekevingosse\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-07-12T14:32:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GcezQ",
                                           "createdAt":  "2022-07-12T15:03:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "teo-tsirpanis",
                                           "body":  "@davmason",
                                           "updatedAt":  "2022-07-12T15:03:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Gj_Pr",
                                           "createdAt":  "2022-07-14T01:09:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davmason",
                                           "body":  "Thanks for reporting this, Kevin. I took a look and I don\u0027t think this behavior was intentional - there shouldn\u0027t be anything in the profiler code that prevents callbacks even after g_fEEShutDown is set, but we bail from `Thread::OnThreadTerminate` before we call the profiler back.\r\n\r\nI can\u0027t think of a clear right thing to do here, if we move the callback to before that check then I can easily imagine some other profiler would start crashing because they implicitly rely on the callback not happening when the runtime is shutting down.\r\n\r\nMy preference would be to not fix this unless there is a clear and specific need. If we do want to fix it, we definitely shouldn\u0027t do it in 7 - it is far too late and we risk destabilizing right before shipping.\r\n\r\nMoving to future for now, but happy to continue the conversation about whether or not we fix it in 8",
                                           "updatedAt":  "2022-07-14T01:09:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Gmek-",
                                           "createdAt":  "2022-07-14T14:06:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kevingosse",
                                           "body":  "\u003e I can\u0027t think of a clear right thing to do here, if we move the callback to before that check then I can easily imagine some other profiler would start crashing because they implicitly rely on the callback not happening when the runtime is shutting down.\r\n\r\nI doubt so. As far as I can tell, there is no synchronization, so there is always a chance for callbacks being executed slightly after shutdown. I expect most profilers to be resilient to that (at least, we had to make sure ours was).\r\n\r\n\u003e My preference would be to not fix this unless there is a clear and specific need.\r\n\r\nAs a workaround I\u0027m now checking that the thread handle is still valid right before calling `DoStackSnapshot`. It doesn\u0027t entirely remove the race condition, but I\u0027m hoping it makes it unlikely enough. We\u0027ll see 🙂 Honestly, I think the main issue isn\u0027t that `ThreadDestroyed` isn\u0027t called, but rather that `DoStackSnapshot` tears down the process if the handle is invalid.",
                                           "updatedAt":  "2022-07-14T14:07:19Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "ICorProfilerCallback:ThreadDestroyed race condition on shutdown",
        "labels":  [
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/73527",
        "createdAt":  "2022-08-04T01:18:41Z",
        "number":  73527,
        "author":  "creizlein",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-05-13T18:53:12Z",
        "body":  "### .NET version\n\n6.0.302\n\n### Did it work in .NET Framework?\n\nYes\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nYes, it works in both, .NET 5.0.* and .NET Core 3.*\n\n### Issue description\n\nThere seems to be a bug in .NET 6.0 runtime where a WinFormsApp cannot initialize CoInitializeSecurity properly because it always complain that must be run earlier.\r\n\r\n`Security must be initialized before any interfaces are marshalled or unmarshalled. It cannot be changed once initialized.`\r\n\r\nIt is a known fact that you have to use this call as earlier as possible in your project, and So I do, but the exact same code works fine in .NET 5 (or any earlier) and does not run on .NET 6, so I am out of ideas on how to fix it.\r\n\r\nFurthermore, doing extra testing, I found out that it works fine in a ConsoleApp using .NET 6 but it does NOT when using WinForms app. Looks like in .NET 6 they changed something that is stopping this call to be successfully.\r\n\r\nThe following repo demonstrate the problem: https://github.com/creizlein/CoInitializeSecurity\n\n### Steps to reproduce\n\nCreate any WinFormsApp targeting .NET 6.0 and try to p/Invoke CoInitializeSecurity as early as you can, but it always returns the same error no matter were you call it.\r\n\r\n`Security must be initialized before any interfaces are marshalled or unmarshalled. It cannot be changed once initialized.`\r\n\r\nCreated a sample build as proof: https://github.com/creizlein/CoInitializeSecurity",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOfa5P8Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5H9pK-",
                                           "createdAt":  "2022-08-06T02:37:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "creizlein",
                                           "body":  "This seems to be related to HotReload debug support on .NET 6",
                                           "updatedAt":  "2022-08-06T02:37:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5H9pLD",
                                           "createdAt":  "2022-08-07T06:34:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-08-07T06:34:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IBwtz",
                                           "createdAt":  "2022-08-08T17:45:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "@RussKie why do you think this is a runtime issue instead of a winforms issue given that it only reproduces in a winforms app? Based on the repro, my initial conclusion is that something is marshalling a COM interface in WinForms before the `Form.Load` event.\r\n\r\n@creizlein I think the best solution for you is to put the `CoInitializeSecurity` call in the `Main` method even in the WinForms case. That will make the WinForms scenario more similar to the ConsoleApp scenario in your repro and will avoid any issues with WinForms possibly introducing COM marshalling before the `Form.Load` event.",
                                           "updatedAt":  "2022-08-08T17:45:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IB0qf",
                                           "createdAt":  "2022-08-08T18:00:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elinor-fung",
                                           "body":  "@creizlein thank you for the nice repro.\r\n\r\nThis is from a WinForms app registering a handler for `SystemEvents.UserPreferenceChanged`, triggering the initialization of system event handling. The difference in 5.0 versus 6.0 is in: https://github.com/dotnet/runtime/pull/53467. There was a bug deadlock-causing bug where we would skip the marshalling if `SystemEvents.EnsureSystemEvents` was called on the STA thread, which was fixed by that PR (which also means that a COM interface is now being marshalled when the WinForms app registers its handler).\r\n\r\nI agree with @jkoritzinsky. I think the best solution is to move the `CoInitializeSercurity` call earlier to `Main`.\r\n",
                                           "updatedAt":  "2022-08-08T18:00:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ICB94",
                                           "createdAt":  "2022-08-08T18:57:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "creizlein",
                                           "body":  "@elinor-fung @jkoritzinsky \r\nThanks for you guys input, I did actually moved it earlier before the Main call (its not in the repo, sorry, I can push it)... And it made no difference... well, sort out.\r\n\r\nMoving it earlier there made the app to actually work, but NO from the VS IDE... if you run it ouside (prolly because of the debugger) then it works, but not within the IDE.\r\n\r\nFurthermore, I found out that what was causing it not to work from the IDE is the Hot Reload (Project Properties / Debug) , if I disable it then it works, but if enabled it does not... \r\n\r\nFinally, the odd part is that it DOES work for .NET 5 and earlier whatever Hot Reload is enabled or not, it just affects .NET 6 WinForms, because even for a console app with Hot Reload it works. so, maybe there is a difference on how Hot Reload works.\r\n\r\nAgain, maybe then this is not a bug at all but a feature collision.\r\n\r\nBottom line, within the VS IDE with .NET6 + Hot Reload + WinForm you cannot get it to work, everything else works",
                                           "updatedAt":  "2022-08-08T18:57:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ICdO0",
                                           "createdAt":  "2022-08-08T20:58:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "That is likely due to https://github.com/dotnet/winforms/pull/4831, which added a hot-reload handler in WinForms to refresh all open forms based on any updates from HotReload. It\u0027s possible that one of the APIs that is called by this handler (even in the no-op case) ends up registering a handler for `SystemEvents.UserPreferenceChanged`, which will cause the issue.\r\n\r\nIf you add your `CoInitializeSecurity` call in a module initializer for your main assembly, that should run before anything else is run I would think.",
                                           "updatedAt":  "2022-08-08T20:58:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IC_gF",
                                           "createdAt":  "2022-08-09T00:05:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RussKie",
                                           "body":  "Thank you @jkoritzinsky @elinor-fung for your help and guidance. Adding @stephentoub for awareness since he was involved in both mentioned changes.\r\n\r\n@creizlein to confirm - you need to invoke `CoInitializeSecurity` only once when your app starts, is that correct?",
                                           "updatedAt":  "2022-08-09T00:05:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IFssh",
                                           "createdAt":  "2022-08-09T14:25:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "creizlein",
                                           "body":  "@RussKie that is correct",
                                           "updatedAt":  "2022-08-09T14:25:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5INQMK",
                                           "createdAt":  "2022-08-11T00:24:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### .NET version\n\n6.0.302\n\n### Did it work in .NET Framework?\n\nYes\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nYes, it works in both, .NET 5.0.* and .NET Core 3.*\n\n### Issue description\n\nThere seems to be a bug in .NET 6.0 runtime where a WinFormsApp cannot initialize CoInitializeSecurity properly because it always complain that must be run earlier.\r\n\r\n`Security must be initialized before any interfaces are marshalled or unmarshalled. It cannot be changed once initialized.`\r\n\r\nIt is a known fact that you have to use this call as earlier as possible in your project, and So I do, but the exact same code works fine in .NET 5 (or any earlier) and does not run on .NET 6, so I am out of ideas on how to fix it.\r\n\r\nFurthermore, doing extra testing, I found out that it works fine in a ConsoleApp using .NET 6 but it does NOT when using WinForms app. Looks like in .NET 6 they changed something that is stopping this call to be successfully.\r\n\r\nThe following repo demonstrate the problem: https://github.com/creizlein/CoInitializeSecurity\n\n### Steps to reproduce\n\nCreate any WinFormsApp targeting .NET 6.0 and try to p/Invoke CoInitializeSecurity as early as you can, but it always returns the same error no matter were you call it.\r\n\r\n`Security must be initialized before any interfaces are marshalled or unmarshalled. It cannot be changed once initialized.`\r\n\r\nCreated a sample build as proof: https://github.com/creizlein/CoInitializeSecurity\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ecreizlein\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-08-11T00:24:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5INQNg",
                                           "createdAt":  "2022-08-11T00:25:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCqYw7g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "creizlein",
                                                                               "createdAt":  "2022-08-11T02:21:11Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "elinor-fung",
                                           "body":  "VS sets the `DOTNET_STARTUP_HOOKS` environment variable to load a [startup hook](https://github.com/dotnet/runtime/blob/main/docs/design/features/host-startup-hook.md) for hot reload - for example `c:\\program files\\microsoft visual studio\\2022\\preview\\common7\\ide\\commonextensions\\microsoft\\hotreload\\Microsoft.Extensions.DotNetDeltaApplier.dll`.\r\n\r\nIt looks like that startup hook ends up in a `Monitor.Wait`, which is resulting in the marshalling / CoInitializeSecurity to occur before `Main`.\r\n\r\n\u003e it DOES work for .NET 5 and earlier whatever Hot Reload is enabled or not\r\n\r\nHot reload is only supported in .NET 6 and later, so I expect that when running targeting .NET 5, having it enabled in the project properties doesn\u0027t change anything (VS doesn\u0027t set the startup hook environment variable).\r\n\r\ncc @dotnet/dotnet-diag ",
                                           "updatedAt":  "2022-08-11T00:25:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5INQ_p",
                                           "createdAt":  "2022-08-11T00:31:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCqYxAQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "creizlein",
                                                                               "createdAt":  "2022-08-11T02:22:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "elinor-fung",
                                           "body":  "The difference between the console app and WinForms is that WinForms has `Main` marked with `STAThread`, so it requires the initialization when doing the wait. You can see the same issue in the console app if you mark its `Main` with `STAThread`.\r\n\r\n\u003e maybe then this is not a bug at all but a feature collision\r\n\r\nPerhaps this is the case. We can document, but I\u0027m not sure what else we can do here.",
                                           "updatedAt":  "2022-08-11T00:31:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5INd6t",
                                           "createdAt":  "2022-08-11T02:25:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "creizlein",
                                           "body":  "Thanks @elinor-fung for those replies, that does explain all the diff cases and problems I experience.\r\nSo targets \u003c .NET 6 are all safe because they don\u0027t use HotReload at all and .NET6 Console because of the STAThread on its Main.\r\n\r\nFor me at least, and again, just for me, It was good to know this tricks/caveats and I ended up disabling HotReload on my project, as it was not crucial, and now I\u0027m working fine with it, But to be honest it was really hard to figure it out so having it documented would be nice!! 👏 \r\n\r\nI am also assuming the same behavior will be seen on .NET7 so its not going away but rather stay",
                                           "updatedAt":  "2022-08-11T02:25:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59rk_x",
                                           "createdAt":  "2024-05-13T18:53:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "@creizlein Can you help with the following? https://github.com/dotnet/runtime/issues/97410#issuecomment-2108573580",
                                           "updatedAt":  "2024-05-13T18:53:11Z"
                                       }
                                   ],
                         "totalCount":  13
                     },
        "title":  "Hot reload: Cannot call CoInitializeSecurity in time when running under debugger",
        "labels":  [
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/73826",
        "createdAt":  "2022-08-11T22:45:09Z",
        "number":  73826,
        "author":  "davmason",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-23T21:26:08Z",
        "body":  "Currently the ICorProfiler callbacks won\u0027t let you know when phase 1 exception processing is over, so it\u0027s hard to tell when an exception goes unhandled. You get callbacks for searching for catches/filters, but if one is not found we call TerminateProcess and everything immediately stops.\r\n\r\nWe should add a callback for unhandled exceptions, and revisit if there are other useful callbacks.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSEZbvw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5IRlu_",
                                           "createdAt":  "2022-08-11T22:52:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nCurrently the ICorProfiler callbacks won\u0027t let you know when phase 1 exception processing is over, so it\u0027s hard to tell when an exception goes unhandled. You get callbacks for searching for catches/filters, but if one is not found we call TerminateProcess and everything immediately stops.\r\n\r\nWe should add a callback for unhandled exceptions, and revisit if there are other useful callbacks.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edavmason\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003edavmason\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-08-11T22:52:33Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Add an ICorProfiler callback for when an exception goes unhandled",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/76840",
        "createdAt":  "2022-10-10T19:52:54Z",
        "number":  76840,
        "author":  "jeffkl",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCq9WeQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jkoritzinsky",
                                            "createdAt":  "2022-10-10T20:53:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "slang25",
                                            "createdAt":  "2022-10-10T23:15:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pedoc",
                                            "createdAt":  "2022-10-11T03:28:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "martincostello",
                                            "createdAt":  "2022-10-11T22:22:30Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2023-05-17T20:36:44Z",
        "body":  "### Background and motivation\n\nI find myself occasionally wanting to make `Debugger.Launch()` conditional with syntax like:\r\n\r\n```c#\r\nif (string.Equals(Environment.GetEnvironmentVariable(DebugEnvironmentVariableName), bool.TrueString, StringComparison.OrdinalIgnoreCase))\r\n{\r\n    Debugger.Launch();\r\n}\r\n```\r\n\r\nI think it would be a good addition if an overload to `Debugger.Launch()` accepted a `bool` that I could use as my conditional expression.  Since `Debugger` is static, I can\u0027t add my own extension method.\r\n\r\n\n\n### API Proposal\n\n```csharp\r\nnamespace System.Diagnostics\r\n{\r\n    public static partial class Debugger\r\n    {\r\n        /// \u003csummary\u003e\r\n        /// Launches and attaches a debugger to the process. If a debugger is already attached, nothing happens.\r\n        /// \u003c/summary\u003e\r\n        /// \u003cparam name=\"condition\"\u003e\u003cc\u003etrue\u003c/c\u003e to launch the debugger, otherwise \u003cc\u003efalse\u003c/c\u003e.\u003c/param\u003e\r\n        /// \u003creturns\u003e\u003cc\u003etrue\u003c/c\u003e if the debugger was launched or a debugger is already attached, otherwise \u003cc\u003efalse\u003c/c\u003e.\u003c/returns\u003e\r\n        public static bool Launch(bool condition) =\u003e condition \u0026\u0026 Launch();\r\n    }\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\nDebugger.Launch(condition: string.Equals(Environment.GetEnvironmentVariable(DebugEnvironmentVariableName), bool.TrueString, StringComparison.OrdinalIgnoreCase));\r\n```\n\n### Alternative Designs\n\nI can have my own static class like `DebuggerExtensions`:\r\n\r\n```C#\r\npublic static class DebuggerExtensions\r\n{\r\n    /// \u003csummary\u003e\r\n    /// Launches and attaches a debugger to the process. If a debugger is already attached, nothing happens.\r\n    /// \u003c/summary\u003e\r\n    /// \u003cparam name=\"condition\"\u003e\u003cc\u003etrue\u003c/c\u003e to launch the debugger, otherwise \u003cc\u003efalse\u003c/c\u003e.\u003c/param\u003e\r\n    /// \u003creturns\u003e\u003cc\u003etrue\u003c/c\u003e if the debugger was launched or a debugger is already attached, otherwise \u003cc\u003efalse\u003c/c\u003e.\u003c/returns\u003e\r\n    public static bool Launch(bool condition) =\u003e condition \u0026\u0026 System.Diagnostics.Debugger.Launch();\r\n}\r\n```\r\n\r\nBut I find myself doing this in multiple projects and don\u0027t think its wroth shipping a standalone class library for this.  \n\n### Risks\n\nSince it would be an overload with a unique set of parameters, there should not be any breaking change in the public API.  But if no one is going to use it other than me, it\u0027s probably not worth shipping. Also, there\u0027s potential frustration where code targeting .NET Framework wouldn\u0027t compile with this syntax, since only newer versions of .NET would have it.  ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOXIJobQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5L69J4",
                                           "createdAt":  "2022-10-10T19:53:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nI find myself occasionally wanting to make `Debugger.Launch()` conditional with syntax like:\r\n\r\n```c#\r\nif (string.Equals(Environment.GetEnvironmentVariable(DebugEnvironmentVariableName), bool.TrueString, StringComparison.OrdinalIgnoreCase))\r\n{\r\n    Debugger.Launch();\r\n}\r\n```\r\n\r\nI think it would be a good addition if an overload to `Debugger.Launch()` accepted a `bool` that I could use as my conditional expression.  Since `Debugger` is static, I can\u0027t add my own extension method.\r\n\r\n\n\n### API Proposal\n\n```csharp\r\nnamespace System.Diagnostics\r\n{\r\n    public static partial class Debugger\r\n    {\r\n        /// \u003csummary\u003e\r\n        /// Launches and attaches a debugger to the process. If a debugger is already attached, nothing happens.\r\n        /// \u003c/summary\u003e\r\n        /// \u003cparam name=\"condition\"\u003e\u003cc\u003etrue\u003c/c\u003e to launch the debugger, otherwise \u003cc\u003efalse\u003c/c\u003e.\u003c/param\u003e\r\n        /// \u003creturns\u003e\u003cc\u003etrue\u003c/c\u003e if the debugger was launched or a debugger is already attached, otherwise \u003cc\u003efalse\u003c/c\u003e.\u003c/returns\u003e\r\n        public static bool Launch(bool condition) =\u003e condition \u0026\u0026 Launch();\r\n    }\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\nDebugger.Launch(condition: string.Equals(Environment.GetEnvironmentVariable(DebugEnvironmentVariableName), bool.TrueString, StringComparison.OrdinalIgnoreCase));\r\n```\n\n### Alternative Designs\n\nI can have my own static class like `DebuggerExtensions`:\r\n\r\n```C#\r\npublic static class DebuggerExtensions\r\n{\r\n    /// \u003csummary\u003e\r\n    /// Launches and attaches a debugger to the process. If a debugger is already attached, nothing happens.\r\n    /// \u003c/summary\u003e\r\n    /// \u003cparam name=\"condition\"\u003e\u003cc\u003etrue\u003c/c\u003e to launch the debugger, otherwise \u003cc\u003efalse\u003c/c\u003e.\u003c/param\u003e\r\n    /// \u003creturns\u003e\u003cc\u003etrue\u003c/c\u003e if the debugger was launched or a debugger is already attached, otherwise \u003cc\u003efalse\u003c/c\u003e.\u003c/returns\u003e\r\n    public static bool Launch(bool condition) =\u003e condition \u0026\u0026 System.Diagnostics.Debugger.Launch();\r\n}\r\n```\r\n\r\nBut I find myself doing this in multiple projects and don\u0027t think its wroth shipping a standalone class library for this.  \n\n### Risks\n\nSince it would be an overload with a unique set of parameters, there should not be any breaking change in the public API.  But if no one is going to use it other than me, it\u0027s probably not worth shipping. Also, there\u0027s potential frustration where code targeting .NET Framework wouldn\u0027t compile with this syntax, since only newer versions of .NET would have it.  \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejeffkl\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-Diagnostics-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-10-10T19:53:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cgmht",
                                           "createdAt":  "2023-05-17T20:36:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Thank you for your sending feedback for the Debugger.Launch API.  After careful consideration, we do not plan to action this particular item in this release. We will continue to evaluate it for future releases. Ideally, we would like to fix every issue and implement every idea people submit. Realistically, we cannot address every item.",
                                           "updatedAt":  "2023-05-17T20:36:43Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[API Proposal]: Add overload to Debugger.Launch() that accepts a conditional expression",
        "labels":  [
                       "enhancement",
                       "api-suggestion",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/77286",
        "createdAt":  "2022-10-20T18:16:43Z",
        "number":  77286,
        "author":  "ericstj",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCrh8Yg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bartonjs",
                                            "createdAt":  "2022-11-19T19:23:24Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2022-10-20T21:15:32Z",
        "body":  "### Description\n\nWhen debugging a managed project in mixed mode, I try to step into a method then step out of it.  The debugger will stop stepping and just \"go\" until my next breakpoint.\r\n\r\nIn the case I observed I stepped into a function which was likely inlined.\r\nhttps://github.com/dotnet/runtime/blob/a32feb0a20e67aadda1da24f8963d7e440515260/src/libraries/Common/src/Interop/Windows/Kernel32/Interop.CreateFile.cs#L26-L37\r\nThe debugger skipped showing me this frame and instead went to the child frame:\r\nhttps://github.com/dotnet/runtime/blob/a32feb0a20e67aadda1da24f8963d7e440515260/src/libraries/Common/src/System/IO/PathInternal.Windows.cs#L94\r\nStepping out of that caused the debugger to \"go\" to my next breakpoint.\n\n### Reproduction Steps\n\n[sourceDemo.zip](https://github.com/dotnet/runtime/files/9832781/sourceDemo.zip)\r\nTry debugging this project.  Be sure to enable native debugging.\r\n\r\nYou can run it once and let it break on exception thrown, then set a breakpoint a few lines above in the source file at the call to Interop.Kernel32.CreateFile.\r\n\r\nRestart and then try to step into `CreateFile`, observe it step into `EnsureExtendedPrefixIfNeeded`, step out.\n\n### Expected behavior\n\nThe debugger steps out of `EnsureExtendedPrefixIfNeeded` : either to the method body of `Interop.Kernel32.CreateFile` (which was inlined) or to the `SafeFileHandle.CreateFile` call site (this is what happens in managed only debugging).\n\n### Actual behavior\n\nDebugger doesn\u0027t step, but goes until the next breakpoint is hit.\n\n### Regression?\n\nNot sure.  I can repro it with the latest preview VS using .NET Core 3.1, .NET 6.0, and .NET 7.0.  I remember hitting this bug before but I also remember it working.  I suspect it was fixed for some time and then regressed again.\n\n### Known Workarounds\n\nSet more breakpoints to catch the runaway debugger\n\n### Configuration\n\nVS 17.4 Preview 4\r\n.NET 7.0 RC2 SDK\n\n### Other information\n\ncc @AaronRobinsonMSFT ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTKlFSw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5MpjFE",
                                           "createdAt":  "2022-10-20T18:17:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nWhen debugging a managed project in mixed mode, I try to step into a method then step out of it.  The debugger will stop stepping and just \"go\" until my next breakpoint.\r\n\r\nIn the case I observed I stepped into a function which was likely inlined.\r\nhttps://github.com/dotnet/runtime/blob/a32feb0a20e67aadda1da24f8963d7e440515260/src/libraries/Common/src/Interop/Windows/Kernel32/Interop.CreateFile.cs#L26-L37\r\nThe debugger skipped showing me this frame and instead went to the child frame:\r\nhttps://github.com/dotnet/runtime/blob/a32feb0a20e67aadda1da24f8963d7e440515260/src/libraries/Common/src/System/IO/PathInternal.Windows.cs#L94\r\nStepping out of that caused the debugger to \"go\" to my next breakpoint.\n\n### Reproduction Steps\n\n[sourceDemo.zip](https://github.com/dotnet/runtime/files/9832781/sourceDemo.zip)\r\nTry debugging this project.  Be sure to enable native debugging.\r\n\r\nYou can run it once and let it break on exception thrown, then set a breakpoint a few lines above in the source file at the call to Interop.Kernel32.CreateFile.\r\n\r\nRestart and then try to step into `CreateFile`, observe it step into `EnsureExtendedPrefixIfNeeded`, step out.\n\n### Expected behavior\n\nThe debugger steps out of `EnsureExtendedPrefixIfNeeded` : either to the method body of `Interop.Kernel32.CreateFile` (which was inlined) or to the `SafeFileHandle.CreateFile` call site (this is what happens in managed only debugging).\n\n### Actual behavior\n\nDebugger doesn\u0027t step, but goes until the next breakpoint is hit.\n\n### Regression?\n\nNot sure.  I can repro it with the latest preview VS using .NET Core 3.1, .NET 6.0, and .NET 7.0.  I remember hitting this bug before but I also remember it working.  I suspect it was fixed for some time and then regressed again.\n\n### Known Workarounds\n\nSet more breakpoints to catch the runaway debugger\n\n### Configuration\n\nVS 17.4 Preview 4\r\n.NET 7.0 RC2 SDK\n\n### Other information\n\ncc @AaronRobinsonMSFT \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eericstj\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-10-20T18:17:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Mpw4N",
                                           "createdAt":  "2022-10-20T19:10:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@ericstj does this issue reproduce if you set `DOTNET_ReadyToRun=0` and enable `Suppress JIT optimization on module load` in VS?",
                                           "updatedAt":  "2022-10-20T19:10:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MpzFR",
                                           "createdAt":  "2022-10-20T19:19:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@hoyosjs ",
                                           "updatedAt":  "2022-10-20T19:19:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Mp1-r",
                                           "createdAt":  "2022-10-20T19:29:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "\u003e @ericstj does this issue reproduce if you set DOTNET_ReadyToRun=0 and enable Suppress JIT optimization on module load in VS?\r\n\r\nFYI - I was not able to reproduce the problem on 6.0 or 7.0 RC2 when disabling R2R and JIT optimizations.  I believe the issue is related to JIT optimizations.  ",
                                           "updatedAt":  "2022-10-20T19:29:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MqEYp",
                                           "createdAt":  "2022-10-20T20:20:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCuONdQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2022-10-20T20:21:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ericstj",
                                           "body":  "I had checked `Suppress JIT Optimization on module load` but not `DOTNET_ReadyToRun=0`.  Indeed when setting `DOTNET_ReadyToRun=0` the problem does not repro.",
                                           "updatedAt":  "2022-10-20T20:20:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MqEt4",
                                           "createdAt":  "2022-10-20T20:21:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Thanks @ericstj! Since this is an optimized debugging scenario, I will move this one out to Future.  Let me know if we should re-evaluate for .NET 8.",
                                           "updatedAt":  "2022-10-20T20:21:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MqRaW",
                                           "createdAt":  "2022-10-20T21:05:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "I see, is that because you don\u0027t expect customers to be debugging the framework code much, nor running cross-gen on their own apps, so they won\u0027t hit this?",
                                           "updatedAt":  "2022-10-20T21:05:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MqUVL",
                                           "createdAt":  "2022-10-20T21:15:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCv_X9g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "ericstj",
                                                                               "createdAt":  "2022-10-20T21:20:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2022-11-01T13:16:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adamsitnik",
                                                                               "createdAt":  "2022-11-22T07:00:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@ericstj  we are working with VS to improve the framework debug experience and so yes once that is completed, we do not expect customers to run into this problem.",
                                           "updatedAt":  "2022-10-20T21:15:31Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "When debugging mixed mode, stepping turns into a \"go\"",
        "labels":  [
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/77433",
        "createdAt":  "2022-10-25T16:03:36Z",
        "number":  77433,
        "author":  "tommcdon",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-05-17T20:38:11Z",
        "body":  "Currently we support X64 and X86 Windows hosted Debugging Services Binaries for debugging Linux core dumps.  This means that an x86/x64 Visual Studio or Windbg debugger (running on Windows) is needed to debug Linux x64/arm64/arm32 core dumps.  \r\n\r\nThe X\u0027s are what is currently supported:\r\n\r\n| Linux Dump Architecture | Windows x64 Debugger | Windows arm64 Debugger | Windows x86 Debugger \r\n|----|:----:|:----:|:----:|\r\n| x64 | X |   |  \r\n| arm64 | X |   |  \r\n| x86 |   |   |  \r\n| arm32 |   |   | X\r\n\r\nThis issue tracks adding Windows ARM64 hosted debugger support for Linux X64 and ARM64 dumps.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTPAXqg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5M8Beq",
                                           "createdAt":  "2022-10-25T16:03:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nCurrently we support X64 and X86 Windows hosted Debugging Services Binaries for debugging Linux core dumps.  This means that an x86/x64 Visual Studio or Windbg debugger (running on Windows) is needed to debug Linux x64/arm64/arm32 core dumps.  \r\n\r\nThe X\u0027s are what is currently supported:\r\n\r\n| | x64 | arm64 | x86\r\n|----|:----:|:----:|:----:|\r\n| x64 | X |   |  \r\n| arm64 | X |   |  \r\n| x86 |   |   |  \r\n| arm32 |   |   | X\r\n\r\nThis issue tracks adding Windows ARM64 hosted dumps for Linux X64 and ARM64.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003etommcdon\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`enhancement`, `area-Diagnostics-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-10-25T16:03:43Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Support ARM64 Windows Hosted Cross-Platform Debugging Services Binaries",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/77922",
        "createdAt":  "2022-11-04T20:43:12Z",
        "number":  77922,
        "author":  "cshung",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-11-07T14:47:37Z",
        "body":  "This [PR](https://github.com/dotnet/runtime/pull/77923) makes `LOGGING` defined in the DAC build, but it is incomplete because it makes logging opt-in. In particular, `LOG` is disabled and `DAC_LOG` is enabled instead.\r\n\r\nTo really leverage the existing logging in the runtime, we would like to eventually remove the `DAC_LOG` and use the same logging macro for the same set of logging statements.\r\n\r\nIf we do that, the code won\u0027t compile or work. The error falls into these two categories (or more that I am unaware of)\r\n\r\n- Compile errors due to type-casting.\r\n- Loading of strings.\r\n\r\nDue to the volume of the logging statements, this will probably take a while.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTbzTPQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5NvM9J",
                                           "createdAt":  "2022-11-04T20:43:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWIP\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ecshung\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Logging`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-11-04T20:43:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NvNM9",
                                           "createdAt":  "2022-11-04T20:43:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWIP\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ecshung\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-11-04T20:43:50Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Enable logging for the DAC build",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/78540",
        "createdAt":  "2022-11-18T05:40:25Z",
        "number":  78540,
        "author":  "jkotas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-05-17T20:41:51Z",
        "body":  "Enabling metadata updater used by hot-reload causes the runtime and libraries to take codepaths conditionalized by `MetadataUpdater.IsSupported` property. These codepaths receive less thorough testing and have higher risk of containing bugs. #78218 has been an example of such bug.\r\n\r\nMetadata updater is automatically enabled when managed debugger is attached and there is no way to suppress it: https://github.com/dotnet/runtime/blob/3dbc850af3e8bfd6d529ed90cf00247dc9a24512/src/coreclr/vm/assemblynative.cpp#L1365 . It means that a bug in hot-reload specific codepath can make the application impossible to debug. This situation was encountered in #78218.\r\n\r\nWe should add a config switch that unconditionally disables metadata updater and that can be used as a workaround for bugs in hot-reload specific codepaths.\r\n\r\nContext: https://github.com/dotnet/runtime/issues/78218#issuecomment-1319015728",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTrqPrA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5OpxwU",
                                           "createdAt":  "2022-11-18T05:40:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nEnabling metadata updater used by hot-reload causes the runtime and libraries to take codepaths conditionalized by `MetadataUpdater.IsSupported` property. These codepaths receive less thorough testing and have higher risk of containing bugs. #78218 has been an example of such bug.\r\n\r\nMetadata updater is automatically enabled when managed debugger is attached and there is no way to suppress it: https://github.com/dotnet/runtime/blob/3dbc850af3e8bfd6d529ed90cf00247dc9a24512/src/coreclr/vm/assemblynative.cpp#L1365 . It means that a bug in hot-reload specific codepath can make the application impossible to debug. This situation was encountered in #78218.\r\n\r\nWe should add a config switch that unconditionally disables metadata updater and that can be used as a workaround for bugs in hot-reload specific codepaths.\r\n\r\nContext: https://github.com/dotnet/runtime/issues/78218#issuecomment-1319015728\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejkotas\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-11-18T05:40:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Opxzq",
                                           "createdAt":  "2022-11-18T05:40:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "cc @jogibear9988 ",
                                           "updatedAt":  "2022-11-18T05:40:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ouo-s",
                                           "createdAt":  "2022-11-19T10:00:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "marek-safar",
                                           "body":  "/cc @lambdageek ",
                                           "updatedAt":  "2022-11-19T10:00:15Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Add config switch to fully disable hot-reload",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/79236",
        "createdAt":  "2022-12-05T17:23:45Z",
        "number":  79236,
        "author":  "tommcdon",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-12-06T16:42:29Z",
        "body":  "### Description\n\nCopied from https://developercommunity.visualstudio.com/t/Visual-Studio-crashes-when-the-app-being/10118998\r\n\r\nDebugger error when debugging an app that is collecting a dump on itself using `dbghelp.dll!MiniDumpWriteDump` with its own process ID.\n\n### Reproduction Steps\n\nDebugger error when debugging an app that is collecting a dump on itself.\r\n\r\n1. Enable ‘Enable native code debugging’ on the VS Debug page.\r\n2. Runtime:\r\nStart a thread\r\nCall `dbghelp.dll!MiniDumpWriteDump` via DllImport.\r\n3. F5 Debug\n\n### Expected behavior\n\nThe debugger does not fail or provides a better error message\n\n### Actual behavior\n\nThe Visual Studio debugger will now freeze and eventually the pop-up above will show up. Sometimes this results in the VS debugger crashing.\r\n\r\n![image](https://user-images.githubusercontent.com/12520929/205700586-f9c5fd43-21d4-47d2-af1c-d129cf0ebab8.png)\n\n### Regression?\n\nNo\n\n### Known Workarounds\n\nIt is not recommended for an app to call `dbghelp.dll!MiniDumpWriteDump` on itself\n\n### Configuration\n\nWindows all versions\n\n### Other information\n\nThe debugger pipeline will hang and then return the HRESULT `CORDBG_E_TIMEOUT` which leads to the debug session to be terminated.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOT9l59g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5PvN25",
                                           "createdAt":  "2022-12-05T17:23:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nCopied from https://developercommunity.visualstudio.com/t/Visual-Studio-crashes-when-the-app-being/10118998\r\n\r\nDebugger error when debugging an app that is collecting a dump on itself using `dbghelp.dll!MiniDumpWriteDump` with its own process ID.\n\n### Reproduction Steps\n\nDebugger error when debugging an app that is collecting a dump on itself.\r\n\r\n1. Enable ‘Enable native code debugging’ on the VS Debug page.\r\n2. Runtime:\r\nStart a thread\r\nCall `dbghelp.dll!MiniDumpWriteDump` via DllImport.\r\n3. F5 Debug\n\n### Expected behavior\n\nThe debugger does not fail or provides a better error message\n\n### Actual behavior\n\nThe Visual Studio debugger will now freeze and eventually the pop-up above will show up. Sometimes this results in the VS debugger crashing.\r\n\r\n![image](https://user-images.githubusercontent.com/12520929/205700586-f9c5fd43-21d4-47d2-af1c-d129cf0ebab8.png)\n\n### Regression?\n\nNo\n\n### Known Workarounds\n\nIt is not recommended for an app to call `dbghelp.dll!MiniDumpWriteDump` on itself\n\n### Configuration\n\nWindows all versions\n\n### Other information\n\nThe debugger pipeline will hang and then return the HRESULT `CORDBG_E_TIMEOUT` which leads to the debug session to be terminated.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003etommcdon\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-12-05T17:23:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PxJIs",
                                           "createdAt":  "2022-12-05T22:46:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "Is there anything actionable here? https://learn.microsoft.com/en-us/windows/win32/api/minidumpapiset/nf-minidumpapiset-minidumpwritedump#remarks explicitly states deadlocks are not uncommon in the case of in-proc API calls",
                                           "updatedAt":  "2022-12-05T22:46:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5P2Xn2",
                                           "createdAt":  "2022-12-06T16:40:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Changing this to a documentation issue.  \r\n\r\n1. We do not document that collecting a dump in process via dbghelp.dll!MiniDumpWriteDump while the debugger is attached is not supported\r\n2. We should consider documenting [calling the Microsoft.Diagnostics.NETCore.Client WriteDump API](https://learn.microsoft.com/en-us/dotnet/core/diagnostics/microsoft-diagnostics-netcore-client#writedump-method) is the _preferred_ method for triggering dumps programmatically.",
                                           "updatedAt":  "2022-12-06T16:42:29Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Visual Studio debugger error when debugging an app collecting a dump against itself",
        "labels":  [
                       "documentation",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/79546",
        "createdAt":  "2022-12-12T16:33:31Z",
        "number":  79546,
        "author":  "k15tfu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCw1CKQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "evgn",
                                            "createdAt":  "2022-12-13T18:22:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ForNeVeR",
                                            "createdAt":  "2022-12-13T20:12:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ww898",
                                            "createdAt":  "2022-12-14T07:25:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "stepangovorko",
                                            "createdAt":  "2022-12-16T07:56:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mayphi",
                                            "createdAt":  "2023-06-21T08:01:50Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2024-01-08T23:44:16Z",
        "body":  "Hi!\r\n\r\nIt turned out that sometimes .NET 7 managed app may behave differently while under profiling. For example, as far as I can see `File.Exists()` uses `GetFileAttributesExW()` as follows:\r\n```\r\ninternal static unsafe partial class Kernel32\r\n{\r\n    [System.CodeDom.Compiler.GeneratedCodeAttribute(\"Microsoft.Interop.LibraryImportGenerator\", \"7.0.7.1805\")]\r\n    private static partial bool GetFileAttributesExPrivate(string name, global::Interop.Kernel32.GET_FILEEX_INFO_LEVELS fileInfoLevel, ref global::Interop.Kernel32.WIN32_FILE_ATTRIBUTE_DATA lpFileInformation)\r\n    {\r\n        int __lastError;\r\n        bool __retVal;\r\n        int __retVal_native;\r\n        // Pin - Pin data in preparation for calling the P/Invoke.\r\n        fixed (void* __name_native = \u0026global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(name))\r\n        fixed (global::Interop.Kernel32.WIN32_FILE_ATTRIBUTE_DATA* __lpFileInformation_native = \u0026lpFileInformation)\r\n        {\r\n            System.Runtime.InteropServices.Marshal.SetLastSystemError(0);\r\n            __retVal_native = __PInvoke((ushort*)__name_native, fileInfoLevel, __lpFileInformation_native);\r\n            __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();  \u003c-- here\r\n        }\r\n\r\n        // Unmarshal - Convert native data to managed data.\r\n        __retVal = __retVal_native != 0;\r\n        System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);\r\n        return __retVal;\r\n        // Local P/Invoke\r\n        [System.Runtime.InteropServices.DllImportAttribute(\"kernel32.dll\", EntryPoint = \"GetFileAttributesExW\", ExactSpelling = true)]\r\n        static extern unsafe int __PInvoke(ushort* name, global::Interop.Kernel32.GET_FILEEX_INFO_LEVELS fileInfoLevel, global::Interop.Kernel32.WIN32_FILE_ATTRIBUTE_DATA* lpFileInformation);\r\n    }\r\n}\r\n```\r\n\r\nIn this case `File.Exists()` returns `true` for files that do not exist when profiler\u0027s ELT hooks are used, here is demo app:\r\n```\r\nusing System.Runtime.InteropServices;\r\n\r\nnamespace file_exists_csharp\r\n{\r\n    internal class Program\r\n    {\r\n\r\n        static void Main(string[] args)\r\n        {\r\n            if (File.Exists(\"file-that-should-not-exist.txt\"))\r\n                throw new Exception(\"File exists\");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nProfiler Enter callback resets the last error code when `Marshal.GetLastSystemError()` is being called:\r\n```\r\npublic static int GetLastSystemError()\r\n{\r\n    return Interop.Kernel32.GetLastError();\r\n}\r\n```\r\n\r\nThese callbacks are set by `SetJitHelperFunction()` and there are other JIT helper functions (e.g. `CORINFO_HELP_NEWARR_1_OBJ`) that probably won\u0027t be called before `Marshal.GetLastSystemError()` in the generated code, and also there are `BEGIN_PRESERVE_LAST_ERROR` / `END_PRESERVE_LAST_ERROR` macros that are used in internal JIT helpers etc.\r\n\r\nI have also looked into `Thread::InjectActivation()` which uses `PAL_InjectActivation()` and `inject_activation_handler()` on Linux/macOS, and it preserves `errno` before calling `HandleSuspensionForInterruptedThread()`, but it is not done for `CheckActivationSafePoint()` which uses `GetThreadNULLOk()` and e.g. on Linux ARM32 it internally calls  `__tls_get_addr()`, do we need to wrap it as well?\r\n\r\nSame also applies for profiler based IL instrumentation (code coverage).\r\n\r\nLinked issues: https://github.com/dotnet/runtime/issues/10727, https://github.com/dotnet/runtime/issues/75828, https://github.com/dotnet/runtime/issues/77364.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYuKa7A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5QRyqC",
                                           "createdAt":  "2022-12-12T16:33:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/interop-contrib\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nHi!\r\n\r\nIt turned out that sometimes .NET 7 managed app may behave differently while under profiling. For example, as far as I can see `File.Exists()` uses `GetFileAttributesExW()` as follows:\r\n```\r\ninternal static unsafe partial class Kernel32\r\n{\r\n    [System.CodeDom.Compiler.GeneratedCodeAttribute(\"Microsoft.Interop.LibraryImportGenerator\", \"7.0.7.1805\")]\r\n    private static partial bool GetFileAttributesExPrivate(string name, global::Interop.Kernel32.GET_FILEEX_INFO_LEVELS fileInfoLevel, ref global::Interop.Kernel32.WIN32_FILE_ATTRIBUTE_DATA lpFileInformation)\r\n    {\r\n        int __lastError;\r\n        bool __retVal;\r\n        int __retVal_native;\r\n        // Pin - Pin data in preparation for calling the P/Invoke.\r\n        fixed (void* __name_native = \u0026global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(name))\r\n        fixed (global::Interop.Kernel32.WIN32_FILE_ATTRIBUTE_DATA* __lpFileInformation_native = \u0026lpFileInformation)\r\n        {\r\n            System.Runtime.InteropServices.Marshal.SetLastSystemError(0);\r\n            __retVal_native = __PInvoke((ushort*)__name_native, fileInfoLevel, __lpFileInformation_native);\r\n            __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();  \u003c-- here\r\n        }\r\n\r\n        // Unmarshal - Convert native data to managed data.\r\n        __retVal = __retVal_native != 0;\r\n        System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);\r\n        return __retVal;\r\n        // Local P/Invoke\r\n        [System.Runtime.InteropServices.DllImportAttribute(\"kernel32.dll\", EntryPoint = \"GetFileAttributesExW\", ExactSpelling = true)]\r\n        static extern unsafe int __PInvoke(ushort* name, global::Interop.Kernel32.GET_FILEEX_INFO_LEVELS fileInfoLevel, global::Interop.Kernel32.WIN32_FILE_ATTRIBUTE_DATA* lpFileInformation);\r\n    }\r\n}\r\n```\r\n\r\nIn this case `File.Exists()` returns `true` for files that do not exist when profiler\u0027s ELT hooks are used, here is demo app:\r\n```\r\nusing System.Runtime.InteropServices;\r\n\r\nnamespace file_exists_csharp\r\n{\r\n    internal class Program\r\n    {\r\n\r\n        static void Main(string[] args)\r\n        {\r\n            if (File.Exists(\"file-that-should-not-exist.txt\"))\r\n                throw new Exception(\"File exists\");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nProfiler Enter callback resets the last error code when `Marshal.GetLastSystemError()` is being called:\r\n```\r\npublic static int GetLastSystemError()\r\n{\r\n    return Interop.Kernel32.GetLastError();\r\n}\r\n```\r\n\r\nThese callbacks are set by `SetJitHelperFunction()` and there are other JIT helper functions (e.g. `CORINFO_HELP_NEWARR_1_OBJ`) that probably won\u0027t be called before `Marshal.GetLastSystemError()` in the generated code, and also there are `BEGIN_PRESERVE_LAST_ERROR` / `END_PRESERVE_LAST_ERROR` macros that are used in internal JIT helpers etc.\r\n\r\nI have also looked into `Thread::InjectActivation()` which uses `PAL_InjectActivation()` and `inject_activation_handler()` on Linux/macOS, and it preserves `errno` before calling `HandleSuspensionForInterruptedThread()`, but it is not done for `CheckActivationSafePoint()` which uses `GetThreadNULLOk()` and e.g. on Linux ARM32 it internally calls  `__tls_get_addr()`, do we need to wrap it as well?\r\n\r\nLinked issues: https://github.com/dotnet/runtime/issues/10727, https://github.com/dotnet/runtime/issues/75828, https://github.com/dotnet/runtime/issues/77364.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ek15tfu\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Runtime.InteropServices`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-12-12T16:33:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QYMqB",
                                           "createdAt":  "2022-12-13T13:15:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ww898",
                                           "body":  "I would be great if the future fix will be backported to 7.0.x. Because huge impact for all profilers.",
                                           "updatedAt":  "2022-12-13T13:16:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VKCPT",
                                           "createdAt":  "2023-02-13T21:14:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "k15tfu",
                                           "body":  "Friendly ping.",
                                           "updatedAt":  "2023-02-13T21:14:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YcBX_",
                                           "createdAt":  "2023-03-25T06:26:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "k15tfu",
                                           "body":  "Friendly ping.",
                                           "updatedAt":  "2023-07-10T23:32:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5in9B2",
                                           "createdAt":  "2023-07-27T22:00:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "I believe it is up to profilers to ensure that they don\u0027t change any state that can be unintentionally observed by managed code.\r\n\r\nI\u0027ll send this to the profiler team to see what they think.",
                                           "updatedAt":  "2023-07-27T22:00:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5in9JG",
                                           "createdAt":  "2023-07-27T22:01:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nHi!\r\n\r\nIt turned out that sometimes .NET 7 managed app may behave differently while under profiling. For example, as far as I can see `File.Exists()` uses `GetFileAttributesExW()` as follows:\r\n```\r\ninternal static unsafe partial class Kernel32\r\n{\r\n    [System.CodeDom.Compiler.GeneratedCodeAttribute(\"Microsoft.Interop.LibraryImportGenerator\", \"7.0.7.1805\")]\r\n    private static partial bool GetFileAttributesExPrivate(string name, global::Interop.Kernel32.GET_FILEEX_INFO_LEVELS fileInfoLevel, ref global::Interop.Kernel32.WIN32_FILE_ATTRIBUTE_DATA lpFileInformation)\r\n    {\r\n        int __lastError;\r\n        bool __retVal;\r\n        int __retVal_native;\r\n        // Pin - Pin data in preparation for calling the P/Invoke.\r\n        fixed (void* __name_native = \u0026global::System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(name))\r\n        fixed (global::Interop.Kernel32.WIN32_FILE_ATTRIBUTE_DATA* __lpFileInformation_native = \u0026lpFileInformation)\r\n        {\r\n            System.Runtime.InteropServices.Marshal.SetLastSystemError(0);\r\n            __retVal_native = __PInvoke((ushort*)__name_native, fileInfoLevel, __lpFileInformation_native);\r\n            __lastError = System.Runtime.InteropServices.Marshal.GetLastSystemError();  \u003c-- here\r\n        }\r\n\r\n        // Unmarshal - Convert native data to managed data.\r\n        __retVal = __retVal_native != 0;\r\n        System.Runtime.InteropServices.Marshal.SetLastPInvokeError(__lastError);\r\n        return __retVal;\r\n        // Local P/Invoke\r\n        [System.Runtime.InteropServices.DllImportAttribute(\"kernel32.dll\", EntryPoint = \"GetFileAttributesExW\", ExactSpelling = true)]\r\n        static extern unsafe int __PInvoke(ushort* name, global::Interop.Kernel32.GET_FILEEX_INFO_LEVELS fileInfoLevel, global::Interop.Kernel32.WIN32_FILE_ATTRIBUTE_DATA* lpFileInformation);\r\n    }\r\n}\r\n```\r\n\r\nIn this case `File.Exists()` returns `true` for files that do not exist when profiler\u0027s ELT hooks are used, here is demo app:\r\n```\r\nusing System.Runtime.InteropServices;\r\n\r\nnamespace file_exists_csharp\r\n{\r\n    internal class Program\r\n    {\r\n\r\n        static void Main(string[] args)\r\n        {\r\n            if (File.Exists(\"file-that-should-not-exist.txt\"))\r\n                throw new Exception(\"File exists\");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nProfiler Enter callback resets the last error code when `Marshal.GetLastSystemError()` is being called:\r\n```\r\npublic static int GetLastSystemError()\r\n{\r\n    return Interop.Kernel32.GetLastError();\r\n}\r\n```\r\n\r\nThese callbacks are set by `SetJitHelperFunction()` and there are other JIT helper functions (e.g. `CORINFO_HELP_NEWARR_1_OBJ`) that probably won\u0027t be called before `Marshal.GetLastSystemError()` in the generated code, and also there are `BEGIN_PRESERVE_LAST_ERROR` / `END_PRESERVE_LAST_ERROR` macros that are used in internal JIT helpers etc.\r\n\r\nI have also looked into `Thread::InjectActivation()` which uses `PAL_InjectActivation()` and `inject_activation_handler()` on Linux/macOS, and it preserves `errno` before calling `HandleSuspensionForInterruptedThread()`, but it is not done for `CheckActivationSafePoint()` which uses `GetThreadNULLOk()` and e.g. on Linux ARM32 it internally calls  `__tls_get_addr()`, do we need to wrap it as well?\r\n\r\nSame also applies for profiler based IL instrumentation (code coverage).\r\n\r\nLinked issues: https://github.com/dotnet/runtime/issues/10727, https://github.com/dotnet/runtime/issues/75828, https://github.com/dotnet/runtime/issues/77364.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ek15tfu\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Runtime.InteropServices`, `area-Diagnostics-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-07-27T22:01:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5i4prs",
                                           "createdAt":  "2023-07-31T19:37:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "We are past platform shutdown for .NET 8 and are driving to zero bugs.  Since this looks like a pre-existing issue and seems to be a non-trivial amount of work, moving to .NET 9",
                                           "updatedAt":  "2023-07-31T19:37:46Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Last PInvoke error in LibraryImport may not be preserved after runtime internal calls",
        "labels":  [
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/79554",
        "createdAt":  "2022-12-12T19:14:22Z",
        "number":  79554,
        "author":  "mrward",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-01-06T21:45:20Z",
        "body":  "### Description\n\nDebugging a .NET 6 or .NET 7 macOS application with VS Mac or VS Code, and quitting the macOS application leaves the vsdbg-ui still running \n\n### Reproduction Steps\n\n1. Install macOS workload: `dotnet workload install macos`\r\n2. Create a macOS .NET project (.NET 7 or .NET 6): `dotnet new macos -o TestMacOSApp\r\n3. Restore/build and debug with VS Mac, or with VS Code\r\n   a. For VS Code configure the launch.json so VS Code runs the native executable: `\"program\": \"${workspaceFolder}/TestMacOSApp/bin/Debug/net7.0-macos/osx-x64/TestMacOSApp.app/Contents/MacOS/TestMacOSApp\",`\r\n  b. Note that RuntimeIdentifier can be set to `osx-arm64` in the .csproj on Apple M1 to use the arm64 vsdbg-ui. By default macOS projects target osx-x64.\r\n5. Click the macOS app so you see the its main window, then right click the dock icon and select Quit.\r\n\n\n### Expected behavior\n\nVS Mac\u0027s main toolbar icon changes from stop to run.\r\nVS Code stops debugging\r\n\r\n\n\n### Actual behavior\n\nVS Mac and VS Code remain debugging.\r\nvsdbg-ui is still running.\r\n\r\nNote that this is intermittent. Sometimes this works, sometimes it does not.\r\n\r\nvscode debug protocol messages:\r\n\r\nhttps://gist.github.com/mrward/2a574c076853f605146b189f3d39149a\n\n### Regression?\n\nNot a regression. Same behaviour in .NET 6 and .NET 7.\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET 7.0.100\r\n.NET 6.0.401\r\n\r\nmacOS 12.6.1 (x64 and arm64)\r\n\r\n\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOUegtag==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5QS6-t",
                                           "createdAt":  "2022-12-12T19:15:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-12-12T19:15:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QTFvQ",
                                           "createdAt":  "2022-12-12T19:34:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nDebugging a .NET 6 or .NET 7 macOS application with VS Mac or VS Code, and quitting the macOS application leaves the vsdbg-ui still running \n\n### Reproduction Steps\n\n1. Install macOS workload: `dotnet workload install macos`\r\n2. Create a macOS .NET project (.NET 7 or .NET 6): `dotnet new macos -o TestMacOSApp\r\n3. Restore/build and debug with VS Mac, or with VS Code\r\n   a. For VS Code configure the launch.json so VS Code runs the native executable: `\"program\": \"${workspaceFolder}/TestMacOSApp/bin/Debug/net7.0-macos/osx-x64/TestMacOSApp.app/Contents/MacOS/TestMacOSApp\",`\r\n  b. Note that RuntimeIdentifier can be set to `osx-arm64` in the .csproj on Apple M1 to use the arm64 vsdbg-ui. By default macOS projects target osx-x64.\r\n5. Click the macOS app so you see the its main window, then right click the dock icon and select Quit.\r\n\n\n### Expected behavior\n\nVS Mac\u0027s main toolbar icon changes from stop to run.\r\nVS Code stops debugging\r\n\r\n\n\n### Actual behavior\n\nVS Mac and VS Code remain debugging.\r\nvsdbg-ui is still running.\r\n\r\nNote that this is intermittent. Sometimes this works, sometimes it does not.\r\n\r\nvscode debug protocol messages:\r\n\r\nhttps://gist.github.com/mrward/2a574c076853f605146b189f3d39149a\n\n### Regression?\n\nNot a regression. Same behaviour in .NET 6 and .NET 7.\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET 7.0.100\r\n.NET 6.0.401\r\n\r\nmacOS 12.6.1 (x64 and arm64)\r\n\r\n\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emrward\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-12-12T19:34:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5R6C1q",
                                           "createdAt":  "2023-01-06T21:45:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikelle-rogers",
                                           "body":  "Moving to future as it probably won\u0027t fit dotnet 8 and it hasn\u0027t been a regression. We will reconsider if we get enough feedback on this being intrusive of people\u0027s workflows.",
                                           "updatedAt":  "2023-01-06T21:45:20Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "vsdbg-ui does not stop after exiting a .NET macOS application",
        "labels":  [
                       "os-mac-os-x",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/79919",
        "createdAt":  "2022-12-22T23:33:49Z",
        "number":  79919,
        "author":  "isadorasophia",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-07-25T21:03:20Z",
        "body":  "### Description\n\nWhen debugging a Xunit test and an exception is hit, the exception frame is eligible to be unwound. \r\n\r\nHowever, if we actually attempt to unwind it, CLR throws a CORDBG_E_NONINTERCEPTABLE_EXCEPTION at [CordbThread::InterceptCurrentException](https://github.com/dotnet/runtime/blob/2201016c1e13bdb9abf49e2e38cadf4ee0568df2/src/coreclr/debug/di/rsthread.cpp#L2132), provided by [ICorDebugThread2::InterceptCurrentException](https://learn.microsoft.com/en-us/dotnet/framework/unmanaged-api/debugging/icordebugthread2-interceptcurrentexception-method).\r\n\r\nThe exception can be unwound if first chance exception is set for the exception thrown.\n\n### Reproduction Steps\n\n1. Create a new Xunit test application with .NET 6 or .NET 7\r\n2. Disable first chance exception for InvalidOperationException in \"Exception Settings\" and enable \"Just my code\"\r\n3. Debug the following test with test explorer:\r\n```csharp\r\n[Fact]\r\npublic void Test1()\r\n{\r\n    throw new InvalidOperationException();\r\n}\r\n```\r\n4. Stop at exception and attempt to unwind:\r\n![image](https://user-images.githubusercontent.com/7958854/209239880-150e94b4-1a79-4360-8d28-ffb7a74f1c79.png)\n\n### Expected behavior\n\nSuccessfully unwind from exception.\n\n### Actual behavior\n\n![image](https://user-images.githubusercontent.com/7958854/209239995-190e1c95-6a1f-4451-9f2f-6815b1aad37b.png)\r\n\n\n### Regression?\n\nNot that I am aware of. It reproduced on: .NET 6 and .NET 7, Visual Studio 17.3 and 17.4.\n\n### Known Workarounds\n\nThe exception can be successfully unwound if first chance exception is enabled for InvalidOperationException (if \"Just my code\" is off, the exception won\u0027t hit if first chance exception is disabled).\r\n\r\nThe issue cannot be reproduced on a console app, since we are able to unwind from user-unhandled exceptions, such as:\r\n```csharp\r\n[DebuggerHidden]\r\nprivate static void Test()\r\n{\r\n    try\r\n    {\r\n        Test2();\r\n    }\r\n    catch\r\n    {\r\n        Console.WriteLine(\"passed here!\");\r\n    }\r\n}\r\n\r\n\r\nprivate static void Test2()\r\n{\r\n    throw new InvalidOperationException();\r\n}\r\n```\r\n\r\nThe issue seems to come from how Xunit dispatches the test asynchronously at [InvokeTestMethodAsync](https://github.com/xunit/xunit/blob/77a3667654612e3ef7ba870f4e534c8ac7bebd13/src/xunit.v3.core/Sdk/v3/Runners/TestInvoker.cs#L166), where the exception is caught by non-user code.\n\n### Configuration\n\n.NET 6 on x64\n\n### Other information\n\nCreated from ticket: https://developercommunity.visualstudio.com/t/Cannot-move-breakpoint-while-debugging/10204029.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOUUSDRQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5RRG7h",
                                           "createdAt":  "2022-12-22T23:36:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCxt7ug==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2022-12-22T23:48:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "isadorasophia",
                                           "body":  "@tommcdon hi tom! could you help routing this issue? I\u0027m open to any suggestions if this ends up being in the debugger side.",
                                           "updatedAt":  "2022-12-22T23:36:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RRINF",
                                           "createdAt":  "2022-12-22T23:49:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nWhen debugging a Xunit test and an exception is hit, the exception frame is eligible to be unwound. \r\n\r\nHowever, if we actually attempt to unwind it, CLR throws a CORDBG_E_NONINTERCEPTABLE_EXCEPTION at [CordbThread::InterceptCurrentException](https://github.com/dotnet/runtime/blob/2201016c1e13bdb9abf49e2e38cadf4ee0568df2/src/coreclr/debug/di/rsthread.cpp#L2132), provided by [ICorDebugThread2::InterceptCurrentException](https://learn.microsoft.com/en-us/dotnet/framework/unmanaged-api/debugging/icordebugthread2-interceptcurrentexception-method).\r\n\r\nThe exception can be unwound if first chance exception is set for the exception thrown.\n\n### Reproduction Steps\n\n1. Create a new Xunit test application with .NET 6 or .NET 7\r\n2. Disable first chance exception for InvalidOperationException in \"Exception Settings\" and enable \"Just my code\"\r\n3. Debug the following test with test explorer:\r\n```csharp\r\n[Fact]\r\npublic void Test1()\r\n{\r\n    throw new InvalidOperationException();\r\n}\r\n```\r\n4. Stop at exception and attempt to unwind:\r\n![image](https://user-images.githubusercontent.com/7958854/209239880-150e94b4-1a79-4360-8d28-ffb7a74f1c79.png)\n\n### Expected behavior\n\nSuccessfully unwind from exception.\n\n### Actual behavior\n\n![image](https://user-images.githubusercontent.com/7958854/209239995-190e1c95-6a1f-4451-9f2f-6815b1aad37b.png)\r\n\n\n### Regression?\n\nNot that I am aware of. It reproduced on: .NET 6 and .NET 7, Visual Studio 17.3 and 17.4.\n\n### Known Workarounds\n\nThe exception can be successfully unwound if first chance exception is enabled for InvalidOperationException (if \"Just my code\" is off, the exception won\u0027t hit if first chance exception is disabled).\r\n\r\nThe issue cannot be reproduced on a console app, since we are able to unwind from user-unhandled exceptions, such as:\r\n```csharp\r\n[DebuggerHidden]\r\nprivate static void Test()\r\n{\r\n    try\r\n    {\r\n        Test2();\r\n    }\r\n    catch\r\n    {\r\n        Console.WriteLine(\"passed here!\");\r\n    }\r\n}\r\n\r\n\r\nprivate static void Test2()\r\n{\r\n    throw new InvalidOperationException();\r\n}\r\n```\r\n\r\nThe issue seems to come from how Xunit dispatches the test asynchronously at [InvokeTestMethodAsync](https://github.com/xunit/xunit/blob/77a3667654612e3ef7ba870f4e534c8ac7bebd13/src/xunit.v3.core/Sdk/v3/Runners/TestInvoker.cs#L166), where the exception is caught by non-user code.\n\n### Configuration\n\n.NET 6 on x64\n\n### Other information\n\nCreated from ticket: https://developercommunity.visualstudio.com/t/Cannot-move-breakpoint-while-debugging/10204029.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eisadorasophia\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `area-ExceptionHandling-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-12-22T23:49:46Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Unable to unwind exception on Xunit",
        "labels":  [
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/80191",
        "createdAt":  "2023-01-04T19:36:52Z",
        "number":  80191,
        "author":  "jialongcheng",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-02-28T22:26:21Z",
        "body":  "### Description\n\nThe issue was reported by [#77671](https://github.com/dotnet/runtime/issues/77671). It was resolved by updating the document for DOTNET_EnableCrashReport, but the environment variable still doesn\u0027t work for Windows platform.\n\n### Reproduction Steps\n\nDOTNET_EnableCrashReport only works for non-windows platforms.\n\n### Expected behavior\n\nDOTNET_EnableCrashReport should work for all platforms.\n\n### Actual behavior\n\nDOTNET_EnableCrashReport does not work for Windows.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOUgQgSQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5RvPll",
                                           "createdAt":  "2023-01-04T19:36:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2023-01-04T19:36:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Rx_fT",
                                           "createdAt":  "2023-01-05T10:49:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nThe issue was reported by [#77671](https://github.com/dotnet/runtime/issues/77671). It was resolved by updating the document for DOTNET_EnableCrashReport, but the environment variable still doesn\u0027t work for Windows platform.\n\n### Reproduction Steps\n\nDOTNET_EnableCrashReport only works for non-windows platforms.\n\n### Expected behavior\n\nDOTNET_EnableCrashReport should work for all platforms.\n\n### Actual behavior\n\nDOTNET_EnableCrashReport does not work for Windows.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejialongcheng\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`enhancement`, `os-windows`, `area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-01-05T10:49:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5SAjmn",
                                           "createdAt":  "2023-01-09T16:10:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@mikem8361 ",
                                           "updatedAt":  "2023-01-09T16:10:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5SBCBJ",
                                           "createdAt":  "2023-01-09T17:36:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikem8361",
                                           "body":  "This would be a lot of work to implement on Windows.  This option was meant for MacOS and Linux but there are problems symbolizing the stack frames on Linux.",
                                           "updatedAt":  "2023-01-09T17:36:16Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "\"DOTNET_EnableCrashReport\"  does not work for Windows platform",
        "labels":  [
                       "enhancement",
                       "os-windows",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/80367",
        "createdAt":  "2023-01-09T13:07:04Z",
        "number":  80367,
        "author":  "Allam76",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-01-09T23:24:53Z",
        "body":  "### Description\n\nI have an odd error when generating cil code manually and using the line attribute to describe external source code.\r\n\r\nWhen executing and adding breakpoints all work fine but when setting a breakpoint in a conditional branch and then use step into, the debugger does not skip other conditional branches.\r\n\r\nThis only happens when compiled from manual cil.\r\n\r\nNote that i\u0027m on ubuntu linux 22.04 and dotnet 7.0\n\n### Reproduction Steps\n\nConsider following pseudo code:\r\n```\r\n// ztest.abap - this is the source file name\r\ndata test type i value 10.\r\nif test = 10.\r\n  write \u0027this is true\u0027.\r\nelse.\r\n  write \u0027this is false\u0027.\r\nendif.\r\n```\r\n\r\nCIL for the above with line attributes:\r\n```\r\n.assembly extern System.Runtime {}\r\n.assembly extern System.Console {}\r\n.assembly  ztest1 {}\r\n.class public auto ansi beforefieldinit ztest1 extends [System.Runtime]System.Object {\r\n .method public hidebysig static void Main (string[] args) cil managed {\r\n  .entrypoint\r\n  .locals init (\r\n   [0] int32 test\r\n  )\r\n  l_00000: ldc.i4.s 10\r\n  l_00001: stloc test\r\n  l_00012: ldloc test \r\n  l_00013: ldc.i4.s 10  \r\n  l_00017: bne.un l_00021\r\n  .line 3,3: 1,21 \u0027/home/\u003cuser\u003e/sources/ztest.abap\u0027\r\n  l_00018: ldstr \"is true\" \r\n  l_00019: call void [System.Console]System.Console::WriteLine(string) \r\n  l_00020: br l_00024\r\n  l_00021: nop \r\n  .line 5,5: 1,22 \u0027/home/\u003cuser\u003e/sources/ztest.abap\u0027\r\n  l_00022: ldstr \"is false\" \r\n  l_00023: call void [System.Console]System.Console::WriteLine(string) \r\n  l_00024: nop \r\n```\r\nCompile with lasm and start debug on vscode.\r\n \n\n### Expected behavior\n\nwhen setting a breakpoint in the true branch and step into \u003cF11\u003e the debugger should skip the false branch.\n\n### Actual behavior\n\nwhen setting a breakpoint in the true branch and step into \u003cF11\u003e the debugger enters the false branch.\r\n\r\nHowever, the code executes fine and no output from the print call in the false branch.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\nI\u0027m uncertain if this is a problem in the debugger or generation of portable pdb file on linux. Since I see the line attribute changes are not documented well for the portable pdb, I suspect the problem is here. Since I\u0027m on linux, I have issues properly inspect the generated pdb.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOUgZqsw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5R_fcU",
                                           "createdAt":  "2023-01-09T13:07:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nI have an odd error when generating cil code manually and using the line attribute to describe external source code.\r\n\r\nWhen executing and adding breakpoints all work fine but when setting a breakpoint in a conditional branch and then use step into, the debugger does not skip other conditional branches.\r\n\r\nThis only happens when compiled from manual cil.\r\n\r\nNote that i\u0027m on ubuntu linux 22.04 and dotnet 7.0\n\n### Reproduction Steps\n\nConsider following pseudo code:\r\n```\r\n// ztest.abap - this is the source file name\r\ndata test type i value 10.\r\nif test = 10.\r\n  write \u0027this is true\u0027.\r\nelse.\r\n  write \u0027this is false\u0027.\r\nendif.\r\n```\r\n\r\nCIL for the above with line attributes:\r\n```\r\n.assembly extern System.Runtime {}\r\n.assembly extern System.Console {}\r\n.assembly  ztest1 {}\r\n.class public auto ansi beforefieldinit ztest1 extends [System.Runtime]System.Object {\r\n .method public hidebysig static void Main (string[] args) cil managed {\r\n  .entrypoint\r\n  .locals init (\r\n   [0] int32 test\r\n  )\r\n  l_00000: ldc.i4.s 10\r\n  l_00001: stloc test\r\n  l_00012: ldloc test \r\n  l_00013: ldc.i4.s 10  \r\n  l_00017: bne.un l_00021\r\n  .line 3,3: 1,21 \u0027/home/\u003cuser\u003e/sources/ztest.abap\u0027\r\n  l_00018: ldstr \"is true\" \r\n  l_00019: call void [System.Console]System.Console::WriteLine(string) \r\n  l_00020: br l_00024\r\n  l_00021: nop \r\n  .line 5,5: 1,22 \u0027/home/\u003cuser\u003e/sources/ztest.abap\u0027\r\n  l_00022: ldstr \"is false\" \r\n  l_00023: call void [System.Console]System.Console::WriteLine(string) \r\n  l_00024: nop \r\n```\r\nCompile with lasm and start debug on vscode.\r\n \n\n### Expected behavior\n\nwhen setting a breakpoint in the true branch and step into \u003cF11\u003e the debugger should skip the false branch.\n\n### Actual behavior\n\nwhen setting a breakpoint in the true branch and step into \u003cF11\u003e the debugger enters the false branch.\r\n\r\nHowever, the code executes fine and no output from the print call in the false branch.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\nI\u0027m uncertain if this is a problem in the debugger or generation of portable pdb file on linux. Since I see the line attribute changes are not documented well for the portable pdb, I suspect the problem is here. Since I\u0027m on linux, I have issues properly inspect the generated pdb.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eAllam76\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-01-09T13:07:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5SAiv-",
                                           "createdAt":  "2023-01-09T16:08:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@hoyosjs ",
                                           "updatedAt":  "2023-01-09T16:08:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5SBmqz",
                                           "createdAt":  "2023-01-09T19:13:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCyX1cQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2023-01-09T20:02:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Allam76",
                                                                               "createdAt":  "2023-01-10T10:19:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "So there\u0027s an interesting quirk with the `.line` directive in ilasm. All instructions after the `.line` directive are considered to be on the same line/column until the next `.line` directive. As a result, instruction `l_00024` will share the same sequence point as `l_00022`. That might explain the behavior here.",
                                           "updatedAt":  "2023-01-09T19:13:35Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "debugger step into conditional branch when portable pdb generated from cil manually and using line attribute",
        "labels":  [
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/81165",
        "createdAt":  "2023-01-25T14:04:05Z",
        "number":  81165,
        "author":  "romkatv",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-02-01T00:10:50Z",
        "body":  "### Description\r\n\r\nWhen using Visual Studio 2022 on Windows to profile *CPU Usage* of a dotnet application, the application can run over 100 times slower and produce a CPU profile that is heavily dominated by instrumentation code.\r\n\r\n### Reproduction Steps\r\n\r\n1. Create `CpuProfilerTest.csproj` with the following content:\r\n   ```xml\r\n   \u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n     \u003cPropertyGroup\u003e\r\n       \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n       \u003cTargetFramework\u003enet7.0\u003c/TargetFramework\u003e\r\n     \u003c/PropertyGroup\u003e\r\n   \u003c/Project\u003e\r\n   ```\r\n2. Create `CpuProfilerTest.cs` with the following content:\r\n   ```csharp\r\n   using System;\r\n   using System.Diagnostics;\r\n   using System.Threading;\r\n   using System.Threading.Tasks;\r\n  \r\n   while (true) {\r\n     const int N = 100000;\r\n     Stopwatch watch = Stopwatch.StartNew();\r\n     for (int i = 0; i != N; ++i) {\r\n       Task t = new(delegate { });\r\n       t.RunSynchronously();\r\n       t.Wait();\r\n     }\r\n     Console.WriteLine(\"took {0:N2}ms\", watch.Elapsed.TotalMilliseconds);\r\n     Thread.Sleep(TimeSpan.FromSeconds(1));\r\n   }\r\n   ```\r\n3. Open `CpuProfilerTest.csproj` in Microsoft Visual Studio Community 2022 (64-bit) 17.4.4 on Windows 10.\r\n4. Switch to *Release* in the *Solution Configurations* dropdown at the top.\r\n   ![image](https://user-images.githubusercontent.com/1282067/214574717-9e0eb67f-4f5d-488b-b41b-178b041cbd48.png)\r\n5. Press \u003ckbd\u003eCtrl+F5\u003c/kbd\u003e or click *Debug → Start Without Debugging*.\r\n6. Wait for a few seconds. Observe console output similar to the following:\r\n   ```text\r\n   took 15.52ms\r\n   took 9.17ms\r\n   took 7.96ms\r\n   took 8.26ms\r\n   took 8.06ms\r\n   took 8.34ms\r\n   ```\r\n7. Press \u003ckbd\u003eCtrl+C\u003c/kbd\u003e to terminate the console application.\r\n8. Press \u003ckbd\u003eAlt+F2\u003c/kbd\u003e or click *Debug → Performance Profiler...*.\r\n9. Check *CPU Usage* and make sure that everything else is unchecked.\r\n   ![image](https://user-images.githubusercontent.com/1282067/214576333-4318afd7-8b5b-4321-9acc-7e6c5606eb0d.png)\r\n10. Click on the gear icon next to *CPU Usage* to open its settings and make sure that *Collect call counters (.NET Only)* is unset and *Select CPU sample rate* is set to *Default (1000 samples / second)*.\r\n    ![image](https://user-images.githubusercontent.com/1282067/214577257-166a098a-0a64-485a-8307-7522a82b1d22.png)\r\n11. Click *Start*.\r\n    ![image](https://user-images.githubusercontent.com/1282067/214577575-f2a4f444-f1be-4fb8-ad8b-de4081b91e5e.png)\r\n12. Wait for a few seconds. Observe console output similar to the following:\r\n    ```text\r\n    took 1,105.79ms\r\n    took 1,064.50ms\r\n    took 1,061.24ms\r\n    took 1,067.87ms\r\n    took 1,069.18ms\r\n    took 1,063.62ms\r\n    ```\r\n    **Note that it now takes over 100 times longer for the application to do the same amount of work.**\r\n13. Press \u003ckbd\u003eCtrl+C\u003c/kbd\u003e to terminate the console application.\r\n14. Wait for Visual Studio to process the profile and observe something similar to this:\r\n    ![image](https://user-images.githubusercontent.com/1282067/214578591-a2d1ccd8-7fd8-4b84-a0f6-3bbc98b9730a.png)\r\n    **Note that 93% of CPU time is spent in `System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityIdCore`.**\r\n\r\n\r\n### Expected behavior\r\n\r\nGiven that without a CPU profiler it takes the application around 8ms to do the work, I expect that with the CPU profiler it won\u0027t take more than 10ms.\r\n\r\nI also expect that the CPU profile presented by Visual Studio closely resembles the actual CPU profile of the application when it runs without being profiled.\r\n\r\n### Actual behavior\r\n\r\nThe actual behavior is described in *Reproduction Steps*.\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\nI\u0027d love to know a workaround if there is one.\r\n\r\nMy goal is to get a CPU profile of my application. The application reads many small messages from WebSocket, which implies a lot of `Task` objects. If I use the CPU profiler from Visual Studio, the application slows down to such a great extent that the profile is no longer relevant.\r\n\r\nI\u0027ve tried ticking *Instrumentation* instead of *CPU Usage*.\r\n\r\n![image](https://user-images.githubusercontent.com/1282067/214581310-11481a40-8fd6-42a8-83f5-ce33485d348c.png)\r\n\r\nThis incurs about 4x slowdown (much better than 100x but still fairly high). More importantly, it measures wall time instead of CPU time, so the profile is dominated by various sleep and wait functions.\r\n\r\nI\u0027ve tried disabling ETW tracing by setting `COMPlus_ETWEnabled=0` environment variable. This made no difference. I\u0027ve also tried using the following `App.config`:\r\n\r\n```xml\r\n\u003c?xml version=\"1.0\"?\u003e\r\n\u003cconfiguration\u003e\r\n  \u003cruntime\u003e\r\n    \u003cetwEnable enabled=\"false\" /\u003e\r\n  \u003c/runtime\u003e\r\n\u003c/configuration\u003e\r\n```\r\n\r\nThis also made no difference.\r\n\r\nI\u0027m open to using a different tool (instead of Visual Studio) to generate/analyze a CPU profile. Any suggestions would be helpful.\r\n\r\n### Configuration\r\n\r\n- Microsoft Visual Studio Community 2022 (64-bit) - Version 17.4.4\r\n- Microsoft Windows 10 Pro, Version 10.0.19045\r\n- TargetFramework net7.0.\r\n\r\n\r\n### Other information\r\n\r\nI\u0027m not sure if I\u0027m filing this issue against the correct component. My apologies if this is a wrong channel.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOVB3xcQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Tql1M",
                                           "createdAt":  "2023-01-25T14:04:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nWhen using Visual Studio 2022 on Windows to profile *CPU Usage* of a dotnet application, the application can run over 100 times slower and produce a CPU profile that is heavily dominated by instrumentation code.\n\n### Reproduction Steps\n\n1. Create `CpuProfilerTest.csproj` with the following content:\r\n   ```xml\r\n   \u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n     \u003cPropertyGroup\u003e\r\n       \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n       \u003cTargetFramework\u003enet7.0\u003c/TargetFramework\u003e\r\n     \u003c/PropertyGroup\u003e\r\n   \u003c/Project\u003e\r\n   ```\r\n2. Create `CpuProfilerTest.cs` with the following content:\r\n   ```csharp\r\n   using System;\r\n   using System.Diagnostics;\r\n   using System.Threading;\r\n   using System.Threading.Tasks;\r\n  \r\n   while (true) {\r\n     const int N = 100000;\r\n     Stopwatch watch = Stopwatch.StartNew();\r\n     for (int i = 0; i != N; ++i) {\r\n       Task t = new(delegate { });\r\n       t.RunSynchronously();\r\n       t.Wait();\r\n     }\r\n     Console.WriteLine(\"took {0:N2}ms\", watch.Elapsed.TotalMilliseconds);\r\n     Thread.Sleep(TimeSpan.FromSeconds(1));\r\n   }\r\n   ```\r\n3. Open `CpuProfilerTest.csproj` in Microsoft Visual Studio Community 2022 (64-bit) 17.4.4 on Windows 10.\r\n4. Switch to *Release* in the *Solution Configurations* dropdown at the top.\r\n   ![image](https://user-images.githubusercontent.com/1282067/214574717-9e0eb67f-4f5d-488b-b41b-178b041cbd48.png)\r\n5. Press \u003ckbd\u003eCtrl+F5\u003c/kbd\u003e or click *Debug → Start Without Debugging*.\r\n6. Wait for a few seconds. Observe console output similar to the following:\r\n   ```text\r\n   took 15.52ms\r\n   took 9.17ms\r\n   took 7.96ms\r\n   took 8.26ms\r\n   took 8.06ms\r\n   took 8.34ms\r\n   ```\r\n7. Press \u003ckbd\u003eCtrl+C\u003c/kbd\u003e to terminate the console application.\r\n8. Press \u003ckbd\u003eAlt+F2\u003c/kbd\u003e or click *Debug → Performance Profiler...*.\r\n9. Check *CPU Usage* and make sure that everything else is unchecked.\r\n   ![image](https://user-images.githubusercontent.com/1282067/214576333-4318afd7-8b5b-4321-9acc-7e6c5606eb0d.png)\r\n10. Click on the gear icon next to *CPU Usage* to open its settings and make sure that *Collect call counters (.NET Only)* is unset and *Select CPU sample rate* is set to *Default (1000 samples / second)*.\r\n    ![image](https://user-images.githubusercontent.com/1282067/214577257-166a098a-0a64-485a-8307-7522a82b1d22.png)\r\n11. Click *Start*.\r\n    ![image](https://user-images.githubusercontent.com/1282067/214577575-f2a4f444-f1be-4fb8-ad8b-de4081b91e5e.png)\r\n12. Wait for a few seconds. Observe console output similar to the following:\r\n    ```text\r\n    took 1,105.79ms\r\n    took 1,064.50ms\r\n    took 1,061.24ms\r\n    took 1,067.87ms\r\n    took 1,069.18ms\r\n    took 1,063.62ms\r\n    ```\r\n    **Note that it now takes over 100 times longer for the application to do the same amount of work.**\r\n13. Press \u003ckbd\u003eCtrl+C\u003c/kbd\u003e to terminate the console application.\r\n14. Wait for Visual Studio to process the profile and observe something similar to this:\r\n    ![image](https://user-images.githubusercontent.com/1282067/214578591-a2d1ccd8-7fd8-4b84-a0f6-3bbc98b9730a.png)\r\n    **Note that 93% of CPU time is spent in `System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityIdCore`.**\r\n\n\n### Expected behavior\n\nGiven that without a CPU profiler it takes the application around 8ms to do the work, I expect that with the CPU profiler it won\u0027t take more than 10ms.\r\n\r\nI also expect that the CPU profile presented by Visual Studio closely resembles the actual CPU profile of the application when it runs without being profiled.\n\n### Actual behavior\n\nThe actual behavior is described in *Reproduction Steps*.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nI\u0027d love to know a workaround if there is one.\r\n\r\nMy goal is to get a CPU profile of my application. The application reads many small messages from WebSocket, which implies a lot of `Task` objects. If I use the CPU profiler from Visual Studio, the application slows down to such a great extent that the profile is no longer relevant.\r\n\r\nI\u0027ve tried ticking *Instrumentation* instead of *CPU Usage*.\r\n\r\n![image](https://user-images.githubusercontent.com/1282067/214581310-11481a40-8fd6-42a8-83f5-ce33485d348c.png)\r\n\r\nThis incurs about 4x slowdown (much better than 100x but still fairly high). More importantly, it measures wall time instead of CPU time, so the profile is dominated by various sleep and wait functions.\r\n\r\nI\u0027ve tried disabling EWT tracing by setting `COMPlus_ETWEnabled=0` environment variable. This made no difference. I\u0027ve also tried using the following `App.config`:\r\n\r\n```xml\r\n\u003c?xml version=\"1.0\"?\u003e\r\n\u003cconfiguration\u003e\r\n  \u003cruntime\u003e\r\n    \u003cetwEnable enabled=\"false\" /\u003e\r\n  \u003c/runtime\u003e\r\n\u003c/configuration\u003e\r\n```\r\n\r\nThis also made no difference.\r\n\r\nI\u0027m open to using a different tool (instead of Visual Studio) to generate/analyze a CPU profile. Any suggestions would be helpful.\n\n### Configuration\n\n- Microsoft Visual Studio Community 2022 (64-bit) - Version 17.4.4\r\n- Microsoft Windows 10 Pro, Version 10.0.19045\r\n- TargetFramework net7.0.\r\n\n\n### Other information\n\nI\u0027m not sure if I\u0027m filing this issue against the correct component. My apologies if this is a wrong channel.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eromkatv\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-01-25T14:04:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5TqyjC",
                                           "createdAt":  "2023-01-25T14:40:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "cc: @karpinsn, @brianrob ",
                                           "updatedAt":  "2023-01-25T14:40:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5TrCwd",
                                           "createdAt":  "2023-01-25T15:24:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "romkatv",
                                           "body":  "I came up with a workaround. I added the following statement at the very beginning of my application:\r\n\r\n```csharp\r\ntypeof(System.Diagnostics.Tracing.EventSource)\r\n    .GetField(\"m_eventSourceEnabled\", BindingFlags.Instance | BindingFlags.NonPublic)\r\n    .SetValue(Type.GetType(\"System.Threading.Tasks.TplEventSource\")\r\n                  .GetField(\"Log\", BindingFlags.Static | BindingFlags.Public)\r\n                  .GetValue(null),\r\n              false);\r\n```\r\n\r\nThis sets `System.Threading.Tasks.TplEventSource.Log.m_eventSourceEnabled` to `false`. Normally this field is already `false` but when the application is started by the CPU profiler it is set to `true`. By reverting it back to `false` we disable the costly and unwanted ETW event tracing and get a representative CPU profile without slowing down the application.\r\n\r\nThis won\u0027t help when *attaching* a CPU profiler to a running process. This can be worked around by starting a thread within the application to periodically set `TplEventSource.Log.m_eventSourceEnabled` to `false`.",
                                           "updatedAt":  "2023-01-25T15:24:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5TrGq1",
                                           "createdAt":  "2023-01-25T15:35:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@davmason ",
                                           "updatedAt":  "2023-01-25T15:35:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5T6eSq",
                                           "createdAt":  "2023-01-30T01:04:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "brianrob",
                                           "body":  "@romkatv, your workaround tells us exactly what this is.  The verbosity of the TPL events is super high in apps that use lots of async/await or Tasks.  @karpinsn, do you expect the TPL events to be on?",
                                           "updatedAt":  "2023-01-30T01:04:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5T9U4G",
                                           "createdAt":  "2023-01-30T12:57:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karpinsn",
                                           "body":  "@brianrob I thought we disabled TPL for all scenarios but it looks like we still have them enabled in the CPU Usage tool in the Profiler scenario, they are just disabled during the debugging scenario. I\u0027ll follow up with Evan, I think we should turn them off in the profiler as well (I thought we had).\r\n\r\n@romkatv we have a registry key that you can set to disable these events. Running the following from a command line will disable the TPL events in the profiler and should workaround your issue without the need for the code change:\r\n`reg add HKEY_LOCAL_MACHINE\\Software\\Microsoft\\VisualStudio\\DiagnosticsHub /v CpuTool.DisableTplEventCollection /t REG_DWORD /d 1 /reg:32`",
                                           "updatedAt":  "2023-01-30T12:57:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5T9W6Z",
                                           "createdAt":  "2023-01-30T13:01:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "romkatv",
                                           "body":  "\u003e @brianrob I thought we disabled TPL for all scenarios but it looks like we still have them enabled in the CPU Usage tool in the Profiler scenario, they are just disabled during the debugging scenario.\r\n\r\nTPL logging is enabled when debugging (F5). My workaround incidentally solved the long-standing performance issue I had with debugging my project.\r\n\r\n\u003e @romkatv we have a registry key that you can set to disable these events. Running the following from a command line will disable the TPL events in the profiler and should workaround your issue without the need for the code change: `reg add HKEY_LOCAL_MACHINE\\Software\\Microsoft\\VisualStudio\\DiagnosticsHub /v CpuTool.DisableTplEventCollection /t REG_DWORD /d 1 /reg:32`\r\n\r\nThanks!\r\n\r\nIs there documentation for this switch somewhere? If not, a reference to the code would suffice.",
                                           "updatedAt":  "2023-01-30T13:01:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5T9qe8",
                                           "createdAt":  "2023-01-30T13:58:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC1S7EA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "romkatv",
                                                                               "createdAt":  "2023-02-02T08:44:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "karpinsn",
                                           "body":  "\u003e TPL logging is enabled when debugging (F5). My workaround incidentally solved the long-standing performance issue I had with debugging my project.\r\n\r\nTurns out the debugger is getting the TPL events to stitch async tasks together for the Parallel Stacks view. I\u0027ll follow up with them and see if there is anything we can do.\r\n\r\n\u003eIs there documentation for this switch somewhere? If not, a reference to the code would suffice.\r\n\r\nNope, this is really just an internal switch that we use for our own testing and lives inside the Visual Studio code base. I\u0027m going to see if we can just expose this as a setting in the CPU Usage settings (gear icon) so users can optionally enable/disable it.",
                                           "updatedAt":  "2023-01-30T13:58:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UHfFx",
                                           "createdAt":  "2023-02-01T00:10:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC1S69g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "romkatv",
                                                                               "createdAt":  "2023-02-02T08:44:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "Marking as future since this is not tracked by work in the runtime, but rather VS work.",
                                           "updatedAt":  "2023-02-01T00:10:50Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Enabling a CPU profiler on Windows automatically enables ETW tracing and slows the app down by over 100x",
        "labels":  [
                       "tracking-external-issue",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/82283",
        "createdAt":  "2023-02-17T05:24:44Z",
        "number":  82283,
        "author":  "nike4613",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-02-19T00:54:24Z",
        "body":  "### Description\n\nWhile using VS\u0027s remote debugger to debug [MonoMod](https://github.com/MonoMod/MonoMod/tree/reorganize/) on .NET 6 on MacOS x64, I ran into a deadlock while trying to step into a native function which I had hooked back to managed code (using `Marshal.GetFunctionPointerForDelegate` to create the target of the detour). I have not been able to reproduce this, however I did poke around in LLDB, so have some information.\r\n\r\nMonoMod installs a JIT hook in order to track method recompilations, and this has worked very well for us so far. This is the first time we have seen this, despite having used this JIT hook, mostly unchanged, for at least a year.\r\n\r\nThe application which I saw this happen on was `MonoMod.FrameworkTests`, which locked when trying to step into the call to `msvcrand()` on [line 67](https://github.com/MonoMod/MonoMod/blob/0ab2d0f9b90c08034019b7fa959252c50c467bf0/src/MonoMod.FrameworkTests/Program.cs#L67). \r\n\r\nAnswers to some things Tanner asked when I asked in the C# discord:\r\n- `SuppressGCTransition` isn\u0027t used anywhere in this project\r\n- All of the native to managed thunks are created with `Marshal.GetFunctionPointerForDelegate` or its inverse\r\n- The application is entirely single-threaded, and does not call out into any native code which would invoke managed code on a thread the runtime doesn\u0027t know about.\n\n### Reproduction Steps\n\n1. Start `MonoMod.FrameworkTests` on MacOS .NET 6\r\n2. Attach VS remote debugger when prompted\r\n3. Set a breakpoint on line 67 of `Program.cs`\r\n4. Resume the application by pressing enter\r\n5. Attempt to step in to `msvcrand()`\r\n6. Program hangs, or rather, did once.\n\n### Expected behavior\n\nNo deadlock.\n\n### Actual behavior\n\nA deadlock occurs. \r\n\r\nAt the time of the deadlock,. there are 11 threads, though only 3 of them are managed threads known by the runtime. \r\n```\r\n(lldb) thread list\r\nProcess 24949 stopped\r\n* thread #1: tid = 0xa03c3, 0x00007ff80366f3ea libsystem_kernel.dylib`__psynch_cvwait + 10, queue = \u0027com.apple.main-thread\u0027, stop reason = signal SIGSTOP\r\n  thread #2: tid = 0xa03cb, 0x00007ff80366c97a libsystem_kernel.dylib`mach_msg_trap + 10\r\n  thread #3: tid = 0xa03cc, 0x00007ff80367134e libsystem_kernel.dylib`kevent + 10\r\n  thread #4: tid = 0xa03cd, 0x00007ff8036730aa libsystem_kernel.dylib`poll + 10\r\n  thread #5: tid = 0xa03ce, 0x00007ff80366d3ba libsystem_kernel.dylib`read + 10\r\n  thread #6: tid = 0xa03cf, 0x00007ff80366f3ea libsystem_kernel.dylib`__psynch_cvwait + 10\r\n  thread #7: tid = 0xa03d0, 0x00007ff80366f3ea libsystem_kernel.dylib`__psynch_cvwait + 10\r\n  thread #8: tid = 0xa03d3, 0x00007ff80366e05a libsystem_kernel.dylib`__workq_kernreturn + 10\r\n  thread #9: tid = 0xa03d5, 0x00007ff80366d3ba libsystem_kernel.dylib`read + 10\r\n  thread #10: tid = 0xa04c7, 0x00007ff80366f3ea libsystem_kernel.dylib`__psynch_cvwait + 10\r\n  thread #11: tid = 0xa04e5, 0x00007ff80366f3ea libsystem_kernel.dylib`__psynch_cvwait + 10\r\n```\r\n```\r\n(lldb) clrthreads\r\nThreadCount:      3\r\nUnstartedThread:  0\r\nBackgroundThread: 2\r\nPendingThread:    0\r\nDeadThread:       0\r\nHosted Runtime:   no\r\n                                                                                                            Lock\r\n DBG   ID     OSID ThreadOBJ           State GC Mode     GC Alloc Context                  Domain           Count Apt Exception\r\n   1    1    a03c3 00007FF30F813E00    a0028 Preemptive  0000000186B0E8C0:0000000186B0FFD0 00007FF31080C200 -00001 Ukn\r\n   7    2    a03d0 00007FF30F81A800    21228 Preemptive  00000001869AAE78:00000001869ACAA0 00007FF31080C200 -00001 Ukn (Finalizer)\r\n  11    3    a04e5 00007FF310830000    a1228 Preemptive  0000000186B17E60:0000000186B17FD0 00007FF31080C200 -00001 Ukn\r\n```\r\nI believe most of the CLR-unknown threads are OS-created threads to handle Mach IPC, debugger related, or other similar threads.\r\n\r\nMain thread native stack:\r\n```\r\n(lldb) bt\r\n* thread #1, queue = \u0027com.apple.main-thread\u0027, stop reason = signal SIGSTOP\r\n  * frame #0: 0x00007ff80366f3ea libsystem_kernel.dylib`__psynch_cvwait + 10\r\n    frame #1: 0x00007ff8036a9a6f libsystem_pthread.dylib`_pthread_cond_wait + 1249\r\n    frame #2: 0x00000001068f0162 libcoreclr.dylib`CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData*, unsigned int, CorUnix::ThreadWakeupReason*, unsigned int*) + 322\r\n    frame #3: 0x00000001068efd8a libcoreclr.dylib`CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread*, unsigned int, bool, bool, CorUnix::ThreadWakeupReason*, unsigned int*) + 362\r\n    frame #4: 0x00000001068f4609 libcoreclr.dylib`CorUnix::InternalWaitForMultipleObjectsEx(CorUnix::CPalThread*, unsigned int, void* const*, int, unsigned int, int, int) + 2153\r\n    frame #5: 0x00000001068f47dd libcoreclr.dylib`WaitForSingleObjectEx + 77\r\n    frame #6: 0x0000000106b0f1bf libcoreclr.dylib`CLREventBase::WaitEx(unsigned int, WaitMode, PendingSync*) + 191\r\n    frame #7: 0x0000000106b158d0 libcoreclr.dylib`Thread::WaitSuspendEventsHelper() + 192\r\n    frame #8: 0x0000000106b142c8 libcoreclr.dylib`Thread::RareEnablePreemptiveGC() + 296\r\n    frame #9: 0x0000000106b13c35 libcoreclr.dylib`Thread::RareDisablePreemptiveGC() + 277\r\n    frame #10: 0x0000000106c1f4d1 libcoreclr.dylib`DebuggerController::DispatchPatchOrSingleStep(Thread*, _CONTEXT*, unsigned char const*, SCAN_TRIGGER) + 913\r\n    frame #11: 0x0000000106c2064f libcoreclr.dylib`DebuggerController::DispatchNativeException(_EXCEPTION_RECORD*, _CONTEXT*, unsigned int, Thread*) + 511\r\n    frame #12: 0x0000000106c2da69 libcoreclr.dylib`Debugger::FirstChanceNativeException(_EXCEPTION_RECORD*, _CONTEXT*, unsigned int, Thread*) + 89\r\n    frame #13: 0x0000000106b3e0c6 libcoreclr.dylib`HandleHardwareException(PAL_SEHException*) + 454\r\n    frame #14: 0x00000001068c4a9b libcoreclr.dylib`SEHProcessException(PAL_SEHException*) + 315\r\n    frame #15: 0x00000001068fe719 libcoreclr.dylib`PAL_DispatchException + 137\r\n    frame #16: 0x00000001068fe3a3 libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\r\n    frame #17: 0x0000000115fe13e6\r\n    frame #18: 0x0000000115fe12e5\r\n    frame #19: 0x0000000106999222 libcoreclr.dylib`invokeCompileMethodHelper(EEJitManager*, CEEInfo*, CORINFO_METHOD_INFO*, CORJIT_FLAGS, unsigned char**, unsigned int*) + 354\r\n    frame #20: 0x00000001069992f2 libcoreclr.dylib`invokeCompileMethod(EEJitManager*, CEEInfo*, CORINFO_METHOD_INFO*, CORJIT_FLAGS, unsigned char**, unsigned int*) + 130\r\n    frame #21: 0x0000000106999cf5 libcoreclr.dylib`UnsafeJitFunction(PrepareCodeConfig*, COR_ILMETHOD_DECODER*, CORJIT_FLAGS, unsigned int*) + 1317\r\n    frame #22: 0x00000001069d1fc0 libcoreclr.dylib`MethodDesc::JitCompileCodeLocked(PrepareCodeConfig*, ListLockEntryBase\u003cNativeCodeVersion\u003e*, unsigned int*, CORJIT_FLAGS*) + 288\r\n    frame #23: 0x00000001069d1ac5 libcoreclr.dylib`MethodDesc::JitCompileCodeLockedEventWrapper(PrepareCodeConfig*, ListLockEntryBase\u003cNativeCodeVersion\u003e*) + 613\r\n    frame #24: 0x00000001069d122f libcoreclr.dylib`MethodDesc::JitCompileCode(PrepareCodeConfig*) + 479\r\n    frame #25: 0x00000001069d0d9a libcoreclr.dylib`MethodDesc::PrepareILBasedCode(PrepareCodeConfig*) + 634\r\n    frame #26: 0x00000001069d3ed1 libcoreclr.dylib`MethodDesc::DoPrestub(MethodTable*, CallerGCMode) + 545\r\n    frame #27: 0x00000001069d3857 libcoreclr.dylib`PreStubWorker + 535\r\n    frame #28: 0x0000000106be721b libcoreclr.dylib`ThePreStub + 92\r\n    frame #29: 0x000000011601cd53\r\n    frame #30: 0x000000011601ccaf\r\n    frame #31: 0x0000000115861eb7\r\n    frame #32: 0x0000000106be65e9 libcoreclr.dylib`CallDescrWorkerInternal + 124\r\n    frame #33: 0x0000000106a329ea libcoreclr.dylib`MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int) + 1530\r\n    frame #34: 0x000000010691893e libcoreclr.dylib`RunMain(MethodDesc*, short, int*, PtrArray**) + 734\r\n    frame #35: 0x0000000106918c5b libcoreclr.dylib`Assembly::ExecuteMainMethod(PtrArray**, int) + 395\r\n    frame #36: 0x000000010694a792 libcoreclr.dylib`CorHost2::ExecuteAssembly(unsigned int, char16_t const*, int, char16_t const**, unsigned int*) + 498\r\n    frame #37: 0x00000001069024e4 libcoreclr.dylib`coreclr_execute_assembly + 180\r\n    frame #38: 0x000000010618aafd libhostpolicy.dylib`run_app_for_context(hostpolicy_context_t const\u0026, int, char const**) + 1293\r\n    frame #39: 0x000000010618b961 libhostpolicy.dylib`corehost_main + 241\r\n    frame #40: 0x0000000106113f15 libhostfxr.dylib`fx_muxer_t::handle_exec_host_command(std::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e const\u0026, host_startup_info_t const\u0026, std::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e const\u0026, std::__1::unordered_map\u003cknown_options, std::__1::vector\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e, std::__1::allocator\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e \u003e \u003e, known_options_hash, std::__1::equal_to\u003cknown_options\u003e, std::__1::allocator\u003cstd::__1::pair\u003cknown_options const, std::__1::vector\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e, std::__1::allocator\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e \u003e \u003e \u003e \u003e \u003e const\u0026, int, char const**, int, host_mode_t, bool, char*, int, int*) + 1621\r\n    frame #41: 0x0000000106112d1d libhostfxr.dylib`fx_muxer_t::execute(std::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e, int, char const**, host_startup_info_t const\u0026, char*, int, int*) + 621\r\n    frame #42: 0x000000010610f6b8 libhostfxr.dylib`hostfxr_main_startupinfo + 152\r\n    frame #43: 0x0000000105f5b854 MonoMod.FrameworkTests`exe_start(int, char const**) + 1508\r\n    frame #44: 0x0000000105f5ba60 MonoMod.FrameworkTests`main + 144\r\n    frame #45: 0x000000010e4d052e dyld`start + 462\r\n```\r\n\r\nMain thread managed stack:\r\n```\r\n(lldb) clrstack\r\nOS Thread Id: 0xa03c3 (1)\r\n        Child SP               IP Call Site\r\n00007FF7B9FAF9E0 0000000115FE13E5 MonoMod.Core.Platforms.Runtimes.Core21Runtime+JitHookDelegateHolder.CompileMethodHook(IntPtr, IntPtr, CORINFO_METHOD_INFO ByRef, UInt32, Byte* ByRef, UInt32 ByRef) [/Users/aaron/Documents/MonoMod/src/MonoMod.Core/Platforms/Runtimes/Core21Runtime.cs @ 154]\r\n00007FF7B9FAFC80 0000000115FE12E5 ILStubClass.IL_STUB_ReversePInvoke(Int64, Int64, IntPtr, UInt32, IntPtr, IntPtr)\r\n00007FF7B9FB0460 0000000106999222 [PrestubMethodFrame: 00007ff7b9fb0460] DynamicClass.SyncProxy\u003cnative-\u003emanaged Get1Delegate\u003e(NativeDetourSyncInfo)\r\n00007FF7B9FB05F0 000000011601CD53 ILStubClass.IL_STUB_ReversePInvoke()\r\n00007FF7B9FB0640 000000011601ccaf [InlinedCallFrame: 00007ff7b9fb0640]\r\n00007FF7B9FB0630 000000011601CCAF ILStubClass.IL_STUB_PInvoke()\r\n00007FF7B9FB06C0 0000000115861EB7 Program.\u003cMain\u003e$(System.String[]) [/Users/aaron/Documents/MonoMod/src/MonoMod.FrameworkTests/Program.cs @ 67]\r\n\r\n```\r\n\r\nFinalizer thread stack:\r\n```\r\n(lldb) bt\r\n* thread #7\r\n  * frame #0: 0x00007ff80366f3ea libsystem_kernel.dylib`__psynch_cvwait + 10\r\n    frame #1: 0x00007ff8036a9a6f libsystem_pthread.dylib`_pthread_cond_wait + 1249\r\n    frame #2: 0x00000001068f0162 libcoreclr.dylib`CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData*, unsigned int, CorUnix::ThreadWakeupReason*, unsigned int*) + 322\r\n    frame #3: 0x00000001068efd8a libcoreclr.dylib`CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread*, unsigned int, bool, bool, CorUnix::ThreadWakeupReason*, unsigned int*) + 362\r\n    frame #4: 0x00000001068f4609 libcoreclr.dylib`CorUnix::InternalWaitForMultipleObjectsEx(CorUnix::CPalThread*, unsigned int, void* const*, int, unsigned int, int, int) + 2153\r\n    frame #5: 0x00000001068f48a2 libcoreclr.dylib`WaitForMultipleObjectsEx + 82\r\n    frame #6: 0x0000000106a77548 libcoreclr.dylib`FinalizerThread::WaitForFinalizerEvent(CLREvent*) + 200\r\n    frame #7: 0x0000000106a77664 libcoreclr.dylib`FinalizerThread::FinalizerThreadWorker(void*) + 180\r\n    frame #8: 0x00000001069fa878 libcoreclr.dylib`ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) + 296\r\n    frame #9: 0x00000001069fae40 libcoreclr.dylib`ManagedThreadBase::FinalizerBase(void (*)(void*)) + 32\r\n    frame #10: 0x0000000106a777d8 libcoreclr.dylib`FinalizerThread::FinalizerThreadStart(void*) + 88\r\n    frame #11: 0x00000001068fc4e7 libcoreclr.dylib`CorUnix::CPalThread::ThreadEntry(void*) + 407\r\n    frame #12: 0x00007ff8036a94e1 libsystem_pthread.dylib`_pthread_start + 125\r\n    frame #13: 0x00007ff8036a4f6b libsystem_pthread.dylib`thread_start + 15\r\n```\r\n\r\nTiered Compilation background thread native stack:\r\n```\r\n(lldb) bt\r\n* thread #11\r\n  * frame #0: 0x00007ff80366f3ea libsystem_kernel.dylib`__psynch_cvwait + 10\r\n    frame #1: 0x00007ff8036a9a6f libsystem_pthread.dylib`_pthread_cond_wait + 1249\r\n    frame #2: 0x00000001068f0162 libcoreclr.dylib`CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData*, unsigned int, CorUnix::ThreadWakeupReason*, unsigned int*) + 322\r\n    frame #3: 0x00000001068efd8a libcoreclr.dylib`CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread*, unsigned int, bool, bool, CorUnix::ThreadWakeupReason*, unsigned int*) + 362\r\n    frame #4: 0x00000001068f4609 libcoreclr.dylib`CorUnix::InternalWaitForMultipleObjectsEx(CorUnix::CPalThread*, unsigned int, void* const*, int, unsigned int, int, int) + 2153\r\n    frame #5: 0x00000001068f47dd libcoreclr.dylib`WaitForSingleObjectEx + 77\r\n    frame #6: 0x0000000106b0f1bf libcoreclr.dylib`CLREventBase::WaitEx(unsigned int, WaitMode, PendingSync*) + 191\r\n    frame #7: 0x0000000106b158d0 libcoreclr.dylib`Thread::WaitSuspendEventsHelper() + 192\r\n    frame #8: 0x0000000106b142c8 libcoreclr.dylib`Thread::RareEnablePreemptiveGC() + 296\r\n    frame #9: 0x0000000106b13c35 libcoreclr.dylib`Thread::RareDisablePreemptiveGC() + 277\r\n    frame #10: 0x0000000106982038 libcoreclr.dylib`JITInlineTrackingMap::AddInliningDontTakeLock(MethodDesc*, MethodDesc*) + 72\r\n    frame #11: 0x0000000106981fb1 libcoreclr.dylib`JITInlineTrackingMap::AddInlining(MethodDesc*, MethodDesc*) + 49\r\n    frame #12: 0x0000000106992e91 libcoreclr.dylib`CEEInfo::reportInliningDecision(CORINFO_METHOD_STRUCT_*, CORINFO_METHOD_STRUCT_*, CorInfoInline, char const*) + 1761\r\n    frame #13: 0x00000001072a3dcb libclrjit.dylib`Compiler::fgInline() + 395\r\n    frame #14: 0x00000001073837a8 libclrjit.dylib`Phase::Run() + 24\r\n    frame #15: 0x00000001072868ef libclrjit.dylib`Compiler::compCompile(void**, unsigned int*, JitFlags*) + 863\r\n    frame #16: 0x000000010728828c libclrjit.dylib`Compiler::compCompileHelper(CORINFO_MODULE_STRUCT_*, ICorJitInfo*, CORINFO_METHOD_INFO*, void**, unsigned int*, JitFlags*) + 796\r\n    frame #17: 0x0000000107287bd4 libclrjit.dylib`Compiler::compCompile(CORINFO_MODULE_STRUCT_*, void**, unsigned int*, JitFlags*) + 900\r\n    frame #18: 0x0000000107288e9b libclrjit.dylib`jitNativeCode(CORINFO_METHOD_STRUCT_*, CORINFO_MODULE_STRUCT_*, ICorJitInfo*, CORINFO_METHOD_INFO*, void**, unsigned int*, JitFlags*, void*) + 539\r\n    frame #19: 0x000000010728d139 libclrjit.dylib`CILJit::compileMethod(ICorJitInfo*, CORINFO_METHOD_INFO*, unsigned int, unsigned char**, unsigned int*) + 105\r\n    frame #20: 0x0000000115fe120c\r\n    frame #21: 0x0000000115fe0616\r\n    frame #22: 0x0000000115fe14d6\r\n    frame #23: 0x0000000115fe12e5\r\n    frame #24: 0x0000000106999222 libcoreclr.dylib`invokeCompileMethodHelper(EEJitManager*, CEEInfo*, CORINFO_METHOD_INFO*, CORJIT_FLAGS, unsigned char**, unsigned int*) + 354\r\n    frame #25: 0x00000001069992f2 libcoreclr.dylib`invokeCompileMethod(EEJitManager*, CEEInfo*, CORINFO_METHOD_INFO*, CORJIT_FLAGS, unsigned char**, unsigned int*) + 130\r\n    frame #26: 0x0000000106999cf5 libcoreclr.dylib`UnsafeJitFunction(PrepareCodeConfig*, COR_ILMETHOD_DECODER*, CORJIT_FLAGS, unsigned int*) + 1317\r\n    frame #27: 0x00000001069d1fc0 libcoreclr.dylib`MethodDesc::JitCompileCodeLocked(PrepareCodeConfig*, ListLockEntryBase\u003cNativeCodeVersion\u003e*, unsigned int*, CORJIT_FLAGS*) + 288\r\n    frame #28: 0x00000001069d1ac5 libcoreclr.dylib`MethodDesc::JitCompileCodeLockedEventWrapper(PrepareCodeConfig*, ListLockEntryBase\u003cNativeCodeVersion\u003e*) + 613\r\n    frame #29: 0x00000001069d122f libcoreclr.dylib`MethodDesc::JitCompileCode(PrepareCodeConfig*) + 479\r\n    frame #30: 0x00000001069d0d9a libcoreclr.dylib`MethodDesc::PrepareILBasedCode(PrepareCodeConfig*) + 634\r\n    frame #31: 0x00000001069feca5 libcoreclr.dylib`TieredCompilationManager::CompileCodeVersion(NativeCodeVersion) + 261\r\n    frame #32: 0x00000001069fe13f libcoreclr.dylib`TieredCompilationManager::DoBackgroundWork(unsigned long*, unsigned long, unsigned long) + 335\r\n    frame #33: 0x00000001069fd944 libcoreclr.dylib`TieredCompilationManager::BackgroundWorkerStart() + 260\r\n    frame #34: 0x00000001069fd778 libcoreclr.dylib`TieredCompilationManager::BackgroundWorkerBootstrapper1(void*) + 88\r\n    frame #35: 0x00000001069fa878 libcoreclr.dylib`ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) + 296\r\n    frame #36: 0x00000001069fade0 libcoreclr.dylib`ManagedThreadBase::KickOff(void (*)(void*), void*) + 32\r\n    frame #37: 0x00000001069fd6b0 libcoreclr.dylib`TieredCompilationManager::BackgroundWorkerBootstrapper0(void*) + 32\r\n    frame #38: 0x00000001068fc4e7 libcoreclr.dylib`CorUnix::CPalThread::ThreadEntry(void*) + 407\r\n    frame #39: 0x00007ff8036a94e1 libsystem_pthread.dylib`_pthread_start + 125\r\n    frame #40: 0x00007ff8036a4f6b libsystem_pthread.dylib`thread_start + 15\r\n```\r\n\r\nTiered Compilation background thread managed stack:\r\n```\r\n(lldb) clrstack\r\nOS Thread Id: 0xa04e5 (11)\r\n        Child SP               IP Call Site\r\n0000700010147108 00007ff80366f3ea [InlinedCallFrame: 0000700010147108]\r\n0000700010147108 0000000115fe120c [InlinedCallFrame: 0000700010147108]\r\n0000700010147100 0000000115FE120C ILStubClass.IL_STUB_PInvoke(IntPtr, IntPtr, CORINFO_METHOD_INFO ByRef, UInt32, Byte* ByRef, UInt32 ByRef)\r\n00007000101471B0 0000000115FE0616 MonoMod.Core.Interop.CoreCLR+V60.InvokeCompileMethod(IntPtr, IntPtr, IntPtr, CORINFO_METHOD_INFO ByRef, UInt32, Byte* ByRef, UInt32 ByRef) [/Users/aaron/Documents/MonoMod/src/MonoMod.Core/Interop/CoreCLR.V60.cs @ 50]\r\n0000700010147220 0000000115FE14D6 MonoMod.Core.Platforms.Runtimes.Core21Runtime+JitHookDelegateHolder.CompileMethodHook(IntPtr, IntPtr, CORINFO_METHOD_INFO ByRef, UInt32, Byte* ByRef, UInt32 ByRef) [/Users/aaron/Documents/MonoMod/src/MonoMod.Core/Platforms/Runtimes/Core21Runtime.cs @ 172]\r\n00007000101474C0 0000000115FE12E5 ILStubClass.IL_STUB_ReversePInvoke(Int64, Int64, IntPtr, UInt32, IntPtr, IntPtr)\r\n0000700010147EB8 0000000106999222 [DebuggerU2MCatchHandlerFrame: 0000700010147eb8]\r\n```\r\n\r\n\n\n### Regression?\n\nUnknown; I can\u0027t reproduce even on the same runtime.\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n- MacOS x64 (Darwin 21.6.0)\r\n- .NET 6.0.13\r\n- Visual Studio SSH Remote Debugger\n\n### Other information\n\nBased on the stack of the two managed threads, I can *guess* that there\u0027s a race somewhere in `Thread::RareEnablePreemptiveGC` or similar, though I am not at all familiar with that method or anything around it. I am also guessing that the `PAL_DispatchExceptionWrapper` is called somehow for the debugger to break when it enters the JIT hook method, but again, I am not at all familiar.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOVZSiEA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Vge1J",
                                           "createdAt":  "2023-02-17T12:32:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "The `PAL_DispatchExceptionWrapper` presence on the stack means that there was a hardware exception at the managed frame below that. In this case, based on the presence of `DebuggerController::DispatchPatchOrSingleStep` on the stack, it was a breakpoint coming from the single stepping in the debugger.\r\n\r\nHowever, it is quite strange that we would hang waiting for thread suspension (GC) when there is no other managed thread than the finalizer thread.\r\n\r\n@nike4613 when you say VS\u0027s remote debugger, do you mean VS on Windows or VS on macOS?",
                                           "updatedAt":  "2023-02-17T12:32:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Vge8U",
                                           "createdAt":  "2023-02-17T12:33:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nWhile using VS\u0027s remote debugger to debug [MonoMod](https://github.com/MonoMod/MonoMod/tree/reorganize/) on .NET 6 on MacOS x64, I ran into a deadlock while trying to step into a native function which I had hooked back to managed code (using `Marshal.GetFunctionPointerForDelegate` to create the target of the detour). I have not been able to reproduce this, however I did poke around in LLDB, so have some information.\r\n\r\nMonoMod installs a JIT hook in order to track method recompilations, and this has worked very well for us so far. This is the first time we have seen this, despite having used this JIT hook, mostly unchanged, for at least a year.\r\n\r\nThe application which I saw this happen on was `MonoMod.FrameworkTests`, which locked when trying to step into the call to `msvcrand()` on [line 67](https://github.com/MonoMod/MonoMod/blob/0ab2d0f9b90c08034019b7fa959252c50c467bf0/src/MonoMod.FrameworkTests/Program.cs#L67). \r\n\r\nAnswers to some things Tanner asked when I asked in the C# discord:\r\n- `SuppressGCTransition` isn\u0027t used anywhere in this project\r\n- All of the native to managed thunks are created with `Marshal.GetFunctionPointerForDelegate` or its inverse\r\n- The application is entirely single-threaded, and does not call out into any native code which would invoke managed code on a thread the runtime doesn\u0027t know about.\n\n### Reproduction Steps\n\n1. Start `MonoMod.FrameworkTests` on MacOS .NET 6\r\n2. Attach VS remote debugger when prompted\r\n3. Set a breakpoint on line 67 of `Program.cs`\r\n4. Resume the application by pressing enter\r\n5. Attempt to step in to `msvcrand()`\r\n6. Program hangs, or rather, did once.\n\n### Expected behavior\n\nNo deadlock.\n\n### Actual behavior\n\nA deadlock occurs. \r\n\r\nAt the time of the deadlock,. there are 11 threads, though only 3 of them are managed threads known by the runtime. \r\n```\r\n(lldb) thread list\r\nProcess 24949 stopped\r\n* thread #1: tid = 0xa03c3, 0x00007ff80366f3ea libsystem_kernel.dylib`__psynch_cvwait + 10, queue = \u0027com.apple.main-thread\u0027, stop reason = signal SIGSTOP\r\n  thread #2: tid = 0xa03cb, 0x00007ff80366c97a libsystem_kernel.dylib`mach_msg_trap + 10\r\n  thread #3: tid = 0xa03cc, 0x00007ff80367134e libsystem_kernel.dylib`kevent + 10\r\n  thread #4: tid = 0xa03cd, 0x00007ff8036730aa libsystem_kernel.dylib`poll + 10\r\n  thread #5: tid = 0xa03ce, 0x00007ff80366d3ba libsystem_kernel.dylib`read + 10\r\n  thread #6: tid = 0xa03cf, 0x00007ff80366f3ea libsystem_kernel.dylib`__psynch_cvwait + 10\r\n  thread #7: tid = 0xa03d0, 0x00007ff80366f3ea libsystem_kernel.dylib`__psynch_cvwait + 10\r\n  thread #8: tid = 0xa03d3, 0x00007ff80366e05a libsystem_kernel.dylib`__workq_kernreturn + 10\r\n  thread #9: tid = 0xa03d5, 0x00007ff80366d3ba libsystem_kernel.dylib`read + 10\r\n  thread #10: tid = 0xa04c7, 0x00007ff80366f3ea libsystem_kernel.dylib`__psynch_cvwait + 10\r\n  thread #11: tid = 0xa04e5, 0x00007ff80366f3ea libsystem_kernel.dylib`__psynch_cvwait + 10\r\n```\r\n```\r\n(lldb) clrthreads\r\nThreadCount:      3\r\nUnstartedThread:  0\r\nBackgroundThread: 2\r\nPendingThread:    0\r\nDeadThread:       0\r\nHosted Runtime:   no\r\n                                                                                                            Lock\r\n DBG   ID     OSID ThreadOBJ           State GC Mode     GC Alloc Context                  Domain           Count Apt Exception\r\n   1    1    a03c3 00007FF30F813E00    a0028 Preemptive  0000000186B0E8C0:0000000186B0FFD0 00007FF31080C200 -00001 Ukn\r\n   7    2    a03d0 00007FF30F81A800    21228 Preemptive  00000001869AAE78:00000001869ACAA0 00007FF31080C200 -00001 Ukn (Finalizer)\r\n  11    3    a04e5 00007FF310830000    a1228 Preemptive  0000000186B17E60:0000000186B17FD0 00007FF31080C200 -00001 Ukn\r\n```\r\nI believe most of the CLR-unknown threads are OS-created threads to handle Mach IPC, debugger related, or other similar threads.\r\n\r\nMain thread native stack:\r\n```\r\n(lldb) bt\r\n* thread #1, queue = \u0027com.apple.main-thread\u0027, stop reason = signal SIGSTOP\r\n  * frame #0: 0x00007ff80366f3ea libsystem_kernel.dylib`__psynch_cvwait + 10\r\n    frame #1: 0x00007ff8036a9a6f libsystem_pthread.dylib`_pthread_cond_wait + 1249\r\n    frame #2: 0x00000001068f0162 libcoreclr.dylib`CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData*, unsigned int, CorUnix::ThreadWakeupReason*, unsigned int*) + 322\r\n    frame #3: 0x00000001068efd8a libcoreclr.dylib`CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread*, unsigned int, bool, bool, CorUnix::ThreadWakeupReason*, unsigned int*) + 362\r\n    frame #4: 0x00000001068f4609 libcoreclr.dylib`CorUnix::InternalWaitForMultipleObjectsEx(CorUnix::CPalThread*, unsigned int, void* const*, int, unsigned int, int, int) + 2153\r\n    frame #5: 0x00000001068f47dd libcoreclr.dylib`WaitForSingleObjectEx + 77\r\n    frame #6: 0x0000000106b0f1bf libcoreclr.dylib`CLREventBase::WaitEx(unsigned int, WaitMode, PendingSync*) + 191\r\n    frame #7: 0x0000000106b158d0 libcoreclr.dylib`Thread::WaitSuspendEventsHelper() + 192\r\n    frame #8: 0x0000000106b142c8 libcoreclr.dylib`Thread::RareEnablePreemptiveGC() + 296\r\n    frame #9: 0x0000000106b13c35 libcoreclr.dylib`Thread::RareDisablePreemptiveGC() + 277\r\n    frame #10: 0x0000000106c1f4d1 libcoreclr.dylib`DebuggerController::DispatchPatchOrSingleStep(Thread*, _CONTEXT*, unsigned char const*, SCAN_TRIGGER) + 913\r\n    frame #11: 0x0000000106c2064f libcoreclr.dylib`DebuggerController::DispatchNativeException(_EXCEPTION_RECORD*, _CONTEXT*, unsigned int, Thread*) + 511\r\n    frame #12: 0x0000000106c2da69 libcoreclr.dylib`Debugger::FirstChanceNativeException(_EXCEPTION_RECORD*, _CONTEXT*, unsigned int, Thread*) + 89\r\n    frame #13: 0x0000000106b3e0c6 libcoreclr.dylib`HandleHardwareException(PAL_SEHException*) + 454\r\n    frame #14: 0x00000001068c4a9b libcoreclr.dylib`SEHProcessException(PAL_SEHException*) + 315\r\n    frame #15: 0x00000001068fe719 libcoreclr.dylib`PAL_DispatchException + 137\r\n    frame #16: 0x00000001068fe3a3 libcoreclr.dylib`PAL_DispatchExceptionWrapper + 10\r\n    frame #17: 0x0000000115fe13e6\r\n    frame #18: 0x0000000115fe12e5\r\n    frame #19: 0x0000000106999222 libcoreclr.dylib`invokeCompileMethodHelper(EEJitManager*, CEEInfo*, CORINFO_METHOD_INFO*, CORJIT_FLAGS, unsigned char**, unsigned int*) + 354\r\n    frame #20: 0x00000001069992f2 libcoreclr.dylib`invokeCompileMethod(EEJitManager*, CEEInfo*, CORINFO_METHOD_INFO*, CORJIT_FLAGS, unsigned char**, unsigned int*) + 130\r\n    frame #21: 0x0000000106999cf5 libcoreclr.dylib`UnsafeJitFunction(PrepareCodeConfig*, COR_ILMETHOD_DECODER*, CORJIT_FLAGS, unsigned int*) + 1317\r\n    frame #22: 0x00000001069d1fc0 libcoreclr.dylib`MethodDesc::JitCompileCodeLocked(PrepareCodeConfig*, ListLockEntryBase\u003cNativeCodeVersion\u003e*, unsigned int*, CORJIT_FLAGS*) + 288\r\n    frame #23: 0x00000001069d1ac5 libcoreclr.dylib`MethodDesc::JitCompileCodeLockedEventWrapper(PrepareCodeConfig*, ListLockEntryBase\u003cNativeCodeVersion\u003e*) + 613\r\n    frame #24: 0x00000001069d122f libcoreclr.dylib`MethodDesc::JitCompileCode(PrepareCodeConfig*) + 479\r\n    frame #25: 0x00000001069d0d9a libcoreclr.dylib`MethodDesc::PrepareILBasedCode(PrepareCodeConfig*) + 634\r\n    frame #26: 0x00000001069d3ed1 libcoreclr.dylib`MethodDesc::DoPrestub(MethodTable*, CallerGCMode) + 545\r\n    frame #27: 0x00000001069d3857 libcoreclr.dylib`PreStubWorker + 535\r\n    frame #28: 0x0000000106be721b libcoreclr.dylib`ThePreStub + 92\r\n    frame #29: 0x000000011601cd53\r\n    frame #30: 0x000000011601ccaf\r\n    frame #31: 0x0000000115861eb7\r\n    frame #32: 0x0000000106be65e9 libcoreclr.dylib`CallDescrWorkerInternal + 124\r\n    frame #33: 0x0000000106a329ea libcoreclr.dylib`MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int) + 1530\r\n    frame #34: 0x000000010691893e libcoreclr.dylib`RunMain(MethodDesc*, short, int*, PtrArray**) + 734\r\n    frame #35: 0x0000000106918c5b libcoreclr.dylib`Assembly::ExecuteMainMethod(PtrArray**, int) + 395\r\n    frame #36: 0x000000010694a792 libcoreclr.dylib`CorHost2::ExecuteAssembly(unsigned int, char16_t const*, int, char16_t const**, unsigned int*) + 498\r\n    frame #37: 0x00000001069024e4 libcoreclr.dylib`coreclr_execute_assembly + 180\r\n    frame #38: 0x000000010618aafd libhostpolicy.dylib`run_app_for_context(hostpolicy_context_t const\u0026, int, char const**) + 1293\r\n    frame #39: 0x000000010618b961 libhostpolicy.dylib`corehost_main + 241\r\n    frame #40: 0x0000000106113f15 libhostfxr.dylib`fx_muxer_t::handle_exec_host_command(std::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e const\u0026, host_startup_info_t const\u0026, std::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e const\u0026, std::__1::unordered_map\u003cknown_options, std::__1::vector\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e, std::__1::allocator\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e \u003e \u003e, known_options_hash, std::__1::equal_to\u003cknown_options\u003e, std::__1::allocator\u003cstd::__1::pair\u003cknown_options const, std::__1::vector\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e, std::__1::allocator\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e \u003e \u003e \u003e \u003e \u003e const\u0026, int, char const**, int, host_mode_t, bool, char*, int, int*) + 1621\r\n    frame #41: 0x0000000106112d1d libhostfxr.dylib`fx_muxer_t::execute(std::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e, int, char const**, host_startup_info_t const\u0026, char*, int, int*) + 621\r\n    frame #42: 0x000000010610f6b8 libhostfxr.dylib`hostfxr_main_startupinfo + 152\r\n    frame #43: 0x0000000105f5b854 MonoMod.FrameworkTests`exe_start(int, char const**) + 1508\r\n    frame #44: 0x0000000105f5ba60 MonoMod.FrameworkTests`main + 144\r\n    frame #45: 0x000000010e4d052e dyld`start + 462\r\n```\r\n\r\nMain thread managed stack:\r\n```\r\n(lldb) clrstack\r\nOS Thread Id: 0xa03c3 (1)\r\n        Child SP               IP Call Site\r\n00007FF7B9FAF9E0 0000000115FE13E5 MonoMod.Core.Platforms.Runtimes.Core21Runtime+JitHookDelegateHolder.CompileMethodHook(IntPtr, IntPtr, CORINFO_METHOD_INFO ByRef, UInt32, Byte* ByRef, UInt32 ByRef) [/Users/aaron/Documents/MonoMod/src/MonoMod.Core/Platforms/Runtimes/Core21Runtime.cs @ 154]\r\n00007FF7B9FAFC80 0000000115FE12E5 ILStubClass.IL_STUB_ReversePInvoke(Int64, Int64, IntPtr, UInt32, IntPtr, IntPtr)\r\n00007FF7B9FB0460 0000000106999222 [PrestubMethodFrame: 00007ff7b9fb0460] DynamicClass.SyncProxy\u003cnative-\u003emanaged Get1Delegate\u003e(NativeDetourSyncInfo)\r\n00007FF7B9FB05F0 000000011601CD53 ILStubClass.IL_STUB_ReversePInvoke()\r\n00007FF7B9FB0640 000000011601ccaf [InlinedCallFrame: 00007ff7b9fb0640]\r\n00007FF7B9FB0630 000000011601CCAF ILStubClass.IL_STUB_PInvoke()\r\n00007FF7B9FB06C0 0000000115861EB7 Program.\u003cMain\u003e$(System.String[]) [/Users/aaron/Documents/MonoMod/src/MonoMod.FrameworkTests/Program.cs @ 67]\r\n\r\n```\r\n\r\nFinalizer thread stack:\r\n```\r\n(lldb) bt\r\n* thread #7\r\n  * frame #0: 0x00007ff80366f3ea libsystem_kernel.dylib`__psynch_cvwait + 10\r\n    frame #1: 0x00007ff8036a9a6f libsystem_pthread.dylib`_pthread_cond_wait + 1249\r\n    frame #2: 0x00000001068f0162 libcoreclr.dylib`CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData*, unsigned int, CorUnix::ThreadWakeupReason*, unsigned int*) + 322\r\n    frame #3: 0x00000001068efd8a libcoreclr.dylib`CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread*, unsigned int, bool, bool, CorUnix::ThreadWakeupReason*, unsigned int*) + 362\r\n    frame #4: 0x00000001068f4609 libcoreclr.dylib`CorUnix::InternalWaitForMultipleObjectsEx(CorUnix::CPalThread*, unsigned int, void* const*, int, unsigned int, int, int) + 2153\r\n    frame #5: 0x00000001068f48a2 libcoreclr.dylib`WaitForMultipleObjectsEx + 82\r\n    frame #6: 0x0000000106a77548 libcoreclr.dylib`FinalizerThread::WaitForFinalizerEvent(CLREvent*) + 200\r\n    frame #7: 0x0000000106a77664 libcoreclr.dylib`FinalizerThread::FinalizerThreadWorker(void*) + 180\r\n    frame #8: 0x00000001069fa878 libcoreclr.dylib`ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) + 296\r\n    frame #9: 0x00000001069fae40 libcoreclr.dylib`ManagedThreadBase::FinalizerBase(void (*)(void*)) + 32\r\n    frame #10: 0x0000000106a777d8 libcoreclr.dylib`FinalizerThread::FinalizerThreadStart(void*) + 88\r\n    frame #11: 0x00000001068fc4e7 libcoreclr.dylib`CorUnix::CPalThread::ThreadEntry(void*) + 407\r\n    frame #12: 0x00007ff8036a94e1 libsystem_pthread.dylib`_pthread_start + 125\r\n    frame #13: 0x00007ff8036a4f6b libsystem_pthread.dylib`thread_start + 15\r\n```\r\n\r\nTiered Compilation background thread native stack:\r\n```\r\n(lldb) bt\r\n* thread #11\r\n  * frame #0: 0x00007ff80366f3ea libsystem_kernel.dylib`__psynch_cvwait + 10\r\n    frame #1: 0x00007ff8036a9a6f libsystem_pthread.dylib`_pthread_cond_wait + 1249\r\n    frame #2: 0x00000001068f0162 libcoreclr.dylib`CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData*, unsigned int, CorUnix::ThreadWakeupReason*, unsigned int*) + 322\r\n    frame #3: 0x00000001068efd8a libcoreclr.dylib`CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread*, unsigned int, bool, bool, CorUnix::ThreadWakeupReason*, unsigned int*) + 362\r\n    frame #4: 0x00000001068f4609 libcoreclr.dylib`CorUnix::InternalWaitForMultipleObjectsEx(CorUnix::CPalThread*, unsigned int, void* const*, int, unsigned int, int, int) + 2153\r\n    frame #5: 0x00000001068f47dd libcoreclr.dylib`WaitForSingleObjectEx + 77\r\n    frame #6: 0x0000000106b0f1bf libcoreclr.dylib`CLREventBase::WaitEx(unsigned int, WaitMode, PendingSync*) + 191\r\n    frame #7: 0x0000000106b158d0 libcoreclr.dylib`Thread::WaitSuspendEventsHelper() + 192\r\n    frame #8: 0x0000000106b142c8 libcoreclr.dylib`Thread::RareEnablePreemptiveGC() + 296\r\n    frame #9: 0x0000000106b13c35 libcoreclr.dylib`Thread::RareDisablePreemptiveGC() + 277\r\n    frame #10: 0x0000000106982038 libcoreclr.dylib`JITInlineTrackingMap::AddInliningDontTakeLock(MethodDesc*, MethodDesc*) + 72\r\n    frame #11: 0x0000000106981fb1 libcoreclr.dylib`JITInlineTrackingMap::AddInlining(MethodDesc*, MethodDesc*) + 49\r\n    frame #12: 0x0000000106992e91 libcoreclr.dylib`CEEInfo::reportInliningDecision(CORINFO_METHOD_STRUCT_*, CORINFO_METHOD_STRUCT_*, CorInfoInline, char const*) + 1761\r\n    frame #13: 0x00000001072a3dcb libclrjit.dylib`Compiler::fgInline() + 395\r\n    frame #14: 0x00000001073837a8 libclrjit.dylib`Phase::Run() + 24\r\n    frame #15: 0x00000001072868ef libclrjit.dylib`Compiler::compCompile(void**, unsigned int*, JitFlags*) + 863\r\n    frame #16: 0x000000010728828c libclrjit.dylib`Compiler::compCompileHelper(CORINFO_MODULE_STRUCT_*, ICorJitInfo*, CORINFO_METHOD_INFO*, void**, unsigned int*, JitFlags*) + 796\r\n    frame #17: 0x0000000107287bd4 libclrjit.dylib`Compiler::compCompile(CORINFO_MODULE_STRUCT_*, void**, unsigned int*, JitFlags*) + 900\r\n    frame #18: 0x0000000107288e9b libclrjit.dylib`jitNativeCode(CORINFO_METHOD_STRUCT_*, CORINFO_MODULE_STRUCT_*, ICorJitInfo*, CORINFO_METHOD_INFO*, void**, unsigned int*, JitFlags*, void*) + 539\r\n    frame #19: 0x000000010728d139 libclrjit.dylib`CILJit::compileMethod(ICorJitInfo*, CORINFO_METHOD_INFO*, unsigned int, unsigned char**, unsigned int*) + 105\r\n    frame #20: 0x0000000115fe120c\r\n    frame #21: 0x0000000115fe0616\r\n    frame #22: 0x0000000115fe14d6\r\n    frame #23: 0x0000000115fe12e5\r\n    frame #24: 0x0000000106999222 libcoreclr.dylib`invokeCompileMethodHelper(EEJitManager*, CEEInfo*, CORINFO_METHOD_INFO*, CORJIT_FLAGS, unsigned char**, unsigned int*) + 354\r\n    frame #25: 0x00000001069992f2 libcoreclr.dylib`invokeCompileMethod(EEJitManager*, CEEInfo*, CORINFO_METHOD_INFO*, CORJIT_FLAGS, unsigned char**, unsigned int*) + 130\r\n    frame #26: 0x0000000106999cf5 libcoreclr.dylib`UnsafeJitFunction(PrepareCodeConfig*, COR_ILMETHOD_DECODER*, CORJIT_FLAGS, unsigned int*) + 1317\r\n    frame #27: 0x00000001069d1fc0 libcoreclr.dylib`MethodDesc::JitCompileCodeLocked(PrepareCodeConfig*, ListLockEntryBase\u003cNativeCodeVersion\u003e*, unsigned int*, CORJIT_FLAGS*) + 288\r\n    frame #28: 0x00000001069d1ac5 libcoreclr.dylib`MethodDesc::JitCompileCodeLockedEventWrapper(PrepareCodeConfig*, ListLockEntryBase\u003cNativeCodeVersion\u003e*) + 613\r\n    frame #29: 0x00000001069d122f libcoreclr.dylib`MethodDesc::JitCompileCode(PrepareCodeConfig*) + 479\r\n    frame #30: 0x00000001069d0d9a libcoreclr.dylib`MethodDesc::PrepareILBasedCode(PrepareCodeConfig*) + 634\r\n    frame #31: 0x00000001069feca5 libcoreclr.dylib`TieredCompilationManager::CompileCodeVersion(NativeCodeVersion) + 261\r\n    frame #32: 0x00000001069fe13f libcoreclr.dylib`TieredCompilationManager::DoBackgroundWork(unsigned long*, unsigned long, unsigned long) + 335\r\n    frame #33: 0x00000001069fd944 libcoreclr.dylib`TieredCompilationManager::BackgroundWorkerStart() + 260\r\n    frame #34: 0x00000001069fd778 libcoreclr.dylib`TieredCompilationManager::BackgroundWorkerBootstrapper1(void*) + 88\r\n    frame #35: 0x00000001069fa878 libcoreclr.dylib`ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) + 296\r\n    frame #36: 0x00000001069fade0 libcoreclr.dylib`ManagedThreadBase::KickOff(void (*)(void*), void*) + 32\r\n    frame #37: 0x00000001069fd6b0 libcoreclr.dylib`TieredCompilationManager::BackgroundWorkerBootstrapper0(void*) + 32\r\n    frame #38: 0x00000001068fc4e7 libcoreclr.dylib`CorUnix::CPalThread::ThreadEntry(void*) + 407\r\n    frame #39: 0x00007ff8036a94e1 libsystem_pthread.dylib`_pthread_start + 125\r\n    frame #40: 0x00007ff8036a4f6b libsystem_pthread.dylib`thread_start + 15\r\n```\r\n\r\nTiered Compilation background thread managed stack:\r\n```\r\n(lldb) clrstack\r\nOS Thread Id: 0xa04e5 (11)\r\n        Child SP               IP Call Site\r\n0000700010147108 00007ff80366f3ea [InlinedCallFrame: 0000700010147108]\r\n0000700010147108 0000000115fe120c [InlinedCallFrame: 0000700010147108]\r\n0000700010147100 0000000115FE120C ILStubClass.IL_STUB_PInvoke(IntPtr, IntPtr, CORINFO_METHOD_INFO ByRef, UInt32, Byte* ByRef, UInt32 ByRef)\r\n00007000101471B0 0000000115FE0616 MonoMod.Core.Interop.CoreCLR+V60.InvokeCompileMethod(IntPtr, IntPtr, IntPtr, CORINFO_METHOD_INFO ByRef, UInt32, Byte* ByRef, UInt32 ByRef) [/Users/aaron/Documents/MonoMod/src/MonoMod.Core/Interop/CoreCLR.V60.cs @ 50]\r\n0000700010147220 0000000115FE14D6 MonoMod.Core.Platforms.Runtimes.Core21Runtime+JitHookDelegateHolder.CompileMethodHook(IntPtr, IntPtr, CORINFO_METHOD_INFO ByRef, UInt32, Byte* ByRef, UInt32 ByRef) [/Users/aaron/Documents/MonoMod/src/MonoMod.Core/Platforms/Runtimes/Core21Runtime.cs @ 172]\r\n00007000101474C0 0000000115FE12E5 ILStubClass.IL_STUB_ReversePInvoke(Int64, Int64, IntPtr, UInt32, IntPtr, IntPtr)\r\n0000700010147EB8 0000000106999222 [DebuggerU2MCatchHandlerFrame: 0000700010147eb8]\r\n```\r\n\r\n\n\n### Regression?\n\nUnknown; I can\u0027t reproduce even on the same runtime.\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n- MacOS x64 (Darwin 21.6.0)\r\n- .NET 6.0.13\r\n- Visual Studio SSH Remote Debugger\n\n### Other information\n\nBased on the stack of the two managed threads, I can *guess* that there\u0027s a race somewhere in `Thread::RareEnablePreemptiveGC` or similar, though I am not at all familiar with that method or anything around it. I am also guessing that the `PAL_DispatchExceptionWrapper` is called somehow for the debugger to break when it enters the JIT hook method, but again, I am not at all familiar.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003enike4613\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-02-17T12:33:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ViNiH",
                                           "createdAt":  "2023-02-17T17:52:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e However, it is quite strange that we would hang waiting for thread suspension (GC) when there is no other managed thread than the finalizer thread.\r\n\r\nNote that the program hacks into the runtime by inserting detour implemented in managed code between VM and JIT. My guess is that this detour corrupts VM state and that leads to hangs and crashes. We have special transitions (`JIT_TO_EE_TRANSITION` macros and friends) to transition between JIT and VM. The detour will re-enter the VM without proper `JIT_TO_EE_TRANSITION` transition.\r\n\r\n@nike4613 The detour like what you install is not something we support. You may want to build a checked flavor of the runtime  - it may give you more clues about what went wrong.\r\n\r\n",
                                           "updatedAt":  "2023-02-17T17:52:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Vin_E",
                                           "createdAt":  "2023-02-17T19:32:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nike4613",
                                           "body":  "\u003e @nike4613 when you say VS\u0027s remote debugger, do you mean VS on Windows or VS on macOS?\r\n\r\nI mean VS on Windows. \r\n\r\n\u003e Note that the program hacks into the runtime by inserting detour implemented in managed code between VM and JIT. My guess is that this detour corrupts VM state and that leads to hangs and crashes. We have special transitions (`JIT_TO_EE_TRANSITION` macros and friends) to transition between JIT and VM. The detour will re-enter the VM without proper `JIT_TO_EE_TRANSITION` transition.\r\n\r\nWhat is special about the JIT\u003c-\u003eEE transitions? Is there any way I could force the correct transition to happen?\r\n\r\n\u003e @nike4613 The detour like what you install is not something we support. \r\n\r\nI am largely aware, though as I said, I\u0027ve never seen this issue before, and haven\u0027t been able to reproduce since; this JIT hook works in production across multiple runtime versions right now. As far as I\u0027m aware, there isn\u0027t another option to make this functionality work, because we need to know when a method gets recompiled, and be able to install our detour to it before the new method is published.\r\n\r\n\u003e You may want to build a checked flavor of the runtime - it may give you more clues about what went wrong.\r\n\r\nI\u0027ll do that, but I don\u0027t know what, if anything, I\u0027d find, given that I can\u0027t reproduce this issue in the first place.",
                                           "updatedAt":  "2023-02-17T19:32:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Vi9Zp",
                                           "createdAt":  "2023-02-17T20:25:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC2T3mQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hoyosjs",
                                                                               "createdAt":  "2023-02-17T20:58:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Is there any way I could force the correct transition to happen?\r\n\r\nNo. These transitions are internal implementation detail of the runtime. There is no way to do them outside the runtime.\r\n\r\n\u003e As far as I\u0027m aware, there isn\u0027t another option to make this functionality work, because we need to know when a method gets recompiled\r\n\r\nProfiler APIs (https://learn.microsoft.com/en-us/dotnet/framework/unmanaged-api/profiling/icorprofilerinfo-setilfunctionbody-method and friends) are the supported way to instrument methods.",
                                           "updatedAt":  "2023-02-17T20:25:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VjFxv",
                                           "createdAt":  "2023-02-17T21:00:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nike4613",
                                           "body":  "\u003e \u003e Is there any way I could force the correct transition to happen?\r\n\u003e \r\n\u003e No. These transitions are internal implementation detail of the runtime. There is no way to do them outside the runtime.\r\n\r\nGood thing we already rely on several implementation details, according to the detected runtime version.\r\n\r\n\u003e \u003e As far as I\u0027m aware, there isn\u0027t another option to make this functionality work, because we need to know when a method gets recompiled\r\n\u003e \r\n\u003e Profiler APIs (https://learn.microsoft.com/en-us/dotnet/framework/unmanaged-api/profiling/icorprofilerinfo-setilfunctionbody-method and friends) are the supported way to instrument methods.\r\n\r\nAre the profiler APIs available on all platforms? How would one attach to a process on, say Linux? And more than that, how could we do that in-process from managed?\r\n\r\nThe most common use of MonoMod is game modding, targeting either Unity Mono, whatever version of CoreCLR BepInEx loads for IL2CPP, or whatever runtime an XNA/FNA/MonoGame game is sitting on top of. We already have a great deal of logic to select low-level implementations based on the current runtime, and abuse implementation details for each of them. MonoMod is also used in several places where it *must* be able to be loaded at some arbitrary point after process start and function, and must be able to use the same binary for different runtimes/architectures/operating systems. It also *shouldn\u0027t* interfere with external tooling, though that\u0027s more acceptable as long as it doesn\u0027t interfere with debuggers.\r\n\r\nAnything that doesn\u0027t meet these requirements are non-starters for us, which is why we use the approach we do. If you want, we can discuss this question more on the C# discord, but that\u0027s largely irrelevant to this issue (even if our approach is potentially related).",
                                           "updatedAt":  "2023-02-17T21:00:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VjJUe",
                                           "createdAt":  "2023-02-17T21:16:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Profiler APIs are available on all platforms. The profilers have to be written in native code. It is not possible to write fully managed profilers.\r\n\r\nThere is no supported way to do what you are trying to do today.",
                                           "updatedAt":  "2023-02-17T21:16:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VjKUw",
                                           "createdAt":  "2023-02-17T21:20:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "Also, for these type of issues we\u0027d likely need a repro - half of the state under the debugger is on the debugger side. I can only see that you hit a hardware exception that the debugger needs to handle and most threads are trying to toggle thread state. However, since you introduced a managed method in between the interfaces as a detour all toggles are potentially off... It becomes a timing game. Anything that sits in between these two layers doesn\u0027t have a way to signal components of changes and is unsupported. Even profiling can mess with the debugger, but something as low as messing with the thread state is even more likely to cause runtime issues. Also, since profilers are native you can\u0027t use the same DLL.",
                                           "updatedAt":  "2023-02-17T21:20:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VjLMi",
                                           "createdAt":  "2023-02-17T21:24:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nike4613",
                                           "body":  "\u003e Also, for these type of issues we\u0027d likely need a repro\r\n\r\nThat\u0027s understandable. I\u0027ll see if I can find a reliable way to repro.\r\n\r\nWe\u0027d also be OK with somehow disabling step-in to the JIT hook, though I don\u0027t know of a good way to do that. ",
                                           "updatedAt":  "2023-02-17T21:29:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VjSaN",
                                           "createdAt":  "2023-02-17T21:47:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "You\u0027d still need a step through which will place breakpoints there even if you don\u0027t notice them. Placing a breakpoint at the other side is the only non-stepping solution. However, if the hook does anything the debugger triggers on (thread creation for some bg processing, some type loading, evaluation of properties) you\u0027ll likely end up in the same place. Running managed code in suspended states is a place where if the runtime is not cooperating, you\u0027ll likely end up in states that we can\u0027t guarantee the correctness of.",
                                           "updatedAt":  "2023-02-17T21:47:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Vkdof",
                                           "createdAt":  "2023-02-18T10:22:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nike4613",
                                           "body":  "Quick update-- I  am able to successfully run under a checked runtime (release/6.0) with no issues, JIT hook and all. Now to try to reproduce this issue...",
                                           "updatedAt":  "2023-02-18T10:22:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VlHE-",
                                           "createdAt":  "2023-02-18T23:30:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nike4613",
                                           "body":  "I\u0027ve figured out how to reproduce the deadlock under a checked build, though it seems to be happening in a slightly different place now. I have a full process dump of the application in this state, before it died due to asking LLDB for a thread backtrace... I\u0027m also not able to get a managed backtrace from SOS while debugging the dump, but maybe I\u0027m just doing something wrong there. I had enabled the CLR log with `DOTNET_LogFacility=20010000` as well, if that may be helpful. \r\n\r\nI\u0027ll try to upload the dump somewhere in a minute; it\u0027s about 3.6GB uncompressed.\r\n\r\n---\r\n\r\nE: My reproduction steps are as follows:\r\n1. Set a breakpoint at line 161 of `src/MonoMod.Core/Platforms/Architectures/AltEntryFactories/IcedAltEntryFactory.cs`\r\n2. Start the application\r\n3. Attach debugger when prompted\r\n4. Press enter in terminal\r\n5. F5/Continue until the breakpoint previously mentioned is hit\r\n6. Step-over until it locks up after stepping over line 190",
                                           "updatedAt":  "2023-02-18T23:39:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VlIFM",
                                           "createdAt":  "2023-02-19T00:00:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nike4613",
                                           "body":  "Oh, not really related, but I did notice when I tried to step-in once, I hit a CLR assert in debugging support code:\r\nhttps://github.com/dotnet/runtime/blob/19fde2f5b9dd7c8b5f37e9f02688ff9b708b24b5/src/coreclr/debug/ee/controller.cpp#L3917\r\n",
                                           "updatedAt":  "2023-02-19T00:00:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VlKIQ",
                                           "createdAt":  "2023-02-19T00:54:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nike4613",
                                           "body":  "Dump is [here](https://ihavethepowerofgodandanimeonmysi.de/ddl/lock.dmp.zst). It is zstd compressed to get the size down.\r\nIt is a checked build of 19fde2f5b9dd7c8b5f37e9f02688ff9b708b24b5 on MacOS Monterey x64, built with `./build.sh clr+libs -rc Checked -lc Release` and run using `corerun`. Let me know if you need the DAC build for it.",
                                           "updatedAt":  "2023-02-19T00:54:24Z"
                                       }
                                   ],
                         "totalCount":  14
                     },
        "title":  "Potential deadlock during GC transition",
        "labels":  [
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/82422",
        "createdAt":  "2023-02-21T09:31:29Z",
        "number":  82422,
        "author":  "viewizard",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-05-08T21:53:23Z",
        "body":  "### Description\r\n\r\nDuring netcoredbg testing with .NET SDK 7.0 (dotnet-sdk-7.0.200-linux-x64.tar.gz). We found, that tests related to evaluation abort (timeout during execution and `System.Diagnostics.Debugger.NotifyOfCrossThreadDependency()` usage in evaluated code) are failed.\r\nWe found, that `ICorDebugEval::Abort` and `ICorDebugEval2::RudeAbort` return `S_OK` at call, but don\u0027t really abort evaluation in 7.0 (we also tested latest .NET SDK 3.1, 5.0, 6.0 and don\u0027t found any issues).\r\n\r\n### Reproduction Steps\r\n\r\nCall `ICorDebugEval::Abort` in debugger. For example, create property with getter with `System.Diagnostics.Debugger.NotifyOfCrossThreadDependency()` and evaluate it. In this case runtime will call `ICorDebugManagedCallback3::CustomNotification` that forced debugger to use `ICorDebugEval::Abort` (CoreCLR debug API don\u0027t really provide any other way you could abort code execution during evaluation).\r\n\r\n### Expected behavior\r\n\r\n1. During evaluation call `ICorDebugEval::Abort` or `ICorDebugEval2::RudeAbort`, it will return `S_OK`.\r\n2. Evaluated code don\u0027t continue execution.\r\n3. `ICorDebugManagedCallback::EvalComplete` or `ICorDebugManagedCallback::EvalException` called, `ICorDebugEval::GetResult()` return `CORDBG_S_FUNC_EVAL_ABORTED`.\r\n\r\n### Actual behavior\r\n\r\n1. During evaluation call `ICorDebugEval::Abort` or `ICorDebugEval2::RudeAbort`, it will return `S_OK`.\r\n2. Evaluated code continue execution.\r\n3. After evaluated code execution ends `ICorDebugManagedCallback::EvalComplete` or `ICorDebugManagedCallback::EvalException` called, `ICorDebugEval::GetResult()` return `S_OK`. In case evaluated code never ends (for example, about deadlock), `ICorDebugManagedCallback::EvalComplete` or `ICorDebugManagedCallback::EvalException` never called.\r\n\r\n### Regression?\r\n\r\nIt works fine on Linux amd64 with .NET SDK 3.1, 5.0 and 6.0.\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\nUbuntu 20.04 amd64, .NET SDK 7.0 (dotnet-sdk-7.0.200-linux-x64.tar.gz).\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOfSOp1w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5VuGMt",
                                           "createdAt":  "2023-02-21T09:31:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "viewizard",
                                           "body":  "CC @alpencolt ",
                                           "updatedAt":  "2023-02-21T09:31:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VuNQD",
                                           "createdAt":  "2023-02-21T09:52:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nDuring netcoredbg testing with .NET SDK 7.0 (dotnet-sdk-7.0.200-linux-x64.tar.gz). We found, that tests related to evaluation abort (timeout during execution and `System.Diagnostics.Debugger.NotifyOfCrossThreadDependency()` usage in evaluated code) are failed.\r\nWe found, that `ICorDebugEval::Abort` and `ICorDebugEval2::RudeAbort` return `S_OK` at call, but don\u0027t really abort evaluation in 7.0 (we also tested latest .NET SDK 3.1, 5.0, 6.0 and don\u0027t found any issues).\n\n### Reproduction Steps\n\nCall `ICorDebugEval::Abort` in debugger. For example, create property with getter with `System.Diagnostics.Debugger.NotifyOfCrossThreadDependency()` and evaluate it. In this case runtime will call `ICorDebugManagedCallback3::CustomNotification` that forced debugger to use `ICorDebugEval::Abort` (CoreCLR debug API don\u0027t really provide any other way you could abort code execution during evaluation).\n\n### Expected behavior\n\n1. During evaluation call `ICorDebugEval::Abort` or `ICorDebugEval2::RudeAbort`, it will return `S_OK`.\r\n2. Evaluated code don\u0027t continue execution.\r\n3. `ICorDebugManagedCallback::EvalComplete` or `ICorDebugManagedCallback::EvalException` called.\n\n### Actual behavior\n\n1. During evaluation call `ICorDebugEval::Abort` or `ICorDebugEval2::RudeAbort`, it will return `S_OK`.\r\n2. Evaluated code continue execution.\r\n3. After evaluated code execution ends `ICorDebugManagedCallback::EvalComplete` or `ICorDebugManagedCallback::EvalException` called. In case evaluated code never ends (for example, about deadlock), `ICorDebugManagedCallback::EvalComplete` or `ICorDebugManagedCallback::EvalException` never called.\n\n### Regression?\n\nIt works fine on Linux amd64 with .NET SDK 3.1, 5.0 and 6.0.\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nUbuntu 20.04 amd64, .NET SDK 7.0 (dotnet-sdk-7.0.200-linux-x64.tar.gz).\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eviewizard\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-02-21T09:52:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5WapKQ",
                                           "createdAt":  "2023-03-01T10:33:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gbalykov",
                                           "body":  "cc @jkotas ",
                                           "updatedAt":  "2023-03-01T10:33:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZbQET",
                                           "createdAt":  "2023-04-07T14:00:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gbalykov",
                                           "body":  "@jkotas did you have a chance to take a look?",
                                           "updatedAt":  "2023-04-07T14:00:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZbSq6",
                                           "createdAt":  "2023-04-07T14:11:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Looks like a regression, it may be related to #71661. @tommcdon Do you see this problem in VS debugger tests?",
                                           "updatedAt":  "2023-04-07T14:11:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZbY8B",
                                           "createdAt":  "2023-04-07T14:43:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "This may be related to https://github.com/dotnet/runtime/pull/72705 and if \u0027yes\u0027 it could be a duplicate to https://github.com/dotnet/runtime/issues/72703.  I am not seeing any issues in our Visual Studio func-eval abort testing on .NET 7 or .NET 8 running against Linux and macOS.  \r\n@viewizard would it be possible to share a reproducible test case of the debuggee function failing to abort?",
                                           "updatedAt":  "2023-04-07T14:43:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Zbn8A",
                                           "createdAt":  "2023-04-07T15:58:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "viewizard",
                                           "body":  "I just figure out, that in case some simple test all works fine on Linux amd64 with VSCode debugger and our debugger too. For example, simple test like:\r\n```\r\nusing System;\r\n\r\nnamespace test\r\n{\r\n    class Program\r\n    {\r\n        static int eval_test()\r\n        {\r\n            //System.Diagnostics.Debugger.NotifyOfCrossThreadDependency();\r\n            System.Threading.Thread.Sleep(20000);\r\n            return 5;\r\n        }\r\n\r\n        static void Main()\r\n        {\r\n            int i = 0;\r\n            i ++;\r\n        }\r\n    }\r\n}\r\n```\r\nwith evaluation for ` eval_test()` at line `i++` will properly abort since timed out.\r\nIn case of our debugger, it will also abort without any issues in case `NotifyOfCrossThreadDependency` will uncomment.\r\n\r\nBut it fails on our complex eval tests we do at lines (note, `Label.Checkpoint` blocks is parts related of control program, that interact with debugger, other code - debuggee program related code):\r\nhttps://github.com/Samsung/netcoredbg/blob/master/test-suite/MITestVariables/Program.cs#L1197\r\nhttps://github.com/Samsung/netcoredbg/blob/master/test-suite/MITestEvaluate/Program.cs#L1453\r\nhttps://github.com/Samsung/netcoredbg/blob/master/test-suite/VSCodeTestVariables/Program.cs#L1315\r\nhttps://github.com/Samsung/netcoredbg/blob/master/test-suite/VSCodeTestEvaluate/Program.cs#L1577\r\nall the time, `Abort()` return S_OK:\r\nhttps://github.com/Samsung/netcoredbg/blob/fb63fd9a834a3f640bc573827bf50c142ee5039b/src/debugger/evalwaiter.cpp#L241\r\nhttps://github.com/Samsung/netcoredbg/blob/fb63fd9a834a3f640bc573827bf50c142ee5039b/src/debugger/evalwaiter.cpp#L183\r\n\r\nas you could see we do a lot of evals before abort-related test, probably this is related (unfortunately I was not able to reproduce this with some simple code in VSCode).\r\nIf you would like, I could provide instruction how you could use our debugger on Linux in order to run this tests.",
                                           "updatedAt":  "2023-04-07T15:58:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Zb5Nx",
                                           "createdAt":  "2023-04-07T17:22:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Thanks for taking a look @viewizard!  Would you mind explaining what `GetAndCheckValue` and `CheckErrorAtRequest` does?  I\u0027m guessing it performs a func-eval.  So if I am reading the code correctly, it seems the order events are:\r\n1. func-eval `stGetInt()`\r\n2. func-eval `stGetInt(333)`\r\n3. func-eval `getInt()`\r\n4. func-eval `TestTimeOut()`\r\n\r\nIs this the `TestTimeOut()` function the one that fails to Abort()?  It seems it sleeps for 10 seconds then returns.  How long does the test wait for the abort to occur?  \r\n\r\nhttps://github.com/Samsung/netcoredbg/blob/db69338cf1606d8d327de0eaaf1694d8463af135/test-suite/VSCodeTestEvaluate/Program.cs#L801-L805\r\n\r\nIf we selectively comment out different parts of the test, does the Abort eventually begin to succeed?  If \u0027yes\u0027 then I suggest systematically un-commenting test code until we find the previous step that causes the Abort to fail.  It may be that something before the func-eval abort is causing the debugger or the runtime to be destabilized and leads to the func-eval abort failure.",
                                           "updatedAt":  "2023-04-07T17:22:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZcCbl",
                                           "createdAt":  "2023-04-07T18:15:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC5dPsg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2023-04-07T19:50:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "viewizard",
                                           "body":  "Yes, `GetAndCheckValue` and `CheckErrorAtRequest` send to debugger `EvaluateRequest` and wait for reply, for `GetAndCheckValue` we compare it with `ExpectedResult` and `ExpectedType`.\r\n\r\n\u003e it seems the order events are:\r\n\u003e func-eval stGetInt()\r\n\u003e func-eval stGetInt(333)\r\n\u003e func-eval getInt()\r\n\u003e func-eval TestTimeOut()\r\n\r\nYou absolutely right, but I was not able to reproduce abort-related issue with only this evals tests, this looks strange for me, since we do only this tests on current breakpoint stop.\r\n\r\n\u003e Is this the TestTimeOut() function the one that fails to Abort()? It seems it sleeps for 10 seconds then returns. How long does the test wait for the abort to occur?\r\n\r\ndebugger will call `Abort()` after 5 sec - https://github.com/Samsung/netcoredbg/blob/fb63fd9a834a3f640bc573827bf50c142ee5039b/src/debugger/evalwaiter.cpp#L167\r\nbut `Abort()` do nothing and eval-related code continue executing, debugger wait for eval ends here:\r\nhttps://github.com/Samsung/netcoredbg/blob/fb63fd9a834a3f640bc573827bf50c142ee5039b/src/debugger/evalwaiter.cpp#L193\r\nIn case VSCodeTestEvaluate, after 10 seconds (`System.Threading.Thread.Sleep(10000);` ends) eval will complete (`ICorDebugManagedCallback::EvalComplete()` will be called with result) and debugger provide \"result\" = 5, that should not happens (should ends without result).\r\n\r\n\u003e If we selectively comment out different parts of the test, does the Abort eventually begin to succeed? If \u0027yes\u0027 then I suggest systematically un-commenting test code until we find the previous step that causes the Abort to fail. It may be that something before the func-eval abort is causing the debugger or the runtime to be destabilized and leads to the func-eval abort failure.\r\n\r\nSure, I will try in monday find some related eval block.\r\n",
                                           "updatedAt":  "2023-04-07T18:15:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZenLv",
                                           "createdAt":  "2023-04-09T19:27:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "viewizard",
                                           "body":  "@tommcdon I am sorry, looks like in friday I was not careful and did a mistake in testing and analyze.\r\nI used same simple test code again:\r\n```\r\nusing System;\r\n\r\nnamespace test\r\n{\r\n    class Program\r\n    {\r\n        static int TestTimeOut()\r\n        {\r\n            System.Threading.Thread.Sleep(10000);\r\n            return 5;\r\n        }\r\n\r\n        static void Main()\r\n        {\r\n            System.Console.WriteLine(\"Hello World!\");\r\n        }\r\n    }\r\n}\r\n```\r\nTest sequence:\r\n1) Set and stop at breakpoint in line `System.Console.WriteLine(\"Hello World!\");`\r\n2) Evaluate `TestTimeOut()`;\r\n\r\n**After 5 sec. of eval execution (at this point execution inside `System.Threading.Thread.Sleep(10000)` code)**\r\n1) debugger call `ICorDebugController::Stop()`, that return `S_OK`;\r\n2) debugger call `ICorDebugEval::Abort()`, that return `S_OK`;\r\n3) debugger call `ICorDebugController::Continue()`, that return `S_OK` (at this point we run all managed threads for sure);\r\n**Now I counted seconds and looks like only Sleep() was aborted, not all evaluation code, next code execution starts immediately, not after 5 seconds**\r\n4) `ICorDebugManagedCallback::EvalComplete()` callback called;\r\n5) debugger check eval status `ICorDebugEval::GetResult()` and get `S_OK`;\r\n6) eval result (ICorDebugValue), same as should be in case abort never called;\r\n\r\nAfter that I changed code of `TestTimeOut()` method to:\r\n```\r\n        static int TestTimeOut()\r\n        {\r\n            System.Threading.Thread.Sleep(10000);\r\n            System.Threading.Thread.Sleep(10000);\r\n            return 5;\r\n        }\r\n```\r\n\r\nAnd abort now works just as should:\r\n\r\n**After 5 sec. of eval execution (at this point execution inside `System.Threading.Thread.Sleep(10000)` code)**\r\n1) debugger call `ICorDebugController::Stop()`, that return `S_OK`;\r\n2) debugger call `ICorDebugEval::Abort()`, that return `S_OK`;\r\n3) debugger call `ICorDebugController::Continue()`, that return `S_OK` (at this point we run all managed threads for sure);\r\n4) `ICorDebugManagedCallback::EvalComplete()` callback called;\r\n5) debugger check eval status `ICorDebugEval::GetResult()` and get `CORDBG_S_FUNC_EVAL_ABORTED`.\r\n\r\nI also play around `TestTimeOut()` code changes and found, that eval abort broken with some simple changes like \r\n```\r\n        static int TestTimeOut()\r\n        {\r\n            System.Threading.Thread.Sleep(10000);\r\n            int i = 5;\r\n            return 5;\r\n        }\r\n```\r\nBut in the same time  abort works proper with simple code moved to separate method:\r\n```\r\n        static void TestMethod()\r\n        {\r\n            int i = 5;\r\n        }\r\n\r\n        static int TestTimeOut()\r\n        {\r\n            System.Threading.Thread.Sleep(10000);\r\n            TestMethod();\r\n            return 5;\r\n        }\r\n```\r\nHope this helps.",
                                           "updatedAt":  "2023-04-09T22:35:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZijhY",
                                           "createdAt":  "2023-04-10T19:42:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Thanks for the details @viewizard!  Adding @hoyosjs. I *believe* that we have no way of aborting the native call to Sleep which is a native call into the OS, and so my guess is that we trap the return back into the method and then execute the abort when the instruction pointer re-enters the runtime (when the sleep returns).  My guess is that in the scenario where there is more code after the first call to sleep, the abort prevents further execution in the method.  However, when there is only one call to sleep, the func-eval \"successfully\" completes because there is nothing to abort.  This is just a guess at this point and would need investigation to confirm.",
                                           "updatedAt":  "2023-04-10T19:42:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Zil5h",
                                           "createdAt":  "2023-04-10T19:53:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "viewizard",
                                           "body":  "But the point is - previously (with .NET SDK 3.1, 5.0, 6,0) all works just fine, I mean, we have same tests for all .NET SDK releases (3.1, 5.0, 6.0) with our debugger (we use same debugger binary + latest dbgshim for tests with different .NET SDK) and it fail now only for 7.0 due to abort issue. Is `Sleep()` code was changed in 7.0?",
                                           "updatedAt":  "2023-04-10T19:53:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZjRwk",
                                           "createdAt":  "2023-04-10T22:31:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "viewizard",
                                           "body":  "I also found one more issue with abort in 7.0. In case `Sleep()` is huge, for examle:\r\n```\r\n        static int TestTimeOut()\r\n        {\r\n            System.Threading.Thread.Sleep(6000000);\r\n            return 5;\r\n        }\r\n```\r\n**After 5 sec. of eval execution (at this point execution inside System.Threading.Thread.Sleep(6000000) code)**\r\n1. debugger call ICorDebugController::Stop(), that return S_OK;\r\n2. debugger call ICorDebugEval::Abort(), that return S_OK;\r\n3. debugger call ICorDebugController::Continue(), that return S_OK (at this point we run all managed threads for sure);\r\n4. ***UPD2:*** related to eval `ICorDebugManagedCallback::EvalComplete()` callback was called only after `Sleep()` is fully complited, and return with \"result\" = 5 (`ICorDebugEval::GetResult()` is `S_OK`), this probably mean abort don\u0027t work at all for this case. This is really sad.\r\n\r\nI am still worry, why `Sleep(6000000)` and `Sleep(10000)` works in so different way.\r\n\r\nWorks fine in 6.0.",
                                           "updatedAt":  "2023-04-11T00:42:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Zl-eb",
                                           "createdAt":  "2023-04-11T11:07:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e I believe that we have no way of aborting the native call to Sleep which is a native call into the OS, \r\n\r\n`Thread.Sleep` is abortable on CoreCLR. On Windows, the abort is achieved by sending APC to the sleeping thread. On Unix, the PAL has Windows APC emulator to do the same. Relevant code: https://github.com/dotnet/runtime/blob/766d8c184693eea3b1d72f4de672e0f40d2085ea/src/coreclr/vm/threads.cpp#L4177-L4207 .",
                                           "updatedAt":  "2023-04-11T11:07:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Znarx",
                                           "createdAt":  "2023-04-11T14:43:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Thanks @jkotas and @viewizard!!  It sounds like we should try an experiment where we add/enable APC and debugger logging to see 1) is the call to `ICorDebugController::Stop` actually successful (I am curious if we are still stuck in a native call to sleep or is the process synchronized), 2) is there an APC cancellation request to ClrSleepEx, 3) if \u0027yes\u0027, is it actually being aborted.  @viewizard would you be interested in giving that a try?  ",
                                           "updatedAt":  "2023-04-11T14:43:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Znz8q",
                                           "createdAt":  "2023-04-11T15:25:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "viewizard",
                                           "body":  "Sorry, have no time for deep CoreCLR 7.0 investigation now, must care about next netcoredbg releases in Tizen SDK (as you probably know, last Tizen use CoreCLR 6.0, we only added 7.0 to our CI for debugger testing and share results and fast analyze with you).\r\n\r\nBut, probably @gbalykov and @alpencolt have more info about our future plans.",
                                           "updatedAt":  "2023-04-11T15:25:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Zupcd",
                                           "createdAt":  "2023-04-12T14:41:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gbalykov",
                                           "body":  "@tommcdon we can try to run our debugger with patched runtime with enabled logging if you share such patch.",
                                           "updatedAt":  "2023-04-12T14:41:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5j6OJ-",
                                           "createdAt":  "2023-08-13T03:27:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "We believe this issue might be fixed by https://github.com/dotnet/runtime/pull/89781.  @viewizard Would you mind testing the fix?  I will be included with .NET 8 RC1, or can be tested against a build of main containing the fix.",
                                           "updatedAt":  "2023-08-13T03:27:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5j6OTH",
                                           "createdAt":  "2023-08-13T03:30:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been marked `needs-author-action` and may be missing some important information.",
                                           "updatedAt":  "2023-08-13T03:30:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lAbpz",
                                           "createdAt":  "2023-08-27T09:01:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been automatically marked `no-recent-activity` because it has not had any activity for 14 days. It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will remove `no-recent-activity`.",
                                           "updatedAt":  "2023-08-27T09:01:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mFy8h",
                                           "createdAt":  "2023-09-10T12:01:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue will now be closed since it had been marked `no-recent-activity` but received no further activity in the past 14 days. It is still possible to reopen or comment on the issue, but please note that the issue will be locked if it remains inactive for another 30 days.",
                                           "updatedAt":  "2023-09-10T12:01:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mFzl-",
                                           "createdAt":  "2023-09-10T12:13:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gbalykov",
                                           "body":  "We\u0027ll retest when .net 8 rc1 is released, please keep this open for now",
                                           "updatedAt":  "2023-09-10T12:13:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mQ6pP",
                                           "createdAt":  "2023-09-12T13:18:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "I\u0027ve reopened it as per @gbalykov\u0027s request.",
                                           "updatedAt":  "2023-09-12T13:18:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mQ7Wq",
                                           "createdAt":  "2023-09-12T13:19:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gbalykov",
                                           "body":  "@janvorli Thank you!",
                                           "updatedAt":  "2023-09-12T13:19:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5m_JxI",
                                           "createdAt":  "2023-09-20T14:20:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "viewizard",
                                           "body":  "@tommcdon I tested SDK 8.0.100-rc.1 from https://dotnet.microsoft.com/en-us/download/dotnet/8.0 on Linux amd64, but issue still here.",
                                           "updatedAt":  "2023-09-20T14:20:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59I6nX",
                                           "createdAt":  "2024-05-07T23:51:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "This issue (or something very similar) also appears to reproduce on VS when targetting WSL. It does not repro when the same steps run on Windows. My repro:\r\n\r\n1. Write console app:\r\n\r\n```C#\r\nnamespace Idle\r\n{\r\n    internal class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Hello, World!\");\r\n        }\r\n\r\n        static int Sleep()\r\n        {\r\n            Thread.Sleep(100000);\r\n            return 5;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n2. Set breakpoint on the opening curly brace of Main()\r\n3. Run the app under the debugger targetting WSL\r\n4. When the breakpoint is hit, type \"Sleep()\" into the watch window and hit enter\r\n\r\n**Observed results**\r\n1. After 5 seconds a dialog appears warning the operation is taking a long time\r\n2. After 10 seconds a dialog appears warning the operation timed out:\r\n\r\n![image](https://github.com/dotnet/runtime/assets/6243776/1fe6e599-9ee1-4b39-a52a-aacfe5e50b76)\r\n\r\n3. I clicked OK and after the dialog disappeared I clicked \u0027Step Over\u0027. VS goes back into run mode.\r\n4. After ~100 seconds the step completes and VS highlights the Sleep() line of code:\r\n![image](https://github.com/dotnet/runtime/assets/6243776/bd057763-21b1-43ba-9b38-6d0d1c90eb97)\r\n5. Continuing to step from there worked quickly and stepping past the end of the Sleep() function caused the app to run to completion.\r\n\r\n**Expected results (Also the observed results when targetting Windows)**\r\n\r\nAfter 5 seconds the watch window updates to say \"Evaluation timed out\" and the yellow arrow again points to the opening curly brace of Main(). Stepping works as expected and immediately advances to the next line.\r\n\r\n\r\n\r\nI did some diagnosis with the stress log and there is pretty good evidence that on Windows the Sleep() function was interrupted as expected but on Linux it was not.\r\n\r\n### Windows stress log excerpt:\r\n\r\n```\r\nSTRESS LOG:\r\n    facilitiesToLog  = 0x82004000\r\n    levelToLog       = 10\r\n    MaxLogSizePerThread = 0x20000 (131072)\r\n    MaxTotalLogSize = 0x2000000 (33554432)\r\n    CurrentTotalLogChunk = 16\r\n    ThreadsWithLogs  = 13\r\n    Clock frequency  = 0.010 GHz\r\n    Start time         15:56:44\r\n    Last message time  15:56:58\r\n    Total elapsed time 13.628 sec\r\n\r\n    \u003clots of messages omitted\u003e\r\n    \r\n    2db0  13.608285200 : `APPDOMAIN`          in Thread::ReadyForAbort  PreparingAbort\r\n\r\n2db0  13.608254200 : `APPDOMAIN`          Thread::HandleThreadAbort throwing abort for 1\r\n\r\n2db0  13.608253400 : `EH`                 TAStackCrawlCallBack: STACKCRAWL method:00007FF9DD3E00C0 (Idle.Program.Main(System.String[])) (\u0027\u003cn/a\u003e\u0027), offset 23, Frame:0000000000000000, FrameVtable = 0000000000000000 (Unknown VTable)\r\n\r\n2db0  13.608250600 : `EH`                 TAStackCrawlCallBack: STACKCRAWL method:00007FF9DD3E00D8 (Idle.Program.Sleep()) (\u0027\u003cn/a\u003e\u0027), offset 29, Frame:0000000000000000, FrameVtable = 0000000000000000 (Unknown VTable)\r\n\r\n2db0  13.608248600 : `EH`                 TAStackCrawlCallBack: STACKCRAWL method:00007FF9DD3B15F0 (System.Threading.Thread.Sleep(Int32)) (\u0027\u003cn/a\u003e\u0027), offset 11, Frame:0000000000000000, FrameVtable = 0000000000000000 (Unknown VTable)\r\n\r\n2db0  13.608242700 : `EH`                 TAStackCrawlCallBack: STACKCRAWL method:00007FF9DD3B1068 (System.Threading.Thread.SleepInternal(Int32)) (\u0027\u003cn/a\u003e\u0027), offset 0, Frame:000000A1E677E1B8, FrameVtable = 00007FFA3D129E38 (coreclr!HelperMethodFrame::`vftable\u0027)\r\n\r\n938c  13.593637800 : `EH`                 TAStackCrawlCallBack: STACKCRAWL method:00007FF9DD3E00C0 (Idle.Program.Main(System.String[])) (\u0027\u003cn/a\u003e\u0027), offset 23, Frame:0000000000000000, FrameVtable = 0000000000000000 (Unknown VTable)\r\n\r\n938c  13.593634600 : `EH`                 TAStackCrawlCallBack: STACKCRAWL method:00007FF9DD3E00D8 (Idle.Program.Sleep()) (\u0027\u003cn/a\u003e\u0027), offset 29, Frame:0000000000000000, FrameVtable = 0000000000000000 (Unknown VTable)\r\n\r\n938c  13.593632900 : `EH`                 TAStackCrawlCallBack: STACKCRAWL method:00007FF9DD3B15F0 (System.Threading.Thread.Sleep(Int32)) (\u0027\u003cn/a\u003e\u0027), offset 11, Frame:0000000000000000, FrameVtable = 0000000000000000 (Unknown VTable)\r\n\r\n938c  13.593629700 : `EH`                 TAStackCrawlCallBack: STACKCRAWL method:00007FF9DD3B1068 (System.Threading.Thread.SleepInternal(Int32)) (\u0027\u003cn/a\u003e\u0027), offset 0, Frame:000000A1E677E1B8, FrameVtable = 00007FFA3D129E38 (coreclr!HelperMethodFrame::`vftable\u0027)\r\n\r\n938c  13.593292800 : `APPDOMAIN`          Mark Thread 000002341BD57780 Thread Id = 1 for abort (type 1)\r\n\r\n938c  13.593273800 : `SYNC`APPDOMAIN`     UserAbort Thread 000002341BD57780 Thread Id = 1\r\n```\r\n\r\n### Linux stress log excerpt\r\n\r\n```\r\nSTRESS LOG:\r\n    facilitiesToLog  = 0x82004000\r\n    levelToLog       = 10\r\n    MaxLogSizePerThread = 0x20000 (131072)\r\n    MaxTotalLogSize = 0x2000000 (33554432)\r\n    CurrentTotalLogChunk = 12\r\n    ThreadsWithLogs  = 9\r\n    Clock frequency  = 1.000 GHz\r\n    Start time             Last message time      Total elapsed time 22.962 sec\r\n    \r\n    THREAD  TIMESTAMP     FACILITY                              MESSAGE\r\n  ID  (sec from start)\r\n--------------------------------------------------------------------------------------\r\n e04  22.961774767 : `STARTUP`            ******* DllMain THREAD_DETACH called Thread dying *******\r\n\r\n da4  21.754708632 : `APPDOMAIN`          Mark Thread 0x55d9ccff98e0 Thread Id = 1 for abort (type 2)\r\n\r\n da4  21.754708132 : `SYNC`APPDOMAIN`     UserAbort Thread 0x55d9ccff98e0 Thread Id = 1\r\n\r\n e05  18.761860847 : `ALWAYS`             SetupThread  managed Thread 0x7f8ff000a1a0 Thread Id = 8\r\n\r\n------------ Last message from thread e05 -----------\r\n e04  18.754119146 : `ALWAYS`             SetupThread  managed Thread 0x7f8fec009d20 Thread Id = 3\r\n\r\n------------ Last message from thread e04 -----------\r\n da4  15.243784346 : `APPDOMAIN`          Mark Thread 0x55d9ccff98e0 Thread Id = 1 for abort (type 1)\r\n\r\n da4  15.243782046 : `SYNC`APPDOMAIN`     UserAbort Thread 0x55d9ccff98e0 Thread Id = 1\r\n```\r\n\r\n### Comparison\r\n\r\nOn Windows we can see the call to \"Mark Thread for Abort\" was quickly followed by Thread::HandleAbort() running inside the thread running Sleep() because the sleep was interrupted. On Linux there is no indication that interrupt occured, after an additional 5 seconds the debugger attempted a rude abort (type 2 abort) which also produced no result.\r\n\r\nBased on the stepping delay observed experimentally the 100 second Sleep() never stopped on Linux, VS just gave up waiting on it to complete when the dialog was displayed. It certainly looks like we\u0027ve got a reproable issue where Sleep() was expected to be interrupted on Linux but wasn\u0027t. Next step would be more investigation of the interrupt mechanism on Linux to determine why it isn\u0027t triggering in this case.\r\n",
                                           "updatedAt":  "2024-05-07T23:51:02Z"
                                       }
                                   ],
                         "totalCount":  26
                     },
        "title":  "[Linux, amd64] ICorDebugEval::Abort are broken.",
        "labels":  [
                       "area-Diagnostics-coreclr",
                       "regression-from-last-release"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/82448",
        "createdAt":  "2023-02-21T20:36:08Z",
        "number":  82448,
        "author":  "hoyosjs",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-05-17T20:42:32Z",
        "body":  "",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOVcl2JQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Vxk-z",
                                           "createdAt":  "2023-02-21T20:36:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nnull\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ehoyosjs\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003ehoyosjs\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-02-21T20:36:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VyXYl",
                                           "createdAt":  "2023-02-22T00:26:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "Pri 2 - Blocks stripping symbols from macOS",
                                           "updatedAt":  "2023-02-22T00:26:29Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Add necessary symbol key information to crash reports",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/82796",
        "createdAt":  "2023-02-28T23:11:46Z",
        "number":  82796,
        "author":  "tommcdon",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-05-17T20:27:20Z",
        "body":  "This issue tracks the creation of a cross-DAC that supports debugging macOS crash dumps on Windows.  ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOXIIVZA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5WXwy2",
                                           "createdAt":  "2023-02-28T23:11:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThis issue tracks the creation of a cross-DAC that supports debugging macOS crash dumps on Windows.  \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003etommcdon\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-02-28T23:11:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cghVk",
                                           "createdAt":  "2023-05-17T20:27:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Moving to Future and will reconsider for .NET 9",
                                           "updatedAt":  "2023-05-17T20:27:20Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Support macOS to Windows OS cross-DAC",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/83145",
        "createdAt":  "2023-03-08T16:01:10Z",
        "number":  83145,
        "author":  "jakobbotsch",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-03-09T12:42:56Z",
        "body":  "When I measure TechEmpower plaintext-mvc using last-branch recording the most common executed range of instructions lies inside `CORINFO_HELP_ASSIGN_REF`. However, perfview is not able to symbolify these addresses (I assume because the runtime plays tricks with it to make it performant).\r\n\r\nWe should consider adding something to help profilers attribute to the write barriers, for example via some ETW event when we create the write barrier.\r\n\r\nThis is the top 10 ranges of instructions executed by plaintext-mvc TechEmpower. Note that these are not branches, but straight-line address ranges the CPU executed.\r\n\r\n1. \r\n```\r\n332994 samples\r\n00007ffde8dd0010 -\u003e 00007ffde8dd0028\r\n```\r\nI tracked this back to `CORINFO_HELP_ASSIGN_REF`.\r\n2.\r\n```\r\n329940 samples\r\n00007ffde8dd002e -\u003e 00007ffde8dd003b\r\n```\r\nFrom the address this looks like the same as above.\r\n3.\r\n```\r\n314371 samples\r\n00007ffde8dd003e -\u003e 00007ffde8dd004b\r\n```\r\nDitto.\r\n4. \r\n```\r\n285279 samples\r\n00007ffde8dd004f -\u003e 00007ffde8dd005b\r\n```\r\nDitto.\r\n5.\r\n```\r\n276541 samples\r\n00007ffde8dd0010 -\u003e 00007ffde8dd002a\r\n```\r\nDitto.\r\n6.\r\n```\r\n114242 samples\r\n[S.P.CoreLib]System.Runtime.CompilerServices.CastHelpers.ChkCastAny(void*,object)+9c (@ 1a) -\u003e [S.P.CoreLib]System.Runtime.CompilerServices.CastHelpers.ChkCastAny(void*,object)+a5 (@ 1a)\r\n```\r\n7.\r\n```\r\n108861 samples\r\n[S.P.CoreLib]System.Runtime.CompilerServices.CastHelpers.ChkCastAny(void*,object)+0 (@ 0) -\u003e [S.P.CoreLib]System.Runtime.CompilerServices.CastHelpers.ChkCastAny(void*,object)+9 (@ 0)\r\n```\r\n8.\r\n```\r\n104840 samples\r\ncoreclr!JIT_CheckedWriteBarrier+18 -\u003e coreclr!JIT_CheckedWriteBarrier+1b\r\n```\r\nThe checked write barrier seems to be attributable as normal.\r\n9.\r\n```\r\n103546 samples\r\n[S.P.CoreLib]System.Runtime.CompilerServices.CastHelpers.IsInstanceOfAny(void*,object)+92 ([S.P.CoreLib]System.Runtime.CompilerServices.CastHelpers.TryGet(native uint,native uint) @ 5a) -\u003e\r\n[S.P.CoreLib]System.Runtime.CompilerServices.CastHelpers.IsInstanceOfAny(void*,object)+97 ([S.P.CoreLib]System.Runtime.CompilerServices.CastHelpers.TryGet(native uint,native uint) @ 64)\r\n```\r\n10.\r\n```\r\n103265 samples\r\n[Microsoft.AspNetCore.Server.Kestrel.Core]Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpParser`1\u003cMicrosoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Http1ParsingHandler\u003e.ParseRequestLine(Http1ParsingHandler,ReadOnlySpan`1\u003cuint8\u003e)+135 (@ 84) -\u003e\r\n[Microsoft.AspNetCore.Server.Kestrel.Core]Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpParser`1\u003cMicrosoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Http1ParsingHandler\u003e.ParseRequestLine(Http1ParsingHandler,ReadOnlySpan`1\u003cuint8\u003e)+13b (@ 88)\r\n```\r\n\r\nThis is how the stacks look in perfview:\r\n![image](https://user-images.githubusercontent.com/7887810/223763939-436a0891-8871-4111-a4d1-22a4126e7d68.png)\r\n\r\nPresumably a large chunk of the unattributed region is the write barrier.\r\n\r\ncc @tommcdon @brianrob ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOVyQ25g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5XDA-B",
                                           "createdAt":  "2023-03-08T16:01:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2023-03-08T16:01:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5XDJgH",
                                           "createdAt":  "2023-03-08T16:17:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWhen I measure TechEmpower plaintext-mvc using last-branch recording the most common executed range of instructions lies inside `CORINFO_HELP_ASSIGN_REF`. However, perfview is not able to symbolify these addresses (I assume because the runtime plays tricks with it to make it performant).\r\n\r\nWe should consider adding something to help profilers attribute to the write barriers, for example via some ETW event when we create the write barrier.\r\n\r\nThis is the top 10 ranges of instructions executed by plaintext-mvc TechEmpower. Note that these are not branches, but straight-line address ranges the CPU executed.\r\n\r\n1. \r\n```\r\n332994 samples\r\n00007ffde8dd0010 -\u003e 00007ffde8dd0028\r\n```\r\nI tracked this back to `CORINFO_HELP_ASSIGN_REF`.\r\n2.\r\n```\r\n329940 samples\r\n00007ffde8dd002e -\u003e 00007ffde8dd003b\r\n```\r\nFrom the address this looks like the same as above.\r\n3.\r\n```\r\n314371 samples\r\n00007ffde8dd003e -\u003e 00007ffde8dd004b\r\n```\r\nDitto.\r\n4. \r\n```\r\n285279 samples\r\n00007ffde8dd004f -\u003e 00007ffde8dd005b\r\n```\r\nDitto.\r\n5.\r\n```\r\n276541 samples\r\n00007ffde8dd0010 -\u003e 00007ffde8dd002a\r\n```\r\nDitto.\r\n6.\r\n```\r\n114242 samples\r\n[S.P.CoreLib]System.Runtime.CompilerServices.CastHelpers.ChkCastAny(void*,object)+9c (@ 1a) -\u003e [S.P.CoreLib]System.Runtime.CompilerServices.CastHelpers.ChkCastAny(void*,object)+a5 (@ 1a)\r\n```\r\n7.\r\n```\r\n108861 samples\r\n[S.P.CoreLib]System.Runtime.CompilerServices.CastHelpers.ChkCastAny(void*,object)+0 (@ 0) -\u003e [S.P.CoreLib]System.Runtime.CompilerServices.CastHelpers.ChkCastAny(void*,object)+9 (@ 0)\r\n```\r\n8.\r\n```\r\n104840 samples\r\ncoreclr!JIT_CheckedWriteBarrier+18 -\u003e coreclr!JIT_CheckedWriteBarrier+1b\r\n```\r\nThe checked write barrier seems to be attributable as normal.\r\n9.\r\n```\r\n103265 samples\r\n[Microsoft.AspNetCore.Server.Kestrel.Core]Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpParser`1\u003cMicrosoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Http1ParsingHandler\u003e.ParseRequestLine(Http1ParsingHandler,ReadOnlySpan`1\u003cuint8\u003e)+135 (@ 84) -\u003e\r\n[Microsoft.AspNetCore.Server.Kestrel.Core]Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpParser`1\u003cMicrosoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Http1ParsingHandler\u003e.ParseRequestLine(Http1ParsingHandler,ReadOnlySpan`1\u003cuint8\u003e)+13b (@ 88)\r\n```\r\n\r\nThis is how the stacks look in perfview:\r\n![image](https://user-images.githubusercontent.com/7887810/223763939-436a0891-8871-4111-a4d1-22a4126e7d68.png)\r\n\r\nPresumably a large chunk of the unattributed region is the write barrier.\r\n\r\ncc @tommcdon @brianrob \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejakobbotsch\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-03-08T16:17:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5XDLIA",
                                           "createdAt":  "2023-03-08T16:22:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC3b6kQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jakobbotsch",
                                                                               "createdAt":  "2023-03-08T16:23:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "janvorli",
                                           "body":  "This is caused by a perfview bug. I have noticed that last year while working on the W^X stuff, created a local fix, but forgotten about it later. I\u0027ll create a PR in the perfview for it.",
                                           "updatedAt":  "2023-03-08T16:22:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5XDOVK",
                                           "createdAt":  "2023-03-08T16:31:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jakobbotsch",
                                           "body":  "In that case we should move this issue to microsoft/perfview, but it doesn\u0027t seem I have rights to do that (or maybe it\u0027s not possible to move issues across orgs?).",
                                           "updatedAt":  "2023-03-08T16:31:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5XJDbm",
                                           "createdAt":  "2023-03-09T12:42:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jakobbotsch",
                                           "body":  "It turns out that the runtime fires the ETW events for this too early for them to make it out. Also, there is no rundown variant for the write barrier stub.\r\nI have been talking with @janvorli and we\u0027re thinking that it might be better to solve it together with #62255 that adds a new keyword for stubs and a new VSDStubCreated event. We could add more events under this keyword to describe the other kinds of stubs/code ranges that the runtime creates outside any module.",
                                           "updatedAt":  "2023-03-09T12:42:55Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "PerfView cannot attribute symbols to write barrier",
        "labels":  [
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/83419",
        "createdAt":  "2023-03-14T19:47:01Z",
        "number":  83419,
        "author":  "MichaelMaio",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-02-06T22:56:10Z",
        "body":  "We’re collecting mini dumps for our .NET Core app as described here: [Collect Dumps on Crash - .NET | Microsoft Learn](https://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Flearn.microsoft.com%2Fen-us%2Fdotnet%2Fcore%2Fdiagnostics%2Fcollect-dumps-crash\u0026data=05%7C01%7Cmichma%40microsoft.com%7C8f58d8e72138419f089208db24bd32f4%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C638144167241836212%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C\u0026sdata=rzzHgDZgKwKx83McwLidiFSVy9MLMacV98utZ8KTKqc%3D\u0026reserved=0). We’re setting DOTNET_DbgMiniDumpName to \u003csome_folder\u003e\\%e.%d.dmp.\r\n \r\nOn Windows, everything works fine. For example, when I crash an app named DotNetCoreConsoleApp.exe, I get a dump named DotNetCoreConsoleApp.exe.\u003cpid\u003e.dmp.\r\n \r\nOn Linux, however, the exe file name (the %e) is getting truncated to 15 characters. For example, I get a dump named DotNetCoreConso.\u003cpid\u003e.dmp.\r\n\r\nI\u0027ve pasted a discussion this below with more information:\r\n\r\nFrom: Juan Sebastian Hoyos Ayala \u003cJuan.Hoyos@microsoft.com\u003e \r\nSent: Tuesday, March 14, 2023 11:52 AM\r\nTo: Michael Maio \u003cmichma@microsoft.com\u003e; Mike McLaughlin \u003cmikem@microsoft.com\u003e; Lee Culver \u003cleculver@microsoft.com\u003e\r\nSubject: RE: exe file name gets truncated in .NET core mini dump name\r\n\r\nOr rather, on the systems that truncate it, it’s 16 chars. There’s other nodes in procfs too, but they lie easily about the proc name.\r\n\r\nFrom: Juan Sebastian Hoyos Ayala \r\nSent: Tuesday, March 14, 2023 11:51 AM\r\nTo: Michael Maio \u003c[michma@microsoft.com](mailto:michma@microsoft.com)\u003e; Mike McLaughlin \u003c[mikem@microsoft.com](mailto:mikem@microsoft.com)\u003e; Lee Culver \u003c[leculver@microsoft.com](mailto:leculver@microsoft.com)\u003e\r\nSubject: RE: exe file name gets truncated in .NET core mini dump name\r\n\r\nSure, feel free to. It’s always truncated to 15 chars (the buffer they use internally is 16 chars).\r\n\r\nFrom: Michael Maio \u003c[michma@microsoft.com](mailto:michma@microsoft.com)\u003e \r\nSent: Tuesday, March 14, 2023 11:42 AM\r\nTo: Juan Sebastian Hoyos Ayala \u003c[Juan.Hoyos@microsoft.com](mailto:Juan.Hoyos@microsoft.com)\u003e; Mike McLaughlin \u003c[mikem@microsoft.com](mailto:mikem@microsoft.com)\u003e; Lee Culver \u003c[leculver@microsoft.com](mailto:leculver@microsoft.com)\u003e\r\nSubject: RE: exe file name gets truncated in .NET core mini dump name\r\n\r\nShould I log a bug on this? If so, where?\r\n\r\nFor now I guess we can work around it by truncating the name of the process when we look for its dump.\r\n\r\nThanks,\r\n\r\nmichma\r\n\r\nFrom: Juan Sebastian Hoyos Ayala \u003c[Juan.Hoyos@microsoft.com](mailto:Juan.Hoyos@microsoft.com)\u003e \r\nSent: Tuesday, March 14, 2023 10:19 AM\r\nTo: Mike McLaughlin \u003c[mikem@microsoft.com](mailto:mikem@microsoft.com)\u003e; Lee Culver \u003c[leculver@microsoft.com](mailto:leculver@microsoft.com)\u003e; Michael Maio \u003c[michma@microsoft.com](mailto:michma@microsoft.com)\u003e\r\nSubject: Re: exe file name gets truncated in .NET core mini dump name\r\n\r\nGiven this has to be out of process, we should try to check for /proc/pod/exe. There\u0027s getauxval(AT_EXECFN), but likely can only be called in proc. There\u0027s also an aux file in proc with a pointer to the string, but that requires a remote read of a string. I feel the exe with fallback to status might be a better idea. \r\n\r\nJuan\r\n________________________________________\r\nFrom: Mike McLaughlin \u003c[mikem@microsoft.com](mailto:mikem@microsoft.com)\u003e\r\nSent: Tuesday, March 14, 2023 9:42:15 AM\r\nTo: Lee Culver \u003c[leculver@microsoft.com](mailto:leculver@microsoft.com)\u003e; Michael Maio \u003c[michma@microsoft.com](mailto:michma@microsoft.com)\u003e\r\nCc: Juan Sebastian Hoyos Ayala \u003c[Juan.Hoyos@microsoft.com](mailto:Juan.Hoyos@microsoft.com)\u003e\r\nSubject: RE: exe file name gets truncated in .NET core mini dump name \r\n \r\nCreatedump gets the app name for %e on Linux from the /proc/\u003cpid\u003e/status file. It parses the “Name: “ field.  The name isn’t truncated by createdump so the limitation is status file’s Name field.  If there is a better way to get the program name, we can change createdump to do that. \r\n \r\nmikem\r\n \r\nFrom: Lee Culver \u003c[leculver@microsoft.com](mailto:leculver@microsoft.com)\u003e \r\nSent: Monday, March 13, 2023 9:25 PM\r\nTo: Michael Maio \u003c[michma@microsoft.com](mailto:michma@microsoft.com)\u003e; Mike McLaughlin \u003c[mikem@microsoft.com](mailto:mikem@microsoft.com)\u003e\r\nSubject: RE: exe file name gets truncated in .NET core mini dump name\r\n \r\nMike was OOF today, I’m sure he’ll respond when he’s back this week.\r\n \r\n-Lee\r\n \r\nFrom: Michael Maio \u003c[michma@microsoft.com](mailto:michma@microsoft.com)\u003e \r\nSent: Monday, March 13, 2023 8:34 PM\r\nTo: Lee Culver \u003c[leculver@microsoft.com](mailto:leculver@microsoft.com)\u003e; Mike McLaughlin \u003c[mikem@microsoft.com](mailto:mikem@microsoft.com)\u003e\r\nSubject: RE: exe file name gets truncated in .NET core mini dump name\r\n \r\n[@Mike McLaughlin](mailto:mikem@microsoft.com), do you know if this is a known issue in .NET core dump generation?\r\n \r\nThanks,\r\n \r\nmichma\r\n \r\nFrom: Lee Culver \u003c[leculver@microsoft.com](mailto:leculver@microsoft.com)\u003e \r\nSent: Saturday, March 11, 2023 9:28 AM\r\nTo: Michael Maio \u003c[michma@microsoft.com](mailto:michma@microsoft.com)\u003e; NET Core Discussion \u003c[netcoredisc@microsoft.com](mailto:netcoredisc@microsoft.com)\u003e; Mike McLaughlin \u003c[mikem@microsoft.com](mailto:mikem@microsoft.com)\u003e\r\nSubject: RE: exe file name gets truncated in .NET core mini dump name\r\n \r\n[@Mike McLaughlin](mailto:mikem@microsoft.com) would be the expert here.\r\n \r\nThanks,\r\n-Lee Culver\r\nCLR Technical Insights \r\n \r\nFrom: Michael Maio \u003c[michma@microsoft.com](mailto:michma@microsoft.com)\u003e \r\nSent: Friday, March 10, 2023 9:01 PM\r\nTo: NET Core Discussion \u003c[netcoredisc@microsoft.com](mailto:netcoredisc@microsoft.com)\u003e\r\nSubject: exe file name gets truncated in .NET core mini dump name\r\n \r\nWe’re collecting mini dumps for our .NET Core app as described here: [Collect Dumps on Crash - .NET | Microsoft Learn](https://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Flearn.microsoft.com%2Fen-us%2Fdotnet%2Fcore%2Fdiagnostics%2Fcollect-dumps-crash\u0026data=05%7C01%7Cmichma%40microsoft.com%7C8f58d8e72138419f089208db24bd32f4%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C638144167241836212%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C\u0026sdata=rzzHgDZgKwKx83McwLidiFSVy9MLMacV98utZ8KTKqc%3D\u0026reserved=0). We’re setting DOTNET_DbgMiniDumpName to \u003csome_folder\u003e\\%e.%d.dmp.\r\n \r\nOn Windows, everything works fine. For example, when I crash an app named DotNetCoreConsoleApp.exe, I get a dump named DotNetCoreConsoleApp.exe.\u003cpid\u003e.dmp.\r\n \r\nOn Linux, however, the exe file name (the %e) is getting truncated to 15 characters. For example, I get a dump named DotNetCoreConso.\u003cpid\u003e.dmp.\r\n \r\nIs this a known bug? Any work-arounds? We’re using .NET Core 7. I haven’t checked if it also repros on Mac yet.\r\n \r\nThanks,\r\n \r\nmichma",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcxdQoA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5XjQFP",
                                           "createdAt":  "2023-03-14T21:18:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWe’re collecting mini dumps for our .NET Core app as described here: [Collect Dumps on Crash - .NET | Microsoft Learn](https://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Flearn.microsoft.com%2Fen-us%2Fdotnet%2Fcore%2Fdiagnostics%2Fcollect-dumps-crash\u0026data=05%7C01%7Cmichma%40microsoft.com%7C8f58d8e72138419f089208db24bd32f4%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C638144167241836212%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C\u0026sdata=rzzHgDZgKwKx83McwLidiFSVy9MLMacV98utZ8KTKqc%3D\u0026reserved=0). We’re setting DOTNET_DbgMiniDumpName to \u003csome_folder\u003e\\%e.%d.dmp.\r\n \r\nOn Windows, everything works fine. For example, when I crash an app named DotNetCoreConsoleApp.exe, I get a dump named DotNetCoreConsoleApp.exe.\u003cpid\u003e.dmp.\r\n \r\nOn Linux, however, the exe file name (the %e) is getting truncated to 15 characters. For example, I get a dump named DotNetCoreConso.\u003cpid\u003e.dmp.\r\n\r\nI\u0027ve pasted a discussion this below with more information:\r\n\r\nFrom: Juan Sebastian Hoyos Ayala \u003cJuan.Hoyos@microsoft.com\u003e \r\nSent: Tuesday, March 14, 2023 11:52 AM\r\nTo: Michael Maio \u003cmichma@microsoft.com\u003e; Mike McLaughlin \u003cmikem@microsoft.com\u003e; Lee Culver \u003cleculver@microsoft.com\u003e\r\nSubject: RE: exe file name gets truncated in .NET core mini dump name\r\n\r\nOr rather, on the systems that truncate it, it’s 16 chars. There’s other nodes in procfs too, but they lie easily about the proc name.\r\n\r\nFrom: Juan Sebastian Hoyos Ayala \r\nSent: Tuesday, March 14, 2023 11:51 AM\r\nTo: Michael Maio \u003c[michma@microsoft.com](mailto:michma@microsoft.com)\u003e; Mike McLaughlin \u003c[mikem@microsoft.com](mailto:mikem@microsoft.com)\u003e; Lee Culver \u003c[leculver@microsoft.com](mailto:leculver@microsoft.com)\u003e\r\nSubject: RE: exe file name gets truncated in .NET core mini dump name\r\n\r\nSure, feel free to. It’s always truncated to 15 chars (the buffer they use internally is 16 chars).\r\n\r\nFrom: Michael Maio \u003c[michma@microsoft.com](mailto:michma@microsoft.com)\u003e \r\nSent: Tuesday, March 14, 2023 11:42 AM\r\nTo: Juan Sebastian Hoyos Ayala \u003c[Juan.Hoyos@microsoft.com](mailto:Juan.Hoyos@microsoft.com)\u003e; Mike McLaughlin \u003c[mikem@microsoft.com](mailto:mikem@microsoft.com)\u003e; Lee Culver \u003c[leculver@microsoft.com](mailto:leculver@microsoft.com)\u003e\r\nSubject: RE: exe file name gets truncated in .NET core mini dump name\r\n\r\nShould I log a bug on this? If so, where?\r\n\r\nFor now I guess we can work around it by truncating the name of the process when we look for its dump.\r\n\r\nThanks,\r\n\r\nmichma\r\n\r\nFrom: Juan Sebastian Hoyos Ayala \u003c[Juan.Hoyos@microsoft.com](mailto:Juan.Hoyos@microsoft.com)\u003e \r\nSent: Tuesday, March 14, 2023 10:19 AM\r\nTo: Mike McLaughlin \u003c[mikem@microsoft.com](mailto:mikem@microsoft.com)\u003e; Lee Culver \u003c[leculver@microsoft.com](mailto:leculver@microsoft.com)\u003e; Michael Maio \u003c[michma@microsoft.com](mailto:michma@microsoft.com)\u003e\r\nSubject: Re: exe file name gets truncated in .NET core mini dump name\r\n\r\nGiven this has to be out of process, we should try to check for /proc/pod/exe. There\u0027s getauxval(AT_EXECFN), but likely can only be called in proc. There\u0027s also an aux file in proc with a pointer to the string, but that requires a remote read of a string. I feel the exe with fallback to status might be a better idea. \r\n\r\nJuan\r\n________________________________________\r\nFrom: Mike McLaughlin \u003c[mikem@microsoft.com](mailto:mikem@microsoft.com)\u003e\r\nSent: Tuesday, March 14, 2023 9:42:15 AM\r\nTo: Lee Culver \u003c[leculver@microsoft.com](mailto:leculver@microsoft.com)\u003e; Michael Maio \u003c[michma@microsoft.com](mailto:michma@microsoft.com)\u003e\r\nCc: Juan Sebastian Hoyos Ayala \u003c[Juan.Hoyos@microsoft.com](mailto:Juan.Hoyos@microsoft.com)\u003e\r\nSubject: RE: exe file name gets truncated in .NET core mini dump name \r\n \r\nCreatedump gets the app name for %e on Linux from the /proc/\u003cpid\u003e/status file. It parses the “Name: “ field.  The name isn’t truncated by createdump so the limitation is status file’s Name field.  If there is a better way to get the program name, we can change createdump to do that. \r\n \r\nmikem\r\n \r\nFrom: Lee Culver \u003c[leculver@microsoft.com](mailto:leculver@microsoft.com)\u003e \r\nSent: Monday, March 13, 2023 9:25 PM\r\nTo: Michael Maio \u003c[michma@microsoft.com](mailto:michma@microsoft.com)\u003e; Mike McLaughlin \u003c[mikem@microsoft.com](mailto:mikem@microsoft.com)\u003e\r\nSubject: RE: exe file name gets truncated in .NET core mini dump name\r\n \r\nMike was OOF today, I’m sure he’ll respond when he’s back this week.\r\n \r\n-Lee\r\n \r\nFrom: Michael Maio \u003c[michma@microsoft.com](mailto:michma@microsoft.com)\u003e \r\nSent: Monday, March 13, 2023 8:34 PM\r\nTo: Lee Culver \u003c[leculver@microsoft.com](mailto:leculver@microsoft.com)\u003e; Mike McLaughlin \u003c[mikem@microsoft.com](mailto:mikem@microsoft.com)\u003e\r\nSubject: RE: exe file name gets truncated in .NET core mini dump name\r\n \r\n[@Mike McLaughlin](mailto:mikem@microsoft.com), do you know if this is a known issue in .NET core dump generation?\r\n \r\nThanks,\r\n \r\nmichma\r\n \r\nFrom: Lee Culver \u003c[leculver@microsoft.com](mailto:leculver@microsoft.com)\u003e \r\nSent: Saturday, March 11, 2023 9:28 AM\r\nTo: Michael Maio \u003c[michma@microsoft.com](mailto:michma@microsoft.com)\u003e; NET Core Discussion \u003c[netcoredisc@microsoft.com](mailto:netcoredisc@microsoft.com)\u003e; Mike McLaughlin \u003c[mikem@microsoft.com](mailto:mikem@microsoft.com)\u003e\r\nSubject: RE: exe file name gets truncated in .NET core mini dump name\r\n \r\n[@Mike McLaughlin](mailto:mikem@microsoft.com) would be the expert here.\r\n \r\nThanks,\r\n-Lee Culver\r\nCLR Technical Insights \r\n \r\nFrom: Michael Maio \u003c[michma@microsoft.com](mailto:michma@microsoft.com)\u003e \r\nSent: Friday, March 10, 2023 9:01 PM\r\nTo: NET Core Discussion \u003c[netcoredisc@microsoft.com](mailto:netcoredisc@microsoft.com)\u003e\r\nSubject: exe file name gets truncated in .NET core mini dump name\r\n \r\nWe’re collecting mini dumps for our .NET Core app as described here: [Collect Dumps on Crash - .NET | Microsoft Learn](https://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Flearn.microsoft.com%2Fen-us%2Fdotnet%2Fcore%2Fdiagnostics%2Fcollect-dumps-crash\u0026data=05%7C01%7Cmichma%40microsoft.com%7C8f58d8e72138419f089208db24bd32f4%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C638144167241836212%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C\u0026sdata=rzzHgDZgKwKx83McwLidiFSVy9MLMacV98utZ8KTKqc%3D\u0026reserved=0). We’re setting DOTNET_DbgMiniDumpName to \u003csome_folder\u003e\\%e.%d.dmp.\r\n \r\nOn Windows, everything works fine. For example, when I crash an app named DotNetCoreConsoleApp.exe, I get a dump named DotNetCoreConsoleApp.exe.\u003cpid\u003e.dmp.\r\n \r\nOn Linux, however, the exe file name (the %e) is getting truncated to 15 characters. For example, I get a dump named DotNetCoreConso.\u003cpid\u003e.dmp.\r\n \r\nIs this a known bug? Any work-arounds? We’re using .NET Core 7. I haven’t checked if it also repros on Mac yet.\r\n \r\nThanks,\r\n \r\nmichma\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMichaelMaio\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`bug`, `area-Diagnostics-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-03-14T21:18:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zF1Cg",
                                           "createdAt":  "2024-02-06T22:56:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "There does not seem to be an actionable fix for this issue due to OS-level limitations.  Moving to Future as a tracking issue.",
                                           "updatedAt":  "2024-02-06T22:56:03Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "exe file name gets truncated in .NET core mini dump name",
        "labels":  [
                       "bug",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/83967",
        "createdAt":  "2023-03-27T10:42:11Z",
        "number":  83967,
        "author":  "viewizard",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-04-09T20:30:50Z",
        "body":  "### Description\r\n\r\nDuring our debugger deep testing with CoreCLR 6.0 on pre-production devices we found issue with `ICorDebugStackWalk` on Linux arm32. In case thread stopped in native frame (top frame is user\u0027s native code, for both, arm code and thumb code), `ICorDebugStackWalk` works wrong (in different way compared to Linux amd64/arm64/x86, and don\u0027t provide registers context info for frames).\r\n\r\n### Reproduction Steps\r\n\r\nWe tested with simple program with 2 parts (managed and native lib), native (on plain C):\r\n```\r\n#include \u003cstdio.h\u003e\r\n#include \u003cunistd.h\u003e \r\nvoid native_method()\r\n{\r\n    printf(\"Native: Start\\n\");\r\n    usleep(5000*1000);\r\n    printf(\"Native: End\\n\");\r\n}\r\n```\r\nmanaged:\r\n```\r\nusing System;\r\nusing System.Runtime.InteropServices;\r\n\r\nnamespace InteropDebuggingTest\r\n{\r\n    class Program\r\n    {\r\n        [DllImport(\"libtest.so\")]\r\n        public static extern void native_method();\r\n\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Managed: Start\");\r\n            native_method();\r\n            Console.WriteLine(\"Managed: End\");\r\n        }\r\n    }\r\n}\r\n```\r\nStart debug session and stop with `ICorDebugController::Stop()` during `usleep()` execution in native part. As you know, CoreCLR don\u0027t really stop native execution in Linux, so, `usleep()` parameter should be large enough for test `ICorDebugStackWalk`.\r\n\r\n### Expected behavior\r\n\r\nWe expect same behavior as we have in Linux amd64/arm64/x86:\r\n1. `ICorDebugStackWalk` received from `ICorDebugThread3::CreateStackWalk()`;\r\n2. First is \"managed\" frame (`ICorDebugStackWalk::GetFrame()` return `S_OK`);\r\n3. `ICorDebugStackWalk::GetContext()` return `S_OK` and proper registers context (at least PC/IP registers);\r\n4. `ICorDebugFrame::QueryInterface()` return `S_OK` at `ICorDebugNativeFrame` request;\r\n...\r\n\r\nFor all `ICorDebugStackWalk::Next()` till `CORDBG_S_AT_END_OF_STACK` return status, all `ICorDebugStackWalk::GetContext()` return proper registers contexts (at least PC/IP registers) for all frames (for both `ICorDebugStackWalk::GetFrame()` returns - \"managed\" with `S_OK` return code, or \"native\" with `S_FALSE` return code); \r\n\r\n### Actual behavior\r\n\r\nCurrent Linux arm32 behavior:\r\n1. `ICorDebugStackWalk` received from `ICorDebugThread3::CreateStackWalk()`;\r\n2. First is \"native\" frame (`ICorDebugStackWalk::GetFrame()` return `S_FALSE`);\r\n3. `ICorDebugStackWalk::GetContext()` return `S_OK` but empty registers context (don\u0027t fill it with proper data);\r\n4. `ICorDebugStackWalk::Next()` return `S_OK` and second is \"managed\" frame (`ICorDebugStackWalk::GetFrame()` return `S_OK`);\r\n5. `ICorDebugStackWalk::GetContext()` return `S_OK` but empty registers context (don\u0027t fill it with proper data);\r\n6. `ICorDebugFrame::QueryInterface()` return `S_OK` at `ICorDebugNativeFrame` request;\r\n...\r\n\r\nFor all `ICorDebugStackWalk::Next()` till `CORDBG_S_AT_END_OF_STACK` return status, all `ICorDebugStackWalk::GetContext()` return `S_OK` but empty registers contexts (don\u0027t fill it with proper data) for all frames (for both `ICorDebugStackWalk::GetFrame()` returns - \"managed\" with `S_OK` return code, or \"native\" with `S_FALSE` return code); \r\n\r\n***No issues with Linux arm32 in case top frame is managed code (stop on breakpoint in managed code) right before pinvoke call or in case native code call delegate. `ICorDebugStackWalk::GetContext()` return proper registers contexts (at least PC/IP registers) for all frames .***\r\n\r\nUnfortunately, I didn\u0027t found any related issues and we don\u0027t able to test CoreCLR upstream on arm32 devices now, I also have no idea what code related to this, so, have no idea is this code was changed from 6.0 to upstream or not (probably, you could help me with this?).\r\nIs the any way we could fix this issue on CoreCLR 6.0 (or you have plans to fix this in 6.0 or upstream)?\r\n\r\nCC @alpencolt @gbalykov ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOWW6ROg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Ygf_O",
                                           "createdAt":  "2023-03-27T10:42:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nDuring our debugger deep testing with CoreCLR 6.0 on pre-production devices we found issue with `ICorDebugStackWalk` on Linux arm32. In case thread stopped in native frame (top frame is user\u0027s native code, for both, arm code and thumb code), `ICorDebugStackWalk` works wrong (in different way compared to Linux amd64/arm64/x86, and don\u0027t provide registers context info for frames).\r\n\r\n### Reproduction Steps\r\n\r\nWe tested with simple program with 2 parts (managed and native lib), native (on plain C):\r\n```\r\n#include \u003cstdio.h\u003e\r\n#include \u003cunistd.h\u003e \r\nvoid native_method()\r\n{\r\n    printf(\"Native: Start\\n\");\r\n    usleep(5000*1000);\r\n    printf(\"Native: End\\n\");\r\n}\r\n```\r\nmanaged:\r\n```\r\nusing System;\r\nusing System.Runtime.InteropServices;\r\n\r\nnamespace InteropDebuggingTest\r\n{\r\n    class Program\r\n    {\r\n        [DllImport(\"libtest.so\")]\r\n        public static extern void native_method();\r\n\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Managed: Start\");\r\n            native_method();\r\n            Console.WriteLine(\"Managed: End\");\r\n        }\r\n    }\r\n}\r\n```\r\nStart debug session and stop with `ICorDebugController::Stop()` during `usleep()` execution in native part. As you know, CoreCLR don\u0027t really stop native execution in Linux, so, `usleep()` parameter should be large enough for test `ICorDebugStackWalk`.\r\n\r\n### Expected behavior\r\n\r\nWe expect same behavior as we have in Linux amd64/arm64/x86:\r\n1. `ICorDebugStackWalk` received from `ICorDebugThread3::CreateStackWalk()`;\r\n2. First is \"managed\" frame (`ICorDebugStackWalk::GetFrame()` return `S_OK`);\r\n3. `ICorDebugStackWalk::GetContext()` return `S_OK` and proper registers context (at least PC/IP registers);\r\n4. `ICorDebugFrame::QueryInterface()` return `S_OK` at `ICorDebugNativeFrame` request;\r\n...\r\n\r\nFor all `ICorDebugStackWalk::Next()` till `CORDBG_S_AT_END_OF_STACK` return status, all `ICorDebugStackWalk::GetContext()` return proper registers contexts (at least PC/IP registers) for all frames (for both `ICorDebugStackWalk::GetFrame()` returns - \"managed\" with `S_OK` return code, or \"native\" with `S_FALSE` return code); \r\n\r\n### Actual behavior\r\n\r\nCurrent Linux arm32 behavior:\r\n1. `ICorDebugStackWalk` received from `ICorDebugThread3::CreateStackWalk()`;\r\n2. First is \"native\" frame (`ICorDebugStackWalk::GetFrame()` return `S_FALSE`);\r\n3. `ICorDebugStackWalk::GetContext()` return `S_OK` but empty registers context (don\u0027t fill it with proper data);\r\n4. `ICorDebugStackWalk::Next()` return `S_OK` and second is \"managed\" frame (`ICorDebugStackWalk::GetFrame()` return `S_OK`);\r\n5. `ICorDebugStackWalk::GetContext()` return `S_OK` but empty registers context (don\u0027t fill it with proper data);\r\n6. `ICorDebugFrame::QueryInterface()` return `S_OK` at `ICorDebugNativeFrame` request;\r\n...\r\n\r\nFor all `ICorDebugStackWalk::Next()` till `CORDBG_S_AT_END_OF_STACK` return status, all `ICorDebugStackWalk::GetContext()` return `S_OK` but empty registers contexts (don\u0027t fill it with proper data) for all frames (for both `ICorDebugStackWalk::GetFrame()` returns - \"managed\" with `S_OK` return code, or \"native\" with `S_FALSE` return code); \r\n\r\n***No issues with Linux arm32 in case top frame is managed code (stop on breakpoint in managed code) right before pinvoke call or in case native code call delegate. `ICorDebugStackWalk::GetContext()` return proper registers contexts (at least PC/IP registers) for all frames .***\r\n\r\nUnfortunately, I didn\u0027t found any related issues and we don\u0027t able to test CoreCLR upstream on arm32 devices now, I also have no idea what code related to this, so, have no idea is this code was changed from 6.0 to upstream or not (probably, you could help me with this?).\r\nIs the any way we could fix this issue on CoreCLR 6.0 (or you have plans to fix this in 6.0 or upstream)?\r\n\r\nCC @alpencolt @gbalykov \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eviewizard\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-03-27T10:42:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YiGZ_",
                                           "createdAt":  "2023-03-27T15:25:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Adding @mikem8361 and @AaronRobinsonMSFT .  Does sos clrstack -i  / clrstack (without -i) reproduce the same issue?",
                                           "updatedAt":  "2023-03-27T15:25:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YiPOn",
                                           "createdAt":  "2023-03-27T15:43:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "viewizard",
                                           "body":  "Here is output for lldb+SOS (bt,  clrstack -i,  clrstack):\r\n```\r\n# lldb -- dotnet ./test_interop.dll\r\n...\r\nProcess 25081 stopped\r\n* thread #1, name = \u0027test_interop.dl\u0027, stop reason = breakpoint 1.1\r\n    frame #0: 0xedef1c78 libtest.so`::native_method(test_delegate=0xf4fc9051) at test.c:51:12\r\n(lldb) bt\r\n* thread #1, name = \u0027test_interop.dl\u0027, stop reason = breakpoint 1.1\r\n  * frame #0: 0xedef1c78 libtest.so`::native_method(test_delegate=0xf4fc9051) at test.c:51:12\r\n    frame #1: 0xeefcf480\r\n    frame #2: 0xf45edd14\r\n(lldb) clrstack -i\r\nDumping managed stack and managed variables using ICorDebug.\r\n=============================================================================\r\nChild SP IP       Call Site\r\nFFF7C1B8 edef1c78 [NativeStackFrame]\r\nFFF7C260 eefcf481 FFF7C264 (null) [Managed to Unmanaged transition: FFF7C264]\r\nFFF7C2B0 f45edd15 [DEFAULT] Void InteropDebuggingTest.Program.Main(SZArray String) (/opt/usr/home/owner/share/tmp/sdk_tools/test_interop.dll)\r\nFFF7C2F0 f6330d83 [NativeStackFrame]\r\nStack walk complete.\r\n=============================================================================\r\n(lldb) clrstack \r\nOS Thread Id: 0x61f9 (1)\r\nChild SP       IP Call Site\r\nFFF7C264 edef1c78 [InlinedCallFrame: fff7c264] \r\nFFF7C264 eefcf480 [InlinedCallFrame: fff7c264] InteropDebuggingTest.Program.native_method(IntPtr)\r\nFFF7C260 EEFCF480 ILStubClass.IL_STUB_PInvoke(IntPtr)\r\nFFF7C2B0 F45EDD14 InteropDebuggingTest.Program.Main(System.String[]) [/home/viewizard/Desktop/projects/netcoredbg/test_interop/Program.cs @ 46]\r\n(lldb) \r\n```",
                                           "updatedAt":  "2023-03-27T15:43:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YiY4L",
                                           "createdAt":  "2023-03-27T16:04:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Thanks @viewizard!  It seems the stack pointer is different (by 4 bytes) and the IP is also off by one.  @mikem8361 ",
                                           "updatedAt":  "2023-03-27T16:04:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZbQJa",
                                           "createdAt":  "2023-04-07T14:00:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gbalykov",
                                           "body":  "@mikem8361 Is there any progress on this?",
                                           "updatedAt":  "2023-04-07T14:00:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZbpE6",
                                           "createdAt":  "2023-04-07T16:03:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikem8361",
                                           "body":  "Sorry, I haven\u0027t had a chance to looking at this.",
                                           "updatedAt":  "2023-04-07T16:03:18Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "[CoreCLR Linux arm32] `ICorDebugStackWalk` works wrong in case top frame is native.",
        "labels":  [
                       "bug",
                       "arch-arm32",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/84087",
        "createdAt":  "2023-03-29T19:19:13Z",
        "number":  84087,
        "author":  "tannergooding",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-07T12:45:28Z",
        "body":  "As part of adding AVX512 and EVEX support, we need to ensure the new registers are supported where required. Outside the places we\u0027ve already handled, we need to double check the following additional locations...\r\n\r\nA few locations are already being handled in https://github.com/dotnet/runtime/pull/84088\r\n\r\nVarious debugger related files. `src/coreclr/inc/cvconst.h` in particular looks to be copy/paste from a file that ships with VS:\r\n```\r\nsrc/coreclr/debug/di/amd64/cordbregisterset.cpp:53:            |   SETBITULONG64( REGISTER_AMD64_XMM15 );\r\nsrc/coreclr/debug/di/amd64/cordbregisterset.cpp:83:                    |   SETBITULONG64( REGISTER_AMD64_XMM15 ) ) )\r\nsrc/coreclr/debug/di/amd64/cordbregisterset.cpp:128:        ; i\u003c=REGISTER_AMD64_XMM15 \u0026\u0026 iRegister \u003c regCount\r\nsrc/coreclr/debug/di/amd64/cordbregisterset.cpp:185:            case    REGISTER_AMD64_XMM15:\r\nsrc/coreclr/debug/di/rsthread.cpp:6787:    if ((reg \u003e= REGISTER_AMD64_XMM0) \u0026\u0026 (reg \u003c= REGISTER_AMD64_XMM15))\r\nsrc/coreclr/debug/di/rsthread.cpp:7034:          (index \u003c= REGISTER_AMD64_XMM15)))\r\nsrc/coreclr/debug/di/shimstackwalk.cpp:21:static const ULONG32 REGISTER_AMD64_MAX = REGISTER_AMD64_XMM15 + 1;\r\nsrc/coreclr/debug/ee/funceval.cpp:385:        case REGISTER_AMD64_XMM15:\r\nsrc/coreclr/debug/ee/funceval.cpp:601:        case REGISTER_AMD64_XMM15:\r\nsrc/coreclr/debug/inc/dbgtargetcontext.h:267:            DT_M128A Xmm15;\r\nsrc/coreclr/debug/shared/amd64/primitives.cpp:64:        // Xmm0-Xmm15\r\nsrc/coreclr/debug/shared/amd64/primitives.cpp:65:        CopyContextChunk(\u0026(pDst-\u003eXmm0), \u0026(pSrc-\u003eXmm0), \u0026(pDst-\u003eXmm15) + 1,\r\nsrc/coreclr/inc/cordebug.idl:3783:        REGISTER_AMD64_XMM15,\r\nsrc/coreclr/inc/cvconst.h:3190:    CV_AMD64_XMM15    =  259,\r\nsrc/coreclr/inc/cvconst.h:3220:    CV_AMD64_XMM15_0  =  288,\r\nsrc/coreclr/inc/cvconst.h:3221:    CV_AMD64_XMM15_1  =  289,\r\nsrc/coreclr/inc/cvconst.h:3222:    CV_AMD64_XMM15_2  =  290,\r\nsrc/coreclr/inc/cvconst.h:3223:    CV_AMD64_XMM15_3  =  291,\r\nsrc/coreclr/inc/cvconst.h:3232:    CV_AMD64_XMM15L   =  299,\r\nsrc/coreclr/inc/cvconst.h:3241:    CV_AMD64_XMM15H   =  307,\r\nsrc/coreclr/inc/cvconst.h:3368:    CV_AMD64_XMM15IL    = 415,\r\nsrc/coreclr/inc/cvconst.h:3385:    CV_AMD64_XMM15IH    = 431,\r\n```\r\n\r\nVarious NAOT related places (CC. @MichalStrehovsky):\r\n```\r\nsrc/coreclr/nativeaot/Runtime/PalRedhawk.h:207:            Fp128 Xmm15;\r\nsrc/coreclr/nativeaot/Runtime/PalRedhawkCommon.h:135:    Fp128       Xmm15;\r\nsrc/coreclr/nativeaot/Runtime/amd64/AsmOffsetsCpu.h:57:PLAT_ASM_OFFSET(0f0, PAL_LIMITED_CONTEXT, Xmm15)\r\nsrc/coreclr/nativeaot/Runtime/amd64/ExceptionHandling.asm:68:        save_xmm128_postrsp     Xmm15, rsp_offsetof_Context + OFFSETOF__PAL_LIMITED_CONTEXT__Xmm15\r\nsrc/coreclr/nativeaot/Runtime/amd64/ExceptionHandling.asm:151:        save_xmm128_postrsp     Xmm15, rsp_offsetof_Context + OFFSETOF__PAL_LIMITED_CONTEXT__Xmm15\r\nsrc/coreclr/nativeaot/Runtime/amd64/ExceptionHandling.asm:245:        save_xmm128_postrsp     Xmm15, rsp_offsetof_Context + OFFSETOF__PAL_LIMITED_CONTEXT__Xmm15\r\nsrc/coreclr/nativeaot/Runtime/amd64/ExceptionHandling.asm:294:    xmm_save_area_size = 10 * 10h ;; xmm6..xmm15 save area\r\nsrc/coreclr/nativeaot/Runtime/amd64/ExceptionHandling.asm:310:    save_xmm128_postrsp xmm15, (arguments_scratch_area_size + 9 * 10h)\r\nsrc/coreclr/nativeaot/Runtime/amd64/ExceptionHandling.asm:328:    movdqa  xmm15, [rsp + arguments_scratch_area_size + 9 * 10h]\r\nsrc/coreclr/nativeaot/Runtime/amd64/ExceptionHandling.asm:425:        movdqa  xmm15,[r8 + OFFSETOF__REGDISPLAY__Xmm + 9*10h]\r\nsrc/coreclr/nativeaot/Runtime/amd64/ExceptionHandling.asm:578:        movdqa  xmm15,[rdx + OFFSETOF__REGDISPLAY__Xmm + 9*10h]\r\nsrc/coreclr/nativeaot/Runtime/amd64/ExceptionHandling.asm:635:        movdqa  [rdx + OFFSETOF__REGDISPLAY__Xmm + 9*10h], xmm15\r\nsrc/coreclr/nativeaot/Runtime/inc/gcinfo.h:913:        // any subset of xmm6-xmm15 may be saved, but no registers in xmm0-xmm5 should be present\r\nsrc/coreclr/nativeaot/Runtime/regdisplay.h:35:    Fp128          Xmm[16-6]; // preserved xmm6..xmm15 regs for EH stackwalk\r\n```\r\n\r\nVarious PAL and VM locations (cc. @jkotas):\r\n```\r\nsrc/coreclr/pal/inc/pal.h:1666:            M128A Xmm15;\r\nsrc/coreclr/pal/inc/pal.h:1787:            PM128A Xmm15;\r\nsrc/coreclr/pal/prebuilt/inc/cordebug.h:9079:        REGISTER_AMD64_XMM15       = ( REGISTER_AMD64_XMM14 + 1 ) ,\r\nsrc/coreclr/pal/src/arch/amd64/asmconstants.h:80:#define CONTEXT_Xmm15 CONTEXT_Xmm14+16\r\n\r\nsrc/coreclr/vm/amd64/AsmHelpers.asm:308:        save_xmm128_frame   xmm15, rbp, OFFSETOF__CONTEXT__Xmm15\r\nsrc/coreclr/vm/amd64/AsmHelpers.asm:380:        movdqa          xmm15, [rbp+OFFSETOF__CONTEXT__Xmm15]\r\nsrc/coreclr/vm/amd64/asmconstants.h:440:#define               OFFSETOF__CONTEXT__Xmm15        (8*6 + 4*2 + 2*6 + 4 + 8*6 + 8*16 + 8 + 2*16 + 8*16 + 16*15)\r\nsrc/coreclr/vm/amd64/asmconstants.h:441:ASMCONSTANTS_C_ASSERT(OFFSETOF__CONTEXT__Xmm15\r\nsrc/coreclr/vm/amd64/asmconstants.h:442:                    == offsetof(CONTEXT, Xmm15));\r\nsrc/coreclr/vm/i386/stublinkerx86.h:78:    kXMM15 = 15,\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOWMNjsQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Ywvpx",
                                           "createdAt":  "2023-03-29T19:21:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "@jkotas, for the VM/PAL locations it looks like the main things are `KNONVOLATILE_CONTEXT_POINTERS` in `pal.h`, `DebugCheckStubUnwindInfo` in `AsmHelpers.h`, and the general `stublinkerx86` support.\r\n\r\nAre there any special considerations for these?",
                                           "updatedAt":  "2023-03-29T19:21:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YwwCD",
                                           "createdAt":  "2023-03-29T19:22:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "@MichalStrehovsky, same general question about the NAOT scenarios. Are there any special considerations required for the hookups here? It looks like most of this is handling related to exceptions.",
                                           "updatedAt":  "2023-03-29T19:22:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ywxtb",
                                           "createdAt":  "2023-03-29T19:28:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC40ptw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tannergooding",
                                                                               "createdAt":  "2023-03-29T19:28:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "BruceForstall",
                                           "body":  "cc @tommcdon ",
                                           "updatedAt":  "2023-03-29T19:28:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Yw1rG",
                                           "createdAt":  "2023-03-29T19:41:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC40ttg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tannergooding",
                                                                               "createdAt":  "2023-03-29T19:43:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "I do not see anything that needs to be updated in vm or under native aot. The new registers are volatile, on both Windows and non-Windows, and so they do not need to be stored/restored for EH.\r\n\r\nThe only part that needs updating is debugger, assuming we want the values to be stored in these registers to be inspectable.",
                                           "updatedAt":  "2023-03-29T19:41:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Yw1t7",
                                           "createdAt":  "2023-03-29T19:41:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nAs part of adding AVX512 and EVEX support, we need to ensure the new registers are supported where required. Outside the places we\u0027ve already handled, we need to double check the following additional locations...\r\n\r\nA few locations are already being handled in https://github.com/dotnet/runtime/pull/84088\r\n\r\nVarious debugger related files. `src/coreclr/inc/cvconst.h` in particular looks to be copy/paste from a file that ships with VS:\r\n```\r\nsrc/coreclr/debug/di/amd64/cordbregisterset.cpp:53:            |   SETBITULONG64( REGISTER_AMD64_XMM15 );\r\nsrc/coreclr/debug/di/amd64/cordbregisterset.cpp:83:                    |   SETBITULONG64( REGISTER_AMD64_XMM15 ) ) )\r\nsrc/coreclr/debug/di/amd64/cordbregisterset.cpp:128:        ; i\u003c=REGISTER_AMD64_XMM15 \u0026\u0026 iRegister \u003c regCount\r\nsrc/coreclr/debug/di/amd64/cordbregisterset.cpp:185:            case    REGISTER_AMD64_XMM15:\r\nsrc/coreclr/debug/di/rsthread.cpp:6787:    if ((reg \u003e= REGISTER_AMD64_XMM0) \u0026\u0026 (reg \u003c= REGISTER_AMD64_XMM15))\r\nsrc/coreclr/debug/di/rsthread.cpp:7034:          (index \u003c= REGISTER_AMD64_XMM15)))\r\nsrc/coreclr/debug/di/shimstackwalk.cpp:21:static const ULONG32 REGISTER_AMD64_MAX = REGISTER_AMD64_XMM15 + 1;\r\nsrc/coreclr/debug/ee/funceval.cpp:385:        case REGISTER_AMD64_XMM15:\r\nsrc/coreclr/debug/ee/funceval.cpp:601:        case REGISTER_AMD64_XMM15:\r\nsrc/coreclr/debug/inc/dbgtargetcontext.h:267:            DT_M128A Xmm15;\r\nsrc/coreclr/debug/shared/amd64/primitives.cpp:64:        // Xmm0-Xmm15\r\nsrc/coreclr/debug/shared/amd64/primitives.cpp:65:        CopyContextChunk(\u0026(pDst-\u003eXmm0), \u0026(pSrc-\u003eXmm0), \u0026(pDst-\u003eXmm15) + 1,\r\nsrc/coreclr/inc/cordebug.idl:3783:        REGISTER_AMD64_XMM15,\r\nsrc/coreclr/inc/cvconst.h:3190:    CV_AMD64_XMM15    =  259,\r\nsrc/coreclr/inc/cvconst.h:3220:    CV_AMD64_XMM15_0  =  288,\r\nsrc/coreclr/inc/cvconst.h:3221:    CV_AMD64_XMM15_1  =  289,\r\nsrc/coreclr/inc/cvconst.h:3222:    CV_AMD64_XMM15_2  =  290,\r\nsrc/coreclr/inc/cvconst.h:3223:    CV_AMD64_XMM15_3  =  291,\r\nsrc/coreclr/inc/cvconst.h:3232:    CV_AMD64_XMM15L   =  299,\r\nsrc/coreclr/inc/cvconst.h:3241:    CV_AMD64_XMM15H   =  307,\r\nsrc/coreclr/inc/cvconst.h:3368:    CV_AMD64_XMM15IL    = 415,\r\nsrc/coreclr/inc/cvconst.h:3385:    CV_AMD64_XMM15IH    = 431,\r\n```\r\n\r\nVarious NAOT related places (CC. @MichalStrehovsky):\r\n```\r\nsrc/coreclr/nativeaot/Runtime/PalRedhawk.h:207:            Fp128 Xmm15;\r\nsrc/coreclr/nativeaot/Runtime/PalRedhawkCommon.h:135:    Fp128       Xmm15;\r\nsrc/coreclr/nativeaot/Runtime/amd64/AsmOffsetsCpu.h:57:PLAT_ASM_OFFSET(0f0, PAL_LIMITED_CONTEXT, Xmm15)\r\nsrc/coreclr/nativeaot/Runtime/amd64/ExceptionHandling.asm:68:        save_xmm128_postrsp     Xmm15, rsp_offsetof_Context + OFFSETOF__PAL_LIMITED_CONTEXT__Xmm15\r\nsrc/coreclr/nativeaot/Runtime/amd64/ExceptionHandling.asm:151:        save_xmm128_postrsp     Xmm15, rsp_offsetof_Context + OFFSETOF__PAL_LIMITED_CONTEXT__Xmm15\r\nsrc/coreclr/nativeaot/Runtime/amd64/ExceptionHandling.asm:245:        save_xmm128_postrsp     Xmm15, rsp_offsetof_Context + OFFSETOF__PAL_LIMITED_CONTEXT__Xmm15\r\nsrc/coreclr/nativeaot/Runtime/amd64/ExceptionHandling.asm:294:    xmm_save_area_size = 10 * 10h ;; xmm6..xmm15 save area\r\nsrc/coreclr/nativeaot/Runtime/amd64/ExceptionHandling.asm:310:    save_xmm128_postrsp xmm15, (arguments_scratch_area_size + 9 * 10h)\r\nsrc/coreclr/nativeaot/Runtime/amd64/ExceptionHandling.asm:328:    movdqa  xmm15, [rsp + arguments_scratch_area_size + 9 * 10h]\r\nsrc/coreclr/nativeaot/Runtime/amd64/ExceptionHandling.asm:425:        movdqa  xmm15,[r8 + OFFSETOF__REGDISPLAY__Xmm + 9*10h]\r\nsrc/coreclr/nativeaot/Runtime/amd64/ExceptionHandling.asm:578:        movdqa  xmm15,[rdx + OFFSETOF__REGDISPLAY__Xmm + 9*10h]\r\nsrc/coreclr/nativeaot/Runtime/amd64/ExceptionHandling.asm:635:        movdqa  [rdx + OFFSETOF__REGDISPLAY__Xmm + 9*10h], xmm15\r\nsrc/coreclr/nativeaot/Runtime/inc/gcinfo.h:913:        // any subset of xmm6-xmm15 may be saved, but no registers in xmm0-xmm5 should be present\r\nsrc/coreclr/nativeaot/Runtime/regdisplay.h:35:    Fp128          Xmm[16-6]; // preserved xmm6..xmm15 regs for EH stackwalk\r\n```\r\n\r\nVarious PAL and VM locations (cc. @jkotas):\r\n```\r\nsrc/coreclr/pal/inc/pal.h:1666:            M128A Xmm15;\r\nsrc/coreclr/pal/inc/pal.h:1787:            PM128A Xmm15;\r\nsrc/coreclr/pal/prebuilt/inc/cordebug.h:9079:        REGISTER_AMD64_XMM15       = ( REGISTER_AMD64_XMM14 + 1 ) ,\r\nsrc/coreclr/pal/src/arch/amd64/asmconstants.h:80:#define CONTEXT_Xmm15 CONTEXT_Xmm14+16\r\n\r\nsrc/coreclr/vm/amd64/AsmHelpers.asm:308:        save_xmm128_frame   xmm15, rbp, OFFSETOF__CONTEXT__Xmm15\r\nsrc/coreclr/vm/amd64/AsmHelpers.asm:380:        movdqa          xmm15, [rbp+OFFSETOF__CONTEXT__Xmm15]\r\nsrc/coreclr/vm/amd64/asmconstants.h:440:#define               OFFSETOF__CONTEXT__Xmm15        (8*6 + 4*2 + 2*6 + 4 + 8*6 + 8*16 + 8 + 2*16 + 8*16 + 16*15)\r\nsrc/coreclr/vm/amd64/asmconstants.h:441:ASMCONSTANTS_C_ASSERT(OFFSETOF__CONTEXT__Xmm15\r\nsrc/coreclr/vm/amd64/asmconstants.h:442:                    == offsetof(CONTEXT, Xmm15));\r\nsrc/coreclr/vm/i386/stublinkerx86.h:78:    kXMM15 = 15,\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003etannergooding\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`, `arch-avx512`, `needs-area-label`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-03-29T19:41:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Yw2Ox",
                                           "createdAt":  "2023-03-29T19:43:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Thanks for the confirmation @jkotas. That greatly simplifies things overall",
                                           "updatedAt":  "2023-03-29T19:43:42Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Ensure XMM16-XMM31 and K0-K7 are handled where appropriate",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr",
                       "avx512"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/84514",
        "createdAt":  "2023-04-08T07:30:35Z",
        "number":  84514,
        "author":  "CXuesong",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCvW-5Q==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "kyoyama-kazusa",
                                            "createdAt":  "2023-04-08T09:50:26Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-04-10T22:21:00Z",
        "body":  "### Description\n\nI\u0027m not sure whether this a general issue, but if you declare a `fixed` `float` array in a structure, while the runtime behavior is correct, it shows incorrect values in the VS debugger.\r\n\r\nVia https://twitter.com/neuecc/status/1643807528986513409\n\n### Reproduction Steps\n\nCode snippet\r\n\r\n```c#\r\n\r\nvar v = new Vec3(10.1f, 999.9f, 42.3f);\r\nConsole.WriteLine(v);    // \u003c-- breakpoint here\r\n\r\nunsafe struct Vec3\r\n{\r\n\r\n    public fixed float mF32[4];\r\n\r\n    public Vec3(float x, float y, float z)\r\n    {\r\n        mF32[0] = x;\r\n        mF32[1] = y;\r\n        mF32[2] = z;\r\n    }\r\n\r\n    public float X =\u003e mF32[0];\r\n\r\n    public float Y =\u003e mF32[1];\r\n\r\n    public float Z =\u003e mF32[2];\r\n\r\n    /// \u003cinheritdoc /\u003e\r\n    public override string ToString()\r\n        =\u003e $\"{X}, {Y}, {Z}\";\r\n\r\n}\r\n```\n\n### Expected behavior\n\nConsole output\r\n```\r\n10.1, 999.9, 42.3\r\n```\r\n\r\nIf I set up breakpoint on the `WriteLine` statement, I should see `v` is `{10.1, 999.9, 42.3}` in \"Locals\" / \"Watch\" window.\r\n\n\n### Actual behavior\n\nConsole output (correct)\r\n```\r\n10.1, 999.9, 42.3\r\n```\r\n\r\n\"Locals\" window\r\n![image](https://user-images.githubusercontent.com/11611687/230709014-cb9dc584-779a-4ec1-bdd3-36acf7de4142.png)\r\n\r\n\"Watch\" window\r\n![image](https://user-images.githubusercontent.com/11611687/230709048-60f52ae2-7c38-43ec-8f6e-c4d36f42cfb2.png)\r\n\r\nInterestingly, the values of `v.Y` and `v.Z` are shown correctly only if it\u0027s directly added to the \"Watch\" window.\r\n\n\n### Regression?\n\nSeems not a regression. It reproduces on .NET Framework 4.8.\r\n\n\n### Known Workarounds\n\nReferencing the expressions `v.Y` \u0026 `v.Z` directly in the \"Watch\" window yields the correct value.\r\n\n\n### Configuration\n\n* .NET SDK 6.0.14 / 8.0.0-alpha.1.23080.2\r\n    * Any CPU (x64 runtime)\r\n* Visual Studio 17.6.0 Preview 2.0\r\n\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOWYztSg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5ZdWD_",
                                           "createdAt":  "2023-04-08T10:48:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nI\u0027m not sure whether this a general issue, but if you declare a `fixed` `float` array in a structure, while the runtime behavior is correct, it shows incorrect values in the VS debugger.\r\n\r\nVia https://twitter.com/neuecc/status/1643807528986513409\n\n### Reproduction Steps\n\nCode snippet\r\n\r\n```c#\r\n\r\nvar v = new Vec3(10.1f, 999.9f, 42.3f);\r\nConsole.WriteLine(v);    // \u003c-- breakpoint here\r\n\r\nunsafe struct Vec3\r\n{\r\n\r\n    public fixed float mF32[4];\r\n\r\n    public Vec3(float x, float y, float z)\r\n    {\r\n        mF32[0] = x;\r\n        mF32[1] = y;\r\n        mF32[2] = z;\r\n    }\r\n\r\n    public float X =\u003e mF32[0];\r\n\r\n    public float Y =\u003e mF32[1];\r\n\r\n    public float Z =\u003e mF32[2];\r\n\r\n    /// \u003cinheritdoc /\u003e\r\n    public override string ToString()\r\n        =\u003e $\"{X}, {Y}, {Z}\";\r\n\r\n}\r\n```\n\n### Expected behavior\n\nConsole output\r\n```\r\n10.1, 999.9, 42.3\r\n```\r\n\r\nIf I set up breakpoint on the `WriteLine` statement, I should see `v` is `{10.1, 999.9, 42.3}` in \"Locals\" / \"Watch\" window.\r\n\n\n### Actual behavior\n\nConsole output (correct)\r\n```\r\n10.1, 999.9, 42.3\r\n```\r\n\r\n\"Locals\" window\r\n![image](https://user-images.githubusercontent.com/11611687/230709014-cb9dc584-779a-4ec1-bdd3-36acf7de4142.png)\r\n\r\n\"Watch\" window\r\n![image](https://user-images.githubusercontent.com/11611687/230709048-60f52ae2-7c38-43ec-8f6e-c4d36f42cfb2.png)\r\n\r\nInterestingly, the values of `v.Y` and `v.Z` are shown correctly only if it\u0027s directly added to the \"Watch\" window.\r\n\n\n### Regression?\n\nSeems not a regression. It reproduces on .NET Framework 4.8.\r\n\n\n### Known Workarounds\n\nReferencing the expressions `v.Y` \u0026 `v.Z` directly in the \"Watch\" window yields the correct value.\r\n\n\n### Configuration\n\n* .NET SDK 6.0.14 / 8.0.0-alpha.1.23080.2\r\n    * Any CPU (x64 runtime)\r\n* Visual Studio 17.6.0 Preview 2.0\r\n\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eCXuesong\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`, `needs-area-label`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-04-08T10:48:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZjO1K",
                                           "createdAt":  "2023-04-10T22:20:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "This being tracked on Visual Studio bug 1762156.  Please feel free to open a Visual Studio feedback item https://learn.microsoft.com/visualstudio/ide/how-to-report-a-problem-with-visual-studio?view=vs-2022 to track the issue.",
                                           "updatedAt":  "2023-04-10T22:20:45Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Fixed array in structures shows incorrect values in VS debugger",
        "labels":  [
                       "tracking-external-issue",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/85777",
        "createdAt":  "2023-05-04T16:20:10Z",
        "number":  85777,
        "author":  "kevingosse",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODAwazQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "andrewlock",
                                            "createdAt":  "2025-04-02T09:12:34Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-05-15T21:15:29Z",
        "body":  "### Description\r\n\r\nI caught a crash in our CI, caused by a segmentation fault with the following callstack:\r\n\r\n```\r\n#0  __cp_end () at src/thread/x86_64/syscall_cp.s:29\r\n#1  0x00007f504217c6d0 in __syscall_cp_c (nr=61, u=\u003coptimized out\u003e, v=\u003coptimized out\u003e, w=\u003coptimized out\u003e,\r\n    x=\u003coptimized out\u003e, y=\u003coptimized out\u003e, z=0) at src/thread/pthread_cancel.c:33\r\n#2  0x00007f504216995f in waitpid (pid=\u003coptimized out\u003e, status=\u003coptimized out\u003e, options=\u003coptimized out\u003e)\r\n    at src/process/waitpid.c:6\r\n#3  0x00007f5041c4fb40 in PROCCreateCrashDump (argv=...) at /__w/1/s/src/coreclr/pal/src/thread/process.cpp:3276\r\n#4  PROCCreateCrashDumpIfEnabled (signal=\u003coptimized out\u003e, siginfo=\u003coptimized out\u003e)\r\n    at /__w/1/s/src/coreclr/pal/src/thread/process.cpp:3463\r\n#5  0x00007f5041c19d8b in invoke_previous_action (action=\u003coptimized out\u003e, code=11, siginfo=0x7f503c9e7bf0,\r\n    context=0x7f503c9e7ac0, signalRestarts=\u003coptimized out\u003e) at /__w/1/s/src/coreclr/pal/src/exception/signal.cpp:404\r\n#6  0x00007f5041c194c7 in sigsegv_handler (code=11, siginfo=0x7f503c9e7bf0, context=0x7f503c9e7ac0)\r\n    at /__w/1/s/src/coreclr/pal/src/exception/signal.cpp:611\r\n#7  \u003csignal handler called\u003e\r\n#8  0x00007f5041b9c809 in CMiniMdTemplate\u003cCMiniMdRW\u003e::getSignatureOfMemberRef (this=0x7f503b3330a0,\r\n    pRec=0x7f503b2b27f8, ppbData=0x7f503c5b04a8, pcbSize=0x7f503c5b04a4)\r\n    at /__w/1/s/src/coreclr/md/inc/metamodel.h:1819\r\n#9  MDInternalRW::GetNameAndSigOfMemberRef (this=0x7f503b38ea50, memberref=\u003coptimized out\u003e, ppvSigBlob=0x7f503c5b04a8,\r\n    pcbSigBlob=0x7f503c5b04a4, pszMemberRefName=0x7f503c5b04b0) at /__w/1/s/src/coreclr/md/enc/mdinternalrw.cpp:2689\r\n#10 0x00007f504186f265 in MemberLoader::GetMethodDescFromMemberRefAndType (pModule=0x7f4fc973a4e8,\r\n    MemberRef=167773358, pMT=0x7f4fc9c5e880) at /__w/1/s/src/coreclr/vm/memberload.cpp:463\r\n#11 0x00007f50418eedf2 in ZapSig::DecodeMethod (pInfoModule=0x7f4fc973a4e8, pBuffer=\u003coptimized out\u003e,\r\n    pContext=0x7f503c5b05f8, pZapSigContext=0x7f503c5b05e0, ppTH=0x0, ppOwnerTypeSpecWithVars=\u003coptimized out\u003e,\r\n    ppMethodSpecWithVars=0x0, ppAfterSig=0x0, actualOwnerRequired=0) at /__w/1/s/src/coreclr/vm/zapsig.cpp:879\r\n#12 0x00007f50418eeb6d in ZapSig::DecodeMethod (pReferencingModule=\u003coptimized out\u003e, pInfoModule=\u003coptimized out\u003e,\r\n    pBuffer=0xffff \u003cerror: Cannot access memory at address 0xffff\u003e, ppTH=0x7f503c5b04b0)\r\n    at /__w/1/s/src/coreclr/vm/zapsig.cpp:788\r\n#13 0x00007f50418a44e4 in ExternalMethodFixupWorker (pTransitionBlock=\u003coptimized out\u003e, pIndirection=139980660887848,\r\n    sectionIndex=\u003coptimized out\u003e, pModule=0x7f4fc973a4e8) at /__w/1/s/src/coreclr/vm/prestub.cpp:2621\r\n#14 0x00007f5041ac2772 in DelayLoad_MethodCall () at /__w/1/s/src/coreclr/pal/inc/unixasmmacrosamd64.inc:807\r\n```\r\n\r\nThis callstack is on top of a managed callstack:\r\n```\r\nSystem.Net.Http.HttpConnectionPool.ConnectToTcpHostAsync(System.String, Int32, System.Net.Http.HttpRequestMessage, Boolean, System.Threading.CancellationToken)\r\nSystem.Net.Http.HttpConnectionPool+d__97.MoveNext() [/_/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs @ 1352]\r\nSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[System.Net.Http.HttpConnectionPool+d__97, System.Net.Http]](d__97 ByRef) [/_/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncMethodBuilderCore.cs @ 38]\r\nSystem.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1[[System.ValueTuple`3[[System.__Canon, System.Private.CoreLib],[System.__Canon, System.Private.CoreLib],[System.__Canon, System.Private.CoreLib]], System.Private.CoreLib]].Start[[System.Net.Http.HttpConnectionPool+d__97, System.Net.Http]](d__97 ByRef) [/_/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncValueTaskMethodBuilderT.cs @ 36]\r\nSystem.Net.Http.HttpConnectionPool.ConnectAsync(System.Net.Http.HttpRequestMessage, Boolean, System.Threading.CancellationToken)\r\nSystem.Net.Http.HttpConnectionPool+d__99.MoveNext()\r\nSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[System.Net.Http.HttpConnectionPool+d__99, System.Net.Http]](d__99 ByRef) [/_/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncMethodBuilderCore.cs @ 38]\r\nSystem.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[System.Net.Http.HttpConnectionPool+d__99, System.Net.Http]](d__99 ByRef) [/_/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncValueTaskMethodBuilderT.cs @ 36]\r\nSystem.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(System.Net.Http.HttpRequestMessage, Boolean, System.Threading.CancellationToken)\r\nSystem.Net.Http.HttpConnectionPool+d__74.MoveNext() [/_/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs @ 462]\r\nSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[System.Net.Http.HttpConnectionPool+d__74, System.Net.Http]](d__74 ByRef) [/_/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncMethodBuilderCore.cs @ 38]\r\nSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[System.Net.Http.HttpConnectionPool+d__74, System.Net.Http]](d__74 ByRef) [/_/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncTaskMethodBuilder.cs @ 33]\r\nSystem.Net.Http.HttpConnectionPool.AddHttp11ConnectionAsync(System.Net.Http.HttpRequestMessage)\r\nSystem.Net.Http.HttpConnectionPool+c__DisplayClass75_0.b__0() [/_/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs @ 504]\r\nSystem.Threading.Tasks.Task`1[[System.__Canon, System.Private.CoreLib]].InnerInvoke() [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Future.cs @ 503]\r\nSystem.Threading.Tasks.Task+c.\u003c.cctor\u003eb__272_0(System.Object) [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2375]\r\nSystem.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(System.Threading.Thread, System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object) [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs @ 268]\r\nSystem.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef, System.Threading.Thread) [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2337]\r\nSystem.Threading.Tasks.Task.ExecuteEntryUnsafe(System.Threading.Thread) [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2271]\r\nSystem.Threading.Tasks.Task.ExecuteFromThreadPool(System.Threading.Thread) [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2262]\r\nSystem.Threading.ThreadPoolWorkQueue.Dispatch()\r\nSystem.Threading.PortableThreadPool+WorkerThread.WorkerThreadStart() [/_/src/libraries/System.Private.CoreLib/src/System/Threading/PortableThreadPool.WorkerThread.cs @ 63]\r\nSystem.Threading.Thread.StartCallback() [/_/src/coreclr/System.Private.CoreLib/src/System/Threading/Thread.CoreCLR.cs @ 105]\r\n```\r\n\r\nI\u0027m still trying to figure out what I can from the coredump. The application is running with a profiler so it could be some weird interaction with the profiler API.\r\nHowever, regardless of the root cause, I believe there is room for improvement in `CMiniMdTemplate\u003cCMiniMdRW\u003e::getSignatureOfMemberRef`. It\u0027s implemented with the `_GETSIGBLOB` macro, [which expands to](https://github.com/dotnet/runtime/blob/main/src/coreclr/md/inc/metamodel.h#L358):\r\n\r\n```\r\n#define _GETSIGBLOB(tbl,fld) __checkReturn HRESULT _GETTER3(tbl,fld,PCCOR_SIGNATURE *ppbData,ULONG *pcbSize)  \\\r\n{                                                                                       \\\r\n    MetaData::DataBlob data;                                                            \\\r\n    HRESULT hr = getBlob(getI4(pRec, _COLDEF(tbl,fld)) \u0026 m_iBlobsMask, \u0026data);          \\\r\n    *ppbData = (PCCOR_SIGNATURE)data.GetDataPointer();                                  \\\r\n    *pcbSize = (ULONG)data.GetSize();                                                   \\\r\n    return hr;                                                                          \\\r\n}\r\n```\r\n\r\nHowever in `getBlob`, the returned pointer is set to null if the index is invalid. Shouldn\u0027t `_GETSIGBLOB` check the value of `hr` before accessing `data.GetDataPointer()` and `data.GetSize()`? This would at least fix the segfault.\r\n\r\n### Reproduction Steps\r\n\r\n-\r\n\r\n### Expected behavior\r\n\r\nNo crash. Possibly an error.\r\n\r\n### Actual behavior\r\n\r\nSegmentation fault\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n.NET 6.0.16\r\nLinux Alpine 3.14\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOffj4JQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5bfr4e",
                                           "createdAt":  "2023-05-04T16:20:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nI caught a crash in the CI, caused by a segmentation fault with the following callstack:\r\n\r\n```\r\n#0  __cp_end () at src/thread/x86_64/syscall_cp.s:29\r\n#1  0x00007f504217c6d0 in __syscall_cp_c (nr=61, u=\u003coptimized out\u003e, v=\u003coptimized out\u003e, w=\u003coptimized out\u003e,\r\n    x=\u003coptimized out\u003e, y=\u003coptimized out\u003e, z=0) at src/thread/pthread_cancel.c:33\r\n#2  0x00007f504216995f in waitpid (pid=\u003coptimized out\u003e, status=\u003coptimized out\u003e, options=\u003coptimized out\u003e)\r\n    at src/process/waitpid.c:6\r\n#3  0x00007f5041c4fb40 in PROCCreateCrashDump (argv=...) at /__w/1/s/src/coreclr/pal/src/thread/process.cpp:3276\r\n#4  PROCCreateCrashDumpIfEnabled (signal=\u003coptimized out\u003e, siginfo=\u003coptimized out\u003e)\r\n    at /__w/1/s/src/coreclr/pal/src/thread/process.cpp:3463\r\n#5  0x00007f5041c19d8b in invoke_previous_action (action=\u003coptimized out\u003e, code=11, siginfo=0x7f503c9e7bf0,\r\n    context=0x7f503c9e7ac0, signalRestarts=\u003coptimized out\u003e) at /__w/1/s/src/coreclr/pal/src/exception/signal.cpp:404\r\n#6  0x00007f5041c194c7 in sigsegv_handler (code=11, siginfo=0x7f503c9e7bf0, context=0x7f503c9e7ac0)\r\n    at /__w/1/s/src/coreclr/pal/src/exception/signal.cpp:611\r\n#7  \u003csignal handler called\u003e\r\n#8  0x00007f5041b9c809 in CMiniMdTemplate\u003cCMiniMdRW\u003e::getSignatureOfMemberRef (this=0x7f503b3330a0,\r\n    pRec=0x7f503b2b27f8, ppbData=0x7f503c5b04a8, pcbSize=0x7f503c5b04a4)\r\n    at /__w/1/s/src/coreclr/md/inc/metamodel.h:1819\r\n#9  MDInternalRW::GetNameAndSigOfMemberRef (this=0x7f503b38ea50, memberref=\u003coptimized out\u003e, ppvSigBlob=0x7f503c5b04a8,\r\n    pcbSigBlob=0x7f503c5b04a4, pszMemberRefName=0x7f503c5b04b0) at /__w/1/s/src/coreclr/md/enc/mdinternalrw.cpp:2689\r\n#10 0x00007f504186f265 in MemberLoader::GetMethodDescFromMemberRefAndType (pModule=0x7f4fc973a4e8,\r\n    MemberRef=167773358, pMT=0x7f4fc9c5e880) at /__w/1/s/src/coreclr/vm/memberload.cpp:463\r\n#11 0x00007f50418eedf2 in ZapSig::DecodeMethod (pInfoModule=0x7f4fc973a4e8, pBuffer=\u003coptimized out\u003e,\r\n    pContext=0x7f503c5b05f8, pZapSigContext=0x7f503c5b05e0, ppTH=0x0, ppOwnerTypeSpecWithVars=\u003coptimized out\u003e,\r\n    ppMethodSpecWithVars=0x0, ppAfterSig=0x0, actualOwnerRequired=0) at /__w/1/s/src/coreclr/vm/zapsig.cpp:879\r\n#12 0x00007f50418eeb6d in ZapSig::DecodeMethod (pReferencingModule=\u003coptimized out\u003e, pInfoModule=\u003coptimized out\u003e,\r\n    pBuffer=0xffff \u003cerror: Cannot access memory at address 0xffff\u003e, ppTH=0x7f503c5b04b0)\r\n    at /__w/1/s/src/coreclr/vm/zapsig.cpp:788\r\n#13 0x00007f50418a44e4 in ExternalMethodFixupWorker (pTransitionBlock=\u003coptimized out\u003e, pIndirection=139980660887848,\r\n    sectionIndex=\u003coptimized out\u003e, pModule=0x7f4fc973a4e8) at /__w/1/s/src/coreclr/vm/prestub.cpp:2621\r\n#14 0x00007f5041ac2772 in DelayLoad_MethodCall () at /__w/1/s/src/coreclr/pal/inc/unixasmmacrosamd64.inc:807\r\n```\r\n\r\nThis callstack is on top of a managed callstack:\r\n```\r\nSystem.Net.Http.HttpConnectionPool.ConnectToTcpHostAsync(System.String, Int32, System.Net.Http.HttpRequestMessage, Boolean, System.Threading.CancellationToken)\r\nSystem.Net.Http.HttpConnectionPool+d__97.MoveNext() [/_/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs @ 1352]\r\nSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[System.Net.Http.HttpConnectionPool+d__97, System.Net.Http]](d__97 ByRef) [/_/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncMethodBuilderCore.cs @ 38]\r\nSystem.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1[[System.ValueTuple`3[[System.__Canon, System.Private.CoreLib],[System.__Canon, System.Private.CoreLib],[System.__Canon, System.Private.CoreLib]], System.Private.CoreLib]].Start[[System.Net.Http.HttpConnectionPool+d__97, System.Net.Http]](d__97 ByRef) [/_/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncValueTaskMethodBuilderT.cs @ 36]\r\nSystem.Net.Http.HttpConnectionPool.ConnectAsync(System.Net.Http.HttpRequestMessage, Boolean, System.Threading.CancellationToken)\r\nSystem.Net.Http.HttpConnectionPool+d__99.MoveNext()\r\nSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[System.Net.Http.HttpConnectionPool+d__99, System.Net.Http]](d__99 ByRef) [/_/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncMethodBuilderCore.cs @ 38]\r\nSystem.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[System.Net.Http.HttpConnectionPool+d__99, System.Net.Http]](d__99 ByRef) [/_/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncValueTaskMethodBuilderT.cs @ 36]\r\nSystem.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(System.Net.Http.HttpRequestMessage, Boolean, System.Threading.CancellationToken)\r\nSystem.Net.Http.HttpConnectionPool+d__74.MoveNext() [/_/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs @ 462]\r\nSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[System.Net.Http.HttpConnectionPool+d__74, System.Net.Http]](d__74 ByRef) [/_/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncMethodBuilderCore.cs @ 38]\r\nSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[System.Net.Http.HttpConnectionPool+d__74, System.Net.Http]](d__74 ByRef) [/_/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncTaskMethodBuilder.cs @ 33]\r\nSystem.Net.Http.HttpConnectionPool.AddHttp11ConnectionAsync(System.Net.Http.HttpRequestMessage)\r\nSystem.Net.Http.HttpConnectionPool+c__DisplayClass75_0.b__0() [/_/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs @ 504]\r\nSystem.Threading.Tasks.Task`1[[System.__Canon, System.Private.CoreLib]].InnerInvoke() [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Future.cs @ 503]\r\nSystem.Threading.Tasks.Task+c.\u003c.cctor\u003eb__272_0(System.Object) [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2375]\r\nSystem.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(System.Threading.Thread, System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object) [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs @ 268]\r\nSystem.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef, System.Threading.Thread) [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2337]\r\nSystem.Threading.Tasks.Task.ExecuteEntryUnsafe(System.Threading.Thread) [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2271]\r\nSystem.Threading.Tasks.Task.ExecuteFromThreadPool(System.Threading.Thread) [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2262]\r\nSystem.Threading.ThreadPoolWorkQueue.Dispatch()\r\nSystem.Threading.PortableThreadPool+WorkerThread.WorkerThreadStart() [/_/src/libraries/System.Private.CoreLib/src/System/Threading/PortableThreadPool.WorkerThread.cs @ 63]\r\nSystem.Threading.Thread.StartCallback() [/_/src/coreclr/System.Private.CoreLib/src/System/Threading/Thread.CoreCLR.cs @ 105]\r\n```\r\n\r\nI\u0027m still trying to figure out what I can from the coredump. The application is running with a profiler so it could be some weird interaction with the profiler API.\r\nHowever, regardless of the root cause, I believe there is room for improvement in `CMiniMdTemplate\u003cCMiniMdRW\u003e::getSignatureOfMemberRef`. It\u0027s implemented with the `_GETSIGBLOB` macro, [which expands to](https://github.com/dotnet/runtime/blob/main/src/coreclr/md/inc/metamodel.h#L358):\r\n\r\n```\r\n#define _GETSIGBLOB(tbl,fld) __checkReturn HRESULT _GETTER3(tbl,fld,PCCOR_SIGNATURE *ppbData,ULONG *pcbSize)  \\\r\n{                                                                                       \\\r\n    MetaData::DataBlob data;                                                            \\\r\n    HRESULT hr = getBlob(getI4(pRec, _COLDEF(tbl,fld)) \u0026 m_iBlobsMask, \u0026data);          \\\r\n    *ppbData = (PCCOR_SIGNATURE)data.GetDataPointer();                                  \\\r\n    *pcbSize = (ULONG)data.GetSize();                                                   \\\r\n    return hr;                                                                          \\\r\n}\r\n```\r\n\r\nHowever in `getBlob`, the returned pointer is set to null if the index is invalid. Shouldn\u0027t `_GETSIGBLOB` check the value of `hr` before accessing `data.GetDataPointer()` and `data.GetSize()`. This would at least fix the segfault.\n\n### Reproduction Steps\n\n-\n\n### Expected behavior\n\nNo crash. Possibly an error.\n\n### Actual behavior\n\nSegmentation fault\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET 6.0.16\r\nLinux Alpine 3.14\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ekevingosse\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net.Http`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-05-04T16:20:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bgMUZ",
                                           "createdAt":  "2023-05-04T17:42:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nI caught a crash in our CI, caused by a segmentation fault with the following callstack:\r\n\r\n```\r\n#0  __cp_end () at src/thread/x86_64/syscall_cp.s:29\r\n#1  0x00007f504217c6d0 in __syscall_cp_c (nr=61, u=\u003coptimized out\u003e, v=\u003coptimized out\u003e, w=\u003coptimized out\u003e,\r\n    x=\u003coptimized out\u003e, y=\u003coptimized out\u003e, z=0) at src/thread/pthread_cancel.c:33\r\n#2  0x00007f504216995f in waitpid (pid=\u003coptimized out\u003e, status=\u003coptimized out\u003e, options=\u003coptimized out\u003e)\r\n    at src/process/waitpid.c:6\r\n#3  0x00007f5041c4fb40 in PROCCreateCrashDump (argv=...) at /__w/1/s/src/coreclr/pal/src/thread/process.cpp:3276\r\n#4  PROCCreateCrashDumpIfEnabled (signal=\u003coptimized out\u003e, siginfo=\u003coptimized out\u003e)\r\n    at /__w/1/s/src/coreclr/pal/src/thread/process.cpp:3463\r\n#5  0x00007f5041c19d8b in invoke_previous_action (action=\u003coptimized out\u003e, code=11, siginfo=0x7f503c9e7bf0,\r\n    context=0x7f503c9e7ac0, signalRestarts=\u003coptimized out\u003e) at /__w/1/s/src/coreclr/pal/src/exception/signal.cpp:404\r\n#6  0x00007f5041c194c7 in sigsegv_handler (code=11, siginfo=0x7f503c9e7bf0, context=0x7f503c9e7ac0)\r\n    at /__w/1/s/src/coreclr/pal/src/exception/signal.cpp:611\r\n#7  \u003csignal handler called\u003e\r\n#8  0x00007f5041b9c809 in CMiniMdTemplate\u003cCMiniMdRW\u003e::getSignatureOfMemberRef (this=0x7f503b3330a0,\r\n    pRec=0x7f503b2b27f8, ppbData=0x7f503c5b04a8, pcbSize=0x7f503c5b04a4)\r\n    at /__w/1/s/src/coreclr/md/inc/metamodel.h:1819\r\n#9  MDInternalRW::GetNameAndSigOfMemberRef (this=0x7f503b38ea50, memberref=\u003coptimized out\u003e, ppvSigBlob=0x7f503c5b04a8,\r\n    pcbSigBlob=0x7f503c5b04a4, pszMemberRefName=0x7f503c5b04b0) at /__w/1/s/src/coreclr/md/enc/mdinternalrw.cpp:2689\r\n#10 0x00007f504186f265 in MemberLoader::GetMethodDescFromMemberRefAndType (pModule=0x7f4fc973a4e8,\r\n    MemberRef=167773358, pMT=0x7f4fc9c5e880) at /__w/1/s/src/coreclr/vm/memberload.cpp:463\r\n#11 0x00007f50418eedf2 in ZapSig::DecodeMethod (pInfoModule=0x7f4fc973a4e8, pBuffer=\u003coptimized out\u003e,\r\n    pContext=0x7f503c5b05f8, pZapSigContext=0x7f503c5b05e0, ppTH=0x0, ppOwnerTypeSpecWithVars=\u003coptimized out\u003e,\r\n    ppMethodSpecWithVars=0x0, ppAfterSig=0x0, actualOwnerRequired=0) at /__w/1/s/src/coreclr/vm/zapsig.cpp:879\r\n#12 0x00007f50418eeb6d in ZapSig::DecodeMethod (pReferencingModule=\u003coptimized out\u003e, pInfoModule=\u003coptimized out\u003e,\r\n    pBuffer=0xffff \u003cerror: Cannot access memory at address 0xffff\u003e, ppTH=0x7f503c5b04b0)\r\n    at /__w/1/s/src/coreclr/vm/zapsig.cpp:788\r\n#13 0x00007f50418a44e4 in ExternalMethodFixupWorker (pTransitionBlock=\u003coptimized out\u003e, pIndirection=139980660887848,\r\n    sectionIndex=\u003coptimized out\u003e, pModule=0x7f4fc973a4e8) at /__w/1/s/src/coreclr/vm/prestub.cpp:2621\r\n#14 0x00007f5041ac2772 in DelayLoad_MethodCall () at /__w/1/s/src/coreclr/pal/inc/unixasmmacrosamd64.inc:807\r\n```\r\n\r\nThis callstack is on top of a managed callstack:\r\n```\r\nSystem.Net.Http.HttpConnectionPool.ConnectToTcpHostAsync(System.String, Int32, System.Net.Http.HttpRequestMessage, Boolean, System.Threading.CancellationToken)\r\nSystem.Net.Http.HttpConnectionPool+d__97.MoveNext() [/_/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs @ 1352]\r\nSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[System.Net.Http.HttpConnectionPool+d__97, System.Net.Http]](d__97 ByRef) [/_/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncMethodBuilderCore.cs @ 38]\r\nSystem.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1[[System.ValueTuple`3[[System.__Canon, System.Private.CoreLib],[System.__Canon, System.Private.CoreLib],[System.__Canon, System.Private.CoreLib]], System.Private.CoreLib]].Start[[System.Net.Http.HttpConnectionPool+d__97, System.Net.Http]](d__97 ByRef) [/_/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncValueTaskMethodBuilderT.cs @ 36]\r\nSystem.Net.Http.HttpConnectionPool.ConnectAsync(System.Net.Http.HttpRequestMessage, Boolean, System.Threading.CancellationToken)\r\nSystem.Net.Http.HttpConnectionPool+d__99.MoveNext()\r\nSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[System.Net.Http.HttpConnectionPool+d__99, System.Net.Http]](d__99 ByRef) [/_/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncMethodBuilderCore.cs @ 38]\r\nSystem.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[System.Net.Http.HttpConnectionPool+d__99, System.Net.Http]](d__99 ByRef) [/_/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncValueTaskMethodBuilderT.cs @ 36]\r\nSystem.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(System.Net.Http.HttpRequestMessage, Boolean, System.Threading.CancellationToken)\r\nSystem.Net.Http.HttpConnectionPool+d__74.MoveNext() [/_/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs @ 462]\r\nSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[System.Net.Http.HttpConnectionPool+d__74, System.Net.Http]](d__74 ByRef) [/_/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncMethodBuilderCore.cs @ 38]\r\nSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[System.Net.Http.HttpConnectionPool+d__74, System.Net.Http]](d__74 ByRef) [/_/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncTaskMethodBuilder.cs @ 33]\r\nSystem.Net.Http.HttpConnectionPool.AddHttp11ConnectionAsync(System.Net.Http.HttpRequestMessage)\r\nSystem.Net.Http.HttpConnectionPool+c__DisplayClass75_0.b__0() [/_/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs @ 504]\r\nSystem.Threading.Tasks.Task`1[[System.__Canon, System.Private.CoreLib]].InnerInvoke() [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Future.cs @ 503]\r\nSystem.Threading.Tasks.Task+c.\u003c.cctor\u003eb__272_0(System.Object) [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2375]\r\nSystem.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(System.Threading.Thread, System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object) [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs @ 268]\r\nSystem.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef, System.Threading.Thread) [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2337]\r\nSystem.Threading.Tasks.Task.ExecuteEntryUnsafe(System.Threading.Thread) [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2271]\r\nSystem.Threading.Tasks.Task.ExecuteFromThreadPool(System.Threading.Thread) [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 2262]\r\nSystem.Threading.ThreadPoolWorkQueue.Dispatch()\r\nSystem.Threading.PortableThreadPool+WorkerThread.WorkerThreadStart() [/_/src/libraries/System.Private.CoreLib/src/System/Threading/PortableThreadPool.WorkerThread.cs @ 63]\r\nSystem.Threading.Thread.StartCallback() [/_/src/coreclr/System.Private.CoreLib/src/System/Threading/Thread.CoreCLR.cs @ 105]\r\n```\r\n\r\nI\u0027m still trying to figure out what I can from the coredump. The application is running with a profiler so it could be some weird interaction with the profiler API.\r\nHowever, regardless of the root cause, I believe there is room for improvement in `CMiniMdTemplate\u003cCMiniMdRW\u003e::getSignatureOfMemberRef`. It\u0027s implemented with the `_GETSIGBLOB` macro, [which expands to](https://github.com/dotnet/runtime/blob/main/src/coreclr/md/inc/metamodel.h#L358):\r\n\r\n```\r\n#define _GETSIGBLOB(tbl,fld) __checkReturn HRESULT _GETTER3(tbl,fld,PCCOR_SIGNATURE *ppbData,ULONG *pcbSize)  \\\r\n{                                                                                       \\\r\n    MetaData::DataBlob data;                                                            \\\r\n    HRESULT hr = getBlob(getI4(pRec, _COLDEF(tbl,fld)) \u0026 m_iBlobsMask, \u0026data);          \\\r\n    *ppbData = (PCCOR_SIGNATURE)data.GetDataPointer();                                  \\\r\n    *pcbSize = (ULONG)data.GetSize();                                                   \\\r\n    return hr;                                                                          \\\r\n}\r\n```\r\n\r\nHowever in `getBlob`, the returned pointer is set to null if the index is invalid. Shouldn\u0027t `_GETSIGBLOB` check the value of `hr` before accessing `data.GetDataPointer()` and `data.GetSize()`? This would at least fix the segfault.\r\n\r\n### Reproduction Steps\r\n\r\n-\r\n\r\n### Expected behavior\r\n\r\nNo crash. Possibly an error.\r\n\r\n### Actual behavior\r\n\r\nSegmentation fault\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n.NET 6.0.16\r\nLinux Alpine 3.14\r\n\r\n### Other information\r\n\r\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ekevingosse\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-05-04T17:42:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bgMXm",
                                           "createdAt":  "2023-05-04T17:42:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC7Iprw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkoritzinsky",
                                                                               "createdAt":  "2023-05-04T20:55:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e The application is running with a profiler so it could be some weird interaction with the profiler API.",
                                           "updatedAt":  "2023-05-04T17:42:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bkvrz",
                                           "createdAt":  "2023-05-05T14:36:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@davmason ",
                                           "updatedAt":  "2023-05-05T14:36:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cnFHJ",
                                           "createdAt":  "2023-05-18T22:41:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "\u003e However in getBlob, the returned pointer is set to null if the index is invalid. Shouldn\u0027t _GETSIGBLOB check the value of hr before accessing data.GetDataPointer() and data.GetSize()? This would at least fix the segfault.\r\n\r\n@kevingosse it looks like `data` can never be null because it is stack allocated.  We took a look at the GetDataPointer and GetSize functions and they seem to only return field offsets within the struct.  Based off of this, I am guessing that we are already doing a reasonable amount of error checking and that the crash is due to some memory corruption issue (perhaps caused by the profiler?).  Do you have any concerns with closing this issue?",
                                           "updatedAt":  "2023-05-18T22:41:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cph7x",
                                           "createdAt":  "2023-05-19T10:50:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kevingosse",
                                           "body":  "You\u0027re absolutely right, sorry, I did a poor job at analyzing this.\r\n\r\nI went back to it and here are my new findings:\r\n\r\nThe segfault happens during the execution of the `and     esi,dword ptr [rax+rcx]` instruction:\r\n\r\n```\r\nlibcoreclr!CMiniMdTemplate\u003cCMiniMdRW\u003e::getSignatureOfMemberRef+0x12 [/__w/1/s/src/coreclr/md/enc/mdinternalrw.cpp @ 2689] [inlined in libcoreclr!MDInternalRW::GetNameAndSigOfMemberRef+0x83 [/__w/1/s/src/coreclr/md/enc/mdinternalrw.cpp @ 2689]]:\r\n00007f50`41b9c803 8bb7b8030000    mov     esi,dword ptr [rdi+3B8h]\r\n00007f50`41b9c809 233408          and     esi,dword ptr [rax+rcx]\r\n00007f50`41b9c80c 4881c7d8160000  add     rdi,16D8h\r\n00007f50`41b9c813 488d55c8        lea     rdx,[rbp-38h]\r\n00007f50`41b9c817 e86436f3ff      call    libcoreclr!StgBlobPool::GetBlob (00007f50`41acfe80)\r\n```\r\n\r\nIt\u0027s a bit hard to locate exactly where in the function it is because things are inlined, but `dword ptr [rdi+3B8h]` is `0xffffffff` which is one of the expected values of `m_iBlobsMask`. Therefore I believe this instruction fetches `m_iBlobsMask` and stores it in the `esi` register. Then it\u0027s going to `and` it with `dword ptr [rax+rcx]`, triggering the crash. Therefore I believe `dword ptr [rax+rcx]` is `getI4(pRec, m_TableDefs[TBL_MemberRef].m_pColDefs[MemberRefRec::COL_Signature])`.\r\n\r\nAccording to gdb, at this point in time, `rax` is equal to the address of `pRec`. `rcx` is equal to 0x6.\r\n\r\nI tried inspecting the value of `pRec` but gdb tells me `Cannot access memory at address 0x7f503b2b27f8`. So it seems safe to conclude that the segmentation fault is caused by `pRec` pointing to an invalid zone of memory.\r\n\r\nNow the question is: why? I checked the parent function (`MDInternalRW::GetNameAndSigOfMemberRef`) and there is this ominous comment: \r\n```\r\n    // MemberRef\u0027s name and sig won\u0027t change. Don\u0027t need to lock this.\r\n```\r\nDo you think this assertion could somehow be false when running with a profiler? To me it feels like the address `pMemberRefRec` was freed somewhere between those two lines:\r\n\r\n```\r\n    IfFailRet(m_pStgdb-\u003em_MiniMd.GetMemberRefRecord(RidFromToken(memberref), \u0026pMemberRefRec));\r\n    if (ppvSigBlob != NULL)\r\n    {\r\n        IfFailRet(m_pStgdb-\u003em_MiniMd.getSignatureOfMemberRef(pMemberRefRec, ppvSigBlob, pcbSigBlob));\r\n    }\r\n```\r\nFor instance, could it be that the underlying record table was resized from another thread, because the profiler is adding new fields to the type at the same time? I\u0027m not familiar with the metadata storage so I don\u0027t know if it makes sense.",
                                           "updatedAt":  "2023-05-19T10:50:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cqVej",
                                           "createdAt":  "2023-05-19T13:48:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "\u003e     // MemberRef\u0027s name and sig won\u0027t change. Don\u0027t need to lock this.\n\u003e Do you think this assertion could somehow be false when running with a profiler? \n\n@davmason @noahfalk ",
                                           "updatedAt":  "2023-05-19T13:48:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ctdxl",
                                           "createdAt":  "2023-05-20T01:53:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "\u003e Do you think this assertion could somehow be false when running with a profiler?\r\n\r\nI don\u0027t think it would be false by-design at least. Being false due to an unintended bug is always possible.\r\n\r\n\u003e To me it feels like the address pMemberRefRec was freed somewhere between those two lines:\r\n\r\nI\u0027ve haven\u0027t dug in deeply (and I wasn\u0027t planning to, I am assuming David is on point), but my first guess would be that pMemberRefRec was already a bad pointer when it was returned from GetMemberRefRecord(). The underlying storage should be a linked list of memory blocks and new memory blocks are added if the table needs to grow. I think once data is written to a block it stays there until the entire metadata object is disposed of. The code should be here:\r\nhttps://github.com/dotnet/runtime/blob/4dd7e877d9b799943f2e8a5b2001c626c7d22105/src/coreclr/md/inc/recordpool.h#L23\r\nhttps://github.com/dotnet/runtime/blob/4dd7e877d9b799943f2e8a5b2001c626c7d22105/src/coreclr/md/runtime/recordpool.cpp\r\nhttps://github.com/dotnet/runtime/blob/4dd7e877d9b799943f2e8a5b2001c626c7d22105/src/coreclr/inc/stgpool.h\r\nhttps://github.com/dotnet/runtime/blob/4dd7e877d9b799943f2e8a5b2001c626c7d22105/src/coreclr/utilcode/stgpool.cpp",
                                           "updatedAt":  "2023-05-20T01:53:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5e_1fC",
                                           "createdAt":  "2023-06-15T22:15:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davmason",
                                           "body":  "@kevingosse I have been assuming you would continue investigating but reading back through it\u0027s not clear. Let me know if you need action on my part.",
                                           "updatedAt":  "2023-06-15T22:15:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fFv02",
                                           "createdAt":  "2023-06-16T21:37:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC-LzlQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2023-06-16T21:43:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "kevingosse",
                                           "body":  "@davmason So far it has happened only once (in the CI) and it looks like it would take a lot of effort to get to the bottom of it, so I\u0027m going to close the issue for now. I\u0027ll re-open if it happens again.",
                                           "updatedAt":  "2023-06-16T21:37:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5faEkV",
                                           "createdAt":  "2023-06-21T11:32:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kevingosse",
                                           "body":  "For information I just had another occurrence of a segfault in the metadata system.\r\n\r\n```\r\n#0  __cp_end () at src/thread/x86_64/syscall_cp.s:29\r\n#1  0x00007fd5e64af6d0 in __syscall_cp_c (nr=61, u=\u003coptimized out\u003e, v=\u003coptimized out\u003e, w=\u003coptimized out\u003e,\r\n    x=\u003coptimized out\u003e, y=\u003coptimized out\u003e, z=0) at src/thread/pthread_cancel.c:33\r\n#2  0x00007fd5e649c95f in waitpid (pid=\u003coptimized out\u003e, status=\u003coptimized out\u003e, options=\u003coptimized out\u003e)\r\n    at src/process/waitpid.c:6\r\n#3  0x00007fd5e59dcb58 in PROCCreateCrashDump (argv=\u003coptimized out\u003e) at /__w/1/s/src/pal/src/thread/process.cpp:3346\r\n#4  PROCCreateCrashDumpIfEnabled () at /__w/1/s/src/pal/src/thread/process.cpp:3462\r\n#5  0x00007fd5e59a4f06 in invoke_previous_action (code=\u003coptimized out\u003e, siginfo=\u003coptimized out\u003e,\r\n    context=\u003coptimized out\u003e, signalRestarts=true, action=\u003coptimized out\u003e)\r\n    at /__w/1/s/src/pal/src/exception/signal.cpp:304\r\n#6  sigsegv_handler (code=11, siginfo=0x7fd54da5fbf0, context=0x7fd54da5fac0)\r\n    at /__w/1/s/src/pal/src/exception/signal.cpp:501\r\n#7  \u003csignal handler called\u003e\r\n#8  0x00007fd5e594fb7c in CMiniMdTemplate\u003cCMiniMdRW\u003e::getNameOfMethod (this=0x7fd54d069200, pRec=\u003coptimized out\u003e,\r\n    pszString=\u003coptimized out\u003e) at /__w/1/s/src/md/inc/metamodel.h:1792\r\n#9  MDInternalRW::GetNameOfMethodDef (this=0x7fd54d077460, md=\u003coptimized out\u003e, pszMethodName=0x7fd54ceb0648)\r\n    at /__w/1/s/src/md/enc/mdinternalrw.cpp:2187\r\n#10 0x00007fd5e562fcf1 in MethodDesc::GetName (this=0x7fd56c96def8) at /__w/1/s/src/vm/method.cpp:279\r\n#11 0x00007fd5e562d650 in MemberLoader::FindMethod (pMT=\u003coptimized out\u003e, pszName=0x7fd54ebe58b5 \"OrderBy\",\r\n    pSignature=0x7fd54e9db8bb \"\\020\\002\\002\\025\\022\\211%\\001\\036\", cSignature=26, pModule=0x7fd56c83be20,\r\n    flags=\u003coptimized out\u003e, pDefSubst=\u003coptimized out\u003e) at /__w/1/s/src/vm/memberload.cpp:1120\r\n#12 0x00007fd5e562cee5 in MemberLoader::GetDescFromMemberRef (pModule=\u003coptimized out\u003e, MemberRef=167775219,\r\n    ppMD=0x7fd54ceb0880, ppFD=0x7fd54ceb0878, pTypeContext=\u003coptimized out\u003e, strictMetadataChecks=\u003coptimized out\u003e,\r\n    ppTH=\u003coptimized out\u003e, actualTypeRequired=\u003coptimized out\u003e, ppTypeSig=\u003coptimized out\u003e, pcbTypeSig=\u003coptimized out\u003e)\r\n    at /__w/1/s/src/vm/memberload.cpp:404\r\n#13 0x00007fd5e562e3ca in MemberLoader::GetMethodDescFromMethodSpec (pModule=0x7fd56c83be20,\r\n    MethodSpec=\u003coptimized out\u003e, pTypeContext=0x7fd54ceb0ba0, strictMetadataChecks=\u003coptimized out\u003e,\r\n    allowInstParam=\u003coptimized out\u003e, ppTH=\u003coptimized out\u003e, actualTypeRequired=1, ppTypeSig=0x7fd54ceb0dd0,\r\n    pcbTypeSig=0x7fd54c6381a8, ppMethodSig=\u003coptimized out\u003e, pcbMethodSig=\u003coptimized out\u003e)\r\n--Type \u003cRET\u003e for more, q to quit, c to continue without paging--c\r\n    at /__w/1/s/src/vm/memberload.cpp:857\r\n#14 0x00007fd5e561047c in CEEInfo::resolveToken (this=0x7fd54ceb19a0, pResolvedToken=0x7fd54ceb0da0) at /__w/1/s/src/vm/jitinterface.cpp:1141\r\n```\r\n\r\nIt happened once again during `and     esi,dword ptr [rax+rcx]`, but this time in `GetNameOfMethodDef` instead of `getSignatureOfMemberRef`.\r\n\r\nThe weird part is that this time the target address is valid (but filled with 0s). It looks like we tried to access this address just as it was getting allocated (and by the time the sigsegv handler executed, it finished allocating).\r\n\r\nAlso, this time, there is another thread in the dump accessing metadata:\r\n\r\n```\r\n#0  RecordPool::GetRecord (this=0x7fd551e89938, nIndex=725, ppRecord=0x7ffef7068680)\r\n    at /__w/1/s/src/md/runtime/recordpool.cpp:243\r\n243     /__w/1/s/src/md/runtime/recordpool.cpp: No such file or directory.\r\n(gdb) bt\r\n#0  RecordPool::GetRecord (this=0x7fd551e89938, nIndex=725, ppRecord=0x7ffef7068680)\r\n    at /__w/1/s/src/md/runtime/recordpool.cpp:243\r\n#1  0x00007fd5e59511cd in MetaData::TableRW::GetRecord (nIndex=725, ppRecord=0x7ffef7068680, this=\u003coptimized out\u003e)\r\n    at /__w/1/s/src/md/inc/../tables/table.h:193\r\n#2  CMiniMdRW::Impl_GetRow (nTableIndex=9, nRowIndex=725, ppRecord=0x7ffef7068680, this=\u003coptimized out\u003e)\r\n    at /__w/1/s/src/md/inc/metamodelrw.h:1219\r\n#3  CMiniMdTemplate\u003cCMiniMdRW\u003e::getRow (nTableIndex=9, nRowIndex=725, ppRow=0x7ffef7068680, this=\u003coptimized out\u003e)\r\n    at /__w/1/s/src/md/inc/metamodel.h:685\r\n#4  CMiniMdTemplate\u003cCMiniMdRW\u003e::GetInterfaceImplRecord (rid=725, ppRecord=0x7ffef7068680, this=\u003coptimized out\u003e)\r\n    at /__w/1/s/src/md/inc/metamodel.h:1613\r\n#5  MDInternalRW::GetTypeOfInterfaceImpl (this=0x7fd56a4e77b0, iiImpl=\u003coptimized out\u003e, ptkType=0x7ffef7068768)\r\n    at /__w/1/s/src/md/enc/mdinternalrw.cpp:2875\r\n#6  0x00007fd5e58349a2 in InterfaceImplEnum::Next (this=\u003coptimized out\u003e) at /__w/1/s/src/vm/class.h:269\r\n#7  MethodTableBuilder::InterfacesAmbiguityCheck (bmtCheckInfo=0x7ffef706a9d0, pModule=0x7fd56b944020,\r\n    typeDef=\u003coptimized out\u003e, pSubstChain=0x7ffef70688c8, pStackingAllocator=0x7ffef7068930)\r\n    at /__w/1/s/src/vm/methodtablebuilder.cpp:9482\r\n#8  0x00007fd5e5835207 in MethodTableBuilder::InterfaceAmbiguityCheck (bmtCheckInfo=0x7ffef706a9d0,\r\n    pItfSubstChain=0x7ffef70688c8, pIntf=0x7fd56cc37710, pStackingAllocator=\u003coptimized out\u003e)\r\n    at /__w/1/s/src/vm/methodtablebuilder.cpp:9543\r\n#9  0x00007fd5e5834a3a in MethodTableBuilder::InterfacesAmbiguityCheck (bmtCheckInfo=0x7ffef706a9d0,\r\n    pModule=0x7fd56c9669d0, typeDef=\u003coptimized out\u003e, pSubstChain=0x0, pStackingAllocator=0x7ffef7068930)\r\n    at /__w/1/s/src/vm/methodtablebuilder.cpp:9493\r\n#10 0x00007fd5e5834489 in MethodTableBuilder::LoadExactInterfaceMap (pMT=\u003coptimized out\u003e)\r\n    at /__w/1/s/src/vm/methodtablebuilder.cpp:9130\r\n#11 0x00007fd5e57afb1f in ClassLoader::LoadExactParentAndInterfacesTransitively (pMT=0x7fd56eb66aa0)\r\n    at /__w/1/s/src/vm/class.cpp:934\r\n#12 0x00007fd5e57afb85 in ClassLoader::LoadExactParents (pMT=0x7fd56eb66aa0) at /__w/1/s/src/vm/class.cpp:969\r\n#13 0x00007fd5e57b9675 in ClassLoader::DoIncrementalLoad (pTypeKey=0x7ffef706afe0, typeHnd=...,\r\n    currentLevel=4144400000) at /__w/1/s/src/vm/clsload.cpp:3221\r\n--Type \u003cRET\u003e for more, q to quit, c to continue without paging--c\r\n#14 0x00007fd5e57bab40 in ClassLoader::LoadTypeHandleForTypeKey_Body (this=0x7fd54f3fd650, pTypeKey=0x7ffef706afe0, typeHnd=..., targetLevel=CLASS_LOAD_EXACTPARENTS) at /__w/1/s/src/vm/clsload.cpp:3951\r\n#15 0x00007fd5e57b6817 in ClassLoader::LoadTypeHandleForTypeKey (this=0x7fd54f3fd650, pTypeKey=0x7ffef706afe0, typeHnd=..., targetLevel=CLASS_LOADED, pInstContext=0x7ffef706b0f0) at /__w/1/s/src/vm/clsload.cpp:3677\r\n#16 0x00007fd5e57b66ce in ClassLoader::LoadConstructedTypeThrowing (pKey=0x7ffef706afe0, fLoadTypes=ClassLoader::LoadTypes, level=CLASS_LOADED, pInstContext=0x7ffef706b0f0) at /__w/1/s/src/vm/clsload.cpp:1219\r\n#17 0x00007fd5e57b825c in ClassLoader::LoadGenericInstantiationThrowing (pModule=0x7fd56c9669d0, typeDef=33554448, inst=..., fLoadTypes=ClassLoader::LoadTypes, level=CLASS_LOADED, pInstContext=0x7ffef706b0f0, fFromNativeImage=\u003coptimized out\u003e) at /__w/1/s/src/vm/clsload.cpp:2022\r\n#18 0x00007fd5e565ee82 in SigPointer::GetTypeHandleThrowing (this=\u003coptimized out\u003e, pModule=\u003coptimized out\u003e, pTypeContext=0x7ffef706b160, fLoadTypes=ClassLoader::LoadTypes, level=CLASS_LOADED, dropGenericArgumentLevel=6, pSubst=\u003coptimized out\u003e, pZapSigContext=\u003coptimized out\u003e) at /__w/1/s/src/vm/siginfo.cpp:1437\r\n#19 0x00007fd5e56a1f06 in ZapSig::DecodeType (pEncodeModuleContext=\u003coptimized out\u003e, pInfoModule=0x2d5, pBuffer=\u003coptimized out\u003e, level=1387493624) at /__w/1/s/src/vm/zapsig.cpp:805\r\n#20 0x00007fd5e5625fdd in LoadDynamicInfoEntry (currentModule=0x7fd56eb609c0, fixupRva=\u003coptimized out\u003e, entry=0x7fd56eb82a50) at /__w/1/s/src/vm/jitinterface.cpp:13456\r\n#21 0x00007fd5e57a8465 in Module::FixupNativeEntry (this=0x7fd56eb609c0, pSection=\u003coptimized out\u003e, fixupIndex=51, fixupCell=0x7fd56eb82a50) at /__w/1/s/src/vm/ceeload.cpp:10743\r\n#22 0x00007fd5e56a6554 in Module::FixupDelayListAux\u003cModule*, int (Module::*)(CORCOMPILE_IMPORT_SECTION*, unsigned long, unsigned long*)\u003e (this=0x7fd56eb609c0, pFixupList=\u003coptimized out\u003e, pThis=0x7fd56eb609c0, pfnCB=\u003coptimized out\u003e, pImportSections=0x7fd56eb941f0, pNativeImage=\u003coptimized out\u003e, nImportSections=\u003coptimized out\u003e) at /__w/1/s/src/vm/ceeload.inl:590\r\n#23 Module::FixupDelayList (this=0x7fd56eb609c0, pFixupList=\u003coptimized out\u003e) at /__w/1/s/src/vm/ceeload.inl:493\r\n#24 0x00007fd5e56a566f in ReadyToRunInfo::GetEntryPoint (this=\u003coptimized out\u003e, pMD=0x7fd56eb65c20, pConfig=\u003coptimized out\u003e, fFixups=\u003coptimized out\u003e) at /__w/1/s/src/vm/readytoruninfo.cpp:763\r\n#25 0x00007fd5e565236e in MethodDesc::GetPrecompiledR2RCode (this=0x7fd56eb65c20, pConfig=0x7ffef706b4e0) at /__w/1/s/src/vm/prestub.cpp:573\r\n#26 MethodDesc::GetPrecompiledCode (this=\u003coptimized out\u003e, pConfig=\u003coptimized out\u003e) at /__w/1/s/src/vm/prestub.cpp:457\r\n#27 MethodDesc::PrepareILBasedCode (this=0x7fd56eb65c20, pConfig=0x7ffef706b4e0) at /__w/1/s/src/vm/prestub.cpp:414\r\n#28 0x00007fd5e565216c in MethodDesc::PrepareCode (this=0x7fd56eb65c20, codeVersion=...) at /__w/1/s/src/vm/prestub.cpp:1288\r\n#29 0x00007fd5e55ecf99 in CodeVersionManager::PublishVersionableCodeIfNecessary (this=0x7fd5e5f00180, pMethodDesc=0x7fd56eb65c20, fCanBackpatchPrestub=1) at /__w/1/s/src/vm/codeversion.cpp:2308\r\n#30 0x00007fd5e56549ac in MethodDesc::DoPrestub (this=0x7fd56eb65c20, pDispatchingMT=\u003coptimized out\u003e) at /__w/1/s/src/vm/prestub.cpp:1974\r\n#31 0x00007fd5e56545d2 in PreStubWorker (pTransitionBlock=\u003coptimized out\u003e, pMD=0x7fd56eb65c20) at /__w/1/s/src/vm/prestub.cpp:1781\r\n#32 0x00007fd5e578350c in ThePreStub () at /__w/1/s/src/vm/amd64/theprestubamd64.S:17\r\n#33 0x00007fd5e578285f in CallDescrWorkerInternal () at /__w/1/s/src/pal/inc/unixasmmacrosamd64.inc:866\r\n#34 0x00007fd5e56abb52 in CallDescrWorkerWithHandler (pCallDescrData=0x7ffef706b9d8, fCriticalCall=\u003coptimized out\u003e) at /__w/1/s/src/vm/callhelpers.cpp:70\r\n#35 DispatchCallDebuggerWrapper(CallDescrData*, ContextTransitionFrame*, int)::$_1::operator()(DispatchCallDebuggerWrapper(CallDescrData*, ContextTransitionFrame*, int)::Param*) const (this=\u003coptimized out\u003e, pParam=\u003coptimized out\u003e) at /__w/1/s/src/vm/callhelpers.cpp:160\r\n#36 DispatchCallDebuggerWrapper (pCallDescrData=\u003coptimized out\u003e, pFrame=\u003coptimized out\u003e, fCriticalCall=\u003coptimized out\u003e) at /__w/1/s/src/vm/callhelpers.cpp:164\r\n#37 0x00007fd5e56abdaa in DispatchCallSimple (pSrc=0x7ffef706ba90, numStackSlotsToCopy=0, pTargetAddress=140554660594600, dwDispatchCallSimpleFlags=\u003coptimized out\u003e) at /__w/1/s/src/vm/callhelpers.cpp:219\r\n#38 0x00007fd5e563e5d2 in MethodTable::RunClassInitEx (this=0x7fd56eb65c80, pThrowable=0x7ffef706bb50) at /__w/1/s/src/vm/methodtable.cpp:3374\r\n#39 0x00007fd5e563ed8c in MethodTable::DoRunClassInitThrowing (this=0x7fd56eb65c80) at /__w/1/s/src/vm/methodtable.cpp:3607\r\n#40 0x00007fd5e57cfb65 in NDirect::NDirectLink (pMD=0x7fd56eb63e08) at /__w/1/s/src/vm/dllimport.cpp:6666\r\n#41 0x00007fd5e57cfaca in NDirect::GetStubForILStub (pNMD=0x7fd56eb63e08, ppStubMD=\u003coptimized out\u003e, dwStubFlags=\u003coptimized out\u003e) at /__w/1/s/src/vm/dllimport.cpp:5476\r\n#42 0x00007fd5e57cfe47 in GetStubForInteropMethod (pMD=0x7fd551e89938, dwStubFlags=1387493624, ppStubMD=0x0) at /__w/1/s/src/vm/dllimport.cpp:5616\r\n#43 0x00007fd5e5654c76 in MethodDesc::DoPrestub (this=0x7fd56eb63e08, pDispatchingMT=\u003coptimized out\u003e) at /__w/1/s/src/vm/prestub.cpp:2029\r\n#44 0x00007fd5e56545d2 in PreStubWorker (pTransitionBlock=\u003coptimized out\u003e, pMD=0x7fd56eb63e08) at /__w/1/s/src/vm/prestub.cpp:1781\r\n#45 0x00007fd5e578350c in ThePreStub () at /__w/1/s/src/vm/amd64/theprestubamd64.S:17\r\n```\r\n\r\nAt this point, it sounds very likely to me that there is a race condition somewhere. Shortly before that, the profiler emitted a new type with methods and fields (during a `JITCompilationStarted` event). That could be part of the problem. I\u0027m not actually sure we\u0027re allowed to emit types outside of `ModuleLoadFinished`. We rolled with it because it worked but maybe we were just lucky. @davmason  what do you think?\r\n\r\n",
                                           "updatedAt":  "2023-06-21T11:32:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fbZ2_",
                                           "createdAt":  "2023-06-21T15:08:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "+ @jkotas @davmason  for thoughts",
                                           "updatedAt":  "2023-06-21T15:08:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fcLF7",
                                           "createdAt":  "2023-06-21T16:53:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC-nP0g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2023-06-21T17:30:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Adding new types after ModuleLoadFinished should work. This looks like a race condition in writeable metadata view. The problem is likely near `class StgPool`. The calling code assumes that this type is lock-free for reads, but there is no `volatile` or `interlocked` used in the implementation that looks suspect.",
                                           "updatedAt":  "2023-06-21T16:53:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fcPKN",
                                           "createdAt":  "2023-06-21T17:01:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "For example, one place to check is that these two lines are not getting reordered by C++ compiler https://github.com/dotnet/runtime/blob/2df0167e1f9d11fb1c03048d147e69a3f4f2be93/src/coreclr/utilcode/stgpool.cpp#L435-L436\r\n",
                                           "updatedAt":  "2023-06-21T17:01:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59IFqi",
                                           "createdAt":  "2024-05-07T20:41:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@kevingosse please let us know if this is still occurring and if so requires more attention.  I am moving to Future until we hear back.",
                                           "updatedAt":  "2024-05-07T20:41:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59NCku",
                                           "createdAt":  "2024-05-08T13:24:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kevingosse",
                                           "body":  "\u003e @kevingosse please let us know if this is still occurring and if so requires more attention. I am moving to Future until we hear back.\r\n\r\n@tommcdon The issue still happens every few days in our CI. Unfortunately I don\u0027t have much time to dig into it (as I\u0027m not familiar with the inner workings of the metadata storage), but I can provide memory dumps if that helps.",
                                           "updatedAt":  "2024-05-08T13:24:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc595O2D",
                                           "createdAt":  "2024-05-15T10:34:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kevingosse",
                                           "body":  "@tommcdon  Just today:\r\n\r\n```\r\nlibcoreclr!sigsegv_handler+0x156\r\nld_musl_x86_64_so!sigwaitinfo+0x8\r\nlibcoreclr!CMiniMdTemplate\u003cCMiniMdRW\u003e::getSignatureOfMemberRef+0x18 [/__w/1/s/src/md/inc/metamodel.h @ 1811] \r\nlibcoreclr!MDInternalRW::GetNameAndSigOfMemberRef+0x89 [/__w/1/s/src/md/enc/mdinternalrw.cpp @ 2969] \r\nlibcoreclr!MemberLoader::GetMethodDescFromMemberRefAndType+0x45 [/__w/1/s/src/vm/memberload.cpp @ 464] \r\nlibcoreclr!Dictionary::PopulateEntry+0xc29 [/__w/1/s/src/vm/genericdict.cpp @ 884] \r\nlibcoreclr!JIT_GenericHandleWorker+0x19b [/__w/1/s/src/vm/jithelpers.cpp @ 3807] \r\nlibcoreclr!JIT_GenericHandle_Framed+0xf4 [/__w/1/s/src/vm/jithelpers.cpp @ 3857] \r\nSystem_Linq!System.Collections.Generic.LargeArrayBuilder`1.AddRange+0x2f [/_/src/Common/src/System/Collections/Generic/LargeArrayBuilder.SpeedOpt.cs @ 109] \r\nSystem_Linq!System.Collections.Generic.EnumerableHelpers.ToArray+0xde [/_/src/Common/src/System/Collections/Generic/EnumerableHelpers.Linq.cs @ 111] \r\nSystem_Linq!System.Linq.Enumerable.ToArray+0x4d [/_/src/System.Linq/src/System/Linq/ToCollection.cs @ 18] \r\n```",
                                           "updatedAt":  "2024-05-15T10:35:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59-Pgl",
                                           "createdAt":  "2024-05-15T21:15:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Hello @kevingosse! Unfortunately we have other pressing issues at the current time.  Please let us know if you or your team would be interested in working on the issue, and we will be happy to provide some guidance on next steps.",
                                           "updatedAt":  "2024-05-15T21:15:28Z"
                                       }
                                   ],
                         "totalCount":  18
                     },
        "title":  "Segfault in CMiniMdTemplate\u003cCMiniMdRW\u003e::getSignatureOfMemberRef",
        "labels":  [
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/86105",
        "createdAt":  "2023-05-11T17:20:29Z",
        "number":  86105,
        "author":  "auott",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-05-12T08:35:51Z",
        "body":  "### Description\n\nThreads created with a non-default stack size do not contain a guard page on the stack. This ends up blocking function evaluation as the lack of guard page is used as an indicator that a stack overflow has occurred which makes inspecting the state of programs much more difficult.\n\n### Reproduction Steps\n\nUsing the following test code\r\n```\r\nnamespace TestApp\r\n{\r\n    class Program\r\n    {\r\n        [DllImport(\"kernel32.dll\")]\r\n        static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint StackSize, IntPtr lpStartAddress, IntPtr lpParam, uint flags, out uint threadId);\r\n\r\n        private delegate int ThreadProcDelegate(IntPtr lpParam);\r\n        private static ThreadProcDelegate ThreadProc = new ThreadProcDelegate(ThreadStart);\r\n\r\n        static void Main(string[] args)\r\n        {\r\n            // Note: issue doesn\u0027t occur if we use the default stack size.\r\n            // uint stackSize = 0;\r\n            uint stackSize = 2097152;\r\n            uint threadID = 0;\r\n\r\n            IntPtr threadproc = Marshal.GetFunctionPointerForDelegate(ThreadProc);\r\n            CreateThread(IntPtr.Zero, stackSize, threadproc, IntPtr.Zero, 0, out threadID);\r\n            System.Diagnostics.Debug.WriteLine(\"Thread created!!!\");\r\n        }\r\n\r\n        static int ThreadStart(IntPtr lpParam)\r\n        {\r\n            // add TestApp.Program.Whoopie to the watch window when this BP is hit.\r\n            // now add Models.Alpha.ActiveBeta.Id to the watch window, and you\u0027ll encounter the error:\r\n            //\r\n            // \"Cannot evaluate expression because the current thread is in a stack overflow state.\"\r\n            //\r\n\r\n            System.Diagnostics.Debug.WriteLine(\"Running TestProc\");\r\n            return 0;\r\n        }\r\n    }\r\n}\r\n\r\nnamespace Models\r\n{\r\n    public class Beta\r\n    {\r\n        public Beta() { }\r\n        public String Id\r\n        {\r\n            get { return new Random().Next().ToString(); }\r\n        }\r\n    }\r\n\r\n    public class Alpha\r\n    {\r\n        static Beta _beta = new Beta();\r\n        public Alpha() { }\r\n        internal static Beta ActiveBeta\r\n        {\r\n            get { return _beta; }\r\n        }\r\n    }\r\n}\r\n```\r\nin .NET 5, 6, or 7, put a breakpoint on the WriteLine in ThreadStart and then follow the instructions in the comments about the watch value to add.\n\n### Expected behavior\n\nThe debugger is able to display the value of Id.\r\nThe stack for the thread should have a page with PAGE_GUARD set.\n\n### Actual behavior\n\nThe debugger shows an error message about being unable to evaluate the function while the thread is in a stack overflow state.\r\nThere does not exist a page with PAGE_GUARD set on the threads stack range.\n\n### Regression?\n\nThis is a regression from .NET Framework. It does not work in .NET Core 5, 6, or 7.\n\n### Known Workarounds\n\nNo known workaround.\n\n### Configuration\n\nThis has been reproduced on Windows 10 and 11 with x64 .NET 5, 6, and 7. \r\n\n\n### Other information\n\nhttps://github.com/dotnet/runtime/blob/3a91c9dc96bdfd8164825eec94660691b661f676/src/coreclr/vm/threads.cpp#L6695 is called by FuncEvalSetup to determine if it is safe to setup the func eval, and when the stack has a modified size this returns false.\r\nExamining the stack ranges inspected by that function and DoesRegionContainGuardPage using WinDbg and the !address command shows the entire stack region for the thread as PAGE_READWRITE with no PAGE_GUARD regions.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOXBywtg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5cDY46",
                                           "createdAt":  "2023-05-11T17:20:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nThreads created with a non-default stack size do not contain a guard page on the stack. This ends up blocking function evaluation as the lack of guard page is used as an indicator that a stack overflow has occurred which makes inspecting the state of programs much more difficult.\n\n### Reproduction Steps\n\nUsing the following test code\r\n```\r\nnamespace TestApp\r\n{\r\n    class Program\r\n    {\r\n        [DllImport(\"kernel32.dll\")]\r\n        static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint StackSize, IntPtr lpStartAddress, IntPtr lpParam, uint flags, out uint threadId);\r\n\r\n        private delegate int ThreadProcDelegate(IntPtr lpParam);\r\n        private static ThreadProcDelegate ThreadProc = new ThreadProcDelegate(ThreadStart);\r\n\r\n        static void Main(string[] args)\r\n        {\r\n            // Note: issue doesn\u0027t occur if we use the default stack size.\r\n            // uint stackSize = 0;\r\n            uint stackSize = 2097152;\r\n            uint threadID = 0;\r\n\r\n            IntPtr threadproc = Marshal.GetFunctionPointerForDelegate(ThreadProc);\r\n            CreateThread(IntPtr.Zero, stackSize, threadproc, IntPtr.Zero, 0, out threadID);\r\n            System.Diagnostics.Debug.WriteLine(\"Thread created!!!\");\r\n        }\r\n\r\n        static int ThreadStart(IntPtr lpParam)\r\n        {\r\n            // add TestApp.Program.Whoopie to the watch window when this BP is hit.\r\n            // now add Models.Alpha.ActiveBeta.Id to the watch window, and you\u0027ll encounter the error:\r\n            //\r\n            // \"Cannot evaluate expression because the current thread is in a stack overflow state.\"\r\n            //\r\n\r\n            System.Diagnostics.Debug.WriteLine(\"Running TestProc\");\r\n            return 0;\r\n        }\r\n    }\r\n}\r\n\r\nnamespace Models\r\n{\r\n    public class Beta\r\n    {\r\n        public Beta() { }\r\n        public String Id\r\n        {\r\n            get { return new Random().Next().ToString(); }\r\n        }\r\n    }\r\n\r\n    public class Alpha\r\n    {\r\n        static Beta _beta = new Beta();\r\n        public Alpha() { }\r\n        internal static Beta ActiveBeta\r\n        {\r\n            get { return _beta; }\r\n        }\r\n    }\r\n}\r\n```\r\nin .NET 5, 6, or 7, put a breakpoint on the WriteLine in ThreadStart and then follow the instructions in the comments about the watch value to add.\n\n### Expected behavior\n\nThe debugger is able to display the value of Id.\r\nThe stack for the thread should have a page with PAGE_GUARD set.\n\n### Actual behavior\n\nThe debugger shows an error message about being unable to evaluate the function while the thread is in a stack overflow state.\r\nThere does not exist a page with PAGE_GUARD set on the threads stack range.\n\n### Regression?\n\nThis is a regression from .NET Framework. It does not work in .NET Core 5, 6, or 7.\n\n### Known Workarounds\n\nNo known workaround.\n\n### Configuration\n\nThis has been reproduced on Windows 10 and 11 with x64 .NET 5, 6, and 7. \r\n\n\n### Other information\n\nhttps://github.com/dotnet/runtime/blob/3a91c9dc96bdfd8164825eec94660691b661f676/src/coreclr/vm/threads.cpp#L6695 is called by FuncEvalSetup to determine if it is safe to setup the func eval, and when the stack has a modified size this returns false.\r\nExamining the stack ranges inspected by that function and DoesRegionContainGuardPage using WinDbg and the !address command shows the entire stack region for the thread as PAGE_READWRITE with no PAGE_GUARD regions.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eauott\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-05-11T17:20:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cDjeR",
                                           "createdAt":  "2023-05-11T17:50:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Adding @janvorli in case this is a known issue",
                                           "updatedAt":  "2023-05-11T17:50:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cEobN",
                                           "createdAt":  "2023-05-11T21:42:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "Looking at the code, it is creating the thread using pinvoke to OS CreateThread instead of using the managed thread creation API. .NET requires that there are extra guard pages that our thread creation API creates using SetThreadStackGuarantee windows API. We set it to size that should be sufficient for stack overflow handling on the thread. I wonder what does the Windows CreateThread API use as the default stack guarantee.\r\nWhen stack overflow happens, the extra guard pages are mapped by the OS before it runs the vectored exception handler so that there is a space to run that code on. \r\n\r\n@auott any reason why you create the thread using the Windows API instead of the managed one?",
                                           "updatedAt":  "2023-05-11T21:42:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cEqEC",
                                           "createdAt":  "2023-05-11T21:46:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "auott",
                                           "body":  "@janvorli I don\u0027t have an answer to that question as I filed this in response to a VS feedback ticket I had investigated: https://developercommunity.visualstudio.com/t/VisualStudio-2022-incorrectly-indicates-/10352995",
                                           "updatedAt":  "2023-05-11T21:46:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cEurI",
                                           "createdAt":  "2023-05-11T22:00:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC7kfbg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2023-05-11T22:02:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "janvorli",
                                           "body":  "New .NET (previously named core) sets the guarantee to 4 pages for 64 bit OS / 2 pages for 32 bit OS. I would recommend to the customer to try to call SetThreadStackGuarantee with these values on their native thread that later calls managed code to see if that fixes their problem. ",
                                           "updatedAt":  "2023-05-11T22:00:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cFWSp",
                                           "createdAt":  "2023-05-11T23:55:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC7kt0A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2023-05-11T23:56:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "Moonfish",
                                                                               "createdAt":  "2023-05-11T23:56:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "Moonfish",
                                           "body":  "Hello @janvorli \r\n\r\nI\u0027m the dev who originally reported the issue our customers observed in VS when debugging managed extensions which plug into our large mixed managed/native (mostly native) applications (pinvoking createthread was done only to produce the smallest example I could think of for the repro, we don\u0027t actually do that in our products).  \r\n\r\nI picked up on the information in this thread about the guard page connection this morning.  I used VirtualProtect to alter the lower 2 pages on the stack to include PAGE_GUARD and that resolved the issue for us, but using SetThreadStackGuarantee seems simpler and I just verified that this also works.  Since we\u0027re in a position to modify our thread, this approach works for us.  \r\n\r\nGreatly appreciate Microsoft\u0027s help as I\u0027ve been scratching my head on this one for a while.\r\n\r\n",
                                           "updatedAt":  "2023-05-12T01:30:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cFW25",
                                           "createdAt":  "2023-05-11T23:59:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC7k5XA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Moonfish",
                                                                               "createdAt":  "2023-05-12T01:26:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Thanks for confirming @Moonfish, and thanks @janvorli for the suggestion!  I\u0027ve added the documentation tag as we should update our public docs just in case others stumble on to this issue.",
                                           "updatedAt":  "2023-05-11T23:59:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cHLC2",
                                           "createdAt":  "2023-05-12T08:35:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@Moonfish I am glad it helped!",
                                           "updatedAt":  "2023-05-12T08:35:51Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "Threads with non-default stack size do not contain a guard page",
        "labels":  [
                       "documentation",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/86350",
        "createdAt":  "2023-05-16T19:51:15Z",
        "number":  86350,
        "author":  "jander-msft",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-06-24T22:26:44Z",
        "body":  "If a diagnostic collection tool is running as a non-root user whereas the target application is running as root, the diagnostic tool will not be able to read the dump file because it is marked as read-write only by the root user. See https://github.com/dotnet/dotnet-monitor/issues/4427 as an example.\r\n\r\nIn the example, the deployment has to be updated such as .NET Monitor runs as root in order to be able to read the dump file that was written to the `/diag/dumps/` directory. This is an _okay_ but not as secure workaround, but not discoverable until someone actually tries to capture a dump and the tool gets an access denied error; other features (such as capturing traces) of .NET Monitor do not require this when it\u0027s running its own diagnostic server and has the target application connect to it via `DOTNET_DiagnosticPorts` because there is no file system interaction between the two processes.\r\n\r\nI would like to request that a new dump command or new option be added to the diagnostic communication channel that allows for streaming the dump over the channel rather than requiring the diagnostic tool to read it from disk.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOX7Xing==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5cZ0Z4",
                                           "createdAt":  "2023-05-16T19:51:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nIf a diagnostic collection tool is running as a non-root user whereas the target application is running as root, the diagnostic tool will not be able to read the dump file because it is marked as read-write only by the root user. See https://github.com/dotnet/dotnet-monitor/issues/4427 as an example.\r\n\r\nIn the example, the deployment has to be updated such as .NET Monitor runs as root in order to be able to read the dump file that was written to the `/diag/dumps/` directory. This is an _okay_ but not as secure workaround, but not discoverable until someone actually tries to capture a dump and the tool gets an access denied error; other features (such as capturing traces) of .NET Monitor do not require this when it\u0027s running its own diagnostic server and has the target application connect to it via `DOTNET_DiagnosticPorts` because there is no file system interaction between the two processes.\r\n\r\nI would like to request that a new dump command or new option be added to the diagnostic communication channel that allows for streaming the dump over the channel rather than requiring the diagnostic tool to read it from disk.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejander-msft\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-05-16T19:51:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cazwn",
                                           "createdAt":  "2023-05-17T00:47:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "cc @mikem8361 ",
                                           "updatedAt":  "2023-05-17T00:47:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cglzy",
                                           "createdAt":  "2023-05-17T20:35:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "The default is intentional and I am not convinced yet we want to change this - essentially the runtime writes the dump with the same ACLing as the process. When the runtime get a request over the pipe it assumes the ACLing of the pipe. Doing this would require either:\r\n\r\n- Having the runtime stream after collection, which is problematic if you are within a signal handler.\r\n- Teach createdump how to open an EventPipe session to talk back to the collecting tool, and this quickly gets messy... ",
                                           "updatedAt":  "2023-05-17T20:35:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cgmHG",
                                           "createdAt":  "2023-05-17T20:35:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "This also doesn\u0027t seem to fit in the .NET 8 timeline... ",
                                           "updatedAt":  "2023-05-17T20:35:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cgv1r",
                                           "createdAt":  "2023-05-17T21:10:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jander-msft",
                                           "body":  "\u003e The default is intentional and I am not convinced yet we want to change this\r\n\r\nI\u0027m not asking to change the existing behavior, I\u0027m asking for an optional behavior for when invoking the creation of the dump via the ipc channel.\r\n\r\n\u003e - essentially the runtime writes the dump with the same ACLing as the process. When the runtime get a request over the pipe it assumes the ACLing of the pipe.\r\n\r\nThe ACLing of the pipe does not necessarily match the target process, especially in \"reverse server\" diagnostics.\r\n\r\nWe (.NET Monitor) are only shipping non-root distroless images for .NET 8 for a better security posture.  One core deployment type for .NET Monitor is to be used in multi-container environments; this means we have to use \"reverse server\" diagnostics (.NET Monitor has a diagnostic server to which the target application must connect) to be able to observe more than one container. The vast majority of application containers are still running as root; they are able to connect to the server due to their elevated access but they definitely do not match strictly match the permissions of the socket.\r\n\r\n\u003e * Having the runtime stream after collection, which is problematic if you are within a signal handler.\r\n\r\nNot sure what a signal handle has to do with this code path; the app is not crashing or being forced to shutdown. Unless the handler of the diagnostic command is issuing some special signal to cause the dump invocation routine to execute... even it was...\r\n\r\n\u003e * Teach createdump how to open an EventPipe session to talk back to the collecting tool, and this quickly gets messy...\r\n\r\nThat\u0027s not how I would expect this to work; I would expect the command handler to invoke the dump routine, get a handle to the file, read out the file and send the content back through the response, something akin to how tracing is sent back as an unbounded stream in its response.",
                                           "updatedAt":  "2023-05-17T21:10:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5chamx",
                                           "createdAt":  "2023-05-18T00:57:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "I understand this changes a bit in the reverse scenario - and the ACL is not as much as a concern since it\u0027s an explicit config.  However there\u0027s two major scenarios for dump collection: Crash and ad-hoc. The former gets triggered via a signal handler construct and spawns a second process. We don\u0027t get to stream that one since the runtime has limited actions it can perform in such cases - so we write it to a file from a different process (and there\u0027s also the usual thread suspension et al that limits how things are done). In the monitor scenario what\u0027s the egress story for such things? My guess is network mounted volume? If so a temporary workaround for people to get their dumps is to request ad-hoc dumps to said directory.\r\n\r\nAs for the ad-hoc dumps - yes, the runtime shares the codepath of dump collection for EP requests and crashing scenarios. It\u0027s reasonable to say that the command handler perhaps could stream the file and that would work, I do have to give it some thought around clients potentially listening to a lower ACL pipe where you are sending all the data  of a privileged process, even if the intention is coming from a desire to run diagnostic tooling with the lowest levels of privilege possible and we have explicit opt-in. Also, likely we wouldn\u0027t support generating the JSON report, nor diagnostic logging around log collection (at least not to a file).\r\n\r\ncc: @samsp-msft @richlander ",
                                           "updatedAt":  "2023-05-18T00:57:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5chdnf",
                                           "createdAt":  "2023-05-18T01:15:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jander-msft",
                                           "body":  "I\u0027m not concerned about crash dump, that can continue to write out the file system as configured by the env vars. The diagnostic IPC has nothing to do with that.\n\n.NET Monitor currently doesn\u0027t collect crash dumps; we\u0027d recommend using the env vars if customers need that today. Even if  it did, we\u0027d have the same issue as described here (unable to read the dump file).\n\nWe also have a separate story that we\u0027ll work on eventually where we\u0027ll detect the unhandled exception before it crashes the process, hold the process, capture a dump, and egress it out of the container/pod, and let the process crash; this also has no bearing on the ask in this issue.\n\nRegarding the json report and logs, .NET Monitor currently doesn\u0027t ask for those to be generated. Even if it did, again, we\u0027d still be stuck because we can\u0027t read it in this scenario. We haven\u0027t had any demand for these artifacts in .NET Monitor usage, so I\u0027m not too concerned about those. The effort I would put for those would be more like a thought experiment, unless we get a customer ask for it.",
                                           "updatedAt":  "2023-05-18T01:15:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fteKe",
                                           "createdAt":  "2023-06-24T22:26:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jander-msft",
                                           "body":  "An alternative is that `createdump` is changed to allow group read permissions on all generated artifacts. We can then use Kubernetes\u0027 [fsgroup](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/) security context concept in order to allow containers in the pod to have permission to read the files via the secondary group specified by fsgroup. We\u0027ll log a separate issue after investigating this more.",
                                           "updatedAt":  "2023-06-24T22:26:44Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "New/update dump diagnostic IPC command that streams the dump on diagnostic IPC channel",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/87574",
        "createdAt":  "2023-06-14T19:21:48Z",
        "number":  87574,
        "author":  "lambdageek",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-01-28T21:38:56Z",
        "body":  "The test triggers an assertion:\r\n\r\n```\r\nAssert failure(PID 2148 [0x00000864], Thread: 17217 [0x4341]): pos \u003e= 0 \u0026\u0026 pos \u003c pMT-\u003eGetNumStaticFields()\r\n    File: /Users/runner/work/1/s/src/coreclr/vm/memberload.cpp Line: 369\r\n    Image: /private/tmp/helix/working/B15A0A10/p/dotnet\r\n```\r\n\r\nTest was added in https://github.com/dotnet/runtime/pull/87285\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnCuxlQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5e4bWv",
                                           "createdAt":  "2023-06-14T19:21:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThe test triggers an assertion:\r\n\r\n```\r\nAssert failure(PID 2148 [0x00000864], Thread: 17217 [0x4341]): pos \u003e= 0 \u0026\u0026 pos \u003c pMT-\u003eGetNumStaticFields()\r\n    File: /Users/runner/work/1/s/src/coreclr/vm/memberload.cpp Line: 369\r\n    Image: /private/tmp/helix/working/B15A0A10/p/dotnet\r\n```\r\n\r\nTest was added in https://github.com/dotnet/runtime/pull/87285\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003elambdageek\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-06-14T19:21:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5e4b9l",
                                           "createdAt":  "2023-06-14T19:24:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "attn: @mikelle-rogers  \r\n\r\nFrom offline discussion with @AaronRobinsonMSFT\r\n\u003e the comment points to `GetFieldDescByIndex()` which was updated. See \r\n\r\nhttps://github.com/dotnet/runtime/blob/2905fe7590166b30abf85874964aca1015ba7ba8/src/coreclr/vm/methodtable.cpp#L2091-L2116\r\n\r\n\r\nhttps://github.com/dotnet/runtime/blob/2905fe7590166b30abf85874964aca1015ba7ba8/src/coreclr/vm/memberload.cpp#L361-L375\r\n\r\n\u003e We need to add a test and reconcile these two paths. Hopefully removing the code duplication to avoid this in the future.",
                                           "updatedAt":  "2023-06-14T19:24:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5e4oLq",
                                           "createdAt":  "2023-06-14T20:08:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "@mikelle-rogers Please let me know if you\u0027d like me to look into this.",
                                           "updatedAt":  "2023-06-14T20:08:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5h7bky",
                                           "createdAt":  "2023-07-20T01:25:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikelle-rogers",
                                           "body":  "After taking out the assert `_ASSERTE(pos \u003e= 0 \u0026\u0026 pos \u003c pMT-\u003eGetNumStaticFields());` this fails in memberload.cpp, in `GetDescFromMemberRef`, with the field with name `\u003c\u003e9__1_0`. It fails with an AV in clr when this field calls `GetMemberDef()`.\r\n\r\n@AaronRobinsonMSFT ",
                                           "updatedAt":  "2023-07-20T01:25:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iIUF0",
                                           "createdAt":  "2023-07-22T00:02:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODBoKzg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2023-07-24T17:23:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mikelle-rogers",
                                           "body":  "Close via pull request [#89145](https://github.com/dotnet/runtime/pull/89145)",
                                           "updatedAt":  "2023-07-22T00:02:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PGvnM",
                                           "createdAt":  "2024-10-08T22:11:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "We still have tests disabled against this issue https://github.com/dotnet/runtime/blob/3f28b1a95f885b89af10540bcd01fc8dd8f3a684/src/libraries/System.Runtime.Loader/tests/ApplyUpdateTest.cs#L886",
                                           "updatedAt":  "2024-10-08T22:11:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cK7GV",
                                           "createdAt":  "2025-01-28T21:38:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Moving to future as this issue does not seem to be affecting any customer related scenarios",
                                           "updatedAt":  "2025-01-28T21:38:47Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "[EnC] CoreCLR assertion in System.Reflection.Metadata.ApplyUpdateTest.TestGenericAddStaticField",
        "labels":  [
                       "disabled-test",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/87854",
        "createdAt":  "2023-06-21T00:24:40Z",
        "number":  87854,
        "author":  "BruceForstall",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC_Rj_w==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "moveccr",
                                            "createdAt":  "2025-02-20T08:30:32Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-10-17T21:41:01Z",
        "body":  "AVX-512 introduces new `zmm` and `k` registers. The Visual Studio Registers window can show these if you right-click in the window and choose \"AVX-512\". However, the values are \"grayed out\" when debugging a managed app, and they do not show actual values (they show zeros).\r\n\r\nThe Registers window also shows `ymm` registers if you right-click and choose \"AVX\". These are also not available when debugging a managed app.\r\n\r\nIt appears that Vector512 variables _do_ show the correct values.\r\n\r\nTo add support for the Registers window:\r\n1. Ensure the AVX/AVX-512 registers are defined in the `CorDebugRegister` enum\r\n2. Review `ICorDebugRegisterSet2` to ensure the API would work with AVX/AVX-512\r\n3. Add the appropriate implementation to `CordbRegisterSet::GetRegistersAvailable`, `CordbRegisterSet::GetRegisters`, more.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOX3CPEg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5fWoof",
                                           "createdAt":  "2023-06-21T00:24:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nAVX-512 introduces new `zmm` and `k` registers. The Visual Studio Registers window can show these if you right-click in the window and choose \"AVX-512\". However, the values are \"grayed out\" when debugging a managed app, and they do not show actual values (they show zeros).\r\n\r\nThe Registers window also shows `ymm` registers if you right-click and choose \"AVX\". These are also not available when debugging a managed app.\r\n\r\nIt appears that Vector512 variables _do_ show the correct values.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eBruceForstall\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `arch-avx512`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-06-21T00:24:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fa57-",
                                           "createdAt":  "2023-06-21T13:58:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "cc @caslan ",
                                           "updatedAt":  "2023-06-21T13:58:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fcI8S",
                                           "createdAt":  "2023-06-21T16:48:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BruceForstall",
                                           "body":  "cc @dotnet/avx512-contrib ",
                                           "updatedAt":  "2023-06-21T16:48:48Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "AVX-512 debugger support: view registers",
        "labels":  [
                       "area-Diagnostics-coreclr",
                       "Priority:3",
                       "avx512"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/88949",
        "createdAt":  "2023-07-15T14:40:34Z",
        "number":  88949,
        "author":  "xPaw",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-07-16T16:15:01Z",
        "body":  "### Background and motivation\n\nI was working with shaders, and when getting shader compilation error from the graphics driver, I know which file and line number the error (such as a syntax error) occured on. The best I can currently do is print it.\r\n\r\nHaving an API to open a file in the debugger would allow me to directly open this shader file and jump to the line the error occured on. This is similar to a debugger break.\n\n### API Proposal\n\n```csharp\r\nnamespace System.Diagnostics;\r\n\r\npublic static partial class Debugger\r\n{\r\n    public static bool OpenFile(string file, int line = 0, int column = 0);\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\nDebugger.OpenFile(\"path/to/file.txt\", 123);\r\n```\r\n\n\n### Alternative Designs\n\nIt\u0027s possible to spawn `devenv` or `code` with a specified file like this:\r\n\r\n```csharp\r\n Process.Start(new ProcessStartInfo()\r\n{\r\n    UseShellExecute = true,\r\n    FileName = \"code\",\r\n    Arguments = @$\"--goto \"\"file.txt:123:50\"\"\"\r\n});\r\n```\r\n\r\nFor VS code, when `--goto` is used with `file:line{:character}`, opens a file at a specific line and optional character position.\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYZSf_Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5hj2hi",
                                           "createdAt":  "2023-07-15T14:40:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nI was working with shaders, and when getting shader compilation error from the graphics driver, I know which file and line number the error (such as a syntax error) occured on. The best I can currently do is print it.\r\n\r\nHaving an API to open a file in the debugger would allow me to directly open this shader file and jump to the line the error occured on. This is similar to a debugger break.\n\n### API Proposal\n\n```csharp\r\nnamespace System.Diagnostics;\r\n\r\npublic static partial class Debugger\r\n{\r\n    public static bool OpenFile(string file, int line = 0, int column = 0);\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\nDebugger.OpenFile(\"path/to/file.txt\", 123);\r\n```\r\n\n\n### Alternative Designs\n\nIt\u0027s possible to spawn `devenv` or `code` with a specified file like this:\r\n\r\n```csharp\r\n Process.Start(new ProcessStartInfo()\r\n{\r\n    UseShellExecute = true,\r\n    FileName = \"code\",\r\n    Arguments = @$\"--goto \"\"file.txt:123:50\"\"\"\r\n});\r\n```\r\n\r\nFor VS code, when `--goto` is used with `file:line{:character}`, opens a file at a specific line and optional character position.\n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003exPaw\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-07-15T14:40:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hlJ_9",
                                           "createdAt":  "2023-07-16T16:14:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Thanks for the suggestion @xPaw.  This would require creating a new Just-In-Time debugger contract between .NET and Visual Studio.  Our guidance is to use [`Debugger.Break`](https://learn.microsoft.com/dotnet/api/system.diagnostics.debugger.break?view=net-7.0) to signal the debugger to stop at the current location.  The underlying mechanism creates a [debugger interrupt](https://www.felixcloutier.com/x86/intn:into:int3:int1) which is causes the debugger to enter break state.  To \"ask\" the debugger to open a file other than the original code that invoked `Debugger.Break` would either require feature work on both Visual Studio as well as .NET, or creating a custom Visual Studio extension that could parse [Debug.WriteLine](https://learn.microsoft.com/dotnet/api/system.diagnostics.debug.writeline?view=net-7.0) output when an interrupt is sent to the debugger.  Please feel free to open a [Visual Studio suggestion item](https://learn.microsoft.com/visualstudio/ide/suggest-a-feature?view=vs-2022).  I\u0027ll move this item to the \u0027Future\u0027 milestone.  Once the VS suggestion and/or this GH item receives sufficient up votes we can revisit this.",
                                           "updatedAt":  "2023-07-16T16:14:43Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[API Proposal]: A `Debugger` method that allows opening a file on a line in currently attached debugger",
        "labels":  [
                       "enhancement",
                       "api-suggestion",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/89592",
        "createdAt":  "2023-07-27T20:21:07Z",
        "number":  89592,
        "author":  "AaronRobinsonMSFT",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-03-07T17:55:06Z",
        "body":  "The following assert has been hitting in CHK/DBG builds. Without a debugger attached the debugger is crashing and making debugging very difficult.\r\n\r\nhttps://github.com/dotnet/runtime/blob/67b3117309a7a877d365e6f444c80c0aa68959e1/src/coreclr/debug/inc/amd64/primitives.h#L76-L85\r\n\r\nThe values for `ICorDebugInfo::RegNum reg` is `0x11` which is greater than the length of `g_JITToCorDbgReg` (`0x10`) on windows-amd64.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOoVqFXw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5ineEt",
                                           "createdAt":  "2023-07-27T20:21:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThe following assert has been hitting in CHK/DBG builds. Without a debugger attached the debugger is crashing and making debugging very difficult.\r\n\r\nhttps://github.com/dotnet/runtime/blob/67b3117309a7a877d365e6f444c80c0aa68959e1/src/coreclr/debug/inc/amd64/primitives.h#L76-L85\r\n\r\nThe values for `ICorDebugInfo::RegNum reg` is `0x11` which is greater than the length of `g_JITToCorDbgReg` (`0x10`) on windows-amd64.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eAaronRobinsonMSFT\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-07-27T20:21:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ismVD",
                                           "createdAt":  "2023-07-28T15:08:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@hoyosjs @mikelle-rogers ",
                                           "updatedAt":  "2023-07-28T15:08:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iwOhK",
                                           "createdAt":  "2023-07-29T18:07:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@AaronRobinsonMSFT would you mind sharing a callstack of the issue?  It seems `REGNUM_AMBIENT_SP` is a pseudo-register and not defined in [`CorDebugRegister`](https://github.com/dotnet/runtime/blob/7a9ff69fd75e717f69e24e8ba7c6762a6c2006e4/src/coreclr/pal/prebuilt/inc/cordebug.h#L9473-L9474), and thus not included into the `RegNum`-\u003e`CorDebugRegister` translation table:\r\nhttps://github.com/dotnet/runtime/blob/7a9ff69fd75e717f69e24e8ba7c6762a6c2006e4/src/coreclr/debug/inc/amd64/primitives.h#L56-L75\r\n\r\nIt looks like `DBG_TARGET_REGNUM_AMBIENT_SP` represents the 0x17 you were seeing in the assert:   https://github.com/dotnet/runtime/blob/7a9ff69fd75e717f69e24e8ba7c6762a6c2006e4/src/coreclr/debug/inc/dbgipcevents.h#L1871-L1876\r\n\r\nAnd included with `ICorDebugInfo::RegNum` but after `REGNUM_COUNT` which leads me to believe we do not intend the pseudo-register to leak out into `CorDebugRegister`:\r\nhttps://github.com/dotnet/runtime/blob/7a9ff69fd75e717f69e24e8ba7c6762a6c2006e4/src/coreclr/inc/cordebuginfo.h#L219-L221\r\n\r\nTherefore I am guessing we should not try to encode the pseudo register and guard the calls the function to prevent that.\r\n",
                                           "updatedAt":  "2023-07-29T18:07:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iwsih",
                                           "createdAt":  "2023-07-29T22:18:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODCLJLw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2023-07-29T22:56:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003e @AaronRobinsonMSFT would you mind sharing a callstack of the issue?\r\n\r\nI don\u0027t have one immediately handy. The gist though was this was being called through a CLRComposition.dll call. I don\u0027t recall if that was the precise name, but it started with \"CLR\". It was enumerating native locations. The scenario I last hit this issue was debugging a VBA script in Excel loading a COM server implemented in managed code. I was going to help @hoyosjs create a repro case on Monday.",
                                           "updatedAt":  "2023-07-29T22:18:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qcHH5",
                                           "createdAt":  "2023-10-30T17:50:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikelle-rogers",
                                           "body":  "Hi @AaronRobinsonMSFT, would you please work with me to create a repro case of this issue? ",
                                           "updatedAt":  "2023-10-30T17:51:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hWoVf",
                                           "createdAt":  "2025-03-07T17:55:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@tommcdon I\u0027ve just hit this today. Here is the call stack on the debugger side:\n```\n # Child-SP          RetAddr               Call Site\n00 (Inline Function) --------`--------     KERNELBASE!DebugBreak\n01 00000093`6397b178 00007ffe`745d149f     KERNELBASE!wil::details::DebugBreak+0x2 \n02 00000093`6397b180 00007ffe`744d13a2     mscordbi!DbgAssertDialog+0x31f [D:\\git\\runtime2\\src\\coreclr\\utilcode\\debug.cpp @ 431] \n03 00000093`6397b390 00007ffe`7453cd5f     mscordbi!ConvertRegNumToCorDebugRegister+0x52 [D:\\git\\runtime2\\src\\coreclr\\debug\\inc\\amd64\\primitives.h @ 83] \n04 00000093`6397b3c0 00007ffe`8d000971     mscordbi!CordbVariableHome::GetRegister+0x6ff [D:\\git\\runtime2\\src\\coreclr\\debug\\di\\module.cpp @ 3876] \n05 00000093`6397b570 00007ffe`8cff95aa     CLRComposition!\u003clambda_2f56550975d5ec540b887af10a29e895\u003e::operator()+0x379 \n06 00000093`6397b700 00007ffe`8d015a9f     CLRComposition!ConvertException\u003c\u003clambda_2f56550975d5ec540b887af10a29e895\u003e \u003e+0x12 \n07 (Inline Function) --------`--------     CLRComposition!Debugger::TargetComposition::Services::Managed::ClrCodeScope::InitializeLocals+0x19 \n08 (Inline Function) --------`--------     CLRComposition!Debugger::TargetComposition::Services::Managed::ClrCodeScope::GetLocalCount+0x19 \n09 00000093`6397b740 00007ffe`8cffb9b7     CLRComposition!Debugger::TargetComposition::Services::Managed::ClrLocalEnumerator::Reset+0x2f \n0a (Inline Function) --------`--------     CLRComposition!Microsoft::WRL::Details::MakeAndInitialize+0x7b \n0b 00000093`6397b770 00007ffe`8d00ea43     CLRComposition!Microsoft::WRL::Details::MakeAndInitialize\u003cDebugger::TargetComposition::Services::Managed::ClrLocalEnumerator,ISvcSymbolSetEnumerator,Debugger::TargetComposition::Services::Managed::ClrCodeScope *\u003e+0xb3 \n0c 00000093`6397b7b0 00007ffe`8d8078d4     CLRComposition!Debugger::TargetComposition::Services::Managed::ClrCodeScopeEnumerator::GetNext+0x143 \n0d 00000093`6397b800 00007ffe`8d807753     dbgeng!DIAEnumeratorWrapper::NextServiceSymbol+0xb4 \n0e 00000093`6397b860 00007ffe`8d806f59     dbgeng!DIAGenericEnumeratorWrapperBase\u003cIDiaSourceFile,IDiaEnumSourceFiles,ISvcSourceFile\u003e::NextElement+0x33 \n0f 00000093`6397b8b0 00007ffe`9163d485     dbgeng!DIAGenericEnumeratorWrapperBase\u003cIDiaSymbol,IDiaEnumSymbols,ISvcSymbol\u003e::Next+0xb9 \n10 00000093`6397b940 00007ffe`91655b3d     dbghelp!diaGetLocals+0x221\n11 (Inline Function) --------`--------     dbghelp!diaGetSymbols+0x13\n12 (Inline Function) --------`--------     dbghelp!diaEnumSymbols+0x13\n13 (Inline Function) --------`--------     dbghelp!modEnumSymbols+0x13\n14 00000093`6397d990 00007ffe`9165b045     dbghelp!EnumSymbols+0xa9\n15 00000093`6397f990 00007ffe`9165b31b     dbghelp!SymEnumSymbolsExW+0x55 \n16 00000093`6397f9f0 00007ffe`8d4a8143     dbghelp!SymEnumSymbolsW+0x1b \n17 00000093`6397fa30 00007ffe`8d35fd2f     dbgeng!UnmanagedStackFrameInfo::EnumLocalsStatic+0x33 \n18 00000093`6397fa70 00007ffe`8d3674e9     dbgeng!DebugSymbolGroup::AddScopeSymbols+0x14b \n19 00000093`6397fda0 00007ff6`b9d0cd61     dbgeng!DebugClient::GetScopeSymbolGroup2+0x139 \n1a 00000093`6397fdd0 00007ff6`b9d0a1a4     windbg!WinLocals::ReadState+0x51\n1b 00000093`6397fe10 00007ff6`b9d09c42     windbg!StateBuffer::Update+0x48\n1c 00000093`6397fe40 00007ff6`b9cecf8d     windbg!ReadStateBuffers+0x156\n1d 00000093`6397fe70 00007fff`7123e8d7     windbg!EngineLoop+0x33d\n1e 00000093`6397fee0 00007fff`7271bf2c     KERNEL32!BaseThreadInitThunk+0x17\n1f 00000093`6397ff10 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\n\n```",
                                           "updatedAt":  "2025-03-07T17:55:05Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Debugger assert during register mapping",
        "labels":  [
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/89617",
        "createdAt":  "2023-07-28T07:12:47Z",
        "number":  89617,
        "author":  "davmason",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-07-31T22:21:59Z",
        "body":  "Right now we issue ELT callbacks for UnmanagedCallersOnly methods, they likely do not work well with argument inspection since we use native calling conventions instead of managed ones.\r\n\r\nWe need to test this scenario and there will likely be bugs. The easiest solution would be to make the argument inspection APIs return an appropriate HR to indicate that it is an UnmanagedCallersOnly method (i.e. fail gracefully).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYqfLBQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5ip8sF",
                                           "createdAt":  "2023-07-28T07:12:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nRight now we issue ELT callbacks for UnmanagedCallersOnly methods, they likely do not work well with argument inspection since we use native calling conventions instead of managed ones.\r\n\r\nWe need to test this scenario and there will likely be bugs. The easiest solution would be to make the argument inspection APIs return an appropriate HR to indicate that it is an UnmanagedCallersOnly method (i.e. fail gracefully).\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edavmason\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003edavmason\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-07-28T07:12:54Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "ICorProfiler ELT hooks need tested with UnmanagedCallersOnly methods",
        "labels":  [
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/90079",
        "createdAt":  "2023-08-06T18:14:12Z",
        "number":  90079,
        "author":  "filipnavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-01-28T21:36:10Z",
        "body":  "\u003e Looks like a bad interaction of diagnostsic bits -- we are trying to notify the debugger of an exception and of a class oad (triggered by a jit request for PGO dat).\r\n\r\nStack traces: \r\n[Sample of Avalonia Application.txt](https://github.com/dotnet/runtime/files/12270170/Sample.of.Avalonia.Application.txt)\r\n\r\nRepro on macOS:\r\n- Sample project: https://github.com/filipnavara/emptyavalonia (empty Avalonia app)\r\n- Run from VS Code with F5\r\n- Press Cmd+Q\r\n\r\nHappens with .NET 6 and .NET 7, didn\u0027t test it on newer runtime.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnCuhAg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5jW28h",
                                           "createdAt":  "2023-08-06T18:14:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\u003e Looks like a bad interaction of diagnostsic bits -- we are trying to notify the debugger of an exception and of a class oad (triggered by a jit request for PGO dat).\r\n\r\nStack traces: \r\n[Sample of Avalonia Application.txt](https://github.com/dotnet/runtime/files/12270170/Sample.of.Avalonia.Application.txt)\r\n\r\nRepro on macOS:\r\n- Sample project: https://github.com/filipnavara/emptyavalonia (empty Avalonia app)\r\n- Run from VS Code with F5\r\n- Press Cmd+Q\r\n\r\nHappens with .NET 6 and .NET 7, didn\u0027t test it on newer runtime.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003efilipnavara\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-06T18:14:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jW29Q",
                                           "createdAt":  "2023-08-06T18:14:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "cc @AndyAyersMS ",
                                           "updatedAt":  "2023-08-06T18:14:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jW3OX",
                                           "createdAt":  "2023-08-06T18:20:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AndyAyersMS",
                                           "body":  "\u003e cc @AndyAyersMS\r\n\r\nThanks for opening an issue.",
                                           "updatedAt":  "2023-08-06T18:20:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jW7ML",
                                           "createdAt":  "2023-08-06T19:50:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@filipnavara Thanks for reporting the issue.  Does this reproduce on ARM64 (M1/M2) or X64 macOS (or both)?  ",
                                           "updatedAt":  "2023-08-06T19:50:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jW7S5",
                                           "createdAt":  "2023-08-06T19:52:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "Tested and reproduced on M1. The underlying mechanism of the deadlock doesn\u0027t seem platform specific though.",
                                           "updatedAt":  "2023-08-06T19:52:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jaqxS",
                                           "createdAt":  "2023-08-07T14:11:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@filipnavara thanks! ",
                                           "updatedAt":  "2023-08-07T14:11:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Dlh61",
                                           "createdAt":  "2024-07-04T00:28:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikelle-rogers",
                                           "body":  "I tried reproducing it with .NET 6 on Windows and wasn\u0027t able to, will continue once I have access to M1. ",
                                           "updatedAt":  "2024-07-04T00:28:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DzBUs",
                                           "createdAt":  "2024-07-05T17:27:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikelle-rogers",
                                           "body":  "I also tried reproducing it with .NET 7 on Mac x64, but wasn\u0027t able to because there was a NullReferenceException in the Avalonia code.",
                                           "updatedAt":  "2024-07-05T17:27:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DzRBf",
                                           "createdAt":  "2024-07-05T18:19:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikelle-rogers",
                                           "body":  "Here is the stack of the avalonia app (was able to reproduce on M1)\r\n```\r\n* thread #1, queue = \u0027com.apple.main-thread\u0027, stop reason = signal SIGSTOP\r\n  * frame #0: 0x0000000100d8fbe8 libcoreclr.dylib`CorUnix::InternalWaitForMultipleObjectsEx(CorUnix::CPalThread*, unsigned int, void* const*, int, unsigned int, int, int) + 1760\r\n    frame #1: 0x0000000100e74c04 libcoreclr.dylib`Thread::DoAppropriateWaitWorker(int, void**, int, unsigned int, WaitMode) + 1040\r\n    frame #2: 0x0000000100e6ffa4 libcoreclr.dylib`Thread::DoAppropriateWait(int, void**, int, unsigned int, WaitMode, PendingSync*) + 68\r\n    frame #3: 0x0000000101157320 libcoreclr.dylib`WaitForEndOfShutdown() + 72\r\n    frame #4: 0x0000000100dd7c90 libcoreclr.dylib`CrstBase::ReleaseAndBlockForShutdownIfNotSpecialThread() + 120\r\n    frame #5: 0x0000000101070ec8 libcoreclr.dylib`Debugger::LockForEventSending(Holder\u003cDebugger*, \u0026(Debugger::AcquireDebuggerLock(Debugger*)), \u0026(Debugger::ReleaseDebuggerLock(Debugger*)), 0ul, \u0026(int CompareDefault\u003cDebugger*\u003e(Debugger*, Debugger*)), true\u003e*) + 48\r\n    frame #6: 0x000000010106881c libcoreclr.dylib`DebuggerController::DispatchPatchOrSingleStep(Thread*, _CONTEXT*, unsigned char const*, SCAN_TRIGGER) + 512\r\n    frame #7: 0x0000000101069b28 libcoreclr.dylib`DebuggerController::DispatchNativeException(_EXCEPTION_RECORD*, _CONTEXT*, unsigned int, Thread*) + 596\r\n    frame #8: 0x000000010107621c libcoreclr.dylib`Debugger::FirstChanceNativeException(_EXCEPTION_RECORD*, _CONTEXT*, unsigned int, Thread*, int) + 124\r\n    frame #9: 0x0000000100fa4044 libcoreclr.dylib`HandleHardwareException(PAL_SEHException*) + 396\r\n    frame #10: 0x0000000100d65860 libcoreclr.dylib`SEHProcessException(PAL_SEHException*) + 348\r\n    frame #11: 0x0000000100d98888 libcoreclr.dylib`PAL_DispatchException + 136\r\n    frame #12: 0x0000000100d98518 libcoreclr.dylib`PAL_DispatchExceptionWrapper + 16\r\n    frame #13: 0x0000000104cbea68\r\n    frame #14: 0x0000000102cf6240 libAvaloniaNative.dylib`ComPtr\u003cIAvnDispatcher\u003e::~ComPtr() + 36\r\n    frame #15: 0x000000019f9482e8 libsystem_c.dylib`__cxa_finalize_ranges + 476\r\n    frame #16: 0x000000019f948070 libsystem_c.dylib`exit + 44\r\n    frame #17: 0x000000019faa38d0 libdyld.dylib`dyld4::LibSystemHelpers::exit(int) const + 20\r\n    frame #18: 0x000000019f70212c dyld`start + 2436\r\n```",
                                           "updatedAt":  "2024-07-22T19:36:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FW5YD",
                                           "createdAt":  "2024-07-18T19:26:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikelle-rogers",
                                           "body":  "After further investigation, we found that the Runtime was shut down and Avalonia is calling into the Runtime after it is shut down. This is unsupported behavior, so we have opened an issue in Avalonia [here](https://github.com/AvaloniaUI/Avalonia/issues/16368). We will close this issue.\r\n\r\nWe know the Runtime is shut down because\r\n```\r\ng_fEEShutDown = 0x00000027 = ShutDown_Start|ShutDown_Finalize1|ShutDown_Finalize2|ShutDown_SyncBlock`. \r\n\r\nThe call stack of the app when it is hanging is: \r\n        Child SP               IP Call Site\r\n000000016BD73D00 0000000195CA334C libsystem_platform.dylib!_platform_memmove + 428\r\n000000016BD73D00 0000000106AC1BD8 libcoreclr.dylib!Thread::DoAppropriateWaitWorker(int, void**, int, unsigned int, WaitMode, void*) + 924\r\n000000016BD73F60 0000000106AC11BC libcoreclr.dylib!Thread::DoAppropriateWait(int, void**, int, unsigned int, WaitMode, PendingSync*)::$_1::operator()(Thread::DoAppropriateWait(int, void**, int, unsigned int, WaitMode, PendingSync*)::__EEParam*) const + 92\r\n000000016BD73F90 0000000106AB98D0 libcoreclr.dylib!Thread::DoAppropriateWait(int, void**, int, unsigned int, WaitMode, PendingSync*) + 352\r\n000000016BD740A0 0000000106CD3F80 libcoreclr.dylib!CLREventBase::WaitEx(unsigned int, WaitMode, PendingSync*) + 328\r\n000000016BD740F0 0000000106CD3E20 libcoreclr.dylib!CLREventBase::Wait(unsigned int, int, PendingSync*) + 84\r\n000000016BD74130 00000001070D1468 libcoreclr.dylib!WaitForEndOfShutdown() + 132\r\n000000016BD74150 0000000106947A94 libcoreclr.dylib!CrstBase::ReleaseAndBlockForShutdownIfNotSpecialThread() + 68\r\n000000016BD74190 0000000106F672C8 libcoreclr.dylib!Debugger::DoNotCallDirectlyPrivateLock() + 400\r\n000000016BD741E0 0000000106F54D34 libcoreclr.dylib!Debugger::AcquireDebuggerLock(Debugger*) + 24\r\n000000016BD74200 0000000106F65E48 libcoreclr.dylib!FunctionBase\u003cDebugger*, \u0026(Debugger::AcquireDebuggerLock(Debugger*)), \u0026(Debugger::ReleaseDebuggerLock(Debugger*))\u003e::DoAcquire() + 28\r\n000000016BD74220 0000000106F65DE8 libcoreclr.dylib!BaseHolder\u003cDebugger*, FunctionBase\u003cDebugger*, \u0026(Debugger::AcquireDebuggerLock(Debugger*)), \u0026(Debugger::ReleaseDebuggerLock(Debugger*))\u003e, 0ul, \u0026(int CompareDefault\u003cDebugger*\u003e(Debugger*, Debugger*))\u003e::Acquire() + 100\r\n000000016BD74240 0000000106F6C4F8 libcoreclr.dylib!Debugger::LockForEventSending(Holder\u003cDebugger*, \u0026(Debugger::AcquireDebuggerLock(Debugger*)), \u0026(Debugger::ReleaseDebuggerLock(Debugger*)), 0ul, \u0026(int CompareDefault\u003cDebugger*\u003e(Debugger*, Debugger*)), true\u003e*) + 100\r\n000000016BD74270 0000000106F54708 libcoreclr.dylib!DebuggerController::DispatchPatchOrSingleStep(Thread*, _CONTEXT*, unsigned char const*, SCAN_TRIGGER) + 1204\r\n000000016BD74460 0000000106F57A1C libcoreclr.dylib!DebuggerController::DispatchNativeException(_EXCEPTION_RECORD*, _CONTEXT*, unsigned int, Thread*) + 1380\r\n000000016BD74510 0000000106F781D0 libcoreclr.dylib!Debugger::FirstChanceNativeException(_EXCEPTION_RECORD*, _CONTEXT*, unsigned int, Thread*, int) + 168\r\n000000016BD74590 0000000106D2D98C libcoreclr.dylib!HandleHardwareException(PAL_SEHException*) + 1940\r\n000000016BD75EB0 0000000106809C58 libcoreclr.dylib!SEHProcessException(PAL_SEHException*) + 256\r\n000000016BD75EE0 000000010689C744 libcoreclr.dylib!PAL_DispatchExceptionInner(_CONTEXT*, _EXCEPTION_RECORD*) + 308\r\n000000016BD75F90 000000010689C5DC libcoreclr.dylib!PAL_DispatchException + 52\r\n000000016BD765D0 000000010689BB30 libcoreclr.dylib!PAL_DispatchExceptionWrapper + 16\r\n000000016BD76FB0 0000000301A34B90 \r\nFFFFFFFFFFFFFFFF 0000000107616240 libAvaloniaNative.dylib!ComPtr\u003cIAvnDispatcher\u003e::~ComPtr() + 36\r\n000000016BD77000 0000000195B302E8 libsystem_c.dylib!__cxa_finalize_ranges + 476\r\n000000016BD77060 0000000195B30070 libsystem_c.dylib!exit + 44\r\n000000016BD77080 0000000195C8B8D0 libdyld.dylib!dyld4::LibSystemHelpers::getenv(char const*) const\r\n000000016BD77090 00000001958EA12C dyld!start + 2436\r\n```\r\n\r\nThe frame without a symbol is MicroCom.Runtime.MicroComVtblBase.Release(MicroCom.Runtime.Ccw*). ",
                                           "updatedAt":  "2024-07-22T19:37:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FXA2F",
                                           "createdAt":  "2024-07-18T19:42:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODqtwmQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mikelle-rogers",
                                                                               "createdAt":  "2024-07-19T00:02:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2024-07-19T16:49:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Avalonia is calling into the Runtime after it is shut down. This is unsupported behavior.\r\n\r\nThat\u0027s not correct. This is expected to work and not hang. We have fixed number of similar bugs. For example https://github.com/dotnet/runtime/pull/100293 was fixing a very similar hang/crash where some networking code was calling into the runtime after the shutdown.\r\n\r\nRuntime shutdown is not really a thing. We are really only notifying the diagnostic stack about the shutdown. However, the runtime is expected to work until the OS physically kills the process and the diagnostic stack is expected to stay out of the way once it was notified about shutdown.\r\n\r\nIt is fine for the debugger experience to be degraded after the diagnostic stack was notified about the shutdown. However, it is not expected to hang.",
                                           "updatedAt":  "2024-07-18T19:42:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FXErD",
                                           "createdAt":  "2024-07-18T19:45:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e we have opened an issue in Avalonia https://github.com/AvaloniaUI/Avalonia/issues/16368\r\n\r\nI agree that Avalonia may want to avoid calling into the runtime during shutdown. Minimizing work done during shutdown is general goodness. But it is not changing the fact that we have a bug in the runtime shutdown logic. ",
                                           "updatedAt":  "2024-07-18T19:45:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FfCIT",
                                           "createdAt":  "2024-07-19T15:55:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODqs0TQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2024-07-19T16:00:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mikelle-rogers",
                                           "body":  "This issue no longer repros when using Avalonia 11.0.11.",
                                           "updatedAt":  "2024-07-19T15:55:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FfDcT",
                                           "createdAt":  "2024-07-19T15:59:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODqs0Sw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2024-07-19T16:00:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e This issue no longer repros when using Avalonia 11.0.11.\r\n\r\nWell, yeah, because Avalonia fixed the issue that triggered it... which still doesn\u0027t fix the debugger/runtime behavior even if the Avalonia users are unblocked.",
                                           "updatedAt":  "2024-07-19T15:59:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FfEbH",
                                           "createdAt":  "2024-07-19T16:01:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@jkotas Since Avalonia has already fixed the issue, shall we close this issue?",
                                           "updatedAt":  "2024-07-19T16:01:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FfGdV",
                                           "createdAt":  "2024-07-19T16:06:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODqtvqQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkotas",
                                                                               "createdAt":  "2024-07-19T16:12:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mikelle-rogers",
                                                                               "createdAt":  "2024-07-19T16:46:24Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e @jkotas Since Avalonia has already fixed the issue, shall we close this issue?\r\n\r\nI am fine with deprioritizing any work on this, but it\u0027s NOT fixed. The deadlock can still be triggered with the latest runtime. It just happened that Avalonia 11.0.0 was a high profile library that triggered it, and that particular version continues to trigger it today. The same problem can be triggered by other code, and I have seen it happening. This was just convenient way to reproduce it.",
                                           "updatedAt":  "2024-07-19T16:06:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FfKbc",
                                           "createdAt":  "2024-07-19T16:17:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODqtvtA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mikelle-rogers",
                                                                               "createdAt":  "2024-07-19T16:46:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "I agree with @filipnavara. This bug is not fixed. \r\n\r\nWe were lucky that the Avalonia repro was reliable enough to get to the bottom of it. The most likely manifestation of this bug is intermittent hang at the end of debugging session. My guess is that it is hit intermittently by quite a few users out there in number of workloads that we just do not know about.\r\n\r\n",
                                           "updatedAt":  "2024-07-19T16:18:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cK6EC",
                                           "createdAt":  "2025-01-28T21:36:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Moving to future until we receive more complaints about debugger shutdown issues",
                                           "updatedAt":  "2025-01-28T21:36:09Z"
                                       }
                                   ],
                         "totalCount":  18
                     },
        "title":  "Avalonia calling into the runtime after shut down",
        "labels":  [
                       "area-Diagnostics-coreclr",
                       "in-pr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/90224",
        "createdAt":  "2023-08-09T12:26:50Z",
        "number":  90224,
        "author":  "Leonardo-Ferreira",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-09T17:58:53Z",
        "body":  "While trying to solve https://github.com/dotnet/diagnostics/issues/4139, @hoyosjs proposed to set the env variable. Reading about it, I was wondering: instead of limiting the amount of toys each kid can play with at a give time (which was supposed to be the goal of pod `limits` config), is there a way to make the kids give the toys back as soon as they\u0027re done? something like `DEALLOC_RETURN_TO_OS_MAX_DELAY = 60000` (1 minute)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOY6Yshg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5jo94g",
                                           "createdAt":  "2023-08-09T15:55:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "`MALLOC_ARENA_MAX` is implemented in [glibc](https://www.gnu.org/software/libc/) library. It is not implemented by .NET runtime.\r\n\r\nglibc memory allocation tunables are documented in https://www.gnu.org/software/libc/manual/html_node/Memory-Allocation-Tunables.html . If you would like to propose new ones, the right place to do that are glibc discussion lists or issue tracker.",
                                           "updatedAt":  "2023-08-09T15:55:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jo-KD",
                                           "createdAt":  "2023-08-09T15:55:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWhile trying to solve https://github.com/dotnet/diagnostics/issues/4139, @hoyosjs proposed to set the env variable. Reading about it, I was wondering: instead of limiting the amount of toys each kid can play with at a give time (which was supposed to be the goal of pod `limits` config), is there a way to make the kids give the toys back as soon as they\u0027re done? something like `DEALLOC_RETURN_TO_OS_MAX_DELAY = 60000` (1 minute)\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eLeonardo-Ferreira\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`tracking-external-issue`, `area-Diagnostics-coreclr`, `untriaged`, `needs-area-label`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-09T15:55:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jpiyG",
                                           "createdAt":  "2023-08-09T17:13:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Leonardo-Ferreira",
                                           "body":  "well, I wouldn\u0027t like to propose something new, its just that im working on this \"leak\" issue that\u0027s starting to look more and more like a \"well, yeah you released that, but im not gonna give that back to the OS\"... meanwhile, a api that should be using 150MB while serving 100 req/s is chugging as much as you give it without anyone using it...",
                                           "updatedAt":  "2023-08-09T17:13:48Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Alternative to MALLOC_ARENA_MAX?",
        "labels":  [
                       "tracking-external-issue",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/90563",
        "createdAt":  "2023-08-15T01:04:38Z",
        "number":  90563,
        "author":  "jkotas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC_qSBA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kevin-montrose",
                                            "createdAt":  "2023-08-15T15:39:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NN---",
                                            "createdAt":  "2024-02-23T07:06:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fbrosseau",
                                            "createdAt":  "2025-03-03T21:27:23Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2025-08-05T18:25:41Z",
        "body":  "Lock contention has been observed in a real-world service at the following callstacks during a failover period where a lot of exceptions are thrown:\r\n\r\n![image](https://github.com/dotnet/runtime/assets/6668460/75dc3de2-16b4-4061-8c5f-de70fa56e2d2)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZAi70g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5kCJn5",
                                           "createdAt":  "2023-08-15T01:04:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nLock contention has been observed in a real-world service at the following callstacks during a failover period where a lot of exceptions are thrown:\r\n\r\n![image](https://github.com/dotnet/runtime/assets/6668460/75dc3de2-16b4-4061-8c5f-de70fa56e2d2)\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejkotas\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003ehoyosjs\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`tenet-performance`, `area-Diagnostics-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-15T01:04:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kCLvS",
                                           "createdAt":  "2023-08-15T01:20:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODInEvw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "KalleOlaviNiemitalo",
                                                                               "createdAt":  "2023-10-04T14:06:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "The contention is caused by `\u003cDebugType\u003efull\u003c/DebugType\u003e` debug format by some of the libraries. This debug format makes the runtime switch to read-write variant of the metadata readers that is unnecessary and introduces the contention.\r\n\r\nStandalone repro: https://gist.github.com/jkotas/617109b64d9b0ad52b491cdf021b2f8a\r\n\r\n## Actual results\r\n\r\n20 core dev box\r\n\r\n* DebugType=portable (default in .NET Core/5+):\r\n`rmdir /s /q bin obj \u0026\u0026 dotnet build -c Release \u0026\u0026 dotnet run -c Release`\r\n21,000 exceptions thrown, formatted and handled per second\r\n\r\n* DebugType=full (default in .NET Framework):\r\n`rmdir /s /q bin obj \u0026\u0026 dotnet build -c Release /p:DebugType=full \u0026\u0026 dotnet run -c Release`\r\n 1,400 exceptions thrown, formatted and handled per second (more than one order of magnitude less)\r\n\r\n## Expected results\r\n\r\n`DebugType=portable` and `DebugType=full` should be able to achieve a roughly same exception handling rate.",
                                           "updatedAt":  "2023-08-15T01:21:43Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Lock contention in StackTrace/Exception.ToString()",
        "labels":  [
                       "tenet-performance",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/92809",
        "createdAt":  "2023-09-29T09:48:57Z",
        "number":  92809,
        "author":  "weltkante",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-10-13T18:09:31Z",
        "body":  "### Description\r\n\r\nI\u0027ve got a scenario where the debugger consistently reports wrong values for the loop variable, accessing the foreach loop value of the next iteration. The runtime seems to lag behind one iteration, while the debugger shows value of the variable it would have in the next iteration. This makes debugging confusing and very hard if you happen to trigger it.\r\n\r\nThe problem happens every run, I\u0027ve reduced the code triggering the issue below (some code comparing assemblies tripped into this bug, originally using Mono.Cecil, but moving to plain reflection observes the same behavior given the same structure of code)\r\n\r\n### Reproduction Steps\r\n\r\n```c#\r\nusing System.Diagnostics;\r\nusing System.Reflection;\r\n\r\nawait BugRepro(typeof(System.Collections.Immutable.ImmutableDictionary\u003c,\u003e.Enumerator), null);\r\n\r\n// method must be async for the bug to trigger\r\nstatic async Task BugRepro(Type type, Type? comparingType)\r\n{\r\n    const BindingFlags f = BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance;\r\n\r\n    foreach (var field in type.GetFields(f))\r\n    {\r\n        // repeating the assert from below is necessary to trigger the bug\r\n        if (comparingType?.GetFields(f).SingleOrDefault(x =\u003e x.Name == field.Name) is null)\r\n            continue;\r\n\r\n        // original code did more stuff but could remove it\r\n    }\r\n\r\n    foreach (var field in type.GetFields(f))\r\n    {\r\n        // inspecting debugger variables, this should be false (can even set a breakpoint and step through)\r\n        var fieldContainsGenericParameter = field.FieldType.ContainsGenericParameters;\r\n        if (fieldContainsGenericParameter)\r\n        {\r\n            // inspecting debugger variables, this assert should have triggered\r\n            Debug.Assert(field.Name != \"_enumeratingBuilderVersion\");\r\n\r\n            // inspect debugger variables mentioned above\r\n            Debugger.Break();\r\n\r\n            // repeating the assert is necessary to trigger the bug\r\n            Debug.Assert(comparingType?.GetFields(f).SingleOrDefault(x =\u003e x.Name == field.Name) is null);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### Expected behavior\r\n\r\nthe foreach loop variable shown in the debugger should match its actual value the runtime is using\r\n\r\n### Actual behavior\r\n\r\nthe debugger shows the foreach loop variable of the next iteration and bases all its displayed information off of that\r\n\r\nin particular the debugger shows us being in the if-block for the field `_enumeratingBuilderVersion` which has type Int32 for which `ContainsGenericParameters` is false, yet the runtime assigns `fieldContainsGenericParameter` true (which it is for the previous field in the iteration)\r\n\r\n### Regression?\r\n\r\nno, repros in Desktop Framework and VS 2019 as well as .NET 7 and 8 under VS 2022\r\n\r\n### Known Workarounds\r\n\r\nnone known, once the code is structured to trigger the issue, the debugger seems to consistently report wrong values\r\n\r\n### Configuration\r\n\r\nx64 Windows 10 22H2 19045.3448\r\n\r\n.NET Framework 4.8.9181.0\r\n.NET 7.0.11\r\n.NET 8.0.100 rc.1.23455.8\r\n\r\nVS 2019 16.11.30\r\nVS 2022 17.8.0 Preview 2.0\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOaQV4pA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5nv7DF",
                                           "createdAt":  "2023-09-29T09:49:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @JulieLeeMSFT, @jakobbotsch\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nI\u0027ve got a scenario where the JIT generates bad code, accessing the foreach loop value of a previous iteration. The VS debugger \"sees\" the right value of the variable when inspecting but the runtime acts as if it had the value of the previous iteration (when accessing and storing referenced fields in variables or taking branches).\r\n\r\nThe problem happens every run and is deterministic, but I can\u0027t share the program as-is nor does it seem easy to reproduce in a blank project. Is there anything I can do to diagnose this further or is the only way to proceed trying to build a repro that I can share?\n\n### Reproduction Steps\n\nnot available publically, first want to clarify what the best way to proceed is\n\n### Expected behavior\n\nthe foreach loop variable should be updated on each iteration\n\n### Actual behavior\n\nthe foreach loop variable acts as if it had the value of a previous iteration\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\ndotnet 7.0.11 x64 windows 10\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eweltkante\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-CodeGen-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-09-29T09:49:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5nyfRp",
                                           "createdAt":  "2023-09-29T17:58:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AndyAyersMS",
                                           "body":  "fyi @dotnet/jit-contrib ",
                                           "updatedAt":  "2023-09-29T17:58:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5nzOv2",
                                           "createdAt":  "2023-09-29T21:00:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JulieLeeMSFT",
                                           "body":  "@BruceForstall, PTAL if we need to fix it in .NET 8.",
                                           "updatedAt":  "2023-09-29T21:00:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5nzrKW",
                                           "createdAt":  "2023-09-30T00:18:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BruceForstall",
                                           "body":  "@weltkante Thank you for the bug report.\r\n\r\nI\u0027m having trouble reproducing this problem locally. On the command-line, I did `dotnet new console`, replaced the template `Program.cs` with your test case above, and ran `dotnet run -c Debug` and `dotnet run -c Release` for both .NET 7 and .NET 8 (RC1). Based on your report, I expected to see `Debug.Assert(field.Name != \"_enumeratingBuilderVersion\");` assert.\r\n\r\nDoes the problem reproduce for you on the command-line? Or only while running under the debugger?\r\n\r\nHave you tried .NET 8 to see if it continues to reproduce there?\r\n",
                                           "updatedAt":  "2023-09-30T00:18:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5n0JTE",
                                           "createdAt":  "2023-09-30T09:17:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "weltkante",
                                           "body":  "Had time to make more tests, this does repro under .NET 8 and FWIW also under Desktop Framework with VS 2019, so no regression but a longstanding bug. I\u0027m not sure how you tested it under the command line since the repro is explicitly built to break into the debugger to inspect the variables, so yes, you need a debugger to observe the difference.\r\n\r\nI tried to make it observable without a debugger (and failed) so I think I understand this a little better now. I also tried single stepping through the repro code and its not that the runtime is behind one iteration but the debugger somehow shows the loop variable for the next iteration very consistently, but only for this very specific structured code, if its structure is simplified further I see the \"right\" values in the debugger.\r\n\r\nWhen I originally encountered the issue the program was in the middle of comparing assemblies so I couldn\u0027t see the whole picture and probably trusted the debugger too much.\r\n\r\nThe question is, I guess, is the runtime responsible to extract and report the loop iteration variable to the debugger? Then this particular structure of the program is still treated incorrectly, maybe optimized in a way that makes the variable impossible to recover? If its VS\u0027 responsibility to figure out the loop variable without runtime help I probably need to re-report the issue there.\r\n\r\nLet me know how to proceed.",
                                           "updatedAt":  "2023-09-30T10:49:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5oja9m",
                                           "createdAt":  "2023-10-10T00:35:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BruceForstall",
                                           "body":  "Ok, I\u0027m able to reproduce this in the debugger. What I see is that single-stepping through the first `foreach (var field in type.GetFields(f))` loop, I see the value of `field` change every iteration (there are 4 iterations), when I have `field` in the Watch Window, and the last iteration the name is \"_enumeratingBuilderVersion\". Single-stepping through the second loop, the value of `field` never changes in the Watch Window (it is always \"_enumeratingBuilderVersion\").\r\n\r\nHowever, if I change the second loop to be `foreach (var field2 in type.GetFields(f))` (that is, change `field` to a new `field2`) then inspecting / viewing `field2` works as expected.\r\n\r\nThis also seems to be specific to async, which generates a lot of complicated code.\r\n\r\n@tommcdon This looks like a debugger issue. Can you investigate?",
                                           "updatedAt":  "2023-10-10T00:35:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ojbA_",
                                           "createdAt":  "2023-10-10T00:35:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nI\u0027ve got a scenario where the debugger consistently reports wrong values for the loop variable, accessing the foreach loop value of the next iteration. The runtime seems to lag behind one iteration, while the debugger shows value of the variable it would have in the next iteration. This makes debugging confusing and very hard if you happen to trigger it.\r\n\r\nThe problem happens every run, I\u0027ve reduced the code triggering the issue below (some code comparing assemblies tripped into this bug, originally using Mono.Cecil, but moving to plain reflection observes the same behavior given the same structure of code)\r\n\r\n### Reproduction Steps\r\n\r\n```c#\r\nusing System.Diagnostics;\r\nusing System.Reflection;\r\n\r\nawait BugRepro(typeof(System.Collections.Immutable.ImmutableDictionary\u003c,\u003e.Enumerator), null);\r\n\r\n// method must be async for the bug to trigger\r\nstatic async Task BugRepro(Type type, Type? comparingType)\r\n{\r\n    const BindingFlags f = BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance;\r\n\r\n    foreach (var field in type.GetFields(f))\r\n    {\r\n        // repeating the assert from below is necessary to trigger the bug\r\n        if (comparingType?.GetFields(f).SingleOrDefault(x =\u003e x.Name == field.Name) is null)\r\n            continue;\r\n\r\n        // original code did more stuff but could remove it\r\n    }\r\n\r\n    foreach (var field in type.GetFields(f))\r\n    {\r\n        // inspecting debugger variables, this should be false (can even set a breakpoint and step through)\r\n        var fieldContainsGenericParameter = field.FieldType.ContainsGenericParameters;\r\n        if (fieldContainsGenericParameter)\r\n        {\r\n            // inspecting debugger variables, this assert should have triggered\r\n            Debug.Assert(field.Name != \"_enumeratingBuilderVersion\");\r\n\r\n            // inspect debugger variables mentioned above\r\n            Debugger.Break();\r\n\r\n            // repeating the assert is necessary to trigger the bug\r\n            Debug.Assert(comparingType?.GetFields(f).SingleOrDefault(x =\u003e x.Name == field.Name) is null);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### Expected behavior\r\n\r\nthe foreach loop variable shown in the debugger should match its actual value the runtime is using\r\n\r\n### Actual behavior\r\n\r\nthe debugger shows the foreach loop variable of the next iteration and bases all its displayed information off of that\r\n\r\nin particular the debugger shows us being in the if-block for the field `_enumeratingBuilderVersion` which has type Int32 for which `ContainsGenericParameters` is false, yet the runtime assigns `fieldContainsGenericParameter` true (which it is for the previous field in the iteration)\r\n\r\n### Regression?\r\n\r\nno, repros in Desktop Framework and VS 2019 as well as .NET 7 and 8 under VS 2022\r\n\r\n### Known Workarounds\r\n\r\nnone known, once the code is structured to trigger the issue, the debugger seems to consistently report wrong values\r\n\r\n### Configuration\r\n\r\nx64 Windows 10 22H2 19045.3448\r\n\r\n.NET Framework 4.8.9181.0\r\n.NET 7.0.11\r\n.NET 8.0.100 rc.1.23455.8\r\n\r\nVS 2019 16.11.30\r\nVS 2022 17.8.0 Preview 2.0\r\n\r\n### Other information\r\n\r\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eweltkante\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003eBruceForstall\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-10-10T00:35:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5o5fL6",
                                           "createdAt":  "2023-10-12T15:54:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Simplified repro.  Capturing the loop variable in a for/foreach in a lambda seems to trigger the bug.  This looks like a Roslyn issue but will investigate further before re-routing.\r\n\r\n```c#\r\nusing System.Diagnostics;\r\n\r\nawait BugRepro();\r\n\r\nstatic async Task BugRepro()\r\n{\r\n    {\r\n        int i = 0;\r\n        Func\u003cint\u003e f = () =\u003e i;\r\n    }\r\n    for (int i = 0; i \u003c 5; i++)\r\n    {\r\n        Debugger.Break();\r\n        Func\u003cint\u003e f = () =\u003e i;\r\n    }\r\n}\r\n```\r\nThe locals window will show the following:\r\n\r\nName | Value | Type\r\n-- | -- | --\r\ni | \u0027i\u0027 threw an exception of type \u0027System.NullReferenceException\u0027 | int {System.NullReferenceException}\r\n\r\n",
                                           "updatedAt":  "2023-10-12T19:53:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5pBXik",
                                           "createdAt":  "2023-10-13T18:09:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Adding @tmat.  I believe the next level of investigation should be in the Roslyn expression compiler.   \r\n\r\nThis is a IL code being generated by the Roslyn expression compiler to evaluate the loop variable for the reduced repro:\r\n```text\r\nint \u003cUnknown\u003e!\u003c\u003ex.\u003c\u003em1(Program+\u003c\u003c\u003cMain\u003e$\u003eg__BugRepro|0_0\u003ed \u003c\u003e4__this)+0x0\r\narguments\r\n(\r\n   [0] reference[Program+\u003c\u003c\u003cMain\u003e$\u003eg__BugRepro|0_0\u003ed]\r\n)\r\nlocals\r\n(\r\n   [0] primitive[System.Int32][-1]\r\n   [1] primitive[System.Int32][0]\r\n   [2] primitive[System.Boolean][True]\r\n   [3] reference[System.Exception]\r\n)\r\n{\r\n =\u003e $0000: ldarg 0\r\n    $0001: ldfld Program+\u003c\u003c\u003cMain\u003e$\u003eg__BugRepro|0_0\u003ed.\u003c\u003e8__1\r\n    $0002: ldfld Program+\u003c\u003ec__DisplayClass0_0.i\r\n    $0003: ret \r\n}\r\n```\r\n\r\nThe first lambda generates `Program.\u003c\u003ec__DisplayClass0_0` and the second one does `Program.\u003c\u003ec__DisplayClass0_1`.  Both the first and second one capture the same `i` variable (in the original example it would be `field`).  The C# expression evaluator is incorrectly referencing the first capture context to display the loop variable.\r\n\r\n@tmat would mind assisting in either linking or creating the appropriate tracking bug to track the issue for the expression compiler?",
                                           "updatedAt":  "2023-10-13T18:09:31Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "foreach loop reports values of next iteration to debugger",
        "labels":  [
                       "tracking-external-issue",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/93308",
        "createdAt":  "2023-10-09T19:41:48Z",
        "number":  93308,
        "author":  "LakshanF",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-07T12:45:09Z",
        "body":  "Current use of `createdump` requires manual intervention due to dependency on the C++ runtime (see dotnet/diagnostics#4150). There should be a version of `createdump` that does not have this dependency to make it easier to use this tool (such as for scenarios like bundling this tool in containers together with the native AOT application to make it easier to generate dump files)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOaKmw8A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5oqbDw",
                                           "createdAt":  "2023-10-10T17:35:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikem8361",
                                           "body":  "/cc: @tommcdon ",
                                           "updatedAt":  "2023-10-10T17:35:48Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Make createdump easier to use with native AOT",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/94114",
        "createdAt":  "2023-10-27T20:33:12Z",
        "number":  94114,
        "author":  "brianrob",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-30T14:47:21Z",
        "body":  "### Description\n\nConstruction of the IPC channel fails for applications on OSX that run inside of the sandbox.  This results in failures when using any IPC channel-based diagnostic commands (e.g. dotnet-trace).\n\n### Reproduction Steps\n\n1. Build a MAUI application targeting OSX.\r\n2. Enable execution in the sandbox.\r\n3. Build and sign the package.\r\n4. Start the application.\r\n5. Run `dotnet-trace collect -p \u003cpid\u003e`\n\n### Expected behavior\n\n`dotnet-trace` is able to attach to the application and capture a trace.\n\n### Actual behavior\n\n`dotnet-trace` isn\u0027t able to connect to the application because the diagnostic IPC channel doesn\u0027t exist.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nDisable the sandbox by re-compiling the application.\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhQbWyQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5qTcPs",
                                           "createdAt":  "2023-10-27T20:33:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "brianrob",
                                           "body":  "@lateralusX ",
                                           "updatedAt":  "2023-10-27T20:33:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qVJuC",
                                           "createdAt":  "2023-10-28T22:02:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027os-maccatalyst\u0027: @steveisok, @akoeplinger\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nConstruction of the IPC channel fails for applications on OSX that run inside of the sandbox.  This results in failures when using any IPC channel-based diagnostic commands (e.g. dotnet-trace).\n\n### Reproduction Steps\n\n1. Build a MAUI application targeting OSX.\r\n2. Enable execution in the sandbox.\r\n3. Build and sign the package.\r\n4. Start the application.\r\n5. Run `dotnet-trace collect -p \u003cpid\u003e`\n\n### Expected behavior\n\n`dotnet-trace` is able to attach to the application and capture a trace.\n\n### Actual behavior\n\n`dotnet-trace` isn\u0027t able to connect to the application because the diagnostic IPC channel doesn\u0027t exist.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nDisable the sandbox by re-compiling the application.\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ebrianrob\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`EventPipe`, `untriaged`, `os-maccatalyst`, `area-Diagnostics-mono`, `needs-area-label`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-10-28T22:02:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qYU3V",
                                           "createdAt":  "2023-10-30T09:06:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODOQWCw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2023-10-30T13:12:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tipa",
                                                                               "createdAt":  "2023-12-02T08:30:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "lateralusX",
                                           "body":  "Running an application inside the sandbox on `macOS` either as an `OSX` or `MacCatalyst` app gets their file system rooted to `~/Libraries/Containers/\u003capps bundle id\u003e/Data`, and can not create any files outside that folder. `CoreCLR OSX` apps and `Mono MacCatalyst` apps uses `EventPipe` IPC channels for its diagnostic server implementation, and since Unix Domain Sockets (UDS) uses  file system, it will fail to create the UDS if it uses a path outside the sandboxed file system.\r\n\r\nDiagnostic tools as` dotnet-trace` gets installed as a global tool and runs as a regular `OSX` app meaning it won\u0027t be part of the apps sandbox and will get a different default tmp directory setup compared to the sandboxed app. This means that the default UDS won\u0027t be visible to the diagnostic tools if they don\u0027t follow a specific naming pattern based out of the default tmp directory. Since sandboxed apps won\u0027t have its default tmp dir setup as other apps, the default UDS created by sandboxed apps won\u0027t be visible to diagnostic tools like `dotnet-trace`.\r\n\r\nOne solution could be to use the reverse connect model for diagnostic tooling, in that case the sandboxed app could connect to a UDS created by for example `dotnet-trace` inside the sandboxed apps file system setup the app using `DOTNET_DiagnosticPorts` and let it connect to the UDS, that should work but comes with a hard limitation. On` macOS` the max length of an UDS path is set by the OS and can only be up to 104 characters long. Since the path needs to be inside the apps sandboxed file system that includes the apps bundle id, it will break as soon as the apps bundle id is long enough, but as long as the full UDS path used in the reverse connect model is shorter than 104 characters this could be used as a workaround, `/Users/xxx/Library/Containers/\u003capp bundle id\u003e/Data`, that gives us ~70 characters for user `\u003cuid\u003e + \u003capp bundle id\u003e + \u003cname of UDS file\u003e`. If that exceeds ~70 characters then apps will fail to create the UDS.\r\n\r\nFor the default UDS listener things are a little more complicated, first, it uses a unique naming schema based out of default tmp path, meaning that default UDS listeners created by sandboxed apps won\u0027t be visible to diagnostic tooling. Second, the default naming schema of default UDS listeners adds a number of characters to the total path length, by default the default diagnostic server UDS listener has the following format, `dotnet-diagnostic-\u003cpid\u003e-\u003ckey\u003e-socket`, 26 characters + `\u003cpid\u003e` + `\u003ckey\u003e` that will be reduced from the 70 characters that is available for `\u003cuid\u003e` + `\u003capp bundle id\u003e` + `\u003cname\u003e` of UDS. Here is an example of the default HelloWorld samples UDS path:\r\n\r\n`/Users/\u003cuid\u003e/Library/Containers/net.dot-HelloiOS/Data/tmp/dotnet-diagnostic-2460-1698654835-socket`\r\n\r\nso 93 characters + `\u003cuid\u003e` is getting very close to the 104 character limit.\r\n\r\nIf however the default UDS path is short enough and created inside the apps sandboxed file system it should be possible to manually connect diagnostic tooling using the `--diagnostic-port \u003cuds path\u003e,connect` argument.\r\n\r\nThere are a couple of workarounds to overcome this issue:\r\n\r\n* Turn off apps sandbox, after that is done, all should work as is.\r\n* If its not possible to turn off apps sandbox, make sure default UDS path falls within 104 characters path length limit, currently there is only two things in control of the app developer the `\u003cuid\u003e` running the app + the length of the `\u003capp bundle id\u003e`, if full UDS path falls within 104 characters, then run diagnostic tools like `dotnet-trace` using `--diagnostic-port \u003cuds path\u003e,connect` to connect to the default UDS listener.\r\n* Use diagnostic server reverse connect configuration. Make sure to create the UDS socket from `dotnet-trace` within apps sandboxed file system and that it gets a full path below 104 characters. Start up app with the `DOTNET_DiagnosticPorts` environment variable set to `\u003cuds path\u003e`, see https://learn.microsoft.com/en-us/dotnet/core/diagnostics/dotnet-trace#use-diagnostic-port-to-collect-a-trace-from-app-startup\r\n\r\nNOTE that all of above must fit into full UDS path not exceeding the maximum of 104 characters path.\r\n\r\nPossible long term solutions:\r\n\r\n* Switch to TCP/IP as transport for IPC channels when building a sandboxed app, affects both `OSX (CoreCLR)` and `MacCatalyst (Mono)`. This is how other sandboxed apps runs today, for example` iOS/tvOS/Android` and will resolve all issues around OS UDS path length limitations. Will require `dotnet-dsrouter` to run in order for tools like `dotnet-trace` to connect to the sandboxed app + setting env variables in launched app.\r\n\r\n* Have default UDS path to be shorter if running inside the sandbox, this would open up for longer `\u003cuid\u003e` + `\u003capp bundle id\u003e`. Won\u0027t solve diagnostic tools not being able to discover the default UDS listener, but increase the chances that full UDS path falls into max path length limits and open up for the possible to use `--diagnostic-port \u003cdefault uds listener path\u003e,connect` in the sandboxed app use case.\r\n\r\nLooks like another issue is hitting similar issue but in that case causing issue with CoreCLR managed debugging on sandboxed OSX apps, https://github.com/dotnet/runtime/issues/79852. Managed debugging is using a different set of default UDS listeners, but most likely running into by same underlying issue when trying to debug a sandboxed app.\r\n\r\n/cc @tommcdon",
                                           "updatedAt":  "2023-10-30T09:19:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FBtbJ",
                                           "createdAt":  "2024-07-16T20:59:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-16T20:59:06Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "CoreCLR Debugging and CoreCLR/Mono EventPipe Doesn\u0027t Work On OSX With Sandbox Enabled",
        "labels":  [
                       "enhancement",
                       "EventPipe",
                       "area-Diagnostics-coreclr",
                       "os-maccatalyst",
                       "area-Diagnostics-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/94502",
        "createdAt":  "2023-11-08T02:43:53Z",
        "number":  94502,
        "author":  "mikelle-rogers",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-11-08T17:46:18Z",
        "body":  "In mixed mode debugging, the RS sync notification flare hasn\u0027t been implemented on arm64 Linux.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOa1fruA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5rV-Em",
                                           "createdAt":  "2023-11-08T02:43:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-security, @bartonjs, @vcsjones\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nIn mixed mode debugging, the RS sync notification flare hasn\u0027t been implemented on arm64.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emikelle-rogers\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Security`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-11-08T02:43:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rV-u4",
                                           "createdAt":  "2023-11-08T02:47:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nIn mixed mode debugging, the RS sync notification flare hasn\u0027t been implemented on arm64.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emikelle-rogers\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Security`, `area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-11-08T02:47:05Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "RS sync notification flare arm64",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/94714",
        "createdAt":  "2023-11-14T16:48:38Z",
        "number":  94714,
        "author":  "nschuessler",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-22T18:23:39Z",
        "body":  "## Background and Motivation\r\n\r\nWe make tools that analyze dumps with managed memory in them to automatically find common development issues.  For Linux, dotnet-dump is currently the tool we use to create dumps\r\n\r\n## Proposed Feature\r\n\r\nFor a managed process that host plug ins, or other apps the command line often contains the actual binary / team / function that process is performing. I.e. `pwsh` or `dotnet` processes doesn\u0027t tell you a lot about who should be consuming the data from the dump. The arguments to those processes have all the information.\r\n\r\nCan we capture the command line arguments to the dotnet process in the ELF headers so we can be specific about determining which function the process was asked to perform.\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOa-zUmQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5r7MyD",
                                           "createdAt":  "2023-11-14T16:51:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n## Background and Motivation\r\n\r\nWe make tools that analyze dumps with managed memory in them to automatically find common development issues.  For Linux, dotnet-dump is currently the tool we use to create dumps\r\n\r\n## Proposed Feature\r\n\r\nFor a managed process that host plug ins, or other apps the command line often contains the actual binary / team / function that process is performing. I.e. `pwsh` or `dotnet` processes doesn\u0027t tell you a lot about who should be consuming the data from the dump. The arguments to those processes have all the information.\r\n\r\nCan we capture the command line arguments to the dotnet process in the ELF headers so we can be specific about determining which function the process was asked to perform.\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003enschuessler\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`enhancement`, `area-Diagnostics-coreclr`, `needs-area-label`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e9.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-11-14T16:51:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5r7NSZ",
                                           "createdAt":  "2023-11-14T16:52:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@mikem8361 ",
                                           "updatedAt":  "2023-11-14T16:52:20Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[Feature Request] Capture app command line information in ELF dumps ",
        "labels":  [
                       "enhancement",
                       "os-linux",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/95276",
        "createdAt":  "2023-11-23T17:43:22Z",
        "number":  95276,
        "author":  "RomanSoloweow",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-08-05T21:44:29Z",
        "body":  "Сreatedump tool create dump automatically on service crush. But if the service is configured to start automatically, this will lead to multiple dumps being created and filling up all the memory in the future.\r\n\r\nCurrently only a small number of parameters are supported:\r\nhttps://github.com/dotnet/coreclr/blob/master/Documentation/botr/xplat-minidump-generation.md#configurationpolicy\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOh00I9g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5s-Fbn",
                                           "createdAt":  "2023-11-27T16:45:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nСreatedump tool create dump automatically on service crush. But if the service is configured to start automatically, this will lead to multiple dumps being created and filling up all the memory in the future.\r\n\r\nCurrently only a small number of parameters are supported:\r\nhttps://github.com/dotnet/coreclr/blob/master/Documentation/botr/xplat-minidump-generation.md#configurationpolicy\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eRomanSoloweow\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003emikem8361\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`enhancement`, `area-Diagnostics-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-11-27T16:45:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tG4Lm",
                                           "createdAt":  "2023-11-28T19:16:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikem8361",
                                           "body":  "What feature do you want?  Yes, ever time a .NET process terminates (when the appropriate env vars are set), a core dump is created.  The default is to have the process id in the name.  ",
                                           "updatedAt":  "2023-11-28T19:16:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tLIUU",
                                           "createdAt":  "2023-11-29T10:35:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RomanSoloweow",
                                           "body":  "I would like to set some parameters. Such as: **MaxDumpFilesCount** and **ArchiveOldDumpsOnStartup**\r\n\r\n**MaxDumpFilesCount** - maximum number of dumps on disk. If this number is exceeded, the oldest dumps are deleted.\r\n**ArchiveOldDumps** - flag whether dumps should be archived\r\n\r\n\r\nBoth activities can be executed at the start of the service, which seems like a pretty good solution\r\n",
                                           "updatedAt":  "2023-11-29T10:35:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wDrx5",
                                           "createdAt":  "2024-01-07T10:10:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RomanSoloweow",
                                           "body":  "@mikem8361 any news?",
                                           "updatedAt":  "2024-01-07T10:10:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wKBAx",
                                           "createdAt":  "2024-01-08T19:11:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikem8361",
                                           "body":  "We haven\u0027t planned our .NET 9 work yet.  We will need to consider whether this feature is appropriate for createdump.  ",
                                           "updatedAt":  "2024-01-08T19:11:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HKNrt",
                                           "createdAt":  "2024-08-04T16:43:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RomanSoloweow",
                                           "body":  "Hi, any news?",
                                           "updatedAt":  "2024-08-04T16:43:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HTQj2",
                                           "createdAt":  "2024-08-05T21:44:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikem8361",
                                           "body":  "After careful consideration, we do not plan to action this particular item in this release. We will continue to evaluate it for future releases. Ideally, we would like to fix every issue and implement every idea people submit. Realistically, we cannot address every item. ",
                                           "updatedAt":  "2024-08-05T21:44:28Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Support archiving and rotating for Сreatedump  tool",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/95461",
        "createdAt":  "2023-11-30T12:20:30Z",
        "number":  95461,
        "author":  "kevingosse",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-07T12:47:56Z",
        "body":  "We would like to implement custom data collection/reporting when a crash occurs in a .NET application, but right now it doesn\u0027t look like there is a good way to do that.\r\n\r\nIt would be nice to have something [similar to `-XX:OnError` in Java](https://docs.oracle.com/javase/8/docs/technotes/guides/troubleshoot/clopts001.html#:~:text=The%20%2DXX%3AOnError%20Option,of%20commands%20separated%20by%20semicolons.), which allows to set a custom command that will be executed in case of a crash (before the process is teared down).\r\n\r\nFor instance, it could be a `DOTNET_DbgCrashHandler` environment variable that takes the path to the custom crash handler. Just like `-XX:OnError`, it would replace `%p` with the pid. It could make sense to also support the other arguments that are currently given to createdump (such as the minidump type or the path) but I don\u0027t see that as a requirement.\r\n\r\nFrom a CLR perspective, most of the code would be identical, the main difference being that `PROCBuildCreateDumpCommandLine` would initialize the command-line for the custom tool instead of createdump (it has also some impacts in `PROCCreateCrashDumpIfEnabled`).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOeph8XQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5tS3cW",
                                           "createdAt":  "2023-11-30T12:20:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWe would like to implement custom data collection/reporting when a crash occurs in a .NET application, but right now it doesn\u0027t look like there is a good way to do that.\r\n\r\nIt would be nice to have something [similar to `-XX:OnError` in Java](https://docs.oracle.com/javase/8/docs/technotes/guides/troubleshoot/clopts001.html#:~:text=The%20%2DXX%3AOnError%20Option,of%20commands%20separated%20by%20semicolons.), which allows to set a custom command that will be executed in case of a crash (before the process is teared down).\r\n\r\nFor instance, it could be a `DOTNET_DbgCrashHandler` environment variable that takes the path to the custom crash handler. Just like `-XX:OnError`, it would replace `%p` with the pid. It could make sense to also support the other arguments that are currently given to createdump (such as the minidump type or the path) but I don\u0027t see that as a requirement.\r\n\r\nFrom a CLR perspective, most of the code would be identical, the main difference being that `PROCBuildCreateDumpCommandLine` would initialize the command-line for the custom tool instead of createdump (it has also some impacts in `PROCCreateCrashDumpIfEnabled`).\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ekevingosse\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-11-30T12:20:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tWEDy",
                                           "createdAt":  "2023-11-30T20:24:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@mikem8361 ",
                                           "updatedAt":  "2023-11-30T20:24:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc56mHxd",
                                           "createdAt":  "2024-04-15T13:07:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODeMWmg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "WeihanLi",
                                                                               "createdAt":  "2024-04-15T13:17:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "kevingosse",
                                           "body":  "If that\u0027s something you\u0027d be interested in, we (Datadog) could probably dedicate some time to push a PR.",
                                           "updatedAt":  "2024-04-15T13:07:42Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Register a custom crash handler",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/96473",
        "createdAt":  "2024-01-04T08:34:57Z",
        "number":  96473,
        "author":  "fabled",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-10T12:17:54Z",
        "body":  "The PR #71263 added back the RichDebug format which provides inlining information. This is useful profilers and debuggers. I am currently writing dotnet support for a profiler which could use these. The profiler directly reads the dotnet VM structures by itself (its not using DAC).\r\n\r\nTo make RichDebug more usable I have the following suggestions for your consideration:\r\n\r\n-  `struct InlineTree` currently has `Child` and `Sibling` fields, defined in https://github.com/dotnet/runtime/blob/main/src/coreclr/inc/cordebuginfo.h#L414-L417. Could these be instead be replaced by a `Parent` field? This would allow using the `struct InlineTree` data directly to build the backtrace by just following the `Parent` field. The current format requires parsing the whole RichDebug tree and calculating this backtrace index. Additionally this would remove one 32-bit value from the struct making it take less space.\r\n- Could the `CORINFO_METHOD_HANDLE` be documented better? https://github.com/dotnet/runtime/blob/main/src/coreclr/inc/corinfo.h#L1063 defines it as `CORINFO_METHOD_STRUCT_*` which is supposedly an opaque cookie. The C# code uses `HandleToObject` to case it to `MethodDesc`. Is it really a `MethodDesc*` that my profiler can follow or is some translation needed? In otherwords, I would like to request that the RichDebug would be usable by profilers reading the dotnet VM memory (not just via the API).\r\n- Standardize ABI for the DebugInfo. Currently the format slightly depends on build time settings, see https://github.com/dotnet/runtime/blob/main/src/coreclr/vm/codeman.cpp#L3787-L3796. While this feature seems to be architecture specific, it would be nice if the ABI format is consistent always. Interestingly there is also a potential internal inconsistency in the DAC build, as similar but incomplete test is at https://github.com/dotnet/runtime/blob/main/src/coreclr/vm/codeman.cpp#L3864-L3868.\r\n-  Currently this feature is enabled with `UNSUPPORTED_RichDebugInfo` clr config. Perhaps this could be promoted to supported once things are more mature?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOtjlTLA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5v3DoR",
                                           "createdAt":  "2024-01-04T08:35:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThe PR #71263 added back the RichDebug format which provides inlining information. This is useful profilers and debuggers. I am currently writing dotnet support for a profiler which could use these. The profiler directly reads the dotnet VM structures by itself (its not using DAC).\r\n\r\nTo make RichDebug more usable I have the following suggestions for your consideration:\r\n\r\n-  `struct InlineTree` currently has `Child` and `Sibling` fields, defined in https://github.com/dotnet/runtime/blob/main/src/coreclr/inc/cordebuginfo.h#L414-L417. Could these be instead be replaced by a `Parent` field? This would allow using the `struct InlineTree` data directly to build the backtrace by just following the `Parent` field. The current format requires parsing the whole RichDebug tree and calculating this backtrace index. Additionally this would remove one 32-bit value from the struct making it take less space.\r\n- Could the `CORINFO_METHOD_HANDLE` be documented better? https://github.com/dotnet/runtime/blob/main/src/coreclr/inc/corinfo.h#L1063 defines it as `CORINFO_METHOD_STRUCT_*` which is supposedly an opaque cookie. The C# code uses `HandleToObject` to case it to `MethodDesc`. Is it really a `MethodDesc*` that my profiler can follow or is some translation needed? In otherwords, I would like to request that the RichDebug would be usable by profilers reading the dotnet VM memory (not just via the API).\r\n- Standardize ABI for the DebugInfo. Currently the format slightly depends on build time settings, see https://github.com/dotnet/runtime/blob/main/src/coreclr/vm/codeman.cpp#L3787-L3796. While this feature seems to be architecture specific, it would be nice if the ABI format is consistent always. Interestingly there is also a potential internal inconsistency in the DAC build, as similar but incomplete test is at https://github.com/dotnet/runtime/blob/main/src/coreclr/vm/codeman.cpp#L3864-L3868.\r\n-  Currently this feature is enabled with `UNSUPPORTED_RichDebugInfo` clr config. Perhaps this could be promoted to supported once things are more mature?\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003efabled\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-01-04T08:35:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5v4-zZ",
                                           "createdAt":  "2024-01-04T14:42:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "cc @jakobbotsch ",
                                           "updatedAt":  "2024-01-04T14:42:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wFzJi",
                                           "createdAt":  "2024-01-08T08:34:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fabled",
                                           "body":  "One more addition:\r\n\r\nIt seems that `struct PatchpointInfo` is variable length, and the length needs to be calculated dynamically. Annoyingly this data needs to be skipped to access the PC-to-IL table information.\r\n\r\nIt would be helpful if the `CompressDebugInfo::CompressBoundariesAndVars` format would have the following properties:\r\n - determining total length and each blob offset easily\r\n - not require implementation information of uninteresting blobs (such as the patch point information) when needing to access only other blobs\r\n\r\nOne such implementation would be single header that contains the lengths of the individual blobs - start it with the number of blobs present, followed by the length of each blob.\r\n\r\nThis would help external readers to not depend on the internals of other blob types.\r\n",
                                           "updatedAt":  "2024-01-08T08:34:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wrPcX",
                                           "createdAt":  "2024-01-13T08:45:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fabled",
                                           "body":  "One more observation:\r\n\r\nIt seems that for `Debug` builds both the `DebugInfo`\u0027s `BoundaryInfo` and the `RichDebug`s `Offsets` table contain all data needed for backtraces: `CALL_INSTRUCTION` sources to get accurate caller unwinds, and even `STACK_EMPTY` bounds to get fairly good insight of the topmost frame in async unwinds.\r\n\r\nHowever, the methods done in `Release` mode are a different story. Apparently the more optimizing JIT kicks in. It still produces good looking `RichDebug` inlnee data. And for both formats it produces somewhat decent `STACK_EMPTY` bounds. However, the `CALL_INSTRUCTION` boundaries are not there. These makes unwinding the stack fairly inaccurate as there is no line number data available. I suppose the inlinee information would still have valid IL offsets for inlined things. But it seems that the IL offset for the method is not available accurately due to these missing boundaries.\r\n\r\nThis seems to also affect dotnet runtime itself, as e.g. line numbers in backtraces of exceptions become unreliable. This seems to have caused confusion such as https://dotnetdocs.ir/Post/47/wrong-exception-line-number-in-stack-trace-in-release-mode.\r\n\r\nUnderstandably the optimizing JIT has more restrictions it can generate. But is there any possibility that it would generate also the `CALL_INSTRUCTION` boundaries? It would make the async profiling highly more accurate, and also improve things in dotnet itself like the exception backtrace case.\r\n",
                                           "updatedAt":  "2024-01-13T08:45:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc61xuaG",
                                           "createdAt":  "2025-07-08T17:12:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "@jakobbotsch do you know if this is going to be addressed in 10?",
                                           "updatedAt":  "2025-07-08T17:12:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc62OVMs",
                                           "createdAt":  "2025-07-10T12:17:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jakobbotsch",
                                           "body":  "Thanks for the feedback @fabled. I like your suggestions and think they make a lot of sense. However, the rich debug info was mostly experimental and we do not have immediate plans for changing it currently. As you\u0027ve seen it is not considered a supported output format, and there are some known gaps in it.\n\n\u003e Understandably the optimizing JIT has more restrictions it can generate. But is there any possibility that it would generate also the CALL_INSTRUCTION boundaries? It would make the async profiling highly more accurate, and also improve things in dotnet itself like the exception backtrace case.\n\n`CALL_INSTRUCTION` boundaries exist primarily to implement the \"function returned X value\" features in debuggers. Hence why we do not generate these boundaries for optimized code.\n\nI am going to move this to Future milestone based on the above.",
                                           "updatedAt":  "2025-07-10T12:17:50Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Adjustment to RichDebug format and standardizing it for external profiler use",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/97229",
        "createdAt":  "2024-01-19T18:37:19Z",
        "number":  97229,
        "author":  "Tejasri12",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-03-05T15:04:38Z",
        "body":  " We are migrating our service from Net Framework to Net-6.0 and found that below list of Performance Counters that we monitor in Net Framework are not present in Net 6.0\r\n1.\tGen 0 Promoted Bytes/Sec\r\n2.\tGen 1 Promoted Bytes/Sec\r\n3.\tPromoted Finalization-Memory from Gen 0 \r\n4.\t\\# of current logical Threads\r\n5.\t\\# of Pinned Objects\r\n \r\nWe are pretty secured service, having performance counters is the easy way to be sure nothing is broken (taking memory dump is not allowed and limitations on RDP to the boxes). \r\nHistorically we had cases where counters were critical for resolution of incidents (some counters were added after we got issue and missed it due to no counters).\r\n\r\nCould you please add the above Performance Counters in Net-6.\r\nThanks in advance!\r\n\r\ncc @tommcdon ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOoQEgig==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5xW-wK",
                                           "createdAt":  "2024-01-20T07:25:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n We are migrating our service from Net Framework to Net-6.0 and found that below list of Performance Counters that we monitor in Net Framework are not present in Net 6.0\r\n1.\tGen 0 Promoted Bytes/Sec\r\n2.\tGen 1 Promoted Bytes/Sec\r\n3.\tPromoted Finalization-Memory from Gen 0 \r\n4.\t\\# of current logical Threads\r\n5.\t\\# of Pinned Objects\r\n \r\nWe are pretty secured service, having performance counters is the easy way to be sure nothing is broken (taking memory dump is not allowed and limitations on RDP to the boxes). \r\nHistorically we had cases where counters were critical for resolution of incidents (some counters were added after we got issue and missed it due to no counters).\r\n\r\nCould you please add the above Performance Counters in Net-6.\r\nThanks in advance!\r\n\r\ncc @tommcdon \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eTejasri12\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-01-20T07:25:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xX6Zp",
                                           "createdAt":  "2024-01-20T13:26:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HighPerfDotNet",
                                           "body":  "I had same issue (those counters not available in good old perfmon), looks like the current viable solution is to use dotnet counters - \r\n\r\nhttps://learn.microsoft.com/en-us/dotnet/core/diagnostics/dotnet-counters\r\n\r\nYou\u0027ll have to add support for it in your application also - Meter class from System.Diagnostics.Metrics\r\n\r\nDetails: https://learn.microsoft.com/en-us/dotnet/core/diagnostics/metrics-instrumentation\r\n\r\nThis does not seem to work in Native AOT builds. ",
                                           "updatedAt":  "2024-01-20T13:29:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xX-qn",
                                           "createdAt":  "2024-01-20T14:16:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODTfkGQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "HighPerfDotNet",
                                                                               "createdAt":  "2024-01-22T02:06:19Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e This does not seem to work in Native AOT builds.\r\n\r\nThe runtime diagnostic instrumentation is off by default for native AOT console apps. You can enable it by setting `\u003cEventSourceSupport\u003etrue\u003c/EventSourceSupport\u003e` property in your project file: https://learn.microsoft.com/en-us/dotnet/core/deploying/native-aot/diagnostics#observability-and-telemetry. (This is not necessary for ASP.NET Core. The runtime diagnostic instrumentation is on by default for ASP.NET Core native AOT app.)",
                                           "updatedAt":  "2024-01-20T14:16:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xZdGi",
                                           "createdAt":  "2024-01-21T04:19:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@noahfalk ",
                                           "updatedAt":  "2024-01-21T04:19:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xrHRC",
                                           "createdAt":  "2024-01-24T00:11:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "Hi @Tejasri12, thanks for the feedback! We don\u0027t generally add features retroactively to versions of .NET we already shipped, but we can preserve this request to add counters to new versions of .NET that are still in development.\r\n\r\nIf you\u0027d like to write a little bit of code you should be able to add some of these metrics to your own application without waiting on a future .NET version. A quick and dirty example looks like this:\r\n\r\n```C#\r\nusing System.Diagnostics;\r\nusing System.Diagnostics.Metrics;\r\n\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        Meter m = new Meter(\"MyCustomMetrics\");\r\n        var threadCounter = m.CreateObservableUpDownCounter\u003cint\u003e(\"Thread Count\", () =\u003e\r\n            Process.GetCurrentProcess().Threads.Count);\r\n        var promotedBytesCounter = m.CreateObservableUpDownCounter(\"Pinned objects\", () =\u003e\r\n            GC.GetGCMemoryInfo().PinnedObjectsCount);\r\n\r\n        // go do whatever other work your app will do. \r\n    }\r\n}\r\n```\r\nThen in dotnet-counters (or any alternate metric collection tool):\r\n```\r\n\u003e dotnet-counters monitor -n ConsoleApp5 --counters MyCustomMetrics\r\n\r\nPress p to pause, r to resume, q to quit.\r\n    Status: Running\r\n\r\n[MyCustomMetrics]\r\n    Pinned objects                                                         2\r\n    Thread Count                                                          12\r\n```\r\n\r\nPromoted bytes aren\u0027t as straightforward unfortunately but it should be possible if you want to do a little more work. There is an API [PromotedBytes](https://learn.microsoft.com/en-us/dotnet/api/system.gcmemoryinfo.promotedbytes?view=net-5.0#system-gcmemoryinfo-promotedbytes) that can show you how many promoted bytes occurred in the last GC of different generations. Calling that API periodically would give you a statistical sample. Alternately there is the EventListener API where you could [subscribe to events from each GC](https://devblogs.microsoft.com/dotnet/a-portable-way-to-get-gc-events-in-process-and-no-admin-privilege-with-10-lines-of-code-and-ability-to-dynamically-enable-disable-events/) and keep track of how many total bytes are being promoted yourself. I think the event that has that data is the [HeapStats_v2](https://learn.microsoft.com/en-us/dotnet/fundamentals/diagnostics/runtime-garbage-collection-events#gcheapstats_v2-event) event. Be aware that using EventListener is going to allocate an in-memory buffer where the events are queued up. That might matter if your app has a tight virtual memory constraint.\r\n\r\nPopping up a level I\u0027ll also throw out that you may not need a counter monitoring promoted bytes if you have a counter monitoring how many GCs are occuring or GC pauses. Often I find the only reason people care about promoted bytes is because promotion implies higher generation GCs are going to run and what they really care about is the number of those GCs or how the pause times of those GCs are affecting their application latency. If that is your situation then you might skip the middleman and measure the GC counts and pauses directly.\r\nGC counts: https://learn.microsoft.com/en-us/dotnet/api/system.gc.collectioncount?view=net-5.0\r\nGC pauses: https://learn.microsoft.com/en-us/dotnet/api/system.gc.gettotalpauseduration?view=net-8.0\r\n\r\nHope that helps a bit!",
                                           "updatedAt":  "2024-01-24T00:11:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yt8xq",
                                           "createdAt":  "2024-02-02T20:26:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tyedulapuram",
                                           "body":  "@noahfalk Thank you for the update. Currently for collecting the Net 6 Runtime counters we consume the Event counter values via the [EventListener](https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.tracing.eventlistener) API and publishing the counters to Geneva monitoring platform and Kusto logs.\r\nWe are not using dotnet-counters tool. \r\nEventListener subscribing to GCHeapStats_V2 Event would help with publishing Gen Promoted Bytes/Sec. Thank you.\r\n\r\nRegarding  using `Process.GetCurrentProcess().Threads.Count` for metric `# of current logical Threads` : `Process.GetCurrentProcess().Threads.Count` returns the number of operating system threads associated with the current process, not specifically the managed threads managed by the .NET runtime, includes all threads, including native OS threads(unmanaged threads). \r\nBut the .NET framework performance counter [# of current logical Threads](https://learn.microsoft.com/en-us/dotnet/framework/debug-trace-profile/performance-counters)  only gives number of current managed thread objects in the application. \r\nAlso, I believe the existing performance counter `\\\\Process(myProcess)\\Thread Count`  would match `Process.GetCurrentProcess().Threads.Count` .",
                                           "updatedAt":  "2024-02-02T21:18:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5y80Wp",
                                           "createdAt":  "2024-02-06T00:14:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODVuvEQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tyedulapuram",
                                                                               "createdAt":  "2024-02-06T19:07:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "\u003e But the .NET framework performance counter [# of current logical Threads](https://learn.microsoft.com/en-us/dotnet/framework/debug-trace-profile/performance-counters) only gives number of current managed thread objects in the application.\r\n\r\nYep, you are correct. If your application runs threads that execute solely in native code then they will be included in Process.GetCurrentProcess().Threads.Count but wouldn\u0027t be in that .NET Framework counter. For many apps there is little difference between the two numbers but for some specific workloads the difference could be more significant. Unfortunately for .NET Core there is no perfect equivalent at the moment. Your other alternative would be to look at [ThreadPool.ThreadCount](https://learn.microsoft.com/en-us/dotnet/api/system.threading.threadpool.threadcount?view=net-8.0) (System.Runtime `threadpool-thread-count` counter) which is a subset of all managed threads.\r\n\r\n\u003e Currently for collecting the Net 6 Runtime counters we consume the Event counter values via the [EventListener](https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.tracing.eventlistener) API and publishing the counters to Geneva monitoring platform and Kusto logs.\r\n\r\nThat approach of using EventListener to proxy counters over to Geneva specific APIs (IFx?) still works, but if you are interested I\u0027d no longer consider it the simplest option. It was a stop-gap technique while OpenTelemetry support wasn\u0027t yet available. OpenTelemetry now has direct support for exporting data to Geneva if you would like to retire your EventListener adapter. https://eng.ms/docs/products/geneva/collect/instrument/opentelemetrydotnet/otel-metrics has more info about how that works.\r\n\r\n",
                                           "updatedAt":  "2024-02-06T00:14:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc503-kJ",
                                           "createdAt":  "2024-02-23T07:12:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tejasri12",
                                           "body":  "\u003e OpenTelemetry now has direct support for exporting data to Geneva if you would like to retire your EventListener adapter.\r\n\r\nWe are using OpenTelemetry to collect Net 6 metrics but it doesn\u0027t have support to write to Kusto(Azure Data explorer). Earlier, With NetFramwork we were collecting metrics in Geneva and Kusto. Having metrics in Kusto helped us run queries for Performance metric review/operations. This was the reason to use EventListener to collect metrics in Kusto. \r\n Also OpenTelemetry doesn\u0027t support collecting metrics from EventSource \"Microsoft-Windows-DotNETRuntime\"\r\n",
                                           "updatedAt":  "2024-02-28T18:43:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hASCK",
                                           "createdAt":  "2025-03-05T15:04:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "andryrochev",
                                           "body":  "What about \u0027_% Time in GC_\u0027 metric? It will be nice to have it in System.Runtime.",
                                           "updatedAt":  "2025-03-05T15:04:37Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Add missing GC and Threads performance counters in Net-6",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/99298",
        "createdAt":  "2024-03-05T14:48:59Z",
        "number":  99298,
        "author":  "lambdageek",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODBvnzw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AaronRobinsonMSFT",
                                            "createdAt":  "2024-03-05T16:31:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "filipnavara",
                                            "createdAt":  "2024-03-05T16:35:21Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "ivanpovazan",
                                            "createdAt":  "2024-03-05T17:47:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tommcdon",
                                            "createdAt":  "2024-03-05T21:10:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "breadnone",
                                            "createdAt":  "2024-03-05T21:57:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "omariom",
                                            "createdAt":  "2024-03-06T00:19:03Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "qumeta",
                                            "createdAt":  "2024-03-06T01:57:52Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "ViktorHofer",
                                            "createdAt":  "2024-03-06T03:25:25Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "FlashyDJ",
                                            "createdAt":  "2024-03-06T05:11:23Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "rzikm",
                                            "createdAt":  "2024-03-07T08:06:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "elinor-fung",
                                            "createdAt":  "2024-03-08T05:19:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "am11",
                                            "createdAt":  "2024-03-28T17:47:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2024-08-21T06:19:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DiXaS",
                                            "createdAt":  "2024-10-31T03:19:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "huoyaoyuan",
                                            "createdAt":  "2025-02-07T08:20:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TickThunder",
                                            "createdAt":  "2025-04-26T06:29:47Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "TickThunder",
                                            "createdAt":  "2025-04-26T06:29:47Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "TickThunder",
                                            "createdAt":  "2025-04-26T06:29:48Z"
                                        }
                                    ],
                          "totalCount":  18
                      },
        "updatedAt":  "2025-07-17T18:25:56Z",
        "body":  "# Summary\n\nThe [DAC](https://github.com/dotnet/runtime/blob/main/docs/design/coreclr/botr/dac-notes.md) is a .NET runtime component responsible for helping debuggers and other diagnostic tools to make sense of\nthe memory of a .NET runtime process.  In the current design, each instance of the .NET runtime is tightly coupled to a DAC:\na runtime running on a a 32-bit little endian architecture can only be accessed by a 32-bit LE DAC, 64-bit with a 64-bit DAC,\netc.  Although the current runtime data structures are carefully designed so that a DAC hosted on Windows can make sense\nof a Linux or Mac .NET runtime, this is fragile and hard to maintain.  This is because the current DAC implementation is actually a special build of the .NET runtime that uses C++ smart pointers to hide the fact\nthat it is not accessing the memory of the host process, but rather the memory of a remote debuggee .NET process.  \n\nAdditionally, the current DAC is not version-resilient. When a new verson of the .NET runtime is released, it ships with a DAC that can access that versions\u0027 memory and nothing else.  This means that debuggers need to be able to locate, load and run a DAC corresponding to each runtime version.  While this might be possible for official releases, it may create complications for source-built .NET runtimes, for unsupported/community-supported platforms etc.\n\n# Portable Data Contract-based DAC\n\nAn alternate approach is for the .NET runtime to include a *data stream* that encodes information about itself: the size and endianness of machine words, the size and offsets of important fields in interesting runtime data structures, the locations of globals that are relevant for diagnostic tools.\n\nWith access to a data stream, the DAC can be a separate implementation that can abstract over the details of a particular version of the runtime and implement an abstract *data contract* based diagnostic tooling.  (This is abbreviated *cDAC*)\n\n\n# .NET 10 Plan\n\nIn .NET 10 we will begin to move the DAC toward a data-contract based approach by enabling the existing DAC to delegate some operations to the cDAC.  Our initial focus will be the [SOS](https://github.com/dotnet/diagnostics/blob/main/documentation/sos_printexception_walkthrough.md) tool used by the .NET *LLDB* plugin and by Windbg.  Our initial milestone will be the implementation of the `!PrintException` SOS command. Followed by the [DAC interfaces used by CLRMA](https://github.com/dotnet/diagnostics/blob/main/documentation/clrma.md#dac-interfaces-used-by-clrma)\n\nA goal for the cDAC implementation is to maintain backward- and platform- compatability with each release: the each future release of the cDAC will be able to access each .NET runtime version \u003e= .NET 9.  We do not intend to support .NET \u003c= 8 or .NET Framework using the cDAC.\n\nThe focus for .NET 9 is to host the DAC on 64-bit desktop platforms - Linux (glibc), MacOS and Windows -  but to be able to access a debuggee or crash dump from 32-bit and 64-bit processes on all supported (and ideally community-supported) platforms (including musl-based Linux, arm32, win-x86, etc).\n\n## First milestone\n\nThe first milestone is a working `!PrintException` command based on the cDAC in `windbg`/`SOS`\n\n- [x] https://github.com/dotnet/runtime/pull/99936\n- [ ] https://github.com/dotnet/runtime/issues/100162\n- [x] #100253 \n- [x] #99299 - define the data contract physical representation (data descriptor + algorithmic contracts)\n- [x] Binary data descriptor compositor and emitter #100650 \n- [x]  #100623\n- [x] JSON contract descriptor reader in cdac #100966 \n- [x] #99301 https://github.com/dotnet/runtime/pull/100946\n- [x] https://github.com/dotnet/runtime/pull/101208\n- [x] https://github.com/dotnet/runtime/pull/101450\n- [x] https://github.com/dotnet/runtime/pull/101994\n- [x] Unit test the cdacreader library\n  - project added and running in CI: https://github.com/dotnet/runtime/pull/100966\n  - mocked out read from target and descriptor: https://github.com/dotnet/runtime/pull/101450\n- [x] #99302\n- [ ] https://github.com/dotnet/runtime/issues/108553\n- [ ] https://github.com/dotnet/runtime/issues/108720\n\n## Post-.NET 10 work\n\nThe overall goal is to implement a subset of the `ISOSDacInterfaceNN` IDL interfaces in [sospriv.idl](https://github.com/dotnet/runtime/blob/main/src/coreclr/inc/sospriv.idl) via the cDAC\n\n- [ ] Shipping:\n  - [ ] Add cdacreader to the shared framework package\n  - [ ] Sign cdacreader with .NET Diagnostics cert and check for it when loading - see https://github.com/dotnet/runtime/pull/100946#discussion_r1566320500\n  - [ ] Remove `DOTNET_ENABLE_CDAC` environment variable check\n- [ ] [cdac] Identify and prioritize next wave of ISOSDacInterface APIs\n- [ ] [cdac] Implement additional ISOSDacInterface APIs\n   - [ ] For CLRMA, we will need a few additional methods:\nhttps://github.com/mikem8361/diagnostics/blob/clrma/documentation/clrma.md#dac-interfaces-used-by-clrma\n- [ ] Develop a debug workflow for cdacreader\n   - Possibly based on DNNE  \n- [ ] Create tooling to reduce boilerplate and errors in cdac implementation\n   - DataContractTypeSourceGenerator \n   - algorithmic contract analyzer\n- [ ] #100162 \n- [ ] #101257\n- [x] https://github.com/dotnet/runtime/issues/104158\n- [ ] #114336\n- [x] #114460\n\n## Other closed issues\n\n- [x] #99300\n\n## .NET 9 backports\n\nWe maintain a branch [`feature/9.0-cdac-backports`](https://github.com/dotnet/runtime/tree/feature/9.0-cdac-backports) that has selected data descriptor and contract changes necessary for the cdacreader to interrogate a net9.0 runtime.  The backports to this branch are tracked on https://github.com/dotnet/runtime/issues/99302.\n\n# Future work\n\nThe initial cDAC plan will not reduce the complexity of the current design.  However once the existing DAC delegates all commands to the cDAC, we may simplify the packaging and distribution of the cDAC - allowing diagnostics tools to obtain a single library that works with all versions of CoreCLR \u003e= .NET 9, as well as other .NET runtimes including NativeAOT and Mono.\n\nSpecial attention needs to be paid to the `crashdump` tool.  This ships with CoreCLR and NativeAOT and runs on the same host as the .NET runtime.  It uses a subset of the DAC in order to save a copy\n\n- [ ] [cdac] Full parity with smart-pointer DAC\n- [ ] [cdac] Publish cDAC as a separate nuget\n- [ ] Infrastructure for data descriptor of managed types without mirrors in the unmananged runtime (https://github.com/dotnet/runtime/pull/104343#discussion_r1663529084)\n- [ ] [cdac] support for NativeAOT\n- [ ] [cdac] support to Mono\n- [ ] [cdac] Implement a simplified cDAC for `crashdump`\n- [ ] Define a new public contract-based diagnostics API\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOdfRXuQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc519EoJ",
                                           "createdAt":  "2024-03-05T14:49:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\r\n# Summary\r\n\r\nThe [DAC](https://github.com/dotnet/runtime/blob/main/docs/design/coreclr/botr/dac-notes.md) is a .NET runtime component responsible for helping debuggers and other diagnostic tools to make sense of\r\nthe memory of a .NET runtime process.  In the current design, each instance of the .NET runtime is tightly coupled to a DAC:\r\na runtime running on a a 32-bit LE architecture can only be accessed by a 32-bit LE DAC, 64-bit with a 64-bit DAC,\r\netc.  Although the current runtime data structures are carefully designed so that a DAC hosted on Windows can make sense\r\nof a Linux or MAC .NET runtime, this is fragile and hard to maintain.  This is because the current DAC implementation is actually a special build of the .NET runtime that uses C++ smart pointers to hide the fact\r\nthat it is not accessing the memory of the host process, but rather the memory of a remote debuggee .NET process.  \r\n\r\nAdditionally, the current DAC is not version-resilient. When a new verson of the .NET runtime is release, it ships with a DAC that can access that versions\u0027 memory and nothing else.  This means that debuggers need to be able to locate, load and run a DAC corresponding to each runtime version.  While this might be possible for official releases, it may create complications for source-built .NET runtimes, for unsupported/community-supported platforms etc.\r\n\r\n# Portable Data Contract-based DAC\r\n\r\nAn alternate approach is for the .NET runtime to include a *data stream* that encodes information about itself: the size and endianness of machine words, the size and offsets of important fields in interesting runtime data structures, the locations of globals that are relevant for diagnostic tools.\r\n\r\nWith access to a data stream, the DAC can be a separate implementation that can abstract over the details of a particular version of the runtime and implement an abstract *data contract* based diagnostic tooling.  (This is abbreviated *cDAC*)\r\n\r\n\r\n# .NET 9 Plan\r\n\r\nIn .NET 9 we will begin to move the DAC toward a data-contract based approach by enabling the existing DAC to delegate some operations to the cDAC.  Our initial focus will be the [SOS](https://github.com/dotnet/diagnostics/blob/main/documentation/sos_printexception_walkthrough.md) tool used by the .NET *LLDB* plugin and by Windbg.  Our initial milestone will be the implementation of the `!PrintException` SOS command.\r\n\r\nA goal for the cDAC implementation is to maintain backward- and platform- compatability with each release: the each future release of the cDAC will be able to access each .NET runtime version \u003e= .NET 9.  We do not intend to support .NET \u003c= 8 or .NET Framework using the cDAC.\r\n\r\nThe focus for .NET 9 is to host the DAC on 64-bit desktop platforms - Linux (glibc), MacOS and Windows -  but to be able to access a debuggee or crash dump from 32-bit and 64-bit processes on all supported (and ideally community-supported) platforms (including musl-based Linux, arm32, win-x86, etc).\r\n\r\n- [ ] Publish data stream spec\r\n- [ ] Implement basic data stream reader and writer in C\r\n- [ ] Enable the DAC to delegate operations to the cDAC\r\n- [ ] Implement `!PrintException`\r\n- [ ] Implement additional commands (TBD)\r\n\r\n# Future plans\r\n\r\nThe initial cDAC plan will not reduce the complexity of the current design.  However once the existing DAC delegates all commands to the cDAC, we may simplify the packaging and distribution of the cDAC - allowing diagnostics tools to obtain a single library that works with all versions of CoreCLR \u003e= .NET 9, as well as other .NET runtimes including NativeAOT and Mono.\r\n\r\nSpecial attention needs to be paid to the `crashdump` tool.  This ships with CoreCLR and NativeAOT and runs on the same host as the .NET runtime.  It uses a subset of the DAC in order to save a copy\r\n\r\n- [ ] Full cDAC parity \r\n- [ ] Publish cDAC as a separate nuget\r\n- [ ] cDAC support for NativeAOT\r\n- [ ] cDAC support to Mono\r\n- [ ] Implement a simplified cDAC for `crashdump`\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003elambdageek\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003elambdageek, elinor-fung\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e9.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-03-05T14:49:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc519Fe5",
                                           "createdAt":  "2024-03-05T14:50:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "/cc @AaronRobinsonMSFT @steveisok @davidwrighton @mikem8361 @noahfalk ",
                                           "updatedAt":  "2024-03-05T14:50:43Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Portable Data Contract-based DAC",
        "labels":  [
                       "Epic",
                       "area-Diagnostics-coreclr",
                       "tracking"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/100098",
        "createdAt":  "2024-03-21T18:51:16Z",
        "number":  100098,
        "author":  "thaystg",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC2stYQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tommcdon",
                                            "createdAt":  "2024-03-21T19:20:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AaronRobinsonMSFT",
                                            "createdAt":  "2024-03-21T21:58:28Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-06-18T20:44:15Z",
        "body":  "How to reproduce:\r\nUse Visual Studio to debug a Corerun scenario running a C# Main() with no body.\r\n\r\nWorkaround:\r\nDisabling R2R avoid the assertion\r\n\r\nBehavior:\r\n```\r\nAssert failure(PID 29292 [0x0000726c], Thread: 35220 [0x8994]): taAmbient != NULL\r\n\r\nMSCORDBI! CordbNativeFrame::GetLSStackAddress + 0x163 (0x00007ff9`52db3013)\r\nMSCORDBI! CordbJITILFrame::GetNativeVariable + 0x2CB (0x00007ff9`52dbb2ab)\r\nMSCORDBI! CordbJITILFrame::GetLocalVariableEx + 0xA27 (0x00007ff9`52dba797)\r\nMSCORDBI! CordbJITILFrame::GetLocalVariable + 0x6A0 (0x00007ff9`52db9cf0)\r\nMICROSOFT.VISUALSTUDIO.DEBUGGER! \u003cno symbol\u003e + 0x0 (0x00007ff9`c9f89f1b)\r\nMICROSOFT.VISUALSTUDIO.VIL.HOST! \u003cno symbol\u003e + 0x0 (0x00007ff9`c7ddb13a)\r\nMICROSOFT.VISUALSTUDIO.VIL.HOST! \u003cno symbol\u003e + 0x0 (0x00007ff9`c7e4b355)\r\nMICROSOFT.VISUALSTUDIO.VIL.HOST! \u003cno symbol\u003e + 0x0 (0x00007ff9`c7e4b05d)\r\nMICROSOFT.VISUALSTUDIO.VIL.NI! \u003cno symbol\u003e + 0x0 (0x00007ff9`8e5d6dbf)\r\nMICROSOFT.VISUALSTUDIO.VIL.NI! \u003cno symbol\u003e + 0x0 (0x00007ff9`8e5d5f64)\r\n    File: E:\\runtime\\src\\coreclr\\debug\\di\\rsthread.cpp:5902\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOeEv7yA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc54ALqS",
                                           "createdAt":  "2024-03-21T18:51:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-03-21T18:51:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54Bl0X",
                                           "createdAt":  "2024-03-21T20:36:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "@JulieLeeMSFT @AndyAyersMS - Aaron raised this issue to us that he was hitting an assert while debugging shown above. It looks like the codegen for R2R on x64 is claiming that variables are homed relative to REGNUM_AMBIENT_SP, but ambient SP doesn\u0027t exist on that architecture. This sounds like a JIT issue?\r\n\r\ncc @AaronRobinsonMSFT @jkotas ",
                                           "updatedAt":  "2024-03-21T20:36:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54Bsfd",
                                           "createdAt":  "2024-03-21T20:51:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODbdmtw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "noahfalk",
                                                                               "createdAt":  "2024-03-21T21:00:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "JulieLeeMSFT",
                                           "body":  "@kunalspathak, PTAL.",
                                           "updatedAt":  "2024-03-21T20:51:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54DSTa",
                                           "createdAt":  "2024-03-22T00:58:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AndyAyersMS",
                                           "body":  "\u003e This sounds like a JIT issue?\r\n\r\nI guess it could be, but it seems odd it would just surface now. I don\u0027t believe we\u0027ve changed much in this code in a long time. ",
                                           "updatedAt":  "2024-03-22T00:58:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54GxK-",
                                           "createdAt":  "2024-03-22T12:51:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "If you think its unlikely to be a JIT issue @AndyAyersMS I\u0027m sure someone on Tom\u0027s team can check if the register data we got at debug time matches what is encoded in the binary. I was just trying to make a best guess based on the assert at this point.",
                                           "updatedAt":  "2024-03-22T12:51:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54S_vI",
                                           "createdAt":  "2024-03-25T15:15:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@kunalspathak feel free to unassign yourself and we will add this to the diag team\u0027s backlog",
                                           "updatedAt":  "2024-03-25T15:15:17Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Assertion on rsthread.cpp:5902 taAmbient != NULL",
        "labels":  [
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/100162",
        "createdAt":  "2024-03-22T20:54:38Z",
        "number":  100162,
        "author":  "lambdageek",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-07T14:20:15Z",
        "body":  "(Part of #99298 )\r\n\r\nThis is a summary of the remaining unsettled questions from the discussion on https://github.com/dotnet/runtime/pull/99936.\r\nThe intention is to merge the initial version of the spec and to address each of these in follow-up PRs or separate discussions.\r\n\r\n- [x] Do we need different types of contracts? Can we just have algorithm contracts and a globals+type layout descriptor while still maintaining a compact payload in a target runtime.  Spec update in #100253 \r\n- [ ] Can we generate the data descriptor compositionally.\r\n    There is a proposal in https://github.com/dotnet/runtime/pull/99936#discussion_r1536205099 and parent comments for how to do this. PR, following the proposal #100650 \r\n- [ ] Should we make the contract partly machine readable by including some yaml frontmatter metadata?  That will allow us to validate certain kinds of spelling/version mistakes as we build the tooling.  There is a proposal in https://github.com/dotnet/runtime/pull/99936#discussion_r1535558101 and parent comments.\r\n- [x] We need a physical descriptor layout spec.  https://github.com/dotnet/runtime/issues/99299 \r\n- [ ] Do we need major/minor versions on contracts?  TBD.\r\n- [ ] How frequently is it acceptable for the runtime to introduce breaking changes in the future?  Discussion in https://github.com/dotnet/runtime/pull/99936#discussion_r1530053551 and https://github.com/dotnet/runtime/pull/99936#discussion_r1529976408\r\n- [ ] Style for defining algorithmic contracts. Merge the data structures and api into one section and make it look more like a typical C# API? Omit the Dac prefix on data structure definitions? https://github.com/dotnet/runtime/pull/99936#discussion_r1536117439",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "[cdac] data contract spec follow up items and open questions",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/101216",
        "createdAt":  "2024-04-17T22:43:35Z",
        "number":  101216,
        "author":  "marafiq",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-04-24T21:12:09Z",
        "body":  "### Description\r\n\r\nApplication experience slowdown up to 30 seconds. Most of the threads are waiting for `WaitForSingleObject` in the memory dump and similarly when a trace is taken 99% of threads are waiting under `BlockedTime`.\r\n\r\n### Configuration\r\nASP.NET Framework 4.8 running on Azure App Service Premium V3\r\nThe application uses the following:\r\nAzure SignalR SDK version - 1.21.4\r\nSignalR Client SDK version - 2.4.1\r\nAzure Insights Enabled - .NET Basic Level\r\nMVC 5.2.3\r\nWebAPI\r\n### Help \r\nI have been chasing this issue from few weeks now.  I am unclear on the root cause, It would be great help if you can guide me to pin the root cause. My confusion is that I might be chasing the wrong optimization as I am failing to make sense of the blocked time quite clearly. As I suspect the ETW thread playing huge role in it than the application code.\r\n### Analysis\r\nFor the similar issue where JIT time was huge which I thought is the root cause.  I did the following analysis\r\nhttps://github.com/microsoft/perfview/discussions/1997 and with expert help from PerfView Team Member, It was concluded that it is probably the Profile RunDown event causing the high JIT time. \r\n\r\nSubsequently, we approached the Azure Support team, and the made different conclusion that it is somehow that GC is blocked for some reason but were not able to pin down the root cause as it falls outside of their day to day job. I am attaching the final conclusion made [here](https://github.com/dotnet/runtime/files/15017595/CLR.Foreground.JIT.is.taking.a.long.time.1.pdf) that seems to indicate that there is some problem with the usage of `Dictionary` and most of thread traces show that is coming from Routing.\r\nSome of the suggestions to use the workstation mode might solve some slowdown but probably will not solve the root cause.\r\nThings we know:\r\n- MVC Routing Allocations are huge for some routes up to 30 MB - I am working to optimizing that part. \r\n- Large EF6 Compiled Model \r\n\r\nIssue related to ETW events - https://github.com/Azure/azure-signalr/issues/1837\r\nException in Finalizer Thread- Dump shows that finalizer thread is not blocked - Though we have exception happening every then and now here https://github.com/Azure/azure-signalr/issues/1928\r\n### Latest Event of Slow Down\r\nWhenever I take a trace the traces include ETW Trace events writing logs which our application explicitly does not write out.\r\n\r\n![Thread Time Stacks Suspend Runtime Event](https://github.com/dotnet/runtime/assets/9109259/44377c06-303e-4760-892c-e8d9e6b38db5) - I can not make sense of it, what exactly it means?\r\n\r\nWhen I look at the thread time stacks window \r\n![99 percent blocked time](https://github.com/dotnet/runtime/assets/9109259/b42a1cca-fbd1-45af-b7ec-327b77d05cdc)\r\n\r\nOnly one thread is working under CPU_Time - thread 13212 - Below is part of stack trace of the thread.\r\n\r\n![Thread 13212 ](https://github.com/dotnet/runtime/assets/9109259/a7c6960d-f0ce-4c18-9fd8-b9e466fd5bcf)\r\n\r\n```\r\nName                                                                                                  \tInc %\t       Inc\t Inc Ct\tExc %\tExc\tExc Ct\tFold\tFold Ct\t                             When\t      First\t        Last\r\n + Thread (13212) CPU=11459ms                                                                         \t  0.9\t130,596.773\t 26,646\t  0.0\t  0\t     0\t   0\t      0\t 99119999A999999999999AAAAA9A999A\t    198.565\t 137,991.253\r\n |+ ntdll!_RtlUserThreadStart                                                                         \t  0.8\t119,731.453\t 22,778\t  0.0\t  0\t     0\t   0\t      0\t ___19999A999999999999AAAAA9A9997\t 16,506.005\t 136,804.296\r\n ||+ ntdll!__RtlUserThreadStart                                                                       \t  0.8\t119,731.453\t 22,778\t  0.0\t  0\t     0\t   0\t      0\t ___19999A999999999999AAAAA9A9997\t 16,506.005\t 136,804.296\r\n || + kernel32!BaseThreadInitThunk                                                                    \t  0.8\t119,731.453\t 22,778\t  0.0\t  0\t     0\t   0\t      0\t ___19999A999999999999AAAAA9A9997\t 16,506.005\t 136,804.296\r\n ||  + ntdll!TppWorkerThread                                                                          \t  0.8\t119,731.453\t 22,778\t  0.0\t  0\t     0\t   0\t      0\t ___19999A999999999999AAAAA9A9997\t 16,506.005\t 136,804.296\r\n ||   + ntdll!NtWaitForWorkViaWorkerFactory                                                           \t  0.7\t107,904.492\t    387\t  0.0\t  0\t     0\t   0\t      0\t ______3999999999999999A9AA9A9997\t 28,856.959\t 136,804.296\r\n ||   |+ ntdll!LdrInitializeThunk                                                                     \t  0.7\t107,904.492\t    387\t  0.0\t  0\t     0\t   0\t      0\t ______3999999999999999A9AA9A9997\t 28,856.959\t 136,804.296\r\n ||   | + ntdll!LdrpInitializeInternal                                                                \t  0.7\t107,904.492\t    387\t  0.0\t  0\t     0\t   0\t      0\t ______3999999999999999A9AA9A9997\t 28,856.959\t 136,804.296\r\n ||   |  + ntdll!_LdrpInitialize                                                                      \t  0.7\t107,904.492\t    387\t  0.0\t  0\t     0\t   0\t      0\t ______3999999999999999A9AA9A9997\t 28,856.959\t 136,804.296\r\n ||   |   + wow64!Wow64LdrpInitialize                                                                 \t  0.7\t107,904.492\t    387\t  0.0\t  0\t     0\t   0\t      0\t ______3999999999999999A9AA9A9997\t 28,856.959\t 136,804.296\r\n ||   |    + wow64!RunCpuSimulation                                                                   \t  0.7\t107,904.492\t    387\t  0.0\t  0\t     0\t   0\t      0\t ______3999999999999999A9AA9A9997\t 28,856.959\t 136,804.296\r\n ||   |     + wow64cpu!BTCpuSimulate                                                                  \t  0.7\t107,904.492\t    387\t  0.0\t  0\t     0\t   0\t      0\t ______3999999999999999A9AA9A9997\t 28,856.959\t 136,804.296\r\n ||   |      + wow64cpu!ServiceNoTurbo                                                                \t  0.7\t107,904.492\t    387\t  0.0\t  0\t     0\t   0\t      0\t ______3999999999999999A9AA9A9997\t 28,856.959\t 136,804.296\r\n ||   |       + wow64!Wow64SystemServiceEx                                                            \t  0.7\t107,904.492\t    387\t  0.0\t  0\t     0\t   0\t      0\t ______3999999999999999A9AA9A9997\t 28,856.959\t 136,804.296\r\n ||   |        + wow64!whNtWaitForWorkViaWorkerFactory                                                \t  0.7\t107,904.492\t    387\t  0.0\t  0\t     0\t   0\t      0\t ______3999999999999999A9AA9A9997\t 28,856.959\t 136,804.296\r\n ||   |         + ntdll!NtWaitForWorkViaWorkerFactory                                                 \t  0.7\t107,904.492\t    387\t  0.0\t  0\t     0\t   0\t      0\t ______3999999999999999A9AA9A9997\t 28,856.959\t 136,804.296\r\n ||   |          + ntoskrnl!KiSystemServiceCopyEnd                                                    \t  0.7\t107,904.492\t    387\t  0.0\t  0\t     0\t   0\t      0\t ______3999999999999999A9AA9A9997\t 28,856.959\t 136,804.296\r\n ||   |           + ntoskrnl!NtWaitForWorkViaWorkerFactory                                            \t  0.7\t107,904.492\t    387\t  0.0\t  0\t     0\t   0\t      0\t ______3999999999999999A9AA9A9997\t 28,856.959\t 136,804.296\r\n ||   |            + ntoskrnl!IoRemoveIoCompletion                                                    \t  0.7\t107,904.461\t    385\t  0.0\t  0\t     0\t   0\t      0\t ______3999999999999999A9AA9A9997\t 28,856.959\t 136,804.296\r\n ||   |            |+ ntoskrnl!KeRemoveQueueEx                                                        \t  0.7\t107,904.461\t    385\t  0.0\t  0\t     0\t   0\t      0\t ______3999999999999999A9AA9A9997\t 28,856.959\t 136,804.296\r\n ||   |            | + ntoskrnl!KiCommitThreadWait                                                    \t  0.7\t107,904.461\t    385\t  0.0\t  0\t     0\t   0\t      0\t ______3999999999999999A9AA9A9997\t 28,856.959\t 136,804.296\r\n ||   |            |  + ntoskrnl!KiSwapThread                                                         \t  0.7\t107,904.461\t    385\t  0.0\t  0\t     0\t   0\t      0\t ______3999999999999999A9AA9A9997\t 28,856.959\t 136,804.296\r\n ||   |            |   + ntoskrnl!KiSwapContext                                                       \t  0.7\t107,902.805\t    359\t  0.0\t  0\t     0\t   0\t      0\t ______399999999999999999AA9A9997\t 28,856.959\t 136,804.296\r\n ||   |            |   |+ ntoskrnl!SwapContext                                                        \t  0.7\t107,902.805\t    359\t  0.0\t  0\t     0\t   0\t      0\t ______399999999999999999AA9A9997\t 28,856.959\t 136,804.296\r\n ||   |            |   | + BLOCKED_TIME                                                               \t  0.7\t107,891.898\t    179\t  0.7\t107,891.898\t   179\t   0\t      0\t ______39999999999999999999999997\t 28,856.959\t 136,804.233\r\n ||   |            |   | + CPU_TIME                                                                   \t  0.0\t    10.816\t    179\t  0.0\t10.816\t   179\t   0\t      0\t ______..........................\t 29,181.696\t 136,804.296\r\n ||   |            |   | + ntoskrnl!EtwTraceContextSwap                                               \t  0.0\t     0.060\t      1\t  0.0\t  0\t     0\t   0\t      0\t ______._________________________\t 29,399.185\t  29,399.245\r\n ||   |            |   |  + ntoskrnl!??EtwpLogContextSwapEvent                                        \t  0.0\t     0.060\t      1\t  0.0\t  0\t     0\t   0\t      0\t ______._________________________\t 29,399.185\t  29,399.245\r\n ||   |            |   |   + ntoskrnl!EtwpStackTraceDispatcher                                        \t  0.0\t     0.060\t      1\t  0.0\t  0\t     0\t   0\t      0\t ______._________________________\t 29,399.185\t  29,399.245\r\n ||   |            |   |    + ntoskrnl!EtwpTraceStackWalk                                             \t  0.0\t     0.060\t      1\t  0.0\t  0\t     0\t   0\t      0\t ______._________________________\t 29,399.185\t  29,399.245\r\n ||   |            |   |     + ntoskrnl!RtlWalkFrameChain                                             \t  0.0\t     0.060\t      1\t  0.0\t  0\t     0\t   0\t      0\t ______._________________________\t 29,399.185\t  29,399.245\r\n ||   |            |   |      + ntoskrnl!RtlpWalkFrameChain                                           \t  0.0\t     0.060\t      1\t  0.0\t  0\t     0\t   0\t      0\t ______._________________________\t 29,399.185\t  29,399.245\r\n ||   |            |   |       + ntoskrnl!RtlpxVirtualUnwind                                          \t  0.0\t     0.060\t      1\t  0.0\t  0\t     0\t   0\t      0\t ______._________________________\t 29,399.185\t  29,399.245\r\n ||   |            |   |        + ntoskrnl!RtlpUnwindPrologue                                         \t  0.0\t     0.060\t      1\t  0.0\t  0\t     0\t   0\t      0\t ______._________________________\t 29,399.185\t  29,399.245\r\n ||   |            |   |         + CPU_TIME                                                           \t  0.0\t     0.060\t      1\t  0.0\t0.060\t     1\t   0\t      0\t ______._________________________\t 29,399.185\t  29,399.245\r\n ||   |            |   + ntoskrnl!KiDeliverApc                                                        \t  0.0\t     1.228\t     20\t  0.0\t  0\t     0\t   0\t      0\t _______._.____._.._.__..______..\t 30,824.326\t 134,565.976\r\n ||   |            |   |+ ntoskrnl!EtwpStackWalkApc                                                   \t  0.0\t     1.228\t     20\t  0.0\t  0\t     0\t   0\t      0\t _______._.____._.._.__..______..\t 30,824.326\t 134,565.976\r\n ||   |            |   | + ntoskrnl!EtwpTraceStackWalk                                                \t  0.0\t     1.228\t     20\t  0.0\t  0\t     0\t   0\t      0\t _______._.____._.._.__..______..\t 30,824.326\t 134,565.976\r\n ||   |            |   |  + ntoskrnl!RtlWalkFrameChain                                                \t  0.0\t     1.228\t     20\t  0.0\t  0\t     0\t   0\t      0\t _______._.____._.._.__..______..\t 30,824.326\t 134,565.976\r\n ||   |            |   |   + ntoskrnl!RtlpWalkFrameChain                                              \t  0.0\t     1.228\t     20\t  0.0\t  0\t     0\t   0\t      0\t _______._.____._.._.__..______..\t 30,824.326\t 134,565.976\r\n ||   |            |   |    + ntoskrnl!RtlpLookupFunctionEntryForStackWalks                           \t  0.0\t     0.430\t      7\t  0.0\t  0\t     0\t   0\t      0\t _______._.____.____.__._________\t 30,824.326\t  95,754.371\r\n ||   |            |   |    |+ ntoskrnl!KiDpcInterrupt                                                \t  0.0\t     0.211\t      4\t  0.0\t  0\t     0\t   0\t      0\t _________.____._________________\t 40,744.211\t  60,819.790\r\n ||   |            |   |    ||+ ntoskrnl!KxDispatchInterrupt                                          \t  0.0\t     0.211\t      4\t  0.0\t  0\t     0\t   0\t      0\t _________.____._________________\t 40,744.211\t  60,819.790\r\n ||   |            |   |    || + ntoskrnl!SwapContext                                                 \t  0.0\t     0.211\t      4\t  0.0\t  0\t     0\t   0\t      0\t _________.____._________________\t 40,744.211\t  60,819.790\r\n ||   |            |   |    ||  + CPU_TIME                                                            \t  0.0\t     0.134\t      2\t  0.0\t0.134\t     2\t   0\t      0\t _________.____._________________\t 40,744.226\t  60,819.790\r\n ||   |            |   |    ||  + BLOCKED_TIME                                                        \t  0.0\t     0.077\t      2\t  0.0\t0.077\t     2\t   0\t      0\t _________.____._________________\t 40,744.211\t  60,819.708\r\n ||   |            |   |    |+ CPU_TIME                                                               \t  0.0\t     0.189\t      2\t  0.0\t0.189\t     2\t   0\t      0\t _______.___________.____________\t 30,824.326\t  84,894.386\r\n ||   |            |   |    |+ ntoskrnl!RtlpLookupUserFunctionTable                                   \t  0.0\t     0.030\t      1\t  0.0\t  0\t     0\t   0\t      0\t ______________________._________\t 95,754.340\t  95,754.371\r\n ||   |            |   |    | + ntoskrnl!RtlpLookupUserFunctionTableInverted                          \t  0.0\t     0.030\t      1\t  0.0\t  0\t     0\t   0\t      0\t ______________________._________\t 95,754.340\t  95,754.371\r\n ||   |            |   |    |  + CPU_TIME                                                             \t  0.0\t     0.030\t      1\t  0.0\t0.030\t     1\t   0\t      0\t ______________________._________\t 95,754.340\t  95,754.371\r\n ||   |            |   |    + ntoskrnl!KiVmbusInterruptDispatch                                       \t  0.0\t     0.304\t      4\t  0.0\t  0\t     0\t   0\t      0\t ______________________________..\t130,729.786\t 134,565.976\r\n ||   |            |   |    |+ ntoskrnl!KiDpcInterruptBypass                                          \t  0.0\t     0.304\t      4\t  0.0\t  0\t     0\t   0\t      0\t ______________________________..\t130,729.786\t 134,565.976\r\n ||   |            |   |    | + ntoskrnl!KxDispatchInterrupt                                          \t  0.0\t     0.304\t      4\t  0.0\t  0\t     0\t   0\t      0\t ______________________________..\t130,729.786\t 134,565.976\r\n ||   |            |   |    |  + ntoskrnl!SwapContext                                                 \t  0.0\t     0.304\t      4\t  0.0\t  0\t     0\t   0\t      0\t ______________________________..\t130,729.786\t 134,565.976\r\n ||   |            |   |    |   + BLOCKED_TIME                                                        \t  0.0\t     0.162\t      2\t  0.0\t0.162\t     2\t   0\t      0\t ______________________________..\t130,729.786\t 134,565.951\r\n ||   |            |   |    |   + CPU_TIME                                                            \t  0.0\t     0.142\t      2\t  0.0\t0.142\t     2\t   0\t      0\t ______________________________..\t130,729.821\t 134,565.976\r\n ||   |            |   |    + ntoskrnl!RtlpxVirtualUnwind                                             \t  0.0\t     0.278\t      5\t  0.0\t  0\t     0\t   0\t      0\t _________._____________.________\t 39,291.047\t  99,396.540\r\n ||   |            |   |    |+ ntoskrnl!RtlpUnwindPrologue                                            \t  0.0\t     0.230\t      3\t  0.0\t  0\t     0\t   0\t      0\t _________.______________________\t 39,291.047\t  39,291.276\r\n ||   |            |   |    ||+ ntoskrnl!KiDpcInterrupt                                               \t  0.0\t     0.230\t      3\t  0.0\t  0\t     0\t   0\t      0\t _________.______________________\t 39,291.047\t  39,291.276\r\n ||   |            |   |    || + ntoskrnl!KxDispatchInterrupt                                         \t  0.0\t     0.230\t      3\t  0.0\t  0\t     0\t   0\t      0\t _________.______________________\t 39,291.047\t  39,291.276\r\n ||   |            |   |    ||  + ntoskrnl!SwapContext                                                \t  0.0\t     0.230\t      3\t  0.0\t  0\t     0\t   0\t      0\t _________.______________________\t 39,291.047\t  39,291.276\r\n ||   |            |   |    ||   + BLOCKED_TIME                                                       \t  0.0\t     0.108\t      1\t  0.0\t0.108\t     1\t   0\t      0\t _________.______________________\t 39,291.047\t  39,291.155\r\n ||   |            |   |    ||   + ntoskrnl!EtwTraceContextSwap                                       \t  0.0\t     0.098\t      1\t  0.0\t  0\t     0\t   0\t      0\t _________.______________________\t 39,291.178\t  39,291.276\r\n ||   |            |   |    ||   |+ ntoskrnl!??EtwpLogContextSwapEvent                                \t  0.0\t     0.098\t      1\t  0.0\t  0\t     0\t   0\t      0\t _________.______________________\t 39,291.178\t  39,291.276\r\n ||   |            |   |    ||   | + ntoskrnl!EtwpStackTraceDispatcher                                \t  0.0\t     0.098\t      1\t  0.0\t  0\t     0\t   0\t      0\t _________.______________________\t 39,291.178\t  39,291.276\r\n ||   |            |   |    ||   |  + ntoskrnl!EtwpTraceStackWalk                                     \t  0.0\t     0.098\t      1\t  0.0\t  0\t     0\t   0\t      0\t _________.______________________\t 39,291.178\t  39,291.276\r\n ||   |            |   |    ||   |   + ntoskrnl!RtlWalkFrameChain                                     \t  0.0\t     0.098\t      1\t  0.0\t  0\t     0\t   0\t      0\t _________.______________________\t 39,291.178\t  39,291.276\r\n ||   |            |   |    ||   |    + ntoskrnl!RtlpWalkFrameChain                                   \t  0.0\t     0.098\t      1\t  0.0\t  0\t     0\t   0\t      0\t _________.______________________\t 39,291.178\t  39,291.276\r\n ||   |            |   |    ||   |     + ntoskrnl!RtlpxVirtualUnwind                                  \t  0.0\t     0.098\t      1\t  0.0\t  0\t     0\t   0\t      0\t _________.______________________\t 39,291.178\t  39,291.276\r\n ||   |            |   |    ||   |      + ntoskrnl!RtlpUnwindPrologue                                 \t  0.0\t     0.098\t      1\t  0.0\t  0\t     0\t   0\t      0\t _________.______________________\t 39,291.178\t  39,291.276\r\n ||   |            |   |    ||   |       + CPU_TIME                                                   \t  0.0\t     0.098\t      1\t  0.0\t0.098\t     1\t   0\t      0\t _________.______________________\t 39,291.178\t  39,291.276\r\n ||   |            |   |    ||   + CPU_TIME                                                           \t  0.0\t     0.024\t      1\t  0.0\t0.024\t     1\t   0\t      0\t _________.______________________\t 39,291.155\t  39,291.178\r\n ||   |            |   |    |+ ntoskrnl!KiDpcInterrupt                                                \t  0.0\t     0.048\t      2\t  0.0\t  0\t     0\t   0\t      0\t _______________________.________\t 99,396.492\t  99,396.540\r\n ||   |            |   |    | + ntoskrnl!KxDispatchInterrupt                                          \t  0.0\t     0.048\t      2\t  0.0\t  0\t     0\t   0\t      0\t _______________________.________\t 99,396.492\t  99,396.540\r\n ||   |            |   |    |  + ntoskrnl!SwapContext                                                 \t  0.0\t     0.048\t      2\t  0.0\t  0\t     0\t   0\t      0\t _______________________.________\t 99,396.492\t  99,396.540\r\n ||   |            |   |    |   + CPU_TIME                                                            \t  0.0\t     0.038\t      1\t  0.0\t0.038\t     1\t   0\t      0\t _______________________.________\t 99,396.502\t  99,396.540\r\n ||   |            |   |    |   + BLOCKED_TIME                                                        \t  0.0\t     0.010\t      1\t  0.0\t0.010\t     1\t   0\t      0\t _______________________.________\t 99,396.492\t  99,396.502\r\n ||   |            |   |    + ntoskrnl!RtlpWalkWowStack                                               \t  0.0\t     0.156\t      2\t  0.0\t  0\t     0\t   0\t      0\t ________________._______________\t 72,765.796\t  72,765.952\r\n ||   |            |   |    |+ ntoskrnl!KiDpcInterrupt                                                \t  0.0\t     0.156\t      2\t  0.0\t  0\t     0\t   0\t      0\t ________________._______________\t 72,765.796\t  72,765.952\r\n ||   |            |   |    | + ntoskrnl!KxDispatchInterrupt                                          \t  0.0\t     0.156\t      2\t  0.0\t  0\t     0\t   0\t      0\t ________________._______________\t 72,765.796\t  72,765.952\r\n ||   |            |   |    |  + ntoskrnl!SwapContext                                                 \t  0.0\t     0.156\t      2\t  0.0\t  0\t     0\t   0\t      0\t ________________._______________\t 72,765.796\t  72,765.952\r\n ||   |            |   |    |   + BLOCKED_TIME                                                        \t  0.0\t     0.109\t      1\t  0.0\t0.109\t     1\t   0\t      0\t ________________._______________\t 72,765.796\t  72,765.905\r\n ||   |            |   |    |   + CPU_TIME                                                            \t  0.0\t     0.047\t      1\t  0.0\t0.047\t     1\t   0\t      0\t ________________._______________\t 72,765.905\t  72,765.952\r\n ||   |            |   |    + ntoskrnl!KiDpcInterrupt                                                 \t  0.0\t     0.061\t      2\t  0.0\t  0\t     0\t   0\t      0\t _________________.______________\t 76,792.177\t  76,792.238\r\n ||   |            |   |     + ntoskrnl!KxDispatchInterrupt                                           \t  0.0\t     0.061\t      2\t  0.0\t  0\t     0\t   0\t      0\t _________________.______________\t 76,792.177\t  76,792.238\r\n ||   |            |   |      + ntoskrnl!SwapContext                                                  \t  0.0\t     0.061\t      2\t  0.0\t  0\t     0\t   0\t      0\t _________________.______________\t 76,792.177\t  76,792.238\r\n ||   |            |   |       + CPU_TIME                                                             \t  0.0\t     0.051\t      1\t  0.0\t0.051\t     1\t   0\t      0\t _________________.______________\t 76,792.187\t  76,792.238\r\n ||   |            |   |       + BLOCKED_TIME                                                         \t  0.0\t     0.010\t      1\t  0.0\t0.010\t     1\t   0\t      0\t _________________.______________\t 76,792.177\t  76,792.187\r\n ||   |            |   + ntoskrnl!KiDpcInterrupt                                                      \t  0.0\t     0.431\t      6\t  0.0\t  0\t     0\t   0\t      0\t ________.________._____________.\t 37,740.382\t 134,299.418\r\n ||   |            |    + ntoskrnl!KxDispatchInterrupt                                                \t  0.0\t     0.431\t      6\t  0.0\t  0\t     0\t   0\t      0\t ________.________._____________.\t 37,740.382\t 134,299.418\r\n ||   |            |     + ntoskrnl!SwapContext                                                       \t  0.0\t     0.431\t      6\t  0.0\t  0\t     0\t   0\t      0\t ________.________._____________.\t 37,740.382\t 134,299.418\r\n ||   |            |      + BLOCKED_TIME                                                              \t  0.0\t     0.224\t      3\t  0.0\t0.224\t     3\t   0\t      0\t ________.________._____________.\t 37,740.382\t 134,299.354\r\n ||   |            |      + CPU_TIME                                                                  \t  0.0\t     0.206\t      3\t  0.0\t0.206\t     3\t   0\t      0\t ________.________._____________.\t 37,740.417\t 134,299.418\r\n ||   |            + ntoskrnl!ObReferenceObjectByHandle                                               \t  0.0\t     0.030\t      2\t  0.0\t  0\t     0\t   0\t      0\t ______________________________._\t129,408.197\t 129,408.227\r\n ||   |             + ntoskrnl!ObpReferenceObjectByHandleWithTag                                      \t  0.0\t     0.030\t      2\t  0.0\t  0\t     0\t   0\t      0\t ______________________________._\t129,408.197\t 129,408.227\r\n ||   |              + ntoskrnl!KiDpcInterrupt                                                        \t  0.0\t     0.030\t      2\t  0.0\t  0\t     0\t   0\t      0\t ______________________________._\t129,408.197\t 129,408.227\r\n ||   |               + ntoskrnl!KxDispatchInterrupt                                                  \t  0.0\t     0.030\t      2\t  0.0\t  0\t     0\t   0\t      0\t ______________________________._\t129,408.197\t 129,408.227\r\n ||   |                + ntoskrnl!SwapContext                                                         \t  0.0\t     0.030\t      2\t  0.0\t  0\t     0\t   0\t      0\t ______________________________._\t129,408.197\t 129,408.227\r\n ||   |                 + CPU_TIME                                                                    \t  0.0\t     0.021\t      1\t  0.0\t0.021\t     1\t   0\t      0\t ______________________________._\t129,408.206\t 129,408.227\r\n ||   |                 + BLOCKED_TIME                                                                \t  0.0\t     0.009\t      1\t  0.0\t0.009\t     1\t   0\t      0\t ______________________________._\t129,408.197\t 129,408.206\r\n ||   + ntdll!TppWaitCompletion                                                                       \t  0.1\t11,784.421\t 22,315\t  0.0\t  0\t     0\t   0\t      0\t ___1996_______________________._\t 16,506.005\t 132,323.009\r\n ||   |+ ntdll!TppExecuteWaitCallback                                                                 \t  0.1\t11,784.421\t 22,315\t  0.0\t  0\t     0\t   0\t      0\t ___1996_______________________._\t 16,506.005\t 132,323.009\r\n ||   | + ntdll!EtwpNotificationThread                                                                \t  0.1\t11,784.421\t 22,315\t  0.0\t  0\t     0\t   0\t      0\t ___1996_______________________._\t 16,506.005\t 132,323.009\r\n ||   |  + ntdll!EtwDeliverDataBlock                                                                  \t  0.1\t11,784.329\t 22,311\t  0.0\t  0\t     0\t   0\t      0\t ___1996_________________________\t 16,506.005\t  28,856.959\r\n ||   |  |+ ntdll!EtwpProcessNotification                                                             \t  0.1\t11,784.329\t 22,311\t  0.0\t  0\t     0\t   0\t      0\t ___1996_________________________\t 16,506.005\t  28,856.959\r\n ||   |  | + ntdll!EtwpUpdateEnableInfoAndCallback                                                    \t  0.1\t11,784.329\t 22,311\t  0.0\t  0\t     0\t   0\t      0\t ___1996_________________________\t 16,506.005\t  28,856.959\r\n ||   |  |  + ntdll!EtwpEventApiCallback                                                              \t  0.1\t11,784.329\t 22,311\t  0.0\t  0\t     0\t   0\t      0\t ___1996_________________________\t 16,506.005\t  28,856.959\r\n ||   |  |   + clr!McGenControlCallbackV2                                                             \t  0.1\t11,783.491\t 22,310\t  0.0\t  0\t     0\t   0\t      0\t ___1996_________________________\t 16,506.005\t  28,856.959\r\n ||   |  |   |+ clr!EtwCallback                                                                       \t  0.1\t11,783.491\t 22,310\t  0.0\t  0\t     0\t   0\t      0\t ___1996_________________________\t 16,506.005\t  28,856.959\r\n ||   |  |   | + clr!ETW::EnumerationLog::StartRundown                                                \t  0.1\t11,783.491\t 22,310\t  0.0\t  0\t     0\t   0\t      0\t ___1996_________________________\t 16,506.005\t  28,856.959\r\n ||   |  |   |  + clr!ETW::EnumerationLog::EnumerationHelper                                          \t  0.1\t11,774.920\t 22,298\t  0.0\t  0\t     0\t   0\t      0\t ___1996_________________________\t 16,506.005\t  28,856.130\r\n ||   |  |   |  |+ clr!ETW::EnumerationLog::IterateAppDomain                                          \t  0.1\t 9,032.438\t 17,896\t  0.0\t  0\t     0\t   0\t      0\t ___1674_________________________\t 16,506.005\t  28,458.084\r\n ||   |  |   |  ||+ clr!ETW::EnumerationLog::IterateDomain                                            \t  0.1\t 9,032.438\t 17,896\t  0.0\t  0\t     0\t   0\t      0\t ___1674_________________________\t 16,506.005\t  28,458.084\r\n ||   |  |   |  || + clr!ETW::MethodLog::SendEventsForJitMethods                                      \t  0.1\t 8,835.409\t 17,670\t  0.0\t  0\t     0\t   0\t      0\t ___1674_________________________\t 16,506.005\t  28,458.084\r\n ||   |  |   |  || |+ clr!ETW::MethodLog::SendEventsForJitMethodsHelper                               \t  0.1\t 8,810.744\t 17,614\t  0.0\t  0\t     0\t   0\t      0\t ___1674_________________________\t 16,506.005\t  28,458.084\r\n ||   |  |   |  || ||+ clr!ETW::MethodLog::SendMethodILToNativeMapEvent                               \t  0.0\t 4,915.687\t  9,788\t  0.0\t  0\t     0\t   0\t      0\t ___1342_________________________\t 16,510.889\t  28,458.084\r\n ||   |  |   |  || |||+ clr!Debugger::GetILToNativeMappingIntoArrays                                  \t  0.0\t 4,038.949\t  8,006\t  0.0\t  0\t     0\t   0\t      0\t ___0232_________________________\t 16,510.889\t  28,457.092\r\n ||   |  |   |  || ||||+ clr!Debugger::GetJitInfoWorker                                               \t  0.0\t 3,856.117\t  7,669\t  0.0\t  0\t     0\t   0\t      0\t ___0232_________________________\t 16,510.889\t  28,457.092\r\n ||   |  |   |  || |||||+ clr!Debugger::GetOrCreateMethodInfo                                         \t  0.0\t 3,754.404\t  7,467\t  0.0\t  0\t     0\t   0\t      0\t ___0231_________________________\t 16,510.889\t  28,457.092\r\n ||   |  |   |  || ||||||+ clr!DebuggerMethodInfoTable::GetMethodInfo                                 \t  0.0\t 3,724.737\t  7,403\t  0.0\t  0\t     0\t   0\t      0\t ___0231_________________________\t 16,510.889\t  28,457.092\r\n ||   |  |   |  || |||||||+ clr!CHashTable::Find                                                      \t  0.0\t 3,557.505\t  7,102\t  0.0\t  0\t     0\t   0\t      0\t ___0231_________________________\t 16,510.889\t  28,457.092\r\n ||   |  |   |  || ||||||||+ clr!DebuggerMethodInfoTable::Cmp                                         \t  0.0\t 3,205.219\t  6,472\t  0.0\t  0\t     0\t   0\t      0\t ___0221_________________________\t 16,510.889\t  28,457.092\r\n ||   |  |   |  || |||||||||+ CPU_TIME                                                                \t  0.0\t 2,702.180\t  2,931\t  0.0\t2,702.180\t 2,931\t   0\t      0\t ___0121_________________________\t 16,510.889\t  28,457.092\r\n ||   |  |   |  || |||||||||+ ntoskrnl!KiDpcInterrupt                                                 \t  0.0\t   316.905\t  1,998\t  0.0\t  0\t     0\t   0\t      0\t ___0000_________________________\t 16,569.968\t  28,440.080\r\n ||   |  |   |  || ||||||||||+ ntoskrnl!KxDispatchInterrupt                                           \t  0.0\t   316.684\t  1,994\t  0.0\t  0\t     0\t   0\t      0\t ___0000_________________________\t 16,569.968\t  28,440.080\r\n ||   |  |   |  || |||||||||||+ ntoskrnl!SwapContext                                                  \t  0.0\t   316.684\t  1,994\t  0.0\t  0\t     0\t   0\t      0\t ___0000_________________________\t 16,569.968\t  28,440.080\r\n ||   |  |   |  || ||||||||||| + CPU_TIME                                                             \t  0.0\t   172.590\t    994\t  0.0\t172.590\t   994\t   0\t      0\t ___o00o_________________________\t 16,570.063\t  28,440.080\r\n ||   |  |   |  || ||||||||||| + BLOCKED_TIME                                                         \t  0.0\t   141.720\t    994\t  0.0\t141.720\t   994\t   0\t      0\t ___oo0o_________________________\t 16,569.968\t  28,439.714\r\n ||   |  |   |  || ||||||||||| + ntoskrnl!EtwTraceContextSwap                                         \t  0.0\t     2.373\t      6\t  0.0\t  0\t     0\t   0\t      0\t ___._.._________________________\t 16,577.900\t  27,556.047\r\n ||   |  |   |  || |||||||||||  + ntoskrnl!??EtwpLogContextSwapEvent                                  \t  0.0\t     2.373\t      6\t  0.0\t  0\t     0\t   0\t      0\t ___._.._________________________\t 16,577.900\t  27,556.047\r\n ||   |  |   |  || |||||||||||   + ntoskrnl!EtwpStackTraceDispatcher                                  \t  0.0\t     2.373\t      6\t  0.0\t  0\t     0\t   0\t      0\t ___._.._________________________\t 16,577.900\t  27,556.047\r\n ||   |  |   |  || |||||||||||    + ntoskrnl!EtwpQueueStackWalkApc                                    \t  0.0\t     2.102\t      4\t  0.0\t  0\t     0\t   0\t      0\t ___._.._________________________\t 16,904.933\t  27,556.047\r\n ||   |  |   |  || |||||||||||    |+ ntoskrnl!KeInsertQueueApc                                        \t  0.0\t     2.102\t      4\t  0.0\t  0\t     0\t   0\t      0\t ___._.._________________________\t 16,904.933\t  27,556.047\r\n ||   |  |   |  || |||||||||||    | + ntoskrnl!KiSignalThreadForApc                                   \t  0.0\t     1.106\t      3\t  0.0\t  0\t     0\t   0\t      0\t ___.__._________________________\t 16,904.933\t  27,556.047\r\n ||   |  |   |  || |||||||||||    | |+ ntoskrnl!HalRequestSoftwareInterrupt                           \t  0.0\t     1.106\t      3\t  0.0\t  0\t     0\t   0\t      0\t ___.__._________________________\t 16,904.933\t  27,556.047\r\n ||   |  |   |  || |||||||||||    | | + ntoskrnl!HalpInterruptSendIpi                                 \t  0.0\t     1.106\t      3\t  0.0\t  0\t     0\t   0\t      0\t ___.__._________________________\t 16,904.933\t  27,556.047\r\n ||   |  |   |  || |||||||||||    | |  + CPU_TIME                                                     \t  0.0\t     1.106\t      3\t  0.0\t1.106\t     3\t   0\t      0\t ___.__._________________________\t 16,904.933\t  27,556.047\r\n ||   |  |   |  || |||||||||||    | + CPU_TIME                                                        \t  0.0\t     0.996\t      1\t  0.0\t0.996\t     1\t   0\t      0\t _____.__________________________\t 23,862.627\t  23,863.623\r\n ||   |  |   |  || |||||||||||    + ntoskrnl!EtwpTraceStackWalk                                       \t  0.0\t     0.271\t      2\t  0.0\t  0\t     0\t   0\t      0\t ___._.__________________________\t 16,577.900\t  25,250.946\r\n ||   |  |   |  || |||||||||||     + ntoskrnl!RtlWalkFrameChain                                       \t  0.0\t     0.271\t      2\t  0.0\t  0\t     0\t   0\t      0\t ___._.__________________________\t 16,577.900\t  25,250.946\r\n ||   |  |   |  || |||||||||||      + ntoskrnl!RtlpWalkFrameChain                                     \t  0.0\t     0.271\t      2\t  0.0\t  0\t     0\t   0\t      0\t ___._.__________________________\t 16,577.900\t  25,250.946\r\n ||   |  |   |  || |||||||||||       + ntoskrnl!RtlpxVirtualUnwind                                    \t  0.0\t     0.271\t      2\t  0.0\t  0\t     0\t   0\t      0\t ___._.__________________________\t 16,577.900\t  25,250.946\r\n ||   |  |   |  || |||||||||||        + CPU_TIME                                                      \t  0.0\t     0.271\t      2\t  0.0\t0.271\t     2\t   0\t      0\t ___._.__________________________\t 16,577.900\t  25,250.946\r\n ||   |  |   |  || ||||||||||+ ntoskrnl!KiDispatchInterruptContinue                                   \t  0.0\t     0.191\t      1\t  0.0\t  0\t     0\t   0\t      0\t ______._________________________\t 27,095.952\t  27,096.142\r\n ||   |  |   |  || |||||||||||+ ntoskrnl!KxRetireDpcList                                              \t  0.0\t     0.191\t      1\t  0.0\t  0\t     0\t   0\t      0\t ______._________________________\t 27,095.952\t  27,096.142\r\n ||   |  |   |  || ||||||||||| + ntoskrnl!KiRetireDpcList                                             \t  0.0\t     0.191\t      1\t  0.0\t  0\t     0\t   0\t      0\t ______._________________________\t 27,095.952\t  27,096.142\r\n ||   |  |   |  || |||||||||||  + ntoskrnl!KiExecuteAllDpcs                                           \t  0.0\t     0.191\t      1\t  0.0\t  0\t     0\t   0\t      0\t ______._________________________\t 27,095.952\t  27,096.142\r\n ||   |  |   |  || |||||||||||   + ntoskrnl!PopExecuteProcessorCallback                               \t  0.0\t     0.191\t      1\t  0.0\t  0\t     0\t   0\t      0\t ______._________________________\t 27,095.952\t  27,096.142\r\n ||   |  |   |  || |||||||||||    + ntoskrnl!PopQueueTargetDpc                                        \t  0.0\t     0.191\t      1\t  0.0\t  0\t     0\t   0\t      0\t ______._________________________\t 27,095.952\t  27,096.142\r\n ||   |  |   |  || |||||||||||     + ntoskrnl!KeSetEvent                                              \t  0.0\t     0.191\t      1\t  0.0\t  0\t     0\t   0\t      0\t ______._________________________\t 27,095.952\t  27,096.142\r\n ||   |  |   |  || |||||||||||      + ntoskrnl!KiExitDispatcher                                       \t  0.0\t     0.191\t      1\t  0.0\t  0\t     0\t   0\t      0\t ______._________________________\t 27,095.952\t  27,096.142\r\n ||   |  |   |  || |||||||||||       + ntoskrnl!HalpInterruptSendIpi                                  \t  0.0\t     0.191\t      1\t  0.0\t  0\t     0\t   0\t      0\t ______._________________________\t 27,095.952\t  27,096.142\r\n ||   |  |   |  || |||||||||||        + CPU_TIME                                                      \t  0.0\t     0.191\t      1\t  0.0\t0.191\t     1\t   0\t      0\t ______._________________________\t 27,095.952\t  27,096.142\r\n ||   |  |   |  || ||||||||||+ CPU_TIME                                                               \t  0.0\t     0.031\t      3\t  0.0\t0.031\t     3\t   0\t      0\t ___._.._________________________\t 16,859.926\t  26,205.871\r\n ||   |  |   |  || |||||||||+ ntoskrnl!KiVmbusInterruptDispatch                                       \t  0.0\t   123.752\t  1,220\t  0.0\t  0\t     0\t   0\t      0\t ___oooo_________________________\t 16,510.954\t  28,021.040\r\n ||   |  |   |  || ||||||||||+ ntoskrnl!KiDpcInterruptBypass                                          \t  0.0\t   123.702\t  1,219\t  0.0\t  0\t     0\t   0\t      0\t ___oooo_________________________\t 16,510.954\t  28,021.040\r\n ||   |  |   |  || |||||||||||+ ntoskrnl!KxDispatchInterrupt                                          \t  0.0\t   121.571\t  1,214\t  0.0\t  0\t     0\t   0\t      0\t ___oooo_________________________\t 16,510.954\t  28,021.040\r\n ||   |  |   |  || ||||||||||||+ ntoskrnl!SwapContext                                                 \t  0.0\t   121.571\t  1,214\t  0.0\t  0\t     0\t   0\t      0\t ___oooo_________________________\t 16,510.954\t  28,021.040\r\n ||   |  |   |  || |||||||||||| + CPU_TIME                                                            \t  0.0\t    69.052\t    606\t  0.0\t69.052\t   606\t   0\t      0\t ___oooo_________________________\t 16,510.990\t  28,021.040\r\n ||   |  |   |  || |||||||||||| + BLOCKED_TIME                                                        \t  0.0\t    51.167\t    605\t  0.0\t51.167\t   605\t   0\t      0\t ___oooo_________________________\t 16,510.954\t  28,020.687\r\n ||   |  |   |  || |||||||||||| + ntoskrnl!EtwTraceContextSwap                                        \t  0.0\t     1.352\t      3\t  0.0\t  0\t     0\t   0\t      0\t ____..._________________________\t 18,641.107\t  27,756.111\r\n ||   |  |   |  || ||||||||||||  + ntoskrnl!??EtwpLogContextSwapEvent                                 \t  0.0\t     1.352\t      3\t  0.0\t  0\t     0\t   0\t      0\t ____..._________________________\t 18,641.107\t  27,756.111\r\n ||   |  |   |  || ||||||||||||   + ntoskrnl!EtwpStackTraceDispatcher                                 \t  0.0\t     1.352\t      3\t  0.0\t  0\t     0\t   0\t      0\t ____..._________________________\t 18,641.107\t  27,756.111\r\n ||   |  |   |  || ||||||||||||    + ntoskrnl!EtwpTraceStackWalk                                      \t  0.0\t     1.352\t      3\t  0.0\t  0\t     0\t   0\t      0\t ____..._________________________\t 18,641.107\t  27,756.111\r\n ||   |  |   |  || ||||||||||||     + ntoskrnl!RtlWalkFrameChain                                      \t  0.0\t     1.352\t      3\t  0.0\t  0\t     0\t   0\t      0\t ____..._________________________\t 18,641.107\t  27,756.111\r\n ||   |  |   |  || ||||||||||||      + ntoskrnl!RtlpWalkFrameChain                                    \t  0.0\t     1.260\t      2\t  0.0\t  0\t     0\t   0\t      0\t ____..__________________________\t 18,641.107\t  23,144.550\r\n ||   |  |   |  || ||||||||||||      |+ ntoskrnl!RtlpxVirtualUnwind                                   \t  0.0\t     1.260\t      2\t  0.0\t  0\t     0\t   0\t      0\t ____..__________________________\t 18,641.107\t  23,144.550\r\n ||   |  |   |  || ||||||||||||      | + ntoskrnl!RtlpUnwindPrologue                                  \t  0.0\t     1.260\t      2\t  0.0\t  0\t     0\t   0\t      0\t ____..__________________________\t 18,641.107\t  23,144.550\r\n ||   |  |   |  || ||||||||||||      |  + CPU_TIME                                                    \t  0.0\t     1.260\t      2\t  0.0\t1.260\t     2\t   0\t      0\t ____..__________________________\t 18,641.107\t  23,144.550\r\n ||   |  |   |  || ||||||||||||      + ntoskrnl!RtlpGetStackLimits                                    \t  0.0\t     0.092\t      1\t  0.0\t  0\t     0\t   0\t      0\t ______._________________________\t 27,756.019\t  27,756.111\r\n ||   |  |   |  || ||||||||||||       + ntoskrnl!KeQueryCurrentStackInformationEx                     \t  0.0\t     0.092\t      1\t  0.0\t  0\t     0\t   0\t      0\t ______._________________________\t 27,756.019\t  27,756.111\r\n ||   |  |   |  || ||||||||||||        + CPU_TIME                                                     \t  0.0\t     0.092\t      1\t  0.0\t0.092\t     1\t   0\t      0\t ______._________________________\t 27,756.019\t  27,756.111\r\n ||   |  |   |  || |||||||||||+ ntoskrnl!KiDispatchInterruptContinue                                  \t  0.0\t     2.132\t      5\t  0.0\t  0\t     0\t   0\t      0\t ___...__________________________\t 16,812.924\t  25,586.797\r\n ||   |  |   |  || ||||||||||| + ntoskrnl!KxRetireDpcList                                             \t  0.0\t     2.132\t      5\t  0.0\t  0\t     0\t   0\t      0\t ___...__________________________\t 16,812.924\t  25,586.797\r\n ||   |  |   |  || |||||||||||  + ntoskrnl!KiRetireDpcList                                            \t  0.0\t     2.132\t      5\t  0.0\t  0\t     0\t   0\t      0\t ___...__________________________\t 16,812.924\t  25,586.797\r\n ||   |  |   |  || |||||||||||   + ntoskrnl!KiExecuteAllDpcs                                          \t  0.0\t     2.132\t      5\t  0.0\t  0\t     0\t   0\t      0\t ___...__________________________\t 16,812.924\t  25,586.797\r\n ||   |  |   |  || |||||||||||    + vmbus!ChildInterruptDpc                                           \t  0.0\t     2.115\t      4\t  0.0\t  0\t     0\t   0\t      0\t ___...__________________________\t 16,812.924\t  25,586.797\r\n ||   |  |   |  || |||||||||||    |+ vmbkmcl!KmclpVmbusIsr                                            \t  0.0\t     1.977\t      2\t  0.0\t  0\t     0\t   0\t      0\t ____..__________________________\t 19,604.204\t  25,586.797\r\n ||   |  |   |  || |||||||||||    ||+ vmbkmcl!InpFillAndProcessQueue                                  \t  0.0\t     1.977\t      2\t  0.0\t  0\t     0\t   0\t      0\t ____..__________________________\t 19,604.204\t  25,586.797\r\n ||   |  |   |  || |||||||||||    || + vmbkmcl!InpFillQueue                                           \t  0.0\t     0.993\t      1\t  0.0\t  0\t     0\t   0\t      0\t ____.___________________________\t 19,604.204\t  19,605.197\r\n ||   |  |   |  || |||||||||||    || |+ CPU_TIME                                                      \t  0.0\t     0.993\t      1\t  0.0\t0.993\t     1\t   0\t      0\t ____.___________________________\t 19,604.204\t  19,605.197\r\n ||   |  |   |  || |||||||||||    || + vmbkmcl!InpProcessQueue                                        \t  0.0\t     0.984\t      1\t  0.0\t  0\t     0\t   0\t      0\t _____.__________________________\t 25,585.812\t  25,586.797\r\n ||   |  |   |  || |||||||||||    ||  + netvsc!NvscKmclProcessPacket                                  \t  0.0\t     0.984\t      1\t  0.0\t  0\t     0\t   0\t      0\t _____.__________________________\t 25,585.812\t  25,586.797\r\n ||   |  |   |  || |||||||||||    ||   + netvsc!RndisMIndicateReceive                                 \t  0.0\t     0.984\t      1\t  0.0\t  0\t     0\t   0\t      0\t _____.__________________________\t 25,585.812\t  25,586.797\r\n ||   |  |   |  || |||||||||||    ||    + netvsc!ReceivePacketMessage                                 \t  0.0\t     0.984\t      1\t  0.0\t  0\t     0\t   0\t      0\t _____.__________________________\t 25,585.812\t  25,586.797\r\n ||   |  |   |  || |||||||||||    ||     + ndis!NdisMIndicateReceiveNetBufferLists                    \t  0.0\t     0.984\t      1\t  0.0\t  0\t     0\t   0\t      0\t _____.__________________________\t 25,585.812\t  25,586.797\r\n ||   |  |   |  || |||||||||||    ||      + ndis!ndisInvokeNextReceiveHandler                         \t  0.0\t     0.984\t      1\t  0.0\t  0\t     0\t   0\t      0\t _____.__________________________\t 25,585.812\t  25,586.797\r\n ||   |  |   |  || |||||||||||    ||       + ndis!ndisInvokeIterativeDatapath                         \t  0.0\t     0.984\t      1\t  0.0\t  0\t     0\t   0\t      0\t _____.__________________________\t 25,585.812\t  25,586.797\r\n ||   |  |   |  || |||||||||||    ||        + ndis!ndisIterativeDPInvokeHandlerOnTracker              \t  0.0\t     0.984\t      1\t  0.0\t  0\t     0\t   0\t      0\t _____.__________________________\t 25,585.812\t  25,586.797\r\n ||   |  |   |  || |||||||||||    ||         + ndis!ndisCallNextDatapathHandler                       \t  0.0\t     0.984\t      1\t  0.0\t  0\t     0\t   0\t      0\t _____.__________________________\t 25,585.812\t  25,586.797\r\n ||   |  |   |  || |||||||||||    ||          + ndis!ndisCallReceiveHandler                           \t  0.0\t     0.984\t      1\t  0.0\t  0\t     0\t   0\t      0\t _____.__________________________\t 25,585.812\t  25,586.797\r\n ||   |  |   |  || |||||||||||    ||           + ndis!ndisMTopReceiveNetBufferLists                   \t  0.0\t     0.984\t      1\t  0.0\t  0\t     0\t   0\t      0\t _____.__________________________\t 25,585.812\t  25,586.797\r\n ||   |  |   |  || |||||||||||    ||            + ndis!ndisMIndicateNetBufferListsToOpen              \t  0.0\t     0.984\t      1\t  0.0\t  0\t     0\t   0\t      0\t _____.__________________________\t 25,585.812\t  25,586.797\r\n ||   |  |   |  || |||||||||||    ||             + tcpip!FlReceiveNetBufferListChain                  \t  0.0\t     0.984\t      1\t  0.0\t  0\t     0\t   0\t      0\t _____.__________________________\t 25,585.812\t  25,586.797\r\n ||   |  |   |  || |||||||||||    ||              + tcpip!NetioExpandKernelStackAndCallout            \t  0.0\t     0.984\t      1\t  0.0\t  0\t     0\t   0\t      0\t _____.__________________________\t 25,585.812\t  25,586.797\r\n ||   |  |   |  || |||||||||||    ||               + ntoskrnl!KeExpandKernelStackAndCalloutEx         \t  0.0\t     0.984\t      1\t  0.0\t  0\t     0\t   0\t      0\t _____.__________________________\t 25,585.812\t  25,586.797\r\n ||   |  |   |  || |||||||||||    ||                + ntoskrnl!KeExpandKernelStackAndCalloutInternal  \t  0.0\t     0.984\t      1\t  0.0\t  0\t     0\t   0\t      0\t _____.__________________________\t 25,585.812\t  25,586.797\r\n ||   |  |   |  || |||||||||||    ||                 + tcpip!FlReceiveNetBufferListChainCalloutRoutine\t  0.0\t     0.984\t      1\t  0.0\t  0\t     0\t   0\t      0\t _____.__________________________\t 25,585.812\t  25,586.797\r\n\r\n```\r\n\r\nOne thing to note that there are multiple threads with same thread id 13212 in the same trace, below is 2nd thread with same id doing the rundown\r\n![2nd instance of 13212](https://github.com/dotnet/runtime/assets/9109259/736fe067-4ddd-4736-bc54-82aab4e40b8e)\r\n\r\nOther instances of same thread\r\n![image](https://github.com/dotnet/runtime/assets/9109259/bd99473f-63e5-4cec-85e1-3fcf7a741241)\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOe7r_uA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc568dNC",
                                           "createdAt":  "2024-04-17T23:32:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "https://github.com/dotnet/runtime/issues/11056 ?",
                                           "updatedAt":  "2024-04-17T23:32:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc568dVF",
                                           "createdAt":  "2024-04-17T23:32:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-17T23:32:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5681aT",
                                           "createdAt":  "2024-04-18T00:22:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "marafiq",
                                           "body":  "\u003e #11056 ?\r\n\r\n@jkotas It seems very related. As on CPU stacks window, this is what I see\r\n![image](https://github.com/dotnet/runtime/assets/9109259/f031685c-5caf-4e6f-ab1a-85f225817ee3)\r\nSubsequently as previously noted multiple threads doing the rundown.\r\n\r\n```\r\nName                                                                  \tInc %\t     Inc\tExc %\tExc\tFold\t                             When\t       First\t        Last\r\n + Thread (13212) CPU=11459ms                                         \t 49.0\t  13,875\t  0.0\t  0\t   0\t 41o1996o_o____o_.._._..o____o_._\t     503.287\t 129,364.361\r\n |+ ntdll!_RtlUserThreadStart                                         \t 38.5\t  10,899\t  0.0\t  0\t   0\t ___1886o_o____o_.._._..o____o_._\t  16,510.889\t 129,364.361\r\n ||+ ntdll!__RtlUserThreadStart                                       \t 38.5\t  10,899\t  0.0\t  0\t   0\t ___1886o_o____o_.._._..o____o_._\t  16,510.889\t 129,364.361\r\n || + kernel32!BaseThreadInitThunk                                    \t 38.5\t  10,899\t  0.0\t  0\t   0\t ___1886o_o____o_.._._..o____o_._\t  16,510.889\t 129,364.361\r\n ||  + ntdll!TppWorkerThread                                          \t 38.5\t  10,899\t  0.0\t  0\t   0\t ___1886o_o____o_.._._..o____o_._\t  16,510.889\t 129,364.361\r\n ||   + ntdll!TppWaitCompletion                                       \t 38.4\t  10,852\t  0.0\t  0\t   0\t ___1886_________________________\t  16,510.889\t  28,857.130\r\n ||   |+ ntdll!TppExecuteWaitCallback                                 \t 38.4\t  10,852\t  0.0\t  0\t   0\t ___1886_________________________\t  16,510.889\t  28,857.130\r\n ||   | + ntdll!EtwpNotificationThread                                \t 38.4\t  10,852\t  0.0\t  0\t   0\t ___1886_________________________\t  16,510.889\t  28,857.130\r\n ||   |  + ntdll!EtwDeliverDataBlock                                  \t 38.4\t  10,852\t  0.0\t  0\t   0\t ___1886_________________________\t  16,510.889\t  28,857.130\r\n ||   |   + ntdll!EtwpProcessNotification                             \t 38.4\t  10,852\t  0.0\t  0\t   0\t ___1886_________________________\t  16,510.889\t  28,857.130\r\n ||   |    + ntdll!EtwpUpdateEnableInfoAndCallback                    \t 38.4\t  10,852\t  0.0\t  0\t   0\t ___1886_________________________\t  16,510.889\t  28,857.130\r\n ||   |     + ntdll!EtwpEventApiCallback                              \t 38.4\t  10,852\t  0.0\t  0\t   0\t ___1886_________________________\t  16,510.889\t  28,857.130\r\n ||   |      + clr!McGenControlCallbackV2                             \t 38.4\t  10,852\t  0.0\t  0\t   0\t ___1886_________________________\t  16,510.889\t  28,857.130\r\n ||   |       + clr!EtwCallback                                       \t 38.4\t  10,852\t  0.0\t  0\t   0\t ___1886_________________________\t  16,510.889\t  28,857.130\r\n ||   |        + clr!ETW::EnumerationLog::StartRundown                \t 38.4\t  10,852\t  0.0\t  0\t   0\t ___1886_________________________\t  16,510.889\t  28,857.130\r\n ||   |         + clr!ETW::EnumerationLog::EnumerationHelper          \t 38.3\t  10,846\t  0.0\t  0\t   0\t ___1886_________________________\t  16,510.889\t  28,856.122\r\n ||   |         |+ clr!ETW::EnumerationLog::IterateAppDomain          \t 29.6\t   8,367\t  0.0\t  0\t   0\t ___1674_________________________\t  16,510.889\t  28,458.092\r\n ||   |         ||+ clr!ETW::EnumerationLog::IterateDomain            \t 29.6\t   8,367\t  0.0\t  0\t   0\t ___1674_________________________\t  16,510.889\t  28,458.092\r\n ||   |         || + clr!ETW::MethodLog::SendEventsForJitMethods      \t 28.9\t   8,179\t  0.0\t  0\t   0\t ___1574_________________________\t  16,510.889\t  28,458.092\r\n ||   |         || |+ clr!ETW::MethodLog::SendEventsForJitMethodsHelper\t 28.8\t   8,155\t  0.0\t  9\t   0\t ___1574_________________________\t  16,510.889\t  28,458.092\r\n ||   |         || ||+ clr!ETW::MethodLog::SendMethodILToNativeMapEvent\t 16.3\t   4,599\t  0.0\t 14\t   0\t ___0342_________________________\t  16,510.889\t  28,458.092\r\n ||   |         || |||+ clr!Debugger::GetILToNativeMappingIntoArrays  \t 13.3\t   3,774\t  0.2\t 70\t   0\t ___0232_________________________\t  16,510.889\t  28,457.084\r\n ||   |         || ||||+ clr!Debugger::GetJitInfoWorker               \t 12.7\t   3,602\t  0.2\t 49\t   0\t ___0232_________________________\t  16,510.889\t  28,457.084\r\n ||   |         || |||||+ clr!Debugger::GetOrCreateMethodInfo         \t 12.4\t   3,497\t  0.0\t  2\t   0\t ___0231_________________________\t  16,510.889\t  28,457.084\r\n ||   |         || ||||||+ clr!DebuggerMethodInfoTable::GetMethodInfo \t 12.3\t   3,469\t  0.0\t  0\t   0\t ___0231_________________________\t  16,510.889\t  28,457.084\r\n ||   |         || |||||||+ clr!CHashTable::Find                      \t 11.7\t   3,306\t  1.2\t330\t   0\t ___0221_________________________\t  16,510.889\t  28,457.084\r\n ||   |         || ||||||||+ clr!DebuggerMethodInfoTable::Cmp         \t 10.5\t   2,972\t 10.4\t2,931\t   0\t ___0221_________________________\t  16,510.889\t  28,457.084\r\n ||   |         || |||||||||+ ntoskrnl!KiDpcInterrupt                 \t  0.1\t      18\t  0.0\t  3\t   0\t ___o.oo_________________________\t  16,577.900\t  27,556.997\r\n ||   |         || |||||||||+ ntoskrnl!KiVmbusInterruptDispatch       \t  0.0\t      12\t  0.0\t  0\t   0\t ___.o.._________________________\t  16,652.906\t  27,757.019\r\n ||   |         || |||||||||+ ntoskrnl!KiApcInterrupt                 \t  0.0\t       7\t  0.0\t  3\t   0\t ___...._________________________\t  16,655.906\t  26,007.840\r\n ||   |         || |||||||||+ ntoskrnl!KiInterruptDispatchNoLockNoEtw \t  0.0\t       3\t  0.0\t  0\t   0\t ___._.__________________________\t  16,689.910\t  23,940.632\r\n ||   |         || |||||||||+ ntoskrnl!KiSystemServiceUser            \t  0.0\t       1\t  0.0\t  0\t   0\t ____.___________________________\t  18,549.157\t  18,550.157\r\n ||   |         || ||||||||+ ntoskrnl!KiDpcInterrupt                  \t  0.0\t       3\t  0.0\t  1\t   0\t ____..__________________________\t  21,330.374\t  23,159.555\r\n ||   |         || ||||||||+ ntoskrnl!KiVmbusInterruptDispatch        \t  0.0\t       1\t  0.0\t  0\t   0\t ___.____________________________\t  16,764.924\t  16,765.924\r\n ||   |         || |||||||+ ntdll!LdrpValidateUserCallTargetBitMapCheck\t  0.3\t      94\t  0.3\t 94\t   0\t ___oooo_________________________\t  16,593.896\t  28,296.066\r\n ||   |         || |||||||+ ntdll!LdrpValidateUserCallTarget          \t  0.2\t      50\t  0.2\t 50\t   0\t ___oooo_________________________\t  16,687.906\t  28,413.079\r\n ||   |         || |||||||+ clr!DebuggerMethodInfoTable::Cmp          \t  0.1\t      19\t  0.1\t 19\t   0\t ___.oo._________________________\t  16,848.923\t  27,311.968\r\n ||   |         || ||||||+ clr!CrstBase::Leave                        \t  0.0\t      10\t  0.0\t  5\t   0\t ___.o_._________________________\t  16,553.893\t  28,221.060\r\n ||   |         || ||||||+ clr!Debugger::AcquireDebuggerDataLock      \t  0.0\t       9\t  0.0\t  0\t   0\t ____o.._________________________\t  17,570.994\t  27,054.940\r\n ||   |         || ||||||+ clr!Debugger::ReleaseDebuggerDataLock      \t  0.0\t       3\t  0.0\t  3\t   0\t _____.__________________________\t  22,172.455\t  25,074.743\r\n ||   |         || ||||||+ clr!CrstBase::Enter                        \t  0.0\t       2\t  0.0\t  2\t   0\t _____.__________________________\t  25,235.761\t  25,561.792\r\n ||   |         || ||||||+ ntdll!RtlLeaveCriticalSection              \t  0.0\t       1\t  0.0\t  1\t   0\t _____.__________________________\t  25,628.800\t  25,629.800\r\n ||   |         || ||||||+ clr!GetThread                              \t  0.0\t       1\t  0.0\t  1\t   0\t ______._________________________\t  27,034.938\t  27,035.938\r\n ||   |         || |||||+ clr!DebuggerMethodInfo::FindOrCreateInitAndAddJitInfo\t  0.1\t      40\t  0.0\t  0\t   0\t ___oooo_________________________\t  16,699.909\t  28,271.065\r\n ||   |         || |||||+ clr!Debugger::AcquireDebuggerDataLock       \t  0.0\t       7\t  0.0\t  0\t   0\t ____..._________________________\t  17,593.996\t  27,147.952\r\n ||   |         || |||||+ clr!CrstBase::Leave                         \t  0.0\t       4\t  0.0\t  0\t   0\t ____._._________________________\t  18,634.101\t  27,715.008\r\n ||   |         || |||||+ clr!DebuggerMethodInfo::FindJitInfo         \t  0.0\t       1\t  0.0\t  1\t   0\t ___.____________________________\t  16,532.891\t  16,533.891\r\n ||   |         || |||||+ clr!Debugger::ReleaseDebuggerDataLock       \t  0.0\t       1\t  0.0\t  1\t   0\t ____.___________________________\t  17,568.995\t  17,569.995\r\n ||   |         || |||||+ clr!DebuggerMethodInfoTable::GetMethodInfo  \t  0.0\t       1\t  0.0\t  1\t   0\t _____.__________________________\t  23,062.544\t  23,063.544\r\n ||   |         || |||||+ ntoskrnl!KiDpcInterrupt                     \t  0.0\t       1\t  0.0\t  0\t   0\t _____.__________________________\t  25,390.780\t  25,391.780\r\n ||   |         || |||||+ clr!__EH_epilog3                            \t  0.0\t       1\t  0.0\t  1\t   0\t ______._________________________\t  28,212.059\t  28,213.059\r\n ||   |         || ||||+ clr!ClrAllocInProcessHeap                    \t  0.3\t      71\t  0.0\t  4\t   0\t ___.ooo_________________________\t  16,762.914\t  28,265.064\r\n ||   |         || ||||+ clr!DebuggerJitInfo::LazyInitBounds          \t  0.1\t      20\t  0.1\t 20\t   0\t ____ooo_________________________\t  18,251.059\t  27,189.954\r\n ||   |         || ||||+ clr!MethodTable::GetModule                   \t  0.0\t       2\t  0.0\t  2\t   0\t ____.___________________________\t  20,687.308\t  21,367.373\r\n ||   |         || ||||+ ntdll!LdrpValidateUserCallTargetBitMapCheck  \t  0.0\t       1\t  0.0\t  1\t   0\t ___.____________________________\t  16,797.917\t  16,798.917\r\n ||   |         || ||||+ clr!MethodDesc::HasClassOrMethodInstantiation\t  0.0\t       1\t  0.0\t  1\t   0\t ___.____________________________\t  17,123.950\t  17,124.950\r\n ||   |         || ||||+ clr!MethodDesc::GetMemberDef_NoLogging       \t  0.0\t       1\t  0.0\t  1\t   0\t ____.___________________________\t  20,936.333\t  20,937.333\r\n ||   |         || ||||+ clr!MethodDesc::GetModule_NoLogging          \t  0.0\t       1\t  0.0\t  1\t   0\t _____.__________________________\t  22,780.516\t  22,781.516\r\n ||   |         || ||||+ clr!__EH_prolog3                             \t  0.0\t       1\t  0.0\t  1\t   0\t _____.__________________________\t  23,144.551\t  23,145.551\r\n ||   |         || ||||+ clr!__EH_prolog3_catch                       \t  0.0\t       1\t  0.0\t  1\t   0\t _____.__________________________\t  24,193.656\t  24,194.656\r\n ||   |         || ||||+ clr!MethodDesc::HasClassInstantiation        \t  0.0\t       1\t  0.0\t  1\t   0\t ______._________________________\t  27,033.938\t  27,034.938\r\n ||   |         || ||||+ ntdll!LdrpValidateUserCallTarget             \t  0.0\t       1\t  0.0\t  1\t   0\t ______._________________________\t  27,036.938\t  27,037.938\r\n ||   |         || ||||+ clr!Debugger::ReleaseDebuggerDataLock        \t  0.0\t       1\t  0.0\t  1\t   0\t ______._________________________\t  27,636.001\t  27,637.001\r\n ||   |         || |||+ clr!CoTemplate_xxchQR3QR3h                    \t  2.6\t     749\t  0.0\t 10\t   0\t ___o000_________________________\t  16,541.895\t  28,458.092\r\n ||   |         || |||+ clr!operator delete                           \t  0.1\t      37\t  0.0\t  3\t   0\t ___oooo_________________________\t  16,852.923\t  27,601.998\r\n ||   |         || |||+ clr!__EH_epilog3                              \t  0.0\t       4\t  0.0\t  4\t   0\t ___.._._________________________\t  16,656.901\t  28,058.043\r\n ||   |         || |||+ clr!Debugger::GetJitInfoWorker                \t  0.0\t       4\t  0.0\t  4\t   0\t ____..._________________________\t  18,212.056\t  27,912.027\r\n ||   |         || |||+ clr!ClrAllocInProcessHeap                     \t  0.0\t       3\t  0.0\t  3\t   0\t ____..__________________________\t  17,602.998\t  23,809.618\r\n ||   |         || |||+ clr!EtwCallout                                \t  0.0\t       3\t  0.0\t  3\t   0\t ____..._________________________\t  18,157.049\t  28,282.066\r\n ||   |         || |||+ clr!__EH_prolog3                              \t  0.0\t       3\t  0.0\t  3\t   0\t ____..__________________________\t  18,250.062\t  25,545.792\r\n ||   |         || |||+ clr!__EH_prolog3_catch                        \t  0.0\t       3\t  0.0\t  3\t   0\t _____.._________________________\t  25,066.742\t  28,409.079\r\n ||   |         || |||+ ntdll!LdrpValidateUserCallTargetBitMapCheck   \t  0.0\t       2\t  0.0\t  2\t   0\t ____..__________________________\t  19,188.156\t  23,923.630\r\n ||   |         || |||+ ntdll!LdrpValidateUserCallTarget              \t  0.0\t       1\t  0.0\t  1\t   0\t ____.___________________________\t  17,589.997\t  17,590.997\r\n ||   |         || |||+ clr!_security_check_cookie                    \t  0.0\t       1\t  0.0\t  1\t   0\t ____.___________________________\t  19,607.198\t  19,608.198\r\n ||   |         || |||+ clr!BaseWrapper,\u0026DeleteArray,2\u003e,0,\u0026CompareDefault,2\u003e::operator\u0026\t  0.0\t       1\t  0.0\t  1\t   0\t ____.___________________________\t  21,016.339\t  21,017.339\r\n ||   |         || ||+ clr!ETW::MethodLog::SendMethodEvent            \t 11.3\t   3,188\t  0.1\t 36\t   0\t ___0221_________________________\t  16,521.888\t  28,456.082\r\n ||   |         || ||+ clr!EEJitManager::CodeHeapIterator::Next       \t  0.9\t     268\t  0.4\t119\t   0\t ___o000_________________________\t  16,535.892\t  28,418.079\r\n ||   |         || ||+ clr!__EH_prolog3_GS                            \t  0.0\t      12\t  0.0\t 12\t   0\t ____oo._________________________\t  19,248.162\t  27,524.989\r\n ||   |         || ||+ clr!MethodTable::IsRestored                    \t  0.0\t      10\t  0.0\t 10\t   0\t ___...._________________________\t  16,991.936\t  27,512.987\r\n ||   |         || ||+ ntdll!LdrpValidateUserCallTargetBitMapCheck    \t  0.0\t       6\t  0.0\t  6\t   0\t ____..__________________________\t  17,387.976\t  25,646.801\r\n ||   |         || ||+ clr!MethodDesc::GetMethodTable                 \t  0.0\t       6\t  0.0\t  6\t   0\t ____..._________________________\t  18,701.107\t  28,398.078\r\n ||   |         || ||+ clr!MethodDesc::GetMethodTable_NoLogging       \t  0.0\t       6\t  0.0\t  6\t   0\t ____..._________________________\t  19,160.153\t  26,255.863\r\n ||   |         || ||+ clr!ReJitManager::FindReJitInfo                \t  0.0\t       5\t  0.0\t  1\t   0\t ___._.._________________________\t  16,942.932\t  26,911.926\r\n ||   |         || ||+ clr!ExecutionManager::GetScanFlags             \t  0.0\t       4\t  0.0\t  4\t   0\t ___...__________________________\t  16,975.933\t  25,564.794\r\n ||   |         || ||+ clr!MethodDesc::IsSharedByGenericMethodInstantiations\t  0.0\t       4\t  0.0\t  4\t   0\t ____..._________________________\t  18,132.050\t  28,216.060\r\n ||   |         || ||+ clr!__EH_prolog3                               \t  0.0\t       4\t  0.0\t  4\t   0\t ____..__________________________\t  18,260.060\t  23,438.582\r\n ||   |         || ||+ clr!BaseWrapper,\u0026DeleteArray,2\u003e,0,\u0026CompareDefault,2\u003e::operator\u0026\t  0.0\t       3\t  0.0\t  2\t   0\t ___.__._________________________\t  16,824.918\t  27,291.966\r\n ||   |         || ||+ clr!EECodeInfo::GetMethodRegionInfo            \t  0.0\t       3\t  0.0\t  3\t   0\t ___..___________________________\t  16,827.919\t  18,906.127\r\n ||   |         || ||+ clr!SString::ConvertToUnicode                  \t  0.0\t       3\t  0.0\t  3\t   0\t ____..._________________________\t  17,298.966\t  26,053.842\r\n ||   |         || ||+ clr!MethodDesc::GetDomain                      \t  0.0\t       3\t  0.0\t  3\t   0\t ____..__________________________\t  18,058.042\t  22,671.506\r\n ||   |         || ||+ clr!MethodDesc::GetMemberDef_NoLogging         \t  0.0\t       3\t  0.0\t  3\t   0\t ____..__________________________\t  18,143.050\t  22,228.460\r\n ||   |         || ||+ clr!operator delete                            \t  0.0\t       3\t  0.0\t  3\t   0\t ____..._________________________\t  18,340.068\t  27,271.963\r\n ||   |         || ||+ clr!MethodDesc::IsRestored                     \t  0.0\t       3\t  0.0\t  3\t   0\t _____.._________________________\t  25,067.742\t  28,146.053\r\n ||   |         || ||+ clr!GetThread                                  \t  0.0\t       2\t  0.0\t  2\t   0\t ____._._________________________\t  21,056.342\t  27,962.032\r\n ||   |         || ||+ clr!MethodDesc::IsTypicalMethodDefinition      \t  0.0\t       1\t  0.0\t  1\t   0\t ____.___________________________\t  17,195.957\t  17,196.957\r\n ||   |         || ||+ clr!MethodDesc::GetMethodInfo                  \t  0.0\t       1\t  0.0\t  1\t   0\t ____.___________________________\t  17,514.989\t  17,515.989\r\n ||   |         || ||+ clr!MethodDesc::HasClassOrMethodInstantiation_NoLogging\t  0.0\t       1\t  0.0\t  1\t   0\t ____.___________________________\t  18,229.056\t  18,230.056\r\n ||   |         || ||+ clr!__EH_epilog3_GS                            \t  0.0\t       1\t  0.0\t  1\t   0\t ____.___________________________\t  19,342.171\t  19,343.171\r\n ||   |         || ||+ clr!MethodDesc::HasClassInstantiation          \t  0.0\t       1\t  0.0\t  1\t   0\t ____.___________________________\t  21,040.341\t  21,041.341\r\n ||   |         || ||+ clr!Debugger::GetILToNativeMappingIntoArrays   \t  0.0\t       1\t  0.0\t  1\t   0\t _____.__________________________\t  21,574.394\t  21,575.394\r\n ||   |         || ||+ clr!MethodDesc::IsGenericMethodDefinition      \t  0.0\t       1\t  0.0\t  1\t   0\t _____.__________________________\t  21,814.418\t  21,815.418\r\n ||   |         || ||+ ntoskrnl!KiVmbusInterruptDispatch              \t  0.0\t       1\t  0.0\t  0\t   0\t _____.__________________________\t  25,002.745\t  25,003.745\r\n ||   |         || ||+ clr!MethodDesc::HasClassOrMethodInstantiation  \t  0.0\t       1\t  0.0\t  1\t   0\t ______._________________________\t  26,101.846\t  26,102.846\r\n ||   |         || ||+ clr!MethodTable::GetModule                     \t  0.0\t       1\t  0.0\t  1\t   0\t ______._________________________\t  27,026.937\t  27,027.937\r\n ||   |         || ||+ clr!MethodTable::IsSharedByGenericInstantiations\t  0.0\t       1\t  0.0\t  1\t   0\t ______._________________________\t  27,087.945\t  27,088.945\r\n ||   |         || |+ clr!MethodDesc::GetMethodEntryPoint             \t  0.0\t       8\t  0.0\t  3\t   0\t ___...._________________________\t  16,946.932\t  27,603.997\r\n ||   |         || |+ clr!ReJitManager::FindReJitInfo                 \t  0.0\t       4\t  0.0\t  4\t   0\t _____.._________________________\t  21,657.403\t  28,018.037\r\n ||   |         || |+ clr!__EH_prolog3                                \t  0.0\t       3\t  0.0\t  3\t   0\t ____..._________________________\t  17,524.990\t  28,440.082\r\n ||   |         || |+ clr!EEJitManager::CodeHeapIterator::Next        \t  0.0\t       3\t  0.0\t  3\t   0\t ____..__________________________\t  18,534.090\t  23,252.561\r\n ||   |         || |+ clr!__EH_prolog3_GS                             \t  0.0\t       1\t  0.0\t  1\t   0\t ___.____________________________\t  17,040.939\t  17,041.939\r\n ||   |         || |+ clr!??__EH_epilog3_GS                           \t  0.0\t       1\t  0.0\t  1\t   0\t ____.___________________________\t  18,501.086\t  18,502.086\r\n ||   |         || |+ clr!MethodDesc::GetMethodTable_NoLogging        \t  0.0\t       1\t  0.0\t  1\t   0\t ____.___________________________\t  19,581.195\t  19,582.195\r\n ||   |         || |+ clr!MethodDesc::GetModule                       \t  0.0\t       1\t  0.0\t  1\t   0\t _____.__________________________\t  25,637.800\t  25,638.800\r\n ||   |         || |+ clr!ETW::MethodLog::SendMethodEvent             \t  0.0\t       1\t  0.0\t  1\t   0\t ______._________________________\t  26,072.845\t  26,073.845\r\n ||   |         || |+ clr!ETW::MethodLog::SendMethodILToNativeMapEvent\t  0.0\t       1\t  0.0\t  1\t   0\t ______._________________________\t  26,958.930\t  26,959.930\r\n ||   |         || + clr!ETW::EnumerationLog::IterateAssembly         \t  0.7\t     185\t  0.0\t  0\t   0\t ____00o_________________________\t  18,074.042\t  26,894.926\r\n ||   |         || + clr!AppDomain::AssemblyIterator::Next            \t  0.0\t       2\t  0.0\t  0\t   0\t _____.._________________________\t  24,783.712\t  26,871.925\r\n ||   |         || + clr!ETW::EnumerationLog::IterateModule           \t  0.0\t       1\t  0.0\t  0\t   0\t ____.___________________________\t  20,614.299\t  20,615.299\r\n ||   |         |+ clr!ETW::EnumerationLog::IterateDomain             \t  8.8\t   2,479\t  0.0\t  0\t   0\t ____211_________________________\t  17,672.002\t  28,856.122\r\n ||   |         + clr!ETW::EnumerationLog::SendThreadRundownEvent     \t  0.0\t       5\t  0.0\t  0\t   0\t ____..._________________________\t  18,056.041\t  28,857.130\r\n ||   |         + clr!ThreadStore::GetThreadList                      \t  0.0\t       1\t  0.0\t  0\t   0\t ____.___________________________\t  20,585.296\t  20,586.296\r\n ||   + ntdll!TppTimerpExecuteCallback                                \t  0.1\t      36\t  0.0\t  0\t   0\t _______o_o____o_..___._o____o___\t  30,825.329\t 122,770.341\r\n ||   + ntdll!NtWaitForWorkViaWorkerFactory                           \t  0.0\t       7\t  0.0\t  0\t   0\t ______.._.______.__.__._________\t  29,399.185\t  95,755.340\r\n ||   + ntdll!TppTimerQueueExpiration                                 \t  0.0\t       3\t  0.0\t  1\t   0\t ______________._.______.________\t  63,750.336\t 102,745.350\r\n ||   + ntdll!TppIopExecuteCallback                                   \t  0.0\t       1\t  0.0\t  0\t   0\t ______________________________._\t 129,363.361\t 129,364.361\r\n |+ BROKEN                                                            \t  8.7\t   2,461\t  0.0\t  0\t   0\t 41ooooo_________________________\t     503.287\t  28,702.109\r\n |+ ntdll!LdrInitializeThunk                                          \t  1.8\t     510\t  0.0\t  0\t   0\t ___o000_________________________\t  16,556.893\t  28,853.122\r\n |+ ntdll!LdrpValidateUserCallTargetBitMapRet                         \t  0.0\t       3\t  0.0\t  3\t   0\t ____.___________________________\t  19,051.141\t  20,485.285\r\n |+ ntdll!LdrpValidateUserCallTargetBitMapCheck                       \t  0.0\t       2\t  0.0\t  2\t   0\t ____..__________________________\t  21,231.361\t  23,006.539\r\n + Thread (13212) CPU=2856ms                                          \t 10.0\t   2,837\t  0.0\t  0\t   0\t __41____________________________\t  10,031.248\t  13,781.614\r\n + Thread (13212) CPU=884ms                                           \t  3.1\t     881\t  0.0\t  0\t   0\t ___2____________________________\t  14,521.697\t  15,804.816\r\n + Thread (13212) CPU=599ms                                           \t  2.1\t     596\t  0.0\t  0\t   0\t ___1____________________________\t  13,781.616\t  14,521.697\r\n + Thread (13212) CPU=564ms                                           \t  2.0\t     556\t  0.0\t  0\t   0\t ___1____________________________\t  15,804.817\t  16,506.888\r\n\r\n```\r\n\r\n",
                                           "updatedAt":  "2024-04-18T00:22:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57Hxfv",
                                           "createdAt":  "2024-04-19T02:26:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "marafiq",
                                           "body":  "Thank you all. I see it is assigned and tagged at milestone 9. Will it fix the NET Framework issue as well. I am assuming the issue is known at this point. \n\nIs the only workaround is to disable the profiler? If there is any other workaround kindly let me know or something different I can do in the app that stands out in the trace. It\u0027s been source of continuous problems for us. Appreciate the help. ",
                                           "updatedAt":  "2024-04-19T02:26:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57N7FA",
                                           "createdAt":  "2024-04-19T20:32:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davmason",
                                           "body":  "Hi @marafiq\r\n\r\nApologies for the confusion - the milestone that we added is for our tracking only. It just means that we are tracking the issue.\r\n\r\nLooking at the CPU time for this trace is unlikely to help figure out the root cause since the application is not CPU bound. Would you be able to do a wall clock analysis as described here: https://learn.microsoft.com/en-us/shows/perfview-tutorial/tutorial-12-wall-clock-time-investigation-basics?",
                                           "updatedAt":  "2024-04-19T20:32:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57cBiM",
                                           "createdAt":  "2024-04-22T21:00:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "marafiq",
                                           "body":  "@davmason thanks. Let me try to do the analysis.\r\n\r\n**Analysis**\r\nUsing ASP.NET Thread Time With Tasks Stacks \r\nIn the below screen shot, one request took ~ 71 seconds to complete. It is bundle request. Surprisingly the file size is only 799 B.\r\nAll other requests seem to be doing okay in terms of response time. And there is no indication of ETW events/rundown in the stack trace of the thread which has the highest response time. The thread was blocked for ~ 71 seconds, pasting the trace below.\r\n\r\nThe next 3 most slow requests are waiting for query results thus not a concern for this trace. \r\n\r\n![image](https://github.com/dotnet/runtime/assets/9109259/c51b8eef-0448-43e0-b80f-6dcee5d38fa8)\r\n\r\n~~~\r\nName                                                                                                                 \tInc %\t Inc\tInc Ct\tExc %\tExc\tExc Ct\tFold\tFold Ct\t                             When\t      First\t       Last\r\n  + Request ID 4000a067-0000-d000-b63f-84710c7967bb URL: GET(\u0027/Scripts/barcodelistener\u0027, \u0027v=ycTUTOVVo9ETq-VcoQm6jL0elaRSY4Znm7gGv3Sjx2E1\u0027)\t100.0\t71,580.813\t    13\t  0.0\t  0\t     0\t   0\t      0\t ___99999999999999996____________\t 13,302.218\t 84,882.522\r\n   + Thread (936) CPU=1ms (Incoming Request Thread)                                                                  \t100.0\t71,580.305\t     9\t  0.0\t  0\t     0\t   0\t      0\t ___99999999999999996____________\t 13,302.218\t 84,882.522\r\n   |+ ntdll!_RtlUserThreadStart                                                                                      \t100.0\t71,580.305\t     9\t  0.0\t  0\t     0\t   0\t      0\t ___99999999999999996____________\t 13,302.218\t 84,882.522\r\n   | + ntdll!__RtlUserThreadStart                                                                                    \t100.0\t71,580.305\t     9\t  0.0\t  0\t     0\t   0\t      0\t ___99999999999999996____________\t 13,302.218\t 84,882.522\r\n   |  + kernel32!BaseThreadInitThunk                                                                                 \t100.0\t71,580.305\t     9\t  0.0\t  0\t     0\t   0\t      0\t ___99999999999999996____________\t 13,302.218\t 84,882.522\r\n   |   + w3tp!THREAD_MANAGER::ThreadManagerThread                                                                    \t100.0\t71,580.305\t     9\t  0.0\t  0\t     0\t   0\t      0\t ___99999999999999996____________\t 13,302.218\t 84,882.522\r\n   |    + w3tp!THREAD_POOL_DATA::ThreadPoolThread                                                                    \t100.0\t71,580.305\t     9\t  0.0\t  0\t     0\t   0\t      0\t ___99999999999999996____________\t 13,302.218\t 84,882.522\r\n   |     + w3tp!THREAD_POOL_DATA::ThreadPoolThread                                                                   \t100.0\t71,580.305\t     9\t  0.0\t  0\t     0\t   0\t      0\t ___99999999999999996____________\t 13,302.218\t 84,882.522\r\n   |      + picohelper!?                                                                                             \t100.0\t71,579.742\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___99999999999999996____________\t 13,302.218\t 84,881.958\r\n   |      |+ kernelbase!GetQueuedCompletionStatus                                                                    \t100.0\t71,579.742\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___99999999999999996____________\t 13,302.218\t 84,881.958\r\n   |      | + ntdll!NtRemoveIoCompletion                                                                             \t100.0\t71,579.742\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___99999999999999996____________\t 13,302.218\t 84,881.958\r\n   |      |  + ntdll!LdrInitializeThunk                                                                              \t100.0\t71,579.742\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___99999999999999996____________\t 13,302.218\t 84,881.958\r\n   |      |   + ntdll!LdrpInitializeInternal                                                                         \t100.0\t71,579.742\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___99999999999999996____________\t 13,302.218\t 84,881.958\r\n   |      |    + ntdll!_LdrpInitialize                                                                               \t100.0\t71,579.742\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___99999999999999996____________\t 13,302.218\t 84,881.958\r\n   |      |     + wow64!Wow64LdrpInitialize                                                                          \t100.0\t71,579.742\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___99999999999999996____________\t 13,302.218\t 84,881.958\r\n   |      |      + wow64!RunCpuSimulation                                                                            \t100.0\t71,579.742\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___99999999999999996____________\t 13,302.218\t 84,881.958\r\n   |      |       + wow64cpu!BTCpuSimulate                                                                           \t100.0\t71,579.742\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___99999999999999996____________\t 13,302.218\t 84,881.958\r\n   |      |        + wow64cpu!RemoveIoCompletionFault                                                                \t100.0\t71,579.742\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___99999999999999996____________\t 13,302.218\t 84,881.958\r\n   |      |         + wow64cpu!CpupSyscallStub                                                                       \t100.0\t71,579.742\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___99999999999999996____________\t 13,302.218\t 84,881.958\r\n   |      |          + ntoskrnl!KiSystemServiceCopyEnd                                                               \t100.0\t71,579.742\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___99999999999999996____________\t 13,302.218\t 84,881.958\r\n   |      |           + ntoskrnl!NtRemoveIoCompletion                                                                \t100.0\t71,579.742\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___99999999999999996____________\t 13,302.218\t 84,881.958\r\n   |      |            + ntoskrnl!IoRemoveIoCompletion                                                               \t100.0\t71,579.742\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___99999999999999996____________\t 13,302.218\t 84,881.958\r\n   |      |             + ntoskrnl!KeRemoveQueueEx                                                                   \t100.0\t71,579.742\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___99999999999999996____________\t 13,302.218\t 84,881.958\r\n   |      |              + ntoskrnl!KiCommitThreadWait                                                               \t100.0\t71,579.742\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___99999999999999996____________\t 13,302.218\t 84,881.958\r\n   |      |               + ntoskrnl!KiSwapThread                                                                    \t100.0\t71,579.742\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___99999999999999996____________\t 13,302.218\t 84,881.958\r\n   |      |                + ntoskrnl!KiSwapContext                                                                  \t100.0\t71,579.742\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___99999999999999996____________\t 13,302.218\t 84,881.958\r\n   |      |                 + ntoskrnl!SwapContext                                                                   \t100.0\t71,579.742\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___99999999999999996____________\t 13,302.218\t 84,881.958\r\n   |      |                  + BLOCKED_TIME                                                                          \t100.0\t71,579.227\t     1\t100.0\t71,579.227\t     1\t   0\t      0\t ___99999999999999996____________\t 13,302.218\t 84,881.444\r\n   |      |                  + CPU_TIME                                                                              \t  0.0\t0.517\t     1\t  0.0\t0.517\t     1\t   0\t      0\t ___________________.____________\t 84,881.440\t 84,881.958\r\n   |      + w3dt!WP_CONTEXT::OnCompletion                                                                            \t  0.0\t0.565\t     7\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,881.958\t 84,882.522\r\n   |       + w3dt!UL_RECEIVE_CONTEXT::DoWork                                                                         \t  0.0\t0.565\t     7\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,881.958\t 84,882.522\r\n   |        + w3dt!UL_NATIVE_REQUEST::DoWork                                                                         \t  0.0\t0.565\t     7\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,881.958\t 84,882.522\r\n   |         + iiscore!?                                                                                             \t  0.0\t0.565\t     7\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,881.958\t 84,882.522\r\n   |          + iisutil!LookupTokenAccountName                                                                       \t  0.0\t0.385\t     6\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,881.958\t 84,882.342\r\n   |          |+ advapi32!LookupAccountSidW                                                                          \t  0.0\t0.385\t     6\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,881.958\t 84,882.342\r\n   |          | + sechost!LookupAccountSidLocalW                                                                     \t  0.0\t0.385\t     6\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,881.958\t 84,882.342\r\n   |          |  + sechost!LookupAccountSidInternal                                                                  \t  0.0\t0.385\t     6\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,881.958\t 84,882.342\r\n   |          |   + sechost!LsaLookupClose                                                                           \t  0.0\t0.156\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.186\t 84,882.342\r\n   |          |   |+ rpcrt4!_NdrClientCall4                                                                          \t  0.0\t0.156\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.186\t 84,882.342\r\n   |          |   | + rpcrt4!_NdrClientCall2                                                                         \t  0.0\t0.156\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.186\t 84,882.342\r\n   |          |   |  + rpcrt4!LRPC_CCALL::SendReceive                                                                \t  0.0\t0.156\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.186\t 84,882.342\r\n   |          |   |   + rpcrt4!LRPC_BASE_CCALL::DoSendReceive                                                        \t  0.0\t0.156\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.186\t 84,882.342\r\n   |          |   |    + ntdll!NtAlpcSendWaitReceivePort                                                             \t  0.0\t0.156\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.186\t 84,882.342\r\n   |          |   |     + ntdll!LdrInitializeThunk                                                                   \t  0.0\t0.156\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.186\t 84,882.342\r\n   |          |   |      + ntdll!LdrpInitializeInternal                                                              \t  0.0\t0.156\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.186\t 84,882.342\r\n   |          |   |       + ntdll!_LdrpInitialize                                                                    \t  0.0\t0.156\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.186\t 84,882.342\r\n   |          |   |        + wow64!Wow64LdrpInitialize                                                               \t  0.0\t0.156\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.186\t 84,882.342\r\n   |          |   |         + wow64!RunCpuSimulation                                                                 \t  0.0\t0.156\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.186\t 84,882.342\r\n   |          |   |          + wow64cpu!BTCpuSimulate                                                                \t  0.0\t0.156\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.186\t 84,882.342\r\n   |          |   |           + wow64cpu!ServiceNoTurbo                                                              \t  0.0\t0.156\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.186\t 84,882.342\r\n   |          |   |            + wow64!Wow64SystemServiceEx                                                          \t  0.0\t0.156\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.186\t 84,882.342\r\n   |          |   |             + wow64!whNtAlpcSendWaitReceivePort                                                  \t  0.0\t0.156\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.186\t 84,882.342\r\n   |          |   |              + ntdll!NtAlpcSendWaitReceivePort                                                   \t  0.0\t0.156\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.186\t 84,882.342\r\n   |          |   |               + ntoskrnl!KiSystemServiceUser                                                     \t  0.0\t0.156\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.186\t 84,882.342\r\n   |          |   |                + ntoskrnl!PsSyscallProviderDispatch                                              \t  0.0\t0.156\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.186\t 84,882.342\r\n   |          |   |                 + ntoskrnl!PspSyscallProviderServiceDispatchGeneric                              \t  0.0\t0.156\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.186\t 84,882.342\r\n   |          |   |                  + handlerc!?                                                                    \t  0.0\t0.156\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.186\t 84,882.342\r\n   |          |   |                   + ntoskrnl!NtAlpcSendWaitReceivePort                                           \t  0.0\t0.156\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.186\t 84,882.342\r\n   |          |   |                    + ntoskrnl!AlpcpProcessSynchronousRequest                                     \t  0.0\t0.156\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.186\t 84,882.342\r\n   |          |   |                     + ntoskrnl!AlpcpReceiveSynchronousReply                                      \t  0.0\t0.156\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.186\t 84,882.342\r\n   |          |   |                      + ntoskrnl!AlpcpSignalAndWait                                               \t  0.0\t0.156\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.186\t 84,882.342\r\n   |          |   |                       + ntoskrnl!KeWaitForSingleObject                                           \t  0.0\t0.156\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.186\t 84,882.342\r\n   |          |   |                        + ntoskrnl!KiCommitThreadWait                                             \t  0.0\t0.156\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.186\t 84,882.342\r\n   |          |   |                         + ntoskrnl!KiSwapThread                                                  \t  0.0\t0.156\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.186\t 84,882.342\r\n   |          |   |                          + ntoskrnl!KiSwapContext                                                \t  0.0\t0.156\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.186\t 84,882.342\r\n   |          |   |                           + ntoskrnl!SwapContext                                                 \t  0.0\t0.156\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.186\t 84,882.342\r\n   |          |   |                            + CPU_TIME                                                            \t  0.0\t0.121\t     1\t  0.0\t0.121\t     1\t   0\t      0\t ___________________.____________\t 84,882.221\t 84,882.342\r\n   |          |   |                            + BLOCKED_TIME                                                        \t  0.0\t0.035\t     1\t  0.0\t0.035\t     1\t   0\t      0\t ___________________.____________\t 84,882.186\t 84,882.221\r\n   |          |   + sechost!LsaLookupOpenLocalPolicy                                                                 \t  0.0\t0.121\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,881.958\t 84,882.079\r\n   |          |   |+ rpcrt4!_NdrClientCall4                                                                          \t  0.0\t0.121\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,881.958\t 84,882.079\r\n   |          |   | + rpcrt4!_NdrClientCall2                                                                         \t  0.0\t0.121\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,881.958\t 84,882.079\r\n   |          |   |  + rpcrt4!LRPC_CCALL::SendReceive                                                                \t  0.0\t0.121\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,881.958\t 84,882.079\r\n   |          |   |   + rpcrt4!LRPC_BASE_CCALL::DoSendReceive                                                        \t  0.0\t0.121\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,881.958\t 84,882.079\r\n   |          |   |    + ntdll!NtAlpcSendWaitReceivePort                                                             \t  0.0\t0.121\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,881.958\t 84,882.079\r\n   |          |   |     + ntdll!LdrInitializeThunk                                                                   \t  0.0\t0.121\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,881.958\t 84,882.079\r\n   |          |   |      + ntdll!LdrpInitializeInternal                                                              \t  0.0\t0.121\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,881.958\t 84,882.079\r\n   |          |   |       + ntdll!_LdrpInitialize                                                                    \t  0.0\t0.121\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,881.958\t 84,882.079\r\n   |          |   |        + wow64!Wow64LdrpInitialize                                                               \t  0.0\t0.121\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,881.958\t 84,882.079\r\n   |          |   |         + wow64!RunCpuSimulation                                                                 \t  0.0\t0.121\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,881.958\t 84,882.079\r\n   |          |   |          + wow64cpu!BTCpuSimulate                                                                \t  0.0\t0.121\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,881.958\t 84,882.079\r\n   |          |   |           + wow64cpu!ServiceNoTurbo                                                              \t  0.0\t0.121\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,881.958\t 84,882.079\r\n   |          |   |            + wow64!Wow64SystemServiceEx                                                          \t  0.0\t0.121\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,881.958\t 84,882.079\r\n   |          |   |             + wow64!whNtAlpcSendWaitReceivePort                                                  \t  0.0\t0.121\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,881.958\t 84,882.079\r\n   |          |   |              + ntdll!NtAlpcSendWaitReceivePort                                                   \t  0.0\t0.121\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,881.958\t 84,882.079\r\n   |          |   |               + ntoskrnl!KiSystemServiceUser                                                     \t  0.0\t0.121\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,881.958\t 84,882.079\r\n   |          |   |                + ntoskrnl!PsSyscallProviderDispatch                                              \t  0.0\t0.121\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,881.958\t 84,882.079\r\n   |          |   |                 + ntoskrnl!PspSyscallProviderServiceDispatchGeneric                              \t  0.0\t0.121\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,881.958\t 84,882.079\r\n   |          |   |                  + handlerc!?                                                                    \t  0.0\t0.121\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,881.958\t 84,882.079\r\n   |          |   |                   + ntoskrnl!NtAlpcSendWaitReceivePort                                           \t  0.0\t0.121\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,881.958\t 84,882.079\r\n   |          |   |                    + ntoskrnl!AlpcpProcessSynchronousRequest                                     \t  0.0\t0.121\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,881.958\t 84,882.079\r\n   |          |   |                     + ntoskrnl!AlpcpReceiveSynchronousReply                                      \t  0.0\t0.121\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,881.958\t 84,882.079\r\n   |          |   |                      + ntoskrnl!AlpcpSignalAndWait                                               \t  0.0\t0.121\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,881.958\t 84,882.079\r\n   |          |   |                       + ntoskrnl!KeWaitForSingleObject                                           \t  0.0\t0.121\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,881.958\t 84,882.079\r\n   |          |   |                        + ntoskrnl!KiCommitThreadWait                                             \t  0.0\t0.121\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,881.958\t 84,882.079\r\n   |          |   |                         + ntoskrnl!KiSwapThread                                                  \t  0.0\t0.121\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,881.958\t 84,882.079\r\n   |          |   |                          + ntoskrnl!KiSwapContext                                                \t  0.0\t0.121\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,881.958\t 84,882.079\r\n   |          |   |                           + ntoskrnl!SwapContext                                                 \t  0.0\t0.121\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,881.958\t 84,882.079\r\n   |          |   |                            + BLOCKED_TIME                                                        \t  0.0\t0.071\t     1\t  0.0\t0.071\t     1\t   0\t      0\t ___________________.____________\t 84,881.958\t 84,882.028\r\n   |          |   |                            + CPU_TIME                                                            \t  0.0\t0.051\t     1\t  0.0\t0.051\t     1\t   0\t      0\t ___________________.____________\t 84,882.028\t 84,882.079\r\n   |          |   + sechost!LsaInternalClientLookupSids                                                              \t  0.0\t0.107\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.079\t 84,882.186\r\n   |          |    + rpcrt4!_NdrClientCall4                                                                          \t  0.0\t0.107\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.079\t 84,882.186\r\n   |          |     + rpcrt4!_NdrClientCall2                                                                         \t  0.0\t0.107\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.079\t 84,882.186\r\n   |          |      + rpcrt4!LRPC_CCALL::SendReceive                                                                \t  0.0\t0.107\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.079\t 84,882.186\r\n   |          |       + rpcrt4!LRPC_BASE_CCALL::DoSendReceive                                                        \t  0.0\t0.107\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.079\t 84,882.186\r\n   |          |        + ntdll!NtAlpcSendWaitReceivePort                                                             \t  0.0\t0.107\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.079\t 84,882.186\r\n   |          |         + ntdll!LdrInitializeThunk                                                                   \t  0.0\t0.107\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.079\t 84,882.186\r\n   |          |          + ntdll!LdrpInitializeInternal                                                              \t  0.0\t0.107\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.079\t 84,882.186\r\n   |          |           + ntdll!_LdrpInitialize                                                                    \t  0.0\t0.107\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.079\t 84,882.186\r\n   |          |            + wow64!Wow64LdrpInitialize                                                               \t  0.0\t0.107\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.079\t 84,882.186\r\n   |          |             + wow64!RunCpuSimulation                                                                 \t  0.0\t0.107\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.079\t 84,882.186\r\n   |          |              + wow64cpu!BTCpuSimulate                                                                \t  0.0\t0.107\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.079\t 84,882.186\r\n   |          |               + wow64cpu!ServiceNoTurbo                                                              \t  0.0\t0.107\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.079\t 84,882.186\r\n   |          |                + wow64!Wow64SystemServiceEx                                                          \t  0.0\t0.107\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.079\t 84,882.186\r\n   |          |                 + wow64!whNtAlpcSendWaitReceivePort                                                  \t  0.0\t0.107\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.079\t 84,882.186\r\n   |          |                  + ntdll!NtAlpcSendWaitReceivePort                                                   \t  0.0\t0.107\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.079\t 84,882.186\r\n   |          |                   + ntoskrnl!KiSystemServiceUser                                                     \t  0.0\t0.107\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.079\t 84,882.186\r\n   |          |                    + ntoskrnl!PsSyscallProviderDispatch                                              \t  0.0\t0.107\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.079\t 84,882.186\r\n   |          |                     + ntoskrnl!PspSyscallProviderServiceDispatchGeneric                              \t  0.0\t0.107\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.079\t 84,882.186\r\n   |          |                      + handlerc!?                                                                    \t  0.0\t0.107\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.079\t 84,882.186\r\n   |          |                       + ntoskrnl!NtAlpcSendWaitReceivePort                                           \t  0.0\t0.107\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.079\t 84,882.186\r\n   |          |                        + ntoskrnl!AlpcpProcessSynchronousRequest                                     \t  0.0\t0.107\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.079\t 84,882.186\r\n   |          |                         + ntoskrnl!AlpcpReceiveSynchronousReply                                      \t  0.0\t0.107\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.079\t 84,882.186\r\n   |          |                          + ntoskrnl!AlpcpSignalAndWait                                               \t  0.0\t0.107\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.079\t 84,882.186\r\n   |          |                           + ntoskrnl!KeWaitForSingleObject                                           \t  0.0\t0.107\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.079\t 84,882.186\r\n   |          |                            + ntoskrnl!KiCommitThreadWait                                             \t  0.0\t0.107\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.079\t 84,882.186\r\n   |          |                             + ntoskrnl!KiSwapThread                                                  \t  0.0\t0.107\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.079\t 84,882.186\r\n   |          |                              + ntoskrnl!KiSwapContext                                                \t  0.0\t0.107\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.079\t 84,882.186\r\n   |          |                               + ntoskrnl!SwapContext                                                 \t  0.0\t0.107\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.079\t 84,882.186\r\n   |          |                                + BLOCKED_TIME                                                        \t  0.0\t0.057\t     1\t  0.0\t0.057\t     1\t   0\t      0\t ___________________.____________\t 84,882.079\t 84,882.136\r\n   |          |                                + CPU_TIME                                                            \t  0.0\t0.050\t     1\t  0.0\t0.050\t     1\t   0\t      0\t ___________________.____________\t 84,882.136\t 84,882.186\r\n   |          + picohelper!?                                                                                         \t  0.0\t0.180\t     1\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.342\t 84,882.522\r\n   |           + kernelbase!CreateFileW                                                                              \t  0.0\t0.180\t     1\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.342\t 84,882.522\r\n   |            + kernelbase!CreateFileInternal                                                                      \t  0.0\t0.180\t     1\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.342\t 84,882.522\r\n   |             + picohelper!?                                                                                      \t  0.0\t0.180\t     1\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.342\t 84,882.522\r\n   |              + ntdll!NtCreateFile                                                                               \t  0.0\t0.180\t     1\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.342\t 84,882.522\r\n   |               + ntdll!LdrInitializeThunk                                                                        \t  0.0\t0.180\t     1\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.342\t 84,882.522\r\n   |                + ntdll!LdrpInitializeInternal                                                                   \t  0.0\t0.180\t     1\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.342\t 84,882.522\r\n   |                 + ntdll!_LdrpInitialize                                                                         \t  0.0\t0.180\t     1\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.342\t 84,882.522\r\n   |                  + wow64!Wow64LdrpInitialize                                                                    \t  0.0\t0.180\t     1\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.342\t 84,882.522\r\n   |                   + wow64!RunCpuSimulation                                                                      \t  0.0\t0.180\t     1\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.342\t 84,882.522\r\n   |                    + wow64cpu!BTCpuSimulate                                                                     \t  0.0\t0.180\t     1\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.342\t 84,882.522\r\n   |                     + wow64cpu!ServiceNoTurbo                                                                   \t  0.0\t0.180\t     1\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.342\t 84,882.522\r\n   |                      + wow64!Wow64SystemServiceEx                                                               \t  0.0\t0.180\t     1\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.342\t 84,882.522\r\n   |                       + wow64!whNtCreateFile                                                                    \t  0.0\t0.180\t     1\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.342\t 84,882.522\r\n   |                        + ntdll!NtCreateFile                                                                     \t  0.0\t0.180\t     1\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.342\t 84,882.522\r\n   |                         + ntoskrnl!KiSystemServiceUser                                                          \t  0.0\t0.180\t     1\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.342\t 84,882.522\r\n   |                          + ntoskrnl!PsSyscallProviderDispatch                                                   \t  0.0\t0.180\t     1\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.342\t 84,882.522\r\n   |                           + ntoskrnl!PspSyscallProviderServiceDispatchGeneric                                   \t  0.0\t0.180\t     1\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.342\t 84,882.522\r\n   |                            + handlerc!?                                                                         \t  0.0\t0.180\t     1\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.342\t 84,882.522\r\n   |                             + ntoskrnl!KiServiceLinkage                                                         \t  0.0\t0.180\t     1\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.342\t 84,882.522\r\n   |                              + ntoskrnl!KiSystemServiceCopyEnd                                                  \t  0.0\t0.180\t     1\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.342\t 84,882.522\r\n   |                               + ntoskrnl!NtCreateFile                                                           \t  0.0\t0.180\t     1\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.342\t 84,882.522\r\n   |                                + ntoskrnl!IopCreateFile                                                         \t  0.0\t0.180\t     1\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.342\t 84,882.522\r\n   |                                 + ntoskrnl!ObOpenObjectByNameEx                                                 \t  0.0\t0.180\t     1\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.342\t 84,882.522\r\n   |                                  + ntoskrnl!ObpLookupObjectName                                                 \t  0.0\t0.180\t     1\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.342\t 84,882.522\r\n   |                                   + ntoskrnl!IopParseDevice                                                     \t  0.0\t0.180\t     1\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.342\t 84,882.522\r\n   |                                    + ntoskrnl!IofCallDriver                                                     \t  0.0\t0.180\t     1\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.342\t 84,882.522\r\n   |                                     + fltmgr!FltpCreate                                                         \t  0.0\t0.180\t     1\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.342\t 84,882.522\r\n   |                                      + fltmgr!FltpPassThroughInternal                                           \t  0.0\t0.180\t     1\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.342\t 84,882.522\r\n   |                                       + fltmgr!FltpPerformPreCallbacksWorker                                    \t  0.0\t0.180\t     1\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.342\t 84,882.522\r\n   |                                        + ntoskrnl!ExAcquireRundownProtectionCacheAwareEx                        \t  0.0\t0.180\t     1\t  0.0\t  0\t     0\t   0\t      0\t ___________________.____________\t 84,882.342\t 84,882.522\r\n   |                                         + CPU_TIME                                                              \t  0.0\t0.180\t     1\t  0.0\t0.180\t     1\t   0\t      0\t ___________________.____________\t 84,882.342\t 84,882.522\r\n   + Thread (22224) CPU=61ms (.NET ThreadPool Worker)                                                                \t  0.0\t0.508\t     4\t  0.0\t  0\t     0\t   0\t      0\t ___.____________________________\t 13,401.310\t 13,401.818\r\n    + ntdll!_RtlUserThreadStart                                                                                      \t  0.0\t0.508\t     4\t  0.0\t  0\t     0\t   0\t      0\t ___.____________________________\t 13,401.310\t 13,401.818\r\n     + ntdll!__RtlUserThreadStart                                                                                    \t  0.0\t0.508\t     4\t  0.0\t  0\t     0\t   0\t      0\t ___.____________________________\t 13,401.310\t 13,401.818\r\n      + kernel32!BaseThreadInitThunk                                                                                 \t  0.0\t0.508\t     4\t  0.0\t  0\t     0\t   0\t      0\t ___.____________________________\t 13,401.310\t 13,401.818\r\n       + clr!Thread::intermediateThreadProc                                                                          \t  0.0\t0.508\t     4\t  0.0\t  0\t     0\t   0\t      0\t ___.____________________________\t 13,401.310\t 13,401.818\r\n        + clr!ThreadpoolMgr::ExecuteWorkRequest                                                                      \t  0.0\t0.508\t     4\t  0.0\t  0\t     0\t   0\t      0\t ___.____________________________\t 13,401.310\t 13,401.818\r\n         + clr!UnManagedPerAppDomainTPCount::DispatchWorkItem                                                        \t  0.0\t0.508\t     4\t  0.0\t  0\t     0\t   0\t      0\t ___.____________________________\t 13,401.310\t 13,401.818\r\n          + picohelper!?                                                                                             \t  0.0\t0.508\t     4\t  0.0\t  0\t     0\t   0\t      0\t ___.____________________________\t 13,401.310\t 13,401.818\r\n           + webengine4!ProcessNotificationCallback                                                                  \t  0.0\t0.508\t     4\t  0.0\t  0\t     0\t   0\t      0\t ___.____________________________\t 13,401.310\t 13,401.818\r\n            + webengine4!W3_MGD_HANDLER::ProcessNotification                                                         \t  0.0\t0.508\t     4\t  0.0\t  0\t     0\t   0\t      0\t ___.____________________________\t 13,401.310\t 13,401.818\r\n             + ?!?                                                                                                   \t  0.0\t0.508\t     4\t  0.0\t  0\t     0\t   0\t      0\t ___.____________________________\t 13,401.310\t 13,401.818\r\n              + clr!UM2MDoADCallBack                                                                                 \t  0.0\t0.508\t     4\t  0.0\t  0\t     0\t   0\t      0\t ___.____________________________\t 13,401.310\t 13,401.818\r\n               + clr!Thread::DoADCallBack                                                                            \t  0.0\t0.508\t     4\t  0.0\t  0\t     0\t   0\t      0\t ___.____________________________\t 13,401.310\t 13,401.818\r\n                + clr!UM2MThunk_Wrapper                                                                              \t  0.0\t0.508\t     4\t  0.0\t  0\t     0\t   0\t      0\t ___.____________________________\t 13,401.310\t 13,401.818\r\n                 + ?!?                                                                                               \t  0.0\t0.508\t     4\t  0.0\t  0\t     0\t   0\t      0\t ___.____________________________\t 13,401.310\t 13,401.818\r\n                  + system.web!PipelineRuntime.ProcessRequestNotification                                            \t  0.0\t0.508\t     4\t  0.0\t  0\t     0\t   0\t      0\t ___.____________________________\t 13,401.310\t 13,401.818\r\n                   + system.web!PipelineRuntime.ProcessRequestNotificationHelper                                     \t  0.0\t0.508\t     4\t  0.0\t  0\t     0\t   0\t      0\t ___.____________________________\t 13,401.310\t 13,401.818\r\n                    + system.web!PipelineRuntime.InitializeRequestContext                                            \t  0.0\t0.508\t     4\t  0.0\t  0\t     0\t   0\t      0\t ___.____________________________\t 13,401.310\t 13,401.818\r\n                     + system.web!IIS7WorkerRequest.CreateWorkerRequest                                              \t  0.0\t0.508\t     4\t  0.0\t  0\t     0\t   0\t      0\t ___.____________________________\t 13,401.310\t 13,401.818\r\n                      + system.web!IIS7WorkerRequest.ReadRequestBasics                                               \t  0.0\t0.280\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___.____________________________\t 13,401.538\t 13,401.818\r\n                      |+ system.web!dynamicClass.IL_STUB_PInvoke(int,int32\u0026,int32\u0026,int\u0026,int32\u0026,int\u0026,int32\u0026,int\u0026,int\u0026)\t  0.0\t0.280\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___.____________________________\t 13,401.538\t 13,401.818\r\n                      | + webengine4!MgdGetRequestBasics                                                             \t  0.0\t0.280\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___.____________________________\t 13,401.538\t 13,401.818\r\n                      |  + iiscore!?                                                                                 \t  0.0\t0.280\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___.____________________________\t 13,401.538\t 13,401.818\r\n                      |   + nativerd!CONFIG_MAPPING_EXTENSION::MapPath                                               \t  0.0\t0.280\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___.____________________________\t 13,401.538\t 13,401.818\r\n                      |    + nativerd!CONFIG_SYSTEM::MapPath                                                         \t  0.0\t0.280\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___.____________________________\t 13,401.538\t 13,401.818\r\n                      |     + nativerd!CONFIG_CACHE::MapPath                                                         \t  0.0\t0.280\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___.____________________________\t 13,401.538\t 13,401.818\r\n                      |      + nativerd!CONFIG_PATH_MAPPER::MapPath                                                  \t  0.0\t0.280\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___.____________________________\t 13,401.538\t 13,401.818\r\n                      |       + nativerd!CONFIG_PATH_MAPPER::MapPathFromParent                                       \t  0.0\t0.280\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___.____________________________\t 13,401.538\t 13,401.818\r\n                      |        + nativerd!CONFIG_VDIR::GetDirectory                                                  \t  0.0\t0.280\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___.____________________________\t 13,401.538\t 13,401.818\r\n                      |         + nativerd!CONFIG_ELEMENT::GetStringProperty                                         \t  0.0\t0.280\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___.____________________________\t 13,401.538\t 13,401.818\r\n                      |          + nativerd!CONFIG_ELEMENT::GetInternalPropertyByName                                \t  0.0\t0.280\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___.____________________________\t 13,401.538\t 13,401.818\r\n                      |           + ntoskrnl!KiVmbusInterruptDispatch                                                \t  0.0\t0.280\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___.____________________________\t 13,401.538\t 13,401.818\r\n                      |            + ntoskrnl!KiDpcInterruptBypass                                                   \t  0.0\t0.280\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___.____________________________\t 13,401.538\t 13,401.818\r\n                      |             + ntoskrnl!KxDispatchInterrupt                                                   \t  0.0\t0.280\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___.____________________________\t 13,401.538\t 13,401.818\r\n                      |              + ntoskrnl!SwapContext                                                          \t  0.0\t0.280\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___.____________________________\t 13,401.538\t 13,401.818\r\n                      |               + BLOCKED_TIME                                                                 \t  0.0\t0.162\t     1\t  0.0\t0.162\t     1\t   0\t      0\t ___.____________________________\t 13,401.538\t 13,401.700\r\n                      |               + CPU_TIME                                                                     \t  0.0\t0.118\t     1\t  0.0\t0.118\t     1\t   0\t      0\t ___.____________________________\t 13,401.700\t 13,401.818\r\n                      + system.web!System.Web.Hosting.IIS7WorkerRequest..ctor(int,bool)                              \t  0.0\t0.228\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___.____________________________\t 13,401.310\t 13,401.538\r\n                       + clr!ThreadNative::FastGetDomain                                                             \t  0.0\t0.228\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___.____________________________\t 13,401.310\t 13,401.538\r\n                        + ntoskrnl!KiVmbusInterruptDispatch                                                          \t  0.0\t0.228\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___.____________________________\t 13,401.310\t 13,401.538\r\n                         + ntoskrnl!KiDpcInterruptBypass                                                             \t  0.0\t0.228\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___.____________________________\t 13,401.310\t 13,401.538\r\n                          + ntoskrnl!KxDispatchInterrupt                                                             \t  0.0\t0.228\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___.____________________________\t 13,401.310\t 13,401.538\r\n                           + ntoskrnl!SwapContext                                                                    \t  0.0\t0.228\t     2\t  0.0\t  0\t     0\t   0\t      0\t ___.____________________________\t 13,401.310\t 13,401.538\r\n                            + BLOCKED_TIME                                                                           \t  0.0\t0.143\t     1\t  0.0\t0.143\t     1\t   0\t      0\t ___.____________________________\t 13,401.310\t 13,401.453\r\n                            + CPU_TIME                                                                               \t  0.0\t0.085\t     1\t  0.0\t0.085\t     1\t   0\t      0\t ___.____________________________\t 13,401.453\t 13,401.538\r\n\r\n~~~\r\n\r\nI could not find any other reasons it was blocked, except that the thread 936 recorded - Compression Failure with Reason Code 14 occurred at 84,882.473 ms, that is when this request completed.\r\n\r\nThe thread 936 from Events received the CSwitch \r\n```\r\nEvent Name                   \t Time MSec\tProcess Name\tActivityID\tActivityInfo               \tContainerID\tDURATION__MSEC\tFormattedMessage\tHasBlockingStack\tHasStack\tNewProcessID\tNewProcessName\tNewThreadID\tRest\r\nWindows Kernel/Thread/CSwitch\t84,881.440\tw3wp (6008) \t          \tImplied/TID=936/S=13301.417\t           \t              \t                \tFalse           \tTrue    \t 6,008      \tw3wp          \t   936     \tThreadID=\"936\" ProcessorNumber=\"0\" OldThreadID=\"22,124\" OldProcessID=\"1,532\" OldProcessName=\"DWASSVC\" ProcessorNumber=\"0\" NewThreadPriority=\"8\" OldThreadPriority=\"10\" NewThreadQuantum=\"0\" OldThreadQuantum=\"0\" OldThreadWaitReason=\"33\" OldThreadWaitMode=\"Swappable\" OldThreadState=\"Ready\" OldThreadWaitIdealProcessor=\"1\" NewThreadWaitTime=\"0\" StartStopActivity=\"AspNetReq(4000a067-0000-d000-b63f-84710c7967bb,/Scripts/barcodelistener)/P=$\" \r\nWindows Kernel/Thread/CSwitch\t84,882.028\tw3wp (6008) \t          \tImplied/TID=936/S=13301.417\t           \t              \t                \tFalse           \tTrue    \t 6,008      \tw3wp          \t   936     \tThreadID=\"936\" ProcessorNumber=\"0\" OldThreadID=\"10,252\" OldProcessID=\"744\" OldProcessName=\"lsass\" ProcessorNumber=\"0\" NewThreadPriority=\"9\" OldThreadPriority=\"9\" NewThreadQuantum=\"0\" OldThreadQuantum=\"0\" OldThreadWaitReason=\"15\" OldThreadWaitMode=\"Swappable\" OldThreadState=\"Wait\" OldThreadWaitIdealProcessor=\"1\" NewThreadWaitTime=\"0\" StartStopActivity=\"AspNetReq(4000a067-0000-d000-b63f-84710c7967bb,/Scripts/barcodelistener)/P=$\" \r\nWindows Kernel/Thread/CSwitch\t84,882.136\tw3wp (6008) \t          \tImplied/TID=936/S=13301.417\t           \t              \t                \tFalse           \tTrue    \t 6,008      \tw3wp          \t   936     \tThreadID=\"936\" ProcessorNumber=\"0\" OldThreadID=\"10,252\" OldProcessID=\"744\" OldProcessName=\"lsass\" ProcessorNumber=\"0\" NewThreadPriority=\"8\" OldThreadPriority=\"9\" NewThreadQuantum=\"0\" OldThreadQuantum=\"0\" OldThreadWaitReason=\"15\" OldThreadWaitMode=\"Swappable\" OldThreadState=\"Wait\" OldThreadWaitIdealProcessor=\"1\" NewThreadWaitTime=\"0\" StartStopActivity=\"AspNetReq(4000a067-0000-d000-b63f-84710c7967bb,/Scripts/barcodelistener)/P=$\" \r\nWindows Kernel/Thread/CSwitch\t84,882.221\tw3wp (6008) \t          \tImplied/TID=936/S=13301.417\t           \t              \t                \tFalse           \tTrue    \t 6,008      \tw3wp          \t   936     \tThreadID=\"936\" ProcessorNumber=\"0\" OldThreadID=\"10,252\" OldProcessID=\"744\" OldProcessName=\"lsass\" ProcessorNumber=\"0\" NewThreadPriority=\"9\" OldThreadPriority=\"9\" NewThreadQuantum=\"0\" OldThreadQuantum=\"0\" OldThreadWaitReason=\"15\" OldThreadWaitMode=\"Swappable\" OldThreadState=\"Wait\" OldThreadWaitIdealProcessor=\"1\" NewThreadWaitTime=\"0\" StartStopActivity=\"AspNetReq(4000a067-0000-d000-b63f-84710c7967bb,/Scripts/barcodelistener)/P=$\" \r\n\r\n```\r\n\r\nWhen I look at the CSwitch to Thread 936 time range, there are many calls to remove the IO seen for many threads. Including in case if it contains helpful trace.\r\n~~~\r\nName                                                                                                                                                                                               \tInc %\t Inc\tInc Ct\tExc %\tExc\tExc Ct\tFold\tFold Ct\t                             When\t      First\t       Last\r\n + Thread (21464) CPU=176ms (.NET IO ThreadPool Worker)                                                                                                                                            \t 28.1\t0.076\t    63\t  0.0\t  0\t     0\t   0\t      0\t 9*******************************\t 84,881.439\t 84,881.441\r\n |+ module ntdll \u003c\u003cntdll!_RtlUserThreadStart\u003e\u003e                                                                                                                                                     \t 28.1\t0.076\t    63\t  0.0\t  0\t     0\t   0\t      0\t 9*******************************\t 84,881.439\t 84,881.441\r\n | + module kernel32 \u003c\u003ckernel32!BaseThreadInitThunk\u003e\u003e                                                                                                                                              \t 28.1\t0.076\t    63\t  0.0\t  0\t     0\t   0\t      0\t 9*******************************\t 84,881.439\t 84,881.441\r\n |  + module clr \u003c\u003cclr!Thread::intermediateThreadProc\u003e\u003e                                                                                                                                            \t 28.1\t0.076\t    63\t  0.0\t  0\t     0\t   0\t      0\t 9*******************************\t 84,881.439\t 84,881.441\r\n |   + module mscorlib.ni \u003c\u003cmscorlib.ni!_IOCompletionCallback.PerformIOCompletionCallback\u003e\u003e                                                                                                        \t 27.7\t0.074\t    62\t  0.0\t  0\t     0\t   0\t      0\t 9*******************************\t 84,881.439\t 84,881.441\r\n |   |+ module System \u003c\u003cSystem!BaseOverlappedAsyncResult.CompletionPortCallback\u003e\u003e                                                                                                                  \t 27.7\t0.074\t    62\t  0.0\t  0\t     0\t   0\t      0\t 9*******************************\t 84,881.439\t 84,881.441\r\n |   | + module mscorlib.ni \u003c\u003cmscorlib.ni!ExecutionContext.Run\u003e\u003e                                                                                                                                   \t 27.7\t0.074\t    62\t  0.0\t  0\t     0\t   0\t      0\t 9*******************************\t 84,881.439\t 84,881.441\r\n |   |  + module System \u003c\u003cSystem!ContextAwareResult.CompleteCallback\u003e\u003e                                                                                                                             \t 27.7\t0.074\t    62\t  0.0\t  0\t     0\t   0\t      0\t 9*******************************\t 84,881.439\t 84,881.441\r\n |   |   + module mscorlib.ni \u003c\u003cmscorlib.ni!System.Threading.Tasks.TaskFactory`1+FromAsyncTrimPromise`1[System.Int32,System.__Canon].CompleteFromAsyncResult(System.IAsyncResult)\u003e\u003e                \t 27.7\t0.074\t    62\t  0.0\t  0\t     0\t   0\t      0\t 9*******************************\t 84,881.439\t 84,881.441\r\n |   |    + module System \u003c\u003cSystem!System.Net.WebSockets.WebSocketConnectionStream+\u003cReadAsync\u003ed__21.MoveNext()\u003e\u003e                                                                                   \t 26.3\t0.071\t    59\t  0.0\t  0\t     0\t   0\t      0\t 9*******************************\t 84,881.439\t 84,881.441\r\n |   |    |+ module mscorlib.ni \u003c\u003cmscorlib.ni!System.Threading.Tasks.Task`1[System.Int32].TrySetResult(Int32)\u003e\u003e                                                                                    \t 26.3\t0.071\t    59\t  0.0\t  0\t     0\t   0\t      0\t 9*******************************\t 84,881.439\t 84,881.441\r\n |   |    | + module System \u003c\u003cSystem!System.Net.WebSockets.WebSocketBase+WebSocketOperation+\u003cProcess\u003ed__19.MoveNext()\u003e\u003e                                                                            \t 26.3\t0.071\t    59\t  0.0\t  0\t     0\t   0\t      0\t 9*******************************\t 84,881.439\t 84,881.441\r\n |   |    |  + module mscorlib.ni \u003c\u003cmscorlib.ni!System.Threading.Tasks.Task`1[System.__Canon].TrySetResult(System.__Canon)\u003e\u003e                                                                       \t 26.3\t0.071\t    59\t  0.0\t  0\t     0\t   0\t      0\t 9*******************************\t 84,881.439\t 84,881.441\r\n |   |    |   + module System \u003c\u003cSystem!System.Net.WebSockets.WebSocketBase+\u003cReceiveAsyncCore\u003ed__45.MoveNext()\u003e\u003e                                                                                    \t 26.3\t0.071\t    59\t  0.0\t  0\t     0\t   0\t      0\t 9*******************************\t 84,881.439\t 84,881.441\r\n |   |    |    + module mscorlib.ni \u003c\u003cmscorlib.ni!System.Threading.Tasks.Task`1[System.__Canon].TrySetResult(System.__Canon)\u003e\u003e                                                                     \t 26.3\t0.071\t    59\t  0.0\t  0\t     0\t   0\t      0\t 9*******************************\t 84,881.439\t 84,881.441\r\n |   |    |     + module microsoft.azure.signalr.common \u003c\u003cmicrosoft.azure.signalr.common!Microsoft.Azure.SignalR.Connections.Client.Internal.WebSocketsTransport+\u003cStartReceiving\u003ed__20.MoveNext()\u003e\u003e\t 20.1\t0.054\t    45\t  0.0\t  0\t     0\t   0\t      0\t 9*******************************\t 84,881.439\t 84,881.441\r\n |   |    |     + module system.io.pipelines \u003c\u003csystem.io.pipelines!System.IO.Pipelines.Pipe+DefaultPipeWriter.FlushAsync(value class System.Threading.CancellationToken)\u003e\u003e                         \t  6.2\t0.017\t    14\t  0.0\t  0\t     0\t   0\t      0\t 9*******************************\t 84,881.439\t 84,881.441\r\n |   |    + module pipelines.sockets.unofficial \u003c\u003cpipelines.sockets.unofficial!Pipelines.Sockets.Unofficial.StreamConnection+AsyncStreamPipe+\u003cCopyFromStreamToReadPipe\u003ed__13.MoveNext()\u003e\u003e          \t  1.3\t0.004\t     3\t  0.0\t  0\t     0\t   0\t      0\t 9TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT\t 84,881.439\t 84,881.441\r\n |   + module picohelper \u003c\u003cpicohelper!?\u003e\u003e                                                                                                                                                          \t  0.4\t0.001\t     1\t  0.0\t  0\t     0\t   0\t      0\t 99999999999999999999999999999999\t 84,881.439\t 84,881.441\r\n |    + module kernelbase \u003c\u003ckernelbase!GetQueuedCompletionStatus\u003e\u003e                                                                                                                                 \t  0.4\t0.001\t     1\t  0.0\t  0\t     0\t   0\t      0\t 99999999999999999999999999999999\t 84,881.439\t 84,881.441\r\n |     + module ntdll \u003c\u003cntdll!NtRemoveIoCompletion\u003e\u003e                                                                                                                                               \t  0.4\t0.001\t     1\t  0.0\t  0\t     0\t   0\t      0\t 99999999999999999999999999999999\t 84,881.439\t 84,881.441\r\n |      + module wow64 \u003c\u003cwow64!Wow64LdrpInitialize\u003e\u003e                                                                                                                                               \t  0.4\t0.001\t     1\t  0.0\t  0\t     0\t   0\t      0\t 99999999999999999999999999999999\t 84,881.439\t 84,881.441\r\n |       + module wow64cpu \u003c\u003cwow64cpu!BTCpuSimulate\u003e\u003e                                                                                                                                              \t  0.4\t0.001\t     1\t  0.0\t  0\t     0\t   0\t      0\t 99999999999999999999999999999999\t 84,881.439\t 84,881.441\r\n |        + module ntoskrnl \u003c\u003cntoskrnl!NtRemoveIoCompletion\u003e\u003e                                                                                                                                      \t  0.4\t0.001\t     1\t  0.0\t  0\t     0\t   0\t      0\t 99999999999999999999999999999999\t 84,881.439\t 84,881.441\r\n |         + BLOCKED_TIME                                                                                                                                                                          \t  0.4\t0.001\t     1\t  0.4\t0.001\t     1\t   0\t      0\t 99999999999999999999999999999999\t 84,881.439\t 84,881.441\r\n + Thread (1608) CPU=189ms (.NET IO ThreadPool Worker)                                                                                                                                             \t 11.2\t0.030\t    25\t  0.0\t  0\t     0\t   0\t      0\t 9*******************************\t 84,881.439\t 84,881.441\r\n |+ module ntdll \u003c\u003cntdll!_RtlUserThreadStart\u003e\u003e                                                                                                                                                     \t 11.2\t0.030\t    25\t  0.0\t  0\t     0\t   0\t      0\t 9*******************************\t 84,881.439\t 84,881.441\r\n | + module kernel32 \u003c\u003ckernel32!BaseThreadInitThunk\u003e\u003e                                                                                                                                              \t 11.2\t0.030\t    25\t  0.0\t  0\t     0\t   0\t      0\t 9*******************************\t 84,881.439\t 84,881.441\r\n |  + module clr \u003c\u003cclr!Thread::intermediateThreadProc\u003e\u003e                                                                                                                                            \t 11.2\t0.030\t    25\t  0.0\t  0\t     0\t   0\t      0\t 9*******************************\t 84,881.439\t 84,881.441\r\n |   + module mscorlib.ni \u003c\u003cmscorlib.ni!_IOCompletionCallback.PerformIOCompletionCallback\u003e\u003e                                                                                                        \t 10.7\t0.029\t    24\t  0.0\t  0\t     0\t   0\t      0\t 9*******************************\t 84,881.439\t 84,881.441\r\n |   + module picohelper \u003c\u003cpicohelper!?\u003e\u003e                                                                                                                                                          \t  0.4\t0.001\t     1\t  0.0\t  0\t     0\t   0\t      0\t 99999999999999999999999999999999\t 84,881.439\t 84,881.441\r\n |    + module kernelbase \u003c\u003ckernelbase!GetQueuedCompletionStatus\u003e\u003e                                                                                                                                 \t  0.4\t0.001\t     1\t  0.0\t  0\t     0\t   0\t      0\t 99999999999999999999999999999999\t 84,881.439\t 84,881.441\r\n |     + module ntdll \u003c\u003cntdll!NtRemoveIoCompletion\u003e\u003e                                                                                                                                               \t  0.4\t0.001\t     1\t  0.0\t  0\t     0\t   0\t      0\t 99999999999999999999999999999999\t 84,881.439\t 84,881.441\r\n |      + module wow64 \u003c\u003cwow64!Wow64LdrpInitialize\u003e\u003e                                                                                                                                               \t  0.4\t0.001\t     1\t  0.0\t  0\t     0\t   0\t      0\t 99999999999999999999999999999999\t 84,881.439\t 84,881.441\r\n |       + module wow64cpu \u003c\u003cwow64cpu!BTCpuSimulate\u003e\u003e                                                                                                                                              \t  0.4\t0.001\t     1\t  0.0\t  0\t     0\t   0\t      0\t 99999999999999999999999999999999\t 84,881.439\t 84,881.441\r\n |        + module ntoskrnl \u003c\u003cntoskrnl!NtRemoveIoCompletion\u003e\u003e                                                                                                                                      \t  0.4\t0.001\t     1\t  0.0\t  0\t     0\t   0\t      0\t 99999999999999999999999999999999\t 84,881.439\t 84,881.441\r\n |         + BLOCKED_TIME                                                                                                                                                                          \t  0.4\t0.001\t     1\t  0.4\t0.001\t     1\t   0\t      0\t 99999999999999999999999999999999\t 84,881.439\t 84,881.441\r\n + Thread (8928) CPU=215ms (.NET IO ThreadPool Worker)                                                                                                                                             \t 10.3\t0.028\t    23\t  0.0\t  0\t     0\t   0\t      0\t 9*******************************\t 84,881.439\t 84,881.441\r\n + Thread (12792) CPU=94ms (.NET ThreadPool Worker)                                                                                                                                                \t  1.3\t0.004\t     3\t  0.0\t  0\t     0\t   0\t      0\t 9TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT\t 84,881.439\t 84,881.441\r\n + Thread (10224) CPU=70ms (.NET ThreadPool Worker)                                                                                                                                                \t  0.9\t0.002\t     2\t  0.0\t  0\t     0\t   0\t      0\t 9JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ\t 84,881.439\t 84,881.441\r\n + Thread (13296) CPU=134ms (.NET IO ThreadPool Worker)                                                                                                                                            \t  0.9\t0.002\t     2\t  0.0\t  0\t     0\t   0\t      0\t 9JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ\t 84,881.439\t 84,881.441\r\n + Thread (7712) CPU=25ms                                                                                                                                                                          \t  0.9\t0.002\t     2\t  0.0\t  0\t     0\t   0\t      0\t 9JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ\t 84,881.439\t 84,881.441\r\n + Thread (18632) CPU=128ms (.NET IO ThreadPool Worker)                                                                                                                                            \t  0.9\t0.002\t     2\t  0.0\t  0\t     0\t   0\t      0\t 9JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ\t 84,881.439\t 84,881.441\r\n |+ module ntdll \u003c\u003cntdll!_RtlUserThreadStart\u003e\u003e                                                                                                                                                     \t  0.9\t0.002\t     2\t  0.0\t  0\t     0\t   0\t      0\t 9JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ\t 84,881.439\t 84,881.441\r\n | + module kernel32 \u003c\u003ckernel32!BaseThreadInitThunk\u003e\u003e                                                                                                                                              \t  0.9\t0.002\t     2\t  0.0\t  0\t     0\t   0\t      0\t 9JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ\t 84,881.439\t 84,881.441\r\n |  + module clr \u003c\u003cclr!Thread::intermediateThreadProc\u003e\u003e                                                                                                                                            \t  0.9\t0.002\t     2\t  0.0\t  0\t     0\t   0\t      0\t 9JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ\t 84,881.439\t 84,881.441\r\n |   + module mscorlib.ni \u003c\u003cmscorlib.ni!_IOCompletionCallback.PerformIOCompletionCallback\u003e\u003e                                                                                                        \t  0.4\t0.001\t     1\t  0.0\t  0\t     0\t   0\t      0\t 99999999999999999999999999999999\t 84,881.439\t 84,881.441\r\n |   + module picohelper \u003c\u003cpicohelper!?\u003e\u003e                                                                                                                                                          \t  0.4\t0.001\t     1\t  0.0\t  0\t     0\t   0\t      0\t 99999999999999999999999999999999\t 84,881.439\t 84,881.441\r\n |    + module kernelbase \u003c\u003ckernelbase!GetQueuedCompletionStatus\u003e\u003e                                                                                                                                 \t  0.4\t0.001\t     1\t  0.0\t  0\t     0\t   0\t      0\t 99999999999999999999999999999999\t 84,881.439\t 84,881.441\r\n |     + module ntdll \u003c\u003cntdll!NtRemoveIoCompletion\u003e\u003e                                                                                                                                               \t  0.4\t0.001\t     1\t  0.0\t  0\t     0\t   0\t      0\t 99999999999999999999999999999999\t 84,881.439\t 84,881.441\r\n |      + module wow64 \u003c\u003cwow64!Wow64LdrpInitialize\u003e\u003e                                                                                                                                               \t  0.4\t0.001\t     1\t  0.0\t  0\t     0\t   0\t      0\t 99999999999999999999999999999999\t 84,881.439\t 84,881.441\r\n |       + module wow64cpu \u003c\u003cwow64cpu!BTCpuSimulate\u003e\u003e                                                                                                                                              \t  0.4\t0.001\t     1\t  0.0\t  0\t     0\t   0\t      0\t 99999999999999999999999999999999\t 84,881.439\t 84,881.441\r\n |        + module ntoskrnl \u003c\u003cntoskrnl!NtRemoveIoCompletion\u003e\u003e                                                                                                                                      \t  0.4\t0.001\t     1\t  0.0\t  0\t     0\t   0\t      0\t 99999999999999999999999999999999\t 84,881.439\t 84,881.441\r\n |         + BLOCKED_TIME                                                                                                                                                                          \t  0.4\t0.001\t     1\t  0.4\t0.001\t     1\t   0\t      0\t 99999999999999999999999999999999\t 84,881.439\t 84,881.441\r\n\r\n~~~\r\n\r\nWhen looking from the context of HTTP Requests, it seems ETW is not a factor here. Can you help me interpret why a bundle request took 71 - and help explaining the role of `piochelper` as I see it in other traces as well?\r\nI am not sure how I would find out who was blocking the request.\r\n",
                                           "updatedAt":  "2024-04-22T21:00:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57do_b",
                                           "createdAt":  "2024-04-23T04:05:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "marafiq",
                                           "body":  "Sorry, I have few more questions.  In multiple threads I see `RareDisablePreemptiveGC` calls.\r\n\r\nUnder what conditions GC gets disabled or what the below call stack means when you find rare disable RareDisablePreemptiveGC call in call stack? \r\n\r\nBelow stack traces from a different profile trace taken today experiencing slowdown - but the same application \r\n\r\n![image](https://github.com/dotnet/runtime/assets/9109259/201f8741-97bb-4f15-907e-7caba2892868)\r\n\r\nPartial Stack Traces of Possible GC Disable - Few threads have ETW thread before it got triggered. \r\n\r\n```\r\nName                                                                                                                                                                                                                                                                                                            \tInc %\t   Inc\tInc Ct\tExc %\tExc\tExc Ct\tFold\tFold Ct\t                             When\t      First\t       Last\r\n  |||               |   |              |         |       |||   |          |   |   ||   | |    || |  ||    |  + mscorlib.ni!System.Runtime.CompilerServices.TaskAwaiter+\u003c\u003ec__DisplayClass11_0.\u003cOutputWaitEtwEvents\u003eb__0()                                                                                        \t  0.0\t113.718\t     6\t  0.0\t  0\t     0\t   0\t      0\t ____________0.__________________\t 25,695.588\t 27,341.958\r\n  |||               |   |              |         |       |||   |          |   |   ||   | |    || |  ||    |  |+ mscorlib.ni!TplEtwProvider.TaskWaitEnd                                                                                                                                                          \t  0.0\t113.718\t     6\t  0.0\t  0\t     0\t   0\t      0\t ____________0.__________________\t 25,695.588\t 27,341.958\r\n  |||               |   |              |         |       |||   |          |   |   ||   | |    || |  ||    |  | + mscorlib.ni!EventSource.WriteEvent                                                                                                                                                             \t  0.0\t113.718\t     6\t  0.0\t  0\t     0\t   0\t      0\t ____________0.__________________\t 25,695.588\t 27,341.958\r\n  |||               |   |              |         |       |||   |          |   |   ||   | |    || |  ||    |  |  + mscorlib.ni!EventSource.WriteEventWithRelatedActivityIdCore                                                                                                                                   \t  0.0\t113.718\t     6\t  0.0\t  0\t     0\t   0\t      0\t ____________0.__________________\t 25,695.588\t 27,341.958\r\n  |||               |   |              |         |       |||   |          |   |   ||   | |    || |  ||    |  |   + mscorlib.ni!Microsoft.Win32.UnsafeNativeMethods+ManifestEtw.EventWriteTransferWrapper(Int64, System.Diagnostics.Tracing.EventDescriptor ByRef, System.Guid*, System.Guid*, Int32, EventData*)\t  0.0\t113.718\t     6\t  0.0\t  0\t     0\t   0\t      0\t ____________0.__________________\t 25,695.588\t 27,341.958\r\n  |||               |   |              |         |       |||   |          |   |   ||   | |    || |  ||    |  |    + mscorlib.ni!DomainNeutralILStubClass.IL_STUB_PInvoke(Int64, System.Diagnostics.Tracing.EventDescriptor ByRef, System.Guid*, System.Guid*, Int32, EventData*)                                \t  0.0\t113.718\t     6\t  0.0\t  0\t     0\t   0\t      0\t ____________0.__________________\t 25,695.588\t 27,341.958\r\n  |||               |   |              |         |       |||   |          |   |   ||   | |    || |  ||    |  |     + clr!JIT_RareDisableHelper                                                                                                                                                                  \t  0.0\t113.626\t     4\t  0.0\t  0\t     0\t   0\t      0\t ____________0___________________\t 25,695.588\t 25,809.215\r\n  |||               |   |              |         |       |||   |          |   |   ||   | |    || |  ||    |  |     |+ clr!JIT_RareDisableHelperWorker                                                                                                                                                           \t  0.0\t113.626\t     4\t  0.0\t  0\t     0\t   0\t      0\t ____________0___________________\t 25,695.588\t 25,809.215\r\n  |||               |   |              |         |       |||   |          |   |   ||   | |    || |  ||    |  |     | + clr!??Thread::RareDisablePreemptiveGC                                                                                                                                                    \t  0.0\t113.626\t     4\t  0.0\t  0\t     0\t   0\t      0\t ____________0___________________\t 25,695.588\t 25,809.215\r\n  |||               |   |              |         |       |||   |          |   |   ||   | |    || |  ||    |  |     |  + kernelbase!SwitchToThread                                                                                                                                                               \t  0.0\t82.061\t     2\t  0.0\t  0\t     0\t   0\t      0\t ____________0___________________\t 25,727.153\t 25,809.215\r\n  |||               |   |              |         |       |||   |          |   |   ||   | |    || |  ||    |  |     |  |+ ntdll!RtlDelayExecution                                                                                                                                                                \t  0.0\t82.061\t     2\t  0.0\t  0\t     0\t   0\t      0\t ____________0___________________\t 25,727.153\t 25,809.215\r\n  |||               |   |              |         |       |||   |          |   |   ||   | |    || |  ||    |  |     |  | + ntdll!NtDelayExecution                                                                                                                                                                \t  0.0\t82.061\t     2\t  0.0\t  0\t     0\t   0\t      0\t ____________0___________________\t 25,727.153\t 25,809.215\r\n  |||               |   |              |         |       |||   |          |   |   ||   | |    || |  ||    |  |     |  |  + ntoskrnl!?                                                                                                                                                                           \t  0.0\t82.061\t     2\t  0.0\t  0\t     0\t   0\t      0\t ____________0___________________\t 25,727.153\t 25,809.215\r\n  |||               |   |              |         |       |||   |          |   |   ||   | |    || |  ||    |  |     |  |   + BLOCKED_TIME                                                                                                                                                                        \t  0.0\t82.017\t     1\t  0.0\t82.017\t     1\t   0\t      0\t ____________0___________________\t 25,727.153\t 25,809.170\r\n  |||               |   |              |         |       |||   |          |   |   ||   | |    || |  ||    |  |     |  |   + CPU_TIME                                                                                                                                                                            \t  0.0\t 0.045\t     1\t  0.0\t0.045\t     1\t   0\t      0\t ____________.___________________\t 25,809.170\t 25,809.215\r\n  |||               |   |              |         |       |||   |          |   |   ||   | |    || |  ||    |  |     |  + clr!SVR::GCHeap::WaitUntilGCComplete                                                                                                                                                    \t  0.0\t31.565\t     2\t  0.0\t  0\t     0\t   0\t      0\t ____________0___________________\t 25,695.588\t 25,727.153\r\n  |||               |   |              |         |       |||   |          |   |   ||   | |    || |  ||    |  |     |   + clr!CLREventBase::WaitEx                                                                                                                                                               \t  0.0\t31.565\t     2\t  0.0\t  0\t     0\t   0\t      0\t ____________0___________________\t 25,695.588\t 25,727.153\r\n  |||               |   |              |         |       |||   |          |   |   ||   | |    || |  ||    |  |     |    + clr!CLREventWaitHelper                                                                                                                                                                \t  0.0\t31.565\t     2\t  0.0\t  0\t     0\t   0\t      0\t ____________0___________________\t 25,695.588\t 25,727.153\r\n  |||               |   |              |         |       |||   |          |   |   ||   | |    || |  ||    |  |     |     + clr!CLREventWaitHelper2                                                                                                                                                              \t  0.0\t31.565\t     2\t  0.0\t  0\t     0\t   0\t      0\t ____________0___________________\t 25,695.588\t 25,727.153\r\n  |||               |   |              |         |       |||   |          |   |   ||   | |    || |  ||    |  |     |      + kernelbase!WaitForSingleObjectEx                                                                                                                                                    \t  0.0\t31.565\t     2\t  0.0\t  0\t     0\t   0\t      0\t ____________0___________________\t 25,695.588\t 25,727.153\r\n  |||               |   |              |         |       |||   |          |   |   ||   | |    || |  ||    |  |     |       + ntdll!NtWaitForSingleObject                                                                                                                                                        \t  0.0\t31.565\t     2\t  0.0\t  0\t     0\t   0\t      0\t ____________0___________________\t 25,695.588\t 25,727.153\r\n  |||               |   |              |         |       |||   |          |   |   ||   | |    || |  ||    |  |     |        + ntoskrnl!?                                                                                                                                                                        \t  0.0\t31.565\t     2\t  0.0\t  0\t     0\t   0\t      0\t ____________0___________________\t 25,695.588\t 25,727.153\r\n  |||               |   |              |         |       |||   |          |   |   ||   | |    || |  ||    |  |     |         + BLOCKED_TIME                                                                                                                                                                     \t  0.0\t31.543\t     1\t  0.0\t31.543\t     1\t   0\t      0\t ____________0___________________\t 25,695.588\t 25,727.132\r\n  |||               |   |              |         |       |||   |          |   |   ||   | |    || |  ||    |  |     |         + CPU_TIME                                                                                                                                                                         \t  0.0\t 0.022\t     1\t  0.0\t0.022\t     1\t   0\t      0\t ____________.___________________\t 25,727.132\t 25,727.153\r\n  |||               |   |              |         |       |||   |          |   |   ||   | |    || |  ||    |  |     + ntdll!EtwEventWriteTransfer                                                                                                                                                                \t  0.0\t 0.091\t     2\t  0.0\t  0\t     0\t   0\t      0\t _____________.__________________\t 27,341.867\t 27,341.958\r\n  |||               |   |              |         |       |||   |          |   |   ||   | |    || |  ||    |  |      + ntdll!NtTraceEvent                                                                                                                                                                        \t  0.0\t 0.091\t     2\t  0.0\t  0\t     0\t   0\t      0\t _____________.__________________\t 27,341.867\t 27,341.958\r\n  |||               |   |              |         |       |||   |          |   |   ||   | |    || |  ||    |  |       + ntoskrnl!?                                                                                                                                                                               \t  0.0\t 0.091\t     2\t  0.0\t  0\t     0\t   0\t      0\t _____________.__________________\t 27,341.867\t 27,341.958\r\n  |||               |   |              |         |       |||   |          |   |   ||   | |    || |  ||    |  |        + handlerc!?                                                                                                                                                                              \t  0.0\t 0.091\t     2\t  0.0\t  0\t     0\t   0\t      0\t _____________.__________________\t 27,341.867\t 27,341.958\r\n  |||               |   |              |         |       |||   |          |   |   ||   | |    || |  ||    |  |         + ntoskrnl!?                                                                                                                                                                             \t  0.0\t 0.091\t     2\t  0.0\t  0\t     0\t   0\t      0\t _____________.__________________\t 27,341.867\t 27,341.958\r\n  |||               |   |              |         |       |||   |          |   |   ||   | |    || |  ||    |  |          + CPU_TIME                                                                                                                                                                              \t  0.0\t 0.087\t     1\t  0.0\t0.087\t     1\t   0\t      0\t _____________.__________________\t 27,341.871\t 27,341.958\r\n  |||               |   |              |         |       |||   |          |   |   ||   | |    || |  ||    |  |          + BLOCKED_TIME                                                                                                                                                                          \t  0.0\t 0.005\t     1\t  0.0\t0.005\t     1\t   0\t      0\t _____________.__________________\t 27,341.867\t 27,341.871\r\n\r\n```\r\n~~~\r\nName                                                                                                                                                                                                                           \tInc %\t   Inc\tInc Ct\tExc %\tExc\tExc Ct\tFold\tFold Ct\t                             When\t      First\t       Last\r\n  | |               |   |              |                 |||  ||          |   |  |||  |    |  |||  |||||+ System.Web.Mvc!RouteCollectionExtensions.FilterRouteCollectionByArea                                                 \t  0.0\t561.147\t   974\t  0.0\t  0\t     0\t   0\t      0\t _______0110_____________________\t 16,510.317\t 21,489.599\r\n  | |               |   |              |                 |||  ||          |   |  |||  |    |  |||  ||||||+ System.Web.Mvc!AreaHelpers.GetAreaName                                                                              \t  0.0\t346.885\t   567\t  0.0\t  0\t     0\t   0\t      0\t _______o00o_____________________\t 16,510.317\t 21,488.816\r\n  | |               |   |              |                 |||  ||          |   |  |||  |    |  |||  |||||||+ mscorlib.ni!System.Collections.Generic.Dictionary`2[System.__Canon,System.__Canon].FindEntry(System.__Canon)       \t  0.0\t204.738\t   237\t  0.0\t  0\t     0\t   0\t      0\t _______o00o_____________________\t 16,512.317\t 21,488.816\r\n  | |               |   |              |                 |||  ||          |   |  |||  |    |  |||  ||||||||+ clr!RedirectedHandledJITCaseForGCThreadControl_Stub                                                               \t  0.0\t103.458\t     5\t  0.0\t  0\t     0\t   0\t      0\t ________0_______________________\t 16,884.142\t 16,987.600\r\n  | |               |   |              |                 |||  ||          |   |  |||  |    |  |||  |||||||||+ clr!Thread::RedirectedHandledJITCase                                                                             \t  0.0\t103.458\t     5\t  0.0\t  0\t     0\t   0\t      0\t ________0_______________________\t 16,884.142\t 16,987.600\r\n  | |               |   |              |                 |||  ||          |   |  |||  |    |  |||  ||||||||| + clr!??Thread::RareDisablePreemptiveGC                                                                           \t  0.0\t103.458\t     5\t  0.0\t  0\t     0\t   0\t      0\t ________0_______________________\t 16,884.142\t 16,987.600\r\n  | |               |   |              |                 |||  ||          |   |  |||  |    |  |||  |||||||||  + clr!SVR::GCHeap::WaitUntilGCComplete                                                                           \t  0.0\t75.509\t     2\t  0.0\t  0\t     0\t   0\t      0\t ________0_______________________\t 16,884.142\t 16,959.651\r\n  | |               |   |              |                 |||  ||          |   |  |||  |    |  |||  |||||||||  |+ clr!CLREventBase::WaitEx                                                                                      \t  0.0\t75.509\t     2\t  0.0\t  0\t     0\t   0\t      0\t ________0_______________________\t 16,884.142\t 16,959.651\r\n  | |               |   |              |                 |||  ||          |   |  |||  |    |  |||  |||||||||  | + clr!CLREventWaitHelper                                                                                       \t  0.0\t75.509\t     2\t  0.0\t  0\t     0\t   0\t      0\t ________0_______________________\t 16,884.142\t 16,959.651\r\n  | |               |   |              |                 |||  ||          |   |  |||  |    |  |||  |||||||||  |  + clr!CLREventWaitHelper2                                                                                     \t  0.0\t75.509\t     2\t  0.0\t  0\t     0\t   0\t      0\t ________0_______________________\t 16,884.142\t 16,959.651\r\n  | |               |   |              |                 |||  ||          |   |  |||  |    |  |||  |||||||||  |   + kernelbase!WaitForSingleObjectEx                                                                           \t  0.0\t75.509\t     2\t  0.0\t  0\t     0\t   0\t      0\t ________0_______________________\t 16,884.142\t 16,959.651\r\n  | |               |   |              |                 |||  ||          |   |  |||  |    |  |||  |||||||||  |    + ntdll!NtWaitForSingleObject                                                                               \t  0.0\t75.509\t     2\t  0.0\t  0\t     0\t   0\t      0\t ________0_______________________\t 16,884.142\t 16,959.651\r\n  | |               |   |              |                 |||  ||          |   |  |||  |    |  |||  |||||||||  |     + ntoskrnl!?                                                                                               \t  0.0\t75.509\t     2\t  0.0\t  0\t     0\t   0\t      0\t ________0_______________________\t 16,884.142\t 16,959.651\r\n  | |               |   |              |                 |||  ||          |   |  |||  |    |  |||  |||||||||  |      + BLOCKED_TIME                                                                                            \t  0.0\t75.463\t     1\t  0.0\t75.463\t     1\t   0\t      0\t ________0_______________________\t 16,884.142\t 16,959.605\r\n  | |               |   |              |                 |||  ||          |   |  |||  |    |  |||  |||||||||  |      + CPU_TIME                                                                                                \t  0.0\t 0.046\t     1\t  0.0\t0.046\t     1\t   0\t      0\t ________._______________________\t 16,959.605\t 16,959.651\r\n  | |               |   |              |                 |||  ||          |   |  |||  |    |  |||  |||||||||  + kernelbase!SwitchToThread                                                                                      \t  0.0\t27.949\t     3\t  0.0\t  0\t     0\t   0\t      0\t ________0_______________________\t 16,959.651\t 16,987.600\r\n  | |               |   |              |                 |||  ||          |   |  |||  |    |  |||  |||||||||   + ntdll!RtlDelayExecution                                                                                       \t  0.0\t27.949\t     3\t  0.0\t  0\t     0\t   0\t      0\t ________0_______________________\t 16,959.651\t 16,987.600\r\n  | |               |   |              |                 |||  ||          |   |  |||  |    |  |||  |||||||||    + ntdll!NtDelayExecution                                                                                       \t  0.0\t27.949\t     3\t  0.0\t  0\t     0\t   0\t      0\t ________0_______________________\t 16,959.651\t 16,987.600\r\n  | |               |   |              |                 |||  ||          |   |  |||  |    |  |||  |||||||||     + ntoskrnl!?                                                                                                  \t  0.0\t27.949\t     3\t  0.0\t  0\t     0\t   0\t      0\t ________0_______________________\t 16,959.651\t 16,987.600\r\n  | |               |   |              |                 |||  ||          |   |  |||  |    |  |||  |||||||||      + BLOCKED_TIME                                                                                               \t  0.0\t27.664\t     1\t  0.0\t27.664\t     1\t   0\t      0\t ________0_______________________\t 16,959.651\t 16,987.315\r\n  | |               |   |              |                 |||  ||          |   |  |||  |    |  |||  |||||||||      + CPU_TIME                                                                                                   \t  0.0\t 0.284\t     2\t  0.0\t0.284\t     2\t   0\t      0\t ________._______________________\t 16,987.315\t 16,987.600\r\n  | |               |   |              |                 |||  ||          |   |  |||  |    |  |||  ||||||||+ CPU_TIME                                                                                                          \t  0.0\t52.417\t    76\t  0.0\t52.417\t    76\t   0\t      0\t _______oo0o_____________________\t 16,512.317\t 21,488.816\r\n  | |               |   |              |                 |||  ||          |   |  |||  |    |  |||  ||||||||+ ntoskrnl!?                                                                                                        \t  0.0\t28.678\t   110\t  0.0\t  0\t     0\t   0\t      0\t ________oo______________________\t 16,875.408\t 20,875.755\r\n  | |               |   |              |                 |||  ||          |   |  |||  |    |  |||  |||||||||+ BLOCKED_TIME                                                                                                     \t  0.0\t17.132\t    55\t  0.0\t17.132\t    55\t   0\t      0\t ________oo______________________\t 16,875.408\t 20,874.862\r\n  | |               |   |              |                 |||  ||          |   |  |||  |    |  |||  |||||||||+ CPU_TIME                                                                                                         \t  0.0\t11.546\t    55\t  0.0\t11.546\t    55\t   0\t      0\t ________oo______________________\t 16,875.414\t 20,875.755\r\n  | |               |   |              |                 |||  ||          |   |  |||  |    |  |||  ||||||||+ mscorlib.ni!OrdinalComparer.GetHashCode                                                                           \t  0.0\t20.185\t    46\t  0.0\t  0\t     0\t   0\t      0\t _______.oo._____________________\t 16,747.342\t 21,397.194\r\n  | |               |   |              |                 |||  ||          |   |  |||  |    |  |||  |||||||| + mscorlib.ni!TextInfo.GetCaseInsensitiveHashCode                                                                  \t  0.0\t16.557\t    40\t  0.0\t  0\t     0\t   0\t      0\t _______.oo._____________________\t 16,747.342\t 21,397.194\r\n  | |               |   |              |                 |||  ||          |   |  |||  |    |  |||  |||||||| + CPU_TIME                                                                                                         \t  0.0\t 2.409\t     3\t  0.0\t2.409\t     3\t   0\t      0\t _________o______________________\t 20,019.668\t 20,979.174\r\n  | |               |   |              |                 |||  ||          |   |  |||  |    |  |||  |||||||| + mscorlib.ni!TextInfo.get_Invariant                                                                               \t  0.0\t 1.220\t     3\t  0.0\t  0\t     0\t   0\t      0\t _________.______________________\t 20,058.438\t 20,350.704\r\n  | |               |   |              |                 |||  ||          |   |  |||  |    |  |||  |||||||+ CPU_TIME                                                                                                           \t  0.0\t50.180\t    69\t  0.0\t50.180\t    69\t   0\t      0\t _______oo0._____________________\t 16,510.317\t 21,483.816\r\n  | |               |   |              |                 |||  ||          |   |  |||  |    |  |||  |||||||+ clr!JIT_IsInstanceOfInterface                                                                                      \t  0.0\t49.471\t   117\t  0.0\t  0\t     0\t   0\t      0\t _______.o0._____________________\t 16,663.333\t 21,478.494\r\n  | |               |   |              |                 |||  ||          |   |  |||  |    |  |||  |||||||+ ntoskrnl!?                                                                                                         \t  0.0\t42.496\t   144\t  0.0\t  0\t     0\t   0\t      0\t _______o0o._____________________\t 16,673.434\t 21,470.126\r\n  | |               |   |              |                 |||  ||          |   |  |||  |    |  |||  ||||||+ system.web!RouteCollection.InsertItem                                                                               \t  0.0\t194.472\t   350\t  0.0\t  0\t     0\t   0\t      0\t _______000o_____________________\t 16,511.318\t 21,489.599\r\n  | |               |   |              |                 |||  ||          |   |  |||  |    |  |||  ||||||+ mscorlib.ni!System.Collections.Generic.List`1+Enumerator[System.__Canon].MoveNext()                                 \t  0.0\t 8.735\t    21\t  0.0\t  0\t     0\t   0\t      0\t ________oo._____________________\t 17,127.379\t 20,990.765\r\n  | |               |   |              |                 |||  ||          |   |  |||  |    |  |||  ||||||+ mscorlib.ni!String.Equals                                                                                           \t  0.0\t 5.434\t    19\t  0.0\t  0\t     0\t   0\t      0\t _______...._____________________\t 16,704.414\t 21,396.755\r\n  | |               |   |              |                 |||  ||          |   |  |||  |    |  |||  ||||||+ ntoskrnl!?                                                                                                          \t  0.0\t 2.951\t    11\t  0.0\t  0\t     0\t   0\t      0\t _________.._____________________\t 19,292.225\t 21,424.810\r\n  | |               |   |              |                 |||  ||          |   |  |||  |    |  |||  ||||||+ CPU_TIME                                                                                                            \t  0.0\t 1.632\t     3\t  0.0\t1.632\t     3\t   0\t      0\t _______.._._____________________\t 16,706.336\t 21,425.302\r\n  | |               |   |              |                 |||  ||          |   |  |||  |    |  |||  ||||||+ mscorlib.ni!String.EqualsIgnoreCaseAsciiHelper                                                                      \t  0.0\t 0.763\t     1\t  0.0\t  0\t     0\t   0\t      0\t ________._______________________\t 18,778.544\t 18,779.307\r\n  | |               |   |              |                 |||  ||          |   |  |||  |    |  |||  ||||||+ mscorlib.ni!System.Collections.Generic.List`1[System.__Canon].System.Collections.Generic.IEnumerable.GetEnumerator()\t  0.0\t 0.276\t     2\t  0.0\t  0\t     0\t   0\t      0\t __________._____________________\t 21,418.532\t 21,418.808\r\n  | |               |   |              |                 |||  ||          |   |  |||  |    |  |||  |||||+ system.web!System.Web.Routing.RouteValueDictionary..ctor(class System.Collections.Generic.IDictionary`2)             \t  0.0\t 0.075\t     1\t  0.0\t  0\t     0\t   0\t      0\t _________.______________________\t 19,783.646\t 19,783.721\r\n  | |               |   |              |                 |||  ||          |   |  |||  |    |  |||  ||||+ System.Web.WebPages!UrlUtil.GenerateClientUrl                                                                         \t  0.0\t 1.694\t     4\t  0.0\t  0\t     0\t   0\t      0\t ________..______________________\t 17,000.750\t 19,274.670\r\n  | |               |   |              |                 |||  ||          |   |  |||  |    |  |||  |||+ System.Web.Mvc!AjaxExtensions.GenerateLink                                                                             \t  0.0\t 0.846\t     3\t  0.0\t  0\t     0\t   0\t      0\t ________._______________________\t 17,120.379\t 17,183.077\r\n  | |               |   |              |                 |||  ||          |   |  |||  |    |  |||  ||+ system.web!RouteValueDictionary.AddValues                                                                               \t  0.0\t 6.677\t     9\t  0.0\t  0\t     0\t   0\t      0\t _______._o______________________\t 16,704.337\t 19,959.072\r\n\r\n~~~\r\n\r\nAnother partial stack trace under Blocked Time - Callers  - This happens when I have JIT time crossing more than a second for a method. \r\n\r\n```\r\nName                                                                                                                               \tInc %\t      Inc\tInc Ct\tExc %\tExc\tExc Ct\tFold\tFold Ct\t                             When\t     First\t      Last\r\n |||  |+ clr!SVR::GCHeap::GarbageCollectGeneration                                                                                 \t  0.1\t1,491.664\t     3\t  0.0\t  0\t     0\t   0\t      0\t _____________21994__799999999995\t 2,159.377\t 4,083.171\r\n |||  | + clr!SVR::gc_heap::trigger_gc_for_alloc                                                                                   \t  0.1\t1,491.664\t     3\t  0.0\t  0\t     0\t   0\t      0\t _____________21994__799999999995\t 2,159.377\t 4,083.171\r\n |||  |  + clr!SVR::gc_heap::try_allocate_more_space                                                                               \t  0.1\t1,491.664\t     3\t  0.0\t  0\t     0\t   0\t      0\t _____________21994__799999999995\t 2,159.377\t 4,083.171\r\n |||  |   + clr!SVR::gc_heap::allocate_more_space                                                                                  \t  0.1\t1,491.664\t     3\t  0.0\t  0\t     0\t   0\t      0\t _____________21994__799999999995\t 2,159.377\t 4,083.171\r\n |||  |    + clr!??SVR::GCHeap::Alloc                                                                                              \t  0.1\t1,491.664\t     3\t  0.0\t  0\t     0\t   0\t      0\t _____________21994__799999999995\t 2,159.377\t 4,083.171\r\n |||  |     + clr!JIT_New                                                                                                          \t  0.1\t1,491.664\t     3\t  0.0\t  0\t     0\t   0\t      0\t _____________21994__799999999995\t 2,159.377\t 4,083.171\r\n |||  |      + system.web!CacheInternal.DoInsert                                                                                   \t  0.1\t1,192.660\t     1\t  0.0\t  0\t     0\t   0\t      0\t ____________________799999999995\t 2,890.512\t 4,083.171\r\n |||  |      + mscorlib.ni!System.Collections.Generic.List`1[System.__Canon].System.Collections.Generic.IEnumerable.GetEnumerator()\t  0.0\t  299.005\t     2\t  0.0\t  0\t     0\t   0\t      0\t _____________21994______________\t 2,159.377\t 2,605.213\r\n |||  + clr!SVR::gc_heap::gc_thread_function                                                                                       \t  0.8\t11,708.686\t    16\t  0.0\t  0\t     0\t   0\t      0\t 9************V*TTR**WTTTTTTTTTTP\t   769.564\t 4,128.766\r\n |||  |+ clr!SVR::gc_heap::gc_thread_stub                                                                                          \t  0.8\t11,708.686\t    16\t  0.0\t  0\t     0\t   0\t      0\t 9************V*TTR**WTTTTTTTTTTP\t   769.564\t 4,128.766\r\n |||  | + clr!\u003clambda_f4a83ef2357e8af94a7c50f2736987d6\u003e::\u003clambda_invoker_cdecl\u003e                                                    \t  0.8\t11,708.686\t    16\t  0.0\t  0\t     0\t   0\t      0\t 9************V*TTR**WTTTTTTTTTTP\t   769.564\t 4,128.766\r\n |||  |  + kernel32!BaseThreadInitThunk                                                                                            \t  0.8\t11,708.686\t    16\t  0.0\t  0\t     0\t   0\t      0\t 9************V*TTR**WTTTTTTTTTTP\t   769.564\t 4,128.766\r\n |||  |   + ntdll!RtlUserThreadStart                                                                                               \t  0.8\t11,708.686\t    16\t  0.0\t  0\t     0\t   0\t      0\t 9************V*TTR**WTTTTTTTTTTP\t   769.564\t 4,128.766\r\n |||  |    + Thread (7736) CPU=1923ms                                                                                              \t  0.2\t3,296.812\t     4\t  0.0\t  0\t     0\t   0\t      0\t 99999999999997999799999999999998\t   769.564\t 4,128.766\r\n |||  |    + Thread (5192) CPU=2242ms                                                                                              \t  0.2\t3,271.787\t     4\t  0.0\t  0\t     0\t   0\t      0\t 99999999999997999799999999999996\t   769.564\t 4,128.766\r\n |||  |    + Thread (3580) CPU=2533ms                                                                                              \t  0.2\t3,268.875\t     4\t  0.0\t  0\t     0\t   0\t      0\t 99999999999997999799999999999996\t   769.564\t 4,128.766\r\n |||  |    + Thread (4128) CPU=2226ms (.NET Server GC Thread(0))                                                                   \t  0.1\t1,871.212\t     4\t  0.0\t  0\t     0\t   0\t      0\t 999999999999978__5992__________4\t   769.564\t 4,128.766\r\n |||  + clr!SVR::GCHeap::WaitUntilGCComplete                                                                                       \t  0.2\t3,146.547\t    25\t  0.0\t  0\t     0\t   0\t      0\t _____________1__8C__799HJJJSTo*Y\t 2,171.206\t 4,079.555\r\n |||  |+ clr!??Thread::RareDisablePreemptiveGC                                                                                     \t  0.2\t3,146.547\t    25\t  0.0\t  0\t     0\t   0\t      0\t _____________1__8C__799HJJJSTo*Y\t 2,171.206\t 4,079.555\r\n |||  | + clr!??Thread::DoAppropriateWaitWorker                                                                                    \t  0.1\t1,785.357\t     5\t  0.0\t  0\t     0\t   0\t      0\t ________________84_____7999IJo*L\t 2,465.145\t 4,079.544\r\n |||  | |+ clr!Thread::DoAppropriateWait                                                                                           \t  0.1\t1,785.357\t     5\t  0.0\t  0\t     0\t   0\t      0\t ________________84_____7999IJo*L\t 2,465.145\t 4,079.544\r\n |||  | | + clr!WaitHandleNative::CorWaitMultipleNative                                                                            \t  0.1\t1,462.866\t     3\t  0.0\t  0\t     0\t   0\t      0\t ________________84_____7999IJJJA\t 2,465.145\t 4,079.544\r\n |||  | | |+ mscorlib.ni!WaitHandle.WaitAny                                                                                        \t  0.1\t1,462.866\t     3\t  0.0\t  0\t     0\t   0\t      0\t ________________84_____7999IJJJA\t 2,465.145\t 4,079.544\r\n |||  | | | + mscorlib.ni!WaitHandle.WaitAny                                                                                       \t  0.1\t1,462.866\t     3\t  0.0\t  0\t     0\t   0\t      0\t ________________84_____7999IJJJA\t 2,465.145\t 4,079.544\r\n |||  | | |  + Hangfire.Pro.Redis!RedisConnection.TrySubscriptionBasedFetch                                                        \t  0.1\t  864.419\t     1\t  0.0\t  0\t     0\t   0\t      0\t _______________________799999995\t 3,215.124\t 4,079.544\r\n |||  | | |  + Hangfire.Pro.Redis!RedisStorage.ConnectLoop                                                                         \t  0.0\t  598.446\t     2\t  0.0\t  0\t     0\t   0\t      0\t ________________84_________89995\t 2,465.145\t 4,079.541\r\n |||  | | + clr!WaitHandleNative::CorWaitOneNative                                                                                 \t  0.0\t  322.492\t     2\t  0.0\t  0\t     0\t   0\t      0\t _____________________________oJA\t 3,918.274\t 4,079.539\r\n |||  | |  + mscorlib.ni!WaitHandle.InternalWaitOne                                                                                \t  0.0\t  322.492\t     2\t  0.0\t  0\t     0\t   0\t      0\t _____________________________oJA\t 3,918.274\t 4,079.539\r\n |||  | |   + mscorlib.ni!WaitHandle.WaitOne                                                                                       \t  0.0\t  322.492\t     2\t  0.0\t  0\t     0\t   0\t      0\t _____________________________oJA\t 3,918.274\t 4,079.539\r\n |||  | |    + mscorlib.ni!WaitHandle.WaitOne                                                                                      \t  0.0\t  322.492\t     2\t  0.0\t  0\t     0\t   0\t      0\t _____________________________oJA\t 3,918.274\t 4,079.539\r\n |||  | |     + Hangfire.Pro.Redis!CancellationTokenExtentions.Wait                                                                \t  0.0\t  161.265\t     1\t  0.0\t  0\t     0\t   0\t      0\t _____________________________o95\t 3,918.274\t 4,079.539\r\n |||  | |     + Hangfire.Core!CancellationTokenExtentions.Wait                                                                     \t  0.0\t  161.227\t     1\t  0.0\t  0\t     0\t   0\t      0\t _____________________________o95\t 3,918.297\t 4,079.524\r\n |||  | + clr!JIT_RareDisableHelperWorker                                                                                          \t  0.1\t1,188.994\t     1\t  0.0\t  0\t     0\t   0\t      0\t ____________________799999999995\t 2,890.561\t 4,079.555\r\n |||  | |+ clr!JIT_RareDisableHelper                                                                                               \t  0.1\t1,188.994\t     1\t  0.0\t  0\t     0\t   0\t      0\t ____________________799999999995\t 2,890.561\t 4,079.555\r\n |||  | | + system.web!PerfCounters.IncrementCounter                                                                               \t  0.1\t1,188.994\t     1\t  0.0\t  0\t     0\t   0\t      0\t ____________________799999999995\t 2,890.561\t 4,079.555\r\n |||  | |  + system.web!CacheSingle.UpdateCache                                                                                    \t  0.1\t1,188.994\t     1\t  0.0\t  0\t     0\t   0\t      0\t ____________________799999999995\t 2,890.561\t 4,079.555\r\n |||  | |   + system.web!CacheInternal.DoInsert                                                                                    \t  0.1\t1,188.994\t     1\t  0.0\t  0\t     0\t   0\t      0\t ____________________799999999995\t 2,890.561\t 4,079.555\r\n |||  | |    + system.web!AspNetCache.Add                                                                                          \t  0.1\t1,188.994\t     1\t  0.0\t  0\t     0\t   0\t      0\t ____________________799999999995\t 2,890.561\t 4,079.555\r\n |||  | |     + system.web!Cache.Add                                                                                               \t  0.1\t1,188.994\t     1\t  0.0\t  0\t     0\t   0\t      0\t ____________________799999999995\t 2,890.561\t 4,079.555\r\n |||  | |      + System.Web.WebPages!BuildManagerWrapper.ExistsInPrecompiledSite                                                   \t  0.1\t1,188.994\t     1\t  0.0\t  0\t     0\t   0\t      0\t ____________________799999999995\t 2,890.561\t 4,079.555\r\n |||  | |       + System.Web.WebPages!VirtualPathFactoryManager.Exists                                                             \t  0.1\t1,188.994\t     1\t  0.0\t  0\t     0\t   0\t      0\t ____________________799999999995\t 2,890.561\t 4,079.555\r\n |||  | |        + System.Web.WebPages!DefaultDisplayMode.GetDisplayInfo                                                           \t  0.1\t1,188.994\t     1\t  0.0\t  0\t     0\t   0\t      0\t ____________________799999999995\t 2,890.561\t 4,079.555\r\n |||  | |         + System.Web.WebPages!DisplayModeProvider.GetDisplayInfoForVirtualPath                                           \t  0.1\t1,188.994\t     1\t  0.0\t  0\t     0\t   0\t      0\t ____________________799999999995\t 2,890.561\t 4,079.555\r\n |||  | |          + System.Web.WebPages!WebPageRoute.GetRouteLevelMatch                                                           \t  0.1\t1,188.994\t     1\t  0.0\t  0\t     0\t   0\t      0\t ____________________799999999995\t 2,890.561\t 4,079.555\r\n |||  | |           + System.Web.WebPages!WebPageRoute.MatchRequest                                                                \t  0.1\t1,188.994\t     1\t  0.0\t  0\t     0\t   0\t      0\t ____________________799999999995\t 2,890.561\t 4,079.555\r\n |||  | |            + System.Web.WebPages!WebPageRoute.DoPostResolveRequestCache                                                  \t  0.1\t1,188.994\t     1\t  0.0\t  0\t     0\t   0\t      0\t ____________________799999999995\t 2,890.561\t 4,079.555\r\n |||  | |             + system.web!System.Web.HttpApplication+SyncEventExecutionStep.System.Web.HttpApplication.IExecutionStep.Execute()\t  0.1\t1,188.994\t     1\t  0.0\t  0\t     0\t   0\t      0\t ____________________799999999995\t 2,890.561\t 4,079.555\r\n |||  | |              + system.web!System.Web.HttpApplication+\u003c\u003ec__DisplayClass285_0.\u003cExecuteStepImpl\u003eb__0()                      \t  0.1\t1,188.994\t     1\t  0.0\t  0\t     0\t   0\t      0\t ____________________799999999995\t 2,890.561\t 4,079.555\r\n |||  | |               + system.web!HttpApplication.ExecuteStepImpl                                                               \t  0.1\t1,188.994\t     1\t  0.0\t  0\t     0\t   0\t      0\t ____________________799999999995\t 2,890.561\t 4,079.555\r\n |||  | |                + system.web!HttpApplication.ExecuteStep                                                                  \t  0.1\t1,188.994\t     1\t  0.0\t  0\t     0\t   0\t      0\t ____________________799999999995\t 2,890.561\t 4,079.555\r\n |||  | |                 + system.web!System.Web.HttpApplication+PipelineStepManager.ResumeSteps(class System.Exception)          \t  0.1\t1,188.994\t     1\t  0.0\t  0\t     0\t   0\t      0\t ____________________799999999995\t 2,890.561\t 4,079.555\r\n |||  | |                  + system.web!HttpApplication.BeginProcessRequestNotification                                            \t  0.1\t1,188.994\t     1\t  0.0\t  0\t     0\t   0\t      0\t ____________________799999999995\t 2,890.561\t 4,079.555\r\n |||  | |                   + system.web!HttpRuntime.ProcessRequestNotificationPrivate                                             \t  0.1\t1,188.994\t     1\t  0.0\t  0\t     0\t   0\t      0\t ____________________799999999995\t 2,890.561\t 4,079.555\r\n |||  | |                    + system.web!PipelineRuntime.ProcessRequestNotificationHelper                                         \t  0.1\t1,188.994\t     1\t  0.0\t  0\t     0\t   0\t      0\t ____________________799999999995\t 2,890.561\t 4,079.555\r\n |||  | |                     + system.web!PipelineRuntime.ProcessRequestNotification                                              \t  0.1\t1,188.994\t     1\t  0.0\t  0\t     0\t   0\t      0\t ____________________799999999995\t 2,890.561\t 4,079.555\r\n |||  | |                      + system.web!dynamicClass.IL_STUB_ReversePInvoke(int64,int64,int64,int32)                           \t  0.1\t1,188.994\t     1\t  0.0\t  0\t     0\t   0\t      0\t ____________________799999999995\t 2,890.561\t 4,079.555\r\n |||  | |                       + clr!UMThunkStub                                                                                  \t  0.1\t1,188.994\t     1\t  0.0\t  0\t     0\t   0\t      0\t ____________________799999999995\t 2,890.561\t 4,079.555\r\n |||  | |                        + webengine4!W3_MGD_HANDLER::ProcessNotification                                                  \t  0.1\t1,188.994\t     1\t  0.0\t  0\t     0\t   0\t      0\t ____________________799999999995\t 2,890.561\t 4,079.555\r\n |||  | |                         + webengine4!W3_MGD_HANDLER::DoWork                                                              \t  0.1\t1,188.994\t     1\t  0.0\t  0\t     0\t   0\t      0\t ____________________799999999995\t 2,890.561\t 4,079.555\r\n |||  | |                          + webengine4!RequestDoWork                                                                      \t  0.1\t1,188.994\t     1\t  0.0\t  0\t     0\t   0\t      0\t ____________________799999999995\t 2,890.561\t 4,079.555\r\n |||  | |                           + webengine4!CMgdEngHttpModule::OnResolveRequestCache                                          \t  0.1\t1,188.994\t     1\t  0.0\t  0\t     0\t   0\t      0\t ____________________799999999995\t 2,890.561\t 4,079.555\r\n |||  | |                            + iiscore!?                                                                                   \t  0.1\t1,188.994\t     1\t  0.0\t  0\t     0\t   0\t      0\t ____________________799999999995\t 2,890.561\t 4,079.555\r\n |||  | |                             + webengine4!W3_MGD_HANDLER::IndicateCompletion                                              \t  0.1\t1,188.994\t     1\t  0.0\t  0\t     0\t   0\t      0\t ____________________799999999995\t 2,890.561\t 4,079.555\r\n |||  | |                              + webengine4!MgdIndicateCompletion                                                          \t  0.1\t1,188.994\t     1\t  0.0\t  0\t     0\t   0\t      0\t ____________________799999999995\t 2,890.561\t 4,079.555\r\n |||  | |                               + system.web!dynamicClass.IL_STUB_PInvoke(int,value class System.Web.RequestNotificationStatus\u0026)\t  0.1\t1,188.994\t     1\t  0.0\t  0\t     0\t   0\t      0\t ____________________799999999995\t 2,890.561\t 4,079.555\r\n |||  | |                                + system.web!PipelineRuntime.ProcessRequestNotificationHelper                             \t  0.1\t1,188.994\t     1\t  0.0\t  0\t     0\t   0\t      0\t ____________________799999999995\t 2,890.561\t 4,079.555\r\n |||  | |                                 + system.web!PipelineRuntime.ProcessRequestNotification                                  \t  0.1\t1,188.994\t     1\t  0.0\t  0\t     0\t   0\t      0\t ____________________799999999995\t 2,890.561\t 4,079.555\r\n |||  | |                                  + system.web!dynamicClass.IL_STUB_ReversePInvoke(int64,int64,int64,int32)               \t  0.1\t1,188.994\t     1\t  0.0\t  0\t     0\t   0\t      0\t ____________________799999999995\t 2,890.561\t 4,079.555\r\n |||  | |                                   + clr!UM2MThunk_WrapperHelper                                                          \t  0.1\t1,188.994\t     1\t  0.0\t  0\t     0\t   0\t      0\t ____________________799999999995\t 2,890.561\t 4,079.555\r\n |||  | |                                    + clr!UM2MThunk_Wrapper                                                               \t  0.1\t1,188.994\t     1\t  0.0\t  0\t     0\t   0\t      0\t ____________________799999999995\t 2,890.561\t 4,079.555\r\n |||  | |                                     + clr!Thread::DoADCallBack                                                           \t  0.1\t1,188.994\t     1\t  0.0\t  0\t     0\t   0\t      0\t ____________________799999999995\t 2,890.561\t 4,079.555\r\n |||  | |                                      + clr!UM2MDoADCallBack                                                              \t  0.1\t1,188.994\t     1\t  0.0\t  0\t     0\t   0\t      0\t ____________________799999999995\t 2,890.561\t 4,079.555\r\n |||  | |                                       + clr!UMThunkStub                                                                  \t  0.1\t1,188.994\t     1\t  0.0\t  0\t     0\t   0\t      0\t ____________________799999999995\t 2,890.561\t 4,079.555\r\n |||  | |                                        + webengine4!W3_MGD_HANDLER::ProcessNotification                                  \t  0.1\t1,188.994\t     1\t  0.0\t  0\t     0\t   0\t      0\t ____________________799999999995\t 2,890.561\t 4,079.555\r\n |||  | |                                         + webengine4!ProcessNotificationCallback                                         \t  0.1\t1,188.994\t     1\t  0.0\t  0\t     0\t   0\t      0\t ____________________799999999995\t 2,890.561\t 4,079.555\r\n |||  | |                                          + clr!UnManagedPerAppDomainTPCount::DispatchWorkItem                            \t  0.1\t1,188.994\t     1\t  0.0\t  0\t     0\t   0\t      0\t ____________________799999999995\t 2,890.561\t 4,079.555\r\n |||  | |                                           + clr!ThreadpoolMgr::ExecuteWorkRequest                                        \t  0.1\t1,188.994\t     1\t  0.0\t  0\t     0\t   0\t      0\t ____________________799999999995\t 2,890.561\t 4,079.555\r\n |||  | |                                            + clr!ThreadpoolMgr::WorkerThreadStart                                        \t  0.1\t1,188.994\t     1\t  0.0\t  0\t     0\t   0\t      0\t ____________________799999999995\t 2,890.561\t 4,079.555\r\n |||  | |                                             + clr!Thread::intermediateThreadProc                                         \t  0.1\t1,188.994\t     1\t  0.0\t  0\t     0\t   0\t      0\t ____________________799999999995\t 2,890.561\t 4,079.555\r\n |||  | |                                              + kernel32!BaseThreadInitThunk                                              \t  0.1\t1,188.994\t     1\t  0.0\t  0\t     0\t   0\t      0\t ____________________799999999995\t 2,890.561\t 4,079.555\r\n |||  | |                                               + ntdll!RtlUserThreadStart                                                 \t  0.1\t1,188.994\t     1\t  0.0\t  0\t     0\t   0\t      0\t ____________________799999999995\t 2,890.561\t 4,079.555\r\n |||  | |                                                + Thread (9684) CPU=178ms (.NET ThreadPool Worker)                        \t  0.1\t1,188.994\t     1\t  0.0\t  0\t     0\t   0\t      0\t ____________________799999999995\t 2,890.561\t 4,079.555\r\n |||  | |                                                 + Not In Requests                                                        \t  0.1\t1,188.994\t     1\t  0.0\t  0\t     0\t   0\t      0\t ____________________799999999995\t 2,890.561\t 4,079.555\r\n |||  | |                                                  + Process64 w3wp (16160) Args: -ap \"e\" -v \"v4.0\" -a \"\\\\.\\pipe\\iisipmc18cc5e0-6460-4204-9ab9-51ea11ccf50e\" -h \"D:\\DWASFiles\\Sites\\ent\\Config\\applicationhost.config\" -w \"D:\\DWASFiles\\Sites\\enusc\\Config\\rootweb.config\" -m 0\t  0.1\t1,188.994\t     1\t  0.0\t  0\t     0\t   0\t      0\t ____________________799999999995\t 2,890.561\t 4,079.555\r\n |||  | |                                                   + ROOT                                                                 \t  0.1\t1,188.994\t     1\t  0.0\t  0\t     0\t   0\t      0\t ____________________799999999995\t 2,890.561\t 4,079.555\r\n |||  | + clr!??invokeCompileMethod                                                                                                \t  0.0\t  133.616\t    16\t  0.0\t  0\t     0\t   0\t      0\t _________________0_____________6\t 2,593.134\t 4,079.509\r\n |||  | |+ clr!CallCompileMethodWithSEHWrapper                                                                                     \t  0.0\t  133.616\t    16\t  0.0\t  0\t     0\t   0\t      0\t _________________0_____________6\t 2,593.134\t 4,079.509\r\n |||  | | + clr!??UnsafeJitFunction                                                                                                \t  0.0\t  133.616\t    16\t  0.0\t  0\t     0\t   0\t      0\t _________________0_____________6\t 2,593.134\t 4,079.509\r\n |||  | |  + clr!MethodDesc::MakeJitWorker                                                                                         \t  0.0\t  133.616\t    16\t  0.0\t  0\t     0\t   0\t      0\t _________________0_____________6\t 2,593.134\t 4,079.509\r\n |||  | |   + clr!??MethodDesc::DoPrestub                                                                                          \t  0.0\t  133.616\t    16\t  0.0\t  0\t     0\t   0\t      0\t _________________0_____________6\t 2,593.134\t 4,079.509\r\n |||  | |    + clr!ReflectionInvocation::CompileMethod                                                                             \t  0.0\t  133.616\t    16\t  0.0\t  0\t     0\t   0\t      0\t _________________0_____________6\t 2,593.134\t 4,079.509\r\n |||  | |     + mscorlib.ni!DomainNeutralILStubClass.IL_STUB_ReversePInvoke(IntPtr, System.StubHelpers.NativeVariant)              \t  0.0\t  133.616\t    16\t  0.0\t  0\t     0\t   0\t      0\t _________________0_____________6\t 2,593.134\t 4,079.509\r\n |||  | |      + mscorlib.ni!DynamicMethod.CreateDelegate                                                                          \t  0.0\t  133.616\t    16\t  0.0\t  0\t     0\t   0\t      0\t _________________0_____________6\t 2,593.134\t 4,079.509\r\n |||  | |       + System.Core!LambdaCompiler.Compile                                                                               \t  0.0\t  133.616\t    16\t  0.0\t  0\t     0\t   0\t      0\t _________________0_____________6\t 2,593.134\t 4,079.509\r\n |||  | |        + system.data.linq!System.Data.Linq.SqlClient.Funcletizer+Localizer.MakeLocal(class System.Linq.Expressions.Expression)\t  0.0\t  108.654\t    13\t  0.0\t  0\t     0\t   0\t      0\t _________________0_____________5\t 2,593.134\t 4,079.509\r\n |||  | |        + EntityFramework!QueryParameterExpression.EvaluateParameter                                                      \t  0.0\t   17.341\t     2\t  0.0\t  0\t     0\t   0\t      0\t _________________0_____________0\t 2,597.296\t 4,079.503\r\n |||  | |        + EntityFramework!System.Data.Entity.Core.Objects.ELinq.Funcletizer+FuncletizingVisitor.CompileExpression(class System.Linq.Expressions.Expression)\t  0.0\t    7.621\t     1\t  0.0\t  0\t     0\t   0\t      0\t _________________0______________\t 2,597.670\t 2,605.291\r\n |||  | + clr!??CrstBase::Enter                                                                                                    \t  0.0\t   27.248\t     2\t  0.0\t  0\t     0\t   0\t      0\t _________________1_____________1\t 2,591.958\t 4,079.456\r\n |||  | + clr!??FinalizerThread::FinalizerThreadWorker                                                                             \t  0.0\t   11.332\t     1\t  0.0\t  0\t     0\t   0\t      0\t _____________1__________________\t 2,171.206\t 2,182.538\r\n |||  |  + clr!ManagedThreadBase_DispatchInner                                                                                     \t  0.0\t   11.332\t     1\t  0.0\t  0\t     0\t   0\t      0\t _____________1__________________\t 2,171.206\t 2,182.538\r\n |||  |   + clr!ManagedThreadBase_DispatchMiddle                                                                                   \t  0.0\t   11.332\t     1\t  0.0\t  0\t     0\t   0\t      0\t _____________1__________________\t 2,171.206\t 2,182.538\r\n |||  |    + clr!??ManagedThreadBase_DispatchOuter                                                                                 \t  0.0\t   11.332\t     1\t  0.0\t  0\t     0\t   0\t      0\t _____________1__________________\t 2,171.206\t 2,182.538\r\n |||  |     + clr!FinalizerThread::FinalizerThreadStart                                                                            \t  0.0\t   11.332\t     1\t  0.0\t  0\t     0\t   0\t      0\t _____________1__________________\t 2,171.206\t 2,182.538\r\n |||  |      + clr!Thread::intermediateThreadProc                                                                                  \t  0.0\t   11.332\t     1\t  0.0\t  0\t     0\t   0\t      0\t _____________1__________________\t 2,171.206\t 2,182.538\r\n |||  |       + kernel32!BaseThreadInitThunk                                                                                       \t  0.0\t   11.332\t     1\t  0.0\t  0\t     0\t   0\t      0\t _____________1__________________\t 2,171.206\t 2,182.538\r\n |||  |        + ntdll!RtlUserThreadStart                                                                                          \t  0.0\t   11.332\t     1\t  0.0\t  0\t     0\t   0\t      0\t _____________1__________________\t 2,171.206\t 2,182.538\r\n |||  |         + Thread (13340) CPU=168ms (.NET Finalizer Thread)                                                                 \t  0.0\t   11.332\t     1\t  0.0\t  0\t     0\t   0\t      0\t _____________1__________________\t 2,171.206\t 2,182.538\r\n |||  |          + Not In Requests                                                                                                 \t  0.0\t   11.332\t     1\t  0.0\t  0\t     0\t   0\t      0\t _____________1__________________\t 2,171.206\t 2,182.538\r\n |||  |           + Process64 w3wp (16160) Args: -ap \"entc\" -v \"v4.0\" -a \"\\\\.\\pipe\\iisipmc18cc5e0-6460-4204-9ab9-51ea11ccf50e\" -h \"D:\\DWASFiles\\Sites\\ent-c\\Config\\applicationhost.config\" -w \"D:\\DWASFiles\\Sites\\enprd-usc\\Config\\rootweb.config\" -m 0\t  0.0\t   11.332\t     1\t  0.0\t  0\t     0\t   0\t      0\t _____________1__________________\t 2,171.206\t 2,182.538\r\n |||  |            + ROOT                                                                                                          \t  0.0\t   11.332\t     1\t  0.0\t  0\t     0\t   0\t      0\t _____________1__________________\t 2,171.206\t 2,182.538\r\n |||  + clr!??ThreadSuspend::SuspendRuntime                                                                                        \t  0.1\t1,417.750\t    95\t  0.0\t  0\t     0\t   0\t      0\t ______________1993__799999999993\t 2,329.624\t 4,065.474\r\n |||  |+ clr!ThreadSuspend::SuspendEE                                                                                              \t  0.1\t1,417.750\t    95\t  0.0\t  0\t     0\t   0\t      0\t ______________1993__799999999993\t 2,329.624\t 4,065.474\r\n |||  | + clr!SVR::gc_heap::gc_thread_function                                                                                     \t  0.1\t1,417.750\t    95\t  0.0\t  0\t     0\t   0\t      0\t ______________1993__799999999993\t 2,329.624\t 4,065.474\r\n |||  |  + clr!SVR::gc_heap::gc_thread_stub                                                                                        \t  0.1\t1,417.750\t    95\t  0.0\t  0\t     0\t   0\t      0\t ______________1993__799999999993\t 2,329.624\t 4,065.474\r\n |||  |   + clr!\u003clambda_f4a83ef2357e8af94a7c50f2736987d6\u003e::\u003clambda_invoker_cdecl\u003e                                                  \t  0.1\t1,417.750\t    95\t  0.0\t  0\t     0\t   0\t      0\t ______________1993__799999999993\t 2,329.624\t 4,065.474\r\n |||  |    + kernel32!BaseThreadInitThunk                                                                                          \t  0.1\t1,417.750\t    95\t  0.0\t  0\t     0\t   0\t      0\t ______________1993__799999999993\t 2,329.624\t 4,065.474\r\n |||  |     + ntdll!RtlUserThreadStart                                                                                             \t  0.1\t1,417.750\t    95\t  0.0\t  0\t     0\t   0\t      0\t ______________1993__799999999993\t 2,329.624\t 4,065.474\r\n |||  |      + Thread (4128) CPU=2226ms (.NET Server GC Thread(0))                                                                 \t  0.1\t1,417.750\t    95\t  0.0\t  0\t     0\t   0\t      0\t ______________1993__799999999993\t 2,329.624\t 4,065.474\r\n |||  |       + Not In Requests                                                                                                    \t  0.1\t1,417.750\t    95\t  0.0\t  0\t     0\t   0\t      0\t ______________1993__799999999993\t 2,329.624\t 4,065.474\r\n |||  |        + Process64 w3wp (16160) Args: -ap \"en-usc\" -v \"v4.0\" -a \"\\\\.\\pipe\\iisipmc18cc5e0-6460-4204-9ab9-51ea11ccf50e\" -h \"D:\\DWASFile\" -w \"D:\\DWASFiles\\Sites\\e-usc\\Config\\rootweb.config\" -m 0\t  0.1\t1,417.750\t    95\t  0.0\t  0\t     0\t   0\t      0\t ______________1993__799999999993\t 2,329.624\t 4,065.474\r\n |||  |         + ROOT                                                                                                             \t  0.1\t1,417.750\t    95\t  0.0\t  0\t     0\t   0\t      0\t ______________1993__799999999993\t 2,329.624\t 4,065.474\r\n |||  + clr!FinalizerThread::WaitForFinalizerEvent                                                                                 \t  0.1\t1,401.616\t     1\t  0.0\t  0\t     0\t   0\t      0\t 99999999999993__________________\t   769.564\t 2,171.180\r\n |||  + clr!SVR::t_join::join                                                                                                      \t  0.0\t   75.131\t   107\t  0.0\t  0\t     0\t   0\t      0\t _____________o___1_____________1\t 2,159.629\t 4,079.372\r\n\r\n```",
                                           "updatedAt":  "2024-04-23T04:05:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57dp4H",
                                           "createdAt":  "2024-04-23T04:10:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODfKkXQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "marafiq",
                                                                               "createdAt":  "2024-04-23T04:15:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e In multiple threads I see RareDisablePreemptiveGC calls.\r\n\r\nIf you see a thread waiting in RareDisablePreemptiveGC, it means that there is GC running on some other thread and this thread is waiting for that GC to finish.",
                                           "updatedAt":  "2024-04-23T04:10:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57dwL8",
                                           "createdAt":  "2024-04-23T04:42:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "marafiq",
                                           "body":  "Thank you @jkotas  One of the GC thread has the below stack trace. is it blocked? Callstack seems very similar to https://github.com/dotnet/runtime/issues/67559\r\n```\r\nName                                                       \tInc %\t     Inc\tInc Ct\tExc %\t   Exc\tExc Ct\tFold\tFold Ct\t                             When\t     First\t      Last\r\n  + Thread (4128) CPU=2226ms (.NET Server GC Thread(0))    \t  0.2\t3,359.201\t   694\t  0.0\t     0\t     0\t   0\t      0\t 99999999999999A99A9999AA9A99A9A9\t   769.564\t 4,128.766\r\n  |+ ntdll!RtlUserThreadStart                              \t  0.2\t3,359.201\t   694\t  0.0\t     0\t     0\t   0\t      0\t 99999999999999A99A9999AA9A99A9A9\t   769.564\t 4,128.766\r\n  | + kernel32!BaseThreadInitThunk                         \t  0.2\t3,359.201\t   694\t  0.0\t     0\t     0\t   0\t      0\t 99999999999999A99A9999AA9A99A9A9\t   769.564\t 4,128.766\r\n  |  + clr!\u003clambda_f4a83ef2357e8af94a7c50f2736987d6\u003e::\u003clambda_invoker_cdecl\u003e\t  0.2\t3,359.201\t   694\t  0.0\t     0\t     0\t   0\t      0\t 99999999999999A99A9999AA9A99A9A9\t   769.564\t 4,128.766\r\n  |   + clr!SVR::gc_heap::gc_thread_stub                   \t  0.2\t3,359.201\t   694\t  0.0\t     0\t     0\t   0\t      0\t 99999999999999A99A9999AA9A99A9A9\t   769.564\t 4,128.766\r\n  |    + clr!SVR::gc_heap::gc_thread_function              \t  0.2\t3,359.201\t   694\t  0.0\t     0\t     0\t   0\t      0\t 99999999999999A99A9999AA9A99A9A9\t   769.564\t 4,128.766\r\n  |     + clr!CLREventBase::WaitEx                         \t  0.1\t1,871.570\t     7\t  0.0\t     0\t     0\t   0\t      0\t 999999999999978__5992__________4\t   769.564\t 4,128.766\r\n  |     |+ clr!CLREventWaitHelper                          \t  0.1\t1,871.570\t     7\t  0.0\t     0\t     0\t   0\t      0\t 999999999999978__5992__________4\t   769.564\t 4,128.766\r\n  |     | + clr!CLREventWaitHelper2                        \t  0.1\t1,871.570\t     7\t  0.0\t     0\t     0\t   0\t      0\t 999999999999978__5992__________4\t   769.564\t 4,128.766\r\n  |     |  + kernelbase!WaitForSingleObjectEx              \t  0.1\t1,871.570\t     7\t  0.0\t     0\t     0\t   0\t      0\t 999999999999978__5992__________4\t   769.564\t 4,128.766\r\n  |     |   + ntdll!NtWaitForSingleObject                  \t  0.1\t1,871.570\t     7\t  0.0\t     0\t     0\t   0\t      0\t 999999999999978__5992__________4\t   769.564\t 4,128.766\r\n  |     |    + ntoskrnl!?                                  \t  0.1\t1,871.570\t     7\t  0.0\t     0\t     0\t   0\t      0\t 999999999999978__5992__________4\t   769.564\t 4,128.766\r\n  |     |     + BLOCKED_TIME                               \t  0.1\t1,871.212\t     4\t  0.1\t1,871.212\t     4\t   0\t      0\t 999999999999978__5992__________4\t   769.564\t 4,128.766\r\n  |     |     + CPU_TIME                                   \t  0.0\t   0.358\t     3\t  0.0\t 0.358\t     3\t   0\t      0\t _____________o._____.___________\t 2,159.380\t 2,890.568\r\n  |     + clr!ThreadSuspend::SuspendEE                     \t  0.1\t1,438.634\t   591\t  0.0\t     0\t     0\t   0\t      0\t ______________1993__79AA9A99A9A3\t 2,329.428\t 4,065.707\r\n  |     |+ clr!??ThreadSuspend::SuspendRuntime             \t  0.1\t1,438.634\t   591\t  0.0\t     0\t     0\t   0\t      0\t ______________1993__79AA9A99A9A3\t 2,329.428\t 4,065.707\r\n  |     | + clr!CLREventBase::WaitEx                       \t  0.1\t1,421.426\t   191\t  0.0\t     0\t     0\t   0\t      0\t ______________1993__799999999993\t 2,329.624\t 4,065.707\r\n  |     | |+ clr!CLREventWaitHelper                        \t  0.1\t1,421.426\t   191\t  0.0\t     0\t     0\t   0\t      0\t ______________1993__799999999993\t 2,329.624\t 4,065.707\r\n  |     | | + clr!CLREventWaitHelper2                      \t  0.1\t1,421.426\t   191\t  0.0\t     0\t     0\t   0\t      0\t ______________1993__799999999993\t 2,329.624\t 4,065.707\r\n  |     | |  + kernelbase!WaitForSingleObjectEx            \t  0.1\t1,421.426\t   191\t  0.0\t     0\t     0\t   0\t      0\t ______________1993__799999999993\t 2,329.624\t 4,065.707\r\n  |     | |   + ntdll!NtWaitForSingleObject                \t  0.1\t1,421.426\t   191\t  0.0\t     0\t     0\t   0\t      0\t ______________1993__799999999993\t 2,329.624\t 4,065.707\r\n  |     | |    + ntoskrnl!?                                \t  0.1\t1,421.426\t   191\t  0.0\t     0\t     0\t   0\t      0\t ______________1993__799999999993\t 2,329.624\t 4,065.707\r\n  |     | |     + BLOCKED_TIME                             \t  0.1\t1,417.750\t    95\t  0.1\t1,417.750\t    95\t   0\t      0\t ______________1993__799999999993\t 2,329.624\t 4,065.474\r\n  |     | |     + CPU_TIME                                 \t  0.0\t   3.676\t    96\t  0.0\t 3.676\t    96\t   0\t      0\t ______________.ooo__oooooooooooo\t 2,339.995\t 4,065.707\r\n  |     | + clr!Thread::HandledJITCase                     \t  0.0\t  11.930\t   191\t  0.0\t     0\t     0\t   0\t      0\t ______________oooo__oo0ooooooooo\t 2,329.477\t 4,058.940\r\n  |     | |+ clr!Thread::GetSafelyRedirectableThreadContext\t  0.0\t  11.930\t   191\t  0.0\t     0\t     0\t   0\t      0\t ______________oooo__oo0ooooooooo\t 2,329.477\t 4,058.940\r\n  |     | | + clr!EEGetThreadContext                       \t  0.0\t  11.930\t   191\t  0.0\t     0\t     0\t   0\t      0\t ______________oooo__oo0ooooooooo\t 2,329.477\t 4,058.940\r\n  |     | |  + kernelbase!GetThreadContext                 \t  0.0\t  11.930\t   191\t  0.0\t     0\t     0\t   0\t      0\t ______________oooo__oo0ooooooooo\t 2,329.477\t 4,058.940\r\n  |     | |   + ntdll!NtGetContextThread                   \t  0.0\t  11.930\t   191\t  0.0\t     0\t     0\t   0\t      0\t ______________oooo__oo0ooooooooo\t 2,329.477\t 4,058.940\r\n  |     | |    + ntoskrnl!?                                \t  0.0\t  11.930\t   191\t  0.0\t     0\t     0\t   0\t      0\t ______________oooo__oo0ooooooooo\t 2,329.477\t 4,058.940\r\n  |     | |     + CPU_TIME                                 \t  0.0\t   9.206\t    97\t  0.0\t 9.206\t    97\t   0\t      0\t ______________oooo__oooooooooooo\t 2,329.500\t 4,058.940\r\n  |     | |     + BLOCKED_TIME                             \t  0.0\t   2.724\t    94\t  0.0\t 2.724\t    94\t   0\t      0\t ______________.oo.__oo0..o.oooo.\t 2,329.477\t 4,058.842\r\n  |     | + clr!Thread::SuspendThread                      \t  0.0\t   4.275\t   192\t  0.0\t     0\t     0\t   0\t      0\t ______________.ooo__oooooooooooo\t 2,329.428\t 4,058.816\r\n  |     | |+ kernelbase!GetThreadContext                   \t  0.0\t   4.255\t   191\t  0.0\t     0\t     0\t   0\t      0\t ______________.ooo__oooooooooooo\t 2,329.428\t 4,058.816\r\n  |     | ||+ ntdll!NtGetContextThread                     \t  0.0\t   4.255\t   191\t  0.0\t     0\t     0\t   0\t      0\t ______________.ooo__oooooooooooo\t 2,329.428\t 4,058.816\r\n  |     | || + ntoskrnl!?                                  \t  0.0\t   4.255\t   191\t  0.0\t     0\t     0\t   0\t      0\t ______________.ooo__oooooooooooo\t 2,329.428\t 4,058.816\r\n  |     | ||  + CPU_TIME                                   \t  0.0\t   2.449\t    97\t  0.0\t 2.449\t    97\t   0\t      0\t ______________.oo.__ooooooooooo.\t 2,329.457\t 4,058.816\r\n  |     | ||  + BLOCKED_TIME                               \t  0.0\t   1.806\t    94\t  0.0\t 1.806\t    94\t   0\t      0\t ______________..o.__.ooooo.oooo.\t 2,329.428\t 4,058.792\r\n  |     | |+ kernelbase!SuspendThread                      \t  0.0\t   0.020\t     1\t  0.0\t     0\t     0\t   0\t      0\t __________________________._____\t 3,590.022\t 3,590.042\r\n  |     | | + ntdll!NtSuspendThread                        \t  0.0\t   0.020\t     1\t  0.0\t     0\t     0\t   0\t      0\t __________________________._____\t 3,590.022\t 3,590.042\r\n  |     | |  + ntoskrnl!?                                  \t  0.0\t   0.020\t     1\t  0.0\t     0\t     0\t   0\t      0\t __________________________._____\t 3,590.022\t 3,590.042\r\n  |     | |   + CPU_TIME                                   \t  0.0\t   0.020\t     1\t  0.0\t 0.020\t     1\t   0\t      0\t __________________________._____\t 3,590.022\t 3,590.042\r\n  |     | + clr!Thread::ResumeThread                       \t  0.0\t   0.654\t    11\t  0.0\t     0\t     0\t   0\t      0\t ________________._____o_o__o__._\t 2,527.573\t 3,996.510\r\n  |     | |+ kernelbase!ResumeThread                       \t  0.0\t   0.654\t    11\t  0.0\t     0\t     0\t   0\t      0\t ________________._____o_o__o__._\t 2,527.573\t 3,996.510\r\n  |     | | + ntdll!NtResumeThread                         \t  0.0\t   0.654\t    11\t  0.0\t     0\t     0\t   0\t      0\t ________________._____o_o__o__._\t 2,527.573\t 3,996.510\r\n  |     | |  + ntoskrnl!?                                  \t  0.0\t   0.654\t    11\t  0.0\t     0\t     0\t   0\t      0\t ________________._____o_o__o__._\t 2,527.573\t 3,996.510\r\n  |     | |   + CPU_TIME                                   \t  0.0\t   0.566\t     6\t  0.0\t 0.566\t     6\t   0\t      0\t ________________._____o_o__o__._\t 2,527.586\t 3,996.510\r\n  |     | |   + BLOCKED_TIME                               \t  0.0\t   0.088\t     5\t  0.0\t 0.088\t     5\t   0\t      0\t ________________._____._.__.__._\t 2,527.573\t 3,996.418\r\n  |     | + clr!ThreadStore::GetAllThreadList              \t  0.0\t   0.350\t     6\t  0.0\t     0\t     0\t   0\t      0\t _______________._.________._..._\t 2,433.908\t 4,012.090\r\n  |     + clr!SVR::gc_heap::garbage_collect                \t  0.0\t  48.997\t    96\t  0.0\t     0\t     0\t   0\t      0\t _____________2___1_____________1\t 2,159.629\t 4,079.473\r\n  |      + clr!SVR::gc_heap::gc1                           \t  0.0\t  47.380\t    89\t  0.0\t     0\t     0\t   0\t      0\t _____________2___1_____________1\t 2,159.880\t 4,079.473\r\n  |      + clr!SVR::t_join::join                           \t  0.0\t   1.513\t     6\t  0.0\t     0\t     0\t   0\t      0\t _____________o___o_____________o\t 2,159.629\t 4,066.072\r\n  |      + clr!SVR::gc_heap::fix_allocation_contexts       \t  0.0\t   0.105\t     1\t  0.0\t     0\t     0\t   0\t      0\t _________________.______________\t 2,592.923\t 2,593.028\r\n\r\n```",
                                           "updatedAt":  "2024-04-23T04:42:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57qmys",
                                           "createdAt":  "2024-04-24T11:53:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Hi @marafiq! This repo (dotnet/runtime) is used to track issues with .NET 6+, though this issue is specific to .NET Framework.  Based off of the original description it sounded like there might be a product issue however it seems the ETW trace is normal and nothing unusual from a diagnostics perspective stood out.  Since this issue is now tracking answering questions on a specific performance analysis, we have decided to keep this issue open as other community members might benefit from the discussion and move it to the Future milestone.  Since there are no .NET 6+ product issues listed here we are not planning on active working on this issue.  If you are interested in paid Microsoft support, please see https://support.microsoft.com/contactus.  ",
                                           "updatedAt":  "2024-04-24T11:53:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57uv-4",
                                           "createdAt":  "2024-04-24T21:12:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "marafiq",
                                           "body":  "@tommcdon thanks. Keeping it open might help - yes, original trace ETW is not problem rather it was \u0027piohper\u0027 and some native calls, waiting for some clarifications there whenever folks find time. \n\nRegard 2nd trace from same app, as per my understanding GC itself seems to be blocked - so we will know who is blocking it. But I m waiting for the answer before making assumption. \n",
                                           "updatedAt":  "2024-04-24T21:12:08Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "Threads 99% of the Blocked causing slowdown  ",
        "labels":  [
                       "question",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/101257",
        "createdAt":  "2024-04-18T19:16:03Z",
        "number":  101257,
        "author":  "lambdageek",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-07T14:19:48Z",
        "body":  "Follow-up work item for https://github.com/dotnet/runtime/pull/100650.  In the above PR we made `cdac-build-tool` take a `CDAC_BASELINE(\"name\")` preprocessor macro to encode the baseline into the data blob in the object file that we scrape.\r\n\r\nThere\u0027s no need to do that, and it also introduces complications in future scenarios when there\u0027s multiple object files (produced by a C/C++ compiler and the NativeAOT compiler, for example): we now need all of them to agree about the baseline.\r\n\r\nInstead we should take the baseline name as an optional command line argument and update CMakeLists.txt to pass in an appropriate (possibly platform-specific) one.\r\n\r\nThis is relatively low-priority because the initial workflow is using an empty baseline.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOezPF1g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc57M8XW",
                                           "createdAt":  "2024-04-19T17:23:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-19T17:23:28Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[cdac-build-tool] Take baseline as a command line argument",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/102080",
        "createdAt":  "2024-05-10T14:11:27Z",
        "number":  102080,
        "author":  "lambdageek",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-23T21:05:02Z",
        "body":  "Related Roslyn issue: https://github.com/dotnet/roslyn/issues/73421\r\n\r\nThe `[UnsafeAccessorAttribute]` ([API Proposal](https://github.com/dotnet/runtime/issues/81741)) is used on `static extern` functions to instruct the .NET runtime to generate an accessor method to a type member that bypass the normal .NET visibility checks.\r\n\r\n```csharp\r\n   public class MyClass\r\n   {\r\n      private int _hidden;\r\n      ...\r\n    }\r\n\r\n    public static partial class AccessHelpers\r\n    {\r\n        [UnsafeAccessor(UnsafeAccessorKind.Field, Name=\"_hidden\")]\r\n        public static extern ref int GetHiddenField(MyClass c);    // runtime generated implementation\r\n    }\r\n\r\n    ...\r\n\r\n    public static MyClass DeserializeMyClass(string s)\r\n    {\r\n        MyClass x = new MyClass();\r\n        ref int hiddenFieldRef = ref AccessHelpers.GetHiddenField(x);\r\n        hiddenFieldRef = int.Parse(s);\r\n        return x;\r\n     }    \r\n}\r\n```\r\n\r\nWith `[UnsafeAccessor]` it becomes possible to use source-generated reflection-free serializers that can serialize and deserialize fields of user-defined classes.  For example, a user may add a new field `_hidden` to `MyClass` and the source generator will add a new accessor method to `AccessHelpers` and generate a method `DeserializeMyClass` that uses the access method to populate the hidden field.\r\n\r\nCurrently if the user adds a second private field `_hidden2` and the generator adds a new `static extern` method, EnC will report a rude edit:\r\n\r\n```\r\nerror ENC0025: Adding an extern method requires restarting the application.\r\n```\r\n\r\nNote that it should work with generics, too\r\n\r\n\r\nAfter Roslyn adds support for EnC deltas to include `static extern` methods, we need to validate that such deltas are processed appropriately by the .NET runtimes:\r\n\r\n- [ ] Validate/implement CoreCLR hot reload support for `static extern` methods\r\n- [ ] Validate/implement Mono hot reload support for `static extern` methods\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOfXTSYg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc59cySG",
                                           "createdAt":  "2024-05-10T14:21:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-10T14:21:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59dNJi",
                                           "createdAt":  "2024-05-10T15:28:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "Is this a .NET 9 ask?",
                                           "updatedAt":  "2024-05-10T15:28:30Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[hot reload] Validate / Implement support for adding `static extern` methods",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr",
                       "area-EnC-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/103235",
        "createdAt":  "2024-06-10T16:34:42Z",
        "number":  103235,
        "author":  "auott",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC61CAw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mjkkirschner",
                                            "createdAt":  "2024-06-12T03:23:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cwensley",
                                            "createdAt":  "2024-09-06T16:16:26Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-06-10T18:13:15Z",
        "body":  "### Description\n\nAttaching an interop (managed + native) debugger to an x64 .Net on an ARM64 Windows machine fails to initialize managed debugging. The debugger will never see managed breakpoints or managed debugging events.\n\n### Reproduction Steps\n\nOn an ARM64 Windows 11 machine, download and install the x64 dotnet runtime as well as Visual Studio (with managed and native workloads). Create a new .Net project (unit test, console) and add code such that the process can run and you can attempt to attach the debugger to it. Put a breakpoint in the code, launch without debugging, and then try to attach with interop debugging.\n\n### Expected behavior\n\nDebugger attaches and hits the breakpoint.\n\n### Actual behavior\n\nDebugger does not hit the breakpoint.\n\n### Regression?\n\nNo.\n\n### Known Workarounds\n\nNone.\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgK0t_A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6ArS38",
                                           "createdAt":  "2024-06-10T16:35:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-06-10T16:35:02Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Attaching an interop debugger to an x64 .Net on ARM64 fails to intiailize debugging",
        "labels":  [
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/103421",
        "createdAt":  "2024-06-13T15:14:12Z",
        "number":  103421,
        "author":  "vvuk",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-07T12:44:45Z",
        "body":  "On Windows, when coreclr loads R2R-built jit assemblies are loaded, symbols from them can be resolved using PDB files and everything works fine. On macOS (and probably linux, since they share the same code), `PreJIT` symbols are emitted into `jitdump` files with `PerfMapEnabled=1` (but not `perfmap` files, which is also odd).\r\n\r\nUsing eventpipe, `MethodLoad[Verbose]` events are not emitted for for R2R symbols. This is a little annoying, but it matches Windows behaviour. However, there are `R2RGetEntryPoint` events that are emitted with the compiler diagnostics keyword. These events have _almost_ all the info I need... except the method native code size. As-is, the data in these events gives roughly the same info as a basic symbol map. For every `R2RGetEntryPoint`, I could look up what native library is mapped at that address and add it to my in-memory symbol map, and then on library unload/process end take all the symbols and infer sizes based on next symbol/end-of-mapping. This is kind of a pain.\r\n\r\nI believe the size is available using the same approach that `PerfMap::LogPreCompiledMethod` uses:\r\n\r\n```\r\n    // Get information about the NGEN\u0027d method code.\r\n    EECodeInfo codeInfo(pCode);\r\n    _ASSERTE(codeInfo.IsValid());\r\n\r\n    IJitManager::MethodRegionInfo methodRegionInfo;\r\n    codeInfo.GetMethodRegionInfo(\u0026methodRegionInfo);\r\n```\r\n\r\nif this is true, are people open to a V1 of the `R2RGetEntryPoint` event that adds a code size? This would mean that the V0 event would no longer be emitted, so PerfView and others may be impacted, though I\u0027m not sure if they\u0027re doing anything specific with this event. \r\n\r\nR2RGetEntryPoint also doesn\u0027t include info about separate hot/cold precompiled code (there\u0027s only one method start address, so I assume only the hot address gets reported). Maybe a better approach would be adding a new event, `R2RMethodLoad`, that looks something like...\r\n\r\n```\r\n                        \u003cdata name=\"MethodID\" inType=\"win:UInt64\" outType=\"win:HexInt64\" /\u003e\r\n                        \u003cdata name=\"MethodNamespace\" inType=\"win:UnicodeString\" /\u003e\r\n                        \u003cdata name=\"MethodName\" inType=\"win:UnicodeString\" /\u003e\r\n                        \u003cdata name=\"MethodSignature\" inType=\"win:UnicodeString\" /\u003e\r\n                        \u003cdata name=\"MethodStartAddress\" inType=\"win:Pointer\" /\u003e\r\n                        \u003cdata name=\"MethodSize\" inType=\"win:UInt32\" /\u003e\r\n                        \u003cdata name=\"MethodColdStartAddress\" inType=\"win:Pointer\" /\u003e\r\n                        \u003cdata name=\"MethodColdSize\" inType=\"win:UInt32\" /\u003e\r\n                        \u003cdata name=\"ClrInstanceID\" inType=\"win:UInt16\" /\u003e\r\n```\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhY_agw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6BPqCw",
                                           "createdAt":  "2024-06-14T16:27:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vvuk",
                                           "body":  "\u003e I could look up what native library is mapped at that address \r\n\r\nAn update.. I can\u0027t do this. I thought there was an actual native library but there isn\u0027t; it looks like the r2r compiled code is just in the original assembly? There\u0027s no event that provides any mapping/memory region info that I can find. ",
                                           "updatedAt":  "2024-06-14T16:27:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6BPv_b",
                                           "createdAt":  "2024-06-14T16:39:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-06-14T16:39:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Bc2U2",
                                           "createdAt":  "2024-06-16T19:25:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@noahfalk @davmason ",
                                           "updatedAt":  "2024-06-16T19:25:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6B0ML2",
                                           "createdAt":  "2024-06-19T07:24:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davmason",
                                           "body":  "Adding @brianrob\r\n\r\nHi @vvuk - on non-windows platforms we use alternative ways to get the symbol information for R2R code. You should not have to introduce a new event to the runtime.\r\n\r\nThe [perfcollect tool](http://aka.ms/perfcollect) uses `crossgen /CreatePerfMap` to generate perfmaps from R2R images, and  following that example would be your best bet.",
                                           "updatedAt":  "2024-06-19T07:24:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6B2vWD",
                                           "createdAt":  "2024-06-19T12:43:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "@vvuk - I believe a typical way that ETW/EventPipe based profilers would access this data is via rundown events (https://github.com/dotnet/runtime/blob/main/src/coreclr/vm/eventtrace.cpp#L5091-L5117). The terminology is still confusingly labeled as NGen methods, but it is actually enumerating R2R methods on CoreCLR. The rundown events aren\u0027t documented much but all the event manifest info is in [ClrEtwAll.man](https://github.com/dotnet/runtime/blob/main/src/coreclr/vm/ClrEtwAll.man). You could look for the MethodDCEnd and MethodDCEndVerbose events on the rundown provider using the NGenRundownKeyword.\r\n\r\nThe approach David suggested does also work but you might find rundown events easier to work with. There are no external dependencies and the events should work uniformly on any platform where ETW/EventPipe is supported.",
                                           "updatedAt":  "2024-06-19T12:43:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6B6-nA",
                                           "createdAt":  "2024-06-20T03:01:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "brianrob",
                                           "body":  "@vvuk, can you share a bit more about the scenario?  Both @davmason and @noahfalk have mentioned options that could potentially work, but knowing a bit more about what you are trying to do would help me.",
                                           "updatedAt":  "2024-06-20T03:01:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6B_Xk8",
                                           "createdAt":  "2024-06-20T14:37:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vvuk",
                                           "body":  "\u003e You could look for the MethodDCEnd and MethodDCEndVerbose events on the rundown provider using the NGenRundownKeyword.\r\n\r\nAh ha! I was aware of the rundown provider (and am using it for some things) but I didn\u0027t consider pulling the method info from there. It looks like this should have what I need. I\u0027ll try this and will report/close if this is sufficient.\r\n\r\n\u003e @vvuk, can you share a bit more about the scenario? Both @davmason and @noahfalk have mentioned options that could potentially work, but knowing a bit more about what you are trying to do would help me.\r\n\r\nYep, working on building/improving CoreCLR support into an open-source profiler that can handle both native + managed profile data. The core profiling works, but I\u0027m working to add GC and other data on non-Windows and so am switching to eventpipe; I wanted to move everything to eventpipe instead of relying on jitdump/perfmap data so that I could support attach-to-process.",
                                           "updatedAt":  "2024-06-20T14:37:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CCc3z",
                                           "createdAt":  "2024-06-20T22:58:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "brianrob",
                                           "body":  "\u003e \u003e You could look for the MethodDCEnd and MethodDCEndVerbose events on the rundown provider using the \r\n\u003e Yep, working on building/improving CoreCLR support into an open-source profiler that can handle both native + managed profile data. The core profiling works, but I\u0027m working to add GC and other data on non-Windows and so am switching to eventpipe; I wanted to move everything to eventpipe instead of relying on jitdump/perfmap data so that I could support attach-to-process.\r\n\r\nGotcha, thanks.  Hopefully those rundown events will do what you want.  These are a historic artifact from before NGEN on .NET Framework could generate PDBs, and so they should act just like their JIT counterparts, assuming that they function properly for R2R code.",
                                           "updatedAt":  "2024-06-20T22:58:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CCibk",
                                           "createdAt":  "2024-06-20T23:19:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davmason",
                                           "body":  "I thought we had issues with R2R not giving the right rundown events and that\u0027s why we had the crossgen tool emit perfmap files in perfcollect. Is that issue solved now?",
                                           "updatedAt":  "2024-06-20T23:19:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CXrSR",
                                           "createdAt":  "2024-06-24T19:18:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vvuk",
                                           "body":  "\u003e You could look for the MethodDCEnd and MethodDCEndVerbose events on the rundown provider using the NGenRundownKeyword\r\n\r\nInteresting, testing this now and it seems to work. It\u0027s a bit awkward though -- these events don\u0027t get emitted until the end rundown, whereas profiling samples that contain addresses in the method regions would have happened before those events.\r\n\r\nSo in order to have the correct time range for when these method addresses are valid, I need to keep track of all module loads/unloads and their times, and then during the end rundown when I see a MethodDCEnd* event (... maybe only for methods with the R2R tier flag set?) add that method to my jit method map using the module load time. Doable, but if something happens and I don\u0027t get the end rundown (e.g. runtime crash) then all that data is lost.\r\n\r\nThere\u0027s already a NGEN keyword on the non-rundown provider; any reason to not generate MethodLoad events in the non-rundown provider for R2R methods if the NGEN keyword is enabled?",
                                           "updatedAt":  "2024-06-24T19:18:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CiSKs",
                                           "createdAt":  "2024-06-25T21:46:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "brianrob",
                                           "body":  "\u003e I thought we had issues with R2R not giving the right rundown events and that\u0027s why we had the crossgen tool emit perfmap files in perfcollect. Is that issue solved now?\r\n\r\nYou could be right, but I don\u0027t remember this being an issue.  The reason we don\u0027t usually use these events is because they are costly at trace time and we can capture the data from a PDB/equivalent cheaper after collection.",
                                           "updatedAt":  "2024-06-25T21:46:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CiScP",
                                           "createdAt":  "2024-06-25T21:47:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "brianrob",
                                           "body":  "\u003e \u003e You could look for the MethodDCEnd and MethodDCEndVerbose events on the rundown provider using the NGenRundownKeyword\r\n\u003e \r\n\u003e Interesting, testing this now and it seems to work. It\u0027s a bit awkward though -- these events don\u0027t get emitted until the end rundown, whereas profiling samples that contain addresses in the method regions would have happened before those events.\r\n\u003e \r\n\u003e So in order to have the correct time range for when these method addresses are valid, I need to keep track of all module loads/unloads and their times, and then during the end rundown when I see a MethodDCEnd* event (... maybe only for methods with the R2R tier flag set?) add that method to my jit method map using the module load time. Doable, but if something happens and I don\u0027t get the end rundown (e.g. runtime crash) then all that data is lost.\r\n\u003e \r\n\u003e There\u0027s already a NGEN keyword on the non-rundown provider; any reason to not generate MethodLoad events in the non-rundown provider for R2R methods if the NGEN keyword is enabled?\r\n\r\nYou\u0027ve got it.  That\u0027s exactly how this is supposed to work.  You can use the events from the public (non-rundown) provider, but they will only tell you what\u0027s occurring during the trace.  This is fine if you start profiling before the process launches.  If you start profiling after the process has started, you won\u0027t have complete state, and you\u0027ll need to do a rundown at the end to capture the full process state.",
                                           "updatedAt":  "2024-06-25T21:48:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CiY4q",
                                           "createdAt":  "2024-06-25T22:07:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "A couple alternatives if you find any of them more helpful @vvuk:\r\n- You can always create a 2nd trace running concurrently and end it immediately to induce rundown to happen at that point in time. Effectively you can get a snapshot of all methods whenever you want it as long as you are willing to pay the perf cost.\r\n- @brianrob - does PerfView track module loads/unloads or does it just blindly assume that any IP in a callstack that matches an IP enumerated at rundown is a match? Certainly its theoretically possible for module unload/load to recycle an IP but maybe this just doesn\u0027t happen in practice often enough for profilers to care about it?\r\n- Not a trivial undertaking, but if you want to load an in-proc profiler dll you also get access to [GetFunctionFromIP](https://learn.microsoft.com/en-us/dotnet/framework/unmanaged-api/profiling/icorprofilerinfo-getfunctionfromip-method) which can resolve a code IP to a method on demand.",
                                           "updatedAt":  "2024-06-25T22:07:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CidTV",
                                           "createdAt":  "2024-06-25T22:18:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vvuk",
                                           "body":  "\u003e You can always create a 2nd trace running concurrently and end it immediately to induce rundown to happen at that point in time\r\n\r\nAh interesting idea! Is there any reason that the rundown trace provider doesn\u0027t support a start rundown for all this vs. only end rundown? But this second trace approach would miss the case of a module being loaded during the trace that contains R2R code; still seems odd that that scenario is still only covered by an end rundown.\r\n\r\nGetFunctionFromIP is definitely too heavyweight, yeah.\r\n\r\nThanks all for your help -- it sounds like my best option is to for now use the end rundown data. This can probably get closed unless there are any enhancements that people would like to see; I\u0027d be happy to take a stab at anything that gets closer to \"just see R2R methods as part of normal trace stream\" :) ",
                                           "updatedAt":  "2024-06-25T22:18:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CijRP",
                                           "createdAt":  "2024-06-25T22:22:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODnIFTA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "noahfalk",
                                                                               "createdAt":  "2024-06-25T22:22:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "brianrob",
                                           "body":  "\u003e * @brianrob - does PerfView track module loads/unloads or does it just blindly assume that any IP in a callstack that matches an IP enumerated at rundown is a match? Certainly its theoretically possible for module unload/load to recycle an IP but maybe this just doesn\u0027t happen in practice often enough for profilers to care about it?\r\n\r\nPerfView and TraceEvent will both capture module loads/unloads and code loads/unloads along with timestamps to ensure that we resolve the right symbol at the right time in the trace.",
                                           "updatedAt":  "2024-06-25T22:22:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CiomP",
                                           "createdAt":  "2024-06-25T22:38:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "\u003e But this second trace approach would miss the case of a module being loaded during the trace that contains R2R code; still seems odd that that scenario is still only covered by an end rundown.\r\n\r\nI suspect the lack of those events was because the original NGEN format was optimized such that once the image was loaded, calls from A() to B() within the image can be a direct call assembly instruction from A to B. Without some kind of per-method fixup or loading occuring there wasn\u0027t a good place to insert an event callback indicating B is about to run for the first time. Enumerating every method in the module at module load time would have been possible, but probably not done because of the overhead. Its also possible folks didn\u0027t pursue it because they found it easy enough to treat NGEN images like native images and resolve the IPs using PDBs.\r\n\r\nI don\u0027t believe the new R2R format allows methods to run without first having a per-method loading step occur so now it presumably is possible to emit those events. If you felt motivated to look into further I\u0027m certainly open to it, but I can\u0027t promise I\u0027d have time to review anything or answer design questions until after .NET 9 feature complete deadline had already passed. Not trying to dissuade you, just wanted you to be fully warned :)",
                                           "updatedAt":  "2024-06-25T22:38:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CiqdC",
                                           "createdAt":  "2024-06-25T22:46:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "brianrob",
                                           "body":  "\u003e \u003e But this second trace approach would miss the case of a module being loaded during the trace that contains R2R code; still seems odd that that scenario is still only covered by an end rundown.\r\n\u003e \r\n\u003e I suspect the lack of those events was because the original NGEN format was optimized such that once the image was loaded, calls from A() to B() within the image can be a direct call assembly instruction from A to B. Without some kind of per-method fixup or loading occuring there wasn\u0027t a good place to insert an event callback indicating B is about to run for the first time. Enumerating every method in the module at module load time would have been possible, but probably not done because of the overhead. Its also possible folks didn\u0027t pursue it because they found it easy enough to treat NGEN images like native images and resolve the IPs using PDBs.\r\n\u003e \r\n\u003e I don\u0027t believe the new R2R format allows methods to run without first having a per-method loading step occur so now it presumably is possible to emit those events. If you felt motivated to look into further I\u0027m certainly open to it, but I can\u0027t promise I\u0027d have time to review anything or answer design questions until after .NET 9 feature complete deadline had already passed. Not trying to dissuade you, just wanted you to be fully warned :)\r\n\r\nAgree with @noahfalk here - this is likely an artifact of the original NGEN format.  NGEN rundown was really only used prior to .NET Framework v4.  .NET Framework v4 contained the ability to generate a PDB directly, and so we\u0027ve just considered it to be native code since then.\r\n\r\nIt is possible to enumerate all of the R2R methods in a module and determine which have been called, so you then just dump the data for those.  Those methods that were fixed up are said to have been \"restored\" and there is a method to check this.",
                                           "updatedAt":  "2024-06-25T22:46:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Fj9qD",
                                           "createdAt":  "2024-07-20T00:31:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vvuk",
                                           "body":  "Hmm. I\u0027m running into a problem with the data collected by `dotnet trace` when attaching to an already-running process and it seems to be a related issue to this. I\u0027m configuring tracing on OSX with:\r\n\r\n```\r\nMicrosoft-Windows-DotNETRuntime verbose keywords:\r\n  LOADER | JIT | NGEN | COMPILATION_DIAGNOSTIC | JIT_TO_NATIVE_MAP\r\nMicrosoft-Windows-DotNETRuntimeRundown verbose keywords:\r\n  LOADER | JIT | NGEN | RUNDOWN_START\r\n```\r\n\r\nThere\u0027s no start rundown at all (which I think is ultimately the main issue and possibly the most reasonable fix). For methods that have already been jit-compiled at the attach point, I see a rundown `MethodDCEnd` with its information. However, I have no module timestamp information -- the only thing I have is `ModuleDCEnd`, whose timestamp is the time of the event, not the time the module was loaded. And I get a `MethodDCEnd` for every method, even those that were jit-compiled during the trace (as expected). So I think the only way that I can do this correctly is to:\r\n\r\n1. Keep track of every `MethodLoad` (name + address + size) during the trace.\r\n2. When I get to the end rundown, for every MethodDCEnd, ignore it if I saw a MethodLoad with the same info\r\n3. If I didn\u0027t see a MethodLoad with the same info, then record the method as existing since the start of the trace\r\n\r\nThis is workable, but clunky. I also have no idea what would happen if a method that existed at the start of the trace was called/sampled, but then unloaded/overwritten by a newly jit compiled method due to the module being unloaded; I suspect that method\u0027s info would just be lost entirely right now.\r\n\r\nSo -- any objections to me implementing start rundown support in eventpipe, that emits `MethodDCStart`, for all known methods (including R2R I think -- I believe this matches Windows ETW, but I\u0027ll double check that), `ModuleDCStart`, etc? (Is there any reason why this wouldn\u0027t be as straightforward as triggering a start rundown in `ep.c:enable`?) I think this would clean all this up logically.\r\n\r\nThere\u0027s also a discrepancy right now that I think eventpipe always emits an end rundown, regardless if the end rundown keyword is set or not, so that\u0027ll probably need to remain for tool compatibility.\r\n\r\n\u003e If you felt motivated to look into further I\u0027m certainly open to it, but I can\u0027t promise I\u0027d have time to review anything or answer design questions until after .NET 9 feature complete deadline had already passed.\r\n\r\nNo worries at all; this is a bit background, and I should be able to do some local hacks if we need anything urgently.",
                                           "updatedAt":  "2024-07-20T00:31:02Z"
                                       }
                                   ],
                         "totalCount":  18
                     },
        "title":  "R2RGetEntryPoint ETW / eventpipe event missing a size",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/103443",
        "createdAt":  "2024-06-13T19:46:39Z",
        "number":  103443,
        "author":  "yegor-pelykh",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-06T16:48:02Z",
        "body":  "I\u0027m trying to get the mixed mode call stack inside my C++ DLL using the **Profiler API**.\r\n\r\nI looked at various examples of obtaining a call stack in open-source applications, but I didn\u0027t come across a single approach, and it seemed to me that none of them creates a complete single stack of managed and unmanaged calls, as I need.\r\n\r\nAfter reading [this article](https://learn.microsoft.com/en-us/previous-versions/dotnet/articles/bb264782(v=msdn.10)), I realized that using `DoStaskSnapshot` I can get all the managed frames as well as the unmanaged stack blocks among them. These blocks of unmanaged calls need to be expanded into multiple frames from one.\r\nBut then I had big problems.\r\n\r\n1) Firstly, the process of expanding a block into frames is unclear.\r\n2) I pass my thread context to the `DoStackSnapshot` function and set the `COR_PRF_SNAPSHOT_REGISTER_CONTEXT` flag. The article states that if I pass my context to the function, the stack collection is better, the topmost unmanaged block (newest) should come on top of the managed ones. But it doesn\u0027t come.\r\n3) Ok, since it doesn’t come, I decided to do some kind of walk through the unmanaged stack myself. I called `StackWalk64` in a loop and collected the entire stack of unmanaged IPs. Then, as I understand it, I need to go through all the unmanaged IPs from above in a row until I encounter the first managed IP (if I understand correctly). But here there is a problem here. How to find this first managed IP? I tried to call `GetFunctionFromIP` for each unmanaged IP, but not all stacks had at least one IP for which `GetFunctionFromIP` would return a managed function. Sometimes such an IP is found, sometimes not, it is very changeable. Although, if we look at the call stack of the Visual Studio, there are managed frames in it. And I’m also absolutely sure that there is. **I think this looks like a bug.**\r\n4) For some reason, in every call of callback `DoStackSnapshotCallback`  (let\u0027s say this is the name of the callback for `DoStackSnapshot`) I receive the same `context`. Is this correct at all? I thought that in each call there should be different registers, at least for `EIP`/`RIP`, `EBP`/`RBP`, `ESP`/`RSP`. If this is how it should be, what important information then do I need to store for each frame from this callback for further investigation? If for each frame I have the same information... Yes, there is also an `ip` parameter, but the articles seem to recommend not relying on it, in addition they say that it may even be `0`, which also doesn\u0027t give me a thorough understanding of what needs to be done with all this.\r\n\r\nIt is also important to mention some features of my case: I need to get the call stack **asynchronously**, **from hooked functions**.\r\n\r\nI saw application [code example that should build a mixed stack](https://www.codeproject.com/Articles/384514/Building-a-Mixed-Mode-Sampling-Profiler). But I haven\u0027t been able to get it to work properly, and looking at the code, it seems to me to be outdated, in which various pieces of code look like rough drafts put together. And I doubt the efficiency and correctness of the approaches in this code. I also looked at all the uses of `DoStackSnapshot` on GitHub, but I still couldn’t find a complete and unified approach on how to build such a stack.\r\n\r\nAs a result, all that I have succeeded in so far is to obtain a separate set of unmanaged IPs from `StackWalk64` (only a small part, the top one, of which resolves into symbolic information, and for the rest it is impossible to obtain even a module), and also to separately collect a set of managed frames and part of the unmanaged blocks (the topmost block doesn\u0027t come) from the `DoStackSnapshot`.\r\n\r\nCould you please help with this? There is almost no information about this on the internet.\r\nAlso, perhaps we will find some bugs in this.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOg8o0dA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6BJGQT",
                                           "createdAt":  "2024-06-13T19:47:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-06-13T19:47:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Bc2FD",
                                           "createdAt":  "2024-06-16T19:21:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@noahfalk @davmason ",
                                           "updatedAt":  "2024-06-16T19:21:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6B0Z_G",
                                           "createdAt":  "2024-06-19T07:50:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davmason",
                                           "body":  "Hi @yegor-pelykh,\r\n\r\nI will try my best to help but stack walking is a very complex subject and I do not necessarily have authoritative answers. I suspect you were unable to find a working example because not many people have authoritative answers either.\r\n\r\nThe first thing that comes to mind is that I suspect you will have better luck with `RtlUnwind` rather than using `StackWalk64` for unwinding native frames. This is what we have used in the runtime historically to unwind frames.\r\n\r\nSecondly, when you say that you receive the same context for each callback do you mean the values of all registers are the same or that the same pointer is passed? I would expect registers to have different values for different frames. If you can post examples it might help ",
                                           "updatedAt":  "2024-06-19T07:50:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6B0t6a",
                                           "createdAt":  "2024-06-19T08:29:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "yegor-pelykh",
                                           "body":  "Hi @davmason\r\nThank you for your response!\r\n\r\nI will try to separate an example project from my full project that would reproduce these problems and ambiguities. But this will take some time...\r\n\r\nRegarding the fact that this is a very complex subject, what do you mean by \"complex\"?\r\nThere are 2 cases:\r\n1) There is a clear understanding of how information from the profiler can be used to obtain a mixed stack, how the stack is structured in dotnet. In this case, the difficulty is only in possibly using a large set of code, several well-defined steps, to process all the information and put it together. That is, it is simply a question of the amount of code and time.\r\n2) There is no clear understanding of how the managed stack works, how it interacts with the unmanaged one. In this case, the subject is rly more complicated, because there are not even specific planned algorithms for how this can be done at all. But in this case, the question arises: if function `DoStackSnapshot` was made, then there should have been a clear idea of ​​how exactly to use it and how to supplement it in order to get a call stack. How could it be created without a clear understanding of its task and role in obtaining the stack and how it could be supplemented with other functions? Why couldn\u0027t \"profiler\u0027s team\" collaborate with other teams that are focused on the dotnet \"memory, functions\" area and how it is represented in the call stack to get the full picture? After all, it’s easier for you to do this than for ordinary developers unfamiliar with the depths of dotnet to guess.\r\n\r\nIt’s just that the easiest way is to find once and for all one way, one example, so that later you don’t have to answer the same questions from many others...",
                                           "updatedAt":  "2024-06-19T08:32:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6B-NBs",
                                           "createdAt":  "2024-06-20T12:37:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "yegor-pelykh",
                                           "body":  "To show my attempts and approach in practice, and to be on the same page, I created a repository with a separate solution:\r\nhttps://github.com/yegor-pelykh/MixedCallStackSample\r\nFeel free to pull and build it (Visual Studio 2022).\r\n\r\nPlease take a look at it and also pay special attention to places marked `TODO` (you can just search for `TODO`).\r\nThis is how problems are flagged.\r\n\r\n\r\n",
                                           "updatedAt":  "2024-06-20T12:37:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CD2Fc",
                                           "createdAt":  "2024-06-21T05:48:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "yegor-pelykh",
                                           "body":  "Please, @davmason, could you take a look at the code?",
                                           "updatedAt":  "2024-06-21T05:48:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CEA-t",
                                           "createdAt":  "2024-06-21T06:27:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davmason",
                                           "body":  "Hi @yegor-pelykh - I took a brief look at your code, it will be a lot easier for me to help you if you ask specific questions I can answer for you. As much as I would like to, I won\u0027t be able to make time to build and debug a full project and get back to you quickly.\r\n\r\nNothing immediately obvious jumps out as a problem from a brief look. I did notice that you are trying to walk the native frames after DoStackSnapshot returns - it would be safer to process the frames as they are reported to you. If you end up walking a stack of a different thread then the stack could be mutating after DoStackSnapshot returns. For your scenario you are walking the same thread as you are executing on so it won\u0027t be a problem, but if you try a different thread it would be.\r\n\r\nWhat results do you get from StackWalk64 on the native blocks?\r\n\r\n",
                                           "updatedAt":  "2024-06-21T06:27:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CEIYJ",
                                           "createdAt":  "2024-06-21T06:53:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "yegor-pelykh",
                                           "body":  "\u003e For your scenario you are walking the same thread as you are executing\r\n\r\nYou are right. I need to get the stack only from the currently running thread.\r\n\r\nWhen you have a chance to debug the code a little, to speed it up and not have to study the entire project completely, I\u0027d advise you to first look inside such functions:\r\n- `Interceptor::ProcessLoadLibrary`\r\n- `Interceptor::ProcessFreeLibrary`\r\n\r\nJust see what happens inside these functions, how the stack is created, and you won\u0027t have to learn all the code.\r\n\r\n\u003e What results do you get from StackWalk64 on the native blocks?\r\n\r\nI will try to remake the code as you advise, so that the native frames are collected inside the `DoStackSnapshotCallback` if a native block is encountered.\r\nBut! The first, and one of the main problems I have: **why every time method `DoStackSnapshotCallback` is called (in one call of `DoStackSnapshot`) I get the same context**?\r\nThis is wrong, am I right?\r\nThe context pointer is different, but the important registers in them are the same (and sometimes clearly incorrect, such as the value `Rip` = `128`).\r\nYou can see this problem for yourself.\r\nIn this case, a traversing the stack using a `StackWalk64` with this context will not be valid.\r\n",
                                           "updatedAt":  "2024-06-21T10:29:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CFlXR",
                                           "createdAt":  "2024-06-21T10:43:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "yegor-pelykh",
                                           "body":  "So, to make it clear what problems there are:\r\n1) Each time the `DoStackSnapshotCallback` is called, a context comes with the same registers. And often they are OBVIOUSLY wrong.\r\n2) When first passing through native frames BEFORE calling `DoStackSnapshot`, how to correctly find all the IPs and stop at the first managed frame in order to then call `DoStackSnapshot`? How to accurately determine the first managed frame?\r\n\r\nIf I\u0027ve provided too much work and information, could you please include anyone else in this discussion?",
                                           "updatedAt":  "2024-06-21T10:45:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CbYdZ",
                                           "createdAt":  "2024-06-25T07:49:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davmason",
                                           "body":  "Hi @yegor-pelykh,\r\n\r\nI was able to take another look today. I think the problems you are seeing with `CONTEXT` are because you have a typo in the cast here: https://github.com/yegor-pelykh/MixedCallStackSample/blob/40dba17576175ac3a8ac6eba45a582115dc86366/MixedCallStackSample.Client/CorProfiler.cpp#L875C22-L875C57\r\n\r\nIt should be `reinterpret_cast\u003cCONTEXT*\u003e` instead. Right now you are treating it as a reference and reading some bogus data due to the cast.\r\n\r\nFor the question of how to find the first managed frame, it should be sufficient to walk the native stack and call `GetFunctionFromIP` to see if the IP is managed or not. ",
                                           "updatedAt":  "2024-06-25T07:49:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Cf6j7",
                                           "createdAt":  "2024-06-25T16:26:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "yegor-pelykh",
                                           "body":  "\u003e It should be `reinterpret_cast\u003cCONTEXT*\u003e` instead. Right now you are treating it as a reference and reading some bogus data due to the cast.\r\n\r\nThank you very much for the tip! It really was my fault.\r\nNow this has been corrected and the question about the \"same context\" is discarded.\r\n\r\n\u003e For the question of how to find the first managed frame, it should be sufficient to walk the native stack and call `GetFunctionFromIP` to see if the IP is managed or not.\r\n\r\nIn my example it definitely doesn\u0027t work like that.\r\nTo show this, I\u0027ve now updated my [repository](https://github.com/yegor-pelykh/MixedCallStackSample).\r\n\r\nThere is a new method `GetNativeFrames` that is called before `DoStackSnapshot`.\r\nIt simply iterates through the `StackWalk64` calls, checking each frame to see if it is managed (using `GetFunctionFromIP`).\r\nIf it is not, the frame is added to the returned list of native frames, and if it is, then we break the iteration.\r\nAs a result, a list of native frames located above the first managed frame should be returned.\r\n\r\nBut for some reason, in almost all cases the [`nativeFrames`](https://github.com/yegor-pelykh/MixedCallStackSample/blob/da4e3fd1c7135fd366f3dbbaec9f24a17c05f8e5/MixedCallStackSample.Client/CorProfiler.cpp#L599C14-L599C26) collection is wrong.\r\nThe managed frame is often not encountered at all, allowing all iterations of `StackWalk64` to go through.\r\nThis is definitely wrong. And this is especially noticeable when the `Main` function of the profiled app has already been called, and we have a call stack with obvious managed frames (which can be seen in the CallStack window in Visual Studio).\r\n\r\nCould you please check the updated example?",
                                           "updatedAt":  "2024-06-25T16:38:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CiXpE",
                                           "createdAt":  "2024-06-25T22:03:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davmason",
                                           "body":  "I don\u0027t see anything obviously wrong with the call to `StackWalk64`, could you post some examples of threads with managed frames and what `StackWalk64` returns for them?\r\n\r\nIt should be easy to see what is going wrong by setting a breakpoint in you `GetMixedCallstack` function and comparing the stack trace in the debugger to what StackWalk64 returns",
                                           "updatedAt":  "2024-06-25T22:03:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CmUVX",
                                           "createdAt":  "2024-06-26T08:09:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "yegor-pelykh",
                                           "body":  "I don\u0027t think I\u0027ll make things much clearer if I just post the stack traces here, but I\u0027ll try:\r\n\r\n\u003cdetails\u003e\r\n  \u003csummary\u003eCall stack from Visual Studio\u003c/summary\u003e\r\n\r\n  ```txt\r\nMixedCallStackSample.Client.64.dll!MixedCallStackSampleClient::CorProfiler::GetMixedCallStack C++\r\nMixedCallStackSample.Client.64.dll!MixedCallStackSampleClient::Interceptor::ProcessLoadLibrary C++\r\nMixedCallStackSample.Client.64.dll!MixedCallStackSampleClient::Interceptor::OnLoadLibraryA C++\r\n[Managed to Native Transition]\t\r\nMixedCallStackSample.ClientTest.CLR.dll!MixedCallStackSample.ClientTest.CLR.Program.LoadTestLibrary C#\r\nMixedCallStackSample.ClientTest.CLR.dll!MixedCallStackSample.ClientTest.CLR.Program.TestInnerProc3 C#\r\nMixedCallStackSample.ClientTest.CLR.dll!MixedCallStackSample.ClientTest.CLR.Program.TestInnerProc2 C#\r\nMixedCallStackSample.ClientTest.CLR.dll!MixedCallStackSample.ClientTest.CLR.Program.TestInnerProc1 C#\r\nMixedCallStackSample.ClientTest.CLR.dll!MixedCallStackSample.ClientTest.CLR.Program.TestProcedureCallback C#\r\n[Native to Managed Transition]\t\r\nMixedCallStackSample.Client.64.dll!ManagedToNativeTestFunc C++\r\n[Managed to Native Transition]\t\r\nMixedCallStackSample.ClientTest.CLR.dll!MixedCallStackSample.ClientTest.CLR.Program.TestProcedure C#\r\nMixedCallStackSample.ClientTest.CLR.dll!MixedCallStackSample.ClientTest.CLR.Program.Main C#\r\n[Native to Managed Transition]\t\r\n[Inline Frame] hostpolicy.dll!coreclr_t::execute_assembly C++\r\nhostpolicy.dll!run_app_for_context C++\r\nhostpolicy.dll!run_app C++\r\nhostpolicy.dll!corehost_main C++\r\nhostfxr.dll!execute_app C++\r\nhostfxr.dll!`anonymous namespace\u0027::read_config_and_execute C++\r\nhostfxr.dll!fx_muxer_t::handle_exec_host_command C++\r\nhostfxr.dll!fx_muxer_t::execute C++\r\nhostfxr.dll!hostfxr_main_startupinfo C++\r\nMixedCallStackSample.ClientTest.CLR.exe!exe_start C++\r\nMixedCallStackSample.ClientTest.CLR.exe!wmain C++\r\n[Inline Frame] MixedCallStackSample.ClientTest.CLR.exe!invoke_main C++\r\nMixedCallStackSample.ClientTest.CLR.exe!__scrt_common_main_seh C++\r\nkernel32.dll!BaseThreadInitThunk Unknown\r\nntdll.dll!RtlUserThreadStart() Unknown\r\n  ```\r\n\u003c/details\u003e\r\n\r\n\u003cdetails\u003e\r\n  \u003csummary\u003eCall stack from StackWalk64 before `DoStackSnapshot` call\u003c/summary\u003e\r\n\r\n  ```txt\r\n[0] 0x00007ffbccde6d8d {MixedCallStackSample.Client.64.dll!MixedCallStackSampleClient::Interceptor::ProcessLoadLibrary(const ATL::CStringT\u003cwchar_t,ATL::StrTraitATL\u003cwchar_t,ATL::ChTraitsCRT\u003cwchar_t\u003e\u003e\u003e \u0026 libFileName), Line 48} void *\r\n[1] 0x00007ffbccde675b {MixedCallStackSample.Client.64.dll!MixedCallStackSampleClient::Interceptor::OnLoadLibraryA(const char * libFileName), Line 72} void *\r\n[2] 0x00007ffa8b1d77f8 void *\r\n[3] 0x00000067eb3fe4f0 void *\r\n[4] 0x00007ffa8b1d772d void *\r\n[5] 0x00007ffa8b280238 void *\r\n[6] 0x00007ffa8b272c28 void *\r\n[7] 0x642e323372657375 void *\r\n[8] 0x00007ffa00006c6c void *\r\n[9] 0x00000067eb3fe4e0 void *\r\n[10] 0x000028d9c4aa03b9 void *\r\n[11] 0x00007ffaeafca648 {coreclr.dll!void  *vtable_InlinedCallFrame} void *\r\n[12] 0x00000067eb3fe8d0 void *\r\n[13] 0x00007ffa8b2800c0 void *\r\n[14] 0x00007ffa8b2800c0 void *\r\n[15] 0x00000067eb3fe4e0 void *\r\n[16] 0x00007ffa8b1d77f8 void *\r\n[17] 0x00000067eb3fe500 void *\r\n  ```\r\n\u003c/details\u003e\r\n\r\nHere you can see that the stack from Visual Studio is correct.\r\nBut the stack of collected unmanaged frames from `StackWalk64` is clearly incorrect. Looks just like garbage in memory. Most of the functions, except the first two from my DLL, are not recognized as normal native functions, but at the same time, none of these addresses are recognized as managed by `GetFunctionFromIP` call.\r\nThe fact is that even when the stack clearly contains managed frames, NO ONE address returned in the `StackWalk64` call loop is recognized as managed, after which the loop ends because `StackWalk64` returns `FALSE`.\r\nThis is clearly wrong, isn\u0027t it?\r\n\r\nI think it would be better for you to debug for yourself. This would give you more information.\r\nIt\u0027s easy to debug. All launch parameters are configured correctly.\r\nYou just need to set the breakpoint to `GetMixedCallstack` function and start debugging with project `MixedCallStackSample.ClientTest.CLR` as the starting one.",
                                           "updatedAt":  "2024-06-26T08:09:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Cpw0d",
                                           "createdAt":  "2024-06-26T15:23:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "yegor-pelykh",
                                           "body":  "I came up with a way to demonstrate incorrect operation.\r\n\r\n1) Pull the last [repository](https://github.com/yegor-pelykh/MixedCallStackSample)\r\n2) Set breakpoint to the `CorProfiler.cpp` line 630 (`if (SUCCEEDED(result)) ...`)\r\n3) Start debugging and reach the set breakpoint for the first time\r\n4) Add to Visual Studio Watch window these two items:\r\n    * `(*stackFrames)[0].AddrPC` (shows the first managed frame from `DoStackSnapshot`)\r\n    * `firstManagedIP` (shows the first managed frame received by the initial iterating with `StackWalk64` before calling `DoStackSnapshot`)\r\n5) Click \"Continue\" debugging again and again to see different cases of getting the callstack. We are interested in cases where there are managed frames on the stack in Visual Studio.\r\n6) When we see cases with managed frames, we can see that there are only very rare cases have `firstManagedIP` == `(*stackFrames)[0].AddrPC` (in other words, the first managed frame obtained from `StackWalk64` is also the first managed frame from the `DoStackSnapshot`).\r\n**In most cases, the first managed frame is not found at all using StackWalk64 (`firstManagedIP` is equal to `0`) or this frame doesn\u0027t equal to the first managed frame from `DoStackSnapshot` (`(*stackFrames)[0].AddrPC`).**\r\n\r\nSomething is definitely wrong.\r\n\r\nI really hope that I managed to explain this clearly now.",
                                           "updatedAt":  "2024-06-26T15:23:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DFk-t",
                                           "createdAt":  "2024-07-01T05:37:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davmason",
                                           "body":  "I think a good next step here is to use the attached debugger and figure out what `StackWalk64` is returning so we can answer those questions better.\r\n\r\nUsing [SOS](https://learn.microsoft.com/en-us/dotnet/framework/tools/sos-dll-sos-debugging-extension) and Windbg together you would be able to verify what each frame is, the `ln` command lists any symbols near the specified address, and the `!ip2md` SOS command will tell you if it is a managed IP or not. \r\n\r\nOnce we have the details on what `StackWalk64` is doing then I can give you better advice",
                                           "updatedAt":  "2024-07-01T05:37:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Dbave",
                                           "createdAt":  "2024-07-03T03:25:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Hello @yegor-pelykh!  My guess is that `StackWalk64` is not correctly walking the stack as it is starting from a point on the stack that which isn\u0027t easily traversed.   Since the intent of `DoStackSnapshot` is to not only return a *managed* stack frames, but will also notify the profiler where unmanaged frames start in between groups of managed stack frames.  The unmanaged portions starting at the thread context `StackSnapshotCallback` provides when `funcId` is set to `0` (as suggested in [this article](https://learn.microsoft.com/en-us/previous-versions/dotnet/articles/bb264782(v=msdn.10))).  It will provide the thread context which can be used as a \"seed\" to walk the unmanaged frame chain.  Note there may be multiple unmanaged frames \"sandwiched\" in between groups of managed frames, so the unmanaged stack chain can be terminated as soon as a managed frame is reached (verified using `ICorProfilerInfo::GetFunctionFromIP`).  It seems @davmason already identified the source of the problem with DoStackSnapshot, and so now we will leave it to you to walk the unmanaged frames.  If further assistance is needed on this, please feel free to contact us or consider paid support options through Microsoft Support - https://support.microsoft.com.  ",
                                           "updatedAt":  "2024-07-03T03:25:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Db_ss",
                                           "createdAt":  "2024-07-03T05:55:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "yegor-pelykh",
                                           "body":  "@tommcdon Thanks for the clarification, but still, I think closing this thread is a bit hasty because I didn\u0027t just ask a question about how it should work, I said it doesn\u0027t work in an obvious and correct way, I\u0027m pretty sure there\u0027s a bug as well.\r\nI was discussing more the problem that bypassing unmanaged frames did not fit in with what `DoStackSnapshot` returns, and not that I don’t know basic info about how to do that from articles. And I expected that you, on your side, would look and investigate this problem. If you say that the problem is in `StackWalk64`, then the same problem exists when using `CaptureStackBackTrace`. What then is not a problem, what would work normally in combination with `DoStackSnapshot` and `GetFunctionFromIP`, could you please tell me?\r\nMoreover, after @davmason last suggestion to look at this in WinDbg, I did it and was surprised that not only this problem remained, but also the results returned by the `DoStackSnapshot` itself didn\u0027t match the stack from WinDbg. But now I don’t have the ability to discuss this with you, although there is clearly something wrong there.\r\nI\u0027m sorry that you don\u0027t want to support the functionality that people use. Honestly, I was hoping for other support level from Microsoft, whose products are used by the whole world.",
                                           "updatedAt":  "2024-07-03T05:59:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Di8K4",
                                           "createdAt":  "2024-07-03T18:44:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Hello @yegor-pelykh!  \r\n\r\n\u003e\u003e @tommcdon Thanks for the clarification, but still, I think closing this thread is a bit hasty because I didn\u0027t just ask a question about how it should work, I said it doesn\u0027t work in an obvious and correct way, I\u0027m pretty sure there\u0027s a bug as well.\r\n\u003e But now I don’t have the ability to discuss this with you, although there is clearly something wrong there.\r\n\r\nThanks for the quick response - I\u0027ll re-activate the issue.  I suggest providing technical details on what DoStackSnapshot issues you are uncovering.  \r\n\r\n\r\n",
                                           "updatedAt":  "2024-07-03T18:44:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DyjR0",
                                           "createdAt":  "2024-07-05T15:26:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "yegor-pelykh",
                                           "body":  "Thanks @tommcdon for understanding.\r\n\r\nI changed the approach to obtain a native stack, and instead of `StackWalk64` I use walking by `EBP` (32 bit process) and `RtlVirtualUnwind` (64 bit process).\r\n**Those problems are solved.**\r\nNow there is always at least one managed frame on the stack (when it should be).\r\nBut!\r\n\r\nThe problem now is not with the `DoStackSnapshot` itself, but with something else, definitely related to the CLR.\r\nI’ll say right away that in order to fully understand this, you need to see it yourself by running the [above-mentioned project](https://github.com/yegor-pelykh/MixedCallStackSample) for debugging.\r\nI’ll also clarify that the problem is relevant ONLY if we run the project in **x64 / AnyCPU** mode (that is, a 64-bit dll is loaded and we look at the 64-bit stack).\r\nProblem workflow:\r\n1) Set the breakpoint on `CorProfiler.cpp`, line `612` (`if (SUCCEEDED(result)) ...`)\r\n2) Add `nativeFrames` variable to Watch window\r\n3) Press F5 at the above breakpoint to stop at it again and again until the application\u0027s `Main` procedure is loaded and **variable `nativeFrames` contains a list of 3 frames, the last of which looks in the debugger as a pointer with no symbolic information**.\r\n\r\nThis third frame is a problem itself.\r\nAs far as I understand, this frame refers to **ILStub**, but I’m not sure.\r\n\r\nMy questions regarding this issue are:\r\n1) Why is it impossible to obtain not only symbolic information at this address, but even the module to which the pointer belongs? And there is NO module in the list of modules loaded into the process within which this pointer is located. How can I get the module of this address and the symbolic information on it? By the way, WinDbg and the Visual Studio also don\u0027t see the symbols for this frame.\r\n2) If this address is passed to `GetFunctionFromIP`, then it says that this is **NOT** a managed function. But if I try to check this third frame in WinDbg with command `!ip2md`, then the command says that this is a managed function and refers to the ILStub. Is this a bug with `GetFunctionFromIP`?\r\n\r\nCould you please help with these questions?\r\n\r\nI understand that my questions are not very simple, but they cannot just be told and shown, you have to see it for yourself.\r\n\r\n![scrennshot](https://github.com/dotnet/runtime/assets/21262076/bc5d66ef-fb90-4538-aedd-11775c961184)",
                                           "updatedAt":  "2024-07-06T16:48:02Z"
                                       }
                                   ],
                         "totalCount":  19
                     },
        "title":  "Can\u0027t collect the mixed mode call stack due to ambiguity of Profiler API",
        "labels":  [
                       "question",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/104413",
        "createdAt":  "2024-07-04T01:48:44Z",
        "number":  104413,
        "author":  "cshung",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-09T09:19:44Z",
        "body":  "### Description\n\nGDB is outputting this error when debugging hello world.\r\n\r\n```\r\n/build/gdb-Dh0pdX/gdb-12.1/gdb/jit.c:1252: internal-error: jit_event_handler: Assertion `jiter-\u003ejiter_data != nullptr\u0027 failed.\r\n```\r\n\n\n### Reproduction Steps\n\n- Build the CoreCLR using `FEATURE_GDBGIT` and `FEATURE_GDB_SYMTAB`\r\n- Run a HelloWorld program using this CoreCLR under gdb \r\n\n\n### Expected behavior\n\nWe should be able to debug the application, looking at managed call stacks\n\n### Actual behavior\n\nGDB reported an error like this and quit\r\n```\r\n/build/gdb-Dh0pdX/gdb-12.1/gdb/jit.c:1252: internal-error: jit_event_handler: Assertion `jiter-\u003ejiter_data != nullptr\u0027 failed.\r\n```\n\n### Regression?\n\nLikely, presumably it used to be working? But I have no idea when is the last known good.\n\n### Known Workarounds\n\nNo, if I need to debug using GDB, there is no way around this as far as I know. Of course I can use a different debugger.\n\n### Configuration\n\nWSL, x64, on this commit 6b3f0f851da69c8c9f5c4df578d4b98fb4138a57\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhCa_8Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6DmTIX",
                                           "createdAt":  "2024-07-04T01:49:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-04T01:49:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6D_bVO",
                                           "createdAt":  "2024-07-08T15:26:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@cshung this stuff was added by Samsung folks long time ago for their internal needs, I am not sure if it is still in use. We never test it.",
                                           "updatedAt":  "2024-07-08T15:26:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6EDdb-",
                                           "createdAt":  "2024-07-08T23:10:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "@kbaladurin",
                                           "updatedAt":  "2024-07-08T23:10:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6EJr_x",
                                           "createdAt":  "2024-07-09T09:19:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kbaladurin",
                                           "body":  "We used gdbjit mainly with lldb, so it can not work properly with gdb (although at some point of time it worked if I remember correctly).\r\n\r\ncc @gbalykov ",
                                           "updatedAt":  "2024-07-09T09:19:42Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "/build/gdb-Dh0pdX/gdb-12.1/gdb/jit.c:1252: internal-error: jit_event_handler: Assertion `jiter-\u003ejiter_data != nullptr\u0027 failed.",
        "labels":  [
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/104424",
        "createdAt":  "2024-07-04T10:48:05Z",
        "number":  104424,
        "author":  "rmannibucau",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-16T18:12:15Z",
        "body":  "Hi,\r\n\r\nI understand that debug mode adds a lot of helpers/tools during debugging but the experience is really bad compared to the standard run mode (a simple example is to run concurrently 10kthreads and see the time it takes to reach the 10k).\r\n\r\nI think there could be a default in between mode where the debug additions are not enabled until used.\r\n\r\nThe goal is to have a debug experience which is close in terms of behavior/perf to the release mode but be able to enable more advanced features when needed (for example is a breakpoint is reached, the thread stack become available but if not all the threading debugging is not enabled except if some toggle - env var for ex - is set).\r\n\r\nThe test I did (10kthreads) makes it looking like the `new Thread(...).Start()` are throttled - in `create_thread` -  in debug mode (tested in vscode) whereas it is not visible in standard run mode.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhQJOSA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6DpbIZ",
                                           "createdAt":  "2024-07-04T10:48:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-04T10:48:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DqMqE",
                                           "createdAt":  "2024-07-04T12:38:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "\u003e in debug mode (tested in vscode)\r\n\r\nIt\u0027s because when the *debugger* is attached, it continuously interacts with the application to collect traces and handle events.\r\n\r\nIf you launch in Debug mode *without attaching debugger*, for example launching via console, you might see very different performance.\r\n\r\n\u003e be able to enable more advanced features when needed\r\n\r\nIt\u0027s actually up to the debugger. When the debugger is attached, it\u0027s already enabling some features.",
                                           "updatedAt":  "2024-07-04T12:38:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Dqd3n",
                                           "createdAt":  "2024-07-04T13:09:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rmannibucau",
                                           "body":  "@huoyaoyuan yes, I have to admit I\u0027m not sure the issue is in vscode (for my case) or what the runtime provides in terms of what can be enabled/disabled but I didn\u0027t find how to tune the debugger to collect less by default, this is why I reported there but if it is there we can close this issue.",
                                           "updatedAt":  "2024-07-04T13:09:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6EOq4L",
                                           "createdAt":  "2024-07-09T19:02:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikelle-rogers",
                                           "body":  "Possible duplicate to https://github.com/dotnet/runtime/issues/38736, which was fixed for .NET 9 preview 5. @rmannibucau, would you please install .NET 9 preview 5 and see if the problem persists? Here is the website to install .NET 9: https://dotnet.microsoft.com/en-us/download/dotnet/9.0",
                                           "updatedAt":  "2024-07-09T19:02:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6EPKwB",
                                           "createdAt":  "2024-07-09T19:54:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rmannibucau",
                                           "body":  "Hi @mikelle-rogers , tested `9.0.0-preview.6.24327.7` and runs just hang - on the Start() line, here is my main:\r\n\r\n```\r\nvar watcher = new Stopwatch();\r\nwatcher.Start();\r\nvar all = new Thread[10_000];\r\nfor (int i = 0; i \u003c all.Length; i++)\r\n{\r\n    all[i] = new Thread(() =\u003e { });\r\n    all[i].Start();\r\n}\r\nfor (int i = 0; i \u003c all.Length; i++)\r\n{\r\n    all[i].Join();\r\n}\r\nwatcher.Stop();\r\nConsole.WriteLine($\"done in {watcher.ElapsedMilliseconds}ms\");\r\n\r\n```\r\n\r\nI\u0027m still on linux (latest ubuntu) using vscode (from snap).",
                                           "updatedAt":  "2024-07-09T19:54:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6EPkDC",
                                           "createdAt":  "2024-07-09T20:28:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "This may also be related to https://github.com/dotnet/runtime/issues/11466",
                                           "updatedAt":  "2024-07-09T20:28:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ETvfr",
                                           "createdAt":  "2024-07-10T07:33:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rmannibucau",
                                           "body":  "Just let me know if I can test a preview again in the coming week (then it will be holidays there ;)).",
                                           "updatedAt":  "2024-07-10T07:33:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FAk5I",
                                           "createdAt":  "2024-07-16T18:12:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikelle-rogers",
                                           "body":  "Thank you for sending in this suggestion! After careful consideration, we do not plan to action this particular item in this release. We will continue to evaluate it for future releases. Ideally, we would like to fix every issue and implement every idea people submit. Realistically, we cannot address every item. ",
                                           "updatedAt":  "2024-07-16T18:12:13Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "Dev/Debug mode experience",
        "labels":  [
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/104425",
        "createdAt":  "2024-07-04T10:52:32Z",
        "number":  104425,
        "author":  "rmannibucau",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-09T18:54:31Z",
        "body":  "### Background and motivation\n\nGetting a live thread dump is a common and very interesting way to start investigating perf issues but using `dotnet-dump` is too heavy and not \"live\" enough (you need to get a dump then open the dump).\n\n### API Proposal\n\nwiring the `-3` signal on the dotnet process and ensure the process catch this signal and prints the thread dump (all actual OS threads+their stacks) in the `Console`.\n\n### API Usage\n\n`kill -3 $pid`\n\n### Alternative Designs\n\nThere are  a lot of other possibilities but they the key is to be:\r\n\r\n* built-in (no setup to do, no need to setup opentelemetry for ex)\r\n* fast (low/acceptable runtime overhead) and immediate feedback (Console.Write)\r\n* doing on an already started process (my process is stucked after 1 running day for ex)\r\n\n\n### Risks\n\nTo day `kill -3` kills the process so maybe another signal can be needed.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhDpxzw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Dpc6X",
                                           "createdAt":  "2024-07-04T10:52:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-04T10:52:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DqIOe",
                                           "createdAt":  "2024-07-04T12:30:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "As far as I can search, `kill -3`(`SIGQUIT`) means *terminate with core dump*. It isn\u0027t meant to be a live option that doesn\u0027t interrupt the process. Printing stack traces of threads seems to be a JVM-specific behavior.\r\n\r\n\u003e Getting a live thread dump is a common and very interesting way to start investigating perf issues\r\n\r\nI can\u0027t understand how can it be applied to *performance* issues. Performance issues are more investigated with *profiling*, which continuously collects the stack traces and running methods. I believe there is corresponding functionality in debugger interface.\r\n\r\nA new dotnet tool printing thread dumps may be introduced, though.",
                                           "updatedAt":  "2024-07-04T12:30:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DqMWA",
                                           "createdAt":  "2024-07-04T12:38:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODoc9ZA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rmannibucau",
                                                                               "createdAt":  "2024-07-04T12:56:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2024-07-05T02:44:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jkotas",
                                           "body":  "https://learn.microsoft.com/dotnet/core/diagnostics/dotnet-stack tool prints managed stacktraces of all threads.",
                                           "updatedAt":  "2024-07-04T12:38:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DqMZT",
                                           "createdAt":  "2024-07-04T12:38:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rmannibucau",
                                           "body":  "* kill -3: just proposed the same than what java does,  any signal would be ok\r\n* Profiling is good but requires setup and is not giving a fast feedback (needs analyzis) so often thread dumps are a more efficient first pass and when not sufficiant profilers help (but are not an option on prod processes starting to lag or unexpectedly stucked processes)\r\n* As mentionned a new tool wouldnt help,we can get the info in dev but it must be something out of the box on any app to be useful\r\n\r\nHope it makes sense",
                                           "updatedAt":  "2024-07-04T12:38:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DqWZZ",
                                           "createdAt":  "2024-07-04T12:56:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "Note: I\u0027m often seeing thread dumps in test failure logs. It seems that we do print thread dumps in certain situations. ",
                                           "updatedAt":  "2024-07-04T12:56:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DqZuY",
                                           "createdAt":  "2024-07-04T13:00:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rmannibucau",
                                           "body":  "@huoyaoyuan the ones on timeouts? (https://github.com/microsoft/testfx/blob/main/src/Platform/Microsoft.Testing.Extensions.HangDump/HangDumpProcessLifetimeHandler.cs#L320)\r\n\r\n@jkotas yes this is exactly what I\u0027d like to be able to call on an application already compiled/bundled \"out of the box\".\r\nIndeed there are always workarounds (like uploading dotnet-stack - even if not as trivial as that - in a running container) but this feature is very few lines of code IMHO and is worth it (maybe I\u0027m biased to have abused it in java, I can ack that).",
                                           "updatedAt":  "2024-07-04T13:00:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DuFUM",
                                           "createdAt":  "2024-07-05T02:43:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "\u003e the ones on timeouts?\r\n\r\nNo, in CI failures of native crashes.",
                                           "updatedAt":  "2024-07-05T02:43:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DvVoE",
                                           "createdAt":  "2024-07-05T05:51:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rmannibucau",
                                           "body":  "I see, `createdump` call on `SIGSEGV`.\r\n\r\nOne challenge there is the only way to get threads+their stack (together) is to use diagnostic package (this is not built-in) so it can be neat to enable it in core + attach a dump callback to an unused process signal if possible.",
                                           "updatedAt":  "2024-07-05T05:51:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6EOnHP",
                                           "createdAt":  "2024-07-09T18:54:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikelle-rogers",
                                           "body":  "Thank you for the suggestion! After careful consideration, we do not plan to take action on this item in this release. We will continue to evaluate it for future releases. Ideally, we would like to fix every issue and implement every idea people submit. Realistically, we cannot address every item.",
                                           "updatedAt":  "2024-07-09T18:54:00Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "[API Proposal]: support thread dump on `kill -3`",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/104459",
        "createdAt":  "2024-07-05T03:51:50Z",
        "number":  104459,
        "author":  "walterlv",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC5JLwA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lindexi",
                                            "createdAt":  "2024-07-05T03:56:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SeWZC",
                                            "createdAt":  "2024-07-05T03:58:12Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-08-13T21:58:47Z",
        "body":  "### Description\n\n1. Write a .NET 8 application that calls a native library using P/Invoke with a callback.\r\n1. Run the app, then attach the dotnet debugger before the callback is called.\r\n    - Visual Studio Managed (.NET Core for Unix): \u003chttps://learn.microsoft.com/en-us/visualstudio/debugger/remote-debugging-dotnet-core-linux-with-ssh?view=vs-2022#attach-the-debugger\u003e\r\n    - JetBrains Rider: \u003chttps://www.jetbrains.com/help/rider/SSH_Remote_Debugging.html#debug-application-on-remote-machine\u003e\r\n1. We\u0027ll see an output \"Trace/Breakpoint Trap\" and the app crashes.\r\n\r\nNote: Not all native callbacks cause this issue so I\u0027ve written a minimal reproducible example below.\n\n### Reproduction Steps\n\nMinimal reproducible example 1:\r\n\r\n1. Clone this repo: https://github.com/walterlv/Walterlv.Issues.TraceBreakpointTrap\r\n1. build the demo to a linux machine\r\n1. Run the app, then attach the dotnet debugger.\r\n\r\n```powershell\r\ndotnet publish -c debug -r linux-x64 --self-contained\r\n```\r\n\r\n```bash\r\n$ ./TraceBreakpointTrapDemo\r\n### Trace/Breakpoint Trap issue on .NET debugger ###\r\nPlease attach a dotnet debugger and use \u0027Set next statement\u0027.\r\nTrace/breakpoint trap\r\n```\r\n\r\nReproducible example 2:\r\n\r\n- https://github.com/Haltroy/CefGlue\n\n### Expected behavior\n\nThe app should not crash when the dotnet debugger is attached.\n\n### Actual behavior\n\nThe app crashes with an output \"Trace/Breakpoint Trap\".\n\n### Regression?\n\nI\u0027ve only tested this on .NET 8.0.302\n\n### Known Workarounds\n\nI\u0027ve found several workarounds:\r\n\r\n1. Detect if the debugger is attached and don\u0027t call the callback.\r\n1. Use the \"Native (GDB)\" or \"Native (LLDB)\" debugger instead of the \"Managed (.NET Core for Unix)\" debugger.\r\n\r\nNote:\r\n\r\n- The `Debugger.IsAttached` property cannot detect the native debugger so I added alternative options `--sleep \u003cseconds\u003e` and `--skip-attach` for the minimal reproducible example above.\r\n- The native debugger is very difficult to use, so I hope this issue can be fixed.\n\n### Configuration\n\n- .NET: 8.0.302\r\n- OS:\r\n    - Ubuntu 22.04 LTS\r\n    - Debian 12\r\n    - UnionTech OS GNU/Linux 20\r\n    - Kylin V10 SP1\r\n- Architecture:\r\n    - x64\r\n    - ARM64\r\n\r\nI didn\u0027t find any environment that doesn\u0027t have this issue.\n\n### Other information\n\n1. `dotnet tool install -g dotnet-sos`\r\n1. `dotnet sos install`\r\n1. `ulimit -c unlimited`\r\n1. Run `echo \"0x3F\"\u003e /proc/\u003cpid\u003e/coredump_filter` after the process starts and the pid is known.\r\n1. Attach the debugger and wait for the output `Trace/Breakpoint Trap (core dumped)`.\r\n1. `lldb --core core TraceBreakpointTrapDemo`\r\n\r\n```bash\r\n$ lldb --core core TraceBreakpointTrapDemo\r\nSOS_HOSTING: Failed to find runtime directory\r\nUnrecognized command \u0027setsymbolserver\u0027 because managed hosting failed or was disabled. See sethostruntime command for details.\r\n(lldb) target create \"TraceBreakpointTrapDemo\" --core \"core\"\r\nCore file \u0027/home/uos/lvyi/Walterlv.Issue.TraceBreakpointTrap/core\u0027 (x86_64) was loaded.\r\n(lldb) clrstack\r\nOS Thread Id: 0x7ef9 (1)\r\n        Child SP               IP Call Site\r\n00007F4AF37DBA38 00007F4AF45F3B41 Walterlv.Issues.TraceBreakpointTrap.VolumeManager.ContextStateCallback(IntPtr, IntPtr)\r\n(lldb) bt\r\n* thread #1, name = \u0027TraceBreakpoint\u0027, stop reason = signal SIGTRAP\r\n  * frame #0: 0x00007f4af45f3b41\r\n    frame #1: 0x00007f4b6ba904f9 libpulse.so.0`___lldb_unnamed_symbol12$$libpulse.so.0 + 73\r\n    frame #2: 0x00007f4b6ba93002 libpulse.so.0`___lldb_unnamed_symbol28$$libpulse.so.0 + 514\r\n    frame #3: 0x00007f4b6ba931d2 libpulse.so.0`___lldb_unnamed_symbol29$$libpulse.so.0 + 98\r\n    frame #4: 0x00007f4b6ba459b2 libpulsecommon-14.2.so`___lldb_unnamed_symbol101$$libpulsecommon-14.2.so + 258\r\n    frame #5: 0x00007f4b6baa63c0 libpulse.so.0`pa_mainloop_dispatch + 672\r\n    frame #6: 0x00007f4b6baa65cc libpulse.so.0`pa_mainloop_iterate + 60\r\n    frame #7: 0x00007f4b6baa6670 libpulse.so.0`pa_mainloop_run + 32\r\n    frame #8: 0x00007f4b6bab43f9 libpulse.so.0`___lldb_unnamed_symbol111$$libpulse.so.0 + 105\r\n    frame #9: 0x00007f4b6ba51628 libpulsecommon-14.2.so`___lldb_unnamed_symbol119$$libpulsecommon-14.2.so + 88\r\n    frame #10: 0x00007f4b73452fa3 libpthread.so.0`start_thread(arg=\u003cunavailable\u003e) at pthread_create.c:486\r\n    frame #11: 0x00007f4b7305d60f libc.so.6`__GI___clone at clone.S:95\r\n(lldb) dis\r\n-\u003e  0x7f4af45f3b41: subq   $0x20, %rsp\r\n    0x7f4af45f3b45: leaq   0x20(%rsp), %rbp\r\n    0x7f4af45f3b4a: movq   %rdi, -0x8(%rbp)\r\n    0x7f4af45f3b4e: movq   %rsi, -0x10(%rbp)\r\n    0x7f4af45f3b52: movq   %rdx, -0x18(%rbp)\r\n    0x7f4af45f3b56: cmpl   $0x0, 0x897d3(%rip)\r\n    0x7f4af45f3b5d: je     0x7f4af45f3b64\r\n(lldb) \r\n```\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOveX_bw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Dur_5",
                                           "createdAt":  "2024-07-05T03:52:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-05T03:52:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6EBWWr",
                                           "createdAt":  "2024-07-08T18:55:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Hi @walterlv!  Thanks for reporting this bug!\r\n\r\n\u003e I didn\u0027t find any environment that doesn\u0027t have this issue.\r\n\r\nDo you know if this issue reproduces on Windows?",
                                           "updatedAt":  "2024-07-08T18:55:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6EBYf1",
                                           "createdAt":  "2024-07-08T19:00:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "\u003e Do you know if this issue reproduces on Windows?\r\n\r\nAhh nevermind this question as the repro is very specific to linux. \r\n\r\nDo you know if the callback/debugging issue is specific to the libpulse API (e.g. does a standalone repo that uses callback from C++ to C# on Linux reproduce the issue)?  I am curious if there is something specific to libpulse that is causing the problem, for example a difference in calling convention, etc...",
                                           "updatedAt":  "2024-07-08T19:00:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6EFN0Z",
                                           "createdAt":  "2024-07-09T01:11:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODo5FqA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2024-07-09T01:45:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "lindexi",
                                           "body":  "@tommcdon I can repro this issues by @walterlv \u0027s repo in my linux system. And I can sure it\u0027s not the libpulse bug, because I can repro this issues with https://github.com/Haltroy/CefGlue \r\n\r\n---\r\n\r\nI can not reproduce on Windows because I fail to run the libpulse on Windows... I mean I do not know if it can be reproduced on Windows.",
                                           "updatedAt":  "2024-07-09T01:13:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6EPiWX",
                                           "createdAt":  "2024-07-09T20:23:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Possible duplicate to https://github.com/dotnet/runtime/issues/102767.  @hoyosjs ",
                                           "updatedAt":  "2024-07-09T20:23:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ESt4e",
                                           "createdAt":  "2024-07-10T03:59:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODpGZ6Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lindexi",
                                                                               "createdAt":  "2024-07-10T06:42:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "walterlv",
                                           "body":  "Thanks to my friend @kkwpsv, he helped me to find out more information about this issue.\r\n\r\n@tommcdon This issue is quite different from #102767:\r\n\r\n1. This issue is related to the dotnet debugger on linux (and **only** on linux).\r\n1. This issue might not related to the callback but I can\u0027t figure out whether it is or not.\r\n\r\nLet\u0027s see more details here.\r\n\r\n1. Debug run the app using a dotnet debugger (I was using the JetBrains Rider linux version) and let the app stops at a breakpoint.\r\n1. Attach lldb to the running process.\r\n1. Continue the app in the dotnet debugger.\r\n1. Continue the app in the lldb debugger.\r\n\r\nThen,\r\n\r\n1. See all the threads in the lldb debugger using `thread backtrace all` and we that thread 3 `.NET EventPipe` is stopped with `signal SIGTRAP`\r\n1. Resume the app and the thread 3 receives a detail signal `signal SIGSEGV: address not mapped to object (fault address: 0xbafa13a0)`.\r\n\r\nThe stack traces are shown as follows:\r\n\r\n![image](https://github.com/dotnet/runtime/assets/9959623/8105a28d-f3ca-4766-91ed-085f67ec5eb8)\r\n\r\n![image](https://github.com/dotnet/runtime/assets/9959623/45c69fe3-d2c7-47f0-8be5-5d0ee3976c68)\r\n\r\n- https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/Diagnostics/Tracing/EventPipeEventProvider.cs\r\n\r\n```csharp\r\n[UnmanagedCallersOnly]\r\nprivate static unsafe void Callback(byte* sourceId, int isEnabled, byte level,\r\n    long matchAnyKeywords, long matchAllKeywords, Interop.Advapi32.EVENT_FILTER_DESCRIPTOR* filterData, void* callbackContext)\r\n{\r\n    EventPipeEventProvider _this = (EventPipeEventProvider)GCHandle.FromIntPtr((IntPtr)callbackContext).Target!;\r\n    if (_this._eventProvider.TryGetTarget(out EventProvider? target))\r\n    {\r\n        _this.ProviderCallback(target, sourceId, isEnabled, level, matchAnyKeywords, matchAllKeywords, filterData);\r\n    }\r\n}\r\n```",
                                           "updatedAt":  "2024-07-10T04:01:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6F4vPo",
                                           "createdAt":  "2024-07-23T20:21:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@hoyosjs ",
                                           "updatedAt":  "2024-07-23T20:21:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6H0LUL",
                                           "createdAt":  "2024-08-09T19:24:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODtgOog==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lindexi",
                                                                               "createdAt":  "2024-08-10T00:59:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2024-08-10T02:31:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "mdh1418",
                                           "body":  "Hi @walterlv and @lindexi,\r\n\r\nWe haven\u0027t been able to repro the exact issue from your repros yet, but the `SIGSEGV` for the EventPipeEventProvider callback looks eerily similar to https://github.com/dotnet/runtime/issues/80666#issuecomment-2249343314, where the _gchandle used in the callback had been freed before the callback completes.\r\n\r\nIf the dotnet debugger is hitting the same EventPipeEventProvider Callback issue, then there is a partial fix already merged through https://github.com/dotnet/runtime/pull/106040 and a second PR https://github.com/dotnet/runtime/pull/106156 that is open",
                                           "updatedAt":  "2024-08-09T19:24:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6H1j-3",
                                           "createdAt":  "2024-08-10T03:48:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lindexi",
                                           "body":  "@mdh1418 Thank you. What VisualStudio version and dotnet version you use? And do you debug the application run on Linux?\r\n\r\nCan I test the daily dotnet version which merged https://github.com/dotnet/runtime/pull/106040 ?",
                                           "updatedAt":  "2024-08-10T03:48:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6IBuPR",
                                           "createdAt":  "2024-08-10T14:42:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODtksYg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lindexi",
                                                                               "createdAt":  "2024-08-11T08:08:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "\u003e What VisualStudio version and dotnet version you use? And do you debug the application run on Linux?\r\n\r\nWe used the latest version of the [C# extension](https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.csharp) in VS Code\r\n\r\n\u003e Can I test the daily dotnet version which merged https://github.com/dotnet/runtime/pull/106040 ?\r\n\r\nYes - the daily builds from https://github.com/dotnet/sdk/blob/main/documentation/package-table.md contain the fix.\r\n",
                                           "updatedAt":  "2024-08-10T14:42:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6IGyik",
                                           "createdAt":  "2024-08-12T09:21:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODtqPvw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lindexi",
                                                                               "createdAt":  "2024-08-12T09:22:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "walterlv",
                                                                               "createdAt":  "2024-08-12T10:45:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "kkwpsv",
                                           "body":  "@tommcdon  I test again with `https://aka.ms/dotnet/9.0.1xx/daily/dotnet-sdk-linux-x64.tar.gz`.\r\nThere is no SIGSEV now. The process still exits with SIGTRAP.\r\n\r\nI debugged it with `lldb`. Here\u0027s the output:\r\n![image](https://github.com/user-attachments/assets/3a0219a3-c842-45fd-8f33-26694dd3331b)\r\n",
                                           "updatedAt":  "2024-08-12T09:21:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6N3PoF",
                                           "createdAt":  "2024-09-27T21:15:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jwilliamsonveeam",
                                           "body":  "Seems like the same problem I\u0027m seeing here: https://github.com/microsoft/DockerTools/issues/444",
                                           "updatedAt":  "2024-09-27T21:15:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6N4WWd",
                                           "createdAt":  "2024-09-28T02:24:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lindexi",
                                           "body":  "@jwilliamsonveeam Sorry, the https://github.com/microsoft/DockerTools/issues/444 is too long, I\u0027m afraid I\u0027m missing out on important information. ",
                                           "updatedAt":  "2024-09-28T02:24:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6OHOom",
                                           "createdAt":  "2024-09-30T22:01:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD1Mqqw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2024-10-01T02:06:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lindexi",
                                                                               "createdAt":  "2024-10-08T06:09:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jwilliamsonveeam",
                                           "body":  "@lindexi I updated my last comment with a small self contained example of a program that fails with a sigtrap in the native c code callback.\r\nhttps://github.com/microsoft/DockerTools/issues/444#issuecomment-2380066894\r\nand a zip of the whole solution is in this thread if you have access.\r\nhttps://developercommunity.visualstudio.com/t/dotnet-process-silently-crashes-when-deb/10740222?",
                                           "updatedAt":  "2024-09-30T22:01:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6OL9bI",
                                           "createdAt":  "2024-10-01T11:13:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Alxe",
                                           "body":  "I\u0027ve run @walterlv\u0027s reproducer ([Walterlv.Issues.TraceBreakpointTrap](https://github.com/walterlv/Walterlv.Issues.TraceBreakpointTrap)) and reproduced the issue as well.\r\n\r\nI\u0027ve been debugging a similar issue where the scenario is as follows:\r\n* A C# callback (annotated with `UnmanagedFunctionPointer`) is sent to a C function through P/Invoke (annotated with `DllImport`).\r\n* The C code is run in a thread distinct from the one that installed the C# callback.\r\n* If the debugger is attached when the C# callback is executed for the first time, the application crashed with a SIGTRAP.\r\n* If the debugger is attached after the C# callback has been executed once, the application works correctly.\r\n\r\nUsing @walterlv\u0027s reproducer as a base, I\u0027ve modified it with [these changes](https://github.com/Alxe/Walterlv.Issues.TraceBreakpointTrap/commit/96497c15fd1499fba8db3a74cf782bbc1ee0c849) and managed to avoid the crash. The output from my execution is as follows:\r\n```console\r\n$ ./artifacts/bin/Walterlv.Issues.TraceBreakpointTrap/debug/TraceBreakpointTrapDemo --skip-attach\r\n### Trace/Breakpoint Trap issue on .NET debugger ###\r\n\r\nContext state changed: 1\r\nIf you want to debug this demo using other debuggers (e.g. GDB, LLDB), you can use the following options:\r\n\r\n  --sleep \u003cseconds\u003e  Sleep for a while before attaching debugger.\r\n  --skip-attach      Skip attaching debugger and run directly.\r\n\r\nPlease attach a dotnet debugger and use \u0027Set next statement\u0027.\r\nContext state changed: 2\r\nContext state changed: 3\r\nContext state changed: 4\r\nContext state changed: 5\r\nIssue may not be reproduced. Exit.\r\n``` \r\nIn the output, changes 1 to 4 are from before the debugger is attached. Once the debug is attached, change 5 is printed but there\u0027s no crash.\r\n\r\nAdditionally, in my own (non-shareable) projects, I\u0027ve been able to use a C debugger (lldb or gdb) to manually call the callback (through a function pointer) directly from the debugger. This led to the C# application throwing the following error:\r\n```\r\nFatal error. Invalid Program: attempted to call a UnmanagedCallersOnly method from managed code.\r\n```\r\n\r\nThis error is seemingly thrown [here](https://github.com/dotnet/runtime/blob/4f6698967e25e0e075150623d6a3f5c518806d8b/src/coreclr/nativeaot/Runtime/thread.cpp#L1193-L1201), but I don\u0027t have a fine understanding of the dotnet runtime.\r\nHowever, it leads me to believe that the key is that there are two distinct threads.",
                                           "updatedAt":  "2024-10-01T11:13:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6OMxlg",
                                           "createdAt":  "2024-10-01T12:57:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD1MrDg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Alxe",
                                                                               "createdAt":  "2024-10-02T08:45:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lindexi",
                                                                               "createdAt":  "2024-10-08T06:10:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "janvorli",
                                           "body":  "\u003e * If the debugger is attached when the C# callback is executed for the first time, the application crashed with a SIGTRAP.\r\n\u003e * If the debugger is attached after the C# callback has been executed once, the application works correctly.\r\n\r\nI think this may have revealed the culprit. The thing is that .NET runtime only handles signals when the thread those occurred on are known to the runtime. That means that they were either created by the runtime or called into the runtime. If the debugger sets the breakpoint on the `UnmanagedCallersOnly` marked method before it calls into the runtime and registers the thread as one that runs managed code, the SIGTRAP would not call the handler in the runtime and it would invoke the default signal handler that terminates the process.\r\n\r\n\u003e This error is seemingly thrown [here](https://github.com/dotnet/runtime/blob/4f6698967e25e0e075150623d6a3f5c518806d8b/src/coreclr/nativeaot/Runtime/thread.cpp#L1193-L1201)\r\n\r\nThis code is for NativeAOT, in coreclr, the error comes from here:\r\nhttps://github.com/dotnet/runtime/blob/008ee9f84f167cee8d07e086086e1cec724750d5/src/coreclr/vm/dllimportcallback.cpp#L187-L196",
                                           "updatedAt":  "2024-10-01T12:57:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ONjC2",
                                           "createdAt":  "2024-10-01T13:35:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD0P95A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jwilliamsonveeam",
                                                                               "createdAt":  "2024-10-01T13:37:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Alxe",
                                           "body":  "@janvorli Hello and thanks for your input!\r\n\r\nI\u0027ll be reviewing the `ReversePInvokeBadTransition`  function, as I think I already added a native breakpoint there (it\u0027s a `extern \"C\"` function) and was able to hit it once.\r\n\r\nHowever, I\u0027d like to point out that the yet-unregistered thread is receiving a `SIGTRAP` **regardless of whether I had a .NET breakpoint or not**. Is there anything relevant that the debugger could be doing on thread registration? Could you share some links to code?  ",
                                           "updatedAt":  "2024-10-01T16:06:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6OQsa0",
                                           "createdAt":  "2024-10-01T18:58:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jwilliamsonveeam",
                                           "body":  "https://github.com/jwilliamsonveeam/TimerCallBackDemo\r\nI created a repo with my failing case. I also do not need any breakpoints in order for this to fail with a SIGTRAP with the debugger attached.",
                                           "updatedAt":  "2024-10-01T18:59:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6OR2Wh",
                                           "createdAt":  "2024-10-01T20:46:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD0ULmw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jwilliamsonveeam",
                                                                               "createdAt":  "2024-10-01T20:48:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "janvorli",
                                           "body":  "The debugger can set some breakpoints on its own for its internal purposes. @tommcdon would most likely know if it can be the case here.",
                                           "updatedAt":  "2024-10-01T20:46:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6O0kZ0",
                                           "createdAt":  "2024-10-07T07:34:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD4axxw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jwilliamsonveeam",
                                                                               "createdAt":  "2024-10-28T21:06:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Alxe",
                                           "body":  "@janvorli If the debugger is setting its own breakpoint (e.g. on managed-to-unmanaged transitions) and then reaching it before the thread is properly registered with the .NET runtime (e.g. on the first .NET interaction of a thread), then the `SIGTRAP` and subsequent crash would make sense.\r\n\r\n@tommcdon Could you please confirm if my assumption is correct? ",
                                           "updatedAt":  "2024-10-07T07:34:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6aMHZk",
                                           "createdAt":  "2025-01-13T11:35:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Alxe",
                                           "body":  "Sorry to be that person, but has there been any update on this? I\u0027m not sure if @tommcdon could reproduce the issue and verify if this is an issue with .NET, or if there\u0027s a workaround.",
                                           "updatedAt":  "2025-01-13T11:35:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6flK-3",
                                           "createdAt":  "2025-02-24T02:38:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "antoinebj",
                                           "body":  "Edit: It was unrelated, and due to a clash with the Go runtime in the library.\n\n~~I think that that might not be just a Linux issue.~~\n\n~~I was getting silent crashes when the debugger was attached (and only then) to my console app under Windows. That app does interop with a native library and provides function pointers for call back, those functions being declared with `[UnmanagedCallersOnly(CallConvs = [typeof(CallConvCdecl)])]`.~~\n\n~~I enabled unmanaged code debugging, and the execution broke with:~~\n\n\u003e ~~Unhandled exception at 0x00007FFBC729A28F (ntdll.dll) in MyApp.exe: 0xC000000D: An invalid parameter was passed to a service or function.~~\n\n~~If I recompile the native library so that it does not call the function pointers passed in parameter, then that no longer happens.\nOnce again, it never happens when the debugger is not attached, regardless of the platform (tested on Windows, Linux, macOS).~~\n\n~~If it\u0027s of any use, the native library is written in Go with CGo for C exports, and built with MinGW GCC (installed with MSYS2) under Windows. The version of .NET that I\u0027m using is 9.~~\n\n~~I cannot promise that I will have time to produce a sample that can reliably reproduce that, but if whoever investigates this thinks that it would be very valuable, let me know and I will try.~~",
                                           "updatedAt":  "2025-02-24T16:41:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6flbPf",
                                           "createdAt":  "2025-02-24T04:00:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEHZMrQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2025-02-24T13:48:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "antoinebj",
                                                                               "createdAt":  "2025-02-24T16:36:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e native library is written in Go with CGo for C exports\n\ngolang libraries are not supported with .NET runtime in the same process: https://learn.microsoft.com/en-us/dotnet/standard/native-interop/abi-support#golang . It can result in hard to diagnose crashes like the one you have observed.",
                                           "updatedAt":  "2025-02-24T04:00:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6frtKY",
                                           "createdAt":  "2025-02-24T16:39:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "antoinebj",
                                           "body":  "\u003e \u003e native library is written in Go with CGo for C exports\n\u003e \n\u003e golang libraries are not supported with .NET runtime in the same process: https://learn.microsoft.com/en-us/dotnet/standard/native-interop/abi-support#golang . It can result in hard to diagnose crashes like the one you have observed.\n\nI tested with a C stub and there is no longer any issue with the debugger and callback, so you\u0027re correct, it must be a clash between the runtimes and the debugger. Thanks for the clarification, and apologies for having polluted the issue with an irrelevant case, I\u0027ll edit the comment.",
                                           "updatedAt":  "2025-02-24T16:39:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc695f9v",
                                           "createdAt":  "2025-08-13T21:58:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEePUTg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lindexi",
                                                                               "createdAt":  "2025-08-14T00:49:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "\u003e [@janvorli](https://github.com/janvorli) If the debugger is setting its own breakpoint (e.g. on managed-to-unmanaged transitions) and then reaching it before the thread is properly registered with the .NET runtime (e.g. on the first .NET interaction of a thread), then the `SIGTRAP` and subsequent crash would make sense.\n\u003e \n\u003e [@tommcdon](https://github.com/tommcdon) Could you please confirm if my assumption is correct?\n\nApologies for the delayed response! I debugged the issue and found the pulseaudio is masking SIGTRAP via pthread_sigmask once pa_threaded_mainloop_start` is called) is called.  This results in the debugger\u0027s int3 handler does not get called, and instead the int3 goes unhandled in the process.  I also looked at https://github.com/jwilliamsonveeam/TimerCallBackDemo and is also manipulating signals, resulting in the same outcome.  Moving this to Future and marking with Enhancement, as resolving the issue will involve an out-of-process debugger solution on Linux and remove our reliance on the in-proc SIGTRAP handler.",
                                           "updatedAt":  "2025-08-13T21:58:33Z"
                                       }
                                   ],
                         "totalCount":  25
                     },
        "title":  "App crashes with an output \"Trace/Breakpoint Trap\" on Linux when a P/Invoke callback is called from a native library if the dotnet debugger is attached.",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/105690",
        "createdAt":  "2024-07-30T11:54:09Z",
        "number":  105690,
        "author":  "EgorBo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC58Cag==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "masterworgen",
                                            "createdAt":  "2024-07-30T13:02:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "adamsitnik",
                                            "createdAt":  "2024-08-05T09:02:52Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-08-05T18:18:22Z",
        "body":  "I have built a toy bot to run arbitrary benchmarks on Azure Linux VMs to then report the results back to PRs/issues the bot was invoked from. It also runs native Linux `perf` tool to collect traces/flamegraphs on demand. What I noticed from the beginning is that the quality of flamegraphs on x64 is often poor and a bit random between runs compared to exactly the same config on arm64.\r\n\r\nExample: https://github.com/dotnet/runtime/pull/105593#issuecomment-2258072263\r\n\r\nSo here is how flamegraphs look like between sequential runs on arm64 (which is Ampere Altra):\r\n\r\n- Default **arm64** run 1: https://telegafiles.blob.core.windows.net/telega/base_flamegraph_8f9736ce.svg\r\n- Default **arm64** run 2: https://telegafiles.blob.core.windows.net/telega/diff_flamegraph_8f9736ce.svg\r\n\r\nif you open these graphs and try to switch between tabs in your browser, you will notice almost no difference between \"run 0\" and \"run 1\" as expected.\r\n\r\nOn x64 (Amd Milano) the picture is a bit different:\r\n\r\n- Default **x64** run 1: https://telegafiles.blob.core.windows.net/telega/base_flamegraph_1837f76f.svg\r\n- Default **x64** run 2: https://telegafiles.blob.core.windows.net/telega/diff_flamegraph_1837f76f.svg\r\n\r\n_(presumably, with less aggressive/disabled inlining it\u0027s a lot worse)_\r\n\r\nthe graphs are a lot \"random\" between the runs. We wonder if this could be caused by an x64-specific optimization to omit frame pointers for simple methods (on arm64 we currently always emit them, although, we have an issue to eventually _fix it_: https://github.com/dotnet/runtime/issues/88823 and https://github.com/dotnet/runtime/issues/35274). Should we never use that optimization when PerfMap is enabled? (or even introduce a new knob since it\u0027s not only `perf` specific).\r\n\r\ncc @jkotas @dotnet/dotnet-diag \r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOh4DRTw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6GmSTi",
                                           "createdAt":  "2024-07-30T12:02:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "@SingleAccretion pointed me to these two places:\r\n\r\n1) How jit decides when to set the frame: [link](https://github.com/dotnet/runtime/blob/35b94da00d4a79de3252ba79b6d3942cc3716405/src/coreclr/jit/regalloc.cpp#L185-L270)\r\n2) JIT ignores VM\u0027s `JIT_FLAG_FRAMED` on x64: [link](https://github.com/dotnet/runtime/blob/d5fea0a2f77b93d39c5263e85ce43448b318eb43/src/coreclr/jit/compiler.cpp#L4154-L4161)\r\n",
                                           "updatedAt":  "2024-07-30T12:02:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GnBNx",
                                           "createdAt":  "2024-07-30T13:38:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "On a completely unrelated note, it\u0027s interesting that DateTime formatting is 2x slower than Guid and Int32, wonder if there is some optimization potential here 🙂 cc @stephentoub (or is it expected because the rules for dates are a lot more complicated?)\r\n![image](https://github.com/user-attachments/assets/9333dbb0-ff04-489d-8930-b0c2b17fbcb8)\r\n\r\n^ arm64\r\n\r\nsame sub-graph on x64:\r\n\r\n![image](https://github.com/user-attachments/assets/57bd5aee-13f1-4531-b17a-8cc4adc6c482)\r\n",
                                           "updatedAt":  "2024-07-30T13:40:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GnFLI",
                                           "createdAt":  "2024-07-30T13:45:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODsHwew==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "EgorBo",
                                                                               "createdAt":  "2024-07-30T14:01:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e On a completely unrelated note, it\u0027s interesting that DateTime formatting is 2x slower than Guid and Int32, wonder if there is some optimization potential here 🙂 cc @stephentoub (or is it expected because the rules for dates are a lot more complicated?)\n\nIt\u0027s much more complicated; frankly I\u0027m pleased it\u0027s only 2x formatting an Int32.\nhttps://github.com/dotnet/runtime/blob/35b94da00d4a79de3252ba79b6d3942cc3716405/src/libraries/System.Private.CoreLib/src/System/Globalization/DateTimeFormat.cs#L1439-L1513\nBut if you have ideas for significantly improving it, that\u0027d be great.",
                                           "updatedAt":  "2024-07-30T13:46:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GoOBI",
                                           "createdAt":  "2024-07-30T15:58:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e We wonder if this could be caused by an x64-specific optimization to omit frame pointers for simple methods (on arm64 we currently always emit them\r\n\r\nI do not see how this can explain randomness. I can believe that this optimization can cause the flamegraph to be less representative in some cases (similar effects as inlining or tail-call optimizations), but it should not be random.",
                                           "updatedAt":  "2024-07-30T15:58:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GoSlr",
                                           "createdAt":  "2024-07-30T16:07:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "\u003e \u003e We wonder if this could be caused by an x64-specific optimization to omit frame pointers for simple methods (on arm64 we currently always emit them\r\n\u003e \r\n\u003e I do not see how this can explain randomness. I can believe that this optimization can cause the flamegraph to be less representative in some cases (similar effects as inlining or tail-call optimizations), but it should not be random.\r\n\r\nAny ideas what that could be? We do rely on a random for e.g. PGO, but I\u0027d expect arm to be also affected if that was the major factor.\r\n\r\nHere is a diff example between two x64 runs:\r\n\r\n![image](https://github.com/user-attachments/assets/23058e09-7f3a-4f4b-ba3b-daf00f08e05e)\r\n\r\nI wonder - why do we see OnTryWrite twice here, is it recursive?",
                                           "updatedAt":  "2024-07-30T16:07:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GoT35",
                                           "createdAt":  "2024-07-30T16:10:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "A bit of a context how the perf is collected: I ask BDN to run longer, wait 15 sec and attach with `perf` to it, collect the samples for 8 seconds and quit. Hence, it\u0027s expected to be a steady state for such trivial benchmarks.\r\n\r\n```bash\r\nDOTNET_PerfMapEnabled=1 DOTNET_EnableWriteXorExecute=0 nohup $DIR_WORK/core_root_$1/corerun $TFM_PATH/linux-$ARCH/publish/benchapp.dll -i --filter \"*\" --noForcedGCs --noOverheadEvaluation --disableLogFile --maxWarmupCount 8 --minIterationCount 150000 --maxIterationCount 200000 -a perfarts 1\u003e $DIR_LOGS/profiler.out 2\u003e $DIR_LOGS/profiler.err \u0026\r\nsleep 15\r\nperf record $PERF_RECORD_ARGS -k 1 -g -F 49999 -p $(pgrep corerun) sleep 8\r\nperf inject --input perf.data --jit --output perfjit.data\r\nperf report --input perfjit.data --no-children --percent-limit 5 --stdio \u003e $DIR_BENCHAPP/BenchmarkDotNet.Artifacts/$1_functions.txt\r\nperf annotate --stdio -i perfjit.data --percent-limit 5 -M intel \u003e $DIR_BENCHAPP/BenchmarkDotNet.Artifacts/$1.asm\r\npkill corerun || true\r\n```",
                                           "updatedAt":  "2024-07-30T16:10:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HLEId",
                                           "createdAt":  "2024-08-04T22:37:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "I don\u0027t have any immediate speculation on what the cause is. My initial thought is that while the architecture difference is a little surprising this might be a \"correlation != causation\" scenario and it will turn out the culprit is something quite different. A few suggestions that might help make progress:\r\n\r\n- You may want to try some benchmarks that exercise non-jitted code - its possible the noise has more to do with the hardware, background load, or measurement approach than anything in the codegen. \r\n- I find the flame graphs nice for seeing a difference exists, but hard to do deeper analysis on. For that I usually turn to a table of method name + exclusive time. Perfview also has a regression analysis feature that will take two traces and compare them pointing out the methods whose relative times have changed the most.\r\n- Performing more trial runs could give us a better idea what the distribution of results looks like and how does it vary in respect to other variables. For example variation by host machine, background processes, choice of benchmark app, localized to specific methods or smeared across all of them?\r\n- Folks like @adamsitnik and @brianrob may have more suggestions. \r\n\r\nHope that helps!\r\n",
                                           "updatedAt":  "2024-08-04T22:37:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HN72L",
                                           "createdAt":  "2024-08-05T09:17:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODtHY1A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "EgorBo",
                                                                               "createdAt":  "2024-08-07T12:35:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "I am not sure if this is the same issue, but when I was working on adding `--profiler perf` support to BDN (which is just a wrapper for perfcollect) I\u0027ve noticed that on x64 the profiles were often detached and on arm64 everything worked as expected.\r\n\r\nBy detached I mean for method A calling method B and then C, the profile showed \"A calling B\" on the root level and \"C\" just next to them (rather than B calling C).\r\n\r\nExample:\r\n\r\n![image](https://github.com/user-attachments/assets/d69250be-c597-4890-b6bd-153cb54ef948)\r\n\r\nI\u0027ve not tried it with .NET 9 so the issue might be gone.\r\n\r\nIIRC @janvorli knew the reason behind this particular difference.\r\n\r\n\r\n\r\n",
                                           "updatedAt":  "2024-08-05T09:17:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HN8tQ",
                                           "createdAt":  "2024-08-05T09:18:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "@EgorBo just out of curiosity, what https://adamsitnik.com/PerfCollectProfiler/ is missing that pushed you to implementing your own solution?",
                                           "updatedAt":  "2024-08-05T09:18:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HgNFP",
                                           "createdAt":  "2024-08-07T12:33:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "\u003e @EgorBo just out of curiosity, what https://adamsitnik.com/PerfCollectProfiler/ is missing that pushed you to implementing your own solution?\r\n\r\n@adamsitnik I tried that first, but decided to have a more explicit control over raw `perf` e.g. test different events, frequencies, get annotated asm code. E.g. I am not sure it\u0027s possible to extract raw asm annotated with % for the top 5 hottest functions in a profile with your profiler.\r\n\r\nOverall, there are 2 problems currently:\r\n1) Some frames look \"dettached\" on x64, today I\u0027ve ran a quick benchmark for the Write-Barrier [issue](https://github.com/dotnet/runtime/issues/106051) and just compare these two flamegraphs: [x64](https://telegafiles.blob.core.windows.net/telega/base_flamegraph_b235bb2b.svg) and [arm64](https://telegafiles.blob.core.windows.net/telega/base_flamegraph_89409087.svg) - for some reason, the write barrier is not \"on top\" of `void WB()` function as expected (it is on arm64) - see [original C# code.](https://github.com/dotnet/runtime/issues/106051#issuecomment-2272832437)\r\n\r\n2) General noisy differences between runs - I think it\u0027s indeed caused by tiered compilation, after I enabled `DOTNET_PerfMapShowOptimizationTiers=1` I noticed mismatches between tier names, so I bumped the timeout `perf` has to wait before collecting the samples (to 30 sec). Alternatively, users can just disable tiered compilation.\r\n\r\n",
                                           "updatedAt":  "2024-08-07T12:41:47Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "Quality of native perf profiling on x64",
        "labels":  [
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/105712",
        "createdAt":  "2024-07-30T17:29:00Z",
        "number":  105712,
        "author":  "yegor-pelykh",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-07T12:43:51Z",
        "body":  "I use the Profiler API to get a mixed mode call stack.\r\nThe problem is that for some of the native frames of the resulting stack (related to the managed -\u003e unmanaged transition, hidden behind the `DllImport`) are completely unknown - it is impossible to get symbolic information for them, even just the module to which the return address belongs.\r\n\r\n`GetFunctionFromIP` for the address of this frame returns `E_FAIL`, which means that the function is unmanaged.\r\n\r\nAs I understand, this is a JIT generated piece of code.\r\nBut how can I know this for sure, to determine this for any other such piece of code from any call stack?\r\nAnd I\u0027d like to get the module to which this piece of code belongs, as well as some text description (let\u0027s say the \"name\" of the function).\r\n\r\nPlease, could you help me?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOkEBWNg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Go257",
                                           "createdAt":  "2024-07-30T17:29:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-30T17:29:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GrTir",
                                           "createdAt":  "2024-07-31T02:03:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@mdh1418 ",
                                           "updatedAt":  "2024-07-31T02:03:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HaLBC",
                                           "createdAt":  "2024-08-06T17:25:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mdh1418",
                                           "body":  "Hi @yegor-pelykh, just to clarify, is what you\u0027re seeing in your callstack a bunch of frames corresponding to managed code, and then some frames that dont seem to have any useful information besides an address?\r\nPerhaps something like this?\r\n```\r\n00f7e9bc 6c73d1af System_Private_CoreLib!System.UInt64 System.Diagnostics.Tracing.EventPipeInternal::Enable(System.String, System.Diagnostics.Tracing.EventPipeSerializationFormat, System.UInt32, System.Diagnostics.Tracing.EventPipeProviderConfiguration[])$##6008E81+0xfe\r\n00f7ea80 6c73d036 System_Private_CoreLib!System.Diagnostics.Tracing.EventPipeEventDispatcher::CommitDispatchConfiguration()$##6008E99+0x13f\r\n00f7eab0 6c74c6dd System_Private_CoreLib!System.Diagnostics.Tracing.EventPipeEventDispatcher::SendCommand(System.Diagnostics.Tracing.EventListener, System.Diagnostics.Tracing.EventCommand, System.Boolean, System.Diagnostics.Tracing.EventLevel, System.Diagnostics.Tracing.EventKeywords)$##6008E98+0xc6\r\n00f7ead4 6c74cbf3 System_Private_CoreLib!System.Diagnostics.Tracing.EventListener::DisableEvents(System.Diagnostics.Tracing.EventSource)$##6008F9E+0x4d\r\n00f7eb04 6c74cd07 System_Private_CoreLib!System.Diagnostics.Tracing.EventListener::CallDisableEventsIfNecessary(System.Diagnostics.Tracing.EventDispatcher, System.Diagnostics.Tracing.EventSource)$##6008FA4+0x53\r\n00f7eb50 6c74c584 System_Private_CoreLib!System.Diagnostics.Tracing.EventListener::RemoveReferencesToListenerInEventSources(System.Diagnostics.Tracing.EventListener)$##6008FA5+0xb7\r\n00f7eb7c 08d17ba7 System_Private_CoreLib!System.Diagnostics.Tracing.EventListener::Dispose()$##6008F9A+0x94\r\n00f7ebb4 08d11db4 0x8d17ba7\r\n00f7ec30 08d1183a 0x8d11db4\r\n00f7ec4c 6f29dd05 0x8d1183a\r\n```\r\n\r\nIf that is the case, then I do agree that its missing symbol information, but I don\u0027t know if there is any other telltale sign to figure out the source of the frames with missing symbol information.\r\n\r\nAre you building everything in debug configuration? How are you grabbing the callstack? I don\u0027t really know if there is any other way to sleuth those frames besides ensuring that you\u0027re building with debug configuration to generate symbols and that whichever thing you\u0027re using to grab callstacks loads those symbols.",
                                           "updatedAt":  "2024-08-06T17:25:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6I7ZxY",
                                           "createdAt":  "2024-08-19T19:19:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "yegor-pelykh",
                                           "body":  "Hi @mdh1418. Thanks for the answer! \r\n\r\n\u003e Hi @yegor-pelykh, just to clarify, is what you\u0027re seeing in your callstack a bunch of frames corresponding to managed code, and then some frames that dont seem to have any useful information besides an address? Perhaps something like this?\r\n\u003e \r\n\u003e ```\r\n\u003e 00f7e9bc 6c73d1af System_Private_CoreLib!System.UInt64 System.Diagnostics.Tracing.EventPipeInternal::Enable(System.String, System.Diagnostics.Tracing.EventPipeSerializationFormat, System.UInt32, System.Diagnostics.Tracing.EventPipeProviderConfiguration[])$##6008E81+0xfe\r\n\u003e 00f7ea80 6c73d036 System_Private_CoreLib!System.Diagnostics.Tracing.EventPipeEventDispatcher::CommitDispatchConfiguration()$##6008E99+0x13f\r\n\u003e 00f7eab0 6c74c6dd System_Private_CoreLib!System.Diagnostics.Tracing.EventPipeEventDispatcher::SendCommand(System.Diagnostics.Tracing.EventListener, System.Diagnostics.Tracing.EventCommand, System.Boolean, System.Diagnostics.Tracing.EventLevel, System.Diagnostics.Tracing.EventKeywords)$##6008E98+0xc6\r\n\u003e 00f7ead4 6c74cbf3 System_Private_CoreLib!System.Diagnostics.Tracing.EventListener::DisableEvents(System.Diagnostics.Tracing.EventSource)$##6008F9E+0x4d\r\n\u003e 00f7eb04 6c74cd07 System_Private_CoreLib!System.Diagnostics.Tracing.EventListener::CallDisableEventsIfNecessary(System.Diagnostics.Tracing.EventDispatcher, System.Diagnostics.Tracing.EventSource)$##6008FA4+0x53\r\n\u003e 00f7eb50 6c74c584 System_Private_CoreLib!System.Diagnostics.Tracing.EventListener::RemoveReferencesToListenerInEventSources(System.Diagnostics.Tracing.EventListener)$##6008FA5+0xb7\r\n\u003e 00f7eb7c 08d17ba7 System_Private_CoreLib!System.Diagnostics.Tracing.EventListener::Dispose()$##6008F9A+0x94\r\n\u003e 00f7ebb4 08d11db4 0x8d17ba7\r\n\u003e 00f7ec30 08d1183a 0x8d11db4\r\n\u003e 00f7ec4c 6f29dd05 0x8d1183a\r\n\u003e ```\r\n\r\nThat\u0027s exactly what I\u0027m talking about.\r\n\r\nThis is a debug configuration. Symbols were also initialized. There are no recognition problems with any other frames.\r\nAnd the problem here is not only in symbols. It is also impossible to know the module in whose space the address is located (and it should be possible to recognize it even independently of the symbols).\r\n\r\nWhat is even more interesting is that if you look at these same addresses from under WinDbg with the SOS add-on, these addresses are recognized as IL Stub, and, it seems, belong to the main running module of the application. And this is strange to me, since SOS can understand which module they belong to, and also name the symbols.\r\n\r\nCould you look at such addresses in more detail, especially how this is implemented in SOS, and also make some changes to the Profiler API capabilities to be able to determine the info for these addresses?\r\n\r\nPlease.",
                                           "updatedAt":  "2024-08-19T19:19:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JwpiS",
                                           "createdAt":  "2024-08-26T22:40:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mdh1418",
                                           "body":  "Hi @yegor-pelykh, I\u0027m noticing that `GetFunctionFromIP` invokes `GetFunctionFromIPInternal` with `failOnNoMetadata=true`. Since IL Stubs will not have metadata, maybe `GetFunctionFromIP3` https://github.com/dotnet/runtime/blob/9a31a5b47aa7484bec71ba28aa59712c7898b902/src/coreclr/vm/proftoeeinterfaceimpl.cpp#L6233 will work.\r\n\r\nCould you elaborate on how you\u0027re grabbing the mixed mode call stack with a profiler and do you mainly need the IL Stubs information to trace back to unmanaged code?",
                                           "updatedAt":  "2024-08-26T22:40:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MwWCQ",
                                           "createdAt":  "2024-09-19T16:28:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "This issue has been marked `needs-author-action` and may be missing some important information.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-19T16:28:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6OlkjY",
                                           "createdAt":  "2024-10-03T19:53:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "This issue has been automatically marked `no-recent-activity` because it has not had any activity for 14 days. It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will remove `no-recent-activity`.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-03T19:53:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PH08J",
                                           "createdAt":  "2024-10-09T03:25:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "There are a variety of code fragments the runtime emits which have never had any name associated with them. Some of these have already come up in other issues such as:\r\nhttps://github.com/dotnet/runtime/issues/8279\r\nhttps://github.com/dotnet/diagnostics/issues/5532\r\n\r\nIts possible to invent names for all these stubs and then add new profiler APIs that expose the information, but since it isn\u0027t functionality we\u0027ve ever claimed to support in the past I\u0027m tagging this issue as \u0027enhancement\u0027.",
                                           "updatedAt":  "2024-10-09T03:25:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6POhZc",
                                           "createdAt":  "2024-10-09T17:57:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "yegor-pelykh",
                                           "body":  "\u003e I\u0027m noticing that `GetFunctionFromIP` invokes `GetFunctionFromIPInternal` with `failOnNoMetadata=true`. Since IL Stubs will not have metadata, maybe `GetFunctionFromIP3`\n\u003e \n\u003e [runtime/src/coreclr/vm/proftoeeinterfaceimpl.cpp](https://github.com/dotnet/runtime/blob/9a31a5b47aa7484bec71ba28aa59712c7898b902/src/coreclr/vm/proftoeeinterfaceimpl.cpp#L6233)\n\u003e \n\u003e Line 6233 in [9a31a5b](/dotnet/runtime/commit/9a31a5b47aa7484bec71ba28aa59712c7898b902)\n\nThanks for the tip.\nBut if I simply replace `GetFunctionFromIP` with `GetFunctionFromIP3` (with the addition of a third parameter), then the `GetFunctionFromIP3` function always returns `0x80131363`, where `GetFunctionFromIP` returned a normal result.\nOr rather, `GetFunctionFromIP3` never returns any normal result, only `0x80131363`.\nAlthough it is called from the same place where `GetFunctionFromIP` was called.",
                                           "updatedAt":  "2024-10-09T17:57:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6QP1Xf",
                                           "createdAt":  "2024-10-17T17:08:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mdh1418",
                                           "body":  "@yegor-pelykh `0x80131363` indicates `CORPROF_E_UNSUPPORTED_CALL_SEQUENCE` based on https://github.com/dotnet/runtime/blob/d8aadb1237b85c5c88000e2ce7ec636d73ff9634/src/coreclr/inc/corerror.xml#L994-L997\n\n`GetFunctionFromIP` is an asynchronous ICorProfiler API based on `PROFILER_TO_CLR_ENTRYPOINT_ASYNC_EX` macro at https://github.com/dotnet/runtime/blob/d8aadb1237b85c5c88000e2ce7ec636d73ff9634/src/coreclr/vm/proftoeeinterfaceimpl.cpp#L2013\n`GetFunctionFromIP3` is a synchronous ICorProfiler API based on `PROFILER_TO_CLR_ENTRYPOINT_SYNC_EX` macro at https://github.com/dotnet/runtime/blob/d8aadb1237b85c5c88000e2ce7ec636d73ff9634/src/coreclr/vm/proftoeeinterfaceimpl.cpp#L6216\n\nSo `GetFunctionFromIP3` can only be invoked within a callback instead of directly through the profiler.\n\nMore on Synchronous and Asynchronous ICorProfiler APIs https://github.com/dotnet/runtime/blob/d8aadb1237b85c5c88000e2ce7ec636d73ff9634/docs/design/coreclr/botr/profilability.md#synchronous--asynchronous ",
                                           "updatedAt":  "2024-10-17T17:08:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6QQFY2",
                                           "createdAt":  "2024-10-17T17:44:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "yegor-pelykh",
                                           "body":  "I understand the reason why such result is returned, but I need to call these functions asynchronously. That\u0027s the problem...",
                                           "updatedAt":  "2024-10-17T17:44:47Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "Identification of JIT generated functions by their address",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/106104",
        "createdAt":  "2024-08-08T00:36:13Z",
        "number":  106104,
        "author":  "mikelle-rogers",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-05-27T02:23:49Z",
        "body":  "### Description\n\nThe process that I am running on .NET9 preview 7 under the debugger silently exits either after stepping, or it continuing and breakpoints are set on the lines after `var aa = typeof(Action).GetMethod(\"Invoke\").CreateDelegate\u003cAction\u003cAction\u003e\u003e();`\n\n### Reproduction Steps\n\n```\r\nclass Program \r\n{ \r\n    static int x; \r\n    static void Main() \r\n    { \r\n        Action a = Work; \r\n        a += Work2; \r\n        a += Work3; \r\n        var aa = typeof(Action).GetMethod(\"Invoke\").CreateDelegate\u003cAction\u003cAction\u003e\u003e();\r\n        \r\n        //for (; ; ) a(); \r\n        Console.WriteLine(\"We are here\");\r\n        for (; ; ) aa(a); \r\n    } \r\n    static void Work() \r\n    { \r\n        Console.WriteLine(\"work\");\r\n        x += 1; \r\n    } \r\n    static void Work2() \r\n    { \r\n        Console.WriteLine(\"work2\");\r\n        x += 2; \r\n    } \r\n    static void Work3() \r\n    { \r\n        Console.WriteLine(\"work3\");\r\n        x += 3; \r\n    } \r\n}\r\n```\r\nPublish this as self-contained, then build the runtime in Debug and patch the Runtime. Put breakpoints on the `Console.WriteLine(\"We are here\");` line or the `for loop` line.\n\n### Expected behavior\n\nThe program continues and the Console.WriteLine lines print.\n\n### Actual behavior\n\nIf breakpoints are on either of the lines after  `var aa = typeof(Action).GetMethod(\"Invoke\").CreateDelegate\u003cAction\u003cAction\u003e\u003e();`, then the program and the debugger silently fail and exit.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nDon\u0027t set breakpoints and run the program, then it works as expected.\r\nOr just use the self-contained runtime after publishing the app rather than patching a Debug runtime.\n\n### Configuration\n\nMac ARM64 -\u003e M1\r\n.NET9, patched Debug build\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOh5QSqQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6HlBKp",
                                           "createdAt":  "2024-08-08T00:37:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-08-08T00:37:22Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Process silently exits after patching self-contained app with Debug bits when specific breakpoints are set",
        "labels":  [
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/106148",
        "createdAt":  "2024-08-08T17:43:27Z",
        "number":  106148,
        "author":  "lambdageek",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-07T14:19:20Z",
        "body":  "When running in the DAC, `ReJitManager::IsReJITEnabled` checks the configuration environment variable in the environment of the debugger process, not in the target process:\n\nhttps://github.com/dotnet/runtime/blob/aac3b2c83a4ecbb2fc7e178579b557854a5a7bc4/src/coreclr/vm/rejit.inl#L24-L32\n\nThe `CLRConfig::GetConfigString` (called by `ConfigDWORD::val`) checks the environment of the current process (the one in which the DAC is loaded), not the target runtime.\nWhenever this is fixed please remember to fix the cDAC implementation as well as the DAC.\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOh88naw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6HrlNz",
                                           "createdAt":  "2024-08-08T17:43:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-08-08T17:43:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HrmkV",
                                           "createdAt":  "2024-08-08T17:47:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "This is called from, for example\r\n`MethodDesc::IsEligibleForReJIT`:\r\n\r\nhttps://github.com/dotnet/runtime/blob/aac3b2c83a4ecbb2fc7e178579b557854a5a7bc4/src/coreclr/vm/method.hpp#L1110-L1128\r\n\r\nWhich is called from `MethodDesc::IsVersionable`, called from `EECodeInfo::GetNativeCodeVersion`, called from `ExecutionManager::GetNativeCodeVersion`, called from `SOSDacImpl::GetMethodDescData` which runs in the DAC",
                                           "updatedAt":  "2024-08-08T17:47:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Hrmur",
                                           "createdAt":  "2024-08-08T17:47:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "/cc @davidwrighton\r\n",
                                           "updatedAt":  "2024-08-08T17:47:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Hzydr",
                                           "createdAt":  "2024-08-09T18:21:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@AaronRobinsonMSFT ",
                                           "updatedAt":  "2024-08-09T18:21:19Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[DAC][ReJIT] ReJitManager::IsReJITEnabled checked DOTNET_ProfAPI_RejitOnAttach in the wrong environment",
        "labels":  [
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/106243",
        "createdAt":  "2024-08-12T01:51:24Z",
        "number":  106243,
        "author":  "v-wenyuxu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-07T12:43:39Z",
        "body":  "**Failed in:** [runtime-coreclr gcstress-extra 20240810.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=772027\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=19728432\u0026resultId=101726\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\ncoreclr linux x64 Checked gcstress0xc_disabler2r @ Ubuntu.2204.Amd64.Open\r\n    - profiler/transitions/transitions/transitions.sh\r\n```\r\n\r\n**Error message:**\r\n```\r\n /datadisks/disk1/work/B05908E8/w/9F9508FB/e/profiler/transitions/transitions/transitions.sh: line 448:  4052 Segmentation fault      (core dumped) $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\r\n\r\nReturn code:      1\r\nRaw output file:      /datadisks/disk1/work/B05908E8/w/9F9508FB/uploads/Reports/profiler.transitions/transitions/transitions.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n/datadisks/disk1/work/B05908E8/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true transitions.dll \u0027\u0027\r\nProfiler path: /datadisks/disk1/work/B05908E8/w/9F9508FB/e/profiler/transitions/transitions/libProfiler.so\r\nProfilee STDOUT: Profiler.dll!DllGetClassObject\r\nProfilee STDOUT: Profiler.dll!Profiler::Initialize\r\nProfilee STDOUT: PInvoke received i=13\r\nProfilee STDOUT: Profiler.dll!Profiler::Shutdown\r\nProfilee STDOUT: PROFILER TEST PASSES\r\nProfiler path: /datadisks/disk1/work/B05908E8/w/9F9508FB/e/profiler/transitions/transitions/libProfiler.so\r\nProfilee STDOUT: Profiler.dll!DllGetClassObject\r\nProfilee STDOUT: Profiler.dll!Profiler::Initialize\r\nProfilee STDOUT: PInvoke received i=13\r\nProfilee STDOUT: Profiler.dll!Profiler::Shutdown\r\nProfilee STDOUT: PROFILER TEST PASSES\r\nExpected: 100\r\nActual: 139\r\nEND EXECUTION - FAILED\r\nTest failed. Trying to see if dump file was created in /home/helixbot/dotnetbuild/dumps since 8/10/2024 10:37:17 PM\r\nTest Harness Exitcode is : 1\r\nTo run the test:\r\n\u003e set CORE_ROOT=/datadisks/disk1/work/B05908E8/p\r\n\u003e /datadisks/disk1/work/B05908E8/w/9F9508FB/e/profiler/transitions/transitions/transitions.sh\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n   at profiler_transitions._transitions_transitions_._transitions_transitions_sh()\r\n\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOiC0YKA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6IE7kA",
                                           "createdAt":  "2024-08-12T01:51:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-08-12T01:51:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ILRgo",
                                           "createdAt":  "2024-08-12T18:27:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mdh1418",
                                           "body":  "Inspecting the core dump, not sure exactly what from transitions is causing the SIGSEGV from the backtraces. It looks like its having some trouble running the 3rd test given that it hits the SIGSEGV after 2 `PROFILER TEST PASSES`. Could it be a flake unrelated to the test?\r\n```\r\n(lldb) thread backtrace all\r\n* thread #1, name = \u0027corerun\u0027, stop reason = signal SIGSEGV: invalid address\r\n  * frame #0: 0x00007b9a217106e6 libcoreclr.so`RtlRestoreContext at context2.S:215\r\n    frame #1: 0x00007b9a21710930 libcoreclr.so`ExecuteHandlerOnCustomStack(code=11, siginfo=0x00007b9a220624b0, context=0x00007b9a22062380, customSp=\u003cunavailable\u003e, returnPoint=0x00007b9a220616b0) at signalhandlerhelper.cpp:74:5 [opt]\r\n    frame #2: 0x00007b9a216a84a6 libcoreclr.so`SwitchStackAndExecuteHandler(code=11, siginfo=0x00007b9a220624b0, context=0x00007b9a22062380, sp=0) at signal.cpp:593:9 [opt]\r\n    frame #3: 0x00007b9a216a7582 libcoreclr.so`sigsegv_handler(code=11, siginfo=0x00007b9a220624b0, context=0x00007b9a22062380) at signal.cpp:657:17 [opt]\r\n    frame #4: 0x00007b9a21a42520 libc.so.6`new_exp [inlined] __gettext_free_exp(exp=\u003cunavailable\u003e) at plural.c:1558:7\r\n    frame #5: 0x00007b9a21a424f0 libc.so.6`new_exp [inlined] __gettext_free_exp(exp=\u003cunavailable\u003e) at plural.c:1561:7\r\n    frame #6: 0x00007b9a21a424f0 libc.so.6`new_exp [inlined] __gettext_free_exp(exp=0x00007b99a0004038) at plural.c:1561:7\r\n    frame #7: 0x00007b9a21a424b0 libc.so.6`new_exp [inlined] __gettext_free_exp(exp=0x00007b598a010f88) at plural.c:1561:7\r\n    frame #8: 0x00007b9a21a423d8 libc.so.6`new_exp(nargs=\u003cunavailable\u003e, op=\u003cunavailable\u003e, args=0x00007b598a802460) at plural.c:265:5\r\n    frame #9: 0x00007b99a3708b59\r\n    frame #10: 0x00007b99a36ce6e7\r\n    frame #11: 0x00007b99a36cdb85\r\n    frame #12: 0x00007b99a36cd8dd\r\n    frame #13: 0x00007b9a214b43d0 libcoreclr.so`CallDescrWorkerInternal at calldescrworkeramd64.S:70\r\n    frame #14: 0x00007b9a21252a2b libcoreclr.so`CallDescrWorkerWithHandler(pCallDescrData=0x00007ffd18066900, fCriticalCall=\u003cunavailable\u003e) at callhelpers.cpp:63:5 [opt]\r\n    frame #15: 0x00007b9a212534e2 libcoreclr.so`MethodDescCallSite::CallTargetWorker(this=0x00007ffd18066a78, pArguments=0x00007ffd18066a18, pReturnValue=0x00007ffd18066a48, cbReturnValue=8) at callhelpers.cpp:585:9 [opt]\r\n    frame #16: 0x00007b9a210ab00e libcoreclr.so`RunMain(MethodDesc*, short, int*, REF\u003cPtrArray\u003e*) [inlined] MethodDescCallSite::Call_RetArgSlot(this=0x00007ffd18066a78, pArguments=0x00007ffd18066a18) at callhelpers.h:465:9 [opt]\r\n    frame #17: 0x00007b9a210aafb9 libcoreclr.so`RunMain(MethodDesc*, short, int*, REF\u003cPtrArray\u003e*) [inlined] RunMainInternal(pParam=0x00007ffd180669c8) at assembly.cpp:1238:48 [opt]\r\n    frame #18: 0x00007b9a210aad6d libcoreclr.so`RunMain(MethodDesc*, short, int*, REF\u003cPtrArray\u003e*) [inlined] RunMain(this=\u003cunavailable\u003e, pParam=0x00007ffd180669c8)::$_0::operator()(Param*) const::\u0027lambda\u0027(Param*)::operator()(Param*) const at assembly.cpp:1306:9 [opt]\r\n    frame #19: 0x00007b9a210aad6d libcoreclr.so`RunMain(MethodDesc*, short, int*, REF\u003cPtrArray\u003e*) [inlined] RunMain(MethodDesc*, short, int*, REF\u003cPtrArray\u003e*)::$_0::operator()(this=\u003cunavailable\u003e, __EXparam=0x00007ffd180669c8) const at assembly.cpp:1308:5 [opt]\r\n    frame #20: 0x00007b9a210aad5a libcoreclr.so`RunMain(pFD=0x00007b99a3db6700, numSkipArgs=1, piRetVal=0x00007ffd18066bb4, stringArgs=0x00007ffd18066ed0) at assembly.cpp:1308:5 [opt]\r\n    frame #21: 0x00007b9a210ab4bf libcoreclr.so`Assembly::ExecuteMainMethod(this=\u003cunavailable\u003e, stringArgs=0x00007ffd18066ed0, waitForOtherThreads=YES) at assembly.cpp:1434:18 [opt]\r\n    frame #22: 0x00007b9a210edece libcoreclr.so`CorHost2::ExecuteAssembly(this=\u003cunavailable\u003e, dwAppDomainId=\u003cunavailable\u003e, pwzAssemblyPath=\u003cunavailable\u003e, argc=0, argv=0x0000000000000000, pReturnValue=0x00007ffd180670ac) at corhost.cpp:349:39 [opt]\r\n    frame #23: 0x00007b9a21090ea1 libcoreclr.so`coreclr_execute_assembly(hostHandle=0x00005b2d51fad600, domainId=1, argc=0, argv=\u003cunavailable\u003e, managedAssemblyPath=\"/datadisks/disk1/work/B05908E8/w/9F9508FB/e/profiler/transitions/transitions/transitions.dll\", exitCode=0x00007ffd180670ac) at exports.cpp:494:24 [opt]\r\n    frame #24: 0x00005b2d5027ef69 corerun`main [inlined] run(config=0x00007ffd18067140) at corerun.cpp:429:18 [opt]\r\n    frame #25: 0x00005b2d5027e2ef corerun`main(argc=\u003cunavailable\u003e, argv=\u003cunavailable\u003e) at corerun.cpp:641:21 [opt]\r\n  thread #2, stop reason = signal 0\r\n    frame #0: 0x00007b9a21b18bcf libc.so.6`fts_read(sp=0x00007b9994000d80) at fts.c:328:15\r\n    frame #1: 0x00007b9a214ef9ca libcoreclr.so`ds_ipc_stream_factory_get_next_available_stream(callback=(libcoreclr.so`server_warning_callback(char const*, unsigned int) at ds-server.c:110)) at ds-ipc.c:393:14 [opt]\r\n    frame #2: 0x00007b9a214f5376 libcoreclr.so`server_thread(data=\u003cunavailable\u003e) at ds-server.c:129:34 [opt]\r\n    frame #3: 0x00007b9a2170c66f libcoreclr.so`CorUnix::CPalThread::ThreadEntry(pvParam=0x00005b2d51fd5840) at thread.cpp:1744:16 [opt]\r\n  thread #3, stop reason = signal 0\r\n    frame #0: 0x00007b9a21b145b4 libc.so.6`parse_dollars [inlined] parse_param(quoted=0, ifs_white=\"\", ifs=\"\", pwordexp=0x52ed4ed27ad11400, flags=\u003cunavailable\u003e, offset=\u003cunavailable\u003e, words=\u003cunavailable\u003e, max_length=0x000000009bffde80, word_length=\u003cunavailable\u003e, word=0x0000000000000000) at wordexp.c:1762:14\r\n    frame #1: 0x00007b9a21b144b4 libc.so.6`parse_dollars(word=0x0000000000000000, word_length=\u003cunavailable\u003e, max_length=0x000000009bffde80, words=\u003cunavailable\u003e, offset=\u003cunavailable\u003e, flags=\u003cunavailable\u003e, pwordexp=0x0000000000000000, ifs=0x0000000000000000, ifs_white=0x0000000000000000, quoted=0) at wordexp.c:2050:14\r\n  thread #4, stop reason = signal 0\r\n    frame #0: 0x00007b9a21a91117 libc.so.6`__old_fmemopen(buf=0x0000000000000000, len=0, mode=0x0000000000000000) at oldfmemopen.c:233:10\r\n  thread #5, stop reason = signal 0\r\n    frame #0: 0x00007b9a21a91117 libc.so.6`__old_fmemopen(buf=0x0000000000000000, len=0, mode=\"\") at oldfmemopen.c:233:10\r\n  thread #6, stop reason = signal 0\r\n    frame #0: 0x00007b9a21b18bcf libc.so.6`fts_read(sp=0x00007b99a1e0ed58) at fts.c:328:15\r\n    frame #1: 0x00007b9a216f9f92 libcoreclr.so`CorUnix::CPalSynchronizationManager::ReadCmdFromProcessPipe(this=0x00005b2d51fa8da0, iPollTimeout=-1, pswcWorkerCmd=0x00007b99a1e0ed54, pshridMarshaledData=0x00007b99a1e0ed58, pdwData=0x00007b99a1e0ed64) at synchmanager.cpp:2016:16 [opt]\r\n    frame #2: 0x00007b9a216f9097 libcoreclr.so`CorUnix::CPalSynchronizationManager::WorkerThread(pArg=0x00005b2d51fa8da0) at synchmanager.cpp:1719:37 [opt]\r\n    frame #3: 0x00007b9a2170c66f libcoreclr.so`CorUnix::CPalThread::ThreadEntry(pvParam=0x00005b2d51fa9cb0) at thread.cpp:1744:16 [opt]\r\n  thread #7, stop reason = signal 0\r\n    frame #0: 0x00007b9a21b25e2e libc.so.6`preadv64v2(fd=60, vector=0x00005b2d52395740, count=1024, offset=135901920517678, flags=0) at preadv64v2.c:25:1\r\n    frame #1: 0x00007b99a36e67ad\r\n    frame #2: 0x00007b99a36e6636\r\n    frame #3: 0x00007b9a214b43d0 libcoreclr.so`CallDescrWorkerInternal at calldescrworkeramd64.S:70\r\n    frame #4: 0x00007b9a21252a2b libcoreclr.so`CallDescrWorkerWithHandler(pCallDescrData=0x00007b5974ffdab0, fCriticalCall=\u003cunavailable\u003e) at callhelpers.cpp:63:5 [opt]\r\n    frame #5: 0x00007b9a21252d69 libcoreclr.so`DispatchCallSimple(pSrc=0x00007b5974ffdb40, numStackSlotsToCopy=0, pTargetAddress=135899812958456, dwDispatchCallSimpleFlags=\u003cunavailable\u003e) at callhelpers.cpp:245:9 [opt]\r\n    frame #6: 0x00007b9a21274a75 libcoreclr.so`ThreadNative::KickOffThread_Worker(ptr=\u003cunavailable\u003e) at comsynchronizable.cpp:157:5 [opt]\r\n    frame #7: 0x00007b9a212096ae libcoreclr.so`ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) [inlined] ManagedThreadBase_DispatchInner(pCallState=0x00007b5974ffdcf0) at threads.cpp:7110:5 [opt]\r\n    frame #8: 0x00007b9a212096a8 libcoreclr.so`ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) [inlined] ManagedThreadBase_DispatchMiddle(pCallState=0x00007b5974ffdcf0) at threads.cpp:7154:9 [opt]\r\n    frame #9: 0x00007b9a2120959f libcoreclr.so`ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) [inlined] ManagedThreadBase_DispatchOuter(this=\u003cunavailable\u003e, pParam=\u003cunavailable\u003e)::$_0::operator()(ManagedThreadBase_DispatchOuter(ManagedThreadCallState*)::TryArgs*) const::\u0027lambda\u0027(Param*)::operator()(Param*) const at threads.cpp:7312:13 [opt]\r\n    frame #10: 0x00007b9a2120959b libcoreclr.so`ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) [inlined] ManagedThreadBase_DispatchOuter(ManagedThreadCallState*)::$_0::operator()(this=\u003cunavailable\u003e, pArgs=\u003cunavailable\u003e) const at threads.cpp:7314:9 [opt]\r\n    frame #11: 0x00007b9a21209521 libcoreclr.so`ManagedThreadBase_DispatchOuter(pCallState=0x00007b5974ffdcf0) at threads.cpp:7338:5 [opt]\r\n    frame #12: 0x00007b9a21209cad libcoreclr.so`ManagedThreadBase::KickOff(void (*)(void*), void*) [inlined] ManagedThreadBase_FullTransition(pTarget=\u003cunavailable\u003e, args=\u003cunavailable\u003e, filterType=ManagedThread) at threads.cpp:7358:5 [opt]\r\n    frame #13: 0x00007b9a21209c95 libcoreclr.so`ManagedThreadBase::KickOff(pTarget=\u003cunavailable\u003e, args=\u003cunavailable\u003e) at threads.cpp:7393:5 [opt]\r\n    frame #14: 0x00007b9a21274c19 libcoreclr.so`ThreadNative::KickOffThread(pass=0x00005b2d52399750) at comsynchronizable.cpp:228:9 [opt]\r\n    frame #15: 0x00007b9a2170c66f libcoreclr.so`CorUnix::CPalThread::ThreadEntry(pvParam=0x00005b2d5239b050) at thread.cpp:1744:16 [opt]\r\n  thread #8, stop reason = signal 0\r\n    frame #0: 0x00007b9a21b1481c libc.so.6`parse_arith(word=0x0000000000000029, word_length=0x00007b59757fee1f, max_length=0x0000000000000001, words=\"H=\", offset=0x0000000000000000, flags=0, bracket=1971320384) at wordexp.c:653:1\r\n```",
                                           "updatedAt":  "2024-08-12T18:27:20Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Test failure: profiler/transitions/transitions/transitions.sh",
        "labels":  [
                       "disabled-test",
                       "os-linux",
                       "GCStress",
                       "arch-x64",
                       "area-Diagnostics-coreclr",
                       "blocking-clean-ci-optional"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/107344",
        "createdAt":  "2024-09-04T10:48:04Z",
        "number":  107344,
        "author":  "ppekrol",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-08T18:34:14Z",
        "body":  "### Description\r\n\r\nWhen dumps are being created on Windows 11 and Windows Server 2022 they cannot be always debugged correctly. Most of the time. This only happens when Single File App is being used. Here are my findings:\r\n\r\n| OS | Type | Behavior |\r\n| -------- | ------- | ------ |\r\n| W11 | Mini | Works |\r\n| W11 | Triage | Does not work |\r\n| W11 | Heap | Works |\r\n| W11 | Full | Works |\r\n| WS2022| Mini | Does not work |\r\n| WS2022 | Triage | Does not work |\r\n| WS2022 | Heap | Does not work |\r\n| WS2022 | Full | Works |\r\n\r\n\r\n### Reproduction Steps\r\n\r\n1. Create console app (.NET 8.0.8):\r\n```\r\nusing System.Diagnostics;\r\n\r\nusing (var process = Process.GetCurrentProcess())\r\n{\r\n    Console.WriteLine($\"PID: {process.Id}\");\r\n}\r\n\r\nvar mre = new ManualResetEvent(false);\r\n\r\nvar t = new Thread(() =\u003e\r\n{\r\n    Thread.CurrentThread.Name = \"Background Work\";\r\n\r\n    mre.WaitOne();\r\n});\r\n\r\nt.Start();\r\n\r\nConsole.WriteLine(\"Press any key to close...\");\r\nConsole.ReadLine();\r\n\r\nmre.Set();\r\nt.Join();\r\n\r\nConsole.WriteLine(\"Done\");\r\n```\r\n\r\n2. Publish `dotnet publish -c Release /p:PublishSingleFile=true` and run\r\n3. `dotnet-dump collect -p PID --type Triage`\r\n4. Open VS and click `Debug with Managed Only`\r\n![image](https://github.com/user-attachments/assets/06950074-163b-4f71-9c86-d60f35ec99a2)\r\n5. In that area we also found: https://developercommunity.visualstudio.com/t/Parallel-Stacks-do-not-display-threads-f/10738338?port=1025\u0026fsid=efce44a5-7c7a-474d-867d-c812b3de1d99\r\n\r\n### Expected behavior\r\n\r\nShould work?\r\n\r\n### Actual behavior\r\n\r\nDoes not work\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOqUkZ0A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6KyxIK",
                                           "createdAt":  "2024-09-04T10:51:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ppekrol",
                                           "body":  "Forgot to add:\r\n```\r\ndotnet-dump --version\r\n8.0.532401+d98406ff95be0a8398d4c403056c5705389665f3\r\n```",
                                           "updatedAt":  "2024-09-04T10:51:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6K0Vo3",
                                           "createdAt":  "2024-09-04T13:03:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ppekrol",
                                           "body":  "Checked also Linux:\r\n\r\n| OS | Type | Behavior |\r\n| -------- | ------- | ------ |\r\n| Ubuntu 24.04 | Mini | Does not work |\r\n| Ubuntu 24.04 | Triage | Does not work |\r\n| Ubuntu 24.04 | Heap | Does not work |\r\n| Ubuntu 24.04 | Full | Does not work |\r\n\r\nNot sure if the dumps are wrong, the file opens in VS without errors, but \u0027Debug Managed Code\u0027 throws an issue, or there is missing support for something in the VS?",
                                           "updatedAt":  "2024-09-04T13:03:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6K0YSf",
                                           "createdAt":  "2024-09-04T13:06:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODxUFPg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2024-09-06T18:12:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ppekrol",
                                           "body":  "In parallel we are testing same thing with `dotnet publish -c Release /p:PublishSingleFile=false -r linux-x64 --self-contained` and it works fine.",
                                           "updatedAt":  "2024-09-04T13:06:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LJwfW",
                                           "createdAt":  "2024-09-06T18:18:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Hi @ppekrol, unfortunately only full dumps are supported for single file applications - please see https://learn.microsoft.com/en-us/dotnet/core/diagnostics/collect-dumps-crash#types-of-mini-dumps.  It should be possible to workaround this limitation by deploying the matching [DAC](https://github.com/dotnet/runtime/blob/e79426e8936252dd68b834aed51751a315c53037/docs/design/coreclr/botr/dac-notes.md) next to the binary:\r\n* Windows: `mscordaccore.dll`\r\n* Linux: `libmscordaccore.so`\r\n* macOS: `libmscordaccore.dylib`\r\n\r\nHope this helps!",
                                           "updatedAt":  "2024-09-06T18:18:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LUdX0",
                                           "createdAt":  "2024-09-09T07:58:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ppekrol",
                                           "body":  "Hi @tommcdon \r\n\r\nWe have tested your suggestion on WS2022 and Ubuntu 24.04 but it does not have any effect.\r\n\r\n![image](https://github.com/user-attachments/assets/7be0ef32-0afa-4f05-bc55-6beb39a6fe51)\r\n\r\nSituation is as follows:\r\n| OS | Type | Behavior |\r\n| -------- | ------- | ------ |\r\n| WS2022| Mini | Does not work |\r\n| WS2022 | Triage | Does not work |\r\n| WS2022 | Heap | Does not work |\r\n| WS2022 | Full | Works |\r\n| Ubuntu 24.04 | Mini | Does not work |\r\n| Ubuntu 24.04 | Triage | Does not work |\r\n| Ubuntu 24.04 | Heap | Does not work |\r\n| **Ubuntu 24.04** | **Full** | **Does not work** |\r\n\r\nWhich worries me for few reasons:\r\n1. You stated that Full dumps should work, but they do not on Ubuntu 24.04\r\n2. Taking a full dump in many situations is a killer, especially when you use mmap\r\n3. All of those dumps can be opened in WinDBG, so the issue is in VS or in the dump file itself?",
                                           "updatedAt":  "2024-09-09T07:58:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Llxsy",
                                           "createdAt":  "2024-09-10T20:17:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@hoyosjs @mikem8361 ",
                                           "updatedAt":  "2024-09-10T20:17:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MUlHp",
                                           "createdAt":  "2024-09-16T23:28:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikem8361",
                                           "body":  "It looks like you are copying the Windows DAC (mscordaccore.dll) next to your app for WSL and Ubuntu 24.04. For Linux, you need to copy libmscordaccore.so.  This doesn\u0027t explain why Ubuntu 24.04 full dumps do not work. Add the --diag option to your dotnet-dump collect command line should produce some log output that may be helpful.  ",
                                           "updatedAt":  "2024-09-16T23:28:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MUnIV",
                                           "createdAt":  "2024-09-16T23:36:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikem8361",
                                           "body":  "I assumed when you said \"WS2022\" you meant WSL (Linux) but you mean Windows Server 2022 which should work with mscordaccore.dll next your app.",
                                           "updatedAt":  "2024-09-16T23:36:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MUrco",
                                           "createdAt":  "2024-09-16T23:55:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikem8361",
                                           "body":  "- Can you also clarify what you mean in your tables by \"Does not work\"?\r\n- Is the dump generated? \r\n- Can windbg load the dump? \r\n- Can VS load it? \r\n\r\nTriage dumps may have enough managed state for VS to load them. Windbg/SOS should work for all types of dumps.\r\n\r\nOn Windows Server 2022, it may not have the support needed to use the DAC that is a resource in your app like Windows 11 does. It probably needs these special registry keys set up to allow it to work:\r\n\r\nComputer\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\KnownFunctionTableDlls\r\nComputer\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\KnownManagedDebuggingDlls\r\nComputer\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\MiniDumpAuxiliaryDlls",
                                           "updatedAt":  "2024-09-16T23:55:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MYlX1",
                                           "createdAt":  "2024-09-17T10:34:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "arekpalinski",
                                           "body":  "\u003e * Can you also clarify what you mean in your tables by \"Does not work\"?\r\n\u003e \r\n\u003e * Is the dump generated?\r\n\u003e \r\n\u003e * Can windbg load the dump?\r\n\u003e \r\n\u003e * Can VS load it?\r\n\r\nIt means that the dump is generated, the WinDBG can load it but opening it in VS and trying \"Debug with Managed Only\" action results in:\r\n\r\n![image](https://github.com/user-attachments/assets/b734b0d3-f16c-4dfe-8a66-52b25d9388f1)\r\n\r\n\r\nIt doesn\u0027t mater whether it\u0027s Mini, Heap or Triage.\r\n\r\nRegarding the registry keys, we have the following values on Windows Server 2022 (we didn\u0027t modify anything there):\r\n\r\n![image](https://github.com/user-attachments/assets/ba028fc2-8128-4561-9cb6-5c6d33d8de58)\r\n\r\n![image](https://github.com/user-attachments/assets/193eff0b-4efb-433a-89a9-a873339916e4)\r\n\r\n![image](https://github.com/user-attachments/assets/6b82dbc9-570a-40db-a3fd-6154ad7872a2)\r\n\r\nThe application is using .NET 8.0.8\r\n",
                                           "updatedAt":  "2024-09-17T10:34:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6M7Qcy",
                                           "createdAt":  "2024-09-20T18:57:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikem8361",
                                           "body":  "I\u0027m not sure yet, why the WS2022 dumps are not being loaded by VS.  The reason Ubuntu 24.04 dumps are not being loaded by VS is probably that the .NET 8 you installed is a \"source-build\" version that Ubuntu has built/provided.  This means that the necessary debugging binaries are not available on the Microsoft symbol servers for download.  This is a common problem now that more and more distro\u0027s are building .NET themselves.  One solution is to install the Microsoft built .NET 8 SDK on your Ubuntu 24.04 machines. See [ubuntu-2404](https://learn.microsoft.com/en-us/dotnet/core/install/linux-ubuntu-install?tabs=dotnet8\u0026pivots=os-linux-ubuntu-2404#ubuntu-2404). You need to use the [Microsoft package repository](https://learn.microsoft.com/en-us/dotnet/core/install/linux-ubuntu#register-the-microsoft-package-repository).",
                                           "updatedAt":  "2024-09-20T18:57:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6NyNak",
                                           "createdAt":  "2024-09-27T08:34:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ppekrol",
                                           "body":  "Ok, so I installed Ubuntu 22.04 via Hyper-V Quick Create option, updated all packages and installed `dotnet-sdk-8.0` and `dotnet-dump` from Microsoft package repository (even switched the package repository priority in `/etc/apt/preferences`).\r\n\r\n```\r\n.NET SDK:\r\n Version:           8.0.402\r\n Commit:            70aa751718\r\n Workload version:  8.0.400-manifests.b6724b7a\r\n MSBuild version:   17.11.4+37eb419ad\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  22.04\r\n OS Platform: Linux\r\n RID:         linux-x64\r\n Base Path:   /usr/share/dotnet/sdk/8.0.402/\r\n\r\n.NET workloads installed:\r\nConfigured to use loose manifests when installing new manifests.\r\nThere are no installed workloads to display.\r\n\r\nHost:\r\n  Version:      8.0.8\r\n  Architecture: x64\r\n  Commit:       08338fcaa5\r\n\r\n.NET SDKs installed:\r\n  8.0.402 [/usr/share/dotnet/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 8.0.8 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 8.0.8 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nOther architectures found:\r\n  None\r\n\r\nEnvironment variables:\r\n  Not set\r\n\r\nglobal.json file:\r\n  Not found\r\n\r\nLearn more:\r\n  https://aka.ms/dotnet/info\r\n\r\nDownload .NET:\r\n  https://aka.ms/dotnet/download\r\n```\r\n\r\nWITHOUT `libmscordaccore.so` and `createdump` next to the app:\r\n\r\n1. `dotnet-dump collect -p PID --type Full --diag` =\u003e File created =\u003e in VS 2022 getting `Managed debugging is not available for this minidump`\r\n\r\n```\r\nWriting full to /home/ppekrol/Downloads/core_20240927_100714\r\nComplete\r\n```\r\n\r\nOutput:\r\n[full.txt](https://github.com/user-attachments/files/17161114/full.txt)\r\n\r\n2. `dotnet-dump collect -p PID --type Triage --diag` =\u003e File NOT created \r\n\r\n```\r\nWriting triage dump to /home/ppekrol/Downloads/core_20240927_101116\r\nComplete\r\n```\r\n\r\nOutput:\r\n[triage.txt](https://github.com/user-attachments/files/17161139/triage.txt)\r\n\r\n3. `dotnet-dump collect -p PID --type Heap --diag` =\u003e File NOT created \r\n\r\n```\r\nWriting dump with heap to /home/ppekrol/Downloads/core_20240927_101321\r\nComplete\r\n```\r\n\r\nOutput:\r\n[heap.txt](https://github.com/user-attachments/files/17161172/heap.txt)\r\n\r\n4. `dotnet-dump collect -p PID --type Mini --diag` =\u003e File NOT created \r\n\r\n```\r\nWriting dump to /home/ppekrol/Downloads/core_20240927_101655\r\nComplete\r\n```\r\n\r\nOutput:\r\n[mini.txt](https://github.com/user-attachments/files/17161195/mini.txt)\r\n\r\nWITH `libmscordaccore.so` and `createdump` next to the app:\r\n\r\n1. `dotnet-dump collect -p PID --type Full --diag` =\u003e File created =\u003e in VS 2022 getting `Managed debugging is not available for this minidump`\r\n\r\n```\r\nWriting full to /home/ppekrol/Downloads/core_20240927_102637\r\nComplete\r\n```\r\n\r\nOutput:\r\n[full2.txt](https://github.com/user-attachments/files/17161321/full2.txt)\r\n\r\n2. `dotnet-dump collect -p PID --type Triage --diag` =\u003e File created =\u003e in VS 2022 getting `Managed debugging is not available for this minidump`\r\n\r\n```\r\nWriting triage dump to /home/ppekrol/Downloads/core_20240927_103140\r\nComplete\r\n```\r\n\r\nOutput:\r\n[triage2.txt](https://github.com/user-attachments/files/17161375/triage2.txt)\r\n\r\n3. `dotnet-dump collect -p PID --type Heap --diag` =\u003e File created =\u003e in VS 2022 getting `Managed debugging is not available for this minidump`\r\n\r\n```\r\nWriting dump with heap to /home/ppekrol/Downloads/core_20240927_102936\r\nComplete\r\n```\r\n\r\nOutput:\r\n[heap2.txt](https://github.com/user-attachments/files/17161356/heap2.txt)\r\n\r\n4. `dotnet-dump collect -p PID --type Mini --diag` =\u003e File created =\u003e in VS 2022 getting `Managed debugging is not available for this minidump`\r\n\r\n```\r\nWriting dump to /home/ppekrol/Downloads/core_20240927_103306\r\nComplete\r\n```\r\n\r\nOutput:\r\n[mini2.txt](https://github.com/user-attachments/files/17161398/mini2.txt)\r\n\r\n",
                                           "updatedAt":  "2024-09-27T08:34:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PkeB9",
                                           "createdAt":  "2024-10-12T21:15:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ppekrol",
                                           "body":  "Any update on this?",
                                           "updatedAt":  "2024-10-12T21:15:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6lsd6V",
                                           "createdAt":  "2025-04-04T23:28:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikem8361",
                                           "body":  "I was wrong about the [Microsoft package repository](https://learn.microsoft.com/en-us/dotnet/core/install/linux-ubuntu#register-the-microsoft-package-repository) containing Ubuntu packages.  It seems that Ubuntu packages are source-built so the debugger modules (DAC/DBI) can not be downloaded from the Microsoft symbol servers. The coredumps should be generated correctly but loading them under SOS needs some help: you need to use the `setclrpath` command with the directory of the matching runtime/debugger modules (libmscordacore.so/libmscordbi.so). \n\nOr you can install a Microsoft .NET with the [dotnet-install.sh](https://dot.net/v1/dotnet-install.sh) script locally with `dotnet-install.sh --version 8.0.407 --install-dir $HOME/dotnet8` (more on that [here](https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-install-script)).  You need to set the DOTNET_ROOT env var like `export DOTNET_ROOT=$HOME/dotnet8` before you run the app that generates the core dump. VS or dotnet-dump/SOS should work without any extra help.",
                                           "updatedAt":  "2025-04-04T23:28:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6oIEI6",
                                           "createdAt":  "2025-04-22T09:13:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ppekrol",
                                           "body":  "We moved away from Single File App, I cannot assist you further here.",
                                           "updatedAt":  "2025-04-22T09:13:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6pSRnQ",
                                           "createdAt":  "2025-04-29T20:17:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Re-opening to track addressing WS2022 single-file support.  The issue stems from auxiliary mini-dump provider logic only existing in Windows 11 and not in Windows Server 2022.",
                                           "updatedAt":  "2025-04-29T20:17:47Z"
                                       }
                                   ],
                         "totalCount":  16
                     },
        "title":  "Issues with memory dumps and Single File App",
        "labels":  [
                       "tracking-external-issue",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/108230",
        "createdAt":  "2024-09-25T10:17:41Z",
        "number":  108230,
        "author":  "ww898",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC7bjUw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ForNeVeR",
                                            "createdAt":  "2024-09-25T12:23:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Anna-Guseva",
                                            "createdAt":  "2024-09-26T09:57:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Ed-Pavlov",
                                            "createdAt":  "2024-09-30T13:02:04Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2025-07-07T12:43:11Z",
        "body":  "Hi, this is a proposal to speed up the profiler in case the profiler does not use `ICorProfilerCallback::ObjectsAllocatedByClass` callback for its work, but wants to use other GC callbacks activated by `COR_PRF_MONITOR_GC`. We can completely disable the `DiagWalkHeap(\u0026AllocByClassHelper, (void *)\u0026context, 0, false)` call in this case. For that I propose to create a separate additional flag in `COR_PRF_HIGH_MONITOR`, for example `COR_PRF_HIGH_MONITOR_GC_SKIP_ALLOCATED_BY_CLASS_STATISTIC`.\r\n\r\nThe reason: in according to my measurements on .NET 8.0.8 x64, `DiagWalkHeap` sometimes takes from 18 to 35 seconds on my scenario with the server GC. I measured the time between `ICorProfilerCallback2::GarbageCollectionStarted` and `ICorProfilerCallback::ObjectsAllocatedByClass` callbacks.\r\n\r\nThe original code:\r\nhttps://github.com/dotnet/runtime/blob/080fcae7eaa8367abf7900e08ff2e52e3efea5bf/src/coreclr/vm/gcenv.ee.cpp#L813-L822\r\n\r\nP.S. Discussion is welcome...",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOj1VLtg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Nez_W",
                                           "createdAt":  "2024-09-25T10:18:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-25T10:18:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Npdx-",
                                           "createdAt":  "2024-09-26T09:41:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ww898",
                                           "body":  "This is the two charts measured by me with the server GC enabled. I used completely the empty profiler: no any actions in callback except minimum logs. Horizontal axis is GC number. The first chart show time in mS from `GarbageCollectionStarted ` callback to `ObjectsAllocatedByClass` and `GarbageCollectionFinished` callbacks. The second is `GarbageCollectionFinished`-`ObjectsAllocatedByClass` time.\r\n![image](https://github.com/user-attachments/assets/a47cfcf4-60d0-425e-8199-40e756db6da3)\r\n",
                                           "updatedAt":  "2024-09-26T18:37:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6OEcRe",
                                           "createdAt":  "2024-09-30T15:29:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@mdh1418 @cshung ",
                                           "updatedAt":  "2024-09-30T15:29:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6OGbHV",
                                           "createdAt":  "2024-09-30T20:03:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "The proposal seems reasonable to me. @ww898, would you mind trying it out and share with us the perf improvement?",
                                           "updatedAt":  "2024-09-30T20:03:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6OP2-B",
                                           "createdAt":  "2024-10-01T16:59:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ww898",
                                           "body":  "@cshung Yes, of course. Thanks a lot.",
                                           "updatedAt":  "2024-10-01T16:59:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PAjDx",
                                           "createdAt":  "2024-10-08T09:06:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "is what [`COR_PRF_HIGH_BASIC_GC`](https://github.com/dotnet/coreclr/pull/22866) offers insufficient? if so could you please let us know what you\u0027d like on top of it? ",
                                           "updatedAt":  "2024-10-08T09:06:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PVUu2",
                                           "createdAt":  "2024-10-10T10:39:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ww898",
                                           "body":  "@Maoni0 Using `COR_PRF_HIGH_BASIC_GC` is not possible because I need graph of objects (`ICorProfilerCallback::ObjectReferences` callbacks), finalizeable objects (`ICorProfilerCallback2::FinalizeableObjectQueued`).",
                                           "updatedAt":  "2024-10-10T10:39:06Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "[Profiler] Ability to avoid `ICorProfilerCallback::ObjectsAllocatedByClass` callback when `COR_PRF_MONITOR_GC` is set.",
        "labels":  [
                       "enhancement",
                       "tenet-performance",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/108553",
        "createdAt":  "2024-10-04T17:16:31Z",
        "number":  108553,
        "author":  "lambdageek",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-22T18:22:50Z",
        "body":  "See [DAC interfaces used by CLRMA](https://github.com/dotnet/diagnostics/blob/main/documentation/clrma.md#dac-interfaces-used-by-clrma) in the diagnostics repo.\n\nThis is a follow-up to #99302, contributes to #99298 \n\n- [x] APIs added as part of `!PrintException` support\n   - [x] ISOSDacInterface::GetUsefulGlobals()\n   - [x] ISOSDacInterface::GetThreadStoreData()\n   - [x] ISOSDacInterface::GetThreadData()\n   - [x] ISOSDacInterface::GetNestedExceptionData()\n   - [x] ISOSDacInterface::GetObjectData()\n   - [x] ISOSDacInterface2::GetObjectExceptionData()\n   - [x] ISOSDacInterface::GetMethodTableName()\n   - [x] ISOSDacInterface::GetMethodTableData()\n   - [x] ISOSDacInterface::GetObjectStringData()\n   - [x] ISOSDacInterface::GetMethodDescName()\n   - [x] ISOSDacInterface::GetModuleData()\n   - [x] ISOSDacInterface::GetPEFileName()\n- [ ] Complete `GetMethodDescData`\n   - [x] #106413\n   - [x] #108685\n   - [x] https://github.com/dotnet/runtime/pull/109021\n   - [x] #109030\n   - [x] https://github.com/dotnet/runtime/pull/109187  \n   - [x] #109426\n   - [ ] #109425\n   - [x] #110755\n- [x] https://github.com/dotnet/runtime/issues/108450\n- [x] cdac `IXCLRDataModule` implementation: Module name fallback if debugger and GetPEFileName() can\u0027t get the name.\n   - [x] ISOSDacInterface::GetModule() - https://github.com/dotnet/runtime/pull/109133\n   - [x] IXCLRDataModule::GetFileName() - https://github.com/dotnet/runtime/pull/109133\n- [ ] Managed stack walking\n   - [x] IXCLRDataProcess::GetTaskByOSThreadID() - https://github.com/dotnet/runtime/pull/109230\n   - [x] IXCLRDataTask::CreateStackWalk() - https://github.com/dotnet/runtime/pull/109350\n   - [x] IXCLRDataStackWalk::Request(DACSTACKPRIV_REQUEST_FRAME_DATA, ...)\n   - [x] IXCLRDataStackWalk::GetContext()\n   - [x] IXCLRDataStackWalk::Next()\n   - [ ] #110758\n\n\nA related issue is #108720 tracking the work to deploy cdac with SOS\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjrRaUA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6OtFpQ",
                                           "createdAt":  "2024-10-04T17:16:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-04T17:16:49Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[cdac] .NET10: Implement DAC APIs used by CLRMA",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr",
                       "tracking"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/108720",
        "createdAt":  "2024-10-09T16:39:13Z",
        "number":  108720,
        "author":  "lambdageek",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-22T18:22:32Z",
        "body":  "Part of #99298 \n\nWe would like to ship the cdac together with [SOS](https://github.com/dotnet/diagnostics/tree/main/src/SOS) and to allow SOS to load and use the cdac instead of the brittle DAC in .NET 10.  This issue tracks the runtime changes necessary, and summarizes the SOS changes.\n\n* [x] Rename `cdacreader.dll` to `mscorcdac.dll` (*see comments* new name is still up in flux)\n* [ ] Remove brittle DAC ability to load \u0026 delegate to cDAC\n* [ ] Remove the `cdacreader_` entrypoints from mscorcdac\n* [x] Define a `ICLRRuntmeSymbol` IDL interface with a `TryGetSymbol` API (for finding the cDAC machine descriptor from a target image) - https://github.com/dotnet/diagnostics/pull/5392\n* [x] Add a `CLRDataCreateInstance` entrypoint to cdac and use it to instantiate the ContractDescriptorTarget and the SOSDacImpl #112583\n* [x] Publish `mscorcdac.dll` in a transport packages. \n    We will need one per supported SOS platform (that is, platforms where SOS can run, not platforms that it can debug)\n* [x] (nice to have) https://github.com/dotnet/runtime/issues/104158\n\nSummary SOS changes:\n* Add a command to select cdac vs brittle DAC\n* Pull the apropriate platform-specific `mscorcdac.dll` from the transport nuget feed and consume it in the SOS build and publish `mscorcdac.dll` together with SOS\n* Implement the `ICLRRuntimeSymbol::TryGetSymbol` API on the `ICLRDataTarget` passed to `CLRDataCreateInstance`\n* Load and instantiate cdac instead of the brittle DAC, if enabled\n* Work with WinDbg to change how SOS is inserted and consumed\n\nA related issue https://github.com/dotnet/runtime/issues/108553 is tracking the work to implement in cdac the DAC APIs needed by SOS and CLRMA\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOj4mO8Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6PN_bZ",
                                           "createdAt":  "2024-10-09T16:39:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-09T16:39:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6POGFb",
                                           "createdAt":  "2024-10-09T16:54:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "The entrypoint would be\n\n```c\nSTDAPI CLRDataCreateInstance(REFIID iid, ICLRDataTarget* target, void** iface);\n```\n\nWhere iid will be one of the ISOSDacInterfaceNN interfaces\n\nThe cdac as currently imagined needs two things to get going: \n1. A way to read from the target address space\n2. The address of the contract descriptor which is a symbol with the name `DotNetRuntimeContractDescriptor`\n\nWe can get the former using `ICLRDataTarget::ReadVirtual`.\n\nFor the latter we could QI `target` for an interface like this:\n \n```cxx\ninterface ICLRRuntimeSymbol : IUnknown\n{\n   HRESULT TryGetSymbol([in] LPCSTR symbolName, [out] CLRDATA_ADDRESS* address);\n}\n```\n\nsimilar to what the brittle DAC does with `ICLRRuntimeLocator`",
                                           "updatedAt":  "2024-10-09T22:38:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PP8Vh",
                                           "createdAt":  "2024-10-09T19:57:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "I assume when SOS is targetting downlevel runtimes it would still load an older brittle DAC?",
                                           "updatedAt":  "2024-10-09T19:57:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PQBCF",
                                           "createdAt":  "2024-10-09T20:09:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD1hZAA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "noahfalk",
                                                                               "createdAt":  "2024-10-10T04:54:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "\u003e I assume when SOS is targetting downlevel runtimes it would still load an older brittle DAC?\n\nI think there\u0027s two separate answers:\n1. In the long term, SOS should have some kind of a policy. For example: try the cdac and if it returns E_NOTIMPL or some other error code, try a brittle DAC.  (I\u0027m not sure what a reasonable policy might be)\n2. For the purposes of trying things out, @mikem8361  and I were talking about having some gesture (ie: you have to run some SOS command) to opt into the cdac.",
                                           "updatedAt":  "2024-10-09T20:09:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PQNxC",
                                           "createdAt":  "2024-10-09T20:42:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD1eo_w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lambdageek",
                                                                               "createdAt":  "2024-10-09T21:08:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mikem8361",
                                           "body":  "\u003e We can get the former using `ICLRDataTarget::ReadVirtual` and the latter using something like this:\n\u003e \n\u003e interface ICLRDataTarget4 : ICLRDataTarget3\n\u003e {\n\u003e    HRESULT TryGetSymbol([in] LPCSTR symbolName, [out] CLRDATA_ADDRESS* address);\n\u003e }\n\nNow I\u0027m thinking this should be more like ICLRRuntimeLocator and not inherit with only TryGetSymbol on it.  It would allow a more minimal data target impl for cases that are only going to use the cDAC (like in testing, etc.). SOS will have to implement all the interfaces it does now and it would be easy to add this one more.  We can call it something like ICLRRuntimeSymbol.   ",
                                           "updatedAt":  "2024-10-09T20:42:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PREn0",
                                           "createdAt":  "2024-10-09T23:31:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD1mJkQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lambdageek",
                                                                               "createdAt":  "2024-10-10T13:10:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "What about for diagnostic experiences that currently depend on contracts not defined by `ISOSDacInterfaceX` interfaces? In particular, there are a few that depend on the \"SOS Breaking Change Version\".\n\nSome of these APIs are relatively easily representable in cDAC contracts with a managed API but projecting them through an unmanaged interface could be expensive. Is there some way we could come up with a solution that wouldn\u0027t require going through an unmanaged API?",
                                           "updatedAt":  "2024-10-09T23:31:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PWisN",
                                           "createdAt":  "2024-10-10T13:09:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD1nITQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkoritzinsky",
                                                                               "createdAt":  "2024-10-10T14:47:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "\u003e What about for diagnostic experiences that currently depend on contracts not defined by `ISOSDacInterfaceX` interfaces? In particular, there are a few that depend on the \"SOS Breaking Change Version\".\n\u003e \n\u003e Some of these APIs are relatively easily representable in cDAC contracts with a managed API but projecting them through an unmanaged interface could be expensive. Is there some way we could come up with a solution that wouldn\u0027t require going through an unmanaged API?\n\nI think mscorcdac and Microsoft.Diagnostics.DataContractReader are separate products (that happen to be built from substantially similar sources).  We could have a separate plan for how we ship the managed library.",
                                           "updatedAt":  "2024-10-10T13:09:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PhVKK",
                                           "createdAt":  "2024-10-11T17:51:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003e mscorcdac.dll\n\nThis name is a bit suspect. We\u0027ve removed \"ms\" from many places - `mscorlib` being the most obvious example. Another issue with this name is that it is far too similar to existing names. That \"c\" in the middle is doing a lot to lifting to handle the disambiguation when quickly reading names. I would suggest something like spelling out the \"dac\" or even just dropping the \"ms\" - `cordac` or perhaps `diagnostic.access.control`?",
                                           "updatedAt":  "2024-10-11T17:51:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PhZyj",
                                           "createdAt":  "2024-10-11T18:05:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikem8361",
                                           "body":  "I\u0027m not hung up on the name.  I suggested something similar to the existing DAC name, but not for any good reason. I guess I assumed that \"ms\" was supposed to be in the name.",
                                           "updatedAt":  "2024-10-11T18:05:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PiY7x",
                                           "createdAt":  "2024-10-11T21:41:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "\u003e diagnostic.access.control\n\nThe original acronym DAC stands for \"Data Access Component\". Its a pretty generic name :) I\u0027d avoid \"access control\" as that term has strong connotations of security authentication and authorization. Any of these names sounded fine to me:\ncdac.dll, cordac.dll, contractdac.dll\n",
                                           "updatedAt":  "2024-10-11T21:42:14Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "[cdac] Deploy cdac with SOS in .NET 10",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr",
                       "tracking"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/109103",
        "createdAt":  "2024-10-22T07:41:18Z",
        "number":  109103,
        "author":  "dev991301",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-08T18:33:26Z",
        "body":  "### Description\n\nWhen the debugger is attached to an application that repeatedly creates and joins with short-lived threads, performance monitor shows the handles associated with the application growing linearly. The growth was observed when run with the debugger in Visual Studio Code, Visual Studio and JetBrains Rider.\n\nWhen the same application is run via \"dotnet run\" from a terminal, the handle count is stable.\n\n### Reproduction Steps\n\n```csharp\nwhile (true)\n{\n    var thread = new Thread(() =\u003e Thread.Sleep(1_000));\n    thread.Start();\n    thread.Join();\n    GC.Collect();\n    GC.WaitForPendingFinalizers();\n    Console.WriteLine($\"{DateTime.Now} iterate\");\n}\n```\n\n### Expected behavior\n\nIt is expected that performance monitor would show the handle count as stable like it shows when run via \"dotnet run\". Below is a screenshot of what performance monitor shows when running the application under \"dotnet run\". \n![Image](https://github.com/user-attachments/assets/960fd55c-ba74-4fff-835a-e4ae90a6b154)\n\n\n\n### Actual behavior\n\nBelow is a screenshot of what performance monitor shows when run with the debugger in Visual Studio Code. The same growth is observed when run with the debugger attached in Visual Studio and JetBrains Rider.\n![Image](https://github.com/user-attachments/assets/d72d88fa-27d6-4ee1-9838-7bc3b2746aa9)\n\n\n\n### Regression?\n\nThe application running under the debugger shows the growth in the handles in .NET 8 and .NET Framework 4.8.\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET 8 and .NET Framework 4.8\nWindows 11\nx64\n\n### Other information\n\nWhen the application is run under WinDbg, it does not show growth in the handles. So possibly it is in the managed debugging code.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOkcE2IA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Qv_E_",
                                           "createdAt":  "2024-10-22T07:41:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-22T07:41:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Rv7dB",
                                           "createdAt":  "2024-10-29T20:24:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Hello @dev991301!  Thanks for reporting this issue!   Is this issue blocking or causing a negative impact to the development environment, or is this more of an observation but isn\u0027t causing any issues?",
                                           "updatedAt":  "2024-10-29T20:24:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6RwRFl",
                                           "createdAt":  "2024-10-29T21:18:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD4nRgQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2024-10-29T21:19:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "dev991301",
                                           "body":  "This issue isn\u0027t currently blocking my work.\n\nI was debugging a crash that only happens after my application runs for long periods of time when I noticed a handle leak. \n\nI spent a long time trying to figure out if my application also had a handle leak or if the leak was related to the crash. Once I figured out it was just a side effect of running it in the debugger, I decided to create this issue so anyone else noticing the problem could find this report.",
                                           "updatedAt":  "2024-10-29T21:18:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6RwTYg",
                                           "createdAt":  "2024-10-29T21:24:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Thanks @dev991301!  To clarify the location of the handle leak - is the handle leak machine-wide, or specific to a process?  Based off the description it sounds like the app is leaking handles, but it would be good to verify - when debugging, the debugger (e.g. Visual Studio) and the target app it is debugging both are tracking threads.  I am curious if the handle leak is specific to the app, debugger, or something else.",
                                           "updatedAt":  "2024-10-29T21:24:57Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Running console application that creates and joins with short-lived threads leaks handles when debugger is attached",
        "labels":  [
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/109281",
        "createdAt":  "2024-10-28T14:10:34Z",
        "number":  109281,
        "author":  "LunarWhisper",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-05-06T10:45:30Z",
        "body":  "### Description\n\nIn a large project containing a massive number of types (~14 000), the generated .pdb file becomes incompatible with tools like WinDBG and symstore.exe once it reaches a certain size. However, the IDE handles these files without any issues.\n\nThis is a continuation of the issue in which we found a similar problem with the number of files greater than UInt16.MaxValue, but now it fires on a smaller number of files.\nhttps://github.com/dotnet/runtime/issues/108833\n\n### Reproduction Steps\n\nWe don\u0027t know how or why this happens.\n\n### Expected behavior\n\n```\nSYMSTORE MESSAGE: Copying Core.pdb to ...\nSYMSTORE: Number of files stored = 1\nSYMSTORE: Number of errors = 0\nSYMSTORE: Number of files ignored = 0\n```\n.pdb saved on target\n\n### Actual behavior\n\nOn small projects everything works as usual without any errors.\n\nOn large real project:\n```\nSYMSTORE: Number of files stored = 0\nSYMSTORE: Number of errors = 0\nSYMSTORE: Number of files ignored = 1\n```\n\nAccessViolation thrown inside:\n\n```\n0:000\u003e gn\nModLoad: 00007ff9`1aad0000 00007ff9`1ab4b000   C:\\WINDOWS\\System32\\bcryptPrimitives.dll\n(96c.542c): Access violation - code c0000005 (first chance)\nFirst chance exceptions are reported before any exception handling.\nThis exception may be expected and handled.\ndbghelp!DBI1::addFileInfo+0x125:\n00007ff8`632435d5 42893ca0        mov     dword ptr [rax+r12*4],edi ds:0000023e`21c39000=????????\n0:004\u003e k\n # Child-SP          RetAddr               Call Site\n00 00000049`7a07ba50 00007ff8`6325d3fd     dbghelp!DBI1::addFileInfo+0x125\n01 00000049`7a07bac0 00007ff8`632597ff     dbghelp!Mod1::processC13+0x7ad\n02 00000049`7a07bd70 00007ff8`6325ad7b     dbghelp!Mod1::fProcessSyms+0x11ff\n03 00000049`7a07be30 00007ff8`632504e7     dbghelp!Mod1::fUpdateSyms+0x1b\n04 00000049`7a07be60 00007ff8`6323638f     dbghelp!Mod1::Close+0x207\n05 00000049`7a07bee0 00007ff8`63221dd4     dbghelp!PortablePDB::ConvertPortablePDB+0x3df\n06 00000049`7a07c820 00007ff8`632211cd     dbghelp!PDB1::OpenPortablePDB+0x84\n07 00000049`7a07c860 00007ff8`63221585     dbghelp!PDB1::OpenEx2W+0x5ed\n08 00000049`7a07c920 00007ff8`6323273b     dbghelp!PDB::OpenEx2W+0x35\n09 00000049`7a07c970 00007ff8`632898c7     dbghelp!PDBCommon::Open2W+0x2b\n0a 00000049`7a07c9c0 00007ff8`63289729     dbghelp!CDiaDataSource::loadDataFromPdbHelper+0x57\n0b 00000049`7a07ca10 00007ff8`6332a2fd     dbghelp!CDiaDataSource::loadDataFromPdb+0x19\n0c 00000049`7a07ca50 00007ff8`63336e9a     dbghelp!DiaOpenPdbEx+0x201\n0d 00000049`7a07cb00 00007ff8`633363d9     dbghelp!diaOpenPdb+0x56\n0e 00000049`7a07cb60 00007ff8`6333336b     dbghelp!diaLocatePdb+0x17d\n0f 00000049`7a07d8c0 00007ff8`6335837a     dbghelp!diaGetPdb+0x29f\n10 00000049`7a07db90 00007ff8`6335cce8     dbghelp!GetDebugData+0x2de\n11 00000049`7a07de20 00007ff8`6335c99b     dbghelp!modloadWorker+0x2e0\n12 00000049`7a07e320 00007ff8`63358ff4     dbghelp!modload+0xff\n13 00000049`7a07e5c0 00007ff8`63352b30     dbghelp!LoadModule+0x608\n14 00000049`7a07eae0 00007ff6`fc5f58cf     dbghelp!SymLoadModuleEx+0x80\n15 00000049`7a07eb50 00007ff6`fc5f025f     SymStore!SymCommonGetFileInformation+0x13f\n16 00000049`7a07f290 00007ff9`1b09257d     SymStore!Add1ChildThread+0x57f\n17 00000049`7a07fed0 00007ff9`1cf6af28     KERNEL32!BaseThreadInitThunk+0x1d\n18 00000049`7a07ff00 00000000`00000000     ntdll!RtlUserThreadStart+0x28\n\n0:004\u003e gn\n(96c.542c): Access violation - code c0000005 (first chance)\nFirst chance exceptions are reported before any exception handling.\nThis exception may be expected and handled.\nntdll!RtlpLocateRelatedBlocks+0xa7:\n00007ff9`1d02743f 488b7a10        mov     rdi,qword ptr [rdx+10h] ds:003d06dd`003d067b=????????????????\n0:004\u003e k\n # Child-SP          RetAddr               Call Site\n00 00000049`7a079be0 00007ff9`1d025dde     ntdll!RtlpLocateRelatedBlocks+0xa7\n01 00000049`7a079c00 00007ff9`1d031de5     ntdll!RtlpHpHeapHandleError+0x6e\n02 00000049`7a079c30 00007ff9`1d025a93     ntdll!RtlpLogHeapFailure+0x45\n03 00000049`7a079c60 00007ff9`1cf50793     ntdll!RtlpAnalyzeHeapFailure+0x30f\n04 00000049`7a079cc0 00007ff9`1cf4d239     ntdll!RtlpAllocateHeap+0x1663\n05 00000049`7a079f20 00007ff9`1d014772     ntdll!RtlpAllocateHeapInternal+0x6c9\n06 00000049`7a07a020 00007ff9`1cfce0da     ntdll!RtlDebugAllocateHeap+0x102\n07 00000049`7a07a0c0 00007ff9`1cf4d239     ntdll!RtlpAllocateHeap+0x7efaa\n08 00000049`7a07a320 00007ff9`1a5e33ae     ntdll!RtlpAllocateHeapInternal+0x6c9\n09 00000049`7a07a420 00007ff9`1a6220cb     ucrtbase!_calloc_base+0x4e\n0a 00000049`7a07a450 00007ff9`1a622051     ucrtbase!_vcrt_getptd_noexit+0x63\n0b 00000049`7a07a480 00007ff9`1a6148da     ucrtbase!_vcrt_getptd+0x9\n0c 00000049`7a07a4b0 00007ff9`1cfb51df     ucrtbase!_CxxFrameHandler3+0x2a\n0d 00000049`7a07a500 00007ff9`1cf2e866     ntdll!RtlpExecuteHandlerForException+0xf\n0e 00000049`7a07a530 00007ff9`1cfb41ce     ntdll!RtlDispatchException+0x286\n0f 00000049`7a07ac80 00007ff8`632435d5     ntdll!KiUserExceptionDispatch+0x2e\n10 00000049`7a07ba50 00007ff8`6325d3fd     dbghelp!DBI1::addFileInfo+0x125\n11 00000049`7a07bac0 00007ff8`632597ff     dbghelp!Mod1::processC13+0x7ad\n12 00000049`7a07bd70 00007ff8`6325ad7b     dbghelp!Mod1::fProcessSyms+0x11ff\n13 00000049`7a07be30 00007ff8`632504e7     dbghelp!Mod1::fUpdateSyms+0x1b\n14 00000049`7a07be60 00007ff8`6323638f     dbghelp!Mod1::Close+0x207\n15 00000049`7a07bee0 00007ff8`63221dd4     dbghelp!PortablePDB::ConvertPortablePDB+0x3df\n16 00000049`7a07c820 00007ff8`632211cd     dbghelp!PDB1::OpenPortablePDB+0x84\n17 00000049`7a07c860 00007ff8`63221585     dbghelp!PDB1::OpenEx2W+0x5ed\n18 00000049`7a07c920 00007ff8`6323273b     dbghelp!PDB::OpenEx2W+0x35\n19 00000049`7a07c970 00007ff8`632898c7     dbghelp!PDBCommon::Open2W+0x2b\n1a 00000049`7a07c9c0 00007ff8`63289729     dbghelp!CDiaDataSource::loadDataFromPdbHelper+0x57\n1b 00000049`7a07ca10 00007ff8`6332a2fd     dbghelp!CDiaDataSource::loadDataFromPdb+0x19\n1c 00000049`7a07ca50 00007ff8`63336e9a     dbghelp!DiaOpenPdbEx+0x201\n1d 00000049`7a07cb00 00007ff8`633363d9     dbghelp!diaOpenPdb+0x56\n1e 00000049`7a07cb60 00007ff8`6333336b     dbghelp!diaLocatePdb+0x17d\n1f 00000049`7a07d8c0 00007ff8`6335837a     dbghelp!diaGetPdb+0x29f\n20 00000049`7a07db90 00007ff8`6335cce8     dbghelp!GetDebugData+0x2de\n21 00000049`7a07de20 00007ff8`6335c99b     dbghelp!modloadWorker+0x2e0\n22 00000049`7a07e320 00007ff8`63358ff4     dbghelp!modload+0xff\n23 00000049`7a07e5c0 00007ff8`63352b30     dbghelp!LoadModule+0x608\n24 00000049`7a07eae0 00007ff6`fc5f58cf     dbghelp!SymLoadModuleEx+0x80\n25 00000049`7a07eb50 00007ff6`fc5f025f     SymStore!SymCommonGetFileInformation+0x13f\n26 00000049`7a07f290 00007ff9`1b09257d     SymStore!Add1ChildThread+0x57f\n27 00000049`7a07fed0 00007ff9`1cf6af28     KERNEL32!BaseThreadInitThunk+0x1d\n28 00000049`7a07ff00 00000000`00000000     ntdll!RtlUserThreadStart+0x28\n\n0:004\u003e gn\nCritical error detected c0000374\n(96c.542c): Break instruction exception - code 80000003 (first chance)\nntdll!RtlReportCriticalFailure+0x56:\n00007ff9`1d01ca32 cc              int     3\n0:004\u003e k\n # Child-SP          RetAddr               Call Site\n00 00000049`7a079ae0 00007ff9`1d025b0a     ntdll!RtlReportCriticalFailure+0x56\n01 00000049`7a079bd0 00007ff9`1d025dea     ntdll!RtlpHeapHandleError+0x12\n02 00000049`7a079c00 00007ff9`1d031de5     ntdll!RtlpHpHeapHandleError+0x7a\n03 00000049`7a079c30 00007ff9`1d025a93     ntdll!RtlpLogHeapFailure+0x45\n04 00000049`7a079c60 00007ff9`1cf50793     ntdll!RtlpAnalyzeHeapFailure+0x30f\n05 00000049`7a079cc0 00007ff9`1cf4d239     ntdll!RtlpAllocateHeap+0x1663\n06 00000049`7a079f20 00007ff9`1d014772     ntdll!RtlpAllocateHeapInternal+0x6c9\n07 00000049`7a07a020 00007ff9`1cfce0da     ntdll!RtlDebugAllocateHeap+0x102\n08 00000049`7a07a0c0 00007ff9`1cf4d239     ntdll!RtlpAllocateHeap+0x7efaa\n09 00000049`7a07a320 00007ff9`1a5e33ae     ntdll!RtlpAllocateHeapInternal+0x6c9\n0a 00000049`7a07a420 00007ff9`1a6220cb     ucrtbase!_calloc_base+0x4e\n0b 00000049`7a07a450 00007ff9`1a622051     ucrtbase!_vcrt_getptd_noexit+0x63\n0c 00000049`7a07a480 00007ff9`1a6148da     ucrtbase!_vcrt_getptd+0x9\n0d 00000049`7a07a4b0 00007ff9`1cfb51df     ucrtbase!_CxxFrameHandler3+0x2a\n0e 00000049`7a07a500 00007ff9`1cf2e866     ntdll!RtlpExecuteHandlerForException+0xf\n0f 00000049`7a07a530 00007ff9`1cfb41ce     ntdll!RtlDispatchException+0x286\n10 00000049`7a07ac80 00007ff8`632435d5     ntdll!KiUserExceptionDispatch+0x2e\n11 00000049`7a07ba50 00007ff8`6325d3fd     dbghelp!DBI1::addFileInfo+0x125\n12 00000049`7a07bac0 00007ff8`632597ff     dbghelp!Mod1::processC13+0x7ad\n13 00000049`7a07bd70 00007ff8`6325ad7b     dbghelp!Mod1::fProcessSyms+0x11ff\n14 00000049`7a07be30 00007ff8`632504e7     dbghelp!Mod1::fUpdateSyms+0x1b\n15 00000049`7a07be60 00007ff8`6323638f     dbghelp!Mod1::Close+0x207\n16 00000049`7a07bee0 00007ff8`63221dd4     dbghelp!PortablePDB::ConvertPortablePDB+0x3df\n17 00000049`7a07c820 00007ff8`632211cd     dbghelp!PDB1::OpenPortablePDB+0x84\n18 00000049`7a07c860 00007ff8`63221585     dbghelp!PDB1::OpenEx2W+0x5ed\n19 00000049`7a07c920 00007ff8`6323273b     dbghelp!PDB::OpenEx2W+0x35\n1a 00000049`7a07c970 00007ff8`632898c7     dbghelp!PDBCommon::Open2W+0x2b\n1b 00000049`7a07c9c0 00007ff8`63289729     dbghelp!CDiaDataSource::loadDataFromPdbHelper+0x57\n1c 00000049`7a07ca10 00007ff8`6332a2fd     dbghelp!CDiaDataSource::loadDataFromPdb+0x19\n1d 00000049`7a07ca50 00007ff8`63336e9a     dbghelp!DiaOpenPdbEx+0x201\n1e 00000049`7a07cb00 00007ff8`633363d9     dbghelp!diaOpenPdb+0x56\n1f 00000049`7a07cb60 00007ff8`6333336b     dbghelp!diaLocatePdb+0x17d\n20 00000049`7a07d8c0 00007ff8`6335837a     dbghelp!diaGetPdb+0x29f\n21 00000049`7a07db90 00007ff8`6335cce8     dbghelp!GetDebugData+0x2de\n22 00000049`7a07de20 00007ff8`6335c99b     dbghelp!modloadWorker+0x2e0\n23 00000049`7a07e320 00007ff8`63358ff4     dbghelp!modload+0xff\n24 00000049`7a07e5c0 00007ff8`63352b30     dbghelp!LoadModule+0x608\n25 00000049`7a07eae0 00007ff6`fc5f58cf     dbghelp!SymLoadModuleEx+0x80\n26 00000049`7a07eb50 00007ff6`fc5f025f     SymStore!SymCommonGetFileInformation+0x13f\n27 00000049`7a07f290 00007ff9`1b09257d     SymStore!Add1ChildThread+0x57f\n28 00000049`7a07fed0 00007ff9`1cf6af28     KERNEL32!BaseThreadInitThunk+0x1d\n29 00000049`7a07ff00 00000000`00000000     ntdll!RtlUserThreadStart+0x28\n\n0:004\u003e gn\n(96c.542c): Unknown exception - code c0000374 (first chance)\n(96c.542c): Unknown exception - code c0000374 (!!! second chance !!!)\nntdll!RtlReportFatalFailure+0x9:\n00007ff9`1d01caa9 eb00            jmp     ntdll!RtlReportFatalFailure+0xb (00007ff9`1d01caab)\n0:004\u003e k\n # Child-SP          RetAddr               Call Site\n00 00000049`7a079a90 00007ff9`1d01ca73     ntdll!RtlReportFatalFailure+0x9\n01 00000049`7a079ae0 00007ff9`1d025b0a     ntdll!RtlReportCriticalFailure+0x97\n02 00000049`7a079bd0 00007ff9`1d025dea     ntdll!RtlpHeapHandleError+0x12\n03 00000049`7a079c00 00007ff9`1d031de5     ntdll!RtlpHpHeapHandleError+0x7a\n04 00000049`7a079c30 00007ff9`1d025a93     ntdll!RtlpLogHeapFailure+0x45\n05 00000049`7a079c60 00007ff9`1cf50793     ntdll!RtlpAnalyzeHeapFailure+0x30f\n06 00000049`7a079cc0 00007ff9`1cf4d239     ntdll!RtlpAllocateHeap+0x1663\n07 00000049`7a079f20 00007ff9`1d014772     ntdll!RtlpAllocateHeapInternal+0x6c9\n08 00000049`7a07a020 00007ff9`1cfce0da     ntdll!RtlDebugAllocateHeap+0x102\n09 00000049`7a07a0c0 00007ff9`1cf4d239     ntdll!RtlpAllocateHeap+0x7efaa\n0a 00000049`7a07a320 00007ff9`1a5e33ae     ntdll!RtlpAllocateHeapInternal+0x6c9\n0b 00000049`7a07a420 00007ff9`1a6220cb     ucrtbase!_calloc_base+0x4e\n0c 00000049`7a07a450 00007ff9`1a622051     ucrtbase!_vcrt_getptd_noexit+0x63\n0d 00000049`7a07a480 00007ff9`1a6148da     ucrtbase!_vcrt_getptd+0x9\n0e 00000049`7a07a4b0 00007ff9`1cfb51df     ucrtbase!_CxxFrameHandler3+0x2a\n0f 00000049`7a07a500 00007ff9`1cf2e866     ntdll!RtlpExecuteHandlerForException+0xf\n10 00000049`7a07a530 00007ff9`1cfb41ce     ntdll!RtlDispatchException+0x286\n11 00000049`7a07ac80 00007ff8`632435d5     ntdll!KiUserExceptionDispatch+0x2e\n12 00000049`7a07ba50 00007ff8`6325d3fd     dbghelp!DBI1::addFileInfo+0x125\n13 00000049`7a07bac0 00007ff8`632597ff     dbghelp!Mod1::processC13+0x7ad\n14 00000049`7a07bd70 00007ff8`6325ad7b     dbghelp!Mod1::fProcessSyms+0x11ff\n15 00000049`7a07be30 00007ff8`632504e7     dbghelp!Mod1::fUpdateSyms+0x1b\n16 00000049`7a07be60 00007ff8`6323638f     dbghelp!Mod1::Close+0x207\n17 00000049`7a07bee0 00007ff8`63221dd4     dbghelp!PortablePDB::ConvertPortablePDB+0x3df\n18 00000049`7a07c820 00007ff8`632211cd     dbghelp!PDB1::OpenPortablePDB+0x84\n19 00000049`7a07c860 00007ff8`63221585     dbghelp!PDB1::OpenEx2W+0x5ed\n1a 00000049`7a07c920 00007ff8`6323273b     dbghelp!PDB::OpenEx2W+0x35\n1b 00000049`7a07c970 00007ff8`632898c7     dbghelp!PDBCommon::Open2W+0x2b\n1c 00000049`7a07c9c0 00007ff8`63289729     dbghelp!CDiaDataSource::loadDataFromPdbHelper+0x57\n1d 00000049`7a07ca10 00007ff8`6332a2fd     dbghelp!CDiaDataSource::loadDataFromPdb+0x19\n1e 00000049`7a07ca50 00007ff8`63336e9a     dbghelp!DiaOpenPdbEx+0x201\n1f 00000049`7a07cb00 00007ff8`633363d9     dbghelp!diaOpenPdb+0x56\n20 00000049`7a07cb60 00007ff8`6333336b     dbghelp!diaLocatePdb+0x17d\n21 00000049`7a07d8c0 00007ff8`6335837a     dbghelp!diaGetPdb+0x29f\n22 00000049`7a07db90 00007ff8`6335cce8     dbghelp!GetDebugData+0x2de\n23 00000049`7a07de20 00007ff8`6335c99b     dbghelp!modloadWorker+0x2e0\n24 00000049`7a07e320 00007ff8`63358ff4     dbghelp!modload+0xff\n25 00000049`7a07e5c0 00007ff8`63352b30     dbghelp!LoadModule+0x608\n26 00000049`7a07eae0 00007ff6`fc5f58cf     dbghelp!SymLoadModuleEx+0x80\n27 00000049`7a07eb50 00007ff6`fc5f025f     SymStore!SymCommonGetFileInformation+0x13f\n28 00000049`7a07f290 00007ff9`1b09257d     SymStore!Add1ChildThread+0x57f\n29 00000049`7a07fed0 00007ff9`1cf6af28     KERNEL32!BaseThreadInitThunk+0x1d\n2a 00000049`7a07ff00 00000000`00000000     ntdll!RtlUserThreadStart+0x28\n\n0:004\u003e gn\nntdll!NtWaitForWorkViaWorkerFactory+0x14:\n00007ff9`1cfb3d84 c3              ret\n```\n\n### Regression?\n\nYes, these errors started to occur after switching from .NET Framework to .NET8 and changing the project type to SDK.\n\n### Known Workarounds\n\nUse `full` .pdb format instead of `portable`.\n\n### Other information\n\nAt the moment it seems that the problem only occurs on large files, but it is confirmed consistently.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOqh41VQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6RiZ5i",
                                           "createdAt":  "2024-10-28T14:15:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LunarWhisper",
                                           "body":  "@tommcdon , @grantri FYI",
                                           "updatedAt":  "2024-10-28T14:15:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6RidSQ",
                                           "createdAt":  "2024-10-28T14:20:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-28T14:20:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Ri2gD",
                                           "createdAt":  "2024-10-28T14:58:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "grantri",
                                           "body":  "@LunarWhisper - please provide a repro. At a minimum you can provide the PDB that causes the crash. I suspect this the same issue, there is just confusion about what constitutes a \"file\" from the PDB\u0027s perspective versus the user\u0027s perspective. But without repro step or a repro PDB, we can only speculate.",
                                           "updatedAt":  "2024-10-28T14:58:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6RjS4Z",
                                           "createdAt":  "2024-10-28T15:42:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LunarWhisper",
                                           "body":  "\u003e [@LunarWhisper](https://github.com/LunarWhisper) - please provide a repro. At a minimum you can provide the PDB that causes the crash. I suspect this the same issue, there is just confusion about what constitutes a \"file\" from the PDB\u0027s perspective versus the user\u0027s perspective. But without repro step or a repro PDB, we can only speculate.\n\n@grantri, I\u0027m afraid this will require signing an NDA.",
                                           "updatedAt":  "2024-10-28T15:42:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6qHjVV",
                                           "createdAt":  "2025-05-06T10:45:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LunarWhisper",
                                           "body":  "Fixed DLLs are available as a part of this package:\nhttps://www.nuget.org/packages/Microsoft.Debugging.Platform.DbgEng\n\nThank you for help!\nYou can close this issue if the fix makes it into the next release of SDK.",
                                           "updatedAt":  "2025-05-06T10:45:29Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Windows SDK tools do not support working with heavy portable symbols files (Part 2)",
        "labels":  [
                       "tracking-external-issue",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/109296",
        "createdAt":  "2024-10-28T18:26:35Z",
        "number":  109296,
        "author":  "vsRevaL",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC9wl1g==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-10-28T19:47:46Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "sfiruch",
                                            "createdAt":  "2024-12-28T10:50:49Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-08-18T17:46:53Z",
        "body":  "### Description\n\nI encountered a `NullReferenceException` when initializing a list inside a try-catch block in Debug mode. \nThe exception is thrown at the line where the list is initialized, which should not normally cause a `NullReferenceException`.\n\n![Image](https://github.com/user-attachments/assets/3f61e768-fc4c-457c-a191-3ef540da9b5d)\n\n## Additional Information\n\n- The issue **does not occur in Release** mode\n- The issue does not occur when stepping through the code with the debugger using **F10**, only when jumping into try-catch\n- The issue persists across different machines and IDEs (**Visual Studio, VS Code, Rider**).\n- The issue persists in **.NET6** and **.NET8** (have not tried other versions)\n- Disabling compiler optimizations in Debug mode does not resolve the issue\n- Removing the **try-catch** will prevent the exception\n- Removing the LINQ expression will prevent the exception\n\n### Reproduction Steps\n\n1. Create a new .NET project e.g Console App, IDEs should not matter, I\u0027ll do it in Rider\n\n2. Add the following code the Program.cs\n\n```cs\nclass Program\n{\n    static void Main()\n    {\n        try\n        {\n            var list1 = new List\u003cint\u003e();\n            var list2 = new List\u003cint\u003e();\n            list1.Where(x =\u003e list2.All(x2 =\u003e x == x2));\n        }\n        catch (Exception e)\n        {\n        }\n    }\n}\n```\n\n3. Put a break point at line **4**, at the start of the `Main` method\n![Image](https://github.com/user-attachments/assets/3c84ab8c-d749-4178-8e80-b3e2a16c8dcb)\n\n\n4. Start the app in Debug mode\n\n5. When arriving at the break point, jump into the `try` block to line **6**\n![Image](https://github.com/user-attachments/assets/9aee7317-7783-4b19-8956-53294ff0e6c0)\n![Image](https://github.com/user-attachments/assets/7e5c8b73-17ac-46a5-8347-a85ddf044b65)\n\n6. Step through the method with **F10**\n7. Observe that a `NullReferenceException` is thrown at the line `var list1 = new List\u003cint\u003e();`\n![Image](https://github.com/user-attachments/assets/324c319b-362e-45c4-8b2b-ad1bcb76d2fa)\n\n\n### Expected behavior\n\nNo exceptions, just as in release mode.\n\n### Actual behavior\n\nThrows mysterious exception.\n\n### Known Workarounds\n\nChange the LINQ expression to traditional loops.\n\n### Configuration\n\n- **NET SDK**: NET6,8\n- **Operating System**: Win10, 11\n- **Architecture**: Any CPU, x64",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvHbT5g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6RnfUg",
                                           "createdAt":  "2024-10-29T02:39:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-29T02:39:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6RnfVQ",
                                           "createdAt":  "2024-10-29T02:39:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD4gRDA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "vsRevaL",
                                                                               "createdAt":  "2024-10-29T08:39:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "In VS, the issue reproduces when dragging the execution point into the start of try block.",
                                           "updatedAt":  "2024-10-29T02:39:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6U7X6s",
                                           "createdAt":  "2024-11-25T17:14:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vsRevaL",
                                           "body":  "I\u0027ve encountered this issue while teaching C# LINQ in a school setting. It\u0027s been quite a challenge and not the best motivation for students learning C#. Any updates or workarounds would be greatly appreciated. 💘 (We\u0027ve encountered it again)",
                                           "updatedAt":  "2024-11-25T17:16:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6c0hnR",
                                           "createdAt":  "2025-02-03T13:30:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cosborne83",
                                           "body":  "The exception is relatively easily explained, and is the due to the way that the compiler rewrites lambdas that capture local variables.\n\nThe lambda in the `.Where()` captures `list2`, so the code is rewritten during compilation to something like this:\n\n```\nprivate class Closure\n{\n    public List\u003cint\u003e list2;\n\n    public bool Lambda(int x)\n    {\n        return list2.All(x2 =\u003e x == x2);\n    }\n}\n\nprivate static void Main(string[] args)\n{\n    var closure = new Closure(); // This \"invisible\" line gets skipped when you move the next statement in the debugger\n    try\n    {\n        var list1 = new List\u003cint\u003e();\n        closure.list2 = new List\u003cint\u003e();\n\n        list1.Where(closure.Lambda);\n    }\n    catch (Exception e)\n    {\n    }\n}\n```\n\nWhen you move the next statement to the start of the `try` you are effectively skipping the instantiation of the closure, and so the assignment to `closure.list2` results in the `NullReferenceException` because `closure` is `null`. (You can see this in the original code if you look at the disassembly view).\n\nWhilst it\u0027s obviously up to the .NET team to determine whether this represents an issue that requires fixing, it seems to me inevitable that manually changing the next statement via the debugger will sometimes result in these kinds of issues when the code you write and the code that actually runs are necessarily different to hide the complexity that underlies language features like lambdas, `yield`, `async`/`await`, etc. Indeed, Visual Studio already warns via a tooltip on the next statement arrow that moving the next statement \"may have unintended consequences\", the exception you saw is simply one of them.",
                                           "updatedAt":  "2025-02-03T13:30:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68dXIf",
                                           "createdAt":  "2025-08-06T22:23:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "@cosborne83 - thanks for the nice explanation of the issue!\n\n@vsRevaL - In this case it looks like the easiest solution would be to execute to line 6 rather than skipping to line 6. For example in my current version of Visual Studio, hovering the mouse in front of the code shows a little green arrow that can be clicked on to execute forward to that point:\n\n\u003cimg width=\"841\" height=\"435\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/2793bd6c-7a2c-49bb-b4a1-7d8b03b406de\" /\u003e\n\nIf you right click the context menu also shows \"Run To Cursor\" (Ctrl+F10) vs \"Set Next Statement\" (Ctrl+Shift+F10). Any option that executes forward such as the green arrow, run to cursor, or stepping will all ensure that the hidden code generated by the C# compiler still gets run. \"Set Next Statement\" on the other hand just changes the instruction pointer without running any code. Obviously its harder to reason about because the C# compiler has generated some code that you don\u0027t see in the source text, but it is still there and set next statement skips over it without executing it.\n\n@tmat @gregg-miskelly - I don\u0027t think the issue described is a runtime bug since the runtime layer debug interface operates with IL offsets where it is explicit what is being skipped over. Not sure if you\u0027d like to make any C# expression evaluator or VS-level adjustments? For example you could warn when a closure initializer is being skipped over, block it, or coordinate to ensure the closure still gets initialized.\n\nLet me know if you want me to move this bug somewhere, otherwise I can close it. Thanks!",
                                           "updatedAt":  "2025-08-06T22:23:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68dtPm",
                                           "createdAt":  "2025-08-06T23:24:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gregg-miskelly",
                                           "body":  "The only thing the core debugger could really do would be to block set next statement past closure class initialization. @vsRevaL if this is something that you would like to see, you are certainly welcome to use \u0027Help-\u003eSend Feedback-\u003eSuggest a feature\u0027 in Visual Studio to make this suggestion. If enough people agreed with your suggestion, we would certainly consider implementing some sort of block.",
                                           "updatedAt":  "2025-08-06T23:24:25Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Mysterious `NullReferenceException` when initializing a `List\u003cint\u003e`",
        "labels":  [
                       "tracking-external-issue",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/109425",
        "createdAt":  "2024-10-31T19:05:30Z",
        "number":  109425,
        "author":  "lambdageek",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-07T12:47:19Z",
        "body":  "The implementations of `RuntimeTypeSystem_1` `GetTypeHandle` and `GetMethodHandle` perform validation (implemented in the `TypeValidation` and `MethodValidation` classes in the cDAC reader) on their input parameters.\n\nWhile this is not part of the contract, it is an important part of the implementation and we should capture what the validation is doing.\n\nIn particular the [SOS `!U` command](https://github.com/dotnet/diagnostics/blob/d8852585edaac53044b5a001ef9fda77625f5c36/src/SOS/Strike/strike.cpp#L7029-L7032) sometimes passes IP addresses for the `methodDesc` argument to the `ISOSDacInterface::GetMethodDescData`  method and relies on validation to return an error code",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOkhGcOw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6SEZw7",
                                           "createdAt":  "2024-10-31T19:06:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-31T19:06:14Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[cdac] document TypeValidation and MethodValidation",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/110758",
        "createdAt":  "2024-12-16T21:21:56Z",
        "number":  110758,
        "author":  "max-charlamb",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-07T14:18:41Z",
        "body":  "In order to support SOS `!analyze` the cDAC must implement stack walking through the following APIs:\n```cpp\nIXCLRDataTask::CreateStackWalk();\nIXCLRDataStackWalk::Request(DACSTACKPRIV_REQUEST_FRAME_DATA, ...);\nIXCLRDataStackWalk::GetContext();\nIXCLRDataStackWalk::Next();\n```\n\nFor more infomation on stackwalking, see [StackWalk.md](https://github.com/dotnet/runtime/blob/main/docs/design/datacontracts/StackWalk.md)\n\n## Work Items\n* [x] #111875 - https://github.com/dotnet/runtime/pull/112166 Required to identify Frames through datadescriptors at compile time.\n* [x] Convert dynamically linked native libs to statically linked #113627\n* [x] Fetching initial thread context - https://github.com/dotnet/runtime/pull/111759\n* [x] cDAC native interop to call unwinders - https://github.com/dotnet/runtime/pull/111759\n* [x] Automate SOS tests to run against cDAC in CI\n    * [x] #113169\n    * [x] https://github.com/dotnet/diagnostics/pull/5350\n    * [ ] Cross-platform run in ADO\n* [x] #112274\n* [x] #112272\n\n* [x] #112277\n* [ ] #117025\n* [x] #112583 \n\n### Lower Priority Items\n* [ ] #112366 - Not used in `!analyze`\n* [ ] #112275 - Not used in `!analyze`\n## x64 and arm64 specific Work Items\nInitial implementation will focus on x64 stack walking before expanding to all supported platforms.\n\n* [x] Create managed data structures for windows system `CONTEXT` on x64 and arm64. https://github.com/dotnet/runtime/pull/111759\n  * Can use CLRMD context\u0027s as reference: https://github.com/microsoft/clrmd/blob/fa787489e504e36549cbebac6b4d1e0f79fa80ea/src/Microsoft.Diagnostics.Runtime/DataReaders/Registers/Amd64Context.cs\n* [x] Support Native Unwinders on x64 and arm64 - https://github.com/dotnet/runtime/pull/111759\n* [x] #111734 - https://github.com/dotnet/runtime/pull/111759\n* [x] Implement Contract level APIs that will be used for managed stack walking through the `IXCLRDataStackWalk` - https://github.com/dotnet/runtime/pull/111759\n* [x] #112416\n\n### Lower Priority Items\n* [ ] #112273\n\n\n\n## x86 and arm32 specific Work Items\n* [x] Create managed data structures for windows system `CONTEXT` on x86 and arm32\n* [x] #114019\n* [ ] https://github.com/dotnet/runtime/pull/116645\n\n## Paths Forwards\n1. Independent Work\n    1. Complete Frame support\n    2. Cross-platform building\n    3. Filtering flags\n    4. ARM32/x86 Support. Should wait for x86 to use funclets before adding support?\n2. SOS Work\n    1. Flip to invoke cDAC directly, allow testing on platforms where the cross-DAC is not available.\n    2. Automated testing\n    3. Testing with customer dumps - Include all required datadescriptors ASAP to allow verification on customer dumps.\n3. Threat Model",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmByyrw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6XzWf8",
                                           "createdAt":  "2024-12-16T21:23:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-12-16T21:23:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6YHLKv",
                                           "createdAt":  "2024-12-18T18:36:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "I would recommend the following approach for the context:\n\n`T_CONTEXT` should be an opaque (to cdac) struct with a defined size in the data descriptor for the current platform. If any of the registers are used as part of stackwalking (likely the instruction pointer, stack pointer, frame pointer), there should be well-known field names for those concepts, which each runtime\u0027s data descriptor maps to the right registers.\n\nIf it was desired to map all registers and offsets to manually assign them out at the cDAC boundary, the data descriptor could have all of the fields for all of the register names for each platform, and then the cdac would do an if-else chain to dynamically read the field offsets and assign them to the buffer depending on the target runtime\u0027s architecture. However, even in this case, I\u0027d recommend having well-known names for the above-mentioned registers if there\u0027s any contract implementation or logic that uses them as it makes it easier to implement the algorithms with less platform-specific goo.",
                                           "updatedAt":  "2024-12-18T18:36:21Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[cDAC] Stack Walking",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr",
                       "tracking"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/111538",
        "createdAt":  "2025-01-17T14:23:24Z",
        "number":  111538,
        "author":  "Mark-Phillipson",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-22T17:15:31Z",
        "body":  "When using Hot Reload, the success indicator (checkmark) is displayed momentarily on the webpage. However, this brief display is often missed, especially when the user is not on the browser tab at the time. \n\n**Request:**\n\nCould the success indicator be changed to display persistently until the next reload or until manually dismissed? This would ensure that users do not miss the confirmation of a successful reload, even if they are on a different tab or window.\n\nThank you very much.\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOtA96Jw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6a55yo",
                                           "createdAt":  "2025-01-17T17:39:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-17T17:39:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6a7_Sx",
                                           "createdAt":  "2025-01-18T00:35:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "@gregg-miskelly is this a suggestion that would be considered by your team?",
                                           "updatedAt":  "2025-01-18T00:35:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6a8EZQ",
                                           "createdAt":  "2025-01-18T01:01:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gregg-miskelly",
                                           "body":  "I think this should go to a different team. Let me ask.",
                                           "updatedAt":  "2025-01-18T01:01:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc60Dtxp",
                                           "createdAt":  "2025-06-30T21:36:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "@gregg-miskelly did this end up going to a different team? ",
                                           "updatedAt":  "2025-06-30T21:36:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc60D3on",
                                           "createdAt":  "2025-06-30T21:47:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gregg-miskelly",
                                           "body":  "No one took ownership. @JakeRadMSFT should this go to your team?",
                                           "updatedAt":  "2025-06-30T21:47:57Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Persistent Hot Reload Success Indicator",
        "labels":  [
                       "tracking-external-issue",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/111762",
        "createdAt":  "2025-01-18T11:08:21Z",
        "number":  111762,
        "author":  "Fresa",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-22T21:24:55Z",
        "body":  "**Version Used**: \nCompiler version: \u00274.12.0-3.24523.10 (16f58fa3)\u0027. Language version: 12.0.\n\nI have written a [source generator](https://github.com/Fresa/Kafka.Protocol/blob/e8a776639f7b8143fcfb006d01f7a2eef326c5be/Kafka.Protocol.SourceGenerator/ProtocolGenerator.cs) that tries to [catch unhandled exceptions](https://github.com/Fresa/Kafka.Protocol/blob/e8a776639f7b8143fcfb006d01f7a2eef326c5be/Kafka.Protocol.SourceGenerator/ProtocolGenerator.cs#L786) when generating code and output it through diagnostics. This works pretty good, disregarding the shortcomings of the Visual Studio Error List and description and messageFormat. \n\n\u003cimg width=\"1862\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/0aac08d2-731f-4dcc-9ab0-ead1365a13b2\" /\u003e\n\nBut when compiling again with no changes, the location of the stackframes in the stacktrace of the exception is gone.\n\n\u003cimg width=\"1862\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/dbd0b5cd-b8f4-4c73-ae87-8f97d2345764\" /\u003e\n\nIf the registered source output changes then the location is reported again on next compilation.\n\n**Steps to Reproduce**:\n\n1. Throw an exception here: https://github.com/Fresa/Kafka.Protocol/blob/e8a776639f7b8143fcfb006d01f7a2eef326c5be/Kafka.Protocol.SourceGenerator/ProtocolGenerator.cs#L757\n2. Attach a debugger here: https://github.com/Fresa/Kafka.Protocol/blob/e8a776639f7b8143fcfb006d01f7a2eef326c5be/Kafka.Protocol.SourceGenerator/ProtocolGenerator.cs#L811\n3. Compile once ([here\u0027s a project](https://github.com/Fresa/Kafka.Protocol/blob/e8a776639f7b8143fcfb006d01f7a2eef326c5be/Kafka.Protocol/Kafka.Protocol.csproj#L42) using the generator) -\u003e stack frame has location.\n4. Compile again -\u003e stack frame is missing location.\n5. Change anything in the method at 1. and compile again -\u003e stack frame has location again.\n\nI\u0027ve tested both in Visual Studio (Version 17.12.0) and the dotnet cli (8.0.404) with the same behavior.\n\n**Diagnostic Id**: N/A\n\n**Expected Behavior**:\nStack frame location is the same when no code changes.\n\n**Actual Behavior**:\nStack frame location is missing when running the source generator multiple times with no changes.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnNvdnw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6boUWo",
                                           "createdAt":  "2025-01-21T22:06:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "Is there a particular reason you believe this is a compiler issue vs. a runtime / diagnostic issue? ",
                                           "updatedAt":  "2025-01-21T22:06:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6boUWt",
                                           "createdAt":  "2025-01-21T22:18:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Fresa",
                                           "body":  "No particular reason, I don\u0027t know where the issue is. Do you think it should be reported elsewhere?",
                                           "updatedAt":  "2025-01-21T22:18:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6boUW5",
                                           "createdAt":  "2025-01-23T21:18:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "For missing stack frames that is _usually_ more of a debugger / optimizer issue. Moving to runtime. ",
                                           "updatedAt":  "2025-01-23T21:18:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cwMAT",
                                           "createdAt":  "2025-02-03T04:20:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@Fresa thanks for reporting this issue.  Based on the description of the problem it sounds like the System.Diagnostics.StackTrace class is not able to load symbols for some of the frames in the stack trace.  To help us better understand the source of the problem, we need to determine why the runtime failed to load the symbols (PDB). \n\nOne way to accomplish this would be to look at the VS debugger output window and locate the \"module loaded\" notification for the module that contains the implementation of the methods that are not getting symbolicated correctly, and determine if it is loading the symbols.  If the VS debugger successfully locates the PDB but the System.Diagnostics.StackTrace does not, then try looking in the [Visual Studio Modules window](https://learn.microsoft.com/visualstudio/debugger/how-to-use-the-modules-window?view=vs-2022#use-the-modules-window) and see what the file path is of the PDB.  Then try copying the PDB to the application output directory, re-run it, and determine if System.Diagnostics.StackTrace loads the symbols. If this experiment resolves the issue, then it seems that the rebuild isn\u0027t copying the appropriate PDB\u0027s to the application output directory.",
                                           "updatedAt":  "2025-02-03T04:20:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6c292f",
                                           "createdAt":  "2025-02-03T17:40:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Fresa",
                                           "body":  "@tommcdon I can see that the source generator\u0027s symbol file has been loaded in the debugger. I verified that the debugger loads the symbols both when the stack frame is present in `System.Diagnostics.StackTrace` and when it\u0027s not. The symbols are located in the source generator\u0027s `bin/debug/netstandard2.0` directory. In the example repository above that corresponds to `Kafka.Protocol\\Kafka.Protocol.SourceGenerator\\bin\\Debug\\netstandard2.0\\Kafka.Protocol.SourceGenerator.pdb`. That PDB is not located in the output directory of the project that references the source generator project, i.e. `Kafka.Protocol\\Kafka.Protocol\\bin\\Debug\\netstandard2.1`. The behavior doesn\u0027t change if I manually copy them to that directory.",
                                           "updatedAt":  "2025-02-03T17:40:22Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Stack frames are sometimes missing location in source generators",
        "labels":  [
                       "area-Diagnostics-coreclr",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/111844",
        "createdAt":  "2025-01-26T21:00:56Z",
        "number":  111844,
        "author":  "f2bo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-03-24T15:15:49Z",
        "body":  "### Description\n\nThe text displayed by the debugger for a variable containing a reference to a class is incorrect only when the following three conditions are satisfied. The namespace of the class must be `net9_preview`, the class must be named `TextSegment`, and it must contain a property named `Segments`.\n\nTo be honest, the conditions seem to be so rare that I don\u0027t expect many people will be hitting this issue, if any. I only stumbled upon this problem in a console app where I quickly test out new ideas and that I keep around since the .NET 9 preview days. Its default namespace, which I never bothered to change is `net9_preview`, which I certainly don\u0027t need to preserve. So I\u0027m really reporting this more out of curiosity than any expectation that this will be fixed. \n\n### Reproduction Steps\n\n1. Create a new console application that targets .NET 9 and replace **Program.cs** with the following code.\n\n  ``` C#\n  using System.Diagnostics;\n  using net9_preview;\n\n  TextSegment segment = new();\n\n  return;\n\n  namespace net9_preview\n  {\n      [DebuggerDisplay($\"I\u0027m a {nameof(TextSegment)}\")]\n      internal class TextSegment\n      {\n          public int Segments =\u003e 42;\n      }\n  }\n  ```\n2. Execute in the debugger and examine the text shown for the `segment` variable after executing the line that initializes it.\n\n\n### Expected behavior\n\nThe debugger tooltip should display the text \"_I\u0027m a TextSegment_\".\n\n![Image](https://github.com/user-attachments/assets/95ae8eb9-47e8-4902-870c-0b900c2aa11d)\n\n### Actual behavior\n\nThe debugger tooltip displays the text \"_Segments = 42_\" .\n\n![Image](https://github.com/user-attachments/assets/8f10545f-c5f7-464a-a231-b102d37c3f0f)\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nChanging any single one of the following for the `TextSegment` class restores the behavior expected from the applied `DebuggerDisplay` attribute. \n- namespace (e.g. change to `net10_preview`), \n- class name (e.g. change to `TextChunk`), \n- **Segments** property name (e.g. change to `Items`) \n\n\n\n### Configuration\n\n.NET 9.0.1\nOS Name:     Windows\nOS Version:  10.0.19045\nOS Platform: Windows\nRID:         win-x64\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnbSMkg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6b2YtT",
                                           "createdAt":  "2025-01-27T02:05:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "I can\u0027t repro this.\n\n\u003cimg width=\"439\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/4dffb6aa-8916-44b1-95b1-223f98987d39\" /\u003e",
                                           "updatedAt":  "2025-01-27T02:05:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6b2grk",
                                           "createdAt":  "2025-01-27T02:50:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "f2bo",
                                           "body":  "@stephentoub Thanks for taking a look.\n\nI tested again in a new console app and I can still reproduce it. I don\u0027t know what could be different. It\u0027s quite weird, particularly because it seems to be so specific and only happens with these names. As soon as I change the namespace, or the class name, or the property name it starts to behave normally. When I revert the change, the problem is back.\n\n![Image](https://github.com/user-attachments/assets/b6ecbc3e-5288-4c66-9cbf-5872e9142714)\n\nAs I said, this is not critical to me and I only wanted to satisfy my curiosity. If anyone has any theories...\n\nThanks!",
                                           "updatedAt":  "2025-01-27T02:50:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6b4cgz",
                                           "createdAt":  "2025-01-27T09:40:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "It could almost be caused by a `Directory.Build.props` file in some outer directory:\n\n```XML\n\u003cProject\u003e\n  \u003cItemGroup\u003e\n    \u003cAssemblyAttribute Include=\"System.Diagnostics.DebuggerDisplayAttribute\"\u003e\n      \u003c_Parameter1\u003eSegments = {Segments}\u003c/_Parameter1\u003e\n      \u003cTargetTypeName\u003enet9_preview.TextSegment\u003c/TargetTypeName\u003e\n    \u003c/AssemblyAttribute\u003e\n  \u003c/ItemGroup\u003e\n\u003c/Project\u003e\n```\n\nHowever, you wrote that you get the expected behavior if you rename the `Segments` property.  If there were such an assembly-level DebuggerDisplayAttribute, then renaming the property would cause the debugger to display an error:\n\n\u003e Segments = error CS0103: The name \u0027Segments\u0027 does not exist in the current context\n\nSo that\u0027s not it.  An empty `\u003c_Parameter1/\u003e` wouldn\u0027t work either, as MSBuild wouldn\u0027t distinguish that from omitting the parameter and wouldn\u0027t be able to find the correct constructor.\n\nPerhaps it\u0027s instead something you have added to the Visual Studio installation.  Like the `autoexp.dll` mentioned in \u003chttps://learn.microsoft.com/en-us/visualstudio/debugger/using-the-debuggerdisplay-attribute?view=vs-2022\u003e.\n",
                                           "updatedAt":  "2025-01-27T09:40:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6b6TLc",
                                           "createdAt":  "2025-01-27T13:22:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "f2bo",
                                           "body":  "@KalleOlaviNiemitalo thanks for sharing these ideas.\n\n\u003e It could almost be caused by a Directory.Build.props file in some outer directory:\n\nJust to make sure that no .props file is involved, I copied the project to the drive\u0027s root. No changes.\n\n\u003e Perhaps it\u0027s instead something you have added to the Visual Studio installation. Like the autoexp.dll mentioned in https://learn.microsoft.com/en-us/visualstudio/debugger/using-the-debuggerdisplay-attribute?view=vs-2022.\n\nI didn\u0027t find any mention of the text `Segment` anywhere in the `autoexp.cs` file and the `autoexp.dll` in the same directory has the same timestamp so, presumably, it\u0027s what was originally shipped with Visual Studio.\n\nI can conceive some unusual condition that was never anticipated that triggers this. Perhaps a naming collision with `TextSegments` or `Segments` somewhere, or the use of a digit and an underscore or the text `preview` in the namespace, but that all these conditions must occur together and that I can successfully use `net8_preview` or `net10_preview` but not `net9_preview`?!",
                                           "updatedAt":  "2025-01-27T13:22:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cJXd0",
                                           "createdAt":  "2025-01-28T17:57:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-28T17:57:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cwBYt",
                                           "createdAt":  "2025-02-03T03:41:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Hi @f2bo! The .NET runtime does not provide expression evaluation control over the debugger for debugger display attributes, as that functionality comes from the Visual Studio debugger.  I suggest opening a Visual Studio feedback item referencing this github issue, directions can be found [here](https://learn.microsoft.com/visualstudio/ide/how-to-report-a-problem-with-visual-studio?view=vs-2022).  We will keep this issue open a while to help ensure that the feedback item is routed to the correct team.",
                                           "updatedAt":  "2025-02-03T03:41:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6c2S1U",
                                           "createdAt":  "2025-02-03T16:25:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "f2bo",
                                           "body":  "Hi @tommcdon. I reported the problem here.\n\nhttps://developercommunity.visualstudio.com/t/DebuggerDisplay-attribute-displays-incor/10841087\n\nThanks!\n",
                                           "updatedAt":  "2025-02-03T16:25:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dtIyS",
                                           "createdAt":  "2025-02-08T17:14:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Thanks @f2bo!  I\u0027ve alerted the appropriate team regarding the feedback ticket.",
                                           "updatedAt":  "2025-02-08T17:14:41Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "DebuggerDisplay attribute displays incorrectly under certain (extremely rare) conditions",
        "labels":  [
                       "tracking-external-issue",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/112273",
        "createdAt":  "2025-02-07T16:47:10Z",
        "number":  112273,
        "author":  "max-charlamb",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-07T14:17:53Z",
        "body":  "https://github.com/dotnet/runtime/pull/111759 adds support for native unwinding in the cDAC, but does not re-implement `ReplacePatchesInHostMemory` as in the DAC build.\n\nOn x64, the DAC replaces patched breakpoints when the unwinder fetches the instruction stream. This is required for the unwinder logic to disassemble the native instructions and check if the IP is in a function epilog.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnZAEuQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6dkAS5",
                                           "createdAt":  "2025-02-07T16:50:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-02-07T16:50:09Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[cDAC] Implement ReplacePatchesInHostMemory in amd64 unwinder",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/112275",
        "createdAt":  "2025-02-07T17:08:44Z",
        "number":  112275,
        "author":  "max-charlamb",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-07T14:17:40Z",
        "body":  "https://github.com/dotnet/runtime/pull/111759 only implements `IXCLRDataStackWalk::Request` for `DACSTACKPRIV_REQUEST_FRAME_DATA`. The following options need to be implemented:\n\n*  `CLRDATA_REQUEST_REVISION`\n* `CLRDATA_STACK_WALK_REQUEST_SET_FIRST_FRAME`",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnZDBeA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6dkMF4",
                                           "createdAt":  "2025-02-07T17:09:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-02-07T17:09:09Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[cDAC] Implement `IXCLRDataStackWalk::Request` support for `CLRDATA_REQUEST_REVISION` and `CLRDATA_STACK_WALK_REQUEST_SET_FIRST_FRAME`",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/112366",
        "createdAt":  "2025-02-10T20:01:07Z",
        "number":  112366,
        "author":  "max-charlamb",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-07T14:17:17Z",
        "body":  "Support filter flags in DAC stack walk API. These filters aren\u0027t used in SOS so this is low priority.\n\nFlags:\n```csharp\nenum CLRDataSimpleFrameType {\n    CLRDATA_SIMPFRAME_UNRECOGNIZED\t= 0x1,\n    CLRDATA_SIMPFRAME_MANAGED_METHOD\t= 0x2,\n    CLRDATA_SIMPFRAME_RUNTIME_MANAGED_CODE\t= 0x4,\n    CLRDATA_SIMPFRAME_RUNTIME_UNMANAGED_CODE\t= 0x8\n} ;\n```\n\nI initially expected this to be relatively simple, managed methods corresponding to frameless methods and Frames corresponding to runtime code. However, the logic in SFI changes with the `FUNCTIONSONLY` flag which is used if `CLRDataSimpleFrameType = CLRDATA_SIMPFRAME_MANAGED_METHOD`. \n\nThis filters funclets but seems somewhat inconsistent.\n\n### Example\nIn the following example containing multiple exception handlers, the DAC filtering for only managed methods sometimes, but not always, skips these frames. This appears to be due to logic surrounding funclets and skipping to non-filtering funclets parents, but enumerating to filtering funclets parents.\n\n#### Full Stackwalk\nHighlighted lines are removed in the current DAC behavior.\n```\nOS Thread Id: 0xd474 (0)\n        Child SP               IP Call Site\n**0000008FC11C6818 00007ff81f87f7e4 [InlinedCallFrame: 0000008fc11c6818] Interop+Kernel32.g____PInvoke|43_0(IntPtr, Byte*, Int32, Int32*, IntPtr)**\n**0000008FC11C6818 00007ffe4a340092 [InlinedCallFrame: 0000008fc11c6818] Interop+Kernel32.g____PInvoke|43_0(IntPtr, Byte*, Int32, Int32*, IntPtr)**\n0000008FC11C67E0 00007ffe4a340092 Interop+Kernel32.ReadFile(IntPtr, Byte*, Int32, Int32 ByRef, IntPtr) [C:\\Users\\maxcharlamb\\source\\reposA\\runtime\\artifacts\\obj\\System.Console\\Release\\net10.0-windows\\Microsoft.Interop.LibraryImportGenerator\\Microsoft.Interop.LibraryImportGenerator\\LibraryImports.g.cs @ 412]\n0000008FC11C68C0 00007ffe4a33ff27 System.ConsolePal+WindowsConsoleStream.ReadFileNative(IntPtr, System.Span`1, Boolean, Int32 ByRef, Boolean) [C:\\Users\\maxcharlamb\\source\\reposA\\runtime\\src\\libraries\\System.Console\\src\\System\\ConsolePal.Windows.cs @ 1223]\n0000008FC11C6920 00007ffe4a33fe3b System.ConsolePal+WindowsConsoleStream.Read(System.Span`1) [C:\\Users\\maxcharlamb\\source\\reposA\\runtime\\src\\libraries\\System.Console\\src\\System\\ConsolePal.Windows.cs @ 1181]\n0000008FC11C6990 00007ffe4a33fd58 System.IO.ConsoleStream.Read(Byte[], Int32, Int32) [C:\\Users\\maxcharlamb\\source\\reposA\\runtime\\src\\libraries\\System.Console\\src\\System\\IO\\ConsoleStream.cs @ 34]\n0000008FC11C69E0 00007ffea758c606 System.IO.StreamReader.ReadBuffer() [C:\\Users\\maxcharlamb\\source\\reposA\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\IO\\StreamReader.cs @ 611]\n0000008FC11C6A40 00007ffea758cb93 System.IO.StreamReader.ReadLine() [C:\\Users\\maxcharlamb\\source\\reposA\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\IO\\StreamReader.cs @ 800]\n0000008FC11C6B00 00007ffe4a33fc74 System.IO.SyncTextReader.ReadLine() [C:\\Users\\maxcharlamb\\source\\reposA\\runtime\\src\\libraries\\System.Console\\src\\System\\IO\\SyncTextReader.cs @ 77]\n0000008FC11C6B60 00007ffe4a33f2bc System.Console.ReadLine() [C:\\Users\\maxcharlamb\\source\\reposA\\runtime\\src\\libraries\\System.Console\\src\\System\\Console.cs @ 727]\n0000008FC11C6BA0 00007ffe4a33df58 NibbleMapReplacement.C1.Block() [C:\\Users\\maxcharlamb\\source\\repos\\NibbleMapReplacement\\Program.cs @ 160]\n0000008FC11C6C20 00007ffe4a340aeb NibbleMapReplacement.C1.M2() [C:\\Users\\maxcharlamb\\source\\repos\\NibbleMapReplacement\\Program.cs @ 50]\n**0000008FC11C7160 00007ffea8ef51a9 [InlinedCallFrame: 0000008fc11c7160]** \n**0000008FC11C7160 00007ffea74e9e83 [InlinedCallFrame: 0000008fc11c7160]** \n**0000008FC11C7100 00007ffea74e9e83 System.Runtime.EH.DispatchEx(System.Runtime.StackFrameIterator ByRef, ExInfo ByRef) [C:\\Users\\maxcharlamb\\source\\reposA\\runtime\\src\\coreclr\\nativeaot\\Runtime.Base\\src\\System\\Runtime\\ExceptionHandling.cs @ 948]**\n**0000008FC11C7240 00007ffea74e97f9 System.Runtime.EH.RhThrowEx(System.Object, ExInfo ByRef) [C:\\Users\\maxcharlamb\\source\\reposA\\runtime\\src\\coreclr\\nativeaot\\Runtime.Base\\src\\System\\Runtime\\ExceptionHandling.cs @ 665]**\n**0000008FC11C8DA0 00007ffea8ffea33 [SoftwareExceptionFrame: 0000008fc11c8da0]** \n0000008FC11C9970 00007ffe4a340ac2 NibbleMapReplacement.C1.M2() [C:\\Users\\maxcharlamb\\source\\repos\\NibbleMapReplacement\\Program.cs @ 46]\n0000008FC11C99C0 00007ffe4a340a22 NibbleMapReplacement.C1.F2(System.Exception) [C:\\Users\\maxcharlamb\\source\\repos\\NibbleMapReplacement\\Program.cs @ 153]\n0000008FC11C9A00 00007ffe4a340974 NibbleMapReplacement.C1.M4() [C:\\Users\\maxcharlamb\\source\\repos\\NibbleMapReplacement\\Program.cs @ 72]\n**0000008FC11C9EF0 00007ffea8ef5ea6 [InlinedCallFrame: 0000008fc11c9ef0]** \n**0000008FC11C9EF0 00007ffea74ea16a [InlinedCallFrame: 0000008fc11c9ef0]** \n0000008FC11C9EB0 00007ffea74ea16a System.Runtime.EH.FindFirstPassHandler(System.Object, UInt32, System.Runtime.StackFrameIterator ByRef, UInt32 ByRef, Byte* ByRef) [C:\\Users\\maxcharlamb\\source\\reposA\\runtime\\src\\coreclr\\nativeaot\\Runtime.Base\\src\\System\\Runtime\\ExceptionHandling.cs @ 1092]\n0000008FC11CA000 00007ffea74e9c4a System.Runtime.EH.DispatchEx(System.Runtime.StackFrameIterator ByRef, ExInfo ByRef) [C:\\Users\\maxcharlamb\\source\\reposA\\runtime\\src\\coreclr\\nativeaot\\Runtime.Base\\src\\System\\Runtime\\ExceptionHandling.cs @ 807]\n0000008FC11CA140 00007ffea74e97f9 System.Runtime.EH.RhThrowEx(System.Object, ExInfo ByRef) [C:\\Users\\maxcharlamb\\source\\reposA\\runtime\\src\\coreclr\\nativeaot\\Runtime.Base\\src\\System\\Runtime\\ExceptionHandling.cs @ 665]\n**0000008FC11CBCA0 00007ffea8ffea33 [SoftwareExceptionFrame: 0000008fc11cbca0]** \n0000008FC11CC870 00007ffe4a340913 NibbleMapReplacement.C1.M4() [C:\\Users\\maxcharlamb\\source\\repos\\NibbleMapReplacement\\Program.cs @ 70]\n0000008FC11CC8F0 00007ffe4a34084d NibbleMapReplacement.C1.U1(IntPtr, Int32) [C:\\Users\\maxcharlamb\\source\\repos\\NibbleMapReplacement\\Program.cs @ 138]\n**0000008FC11CC988 00007ffe4a3406f2 [InlinedCallFrame: 0000008fc11cc988]** \n**0000008FC11CC960 00007ffe4a3406f2 ILStubClass.IL_STUB_PInvoke(IntPtr, Int32)**\n0000008FC11CCA40 00007ffe4a340612 NibbleMapReplacement.C1.M5() [C:\\Users\\maxcharlamb\\source\\repos\\NibbleMapReplacement\\Program.cs @ 82]\n**0000008FC11CD350 00007ffea8ffea33 [InlinedCallFrame: 0000008fc11cd350]** \n**0000008FC11CD350 00007ffea7523612 [InlinedCallFrame: 0000008fc11cd350]** \n0000008FC11CD300 00007ffea7523612 System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(System.Object, IntPtr*) [C:\\Users\\maxcharlamb\\source\\reposA\\runtime\\src\\coreclr\\System.Private.CoreLib\\src\\System\\Reflection\\MethodBaseInvoker.CoreCLR.cs @ 36]\n0000008FC11CD400 00007ffea7523724 System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(System.Object, System.Reflection.BindingFlags) [C:\\Users\\maxcharlamb\\source\\reposA\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\Reflection\\MethodBaseInvoker.cs @ 57]\n0000008FC11CD450 00007ffea7534c6c System.Reflection.RuntimeMethodInfo.Invoke(System.Object, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo) [C:\\Users\\maxcharlamb\\source\\reposA\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\Reflection\\RuntimeMethodInfo.cs @ 126]\n0000008FC11CD4C0 00007ffea7522f33 System.Reflection.MethodBase.Invoke(System.Object, System.Object[]) [C:\\Users\\maxcharlamb\\source\\reposA\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\Reflection\\MethodBase.cs @ 56]\n0000008FC11CD500 00007ffe4a340570 NibbleMapReplacement.C1.M6() [C:\\Users\\maxcharlamb\\source\\repos\\NibbleMapReplacement\\Program.cs @ 89]\n0000008FC11CD560 00007ffe4a33de35 NibbleMapReplacement.Program.Main(System.String[]) [C:\\Users\\maxcharlamb\\source\\repos\\NibbleMapReplacement\\Program.cs @ 25\n```\n\n#### Managed Only DAC Behavior\n```\nOS Thread Id: 0xd474 (0)\n        Child SP               IP Call Site\n0000008FC11C67E0 00007ffe4a340092 Interop+Kernel32.ReadFile(IntPtr, Byte*, Int32, Int32 ByRef, IntPtr) [C:\\Users\\maxcharlamb\\source\\reposA\\runtime\\artifacts\\obj\\System.Console\\Release\\net10.0-windows\\Microsoft.Interop.LibraryImportGenerator\\Microsoft.Interop.LibraryImportGenerator\\LibraryImports.g.cs @ 412]\n0000008FC11C68C0 00007ffe4a33ff27 System.ConsolePal+WindowsConsoleStream.ReadFileNative(IntPtr, System.Span`1, Boolean, Int32 ByRef, Boolean) [C:\\Users\\maxcharlamb\\source\\reposA\\runtime\\src\\libraries\\System.Console\\src\\System\\ConsolePal.Windows.cs @ 1223]\n0000008FC11C6920 00007ffe4a33fe3b System.ConsolePal+WindowsConsoleStream.Read(System.Span`1) [C:\\Users\\maxcharlamb\\source\\reposA\\runtime\\src\\libraries\\System.Console\\src\\System\\ConsolePal.Windows.cs @ 1181]\n0000008FC11C6990 00007ffe4a33fd58 System.IO.ConsoleStream.Read(Byte[], Int32, Int32) [C:\\Users\\maxcharlamb\\source\\reposA\\runtime\\src\\libraries\\System.Console\\src\\System\\IO\\ConsoleStream.cs @ 34]\n0000008FC11C69E0 00007ffea758c606 System.IO.StreamReader.ReadBuffer() [C:\\Users\\maxcharlamb\\source\\reposA\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\IO\\StreamReader.cs @ 611]\n0000008FC11C6A40 00007ffea758cb93 System.IO.StreamReader.ReadLine() [C:\\Users\\maxcharlamb\\source\\reposA\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\IO\\StreamReader.cs @ 800]\n0000008FC11C6B00 00007ffe4a33fc74 System.IO.SyncTextReader.ReadLine() [C:\\Users\\maxcharlamb\\source\\reposA\\runtime\\src\\libraries\\System.Console\\src\\System\\IO\\SyncTextReader.cs @ 77]\n0000008FC11C6B60 00007ffe4a33f2bc System.Console.ReadLine() [C:\\Users\\maxcharlamb\\source\\reposA\\runtime\\src\\libraries\\System.Console\\src\\System\\Console.cs @ 727]\n0000008FC11C6BA0 00007ffe4a33df58 NibbleMapReplacement.C1.Block() [C:\\Users\\maxcharlamb\\source\\repos\\NibbleMapReplacement\\Program.cs @ 160]\n0000008FC11C9970 00007ffe4a340ac2 NibbleMapReplacement.C1.M2() [C:\\Users\\maxcharlamb\\source\\repos\\NibbleMapReplacement\\Program.cs @ 46]\n0000008FC11C99C0 00007ffe4a340a22 NibbleMapReplacement.C1.F2(System.Exception) [C:\\Users\\maxcharlamb\\source\\repos\\NibbleMapReplacement\\Program.cs @ 153]\n0000008FC11C9A00 00007ffe4a340974 NibbleMapReplacement.C1.M4() [C:\\Users\\maxcharlamb\\source\\repos\\NibbleMapReplacement\\Program.cs @ 72]\n0000008FC11C9EB0 00007ffea74ea16a System.Runtime.EH.FindFirstPassHandler(System.Object, UInt32, System.Runtime.StackFrameIterator ByRef, UInt32 ByRef, Byte* ByRef) [C:\\Users\\maxcharlamb\\source\\reposA\\runtime\\src\\coreclr\\nativeaot\\Runtime.Base\\src\\System\\Runtime\\ExceptionHandling.cs @ 1092]\n0000008FC11CA000 00007ffea74e9c4a System.Runtime.EH.DispatchEx(System.Runtime.StackFrameIterator ByRef, ExInfo ByRef) [C:\\Users\\maxcharlamb\\source\\reposA\\runtime\\src\\coreclr\\nativeaot\\Runtime.Base\\src\\System\\Runtime\\ExceptionHandling.cs @ 807]\n0000008FC11CA140 00007ffea74e97f9 System.Runtime.EH.RhThrowEx(System.Object, ExInfo ByRef) [C:\\Users\\maxcharlamb\\source\\reposA\\runtime\\src\\coreclr\\nativeaot\\Runtime.Base\\src\\System\\Runtime\\ExceptionHandling.cs @ 665]\n0000008FC11CC870 00007ffe4a340913 NibbleMapReplacement.C1.M4() [C:\\Users\\maxcharlamb\\source\\repos\\NibbleMapReplacement\\Program.cs @ 70]\n0000008FC11CC8F0 00007ffe4a34084d NibbleMapReplacement.C1.U1(IntPtr, Int32) [C:\\Users\\maxcharlamb\\source\\repos\\NibbleMapReplacement\\Program.cs @ 138]\n0000008FC11CCA40 00007ffe4a340612 NibbleMapReplacement.C1.M5() [C:\\Users\\maxcharlamb\\source\\repos\\NibbleMapReplacement\\Program.cs @ 82]\n0000008FC11CD300 00007ffea7523612 System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(System.Object, IntPtr*) [C:\\Users\\maxcharlamb\\source\\reposA\\runtime\\src\\coreclr\\System.Private.CoreLib\\src\\System\\Reflection\\MethodBaseInvoker.CoreCLR.cs @ 36]\n0000008FC11CD400 00007ffea7523724 System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(System.Object, System.Reflection.BindingFlags) [C:\\Users\\maxcharlamb\\source\\reposA\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\Reflection\\MethodBaseInvoker.cs @ 57]\n0000008FC11CD450 00007ffea7534c6c System.Reflection.RuntimeMethodInfo.Invoke(System.Object, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo) [C:\\Users\\maxcharlamb\\source\\reposA\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\Reflection\\RuntimeMethodInfo.cs @ 126]\n0000008FC11CD4C0 00007ffea7522f33 System.Reflection.MethodBase.Invoke(System.Object, System.Object[]) [C:\\Users\\maxcharlamb\\source\\reposA\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\Reflection\\MethodBase.cs @ 56]\n0000008FC11CD500 00007ffe4a340570 NibbleMapReplacement.C1.M6() [C:\\Users\\maxcharlamb\\source\\repos\\NibbleMapReplacement\\Program.cs @ 89]\n0000008FC11CD560 00007ffe4a33de35 NibbleMapReplacement.Program.Main(System.String[]) [C:\\Users\\maxcharlamb\\source\\repos\\NibbleMapReplacement\\Program.cs @ 25]\n```\n\n#### Managed Only Naive cDAC Implementation\nHighlighted frames are not present in the DAC behavior. With a little more information, it should be trivial to filter the ILStub, but the logic around sometimes filtering ExceptionHandling logic is more complex.\n```\nOS Thread Id: 0xd474 (0)\n        Child SP               IP Call Site\n0000008FC11C67E0 00007ffe4a340092 Interop+Kernel32.ReadFile(IntPtr, Byte*, Int32, Int32 ByRef, IntPtr) [C:\\Users\\maxcharlamb\\source\\reposA\\runtime\\artifacts\\obj\\System.Console\\Release\\net10.0-windows\\Microsoft.Interop.LibraryImportGenerator\\Microsoft.Interop.LibraryImportGenerator\\LibraryImports.g.cs @ 412]\n0000008FC11C68C0 00007ffe4a33ff27 System.ConsolePal+WindowsConsoleStream.ReadFileNative(IntPtr, System.Span`1, Boolean, Int32 ByRef, Boolean) [C:\\Users\\maxcharlamb\\source\\reposA\\runtime\\src\\libraries\\System.Console\\src\\System\\ConsolePal.Windows.cs @ 1223]\n0000008FC11C6920 00007ffe4a33fe3b System.ConsolePal+WindowsConsoleStream.Read(System.Span`1) [C:\\Users\\maxcharlamb\\source\\reposA\\runtime\\src\\libraries\\System.Console\\src\\System\\ConsolePal.Windows.cs @ 1181]\n0000008FC11C6990 00007ffe4a33fd58 System.IO.ConsoleStream.Read(Byte[], Int32, Int32) [C:\\Users\\maxcharlamb\\source\\reposA\\runtime\\src\\libraries\\System.Console\\src\\System\\IO\\ConsoleStream.cs @ 34]\n0000008FC11C69E0 00007ffea758c606 System.IO.StreamReader.ReadBuffer() [C:\\Users\\maxcharlamb\\source\\reposA\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\IO\\StreamReader.cs @ 611]\n0000008FC11C6A40 00007ffea758cb93 System.IO.StreamReader.ReadLine() [C:\\Users\\maxcharlamb\\source\\reposA\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\IO\\StreamReader.cs @ 800]\n0000008FC11C6B00 00007ffe4a33fc74 System.IO.SyncTextReader.ReadLine() [C:\\Users\\maxcharlamb\\source\\reposA\\runtime\\src\\libraries\\System.Console\\src\\System\\IO\\SyncTextReader.cs @ 77]\n0000008FC11C6B60 00007ffe4a33f2bc System.Console.ReadLine() [C:\\Users\\maxcharlamb\\source\\reposA\\runtime\\src\\libraries\\System.Console\\src\\System\\Console.cs @ 727]\n0000008FC11C6BA0 00007ffe4a33df58 NibbleMapReplacement.C1.Block() [C:\\Users\\maxcharlamb\\source\\repos\\NibbleMapReplacement\\Program.cs @ 160]\n**0000008FC11C6C20 00007ffe4a340aeb NibbleMapReplacement.C1.M2() [C:\\Users\\maxcharlamb\\source\\repos\\NibbleMapReplacement\\Program.cs @ 50]**\n**0000008FC11C7100 00007ffea74e9e83 System.Runtime.EH.DispatchEx(System.Runtime.StackFrameIterator ByRef, ExInfo ByRef) [C:\\Users\\maxcharlamb\\source\\reposA\\runtime\\src\\coreclr\\nativeaot\\Runtime.Base\\src\\System\\Runtime\\ExceptionHandling.cs @ 948]**\n**0000008FC11C7240 00007ffea74e97f9 System.Runtime.EH.RhThrowEx(System.Object, ExInfo ByRef) [C:\\Users\\maxcharlamb\\source\\reposA\\runtime\\src\\coreclr\\nativeaot\\Runtime.Base\\src\\System\\Runtime\\ExceptionHandling.cs @ 665]**\n0000008FC11C9970 00007ffe4a340ac2 NibbleMapReplacement.C1.M2() [C:\\Users\\maxcharlamb\\source\\repos\\NibbleMapReplacement\\Program.cs @ 46]\n0000008FC11C99C0 00007ffe4a340a22 NibbleMapReplacement.C1.F2(System.Exception) [C:\\Users\\maxcharlamb\\source\\repos\\NibbleMapReplacement\\Program.cs @ 153]\n0000008FC11C9A00 00007ffe4a340974 NibbleMapReplacement.C1.M4() [C:\\Users\\maxcharlamb\\source\\repos\\NibbleMapReplacement\\Program.cs @ 72]\n0000008FC11C9EB0 00007ffea74ea16a System.Runtime.EH.FindFirstPassHandler(System.Object, UInt32, System.Runtime.StackFrameIterator ByRef, UInt32 ByRef, Byte* ByRef) [C:\\Users\\maxcharlamb\\source\\reposA\\runtime\\src\\coreclr\\nativeaot\\Runtime.Base\\src\\System\\Runtime\\ExceptionHandling.cs @ 1092]\n0000008FC11CA000 00007ffea74e9c4a System.Runtime.EH.DispatchEx(System.Runtime.StackFrameIterator ByRef, ExInfo ByRef) [C:\\Users\\maxcharlamb\\source\\reposA\\runtime\\src\\coreclr\\nativeaot\\Runtime.Base\\src\\System\\Runtime\\ExceptionHandling.cs @ 807]\n0000008FC11CA140 00007ffea74e97f9 System.Runtime.EH.RhThrowEx(System.Object, ExInfo ByRef) [C:\\Users\\maxcharlamb\\source\\reposA\\runtime\\src\\coreclr\\nativeaot\\Runtime.Base\\src\\System\\Runtime\\ExceptionHandling.cs @ 665]\n0000008FC11CC870 00007ffe4a340913 NibbleMapReplacement.C1.M4() [C:\\Users\\maxcharlamb\\source\\repos\\NibbleMapReplacement\\Program.cs @ 70]\n0000008FC11CC8F0 00007ffe4a34084d NibbleMapReplacement.C1.U1(IntPtr, Int32) [C:\\Users\\maxcharlamb\\source\\repos\\NibbleMapReplacement\\Program.cs @ 138]\n**0000008FC11CC960 00007ffe4a3406f2 ILStubClass.IL_STUB_PInvoke(IntPtr, Int32)**\n0000008FC11CCA40 00007ffe4a340612 NibbleMapReplacement.C1.M5() [C:\\Users\\maxcharlamb\\source\\repos\\NibbleMapReplacement\\Program.cs @ 82]\n0000008FC11CD300 00007ffea7523612 System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(System.Object, IntPtr*) [C:\\Users\\maxcharlamb\\source\\reposA\\runtime\\src\\coreclr\\System.Private.CoreLib\\src\\System\\Reflection\\MethodBaseInvoker.CoreCLR.cs @ 36]\n0000008FC11CD400 00007ffea7523724 System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(System.Object, System.Reflection.BindingFlags) [C:\\Users\\maxcharlamb\\source\\reposA\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\Reflection\\MethodBaseInvoker.cs @ 57]\n0000008FC11CD450 00007ffea7534c6c System.Reflection.RuntimeMethodInfo.Invoke(System.Object, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo) [C:\\Users\\maxcharlamb\\source\\reposA\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\Reflection\\RuntimeMethodInfo.cs @ 126]\n0000008FC11CD4C0 00007ffea7522f33 System.Reflection.MethodBase.Invoke(System.Object, System.Object[]) [C:\\Users\\maxcharlamb\\source\\reposA\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\Reflection\\MethodBase.cs @ 56]\n0000008FC11CD500 00007ffe4a340570 NibbleMapReplacement.C1.M6() [C:\\Users\\maxcharlamb\\source\\repos\\NibbleMapReplacement\\Program.cs @ 89]\n0000008FC11CD560 00007ffe4a33de35 NibbleMapReplacement.Program.Main(System.String[]) [C:\\Users\\maxcharlamb\\source\\repos\\NibbleMapReplacement\\Program.cs @ 25]\n```\n\n#### What is going on\n\nNot showing \"logically\" unwound call frames due to exception handling. This occurs in the second pass of EH.\n`ExceptionTracker::FindParentStackFrameForStackWalk`\n`ExceptionTracker::IsUnwoundToTargetParentFrame`\n`ExceptionTracker::IsInStackRegionUnwoundByCurrentException`",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnebqKg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6d5uoq",
                                           "createdAt":  "2025-02-10T20:25:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-02-10T20:25:24Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Support flags in `IXCLRDataTask.CreateStackWalk`",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/113219",
        "createdAt":  "2025-03-06T16:21:43Z",
        "number":  113219,
        "author":  "ThomasFOG",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-01T08:08:39Z",
        "body":  "### Description\n\nHello,\n\nThis is really puzzling in a way that it makes me doubt of myself.\n\nWhile debugging from Visual Studio in DEBUG configuration, apps don\u0027t have the same memory behavior depending on whether ```PublishAot``` is set (which shouldn\u0027t even trigger outside ```dotnet publish```, right?) and on whether the debugger is attached.\n\nWhile debugging and ```PublishAot``` isn\u0027t set, memory will keep building up like if there were memory allocations going on.\n\nWhile debugging and ```PublisAot``` is set, memory doesn\u0027t build up and remains stable if we don\u0027t allocate anything.\n\nWhen the same exe is run without the debugger, memory is stable no matter what. This only happens when the debugger is attached **and** ```PublishAot``` isn\u0027t set.\n\nDon\u0027t know if this has something to do with some runtime analyzers?\n\nHappens in both VS 17.13.2 and 17.12.\n\nVS components installed:\n- Visual C++ 2022   00482-90000-00000-AA134\n- Microsoft Visual C++ 2022\n- ASP.NET and Web Tools   17.13.124.35287\n- ASP.NET and Web Tools\n- Azure App Service Tools v3.0.0   17.13.124.35287\n- Azure App Service Tools v3.0.0\n- C# Tools   4.13.0-3.25112.7+afe5bc4a827030229ab79ec596b3cb91d4e87872\n- Microsoft JVM Debugger   1.0\n- Mono Debugging for Visual Studio   17.13.14 (1c94ab9)\n- NuGet Package Manager   6.13.2\n- Razor (ASP.NET Core)   17.13.3.2511303+2405f884fd9c848997c6be0607b18b55544f526a\n- TypeScript Tools   17.0.31211.2001\n- Visual Basic Tools   4.13.0-3.25112.7+afe5bc4a827030229ab79ec596b3cb91d4e87872\n- Visual F# Tools   17.13.0-beta.25056.5+63a09289745da5c256e7baf5f4194a750b1ec878\n- Visual Studio IntelliCode   2.2\n- VisualStudio.DeviceLog   1.0\n- VisualStudio.Mac   1.0\n- VSPackage Extension   1.0\n- Xamarin   17.13.0.171 (d17.13@5b137a5)\n- Xamarin Designer   17.13.3.4 (remotes/origin/main@59e9def289)\n- Xamarin.Android SDK   13.2.2.0 (d17-5/45b0e14)\n\n### Reproduction Steps\n\nDebug from Visual Studio the most simple app and add/remove ```PublishAot```.\n\n```xml\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\n\n  \u003cPropertyGroup\u003e\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\n    \u003cTargetFramework\u003enet9.0\u003c/TargetFramework\u003e\n    \u003cImplicitUsings\u003eenable\u003c/ImplicitUsings\u003e\n  \u003c/PropertyGroup\u003e\n\n\u003c/Project\u003e\n```\n\n```csharp\nlong test = GC.GetTotalMemory(false);\n\nwhile (true)\n{\n    long test2 = GC.GetTotalMemory(false);\n\n    if (test2 != test)\n    {\n        Console.Write(test2 - test);\n        Console.Write(Environment.NewLine);\n    }\n}\n````\n\n\n### Expected behavior\n\nMemory behavior should stay the same?\n\n### Actual behavior\n\nMemory behavior should stay the same?\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nTested on .NET 9.0.103, 9.0.200, and 8.0.406.\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOtCcJoA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6hMOtw",
                                           "createdAt":  "2025-03-06T16:26:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-03-06T16:26:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hT_uw",
                                           "createdAt":  "2025-03-07T12:46:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "\u003e PublishAot is set (which shouldn\u0027t even trigger outside dotnet publish, right?)\n\n`PublishAot=true` modifies some feature switches so the runtime behavior is different. The goal is that the runtime behavior should be the same in debug and release (so without AOT and with AOT). It\u0027s possible that one of these affects memory behavior, but I don\u0027t know if that\u0027s the case.",
                                           "updatedAt":  "2025-03-07T12:46:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6iAdbk",
                                           "createdAt":  "2025-03-12T14:12:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ThomasFOG",
                                           "body":  "It doesn\u0027t seem to be a behavior to match runtime for consistency. For example, ```PublishAot=false``` has a different behavior whether a debugger is attached or not. (```PublishAot=true``` has the same behavior with or without debugger attached.)\n\nAnd once the build is published (i.e. AOT\u0027d for real), it might have another behavior than the one showed before AOT-compilation (but I haven\u0027t exactly pinpointed this behavior yet).\n\n------\n\nIt\u0027s a bit peculiar to see something like 8KB per second being allocated when a debugger is attached without ```PublishAot``` because it makes debugging allocations impossible. It makes you want to start a profiler to see what\u0027s going on, but suddenly those allocations disappear because the debugger is no more attached.",
                                           "updatedAt":  "2025-03-12T14:12:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6z-h36",
                                           "createdAt":  "2025-06-30T15:01:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "/cc @thaystg @hoyosjs ",
                                           "updatedAt":  "2025-06-30T15:01:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc60Az9K",
                                           "createdAt":  "2025-06-30T17:28:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "Checking on this",
                                           "updatedAt":  "2025-06-30T17:28:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc60CgBL",
                                           "createdAt":  "2025-06-30T20:13:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rcj1",
                                           "body":  "When PublishAot is set, various config options are set in runtimeconfig.json that are not set when running without PublishAot. One of these is System.Diagnostics.Tracing.EventSource.IsSupported, which is set to false.\n\nIf the steady memory consumption is important to you, this must be set to false, for example by adding the following lines of code in an ItemGroup in your .csproj file.\n\n\t  \u003cRuntimeHostConfigurationOption Include=\"System.Diagnostics.Tracing.EventSource.IsSupported\" Value=\"false\" /\u003e\n\nNote that this will disable any behavior associated with EventSource. But if you are willing to give up these features, then this is an acceptable workaround.\n",
                                           "updatedAt":  "2025-06-30T21:11:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc60DN-q",
                                           "createdAt":  "2025-06-30T21:08:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "More concise alternative is:\n```\n  \u003cPropertyGroup\u003e\n    \u003cEventSourceSupport\u003efalse\u003c/EventSourceSupport\u003e\n    \u003cStartupHookSupport\u003efalse\u003c/StartupHookSupport\u003e\n  \u003c/PropertyGroup\u003e\n```\nThese options are documented at https://learn.microsoft.com/en-us/dotnet/core/deploying/trimming/trimming-options and end up setting RuntimeHostConfigurationOption above under the covers.\n\nVisual Studio debugger enables number of runtime diagnostic features to provide better debugging experience. Many of these features come with small (though measurable) overheads, including extra allocations.",
                                           "updatedAt":  "2025-06-30T21:08:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc60DS4a",
                                           "createdAt":  "2025-06-30T21:12:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEYjCBw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkotas",
                                                                               "createdAt":  "2025-06-30T21:13:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "In this case, with @rcj1 we observed this to actually just be the EventSource support, and this is expected. ",
                                           "updatedAt":  "2025-06-30T21:12:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc60Jwmg",
                                           "createdAt":  "2025-07-01T08:05:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ThomasFOG",
                                           "body":  "I can confirm that it is related to ```EventSourceSupport```. When set to ```true``` and a debugger is attached, I can observe the memory allocations going on every seconds or so.\n\n```EventSourceSupport``` is indeed set to ```false``` when ```PublishAot``` is set to ```true``` (which makes sense so the debugging story is as similar as possible to a trimmed context).\n\nThis is consistent with the initial observations.\n\n```StartupHookSupport``` has no impact on memory allocations.",
                                           "updatedAt":  "2025-07-01T08:08:39Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Weird PublishAot memory differences without actually publishing",
        "labels":  [
                       "question",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/113844",
        "createdAt":  "2025-03-24T15:26:31Z",
        "number":  113844,
        "author":  "max-charlamb",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-07T14:17:31Z",
        "body":  "Currently the cDAC does not log in most failure conditions.\n\nWhile the output is not captured when running through SOS/WinDBG, the SOS unit tests do capture the output. In these scenarios improving logging will help debugging.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "[cDAC] Improve logging",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/114216",
        "createdAt":  "2025-04-03T15:23:36Z",
        "number":  114216,
        "author":  "lateralusX",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-08T18:35:09Z",
        "body":  "Collecting JIT and Loader data through EventPipe on Android CoreCLR works and include all expected information, but there seem to be some parsing error in Perfviews Runtime Loader and JITStats views. The following error occurs in perfviews log:\n\nStarted: Opening dotnet-dsrouter_20250402_152420.nettrace\nETL Size 2.627 MB ETLX Size 2.668 MB\nCompleted: Opening dotnet-dsrouter_20250402_152420.nettrace   (Elapsed Time: 0.056 sec)\nStarted: Opening JITStats\nCompleted: Opening JITStats   (Elapsed Time: 0.098 sec)\nException Occurred: System.IndexOutOfRangeException: Index was outside the bounds of the array.\n   at Microsoft.Diagnostics.Tracing.Analysis.TraceLoadedDotNetRuntime.\u003c\u003ec__DisplayClass32_0.\u003cSetupCallbacks\u003eb__16(GCMarkWithTypeTraceData data)\n   at Microsoft.Diagnostics.Tracing.TraceEventDispatcher.DoDispatch(TraceEvent anEvent)\n   at Microsoft.Diagnostics.Tracing.Etlx.TraceLogEventSource.Process()\n   at PerfView.PerfViewJitStats.WriteHtmlBody(TraceLog dataFile, TextWriter output, String fileName, TextWriter log)\n   at PerfView.PerfViewHtmlReport.GenerateReportFile(StatusBar worker, TraceLog trace)\n   at PerfView.PerfViewHtmlReport.\u003c\u003ec__DisplayClass17_1.\u003cOpen\u003eb__0()\n   at PerfView.StatusBar.\u003c\u003ec__DisplayClass22_0.\u003cStartWork\u003eb__0()\nAn exceptional condition occurred, see log for details.\nStarted: Opening EventStats\nCompleted: Opening EventStats   (Elapsed Time: 0.054 sec)\nStarted: Opening myport.sock_20250402_144917.nettrace\nETL Size 0.295 MB ETLX Size 0.125 MB\nCompleted: Opening myport.sock_20250402_144917.nettrace   (Elapsed Time: 0.045 sec)\nStarted: Opening EventStats\nCompleted: Opening EventStats   (Elapsed Time: 0.000 sec)\n\nAppears to be some issue with GC MarkWithType data events and might not be unique to Android, an OSX trace including the same GC event will also trigger this error.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOpXjokA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6leOUQ",
                                           "createdAt":  "2025-04-03T15:23:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-android\u0027: @vitek-karas, @simonrozsival, @steveisok, @akoeplinger\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-03T15:23:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6leOcX",
                                           "createdAt":  "2025-04-03T15:23:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-03T15:23:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6leOcw",
                                           "createdAt":  "2025-04-03T15:24:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-03T15:24:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6leOh4",
                                           "createdAt":  "2025-04-03T15:24:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-03T15:24:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6leOiQ",
                                           "createdAt":  "2025-04-03T15:24:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-03T15:24:08Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "[android] Nettrace collected on CoreCLR Android including JIT+Loader events won\u0027t display in Perfview Loader/JITStats views.",
        "labels":  [
                       "area-Diagnostics-coreclr",
                       "os-android"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/114313",
        "createdAt":  "2025-04-06T22:43:10Z",
        "number":  114313,
        "author":  "HughPH",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-07T14:31:14Z",
        "body":  "### Background and motivation\n\nLet\u0027s imagine I\u0027m building a package to be \"thrown over the wall\" to some other team who will deal with building a Docker image. *Or* that I\u0027ve written my Dockerfile myself and it\u0027ll go to some other team to actually package it and deploy it. *Or* that the organisation is relatively immature and I\u0027ve just been asked to provide the binaries and instructions for how to create a service on a big ol\u0027 server. *Or* that we provide an unusual level of freedom to our customers to put services wherever they want, and they can launch them however they want, as services, as startup scripts, whatever, we don\u0027t care.\n\nWe potentially find ourselves in situations where the DOTNET_EnableDiagnostics env var *might not* be set to 0 in situations where we *really want* the DOTNET_EnableDiagnostics env var to be set to 0.\n\nWhat I would like is a mechanism for the equivalent behaviour to be baked into the published code, and not overridable.\n\n### API Proposal\n\nNot sure this is relevant for this suggestion.\n\n### API Usage\n\nWe\u0027d probably want the configuration to find its way into runtimeOptions, and we\u0027d do that by making an ItemGroup in the project file or Directory.Build.props:\n\n```xml\n\u003cItemGroup Condition=\" \u0027$(IsPublish)\u0027 == \u0027true\u0027 \"\u003e\n  \u003cRuntimeHostConfigurationOption Include=\"System.Diagnostics.EnableDiagnostics\"\u003e\n    \u003cValue\u003efalse\u003c/Value\u003e\n  \u003c/RuntimeHostConfigurationOption\u003e\n\u003c/ItemGroup\u003e\n```\n\nWhich would come out in the runtimeconfig.json like:\n```json\n{\n  \"runtimeOptions\": {\n    \"tfm\": \"net9.0\",\n    \"includedFrameworks\": [\n      {\n        \"name\": \"Microsoft.NETCore.App\",\n        \"version\": \"9.0.3\"\n      }\n    ],\n    \"configProperties\": {\n      \"System.Diagnostics.DiagnosticPort\": \"disabled\",\n      ... etc\n    }\n  }\n}\n```\n\n### Alternative Designs\n\nI\u0027m not entirely certain what I\u0027m looking at, but I find the following in `clrconfigvalues.h`\n```\n///\n/// Debugger, Profiler, Diagnostics IPC Ports\n///\nRETAIL_CONFIG_DWORD_INFO(EXTERNAL_EnableDiagnostics, W(\"EnableDiagnostics\"), 1, \"Allows the debugger, profiler, and diagnostic IPC service ports to be disabled\")\nRETAIL_CONFIG_DWORD_INFO(EXTERNAL_EnableDiagnostics_IPC, W(\"EnableDiagnostics_IPC\"), 1, \"Allows the diagnostic IPC service ports to be disabled\")\nRETAIL_CONFIG_DWORD_INFO(EXTERNAL_EnableDiagnostics_Debugger, W(\"EnableDiagnostics_Debugger\"), 1, \"Allows the debugger to be disabled\")\nRETAIL_CONFIG_DWORD_INFO(EXTERNAL_EnableDiagnostics_Profiler, W(\"EnableDiagnostics_Profiler\"), 1, \"Allows the profiler to be disabled\")\n```\n\nThese seem to be hooked up on the LS, and this is where my understanding completely falls apart, because it looks to me like the ports are hosted in the RS, for the debugger to attach to? So how can we disable them on the LS?!?\n\nAnyway, maybe these can be used to control availability of debugging on RS as well? IDK.\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOtYWl-g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6lzYCS",
                                           "createdAt":  "2025-04-06T22:43:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-06T22:43:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6lzbYl",
                                           "createdAt":  "2025-04-06T23:20:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOENGZXw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "HughPH",
                                                                               "createdAt":  "2025-04-06T23:35:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "teo-tsirpanis",
                                           "body":  "This could be added to the existing [`DebuggerSupport`](https://learn.microsoft.com/en-us/dotnet/core/deploying/trimming/trimming-options#remove-symbols) option, which already removes information to make debugging easier.\n\n\u003e to be baked into the published code, and not overridable\n\nI\u0027m not sure if this is even possible. If you make a self-contained deployment of your app, that comes with a specially compiled runtime that has diagnostics support completely ripped out, somebody can easily replace it with the stock runtime binaries.",
                                           "updatedAt":  "2025-04-06T23:20:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6lzctv",
                                           "createdAt":  "2025-04-06T23:34:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HughPH",
                                           "body":  "\u003e This could be added to the existing [DebuggerSupport](https://learn.microsoft.com/en-us/dotnet/core/deploying/trimming/trimming-options#remove-symbols) option, which already removes information to make debugging easier.\n\nThat sounds entirely reasonable to me - the risk would be that someone is actually using it with a `!(better debugging experience)`, whatever that might look like. If there is a debugging experience of any sort, then removing it entirely would be a breaking change.\n\n\u003e \u003e to be baked into the published code, and not overridable\n\u003e \n\u003e I\u0027m not sure if this is even possible. If you make a self-contained deployment of your app, that comes with a specially compiled runtime that has diagnostics support completely ripped out, somebody can easily replace it with the stock runtime binaries.\n\nThat\u0027s a fair comment: if you can get hold of the exe, you can do anything at all with it, even just decompile it and make your own. Even if this setting appears in runtimeconfig, a self-contained exe can be unpacked and the runtimeconfig modified.\n\nI\u0027m thinking more of just making what\u0027s been deployed behave as designed by developers and architects, and not behave differently due to, say, someone well-meaning down the line stripping things out that they don\u0027t understand.",
                                           "updatedAt":  "2025-04-06T23:34:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc61haX6",
                                           "createdAt":  "2025-07-07T14:31:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEZucxQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "HughPH",
                                                                               "createdAt":  "2025-07-08T08:22:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "steveisok",
                                           "body":  "I do think this is worth thinking about. Unfortunately, we didn\u0027t get to this in 10, so I\u0027m going to bump the milestone to 11.",
                                           "updatedAt":  "2025-07-07T14:31:10Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[API Proposal]: A mechanism for disabling managed debugging at compile time",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/114336",
        "createdAt":  "2025-04-07T15:58:07Z",
        "number":  114336,
        "author":  "max-charlamb",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-07T14:17:08Z",
        "body":  "### Uses\nUsed as part of \n* `!printexception -lines`\n* `!ip2md` when SYMOPT_LOAD_LINES is set in the symbol options (default in windbg)\n* `!clrstack`\n\n### Required APIs\n\n* [x] IXCLRDataModule::GetFlags\n* [x] IXCLRDataModule::GetFileName\n* [x] IXCLRDataModule::Request(DACDATAMODULEPRIV_REQUEST_GET_MODULEDATA…)\n* [x] IXCLRDataModule::StartEnumExtents\n* [x] IXCLRDataModule::EnumExtent \n* [x] IXCLRDataModule::EndEnumExtents\n* [ ] IXCLRDataProcess::StartEnumMethodInstancesByAddress\n* [ ] IXCLRDataProcess::EnumMethodInstanceByAddress\n* [ ] IXCLRDataProcess::EndEnumMethodInstancesByAddress\n* [ ] IXCLRDataMethodInstance::GetRepresentativeEntryAddress\n* [ ] IXCLRDataMethodInstance::GetILOffsetsByAddress\n* [ ] IXCLRDataMethodInstance::GetILAddressMap\n* [ ] IXCLRDataMethodInstance::GetTokenAndScope\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOpe5JCA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6l7kkI",
                                           "createdAt":  "2025-04-07T15:58:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-07T15:58:32Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[cDAC] Support APIs for reading line numbers",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/114436",
        "createdAt":  "2025-04-09T12:00:12Z",
        "number":  114436,
        "author":  "grendello",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-30T14:47:42Z",
        "body":  "Whenever an Android app which uses CoreCLR crashes because of a signal, the Android OS\ntries to walk the stack, symbolicate it etc. While it works as expected with the MonoVM runtime, with CoreCLR it produces stack traces similar to the one below:\n\n```\n04-09 13:18:42.901 19038 19038 F libc    : Fatal signal 11 (SIGSEGV), code 1 (SEGV_MAPERR), fault addr 0x0 in tid 19038 (in.mauiperftest), pid 19038 (in.mauiperftest)\n04-09 13:18:42.994 19058 19058 I crash_dump64: performing dump of process 19038 (target tid = 19038)\n04-09 13:18:43.166 19058 19058 F DEBUG   : *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\n04-09 13:18:43.166 19058 19058 F DEBUG   : Build fingerprint: \u0027google/shiba/shiba:15/BP1A.250305.019/13003188:user/release-keys\u0027\n04-09 13:18:43.166 19058 19058 F DEBUG   : Revision: \u0027MP1.0\u0027\n04-09 13:18:43.166 19058 19058 F DEBUG   : ABI: \u0027arm64\u0027\n04-09 13:18:43.166 19058 19058 F DEBUG   : Timestamp: 2025-04-09 13:18:43.000718311+0200\n04-09 13:18:43.166 19058 19058 F DEBUG   : Process uptime: 1s\n04-09 13:18:43.166 19058 19058 F DEBUG   : Cmdline: com.xamarin.mauiperftest\n04-09 13:18:43.166 19058 19058 F DEBUG   : pid: 19038, tid: 19038, name: in.mauiperftest  \u003e\u003e\u003e com.xamarin.mauiperftest \u003c\u003c\u003c\n04-09 13:18:43.166 19058 19058 F DEBUG   : uid: 10327\n04-09 13:18:43.166 19058 19058 F DEBUG   : tagged_addr_ctrl: 0000000000000001 (PR_TAGGED_ADDR_ENABLE)\n04-09 13:18:43.166 19058 19058 F DEBUG   : pac_enabled_keys: 000000000000000f (PR_PAC_APIAKEY, PR_PAC_APIBKEY, PR_PAC_APDAKEY, PR_PAC_APDBKEY)\n04-09 13:18:43.166 19058 19058 F DEBUG   : signal 11 (SIGSEGV), code 1 (SEGV_MAPERR), fault addr 0x0000000000000000\n04-09 13:18:43.166 19058 19058 F DEBUG   : Cause: null pointer dereference\n04-09 13:18:43.166 19058 19058 F DEBUG   :     x0  0000007fde37f7a0  x1  0000007fde37f700  x2  ffffffffffffffd0  x3  0000007fde37fb20\n04-09 13:18:43.166 19058 19058 F DEBUG   :     x4  0000007fde381b50  x5  0000007fde37fb80  x6  0000000000000010  x7  7f7f7f7f7f7f7f7f\n04-09 13:18:43.166 19058 19058 F DEBUG   :     x8  0000000000000000  x9  0000000000000000  x10 0000000000000000  x11 00000000d7ffffff\n04-09 13:18:43.166 19058 19058 F DEBUG   :     x12 0000000000000039  x13 0000000000000033  x14 0000000000000000  x15 0000000000000000\n04-09 13:18:43.166 19058 19058 F DEBUG   :     x16 00000072be9d11d0  x17 0000007683154040  x18 000000769201c000  x19 0000007fde37fbc0\n04-09 13:18:43.166 19058 19058 F DEBUG   :     x20 0000007690fcca40  x21 0000000000000000  x22 0000000000008500  x23 0000007fde381600\n04-09 13:18:43.166 19058 19058 F DEBUG   :     x24 0000000000000001  x25 0000007fde380190  x26 00000072be19b874  x27 0000000000000000\n04-09 13:18:43.166 19058 19058 F DEBUG   :     x28 0000000000000000  x29 0000007fde37f6c0\n04-09 13:18:43.166 19058 19058 F DEBUG   :     lr  00000072be5ac3e8  sp  0000007fde37eb00  pc  00000072be8d6328  pst 0000000060001000\n04-09 13:18:43.166 19058 19058 F DEBUG   : 1 total frames\n04-09 13:18:43.166 19058 19058 F DEBUG   : backtrace:\n04-09 13:18:43.166 19058 19058 F DEBUG   :       #00 pc 00000000006dd328  /data/app/~~NNfnqZaOSoD5ncU1_n1GtA==/com.xamarin.mauiperftest-BjQLxm0BIF73sfoR-qJ5fg==/base.apk (offset 0xdf9000)\n```\n\nThe attached sample app triggers a SIGABRT from managed code, when built and ran with `dotnet run -c Release` and the `main` branch of .NET for Android. The resulting trace is as follows:\n\n```\n04-09 13:44:47.573 20605 20605 F libc    : Fatal signal 6 (SIGABRT), code -1 (SI_QUEUE) in tid 20605 (anyname.sigabrt), pid 20605 (anyname.sigabrt)\n04-09 13:44:47.694 20637 20637 F DEBUG   : *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\n04-09 13:44:47.694 20637 20637 F DEBUG   : Build fingerprint: \u0027google/shiba/shiba:15/BP1A.250305.019/13003188:user/release-keys\u0027\n04-09 13:44:47.694 20637 20637 F DEBUG   : Revision: \u0027MP1.0\u0027\n04-09 13:44:47.694 20637 20637 F DEBUG   : ABI: \u0027arm64\u0027\n04-09 13:44:47.694 20637 20637 F DEBUG   : Timestamp: 2025-04-09 13:44:47.609623413+0200\n04-09 13:44:47.694 20637 20637 F DEBUG   : Process uptime: 1s\n04-09 13:44:47.694 20637 20637 F DEBUG   : Cmdline: com.companyname.sigabrt\n04-09 13:44:47.694 20637 20637 F DEBUG   : pid: 20605, tid: 20605, name: anyname.sigabrt  \u003e\u003e\u003e com.companyname.sigabrt \u003c\u003c\u003c\n04-09 13:44:47.694 20637 20637 F DEBUG   : uid: 10299\n04-09 13:44:47.694 20637 20637 F DEBUG   : tagged_addr_ctrl: 0000000000000001 (PR_TAGGED_ADDR_ENABLE)\n04-09 13:44:47.694 20637 20637 F DEBUG   : pac_enabled_keys: 000000000000000f (PR_PAC_APIAKEY, PR_PAC_APIBKEY, PR_PAC_APDAKEY, PR_PAC_APDBKEY)\n04-09 13:44:47.694 20637 20637 F DEBUG   : signal 6 (SIGABRT), code -1 (SI_QUEUE), fault addr --------\n04-09 13:44:47.694 20637 20637 F DEBUG   : Abort message: \u0027Aborting process.\u0027\n04-09 13:44:47.694 20637 20637 F DEBUG   :     x0  0000000000000000  x1  000000000000507d  x2  0000000000000006  x3  0000007fde37f760\n04-09 13:44:47.694 20637 20637 F DEBUG   :     x4  0000000000000010  x5  0000000000000010  x6  0000000000000010  x7  ff7fffff7f7f7fff\n04-09 13:44:47.694 20637 20637 F DEBUG   :     x8  00000000000000f0  x9  d973eca66f6e5290  x10 0000000000000001  x11 0000007683171900\n04-09 13:44:47.694 20637 20637 F DEBUG   :     x12 0000000067f65daf  x13 000000007fffffff  x14 0000000000193f0c  x15 0000004c7587f35c\n04-09 13:44:47.694 20637 20637 F DEBUG   :     x16 00000076831db068  x17 00000076831c5380  x18 000000769201c000  x19 000000000000507d\n04-09 13:44:47.694 20637 20637 F DEBUG   :     x20 000000000000507d  x21 00000000ffffffff  x22 0000007fde37fe10  x23 0000007fde37fb70\n04-09 13:44:47.694 20637 20637 F DEBUG   :     x24 0000007690fcca40  x25 b4000075beda9de0  x26 0000000000000000  x27 0000007fde383b30\n04-09 13:44:47.694 20637 20637 F DEBUG   :     x28 0000007fde383900  x29 0000007fde37f7e0\n04-09 13:44:47.694 20637 20637 F DEBUG   :     lr  000000768315a8d8  sp  0000007fde37f760  pc  000000768315a8fc  pst 0000000000001000\n04-09 13:44:47.694 20637 20637 F DEBUG   : 2 total frames\n04-09 13:44:47.694 20637 20637 F DEBUG   : backtrace:\n04-09 13:44:47.694 20637 20637 F DEBUG   :       #00 pc 000000000005e8fc  /apex/com.android.runtime/lib64/bionic/libc.so (abort+156) (BuildId: 3cad38c74be79004f5b2927be886e077)\n04-09 13:44:47.694 20637 20637 F DEBUG   :       #01 pc 00000000004e7724  /data/app/~~YNTHhl-nErW78vUBxMqLuw==/com.companyname.sigabrt-basOk17IE5IDqlifChSlqA==/split_config.arm64_v8a.apk (offset 0x7f3000)\n```\n\n[sigabrt.zip](https://github.com/user-attachments/files/19666428/sigabrt.zip)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOplOVDA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6mQ-Xv",
                                           "createdAt":  "2025-04-09T12:01:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-android\u0027: @vitek-karas, @simonrozsival, @steveisok, @akoeplinger\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-09T12:01:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mRACZ",
                                           "createdAt":  "2025-04-09T12:04:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "grendello",
                                           "body":  "For comparison, here\u0027s a `SIGABRT` stack trace with MonoVM (from the same app although for a different reason, MonoVM hits an assertion):\n\n```\n04-09 13:52:37.025 21127 21127 F libc    : Fatal signal 6 (SIGABRT), code -1 (SI_QUEUE) in tid 21127 (anyname.sigabrt), pid 21127 (anyname.sigabrt)\n04-09 13:52:37.147 21145 21145 F DEBUG   : *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\n04-09 13:52:37.147 21145 21145 F DEBUG   : Build fingerprint: \u0027google/shiba/shiba:15/BP1A.250305.019/13003188:user/release-keys\u0027\n04-09 13:52:37.147 21145 21145 F DEBUG   : Revision: \u0027MP1.0\u0027\n04-09 13:52:37.147 21145 21145 F DEBUG   : ABI: \u0027arm64\u0027\n04-09 13:52:37.147 21145 21145 F DEBUG   : Timestamp: 2025-04-09 13:52:37.056733505+0200\n04-09 13:52:37.147 21145 21145 F DEBUG   : Process uptime: 1s\n04-09 13:52:37.147 21145 21145 F DEBUG   : Cmdline: com.companyname.sigabrt\n04-09 13:52:37.147 21145 21145 F DEBUG   : pid: 21127, tid: 21127, name: anyname.sigabrt  \u003e\u003e\u003e com.companyname.sigabrt \u003c\u003c\u003c\n04-09 13:52:37.147 21145 21145 F DEBUG   : uid: 10302\n04-09 13:52:37.147 21145 21145 F DEBUG   : tagged_addr_ctrl: 0000000000000001 (PR_TAGGED_ADDR_ENABLE)\n04-09 13:52:37.147 21145 21145 F DEBUG   : pac_enabled_keys: 000000000000000f (PR_PAC_APIAKEY, PR_PAC_APIBKEY, PR_PAC_APDAKEY, PR_PAC_APDBKEY)\n04-09 13:52:37.147 21145 21145 F DEBUG   : signal 6 (SIGABRT), code -1 (SI_QUEUE), fault addr --------\n04-09 13:52:37.147 21145 21145 F DEBUG   : Abort message: \u0027* Assertion at /__w/1/s/src/mono/mono/metadata/icall.c:6274, condition `!only_unmanaged_callers_only\u0027 not met\u0027\n04-09 13:52:37.147 21145 21145 F DEBUG   :     x0  0000000000000000  x1  0000000000005287  x2  0000000000000006  x3  0000007fde382720\n04-09 13:52:37.147 21145 21145 F DEBUG   :     x4  3935333962622d71  x5  3935333962622d71  x6  3935333962622d71  x7  7f7f7f7f7f7f7f7f\n04-09 13:52:37.147 21145 21145 F DEBUG   :     x8  00000000000000f0  x9  4b1926df6e15e3c1  x10 0000000000000001  x11 0000007683171900\n04-09 13:52:37.147 21145 21145 F DEBUG   :     x12 0000000000030003  x13 000000007fffffff  x14 00000000001ab34e  x15 0000004f253469ee\n04-09 13:52:37.147 21145 21145 F DEBUG   :     x16 00000076831db068  x17 00000076831c5380  x18 000000769201c000  x19 0000000000005287\n04-09 13:52:37.147 21145 21145 F DEBUG   :     x20 0000000000005287  x21 00000000ffffffff  x22 b4000075cedaf340  x23 0000007fde3827d8\n04-09 13:52:37.147 21145 21145 F DEBUG   :     x24 0000000000000002  x25 b40000748eda1ec8  x26 00000073c92b36e0  x27 00000073c93a8890\n04-09 13:52:37.147 21145 21145 F DEBUG   :     x28 fffffffffffffffe  x29 0000007fde3827a0\n04-09 13:52:37.147 21145 21145 F DEBUG   :     lr  000000768315a8d8  sp  0000007fde382720  pc  000000768315a8fc  pst 0000000000001000\n04-09 13:52:37.147 21145 21145 F DEBUG   : 45 total frames\n04-09 13:52:37.147 21145 21145 F DEBUG   : backtrace:\n04-09 13:52:37.147 21145 21145 F DEBUG   :       #00 pc 000000000005e8fc  /apex/com.android.runtime/lib64/bionic/libc.so (abort+156) (BuildId: 3cad38c74be79004f5b2927be886e077)\n04-09 13:52:37.147 21145 21145 F DEBUG   :       #01 pc 00000000000b368c  /data/app/~~Vcz_0wudf5usx_TckPUzaA==/com.companyname.sigabrt-nJEPIORGEz-Lfpsfd4bktg==/split_config.arm64_v8a.apk!libmono-android.release.so (offset 0x394000) (xamarin::android::Helpers::abort_application(_LogCategories, char const*, bool, std::__ndk1::source_location)+364) (BuildId: 5aa938bcbb8a38881571615b648f6f5491206e7c)\n04-09 13:52:37.147 21145 21145 F DEBUG   :       #02 pc 000000000006cba8  /data/app/~~Vcz_0wudf5usx_TckPUzaA==/com.companyname.sigabrt-nJEPIORGEz-Lfpsfd4bktg==/split_config.arm64_v8a.apk!libmono-android.release.so (offset 0x394000) (xamarin::android::Helpers::abort_application(char const*, bool, std::__ndk1::source_location)+28) (BuildId: 5aa938bcbb8a38881571615b648f6f5491206e7c)\n04-09 13:52:37.147 21145 21145 F DEBUG   :       #03 pc 0000000000086b78  /data/app/~~Vcz_0wudf5usx_TckPUzaA==/com.companyname.sigabrt-nJEPIORGEz-Lfpsfd4bktg==/split_config.arm64_v8a.apk!libmono-android.release.so (offset 0x394000) (xamarin::android::internal::MonodroidRuntime::mono_log_handler(char const*, char const*, char const*, int, void*)+216) (BuildId: 5aa938bcbb8a38881571615b648f6f5491206e7c)\n04-09 13:52:37.147 21145 21145 F DEBUG   :       #04 pc 00000000001d395c  /data/app/~~Vcz_0wudf5usx_TckPUzaA==/com.companyname.sigabrt-nJEPIORGEz-Lfpsfd4bktg==/split_config.arm64_v8a.apk!libmonosgen-2.0.so (offset 0x504000) (BuildId: dd7058e39c565cec8c5368d64fb956bacc2f52ad)\n04-09 13:52:37.147 21145 21145 F DEBUG   :       #05 pc 00000000001d3a70  /data/app/~~Vcz_0wudf5usx_TckPUzaA==/com.companyname.sigabrt-nJEPIORGEz-Lfpsfd4bktg==/split_config.arm64_v8a.apk!libmonosgen-2.0.so (offset 0x504000) (BuildId: dd7058e39c565cec8c5368d64fb956bacc2f52ad)\n04-09 13:52:37.147 21145 21145 F DEBUG   :       #06 pc 00000000001d3aa0  /data/app/~~Vcz_0wudf5usx_TckPUzaA==/com.companyname.sigabrt-nJEPIORGEz-Lfpsfd4bktg==/split_config.arm64_v8a.apk!libmonosgen-2.0.so (offset 0x504000) (BuildId: dd7058e39c565cec8c5368d64fb956bacc2f52ad)\n04-09 13:52:37.147 21145 21145 F DEBUG   :       #07 pc 000000000021fe3c  /data/app/~~Vcz_0wudf5usx_TckPUzaA==/com.companyname.sigabrt-nJEPIORGEz-Lfpsfd4bktg==/split_config.arm64_v8a.apk!libmonosgen-2.0.so (offset 0x504000) (BuildId: dd7058e39c565cec8c5368d64fb956bacc2f52ad)\n04-09 13:52:37.147 21145 21145 F DEBUG   :       #08 pc 0000000000258128  /data/app/~~Vcz_0wudf5usx_TckPUzaA==/com.companyname.sigabrt-nJEPIORGEz-Lfpsfd4bktg==/split_config.arm64_v8a.apk!libmonosgen-2.0.so (offset 0x504000) (mono_method_get_unmanaged_callers_only_ftnptr+60) (BuildId: dd7058e39c565cec8c5368d64fb956bacc2f52ad)\n04-09 13:52:37.147 21145 21145 F DEBUG   :       #09 pc 0000000000089c70  /data/app/~~Vcz_0wudf5usx_TckPUzaA==/com.companyname.sigabrt-nJEPIORGEz-Lfpsfd4bktg==/split_config.arm64_v8a.apk!libmono-android.release.so (offset 0x394000) (xamarin::android::internal::MonodroidRuntime::init_android_runtime(_JNIEnv*, _jclass*, _jobject*)+1296) (BuildId: 5aa938bcbb8a38881571615b648f6f5491206e7c)\n04-09 13:52:37.147 21145 21145 F DEBUG   :       #10 pc 000000000008c0c4  /data/app/~~Vcz_0wudf5usx_TckPUzaA==/com.companyname.sigabrt-nJEPIORGEz-Lfpsfd4bktg==/split_config.arm64_v8a.apk!libmono-android.release.so (offset 0x394000) (xamarin::android::internal::MonodroidRuntime::create_and_initialize_domain(_JNIEnv*, _jclass*, xamarin::android::jstring_array_wrapper\u0026, xamarin::android::jstring_array_wrapper\u0026, _jobjectArray*, xamarin::android::jstring_array_wrapper\u0026, _jobject*, bool, bool, bool)+236) (BuildId: 5aa938bcbb8a38881571615b648f6f5491206e7c)\n04-09 13:52:37.147 21145 21145 F DEBUG   :       #11 pc 000000000009b550  /data/app/~~Vcz_0wudf5usx_TckPUzaA==/com.companyname.sigabrt-nJEPIORGEz-Lfpsfd4bktg==/split_config.arm64_v8a.apk!libmono-android.release.so (offset 0x394000) (xamarin::android::internal::MonodroidRuntime::Java_mono_android_Runtime_initInternal(_JNIEnv*, _jclass*, _jstring*, _jobjectArray*, _jstring*, _jobjectArray*, int, _jobject*, _jobjectArray*, unsigned char, unsigned char)+3900) (BuildId: 5aa938bcbb8a38881571615b648f6f5491206e7c)\n04-09 13:52:37.147 21145 21145 F DEBUG   :       #12 pc 000000000037ef70  /apex/com.android.art/lib64/libart.so (art_quick_generic_jni_trampoline+144) (BuildId: a0856b3dbc826e8cee9d66738ac739d8)\n04-09 13:52:37.147 21145 21145 F DEBUG   :       #13 pc 0000000000368a40  /apex/com.android.art/lib64/libart.so (art_quick_invoke_static_stub+640) (BuildId: a0856b3dbc826e8cee9d66738ac739d8)\n04-09 13:52:37.147 21145 21145 F DEBUG   :       #14 pc 0000000000353f6c  /apex/com.android.art/lib64/libart.so (art::ArtMethod::Invoke(art::Thread*, unsigned int*, unsigned int, art::JValue*, char const*)+204) (BuildId: a0856b3dbc826e8cee9d66738ac739d8)\n04-09 13:52:37.147 21145 21145 F DEBUG   :       #15 pc 000000000034e888  /apex/com.android.art/lib64/libart.so (bool art::interpreter::DoCall\u003ctrue\u003e(art::ArtMethod*, art::Thread*, art::ShadowFrame\u0026, art::Instruction const*, unsigned short, bool, art::JValue*)+448) (BuildId: a0856b3dbc826e8cee9d66738ac739d8)\n04-09 13:52:37.147 21145 21145 F DEBUG   :       #16 pc 000000000076f828  /apex/com.android.art/lib64/libart.so (void art::interpreter::ExecuteSwitchImplCpp\u003cfalse\u003e(art::interpreter::SwitchImplContext*)+12452) (BuildId: a0856b3dbc826e8cee9d66738ac739d8)\n04-09 13:52:37.147 21145 21145 F DEBUG   :       #17 pc 00000000003815d8  /apex/com.android.art/lib64/libart.so (ExecuteSwitchImplAsm+8) (BuildId: a0856b3dbc826e8cee9d66738ac739d8)\n04-09 13:52:37.147 21145 21145 F DEBUG   :       #18 pc 000000000000213c  /data/app/~~Vcz_0wudf5usx_TckPUzaA==/com.companyname.sigabrt-nJEPIORGEz-Lfpsfd4bktg==/base.apk (mono.MonoPackageManager.LoadApplication+0)\n04-09 13:52:37.147 21145 21145 F DEBUG   :       #19 pc 00000000003535dc  /apex/com.android.art/lib64/libart.so (artQuickToInterpreterBridge+1932) (BuildId: a0856b3dbc826e8cee9d66738ac739d8)\n04-09 13:52:37.147 21145 21145 F DEBUG   :       #20 pc 000000000037f098  /apex/com.android.art/lib64/libart.so (art_quick_to_interpreter_bridge+88) (BuildId: a0856b3dbc826e8cee9d66738ac739d8)\n04-09 13:52:37.147 21145 21145 F DEBUG   :       #21 pc 0000000000780088  /apex/com.android.art/lib64/libart.so (nterp_helper+152) (BuildId: a0856b3dbc826e8cee9d66738ac739d8)\n04-09 13:52:37.147 21145 21145 F DEBUG   :       #22 pc 0000000000002420  /data/app/~~Vcz_0wudf5usx_TckPUzaA==/com.companyname.sigabrt-nJEPIORGEz-Lfpsfd4bktg==/base.apk (mono.MonoRuntimeProvider.attachInfo+0)\n04-09 13:52:37.147 21145 21145 F DEBUG   :       #23 pc 000000000062fc34  /data/misc/apexdata/com.android.art/dalvik-cache/arm64/boot.oat (android.app.ActivityThread.installProvider+1684)\n04-09 13:52:37.147 21145 21145 F DEBUG   :       #24 pc 000000000062f3bc  /data/misc/apexdata/com.android.art/dalvik-cache/arm64/boot.oat (android.app.ActivityThread.installContentProviders+300)\n04-09 13:52:37.147 21145 21145 F DEBUG   :       #25 pc 0000000000628584  /data/misc/apexdata/com.android.art/dalvik-cache/arm64/boot.oat (android.app.ActivityThread.handleBindApplication+4644)\n04-09 13:52:37.147 21145 21145 F DEBUG   :       #26 pc 0000000000621760  /data/misc/apexdata/com.android.art/dalvik-cache/arm64/boot.oat (android.app.ActivityThread$H.handleMessage+7968)\n04-09 13:52:37.147 21145 21145 F DEBUG   :       #27 pc 00000000008d5968  /data/misc/apexdata/com.android.art/dalvik-cache/arm64/boot.oat (android.os.Handler.dispatchMessage+152)\n04-09 13:52:37.147 21145 21145 F DEBUG   :       #28 pc 000000000090f730  /data/misc/apexdata/com.android.art/dalvik-cache/arm64/boot.oat (android.os.Looper.loopOnce+976)\n04-09 13:52:37.147 21145 21145 F DEBUG   :       #29 pc 000000000090f2e4  /data/misc/apexdata/com.android.art/dalvik-cache/arm64/boot.oat (android.os.Looper.loop+244)\n04-09 13:52:37.147 21145 21145 F DEBUG   :       #30 pc 0000000000631a94  /data/misc/apexdata/com.android.art/dalvik-cache/arm64/boot.oat (android.app.ActivityThread.main+1572)\n04-09 13:52:37.147 21145 21145 F DEBUG   :       #31 pc 0000000000368a40  /apex/com.android.art/lib64/libart.so (art_quick_invoke_static_stub+640) (BuildId: a0856b3dbc826e8cee9d66738ac739d8)\n04-09 13:52:37.147 21145 21145 F DEBUG   :       #32 pc 00000000003644f4  /apex/com.android.art/lib64/libart.so (_jobject* art::InvokeMethod\u003c(art::PointerSize)8\u003e(art::ScopedObjectAccessAlreadyRunnable const\u0026, _jobject*, _jobject*, _jobject*, unsigned long)+732) (BuildId: a0856b3dbc826e8cee9d66738ac739d8)\n04-09 13:52:37.147 21145 21145 F DEBUG   :       #33 pc 00000000006c8834  /apex/com.android.art/lib64/libart.so (art::Method_invoke(_JNIEnv*, _jobject*, _jobject*, _jobjectArray*) (.__uniq.165753521025965369065708152063621506277)+32) (BuildId: a0856b3dbc826e8cee9d66738ac739d8)\n04-09 13:52:37.147 21145 21145 F DEBUG   :       #34 pc 00000000002ff284  /data/misc/apexdata/com.android.art/dalvik-cache/arm64/boot.oat (art_jni_trampoline+116)\n04-09 13:52:37.147 21145 21145 F DEBUG   :       #35 pc 0000000000bdaf64  /data/misc/apexdata/com.android.art/dalvik-cache/arm64/boot.oat (com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run+116)\n04-09 13:52:37.147 21145 21145 F DEBUG   :       #36 pc 0000000000be3794  /data/misc/apexdata/com.android.art/dalvik-cache/arm64/boot.oat (com.android.internal.os.ZygoteInit.main+3188)\n04-09 13:52:37.147 21145 21145 F DEBUG   :       #37 pc 0000000000368a40  /apex/com.android.art/lib64/libart.so (art_quick_invoke_static_stub+640) (BuildId: a0856b3dbc826e8cee9d66738ac739d8)\n04-09 13:52:37.147 21145 21145 F DEBUG   :       #38 pc 0000000000353f6c  /apex/com.android.art/lib64/libart.so (art::ArtMethod::Invoke(art::Thread*, unsigned int*, unsigned int, art::JValue*, char const*)+204) (BuildId: a0856b3dbc826e8cee9d66738ac739d8)\n04-09 13:52:37.147 21145 21145 F DEBUG   :       #39 pc 0000000000351f20  /apex/com.android.art/lib64/libart.so (art::JValue art::InvokeWithVarArgs\u003c_jmethodID*\u003e(art::ScopedObjectAccessAlreadyRunnable const\u0026, _jobject*, _jmethodID*, std::__va_list)+512) (BuildId: a0856b3dbc826e8cee9d66738ac739d8)\n04-09 13:52:37.147 21145 21145 F DEBUG   :       #40 pc 000000000073d468  /apex/com.android.art/lib64/libart.so (art::JNI\u003ctrue\u003e::CallStaticVoidMethodV(_JNIEnv*, _jclass*, _jmethodID*, std::__va_list)+104) (BuildId: a0856b3dbc826e8cee9d66738ac739d8)\n04-09 13:52:37.147 21145 21145 F DEBUG   :       #41 pc 00000000000f76f8  /system/lib64/libandroid_runtime.so (_JNIEnv::CallStaticVoidMethod(_jclass*, _jmethodID*, ...)+104) (BuildId: 1ca72aeb09a3afddfd836b9768c1c822)\n04-09 13:52:37.147 21145 21145 F DEBUG   :       #42 pc 000000000011bf4c  /system/lib64/libandroid_runtime.so (android::AndroidRuntime::start(char const*, android::Vector\u003candroid::String8\u003e const\u0026, bool)+908) (BuildId: 1ca72aeb09a3afddfd836b9768c1c822)\n04-09 13:52:37.147 21145 21145 F DEBUG   :       #43 pc 000000000000459c  /system/bin/app_process64 (main+1212) (BuildId: 328e4e1be2be5081d82eca342402f040)\n04-09 13:52:37.147 21145 21145 F DEBUG   :       #44 pc 0000000000057c14  /apex/com.android.runtime/lib64/bionic/libc.so (__libc_init+116) (BuildId: 3cad38c74be79004f5b2927be886e077)\n```",
                                           "updatedAt":  "2025-04-09T12:04:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mU5UM",
                                           "createdAt":  "2025-04-09T17:45:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-09T17:45:05Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[Android] Improve native stack traces when the app crashes because of a signal on CoreCLR",
        "labels":  [
                       "area-Diagnostics-coreclr",
                       "os-android"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/114526",
        "createdAt":  "2025-04-11T08:06:17Z",
        "number":  114526,
        "author":  "pavelsavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-05-22T19:51:32Z",
        "body":  "",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOrP78Ig==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6mqgZ9",
                                           "createdAt":  "2025-04-11T08:06:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-11T08:06:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6nuJUa",
                                           "createdAt":  "2025-04-17T19:58:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lewing",
                                           "body":  "cc @thaystg ",
                                           "updatedAt":  "2025-04-17T19:58:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6s_vwi",
                                           "createdAt":  "2025-05-22T19:51:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-05-22T19:51:31Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[browser] hot reload tests deadlock on linux",
        "labels":  [
                       "arch-wasm",
                       "disabled-test",
                       "area-Diagnostics-coreclr",
                       "area-EnC-mono",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/114748",
        "createdAt":  "2025-04-16T18:14:12Z",
        "number":  114748,
        "author":  "AaronRobinsonMSFT",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-08T18:25:28Z",
        "body":  "Support was added in https://github.com/dotnet/runtime/pull/114463, but we are awaiting updates from Roslyn. After the update we also will need to enabled the tests.\n\nhttps://github.com/dotnet/runtime/blob/40f209caa4322089805ec73d38c85bedc50cca6f/src/libraries/System.Runtime.Loader/tests/ApplyUpdateTest.cs#L326-L329\n\nAlso uncomment build failures involving `stackalloc`.\n\nhttps://github.com/dotnet/runtime/blob/40f209caa4322089805ec73d38c85bedc50cca6f/src/libraries/System.Runtime.Loader/tests/ApplyUpdateTest.cs#L340-L341\n\nhttps://github.com/dotnet/runtime/blob/40f209caa4322089805ec73d38c85bedc50cca6f/src/libraries/System.Runtime.Loader/tests/ApplyUpdateTest.cs#L355-L356",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOp5cK8A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6ngpqZ",
                                           "createdAt":  "2025-04-16T18:14:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-16T18:14:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ngpwf",
                                           "createdAt":  "2025-04-16T18:14:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "/cc @tmat ",
                                           "updatedAt":  "2025-04-16T18:14:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6nlwrw",
                                           "createdAt":  "2025-04-17T04:19:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEbiCJg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2025-07-22T21:50:22Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Also, apply additional feedback: https://github.com/dotnet/runtime/pull/114463/files#r2048201314",
                                           "updatedAt":  "2025-04-17T04:19:47Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Enable HotReload tests for FieldRVA",
        "labels":  [
                       "test-enhancement",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/115319",
        "createdAt":  "2025-05-06T01:55:22Z",
        "number":  115319,
        "author":  "SakeTao",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-07T14:31:44Z",
        "body":  "**Failed in:** [runtime-coreclr gcstress-extra 20250504.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1033269\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=27759176\u0026resultId=129590\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr windows arm64 Checked gcstress0xc_disabler2r_jitstress2 @ Windows.11.Arm64.Open\n    - profiler/elt/slowpatheltleave/slowpatheltleave.cmd\n```\n\n**Error message:**\n```\n \nAssert failure(PID 8060 [0x00001f7c], Thread: 6480 [0x1950]): !CREATE_CHECK_STRING(!\"Detected use of a corrupted OBJECTREF. Possible GC hole.\")\n\nCORECLR! `Object::ValidateInner\u0027::`1\u0027::catch$13 + 0xDC (0x00007ffe`5de6f968)\nCORECLR! CallSettingFrame + 0x68 (0x00007ffe`5d8b3240)\nCORECLR! _FrameHandler3::CxxCallCatchBlock + 0x1C0 (0x00007ffe`5ddbc9a0)\n\u003cno module\u003e! \u003cno symbol\u003e + 0x0 (0xce0d7ffe`d1fe3168)\n    File: D:\u0007_work1ssrccoreclr\u000bmobject.cpp:626\n    Image: C:hwC2160A55pCoreRun.exe\n\nUnhandled exception. System.Exception: Profiler tests are expected to contain the text \u0027PROFILER TEST PASSES\u0027 in the console output of the profilee app to indicate a passing test. Usually it is printed from the Shutdown() method of the profiler implementation. This text was not found in the output above. Profilee returned exit code -1073740286.\n   at Profiler.Tests.ProfilerTestRunner.FailFastWithMessage(String error)\n   at Profiler.Tests.ProfilerTestRunner.Run(String profileePath, String testName, Guid profilerClsid, String profileeArguments, ProfileeOptions profileeOptions, Dictionary`2 envVars, String reverseServerName, Boolean loadAsNotification, Int32 notificationCopies)\n   at SlowPathELTTests.SlowPathELTLeave.Main(String[] args)\n\nReturn code:      1\nRaw output file:      C:hwC2160A55wA79A08F7uploadseltslowpatheltleaveoutput.txt\nRaw output:\nBEGIN EXECUTION\n \"C:hwC2160A55pcorerun.exe\" -p \"System.Reflection.Metadata.MetadataUpdater.IsSupported=false\" -p \"System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true\"  slowpatheltleave.dll \nProfiler path: C:hwC2160A55wA79A08F7eprofilereltslowpatheltleaveProfiler.dll\nProfilee STDOUT: Profiler.dll!DllGetClassObject\nProfilee STDOUT: Profiler.dll!Profiler::Initialize\nProfilee STDOUT: Testing leave hooks\nProfilee STDOUT: x=-123 y=-4.3 str=Hello, test!\nProfilee STDOUT: SimpleArgsFunc returned Hello from SimpleArgsFunc!\nProfilee STDOUT: ss=x=1 d=1\nProfilee STDOUT: MixedStructFunc returned x=4 d=1\nProfilee STDOUT: ls=x0=0 d0=0 x1=1 d1=1 x2=2 d2=2 x3=3 d3=3\nProfilee STDOUT: LargeStructFunc returned 3\nTest failed: Profiler tests are expected to contain the text \u0027PROFILER TEST PASSES\u0027 in the console output of the profilee app to indicate a passing test. Usually it is printed from the Shutdown() method of the profiler implementation. This text was not found in the output above. Profilee returned exit code -1073740286.\nExpected: 100\nActual: -532462766\nEND EXECUTION - FAILED\nFAILED\nTest failed. Trying to see if dump file was created in C:cores since 5/4/2025 10:55:41 PM\nProcessing C:corescorerun.exe.3560.dmp\nUnable to find cdb.exe at C:Program Files (x86)Windows Kits10Debuggers\u0007rm64cdb.exe\nProcessing C:corescorerun.exe.8060.dmp\nUnable to find cdb.exe at C:Program Files (x86)Windows Kits10Debuggers\u0007rm64cdb.exe\nTest Harness Exitcode is : 1\nTo run the test:\nSet up CORE_ROOT and run.\n\u003e C:hwC2160A55wA79A08F7eprofilerprofiler../elt/slowpatheltleave/slowpatheltleave.cmd\n```\n\n**Stack trace:**\n```\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor7|0_8(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOqg3UgA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6qDdSA",
                                           "createdAt":  "2025-05-06T01:55:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-05-06T01:55:46Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Test failure: profiler/elt/slowpatheltleave/slowpatheltleave.cmd",
        "labels":  [
                       "arch-arm64",
                       "os-windows",
                       "GCStress",
                       "area-Diagnostics-coreclr",
                       "blocking-clean-ci-optional"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/115452",
        "createdAt":  "2025-05-11T14:28:19Z",
        "number":  115452,
        "author":  "kunalspathak",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-04T17:36:50Z",
        "body":  "\nSVE state is lost when debugging with disassembly window open.\n\nExpected:\n\n![Image](https://github.com/user-attachments/assets/b6734303-8497-43e7-9620-fb1a66c83a64)\n\nActual:\n\n![Image](https://github.com/user-attachments/assets/3aa08a3d-3583-4542-9bf1-ac99f7396b55)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOu9xCyQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6rDzDd",
                                           "createdAt":  "2025-05-11T14:28:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kunalspathak",
                                           "body":  "@dotnet/arm64-contrib ",
                                           "updatedAt":  "2025-05-11T14:28:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6rDzFp",
                                           "createdAt":  "2025-05-11T14:29:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @thaystg\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-05-11T14:29:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6rEP3j",
                                           "createdAt":  "2025-05-11T17:24:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-05-11T17:24:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6rR8BC",
                                           "createdAt":  "2025-05-12T18:32:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kunalspathak",
                                           "body":  "Turns out the predicate registers if involved in the codegen gets trashed leading to the wrong result.",
                                           "updatedAt":  "2025-05-12T18:32:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc60y2ha",
                                           "createdAt":  "2025-07-03T18:45:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "@kunalspathak are you planning on addressing this in 10?",
                                           "updatedAt":  "2025-07-03T18:45:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc673ELJ",
                                           "createdAt":  "2025-08-04T17:36:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "amanasifkhalid",
                                           "body":  "Fixing this would likely alter the debugging logic for non-SVE scenarios, which wouldn\u0027t be ideal at this point in .NET 10. Moving this to .NET 11.",
                                           "updatedAt":  "2025-08-04T17:36:44Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "[Sve/Debugger]: SVE state is not preserved during debugging and hence returning wrong result",
        "labels":  [
                       "area-Diagnostics-coreclr",
                       "arm-sve"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/115719",
        "createdAt":  "2025-05-19T11:01:50Z",
        "number":  115719,
        "author":  "eterekhin",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-08T18:22:22Z",
        "body":  "### Description\n\n\u003cimg width=\"962\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/d9f5c3cf-f4c8-408b-9d50-2490e35fbe26\" /\u003e\n\n\n\n### Reproduction Steps\n\nPlease use this code snippet for reproduction\n```cs\n\nusing System.Buffers;\n\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        var tokenPath = ReadOnlySequence\u003cbyte\u003e.Empty;\n        var propertyFullPath2 = Method(tokenPath);\n    }\n\n    static ReadOnlySequence\u003cbyte\u003e Method(ReadOnlySequence\u003cbyte\u003e tokenPath)\n    {\n        return ReadOnlySequence\u003cbyte\u003e.Empty;\n    }\n}\n```\n\n### Expected behavior\n\nEvaluation is allowed at that point\n\n### Actual behavior\n\nEvaluation is not allowed\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET 9 and a fresh master, not tested on earlier versions\nMac Apple M2 Max\n\n### Other information\n\nI collected COMPlus logs, please take a look\n\n[COMPLUS.LOG](https://github.com/user-attachments/files/20281786/COMPLUS.LOG)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOrUQBaQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6sWvwr",
                                           "createdAt":  "2025-05-19T16:38:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOESylFw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eterekhin",
                                                                               "createdAt":  "2025-05-20T09:39:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "eterekhin",
                                                                               "createdAt":  "2025-05-20T09:39:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Hi @eterekhin!  Thanks for reporting this issue!  I am also able to reproduce this issue on Windows x64 and on .NET 8.",
                                           "updatedAt":  "2025-05-19T16:38:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6tRAFp",
                                           "createdAt":  "2025-05-24T16:27:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eterekhin",
                                           "body":  "Hello! I would like to share some results of my investigation\n\nThis bug seems to be caused by unrolling structs with GC references([code](https://github.com/dotnet/runtime/blob/d896e8518a6ddba11bb58634a19a6bcb2a001927/src/coreclr/jit/lowerxarch.cpp#L492)) at the beginning of a sequence point. For such code an uninterruptible GC range is created and evaluation is prohibited according to this check \nhttps://github.com/dotnet/runtime/blob/69440910d623d3c3868f2827169c9428b46eaca6/src/coreclr/debug/ee/debugger.cpp#L15018\n\nCorrespoing piece of code of Main method (from my repro code snippet) , on Windows x64\n```asm\n\nG_M24006_IG06:        ; offs=0x000069, size=0x0012, bbWeight=1, PerfScore 6.00, BB01 [0000], nogc, extend\n\nIN000d: 000069 vmovdqu  xmm0, xmmword ptr [V01 rbp+0x68] // SEQ POINT STARTS HERE\nIN000e: 00006E vmovdqu  xmmword ptr [V05 rbp+0x20], xmm0\nIN000f: 000073 mov      rax, qword ptr [V01+0x10 rbp+0x78]\nIN0010: 000077 mov      qword ptr [V05+0x10 rbp+0x30], rax\n\nG_M24006_IG07:        ; offs=0x00007B, size=0x000D, bbWeight=1, PerfScore 2.00, BB01 [0000], extend\n\nIN0011: 00007B lea      rdx, [V05 rbp+0x20]\nIN0012: 00007F lea      rcx, [V04 rbp+0x38]\nIN0013: 000083 call     Program:Method(System.Buffers.ReadOnlySequence`1[ubyte]):System.Buffers.ReadOnlySequence`1[ubyte]\n```\n\nIn the latest versions we encounter this bug less frequently (as I understood it thanks to https://github.com/dotnet/runtime/pull/95565), but on .NET 7 it is reproduced with the following code\n\n```csharp\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        var s = new SomeStruct();\n        var propertyFullPath2 = Method(s);\n    }\n\n    static SomeStruct Method(SomeStruct s) =\u003e s;\n    public struct SomeStruct\n    {\n        public int Value;\n        public object Reference;\n    }\n}\n```\n\nFor a sake of experiment, I [tried](https://github.com/eterekhin/runtime/commit/8c77100467a024c4efd0ed408b7baaa1467cb220) inserting NO_OP node before such struct stores, that emits `nop` instruction in the beginning of the seq point, and it fixed the issue, but I am not sure if that\u0027s the proper to do so\n\nCould you please share your thoughts on that? How can we approach this issue?\nThanks you!\n",
                                           "updatedAt":  "2025-05-24T16:27:50Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Evaluation doesn\u0027t work because of being stopped at an unsafe gc point, but the method is not optimized",
        "labels":  [
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/115910",
        "createdAt":  "2025-05-22T17:35:47Z",
        "number":  115910,
        "author":  "tmat",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-08T18:18:06Z",
        "body":  "### Description\n\nAdding, updating or deleting a managed resource during Hot Reload/EnC currently requires restarting the application. To avoid that we need the runtime to allow changes to `ManifestResource` table.\n\nEmbedded resources listed in the `ManifestResource` table are stored in the resource section of the PE file, at an offset stored in the `ManifestResource` table. Similarly to FieldRVA implementation, we can store the blob in the IL delta stream in EnC delta and interpret the offset as a position in the IL stream.\n\nOnce implemented a new EnC capability `ChangeManifestResources` should be added.\n\nThe resource string cache also needs to be invalidated when Hot Reload change is applied: https://github.com/dotnet/runtime/issues/115911\n\nThe following APIs should return the updated resources after change is applied:\nhttps://learn.microsoft.com/en-us/dotnet/api/system.reflection.assembly.getmanifestresourceinfo?view=net-9.0\nhttps://learn.microsoft.com/en-us/dotnet/api/system.reflection.assembly.getmanifestresourcenames?view=net-9.0\nhttps://learn.microsoft.com/en-us/dotnet/api/system.reflection.assembly.getmanifestresourcestream?view=net-9.0\n\nAny Reflection caches that store the data need to be invalidated on Hot Reload update.\n\n### Reproduction Steps\n\nUpdate .resx file during Hot Reload/EnC session.\n\n### Expected behavior\n\nThe change is applied without restarting application.\n\n### Actual behavior\n\nThe change is ignored.\n\n### Regression?\n\nNo\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOrQASYA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6s-iLq",
                                           "createdAt":  "2025-05-22T17:47:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "@AaronRobinsonMSFT ",
                                           "updatedAt":  "2025-05-22T17:47:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6s_tqb",
                                           "createdAt":  "2025-05-22T19:47:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-05-22T19:47:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6s_xn0",
                                           "createdAt":  "2025-05-22T19:55:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Resources size is proportional to the assembly size. Do we believe that appending `O(assembly size)` blob per edit is going to work well enough performance wise?",
                                           "updatedAt":  "2025-05-22T19:55:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6s_5zE",
                                           "createdAt":  "2025-05-22T20:11:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "Wouldn\u0027t that mean just extra allocated memory? If a single resource is updated multiple times the old blobs can be freed, right?\nShouldn\u0027t matter much since it\u0027s only going to impact memory consumed during inner dev loop.\n\n\n",
                                           "updatedAt":  "2025-05-22T20:11:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6s_-jH",
                                           "createdAt":  "2025-05-22T20:19:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Time taken to create and copy around the large blobs would be my top concern.\n\nIIRC, early designs of .NET Framework EnC were on the `O(assembly size)` blob plan, it was proven unworkable and made us invent the incremental updates that we have today.",
                                           "updatedAt":  "2025-05-22T20:19:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6tABJg",
                                           "createdAt":  "2025-05-22T20:24:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "It might be a bit slower for large files (images, or something like that). Still faster and more convenient than having to rebuild and restart the app.\n\nFor string resources it shouldn\u0027t be too bad. E.g. `Microsoft.CodeAnalysis.CodeAnalysisResources.resources` is just 27KB while the assembly is 3.8MB",
                                           "updatedAt":  "2025-05-22T20:24:13Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "EnC: Add support for updating ManifestResource table",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117025",
        "createdAt":  "2025-06-25T16:02:51Z",
        "number":  117025,
        "author":  "max-charlamb",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-08T18:13:58Z",
        "body":  "",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOtIAMtQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc60gAy1",
                                           "createdAt":  "2025-07-02T15:23:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @steveisok, @dotnet/dotnet-diag\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-02T15:23:53Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[cDAC] On ARM64 Linux (maybe other platforms) the contract descriptor is not included in Heap minidumps.",
        "labels":  [
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117109",
        "createdAt":  "2025-06-27T23:33:05Z",
        "number":  117109,
        "author":  "jkotas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODFD1gg==",
                          "nodes":  [
                                        {
                                            "content":  "HEART",
                                            "user":  "jkoritzinsky",
                                            "createdAt":  "2025-06-28T02:10:57Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "filipnavara",
                                            "createdAt":  "2025-06-28T05:46:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mahara",
                                            "createdAt":  "2025-06-28T16:08:14Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2025-07-02T15:41:00Z",
        "body":  "The runtime has a number of different implementations of hashtables for historic reasons. It is not desirable to create cDac contracts for all of them.\n\n- [ ] Review hashtable usages that need to part of cDac contract\n- [ ] Unify on one good hashtable implementation that we like",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOs__Xzg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6zsIua",
                                           "createdAt":  "2025-06-28T00:09:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "max-charlamb",
                                           "body":  "These are the runtime hashtable implementations I\u0027ve come across, are there others I am missing?\n\n* [DacEnumerableHashTable](https://github.com/dotnet/runtime/blob/a8c0a03465b1a15f90f8d5286000d97569298752/src/coreclr/vm/dacenumerablehash.h#L5-L67)\n* [HashMap](https://github.com/dotnet/runtime/blob/a8c0a03465b1a15f90f8d5286000d97569298752/src/coreclr/vm/hash.h#L193-L230)\n* [SHash](https://github.com/dotnet/runtime/blob/a8c0a03465b1a15f90f8d5286000d97569298752/src/coreclr/inc/shash.h#L13-L114)",
                                           "updatedAt":  "2025-06-28T00:09:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6zsd36",
                                           "createdAt":  "2025-06-28T00:51:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Here are a few more:\n- [CHashtable](https://github.com/dotnet/runtime/blob/main/src/coreclr/inc/utilcode.h#L1593)\n- [EEHash](https://github.com/dotnet/runtime/blob/main/src/coreclr/vm/eehash.h)\n- [dn-simdhash](https://github.com/dotnet/runtime/blob/main/src/native/containers/dn-simdhash.h) - not DACzied currently, has interesting ideas\n- [Native AOT fork of SHash](https://github.com/dotnet/runtime/blob/main/src/coreclr/nativeaot/Runtime/shash.h)\n\nOutside the scope of this issue:\n- [JitHashTable](https://github.com/dotnet/runtime/blob/main/src/coreclr/jit/jithashtable.h) - not DACize\n- [SimplerHash](https://github.com/dotnet/runtime/blob/main/src/coreclr/inc/simplerhash.h) - not DACized, only used in one place, can be unified with JitHashTable\n- [dn-umap](https://github.com/dotnet/runtime/blob/main/src/native/containers/dn-umap.h) - only used by Mono",
                                           "updatedAt":  "2025-06-30T16:49:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6z88N_",
                                           "createdAt":  "2025-06-30T13:10:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEYguow==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkotas",
                                                                               "createdAt":  "2025-06-30T16:04:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "lateralusX",
                                           "body":  "\u003e * [dn-umap](https://github.com/dotnet/runtime/blob/main/src/native/containers/dn-umap.h) - only used by Mono\n\nIt is used by EventPipe so used by all runtimes.",
                                           "updatedAt":  "2025-06-30T13:10:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6z8_lA",
                                           "createdAt":  "2025-06-30T13:13:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lateralusX",
                                           "body":  "Maybe it\u0027s time to standardize on some version of what\u0027s implemented in native/containers or adjust/complement existing implementation of hashtables in the container library, dn-umap/dn-simdhash?",
                                           "updatedAt":  "2025-06-30T13:13:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6z_peg",
                                           "createdAt":  "2025-06-30T16:11:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEYmV6A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lateralusX",
                                                                               "createdAt":  "2025-07-01T07:09:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "HashMap, EEHash and DacEnumerableHashTable are lock-free for reading. It is important for scalability.\n\nMeta point is that performance (time, memory, scalability, code size) is important factor to consider with any unifications.",
                                           "updatedAt":  "2025-06-30T16:11:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6z_9fO",
                                           "createdAt":  "2025-06-30T16:34:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "\u003e HashMap, EEHash and DacEnumerableHashTable are lock-free for reading. It is important for scalability.\n\nIt sounds like the unified API (e.g. `minipal_hashmap_init`) might eventually take a `MINIPAL_HASHMAP_OPTIMIZED_FOR_READING` flag, defaulting to a balanced algorithm when not specified.",
                                           "updatedAt":  "2025-06-30T16:34:52Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "[cDAC] Hashtable contracts",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117561",
        "createdAt":  "2025-07-11T21:24:22Z",
        "number":  117561,
        "author":  "amanasifkhalid",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-20T23:04:15Z",
        "body":  "Config:\n```\nexport DOTNET_TieredCompilation=0\nexport DOTNET_EnableAVX2=0\nexport DOTNET_JitStress=1\n```\n\n[Example run.](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1092416\u0026view=results) cc @dotnet/jit-contrib \n\n## Build Information\nBuild: https://dev.azure.com/dnceng-public/public/_build/results?buildId=1092416\u0026view=results\nBuild error leg or test failing: \n\u003c!-- Error message template  --\u003e\n## Error Message\n\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\n\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\n\n```json\n{\n  \"ErrorMessage\": \"dwILOffsetWalk == dwILOffsetDebugInterface\",\n  \"BuildRetry\": false,\n  \"ExcludeConsoleLog\": false\n}\n```\n\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=1092416\r\n**Error message validated:** `[dwILOffsetWalk == dwILOffsetDebugInterface`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 7/11/2025 9:24:57 PM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|0|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOuJbX4Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc62n2Ti",
                                           "createdAt":  "2025-07-11T21:24:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @JulieLeeMSFT, @jakobbotsch\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-11T21:24:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc62_9Kf",
                                           "createdAt":  "2025-07-14T16:31:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jakobbotsch",
                                           "body":  "This assert was added in #116031. cc @davidwrighton \n\n```\nAssert failure(PID 6448 [0x00001930], Thread: 9400 [0x24b8]): dwILOffsetWalk == dwILOffsetDebugInterface\n\nCORECLR! ValidateILOffset + 0x1DF (0x00007ffa`5089f80f)\nCORECLR! ValidateILOffsets + 0x70D (0x00007ffa`508a000d)\nCORECLR! UnsafeJitFunctionWorker + 0x374 (0x00007ffa`509491d4)\nCORECLR! UnsafeJitFunction + 0x484 (0x00007ffa`50948c94)\nCORECLR! MethodDesc::JitCompileCodeLocked + 0x1EC (0x00007ffa`50a1e6cc)\nCORECLR! MethodDesc::JitCompileCodeLockedEventWrapper + 0x534 (0x00007ffa`50a1ef64)\nCORECLR! MethodDesc::JitCompileCode + 0x4DE (0x00007ffa`50a1e3de)\nCORECLR! MethodDesc::PrepareILBasedCode + 0x50C (0x00007ffa`50a20c9c)\nCORECLR! MethodDesc::PrepareCode + 0xF3 (0x00007ffa`50a20733)\nCORECLR! CodeVersionManager::PublishVersionableCodeIfNecessary + 0x4CF (0x00007ffa`508915af)\n    File: D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\debugdebugger.cpp:1394\n    Image: C:\\h\\w\\A8A00938\\p\\corerun.exe\n\nMismatch in IL offsets for 00007FF9F27E9018 at IP 00007FF9F25CA35C Native Offset 220:\n  Debug Interface IL Offset: 0\n  Walk IL Offsets IL Offset: 30\nIL Offset: -2, Native Offset: 0, STACK_EMPTY \nIL Offset: -1, Native Offset: 68, STACK_EMPTY \nIL Offset: 0, Native Offset: 82, STACK_EMPTY \nIL Offset: 12, Native Offset: 146, CALL_INSTRUCTION \nIL Offset: 17, Native Offset: 156, \nIL Offset: 22, Native Offset: 170, CALL_INSTRUCTION \nIL Offset: 27, Native Offset: 180, \nIL Offset: -3, Native Offset: 184, STACK_EMPTY \nIL Offset: 30, Native Offset: 220, CALL_INSTRUCTION \nIL Offset: -3, Native Offset: 261, STACK_EMPTY \nIL Offset: -1, Native Offset: -1, \nApp Exit Code: -1073740286\nExpected: 100\nActual: -1073740286\nEND EXECUTION - FAILED\nFAILED\n```",
                                           "updatedAt":  "2025-07-14T16:39:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc62_9ju",
                                           "createdAt":  "2025-07-14T16:32:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @steveisok, @dotnet/dotnet-diag\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-14T16:32:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc63DkvH",
                                           "createdAt":  "2025-07-14T22:01:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidwrighton",
                                           "body":  "This is not a significant issue. If this is the only failure in the stress suites we\u0027re seeing, you could consider disabling the call to the validation method on the stack.",
                                           "updatedAt":  "2025-07-14T22:01:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc64IYG-",
                                           "createdAt":  "2025-07-18T11:44:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEbHC2Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JulieLeeMSFT",
                                                                               "createdAt":  "2025-07-18T14:54:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jakobbotsch",
                                           "body":  "I looked briefly and it looks like the old logic considers the last range of the IL mappings to be `[184, 220)` while the new logic considers the last range to be `[184,261)`. Hence the old logic finds no mapping while the new logic does.\n\nIt\u0027s quite convoluted, but I get the impression that the intention of the old code is to ignore the `CALL_INSTRUCTION` mapping completely and that the new code is actually implementing the intention of the old code more properly.\n\nI will do what @davidwrighton suggested and disable the validation for now since this is failing all our jitstress runs.",
                                           "updatedAt":  "2025-07-18T11:44:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc64ltfh",
                                           "createdAt":  "2025-07-21T13:56:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jakobbotsch",
                                           "body":  "I marked this as disabled-test since the validation was disabled due to this issue.",
                                           "updatedAt":  "2025-07-21T13:56:56Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "`JIT/Methodical/tailcall/deep_gc_d` failing with assert `dwILOffsetWalk == dwILOffsetDebugInterface` with JitStress",
        "labels":  [
                       "disabled-test",
                       "os-linux",
                       "arch-x64",
                       "area-Diagnostics-coreclr",
                       "Known Build Error"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117782",
        "createdAt":  "2025-07-17T18:28:44Z",
        "number":  117782,
        "author":  "max-charlamb",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-17T20:07:48Z",
        "body":  "Follow-up to #108553\n\n\nDate | API\u0027s Completed | Total API\u0027s | Completion % | Notes\n-- | -- | -- | -- | --\n7/23/25 | 41 | 113 | 36.3% | Baseline\n7/30/25 | 55 | 113 | 48.7% | +14\n8/6/25 | 59 | 113 | 52.2% | +4\n8/20/25 | 71 | 113 | 62.8% | +12\n8/27/25 | 77 | 113 | 68.1% | +6\n9/3/25 | 79 | 113 | 69.9% | +2\n9/10/25 | 84 | 113 | 74.3% | +5\n9/17/25 | 91 | 113 | 80.5% | +7\n\n* [x]   ISOSDacInterface::GetThreadStoreData\n* [x]   ISOSDacInterface::GetAppDomainStoreData https://github.com/dotnet/runtime/pull/117633\n* [x] ISOSDacInterface::GetAppDomainList https://github.com/dotnet/runtime/pull/117515\n* [x] ISOSDacInterface::GetAppDomainData https://github.com/dotnet/runtime/pull/117827\n* [x] ISOSDacInterface::GetAppDomainName https://github.com/dotnet/runtime/pull/117837\n* [x]   ISOSDacInterface::GetDomainFromContext https://github.com/dotnet/runtime/pull/117517\n* [x] ISOSDacInterface::GetAssemblyList\n* [x] ISOSDacInterface::GetAssemblyData\n* [x] ISOSDacInterface::GetAssemblyName https://github.com/dotnet/runtime/pull/118875\n* [x] ISOSDacInterface::GetModule\n* [x] ISOSDacInterface::GetModuleData\n* [x] ISOSDacInterface::TraverseModuleMap https://github.com/dotnet/runtime/pull/118650\n* [x]   ISOSDacInterface::GetAssemblyModuleList https://github.com/dotnet/runtime/pull/117452\n* [x] ISOSDacInterface::GetILForModule https://github.com/dotnet/runtime/pull/118546\n* [x] ISOSDacInterface::GetThreadData\n* [x]   ISOSDacInterface::GetThreadFromThinlockID https://github.com/dotnet/runtime/pull/118187\n* [x] ISOSDacInterface::GetMethodDescData\n* [x]   ISOSDacInterface::GetMethodDescPtrFromIP\n* [x] ISOSDacInterface::GetMethodDescName\n* [x]   ISOSDacInterface::GetMethodDescPtrFromFrame https://github.com/dotnet/runtime/pull/118935\n* [x]   ISOSDacInterface::GetMethodDescFromToken https://github.com/dotnet/runtime/pull/118619\n* [x]   ISOSDacInterface::GetMethodDescTransparencyData\n* [ ] ISOSDacInterface::GetCodeHeaderData\n* [ ]   ISOSDacInterface::GetJitHelperFunctionName\n* [x]   ISOSDacInterface::GetJumpThunkTarget https://github.com/dotnet/runtime/pull/117781\n\n* [x] ISOSDacInterface::GetThreadpoolData\n* [x]   ISOSDacInterface::GetWorkRequestData\n* [x]   ISOSDacInterface::GetHillClimbingLogEntry\n* [x] ISOSDacInterface::GetObjectData\n* [x]   ISOSDacInterface::GetObjectStringData\n* [x]   ISOSDacInterface::GetMethodTableName\n* [x]   ISOSDacInterface::GetMethodTableData\n* [x]   ISOSDacInterface::GetMethodTableSlot\n* [x]   ISOSDacInterface::GetMethodTableFieldData https://github.com/dotnet/runtime/pull/117684\n* [x]   ISOSDacInterface::GetMethodTableTransparencyData\n* [x]   ISOSDacInterface::GetMethodTableForEEClass\n* [ ] ISOSDacInterface::GetFieldDescData\n* [x] ISOSDacInterface::GetFrameName\n* [x] ISOSDacInterface::GetPEFileBase\n* [x] ISOSDacInterface::GetPEFileName\n* [x] [ISOSDacInterface::GetGCHeapData](https://github.com/dotnet/runtime/pull/118050)\n* [x] [ISOSDacInterface::GetGCHeapList](https://github.com/dotnet/runtime/pull/118050)\n* [x] ISOSDacInterface::GetGCHeapDetails https://github.com/dotnet/runtime/pull/119119\n* [x]   ISOSDacInterface::GetGCHeapStaticData https://github.com/dotnet/runtime/pull/119119\n* [ ]   ISOSDacInterface::GetHeapSegmentData\n* [ ] ISOSDacInterface::GetOOMData\n* [ ] ISOSDacInterface::GetOOMStaticData\n* [ ]   ISOSDacInterface::GetHeapAnalyzeData\n* [ ]   ISOSDacInterface::GetHeapAnalyzeStaticData\n* [x]   ISOSDacInterface::GetDomainLocalModuleData\n* [x]   ISOSDacInterface::GetDomainLocalModuleDataFromAppDomain\n* [x]   ISOSDacInterface::GetDomainLocalModuleDataFromModule\n* [x]   ISOSDacInterface::GetThreadLocalModuleData\n* [x] ISOSDacInterface::GetSyncBlockData\n* [ ]   ISOSDacInterface::GetSyncBlockCleanupData\n* [ ] ISOSDacInterface::GetHandleEnum\n* [ ] ISOSDacInterface::TraverseEHInfo\n* [x]   ISOSDacInterface::GetNestedExceptionData\n* [x]   ISOSDacInterface::GetStressLogAddress\n* [x] ISOSDacInterface::GetUsefulGlobals\n* [x]   ISOSDacInterface::GetClrWatsonBuckets https://github.com/dotnet/runtime/pull/118754\n* [x] ISOSDacInterface::GetTLSIndex https://github.com/dotnet/runtime/pull/117587\n* [ ] ISOSDacInterface::GetRCWData\n* [ ] ISOSDacInterface::GetRCWInterfaces\n* [ ] ISOSDacInterface::GetCCWData\n* [ ] ISOSDacInterface::GetCCWInterfaces\n* [ ]   ISOSDacInterface::TraverseRCWCleanupList\n* [ ]   ISOSDacInterface::GetStackReferences\n* [ ] ISOSDacInterface::GetRegisterName\n* [x]   ISOSDacInterface2::GetObjectExceptionData\n* [ ] ISOSDacInterface2::IsRCWDCOMProxy\n* [ ]   ISOSDacInterface3::GetGCInterestingInfoData\n* [ ]   ISOSDacInterface3::GetGCInterestingInfoStaticData\n* [ ]   ISOSDacInterface3::GetGCGlobalMechanisms\n* [x]   ISOSDacInterface4::GetClrNotification https://github.com/dotnet/runtime/pull/117737\n* [ ]   ISOSDacInterface5::GetTieredVersions\n* [x]   ISOSDacInterface6::GetMethodTableCollectibleData\n* [x]   ISOSDacInterface7::GetPendingReJITID https://github.com/dotnet/runtime/pull/117533\n* [x]   ISOSDacInterface7::GetReJITInformation\n* [ ]   ISOSDacInterface7::GetProfilerModifiedILInformation\n* [ ]   ISOSDacInterface7::GetMethodsWithProfilerModifiedIL\n* [x]   ISOSDacInterface8::GetAssemblyLoadContext https://github.com/dotnet/runtime/pull/117939\n* [x]   ISOSDacInterface9::GetBreakingChangeVersion\n* [ ]   ISOSDacInterface10::GetObjectComWrappersData\n* [ ]   ISOSDacInterface10::IsComWrappersCCW\n* [ ]   ISOSDacInterface10::GetComWrappersCCWData\n* [ ]   ISOSDacInterface10::IsComWrappersRCW\n* [x]   ISOSDacInterface10::GetComWrappersRCWData https://github.com/dotnet/runtime/pull/118428\n* [x] ISOSDacInterface11::IsTrackedType https://github.com/dotnet/runtime/pull/118250/\n* [x] ISOSDacInterface11::GetTaggedMemory https://github.com/dotnet/runtime/pull/118250/\n* [x]   ISOSDacInterface14::GetStaticBaseAddress https://github.com/dotnet/runtime/pull/118282\n* [x]   ISOSDacInterface14::GetThreadStaticBaseAddress https://github.com/dotnet/runtime/pull/118411\n* [x]   ISOSDacInterface14::GetMethodTableInitializationFlags https://github.com/dotnet/runtime/pull/118493\n* [x]   ISOSDacInterface15::GetMethodTableSlotEnumerator\n* [ ]   ISOSDacInterface16::GetGCDynamicAdaptationMode\n* [x] IXCLRDataModule::GetFileName\n* [ ] IXCLRDataProcess::Flush\n* [x]   IXCLRDataProcess::GetTaskByOSThreadID\n* [x]   IXCLRDataProcess::StartEnumMethodInstancesByAddress https://github.com/dotnet/runtime/pull/115131\n* [x]   IXCLRDataProcess::EnumMethodInstanceByAddress https://github.com/dotnet/runtime/pull/115131\n* [x]   IXCLRDataProcess::EndEnumMethodInstancesByAddress https://github.com/dotnet/runtime/pull/115131\n* [ ]   IXCLRDataProcess::TranslateExceptionRecordToNotification\n* [x]   IXCLRDataProcess::GetOtherNotificationFlags https://github.com/dotnet/runtime/pull/117616\n* [x]   IXCLRDataProcess::SetOtherNotificationFlags https://github.com/dotnet/runtime/pull/118141\n* [ ]   IXCLRDataProcess2::SetGcNotification\n* [x] IXCLRDataStackWalk::GetContext\n* [x] IXCLRDataStackWalk::Next\n* [x] IXCLRDataStackWalk::Request\n* [x] IXCLRDataTask::CreateStackWalk\n* [x] IXCLRDataMethodInstance::   GetTokenAndScope https://github.com/dotnet/runtime/pull/115131\n* [x] IXCLRDataMethodInstance:: GetName\n* [x] IXCLRDataMethodInstance::   GetILOffsetsByAddress\n* [x] IXCLRDataMethodInstance::   GetILAddressMap\n* [x] IXCLRDataMethodInstance::   GetRepresentativeEntryAddress https://github.com/dotnet/runtime/pull/115131\n* [ ] IXCLRDataFrame:: GetNumArguments\n* [ ] IXCLRDataFrame:: GetArgumentByIndex\n* [ ] IXCLRDataFrame::   GetNumLocalVariables\n* [ ] IXCLRDataFrame::   GetLocalVariableByIndex\n* [ ] IXCLRDataValue:: GetBytes\n* [ ] IXCLRDataValue:: GetNumLocations\n* [ ] IXCLRDataValue:: GetLocationByIndex\n* [ ]   ICLRDataEnumMemoryRegions::EnumMemoryRegions\n* [X] https://github.com/dotnet/runtime/pull/117088\n\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOt-HyKQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc634fIp",
                                           "createdAt":  "2025-07-17T18:30:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @steveisok, @dotnet/dotnet-diag\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-17T18:30:02Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[cDAC] Support APIs used by SOS",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr",
                       "tracking"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117902",
        "createdAt":  "2025-07-21T22:30:32Z",
        "number":  117902,
        "author":  "noahfalk",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T18:11:25Z",
        "body":  "The ICorProfiler feature currently uses environment variables such as CORECLR_PROFILER and other CORECLR_xyz names to activate a profiler at startup. As part of consolidating our environment variables to use the DOTNET prefix, we should support DOTNET_* naming on the profiler env vars. \n\nI expect we\u0027d want to start by adding DOTNET_ variations to the existing env vars, then sometime in the future (probably at least 3 years) we could remove support for the current CORECLR prefixed variables.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOuMDjew==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc64wON7",
                                           "createdAt":  "2025-07-21T22:31:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @steveisok, @dotnet/dotnet-diag\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-21T22:31:27Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Add support for DOTNET prefix on ICorProfiler env vars",
        "labels":  [
                       "enhancement",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117918",
        "createdAt":  "2025-07-22T08:52:59Z",
        "number":  117918,
        "author":  "SakeTao",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-04T01:27:05Z",
        "body":  "**Failed in:** [runtime-coreclr jitstress-isas-x86 20250719.1](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=1100070)\n\n**Failed tests:**\n```\ncoreclr linux x64 Checked jitstress_isas_1_x86_nolzcnt @ AzureLinux.3.Amd64.Open\n    - profiler/handles/handles/handles.cmd\n```\n\n**Error message:**\n```\nUnhandled exception. System.Exception: Profilee returned exit code 139 instead of expected exit code 100.\n   at Profiler.Tests.ProfilerTestRunner.FailFastWithMessage(String error)\n   at Profiler.Tests.ProfilerTestRunner.Run(String profileePath, String testName, Guid profilerClsid, String profileeArguments, ProfileeOptions profileeOptions, Dictionary`2 envVars, String reverseServerName, Boolean loadAsNotification, Int32 notificationCopies)\n   at Profiler.Tests.HandlesTests.Main(String[] args)\n/datadisks/disk1/work/B47F09D0/w/B4BB09D8/e/profiler/profiler/../handles/handles/handles.sh: line 485:  5287 Aborted                 (core dumped) $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\n\nReturn code:      1\nRaw output file:      /datadisks/disk1/work/B47F09D0/w/B4BB09D8/uploads/handles/handles/output.txt\nRaw output:\nBEGIN EXECUTION\n/datadisks/disk1/work/B47F09D0/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true handles.dll \u0027\u0027\nProfiler path: /datadisks/disk1/work/B47F09D0/w/B4BB09D8/e/profiler/handles/handles/libProfiler.so\nProfilee STDOUT: Profiler.dll!DllGetClassObject\nProfilee STDOUT: Profiler.dll!Profiler::Initialize\nProfilee STDOUT: Handles started. Control-C to exit\nProfilee STDOUT: Worker thread started\nProfilee STDOUT: Allocating Weak\nProfilee STDOUT: Allocating Strong\nProfilee STDOUT: Allocating Pinned\nProfilee STDOUT: weak = 1-W\nProfilee STDOUT: strong = 2-S\nProfilee STDOUT: weak = 3-P\nProfilee STDOUT: Collection #1\nProfilee STDOUT: HandlesProfiler::ObjectAllocated: weak handle created.\nProfilee STDOUT: HandlesProfiler::ObjectAllocated: strong handle created.\nProfilee STDOUT: HandlesProfiler::ObjectAllocated: pinned handle created.\nProfilee STDOUT: HandlesProfiler::CheckIfAlive(weak): object not alive as expected.\nProfilee STDOUT: HandlesProfiler::CheckIfAlive(strong): object alive as expected (Profiler.Tests.TestClassForStrongHandle)\nProfilee STDOUT: HandlesProfiler::CheckIfAlive(pinned): object alive as expected (Profiler.Tests.TestClassForPinnedHandle)\nProfilee STDOUT: Collection #2\nProfilee STDOUT: HandlesProfiler::GarbageCollectionFinished(#1): pinned handle object address did not changed as expected.\nProfilee STDOUT: HandlesProfiler::CheckIfAlive(strong): object alive as expected (Profiler.Tests.TestClassForStrongHandle)\nProfilee STDOUT: HandlesProfiler::CheckIfAlive(pinned): object alive as expected (Profiler.Tests.TestClassForPinnedHandle)\nProfilee STDOUT: Collection #3\nProfilee STDOUT: Test Passed\nProfilee STDOUT: HandlesProfiler::GarbageCollectionFinished(#2): strong handle destroyed.\nProfilee STDOUT: HandlesProfiler::GarbageCollectionFinished(#2): pinned handle destroyed.\nProfilee STDOUT: HandlesProfiler::GarbageCollectionFinished(#3): Checking handles:\nProfilee STDOUT: HandlesProfiler::CheckIfAlive(strong): object not alive as expected.\nProfilee STDOUT: HandlesProfiler::CheckIfAlive(pinned): object not alive as expected.\nProfilee STDOUT: Profiler.dll!Profiler::Shutdown\nProfilee STDOUT: PROFILER TEST PASSES\nTest failed: Profilee returned exit code 139 instead of expected exit code 100.\nExpected: 100\nActual: 134\nEND EXECUTION - FAILED\nTest failed. Trying to see if dump file was created in /home/helixbot/dotnetbuild/dumps since 7/19/2025 9:15:01 PM\nTest Harness Exitcode is : 1\nTo run the test:\nSet up CORE_ROOT and run.\n\u003e /datadisks/disk1/work/B47F09D0/w/B4BB09D8/e/profiler/profiler/../handles/handles/handles.sh\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Boolean condition, String userMessage) in /_/src/arcade/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 123\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor16|0_17(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOu6_6Dg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc64-v93",
                                           "createdAt":  "2025-07-22T15:38:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Null pointer dereference in the profiler test .dll on background tiered compilation thread during shutdown:\n```\nCall Site\nlibProfiler!DoPInvokeWithCallbackOnOtherThread+0x1804\nlibProfiler!std::_Rb_tree\u003cunsigned long, std::pair\u003cunsigned long const, unsigned long\u003e, std::_Select1st\u003cstd::pair\u003cunsigned long const, unsigned long\u003e \u003e, std::less\u003cunsigned long\u003e, std::allocator\u003cstd::pair\u003cunsigned long const, unsigned long\u003e \u003e \u003e::_M_emplace_unique\u003cstd::pair\u003cunsigned long, unsigned long\u003e \u003e+0x23e\nlibcoreclr!EEToProfInterfaceImpl::ObjectAllocated+0x17b [/crossrootfs/x64/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h @ 5246] \nlibcoreclr!ObjectAllocatedHelper+0xc [/__w/1/s/src/coreclr/inc/profilepriv.inl @ 1393] \nlibcoreclr!ProfControlBlock::DoProfilerCallbackHelper\u003cint (*)(ProfilerInfo *), int (*)(EEToProfInterfaceImpl *, unsigned long, unsigned long), unsigned long, unsigned long\u003e+0x33 [/__w/1/s/src/native/eventpipe/ep-types-forward.h @ 286] \nlibcoreclr!ProfControlBlock::DoOneProfilerIteration\u003cvoid (*)(ProfilerInfo *, int (*)(ProfilerInfo *), int (*)(EEToProfInterfaceImpl *, unsigned long, unsigned long), int *, unsigned long, unsigned long), int (*)(ProfilerInfo *), int (*)(EEToProfInterfaceImpl *, unsigned long, unsigned long), int *, unsigned long, unsigned long\u003e+0x55 [/__w/1/s/src/native/eventpipe/ep-types-forward.h @ 202] \nlibcoreclr!ProfControlBlock::IterateProfilers\u003cvoid (*)(ProfilerInfo *, int (*)(ProfilerInfo *), int (*)(EEToProfInterfaceImpl *, unsigned long, unsigned long), int *, unsigned long, unsigned long), int (*)(ProfilerInfo *), int (*)(EEToProfInterfaceImpl *, unsigned long, unsigned long), int *, unsigned long, unsigned long\u003e+0x55 [/__w/1/s/src/native/eventpipe/ep-types-forward.h @ 210] \nlibcoreclr!ProfControlBlock::DoProfilerCallback\u003cint (*)(ProfilerInfo *), int (*)(EEToProfInterfaceImpl *, unsigned long, unsigned long), unsigned long, unsigned long\u003e+0x55 [/__w/1/s/src/native/eventpipe/ep-types-forward.h @ 298] \nlibcoreclr!ProfControlBlock::ObjectAllocated+0x7d [/crossrootfs/x64/usr/include/x86_64-linux-gnu/bits/types/FILE.h @ 1400] \nlibcoreclr!ProfilerObjectAllocatedCallback+0x8f [/__w/1/s/src/coreclr/vm/proftoeeinterfaceimpl.cpp @ 645] \nlibcoreclr!PublishObjectAndNotify\u003cObject\u003e+0x142 [/__w/1/s/src/coreclr/vm/gchelpers.cpp @ 15732480] \nlibcoreclr!FrozenObjectHeapManager::TryAllocateObject+0x186 [/__w/1/s/src/coreclr/vm/frozenobjectheap.cpp @ 118] \nlibcoreclr!AllocateString+0xa2 [/__w/1/s/src/coreclr/vm/gchelpers.cpp @ 1167] \nlibcoreclr!AllocateStringObject+0x49 [/crossrootfs/x64/usr/include/x86_64-linux-gnu/bits/stdint-intn.h @ 474] \nlibcoreclr!GlobalStringLiteralMap::AddStringLiteral+0x3e [/__w/1/s/src/coreclr/vm/stringliteralmap.cpp @ 504] \nlibcoreclr!GlobalStringLiteralMap::GetStringLiteral+0x3e [/__w/1/s/src/coreclr/vm/stringliteralmap.cpp @ 396] \nlibcoreclr!StringLiteralMap::GetStringLiteral+0xc1 [/__w/1/s/src/coreclr/vm/stringliteralmap.cpp @ 15732480] \nlibcoreclr!ModuleBase::ResolveStringRef+0x55 [/__w/1/s/src/coreclr/vm/ceeload.cpp @ 15732480] \nlibcoreclr!CEECodeGenInfo::constructStringLiteral+0xae [/__w/1/s/src/coreclr/vm/jitinterface.cpp @ 12035] \nlibclrjit!Compiler::fgMorphConst+0x30d [/__w/1/s/src/coreclr/jit/morph.cpp @ 15732480] \nlibclrjit!Compiler::fgMorphTree+0x289 [/__w/1/s/src/coreclr/jit/morph.cpp @ 15732480] \nlibclrjit!Compiler::fgMorphArgs+0xfd [/__w/1/s/src/coreclr/jit/morph.cpp @ 2073] \nlibclrjit!Compiler::fgMorphCall+0x441 [/__w/1/s/src/coreclr/jit/morph.cpp @ 6445] \nlibclrjit!Compiler::fgMorphTree+0x5a8 [/__w/1/s/src/coreclr/jit/morph.cpp @ 15732480] \nlibclrjit!Compiler::fgMorphStmts+0x302 [/__w/1/s/src/coreclr/jit/morph.cpp @ 13186] \nlibclrjit!Compiler::fgMorphBlock+0x204 [/__w/1/s/src/coreclr/jit/morph.cpp @ 13545] \nlibclrjit!Compiler::fgMorphBlocks+0x254 [/__w/1/s/src/coreclr/jit/morph.cpp @ 13666] \nlibclrjit!Phase::Run+0x6f [/__w/1/s/src/coreclr/jit/phase.cpp @ 61] \nlibclrjit!DoPhase+0x4b [/__w/1/s/src/coreclr/jit/phase.h @ 143] \nlibclrjit!Compiler::compCompile+0xc39 [/__w/1/s/src/coreclr/inc/corjit.h @ 4568] \nlibclrjit!Compiler::compCompileHelper+0xd4d [/__w/1/s/src/coreclr/inc/corjit.h @ 7089] \nlibclrjit!Compiler::compCompile::$_0::operator()+0x19 [/__w/1/s/src/coreclr/jit/compiler.cpp @ 6274] \nlibclrjit!Compiler::compCompile+0x758 [/__w/1/s/src/coreclr/jit/compiler.cpp @ 15732480] \nlibclrjit!jitNativeCode::$_0::operator()::{lambda(jitNativeCode(CORINFO_METHOD_STRUCT_ *, CORINFO_MODULE_STRUCT_ *, ICorJitInfo *, CORINFO_METHOD_INFO *, void **, unsigned int *, JitFlags *, void *)::$_0::operator()(jitNativeCode(CORINFO_METHOD_STRUCT_ *, CORINFO_MODULE_STRUCT_ *, ICorJitInfo *, CORINFO_METHOD_INFO *, void **, unsigned int *, JitFlags *, void *)::__JITParam *)::__JITParam *)#1}::operator()+0x1a2 [/__w/1/s/src/coreclr/jit/compiler.cpp @ 7732] \nlibclrjit!jitNativeCode::$_0::operator()+0x1bb [/__w/1/s/src/coreclr/inc/corjit.h @ 7756] \nlibclrjit!jitNativeCode+0x35d [/__w/1/s/src/coreclr/inc/corjit.h @ 7758] \nlibclrjit!CILJit::compileMethod+0x12d [/__w/1/s/src/coreclr/jit/ee_il_dll.cpp @ 302] \nlibcoreclr!invokeCompileMethod+0x84 [/__w/1/s/src/coreclr/vm/jitinterface.cpp @ 12833] \nlibcoreclr!UnsafeJitFunctionWorker+0x268 [/__w/1/s/src/coreclr/inc/volatile.h @ 13056] \nlibcoreclr!UnsafeJitFunction+0x501 [/__w/1/s/src/coreclr/vm/jitinterface.cpp @ 15732480] \nlibcoreclr!MethodDesc::JitCompileCodeLocked+0x156 [/__w/1/s/src/coreclr/vm/prestub.cpp @ 15732480] \nlibcoreclr!MethodDesc::JitCompileCodeLockedEventWrapper+0x422 [/__w/1/s/src/coreclr/vm/prestub.cpp @ 814] \nlibcoreclr!MethodDesc::JitCompileCode+0x21c [/__w/1/s/src/coreclr/vm/prestub.cpp @ 15732480] \nlibcoreclr!MethodDesc::PrepareILBasedCode+0x3f1 [/__w/1/s/src/coreclr/vm/prestub.cpp @ 432] \nlibcoreclr!TieredCompilationManager::CompileCodeVersion+0x186 [/__w/1/s/src/coreclr/vm/tieredcompilation.cpp @ 15732480] \nlibcoreclr!TieredCompilationManager::OptimizeMethod+0x67 [/__w/1/s/src/coreclr/vm/tieredcompilation.cpp @ 933] \nlibcoreclr!TieredCompilationManager::DoBackgroundWork+0x44a [/__w/1/s/src/coreclr/vm/tieredcompilation.cpp @ 820] \nlibcoreclr!TieredCompilationManager::BackgroundWorkerStart+0x145 [/__w/1/s/src/coreclr/vm/tieredcompilation.cpp @ 532] \nlibcoreclr!TieredCompilationManager::BackgroundWorkerBootstrapper1+0x33 [/__w/1/s/src/coreclr/vm/tieredcompilation.cpp @ 15732480] \nlibcoreclr!ManagedThreadBase_DispatchInner+0x6 [/__w/1/s/src/coreclr/vm/threads.cpp @ 6832] \nlibcoreclr!ManagedThreadBase_DispatchMiddle+0xa2 [/__w/1/s/src/coreclr/vm/threads.h @ 6876] \nlibcoreclr!\u003cunnamed-class\u003e::operator()+0xa6 [/__w/1/s/src/coreclr/vm/threads.h @ 7034] \nlibcoreclr!\u003cunnamed-class\u003e::operator()+0x120 [/__w/1/s/src/coreclr/vm/threads.h @ 7036] \nlibcoreclr!ManagedThreadBase_DispatchOuter+0x197 [/__w/1/s/src/coreclr/vm/threads.h @ 7060] \nlibcoreclr!ManagedThreadBase::KickOff+0x1c6 [/__w/1/s/src/coreclr/vm/threads.h @ 7074] \nlibcoreclr!TieredCompilationManager::BackgroundWorkerBootstrapper0+0x72 [/__w/1/s/src/coreclr/vm/tieredcompilation.cpp @ 15732480] \nlibcoreclr!CorUnix::CPalThread::ThreadEntry+0x3b0 [/__w/1/s/src/coreclr/pal/src/thread/thread.cpp @ 1620] \nlibc_so!pthread_condattr_setpshared+0x507\nlibc_so!clone+0x1dc\n0xffffffff`ffffffff\n```\n\nMain thread is in the middle of the shutdown:\n```\nCall Site\nlibc_so!unlink+0xb\nlibcoreclr!TwoWayPipe::Disconnect+0x1b [/__w/1/s/src/coreclr/debug/debug-pal/unix/twowaypipe.cpp @ 170] \nlibcoreclr!EESocketCleanupHelper+0x3c [/crossrootfs/x64/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h @ 585] \nlibcoreclr!PROCNotifyProcessShutdown+0x10 [/__w/1/s/src/coreclr/pal/src/thread/process.cpp @ 1988] \nlibcoreclr!CorUnix::TerminateCurrentProcessNoExit+0x4c\nlibcoreclr!coreclr_shutdown_2+0x5b [/__w/1/s/src/coreclr/dlls/mscoree/exports.cpp @ 15732480] \ncorerun!run+0x2311 [/__w/1/s/src/coreclr/hosts/corerun/corerun.cpp @ 518] \ncorerun!main+0x2bcd [/__w/1/s/src/coreclr/hosts/corerun/corerun.cpp @ 713] \nlibc_so!_libc_init_first+0x7b\nlibc_so!_libc_start_main+0x8b\ncorerun!start+0x2a\n0xffffffff`ffffffff\n```",
                                           "updatedAt":  "2025-07-22T15:38:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc64-xQj",
                                           "createdAt":  "2025-07-22T15:39:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @steveisok, @dotnet/dotnet-diag\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-22T15:39:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc66RM6l",
                                           "createdAt":  "2025-07-28T02:31:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr r2r 20250724.1](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=1105525)\n\n**Failed tests:**\n```\nR2R-CG2 osx arm64 Checked no_tiered_compilation @ OSX.13.Arm64.Open\n    - profiler/handles/handles/handles.cmd\n```\n\n**Error message:**\n```\nDOTNET_DbgEnableMiniDump is set and the createdump binary does not exist: /private/tmp/helix/working/A4B20963/p/crossgen2/createdump\nDOTNET_DbgEnableMiniDump is set and the createdump binary does not exist: /private/tmp/helix/working/A4B20963/p/crossgen2/createdump\nDOTNET_DbgEnableMiniDump is set and the createdump binary does not exist: /private/tmp/helix/working/A4B20963/p/crossgen2/createdump\nDOTNET_DbgEnableMiniDump is set and the createdump binary does not exist: /private/tmp/helix/working/A4B20963/p/crossgen2/createdump\nDOTNET_DbgEnableMiniDump is set and the createdump binary does not exist: /private/tmp/helix/working/A4B20963/p/crossgen2/createdump\n/private/tmp/helix/working/A4B20963/w/B71109AF/e/profiler/profiler/../handles/handles/handles.sh: line 272:  9401 Segmentation fault: 11  $__Command\n\nReturn code:      1\nRaw output file:      /tmp/helix/working/A4B20963/w/B71109AF/uploads/handles/handles/output.txt\nRaw output:\nBEGIN EXECUTION\nin takeLock\n/private/tmp/helix/working/A4B20963/w/B71109AF/e/profiler/handles/handles/IL-CG2/Microsoft.Diagnostics.NETCore.Client.dll\n02:25:12\nResponse file: /private/tmp/helix/working/A4B20963/w/B71109AF/e/profiler/handles/handles/Microsoft.Diagnostics.NETCore.Client.dll.rsp\n/private/tmp/helix/working/A4B20963/w/B71109AF/e/profiler/handles/handles/IL-CG2/Microsoft.Diagnostics.NETCore.Client.dll\n-o:/private/tmp/helix/working/A4B20963/w/B71109AF/e/profiler/handles/handles/Microsoft.Diagnostics.NETCore.Client.dll\n--targetarch:arm64\n--targetos:osx\n--verify-type-and-field-layout\n--method-layout:random\n-r:/tmp/helix/working/A4B20963/p/System.*.dll\n-r:/tmp/helix/working/A4B20963/p/Microsoft.*.dll\n-r:/tmp/helix/working/A4B20963/p/xunit.*.dll\n-r:/tmp/helix/working/A4B20963/p/mscorlib.dll\n-r:/tmp/helix/working/A4B20963/p/netstandard.dll\nRunning CrossGen2:  /tmp/helix/working/A4B20963/p/crossgen2/crossgen2 @/private/tmp/helix/working/A4B20963/w/B71109AF/e/profiler/handles/handles/Microsoft.Diagnostics.NETCore.Client.dll.rsp   -r:/private/tmp/helix/working/A4B20963/w/B71109AF/e/profiler/handles/handles/IL-CG2/*.dll\nEmitting R2R PE file: /private/tmp/helix/working/A4B20963/w/B71109AF/e/profiler/handles/handles/Microsoft.Diagnostics.NETCore.Client.dll\nRunning R2RDump:  dotnet /tmp/helix/working/A4B20963/p/R2RDump/R2RDump.dll --header --sc --in /private/tmp/helix/working/A4B20963/w/B71109AF/e/profiler/handles/handles/Microsoft.Diagnostics.NETCore.Client.dll --out /private/tmp/helix/working/A4B20963/w/B71109AF/e/profiler/handles/handles/Microsoft.Diagnostics.NETCore.Client.dll.r2rdump --val\n02:25:12\n/private/tmp/helix/working/A4B20963/w/B71109AF/e/profiler/handles/handles/IL-CG2/TestLibrary.dll\n02:25:12\nResponse file: /private/tmp/helix/working/A4B20963/w/B71109AF/e/profiler/handles/handles/TestLibrary.dll.rsp\n/private/tmp/helix/working/A4B20963/w/B71109AF/e/profiler/handles/handles/IL-CG2/TestLibrary.dll\n-o:/private/tmp/helix/working/A4B20963/w/B71109AF/e/profiler/handles/handles/TestLibrary.dll\n--targetarch:arm64\n--targetos:osx\n--verify-type-and-field-layout\n--method-layout:random\n-r:/tmp/helix/working/A4B20963/p/System.*.dll\n-r:/tmp/helix/working/A4B20963/p/Microsoft.*.dll\n-r:/tmp/helix/working/A4B20963/p/xunit.*.dll\n-r:/tmp/helix/working/A4B20963/p/mscorlib.dll\n-r:/tmp/helix/working/A4B20963/p/netstandard.dll\nRunning CrossGen2:  /tmp/helix/working/A4B20963/p/crossgen2/crossgen2 @/private/tmp/helix/working/A4B20963/w/B71109AF/e/profiler/handles/handles/TestLibrary.dll.rsp   -r:/private/tmp/helix/working/A4B20963/w/B71109AF/e/profiler/handles/handles/IL-CG2/*.dll\nEmitting R2R PE file: /private/tmp/helix/working/A4B20963/w/B71109AF/e/profiler/handles/handles/TestLibrary.dll\nRunning R2RDump:  dotnet /tmp/helix/working/A4B20963/p/R2RDump/R2RDump.dll --header --sc --in /private/tmp/helix/working/A4B20963/w/B71109AF/e/profiler/handles/handles/TestLibrary.dll --out /private/tmp/helix/working/A4B20963/w/B71109AF/e/profiler/handles/handles/TestLibrary.dll.r2rdump --val\n02:25:12\n/private/tmp/helix/working/A4\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/arcade/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor16|0_17(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-07-28T02:31:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc67r_oO",
                                           "createdAt":  "2025-08-04T01:27:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr jitstress-isas-arm 20250802.1](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=1112068)\n\n**Failed tests:**\n```\ncoreclr linux arm64 Checked jitstress_isas_nohwintrinsic_nosimd @ (AzureLinux.3.0.ArmArch.Open)Ubuntu.2204.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:azurelinux-3.0-helix-arm64v8\n    - profiler/handles/handles/handles.cmd\n```\n\n**Error message:**\n```\nUnhandled exception. System.Exception: Profilee returned exit code 139 instead of expected exit code 100.\n   at Profiler.Tests.ProfilerTestRunner.FailFastWithMessage(String error)\n   at Profiler.Tests.ProfilerTestRunner.Run(String profileePath, String testName, Guid profilerClsid, String profileeArguments, ProfileeOptions profileeOptions, Dictionary`2 envVars, String reverseServerName, Boolean loadAsNotification, Int32 notificationCopies)\n   at Profiler.Tests.HandlesTests.Main(String[] args)\n/root/helix/work/workitem/e/profiler/profiler/../handles/handles/handles.sh: line 485:   310 Aborted                 (core dumped) $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\n\nReturn code:      1\nRaw output file:      /root/helix/work/workitem/uploads/handles/handles/output.txt\nRaw output:\nBEGIN EXECUTION\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true handles.dll \u0027\u0027\nProfiler path: /root/helix/work/workitem/e/profiler/handles/handles/libProfiler.so\nProfilee STDOUT: Profiler.dll!DllGetClassObject\nProfilee STDOUT: Profiler.dll!Profiler::Initialize\nProfilee STDOUT: Handles started. Control-C to exit\nProfilee STDOUT: Allocating Weak\nProfilee STDOUT: Worker thread started\nProfilee STDOUT: Allocating Strong\nProfilee STDOUT: Allocating Pinned\nProfilee STDOUT: weak = 1-W\nProfilee STDOUT: strong = 2-S\nProfilee STDOUT: weak = 3-P\nProfilee STDOUT: Collection #1\nProfilee STDOUT: HandlesProfiler::ObjectAllocated: weak handle created.\nProfilee STDOUT: HandlesProfiler::ObjectAllocated: strong handle created.\nProfilee STDOUT: HandlesProfiler::ObjectAllocated: pinned handle created.\nProfilee STDOUT: HandlesProfiler::CheckIfAlive(weak): object not alive as expected.\nProfilee STDOUT: HandlesProfiler::CheckIfAlive(strong): object alive as expected (Profiler.Tests.TestClassForStrongHandle)\nProfilee STDOUT: HandlesProfiler::CheckIfAlive(pinned): object alive as expected (Profiler.Tests.TestClassForPinnedHandle)\nProfilee STDOUT: Collection #2\nProfilee STDOUT: HandlesProfiler::GarbageCollectionFinished(#1): pinned handle object address did not changed as expected.\nProfilee STDOUT: HandlesProfiler::CheckIfAlive(strong): object alive as expected (Profiler.Tests.TestClassForStrongHandle)\nProfilee STDOUT: HandlesProfiler::CheckIfAlive(pinned): object alive as expected (Profiler.Tests.TestClassForPinnedHandle)\nProfilee STDOUT: Collection #3\nProfilee STDOUT: Test Passed\nProfilee STDOUT: HandlesProfiler::GarbageCollectionFinished(#2): strong handle destroyed.\nProfilee STDOUT: HandlesProfiler::GarbageCollectionFinished(#2): pinned handle destroyed.\nProfilee STDOUT: HandlesProfiler::GarbageCollectionFinished(#3): Checking handles:\nProfilee STDOUT: HandlesProfiler::CheckIfAlive(strong): object not alive as expected.\nProfilee STDOUT: HandlesProfiler::CheckIfAlive(pinned): object not alive as expected.\nProfilee STDOUT: Profiler.dll!Profiler::Shutdown\nProfilee STDOUT: PROFILER TEST PASSES\nTest failed: Profilee returned exit code 139 instead of expected exit code 100.\nExpected: 100\nActual: 134\nEND EXECUTION - FAILED\nTest failed. Trying to see if dump file was created in /home/helixbot/dotnetbuild/dumps since 08/02/2025 20:42:32\nTest Harness Exitcode is : 1\nTo run the test:\nSet up CORE_ROOT and run.\n\u003e /root/helix/work/workitem/e/profiler/profiler/../handles/handles/handles.sh\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Boolean condition, String userMessage) in /_/src/arcade/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 123\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor16|0_17(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-08-04T01:27:05Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Test failure: profiler/handles/handles/handles.cmd",
        "labels":  [
                       "os-linux",
                       "arch-x64",
                       "area-Diagnostics-coreclr",
                       "blocking-clean-ci-optional"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117969",
        "createdAt":  "2025-07-23T06:22:05Z",
        "number":  117969,
        "author":  "Durai-cpp",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-28T16:47:05Z",
        "body":  "### Description\n\n\nHi Team,\n\nI have developed a custom .NET Core profiler using Visual Studio 2019. To load the profiler, I’ve configured the environment variables in the web.config file as follows:\n\n```\n\n\u003cenvironmentVariable name=\"CORECLR_ENABLE_PROFILING\" value=\"1\" /\u003e\n\u003cenvironmentVariable name=\"CORECLR_PROFILER\" value=\"{cf0d821e-299b-5307-a3d8-b283c03916dd}\" /\u003e\n\u003cenvironmentVariable name=\"CORECLR_PROFILER_PATH_64\" value=\"C:\\apps\\Publish_3.0\\Publish_3.0\\ClrProfiler.dll\" /\u003e\n\u003cenvironmentVariable name=\"CORECLR_PROFILER_PATH_32\" value=\"C:\\apps\\Publish_3.0\\Publish_3.0\\ClrProfiler32.dll\" /\u003e\n\n\n\n```\nWith this setup, I\u0027m able to successfully profile a 64-bit .NET Core application hosted in IIS.\n\nHowever, when attempting to profile a 32-bit .NET Core application, I encounter the following error:\n[aspnetcorev2_inprocess.dll] Event Log: \n\u0027Application \u0027/LM/W3SVC/5/ROOT\u0027 with physical root \u0027E:\\netcoreapp\\bin\\Release\\netcoreapp3.1\\publish\\\u0027 hit unexpected managed exception, exception code = \u00270xe0434352\u0027. \nFirst 30KB characters of captured stdout and stderr logs:\n\nUnhandled exception. System.BadImageFormatException: Bad binary signature. (0x80131192)\n   at net_core_azure.Program.Main(String[] args)\nEnd Event Log Message.\nTo troubleshoot, I enabled debug logs in the profiler. The issue appears to originate from the following block of code in\nil_writer.cpp, at line 636:\n\n```\nHRESULT ILRewriter::SetILFunctionBody(unsigned size, LPBYTE pBody)\n{\n    if (m_pICorProfilerFunctionControl != nullptr) \n    {\n        // We\u0027re supplying IL for a ReJIT scenario\n        IfFailRet(m_pICorProfilerFunctionControl-\u003eSetILFunctionBody(size, pBody));\n    } \n    else \n    {\n        // Classic instrumentation during the first JIT compilation\n        // Issue appears to be with the following line (line 636)\n        IfFailRet(m_pICorProfilerInfo-\u003eSetILFunctionBody(m_moduleId, m_tkMethod, pBody));\n    }\n}\n\n``````\nAdditional Information:\nThe helper assembly is built with .NET Standard 2.0.\nBoth 32-bit and 64-bit VC++ Redistributables are installed on the machine.\nFollowed this URL to develop my custom profiler,\nhttps://github.com/microsoftarchive/clrprofiler/blob/master/ILRewrite/ILRewriteProfiler/ilrewriter.cpp\nAlready raised questions in the following URL,\nhttps://learn.microsoft.com/en-us/answers/questions/785908/net-core-profiler-crashing-on-32-bit-application-e\nRequest:\nCould you please help identify why the 32-bit application fails when using the profiler, particularly at SetILFunctionBody()? Are there known issues or how to fix this issue ?\n\nThank you,\n\n### Reproduction Steps\n\nWe need to create a custom profiler using the following link:\nhttps://github.com/microsoftarchive/clrprofiler/blob/master/ILRewrite/ILRewriteProfiler/ilrewriter.cpp\n\nAfter setting the CORECLR_PROFILER environment variables to enable the profiler, we attempt to run a 32-bit .NET Core application. However, when we access the application, an issue occurs with the line mentioned in ilrewriter.cpp.\n\n\n\n\n### Expected behavior\n\nOur expectation is that the profiler should support both 32-bit and 64-bit applications.\n\n\n### Actual behavior\n\nThe profiler loads successfully for the 64-bit application, but we are facing the issue mentioned above when running the 32-bit application.\n\n\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOubDWCA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc65ZizS",
                                           "createdAt":  "2025-07-23T22:01:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "My top guesses for what went wrong would be providing bad IL in the call you mentioned or compiling your helper assembly as a 64 bit managed binary. I can sympathize that using the ICorProfiler API doesn\u0027t come with many guard rails to prevent errors or make diagnosis easy - very few people do it and it usually takes a bit of tenacity to be successful in the end. While I don\u0027t rule out a runtime bug, that isn\u0027t the usual culprit for an error like this one.\n\nYou\u0027ll need to do some more diagnosis if you want to learn more but I can offer a few suggestions:\n1. There is tracing you can turn on which might provide additional useful info: https://learn.microsoft.com/en-us/dotnet/core/dependency-loading/collect-details\n2. You can read any runtime code you want to better understand what conditions might trigger a particular error code. The source for SetILFunctionBody is [here](https://github.com/dotnet/runtime/blob/a2025e89b0609c01c3eb88c544e7d5f2f8886468/src/coreclr/vm/proftoeeinterfaceimpl.cpp#L4385).\n3. Even better than reading the source, you can inspect or step through it under a native debugger. Symbols for released builds should be available on the public Microsoft Symbol server and the source is indexed. More extensive information on debugging the runtime is here: https://github.com/dotnet/runtime/blob/fdfd4c453310812b20f95659845cd9ad0c4aba06/docs/workflow/debugging/coreclr/debugging-runtime.md\nThis might be easier in some simple standalone 32 bit .NET app rather than IIS. Ideally you\u0027d set your debugger to stop when exceptions are thrown and then look at the callstack when the BadImageFormatException occurs.\n4. Try writing a trivial 32 bit .NET app that will load and run the code in your helper assembly without any dependency on your IL rewriting profiler. If your helper is compiled 64-bit only you will probably get the BadImageFormatException here too. If the code in the helper assembly runs fine then you\u0027ve got evidence the problem is likely elsewhere.\n\nHope that helps!\n",
                                           "updatedAt":  "2025-07-23T22:01:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc65gYLg",
                                           "createdAt":  "2025-07-24T06:55:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Durai-cpp",
                                           "body":  "To provide additional information, I have attached the following screenshots:\n1. Web.config file – showing environment variable entries to support loading the 32-bit profiler binary\n\n\u003cimg width=\"448\" height=\"74\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/b518c4c3-f1d5-4b71-8680-1612e494d318\" /\u003e\n\u003cimg width=\"1103\" height=\"54\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/cbdd2af8-e30e-45f9-8d44-3757861b8372\" /\u003e\n\u003cimg width=\"837\" height=\"181\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/54a49b56-6010-41c1-8a1b-a7ab629e6aa8\" /\u003e\n\u003cimg width=\"1203\" height=\"23\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/d29616e1-aabf-40f7-ad6a-153b71da0d82\" /\u003e\n\n2. C++ Profiler Binary (dll Name changed) – also built with x86 architecture\n3. .NET Helper Assembly – built with x86 architecture\n4. w3wp.exe -Application running with x86 architecture\nPlease review the attached screenshots.",
                                           "updatedAt":  "2025-07-24T06:57:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc65sNYI",
                                           "createdAt":  "2025-07-25T00:08:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "It sounds like you have some evidence the helper assembly isn\u0027t the problem. In order to make progress on this my suggestions (1)-(3) above are still what I\u0027d recommend. You want to find an exception throwing stack trace or an event in the tracing data that provides more information about why the BadImageFormatException is occuring. Probably its going to be related to some bad IL or metadata that was provided by the profiler.",
                                           "updatedAt":  "2025-07-25T00:08:08Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  ".NET Core Profiler Crashing on 32 bit Application Environment",
        "labels":  [
                       "question",
                       "area-Diagnostics-coreclr",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118254",
        "createdAt":  "2025-08-01T00:12:40Z",
        "number":  118254,
        "author":  "jkotas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-05T18:27:48Z",
        "body":  "Log: https://dev.azure.com/dnceng-public/public/_build/results?buildId=1110659\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=30481004\u0026resultId=100271\u0026paneView=attachments\n\n```\n        STDIN: 00:02.032: !runcommand !DumpStackObjects\n        00:02.092: OS Thread Id: 0x398 (0)\n        00:02.095:           SP/REG           Object Name\n    }\n    Process 4724 exited 57005 (00:03.365 elapsed)\n    \n    SOSRunner error at D:\\a\\_work\\1\\s\\src\\SOS\\SOS.UnitTests\\Scripts\\StackAndOtherTests.script:189\n    Excerpt from D:\\a\\_work\\1\\s\\src\\SOS\\SOS.UnitTests\\Scripts\\StackAndOtherTests.script:\n      187 # Verify DumpStackObjects works\n      188 SOSCOMMAND:DumpStackObjects\n      189 VERIFY:.*OS Thread Id:\\s+0x\u003cHEXVAL\u003e\\s+.*\n      190 VERIFY:\\s*SP/REG\\s+Object\\s+Name\\s+\n      191 VERIFY:.*\\s*\u003cHEXVAL\u003e\\s+\u003cHEXVAL\u003e\\s+System\\.String.*\n        00:03.365: \u003cEND_COMMAND_ERROR\u003e\n    Exception executing SOSStatus System.Exception: CDB exited unexpectedly executing \u0027!SOSStatus\u0027\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOu0KW2Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc67QpbZ",
                                           "createdAt":  "2025-08-01T00:13:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @steveisok, @dotnet/dotnet-diag\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-01T00:13:34Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[runtime-diagnostics] CDB exited unexpectedly executing \u0027!SOSStatus\u0027",
        "labels":  [
                       "area-Diagnostics-coreclr",
                       "blocking-clean-ci-optional"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118839",
        "createdAt":  "2025-08-18T12:45:19Z",
        "number":  118839,
        "author":  "jakobbotsch",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-22T18:31:57Z",
        "body":  "Test run: https://dev.azure.com/dnceng-public/public/_build/results?buildId=1124795\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=30924732\u0026resultId=236589\u0026paneView=debug\nConsole log: https://helixr18s23ayyeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-main-b7a9438a67f841259f/profiler.0.1.Attempt.3/1/console.48beef98.log?helixlogtype=result",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvwsYhg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6-iLGX",
                                           "createdAt":  "2025-08-18T12:47:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @steveisok, @dotnet/dotnet-diag\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-18T12:47:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-iQrJ",
                                           "createdAt":  "2025-08-18T12:50:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihuBot",
                                           "body":  "I\u0027m a bot. Here is a possible related and/or duplicate issue (I may be wrong):\n- https://github.com/dotnet/runtime/issues/114314",
                                           "updatedAt":  "2025-08-18T12:50:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-lFDA",
                                           "createdAt":  "2025-08-18T15:25:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mdh1418",
                                           "body":  "@mangod9 Looks like the first hit under GC since the reenable in https://github.com/dotnet/runtime/pull/117825.",
                                           "updatedAt":  "2025-08-18T15:25:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-mAIz",
                                           "createdAt":  "2025-08-18T16:32:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mdh1418",
                                           "body":  "Crash dump 7744:\n```\n0:000\u003e ~*k\n\n.  0  Id: 1e40.9c7c Suspend: 0 Teb: 0000009b`f7499000 Unfrozen\n # Child-SP          RetAddr               Call Site\n00 0000009b`f777d7c0 00007fff`a0ab98d0     ntdll!NtWaitForMultipleObjects+0x4\n01 0000009b`f777d7c0 00007fff`2d0cee6c     KERNELBASE!WaitForMultipleObjectsEx+0xe0\n02 0000009b`f777daa0 00007fff`2d0cf564     coreclr!Thread::DoAppropriateAptStateWait+0x10c [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3143] \n03 0000009b`f777daf0 00007fff`2d0cefec     coreclr!Thread::DoAppropriateWaitWorker+0x514 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3323] \n04 (Inline Function) --------`--------     coreclr!Thread::DoAppropriateWait::__l9::__Body::Run+0x1c [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3038] \n05 0000009b`f777dc50 00007fff`2d217d4c     coreclr!Thread::DoAppropriateWait+0x14c [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3040] \n06 (Inline Function) --------`--------     coreclr!CLREventBase::WaitEx+0xdc [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\synch.cpp @ 459] \n07 0000009b`f777dd00 00007fff`2d0cc780     coreclr!CLREventBase::Wait+0xf4 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\synch.cpp @ 412] \n08 (Inline Function) --------`--------     coreclr!Thread::Wait+0x3c [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3707] \n09 0000009b`f777dd50 00007fff`2d0caaf8     coreclr!Thread::Block+0xb0 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3664] \n0a 0000009b`f777dd80 00007fff`2d0ca76c     coreclr!SyncBlock::Wait+0x370 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\syncblk.cpp @ 2833] \n0b 0000009b`f777dec0 00007fff`2cf96e44     coreclr!ObjHeader::Wait+0xb4 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\syncblk.cpp @ 2209] \n0c (Inline Function) --------`--------     coreclr!Object::Wait+0xc [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\object.h @ 340] \n0d 0000009b`f777def0 00007fff`2b9f0338     coreclr!Monitor_Wait+0x144 [D:\\a\\_work\\1\\s\\src\\coreclr\\classlibnative\\bcltype\\objectnative.cpp @ 116] \n0e 0000009b`f777dfa0 00007fff`2ba09058     System_Private_CoreLib+0x500338\n0f 0000009b`f777e080 00007fff`2ba3d37c     System_Private_CoreLib+0x519058\n10 0000009b`f777e100 00007fff`2ba3ce54     System_Private_CoreLib+0x54d37c\n11 0000009b`f777e170 00007ffe`cd9b6df4     System_Private_CoreLib+0x54ce54\n12 0000009b`f777e210 00000000`00000000     0x00007ffe`cd9b6df4\n\n   1  Id: 1e40.3588 Suspend: 0 Teb: 0000009b`f749d000 Unfrozen \".NET EventPipe\"\n # Child-SP          RetAddr               Call Site\n00 0000009b`f7a7fa80 00007fff`a0ab9ab0     ntdll!NtWaitForSingleObject+0x4\n01 0000009b`f7a7fa80 00007fff`2d217780     KERNELBASE!WaitForSingleObjectEx+0xb0\n02 (Inline Function) --------`--------     coreclr!CLREventWaitHelper2+0xc [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\synch.cpp @ 372] \n03 (Inline Function) --------`--------     coreclr!CLREventWaitHelper::__l3::__Body::Run+0xc [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\synch.cpp @ 397] \n04 0000009b`f7a7fb10 00007fff`2d217d78     coreclr!CLREventWaitHelper+0x18 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\synch.cpp @ 399] \n05 (Inline Function) --------`--------     coreclr!CLREventBase::WaitEx+0x108 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\synch.cpp @ 466] \n06 0000009b`f7a7fb40 00007fff`2ce83fec     coreclr!CLREventBase::Wait+0x120 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\synch.cpp @ 412] \n07 0000009b`f7a7fb90 00007fff`2ce84c5c     coreclr!ep_rt_wait_event_wait+0xf4 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\eventing\\eventpipe\\ep-rt-coreclr.h @ 714] \n08 (Inline Function) --------`--------     coreclr!session_disable_streaming_thread+0x104 [D:\\a\\_work\\1\\s\\src\\native\\eventpipe\\ep-session.c @ 224] \n09 0000009b`f7a7fc50 00007fff`2ce75ec8     coreclr!ep_session_disable+0x154 [D:\\a\\_work\\1\\s\\src\\native\\eventpipe\\ep-session.c @ 629] \n0a 0000009b`f7a7fc90 00007fff`2ce75a24     coreclr!disable_holding_lock+0x2c8 [D:\\a\\_work\\1\\s\\src\\native\\eventpipe\\ep.c @ 657] \n0b 0000009b`f7a7fd40 00007fff`2ce7decc     coreclr!disable_helper+0x10c [D:\\a\\_work\\1\\s\\src\\native\\eventpipe\\ep.c @ 728] \n0c 0000009b`f7a7fdf0 00007fff`2ce766e0     coreclr!ep_disable+0x144 [D:\\a\\_work\\1\\s\\src\\native\\eventpipe\\ep.c @ 1257] \n0d (Inline Function) --------`--------     coreclr!eventpipe_protocol_helper_stop_tracing+0x54 [D:\\a\\_work\\1\\s\\src\\native\\eventpipe\\ds-eventpipe-protocol.c @ 874] \n0e 0000009b`f7a7fe30 00007fff`2ce8c244     coreclr!ds_eventpipe_protocol_helper_handle_ipc_message+0x1e0 [D:\\a\\_work\\1\\s\\src\\native\\eventpipe\\ds-eventpipe-protocol.c @ 1004] \n0f 0000009b`f7a7fec0 00007fff`2ce8c37c     coreclr!server_loop_tick+0x1b4 [D:\\a\\_work\\1\\s\\src\\native\\eventpipe\\ds-server.c @ 153] \n10 0000009b`f7a7ff40 00007fff`a5538740     coreclr!server_thread+0xcc [D:\\a\\_work\\1\\s\\src\\native\\eventpipe\\ds-server.c @ 185] \n11 0000009b`f7a7ff60 00007fff`a59382c4     kernel32!BaseThreadInitThunk+0x40\n12 0000009b`f7a7ff70 00000000`00000000     ntdll!RtlUserThreadStart+0x44\n\n   2  Id: 1e40.bf94 Suspend: 0 Teb: 0000009b`f749f000 Unfrozen \".NET Debugger\"\n # Child-SP          RetAddr               Call Site\n00 0000009b`f7bff9e0 00007fff`a0ab98d0     ntdll!NtWaitForMultipleObjects+0x4\n01 0000009b`f7bff9e0 00007fff`2cf0ea74     KERNELBASE!WaitForMultipleObjectsEx+0xe0\n02 0000009b`f7bffcc0 00007fff`2cf10134     coreclr!DebuggerRCThread::MainLoop+0x1ac [D:\\a\\_work\\1\\s\\src\\coreclr\\debug\\ee\\rcthread.cpp @ 928] \n03 0000009b`f7bffdb0 00007fff`2cf10274     coreclr!DebuggerRCThread::ThreadProc+0x3cc [D:\\a\\_work\\1\\s\\src\\coreclr\\debug\\ee\\rcthread.cpp @ 731] \n04 0000009b`f7bffe30 00007fff`a5538740     coreclr!DebuggerRCThread::ThreadProcStatic+0x74 [D:\\a\\_work\\1\\s\\src\\coreclr\\debug\\ee\\rcthread.cpp @ 1322] \n05 0000009b`f7bffe50 00007fff`a59382c4     kernel32!BaseThreadInitThunk+0x40\n06 0000009b`f7bffe60 00000000`00000000     ntdll!RtlUserThreadStart+0x44\n\n   3  Id: 1e40.896c Suspend: 0 Teb: 0000009b`f74a1000 Unfrozen\n # Child-SP          RetAddr               Call Site\n00 0000009b`f7d7f690 00007fff`a0ab9ab0     ntdll!NtWaitForSingleObject+0x4\n01 0000009b`f7d7f690 00007fff`2d217780     KERNELBASE!WaitForSingleObjectEx+0xb0\n02 (Inline Function) --------`--------     coreclr!CLREventWaitHelper2+0xc [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\synch.cpp @ 372] \n03 (Inline Function) --------`--------     coreclr!CLREventWaitHelper::__l3::__Body::Run+0xc [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\synch.cpp @ 397] \n04 0000009b`f7d7f720 00007fff`2d217d78     coreclr!CLREventWaitHelper+0x18 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\synch.cpp @ 399] \n05 (Inline Function) --------`--------     coreclr!CLREventBase::WaitEx+0x108 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\synch.cpp @ 466] \n06 0000009b`f7d7f750 00007fff`2d1e0f54     coreclr!CLREventBase::Wait+0x120 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\synch.cpp @ 412] \n07 0000009b`f7d7f7a0 00007fff`2d1e1490     coreclr!ProfilingAPIDetach::ExecuteEvacuationLoop+0x3c [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\profdetach.cpp @ 293] \n08 0000009b`f7d7f860 00007fff`a5538740     coreclr!ProfilingAPIDetach::ProfilingAPIDetachThreadStart+0x70 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\profdetach.cpp @ 565] \n09 0000009b`f7d7f900 00007fff`a59382c4     kernel32!BaseThreadInitThunk+0x40\n0a 0000009b`f7d7f910 00000000`00000000     ntdll!RtlUserThreadStart+0x44\n\n   4  Id: 1e40.69bc Suspend: 0 Teb: 0000009b`f74a5000 Unfrozen \".NET Finalizer\"\n # Child-SP          RetAddr               Call Site\n00 (Inline Function) --------`--------     coreclr!WKS::mark_queue_t::queue_mark+0x30 [D:\\a\\_work\\1\\s\\src\\coreclr\\gc\\gc.cpp @ 27724] \n01 (Inline Function) --------`--------     coreclr!WKS::mark_queue_t::queue_mark+0xa0 [D:\\a\\_work\\1\\s\\src\\coreclr\\gc\\gc.cpp @ 27748] \n02 0000009b`f807ccc0 00007fff`2d3193d0     coreclr!WKS::gc_heap::mark_object_simple1+0xe48 [D:\\a\\_work\\1\\s\\src\\coreclr\\gc\\gc.cpp @ 27959] \n03 0000009b`f807cd90 00007fff`2d2f7574     coreclr!WKS::gc_heap::mark_object_simple+0x650 [D:\\a\\_work\\1\\s\\src\\coreclr\\gc\\gc.cpp @ 28409] \n04 0000009b`f807ce20 00007fff`2d164664     coreclr!WKS::GCHeap::Promote+0x164 [D:\\a\\_work\\1\\s\\src\\coreclr\\gc\\gc.cpp @ 50202] \n05 0000009b`f807ce80 00007fff`2d290890     coreclr!GcEnumObject+0xa4 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\gcenv.ee.common.cpp @ 209] \n06 0000009b`f807ceb0 00007fff`2d28bd04     coreclr!TGcInfoDecoder\u003cARM64GcInfoEncoding\u003e::ReportStackSlotToGC+0x2c8 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\gcinfodecoder.cpp @ 2324] \n07 (Inline Function) --------`--------     coreclr!TGcInfoDecoder\u003cARM64GcInfoEncoding\u003e::ReportSlotToGC+0x1e0 [D:\\a\\_work\\1\\s\\src\\coreclr\\inc\\gcinfodecoder.h @ 765] \n08 0000009b`f807cf10 00007fff`2cffd6d4     coreclr!TGcInfoDecoder\u003cARM64GcInfoEncoding\u003e::EnumerateLiveSlots+0x1574 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\gcinfodecoder.cpp @ 1026] \n09 0000009b`f807d080 00007fff`2d164de4     coreclr!EECodeManager::EnumGcRefs+0x1a4 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\eetwain.cpp @ 1343] \n0a 0000009b`f807d260 00007fff`2d0bfccc     coreclr!GcStackCrawlCallBack+0x674 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\gcenv.ee.common.cpp @ 364] \n0b (Inline Function) --------`--------     coreclr!Thread::MakeStackwalkerCallback+0x6c [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\stackwalk.cpp @ 802] \n0c 0000009b`f807e040 00007fff`2d0bfa54     coreclr!Thread::StackWalkFramesEx+0x1e4 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\stackwalk.cpp @ 880] \n0d 0000009b`f807e220 00007fff`2d163728     coreclr!Thread::StackWalkFrames+0x12c [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\stackwalk.cpp @ 960] \n0e 0000009b`f807ef50 00007fff`2d162460     coreclr!ScanStackRoots+0x288 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\gcenv.ee.cpp @ 206] \n0f 0000009b`f807efd0 00007fff`2d319a7c     coreclr!GCToEEInterface::GcScanRoots+0x168 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\gcenv.ee.cpp @ 308] \n10 0000009b`f807f040 00007fff`2d30fbb4     coreclr!WKS::gc_heap::mark_phase+0x404 [D:\\a\\_work\\1\\s\\src\\coreclr\\gc\\gc.cpp @ 30302] \n11 0000009b`f807f130 00007fff`2d30f8bc     coreclr!WKS::gc_heap::gc1+0x2bc [D:\\a\\_work\\1\\s\\src\\coreclr\\gc\\gc.cpp @ 22740] \n12 0000009b`f807f220 00007fff`2d2f5c14     coreclr!WKS::gc_heap::garbage_collect+0x77c [D:\\a\\_work\\1\\s\\src\\coreclr\\gc\\gc.cpp @ 24913] \n13 0000009b`f807f2f0 00007fff`2d2f5784     coreclr!WKS::GCHeap::GarbageCollectGeneration+0x424 [D:\\a\\_work\\1\\s\\src\\coreclr\\gc\\gc.cpp @ 51722] \n14 (Inline Function) --------`--------     coreclr!WKS::GCHeap::GarbageCollectTry+0x5c [D:\\a\\_work\\1\\s\\src\\coreclr\\gc\\gc.cpp @ 50912] \n15 0000009b`f807f390 00007fff`2d2f8dc4     coreclr!WKS::GCHeap::GarbageCollect+0x1c4 [D:\\a\\_work\\1\\s\\src\\coreclr\\gc\\gc.cpp @ 50845] \n16 0000009b`f807f3f0 00007fff`2d1660a4     coreclr!WKS::GCHeap::StressHeap+0x724 [D:\\a\\_work\\1\\s\\src\\coreclr\\gc\\gc.cpp @ 50475] \n17 (Inline Function) --------`--------     coreclr!_GCStress::StressGcTriggerPolicy::Trigger+0x48 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\gcstress.h @ 306] \n18 (Inline Function) --------`--------     coreclr!_GCStress::GCSBase\u003c1,_GCStress::IgnoreFastGcSPolicy,_GCStress::AnyGcModePolicy,_GCStress::StressGcTriggerPolicy\u003e::MaybeTrigger+0x5c [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\gcstress.h @ 424] \n19 (Inline Function) --------`--------     coreclr!_GCStress::GCStress\u003c10,mpl::null_type,mpl::null_type,mpl::null_type\u003e::MaybeTrigger+0x5c [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\gcstress.h @ 473] \n1a 0000009b`f807f4c0 00007fff`2d166b68     coreclr!Alloc+0xdc [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\gchelpers.cpp @ 480] \n1b 0000009b`f807f500 00007fff`2d168778     coreclr!AllocateObject+0x138 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\gchelpers.cpp @ 1283] \n1c 0000009b`f807f550 00007fff`2ce547a0     coreclr!RhpGcAlloc+0x208 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\gchelpers.cpp @ 109] \n1d 0000009b`f807f650 00007fff`2bff8600     coreclr!RhpNewObject+0x2c [D:\\a\\_work\\1\\s\\artifacts\\obj\\coreclr\\windows.arm64.Checked\\vm\\wks\\AllocFast.asm @ 6020] \n1e 0000009b`f807f700 00007fff`2bc3fa48     System_Private_CoreLib+0xb08600\n1f 0000009b`f807f740 00007fff`2b8b8cb0     System_Private_CoreLib+0x74fa48\n20 0000009b`f807f7b0 00007fff`2b84a26c     System_Private_CoreLib+0x3c8cb0\n21 0000009b`f807f7d0 00007fff`2ce52d04     System_Private_CoreLib+0x35a26c\n22 0000009b`f807f8b0 00007fff`2d111518     coreclr!CallDescrWorkerInternal+0x84 [D:\\a\\_work\\1\\s\\artifacts\\obj\\coreclr\\windows.arm64.Checked\\vm\\wks\\CallDescrWorkerARM64.asm @ 5904] \n23 0000009b`f807f8d0 00007fff`2d111d68     coreclr!CallDescrWorkerWithHandler+0x120 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 59] \n24 0000009b`f807f920 00007fff`2d15ea08     coreclr!DispatchCallSimple+0xf8 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 242] \n25 (Inline Function) --------`--------     coreclr!FinalizerThread::FinalizeAllObjects+0xe8 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\finalizerthread.cpp @ 235] \n26 0000009b`f807fa00 00007fff`2d0d3058     coreclr!FinalizerThread::FinalizerThreadWorker+0x9d8 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\finalizerthread.cpp @ 466] \n27 (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0x18 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 6830] \n28 0000009b`f807fd40 00007fff`2d0d4b38     coreclr!ManagedThreadBase_DispatchMiddle+0x118 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 6874] \n29 (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchOuter::__l8::__Body::Run::__l4::__Body::Run+0x8 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7032] \n2a 0000009b`f807fe60 00007fff`2d0d3130     coreclr!`ManagedThreadBase_DispatchOuter\u0027::`8\u0027::__Body::Run+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7034] \n2b 0000009b`f807fea0 00007fff`2d0d2cac     coreclr!ManagedThreadBase_DispatchOuter+0xa8 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7056] \n2c 0000009b`f807ff20 00007fff`2d15dc80     coreclr!ManagedThreadBase::KickOff+0x14 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7072] \n2d 0000009b`f807ff40 00007fff`a5538740     coreclr!FinalizerThread::FinalizerThreadStart+0x1c0 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\finalizerthread.cpp @ 523] \n2e 0000009b`f807ffa0 00007fff`a59382c4     kernel32!BaseThreadInitThunk+0x40\n2f 0000009b`f807ffb0 00000000`00000000     ntdll!RtlUserThreadStart+0x44\n\n   5  Id: 1e40.49d8 Suspend: 0 Teb: 0000009b`f74a7000 Unfrozen \".NET TP Worker\"\n # Child-SP          RetAddr               Call Site\n00 0000009b`f81fef40 00007fff`a0aa5c98     ntdll!NtReadFile+0x4\n01 0000009b`f81fef40 00007ffe`cd9c3510     KERNELBASE!ReadFile+0x88\n02 0000009b`f81fefa0 00000000`00000000     0x00007ffe`cd9c3510\n\n   6  Id: 1e40.3304 Suspend: 0 Teb: 0000009b`f74a9000 Unfrozen \".NET TP Gate\"\n # Child-SP          RetAddr               Call Site\n00 0000009b`f737f060 00007fff`a0ab98d0     ntdll!NtWaitForMultipleObjects+0x4\n01 0000009b`f737f060 00007fff`2d0cee6c     KERNELBASE!WaitForMultipleObjectsEx+0xe0\n02 0000009b`f737f340 00007fff`2d0cf564     coreclr!Thread::DoAppropriateAptStateWait+0x10c [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3143] \n03 0000009b`f737f390 00007fff`2d0cefec     coreclr!Thread::DoAppropriateWaitWorker+0x514 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3323] \n04 (Inline Function) --------`--------     coreclr!Thread::DoAppropriateWait::__l9::__Body::Run+0x1c [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3038] \n05 0000009b`f737f4f0 00007fff`2d130878     coreclr!Thread::DoAppropriateWait+0x14c [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 3040] \n06 0000009b`f737f5a0 00007fff`2b9f76fc     coreclr!WaitHandle_WaitOneCore+0x128 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comwaithandle.cpp @ 29] \n07 0000009b`f737f630 00007fff`2ba2a4f4     System_Private_CoreLib+0x5076fc\n08 0000009b`f737f710 00007fff`2b9f11d8     System_Private_CoreLib+0x53a4f4\n09 0000009b`f737f820 00007fff`2ce52d04     System_Private_CoreLib+0x5011d8\n0a 0000009b`f737f840 00007fff`2d111518     coreclr!CallDescrWorkerInternal+0x84 [D:\\a\\_work\\1\\s\\artifacts\\obj\\coreclr\\windows.arm64.Checked\\vm\\wks\\CallDescrWorkerARM64.asm @ 5904] \n0b 0000009b`f737f860 00007fff`2d111d68     coreclr!CallDescrWorkerWithHandler+0x120 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 59] \n0c 0000009b`f737f8b0 00007fff`2d128c50     coreclr!DispatchCallSimple+0xf8 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 242] \n0d 0000009b`f737f990 00007fff`2d0d3058     coreclr!KickOffThread_Worker+0x120 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 137] \n0e (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0x18 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 6830] \n0f 0000009b`f737fa10 00007fff`2d0d4b38     coreclr!ManagedThreadBase_DispatchMiddle+0x118 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 6874] \n10 (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchOuter::__l8::__Body::Run::__l4::__Body::Run+0x8 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7032] \n11 0000009b`f737fb30 00007fff`2d0d3130     coreclr!`ManagedThreadBase_DispatchOuter\u0027::`8\u0027::__Body::Run+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7034] \n12 0000009b`f737fb70 00007fff`2d0d2cac     coreclr!ManagedThreadBase_DispatchOuter+0xa8 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7056] \n13 0000009b`f737fbf0 00007fff`2d128af0     coreclr!ManagedThreadBase::KickOff+0x14 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7072] \n14 0000009b`f737fc10 00007fff`a5538740     coreclr!KickOffThread+0x180 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 206] \n15 0000009b`f737fcb0 00007fff`a59382c4     kernel32!BaseThreadInitThunk+0x40\n16 0000009b`f737fcc0 00000000`00000000     ntdll!RtlUserThreadStart+0x44\n\n   7  Id: 1e40.6c74 Suspend: 0 Teb: 0000009b`f74ab000 Unfrozen \".NET TP Worker\"\n # Child-SP          RetAddr               Call Site\n00 0000009b`f837ef80 00007fff`a58c254c     ntdll!NtDelayExecution+0x4\n01 0000009b`f837ef80 00007fff`a0be1f4c     ntdll!RtlDelayExecution+0x3c\n02 0000009b`f837efd0 00007fff`2d2f59b0     KERNELBASE!#SwitchToThread+0x1c\n03 (Inline Function) --------`--------     coreclr!WKS::gc_heap::disable_preemptive+0x10 [D:\\a\\_work\\1\\s\\src\\coreclr\\gc\\gc.cpp @ 1735] \n04 (Inline Function) --------`--------     coreclr!WKS::safe_switch_to_thread+0x10 [D:\\a\\_work\\1\\s\\src\\coreclr\\gc\\gc.cpp @ 1395] \n05 (Inline Function) --------`--------     coreclr!WKS::enter_spin_lock_noinstru+0x190 [D:\\a\\_work\\1\\s\\src\\coreclr\\gc\\gc.cpp @ 1543] \n06 (Inline Function) --------`--------     coreclr!WKS::enter_spin_lock+0x190 [D:\\a\\_work\\1\\s\\src\\coreclr\\gc\\gc.cpp @ 1572] \n07 0000009b`f837eff0 00007fff`2d2f5784     coreclr!WKS::GCHeap::GarbageCollectGeneration+0x1c0 [D:\\a\\_work\\1\\s\\src\\coreclr\\gc\\gc.cpp @ 51636] \n08 (Inline Function) --------`--------     coreclr!WKS::GCHeap::GarbageCollectTry+0x5c [D:\\a\\_work\\1\\s\\src\\coreclr\\gc\\gc.cpp @ 50912] \n09 0000009b`f837f090 00007fff`2d2f8dc4     coreclr!WKS::GCHeap::GarbageCollect+0x1c4 [D:\\a\\_work\\1\\s\\src\\coreclr\\gc\\gc.cpp @ 50845] \n0a 0000009b`f837f0f0 00007fff`2d1660a4     coreclr!WKS::GCHeap::StressHeap+0x724 [D:\\a\\_work\\1\\s\\src\\coreclr\\gc\\gc.cpp @ 50475] \n0b (Inline Function) --------`--------     coreclr!_GCStress::StressGcTriggerPolicy::Trigger+0x48 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\gcstress.h @ 306] \n0c (Inline Function) --------`--------     coreclr!_GCStress::GCSBase\u003c1,_GCStress::IgnoreFastGcSPolicy,_GCStress::AnyGcModePolicy,_GCStress::StressGcTriggerPolicy\u003e::MaybeTrigger+0x5c [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\gcstress.h @ 424] \n0d (Inline Function) --------`--------     coreclr!_GCStress::GCStress\u003c10,mpl::null_type,mpl::null_type,mpl::null_type\u003e::MaybeTrigger+0x5c [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\gcstress.h @ 473] \n0e 0000009b`f837f1c0 00007fff`2d166b68     coreclr!Alloc+0xdc [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\gchelpers.cpp @ 480] \n0f 0000009b`f837f200 00007fff`2d168778     coreclr!AllocateObject+0x138 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\gchelpers.cpp @ 1283] \n10 0000009b`f837f250 00007fff`2ce547a0     coreclr!RhpGcAlloc+0x208 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\gchelpers.cpp @ 109] \n11 0000009b`f837f350 00007fff`2b85d248     coreclr!RhpNewObject+0x2c [D:\\a\\_work\\1\\s\\artifacts\\obj\\coreclr\\windows.arm64.Checked\\vm\\wks\\AllocFast.asm @ 6020] \n12 0000009b`f837f400 00007ffe`cd9d28cc     System_Private_CoreLib+0x36d248\n13 0000009b`f837f500 00000000`00000000     0x00007ffe`cd9d28cc\n\n   8  Id: 1e40.8ed0 Suspend: 0 Teb: 0000009b`f74b9000 Unfrozen\n # Child-SP          RetAddr               Call Site\n00 0000009b`f84ff2a0 00007fff`a0ab9ab0     ntdll!NtWaitForSingleObject+0x4\n01 0000009b`f84ff2a0 00007fff`a0aa6810     KERNELBASE!WaitForSingleObjectEx+0xb0\n02 0000009b`f84ff330 00007fff`2cf15430     KERNELBASE!GetOverlappedResult+0x90\n03 0000009b`f84ff370 00007fff`2ce71560     coreclr!ipc_stream_write_func+0x110 [D:\\a\\_work\\1\\s\\src\\native\\eventpipe\\ds-ipc-pal-namedpipe.c @ 807] \n04 (Inline Function) --------`--------     coreclr!ep_ipc_stream_write_vcall+0x68 [D:\\a\\_work\\1\\s\\src\\native\\eventpipe\\ep-stream.c @ 514] \n05 (Inline Function) --------`--------     coreclr!ep_ipc_stream_writer_write+0xf0 [D:\\a\\_work\\1\\s\\src\\native\\eventpipe\\ep-stream.c @ 636] \n06 0000009b`f84ff3c0 00007fff`2ce7fadc     coreclr!ipc_stream_writer_write_func+0x130 [D:\\a\\_work\\1\\s\\src\\native\\eventpipe\\ep-stream.c @ 574] \n07 (Inline Function) --------`--------     coreclr!ep_stream_writer_write_vcall+0x64 [D:\\a\\_work\\1\\s\\src\\native\\eventpipe\\ep-stream.c @ 694] \n08 (Inline Function) --------`--------     coreclr!ep_stream_writer_write+0x64 [D:\\a\\_work\\1\\s\\src\\native\\eventpipe\\ep-stream.c @ 704] \n09 0000009b`f84ff400 00007fff`2ce7a180     coreclr!ep_fast_serializer_write_buffer+0xe4 [D:\\a\\_work\\1\\s\\src\\native\\eventpipe\\ep-stream.c @ 216] \n0a 0000009b`f84ff450 00007fff`2ce70d58     coreclr!ep_block_fast_serialize+0x158 [D:\\a\\_work\\1\\s\\src\\native\\eventpipe\\ep-block.c @ 344] \n0b 0000009b`f84ff4a0 00007fff`2ce7fdc0     coreclr!block_base_fast_serialize_func+0x58 [D:\\a\\_work\\1\\s\\src\\native\\eventpipe\\ep-block.c @ 360] \n0c (Inline Function) --------`--------     coreclr!ep_fast_serializable_object_fast_serialize_vcall+0x5c [D:\\a\\_work\\1\\s\\src\\native\\eventpipe\\ep-stream.c @ 102] \n0d 0000009b`f84ff4d0 00007fff`2ce80860     coreclr!ep_fast_serializer_write_object+0xd8 [D:\\a\\_work\\1\\s\\src\\native\\eventpipe\\ep-stream.c @ 262] \n0e (Inline Function) --------`--------     coreclr!ep_event_block_serialize+0x8 [D:\\a\\_work\\1\\s\\src\\native\\eventpipe\\ep-block.h @ 231] \n0f 0000009b`f84ff520 00007fff`2ce891e4     coreclr!ep_file_flush+0x228 [D:\\a\\_work\\1\\s\\src\\native\\eventpipe\\ep-file.c @ 541] \n10 0000009b`f84ff580 00007fff`2ce80f08     coreclr!file_write_event_to_block+0xf4 [D:\\a\\_work\\1\\s\\src\\native\\eventpipe\\ep-file.c @ 261] \n11 0000009b`f84ff610 00007fff`2ce7be0c     coreclr!ep_file_write_event+0x1e0 [D:\\a\\_work\\1\\s\\src\\native\\eventpipe\\ep-file.c @ 474] \n12 0000009b`f84ff690 00007fff`2ce85ac4     coreclr!ep_buffer_manager_write_all_buffers_to_file_v4+0x30c [D:\\a\\_work\\1\\s\\src\\native\\eventpipe\\ep-buffer-manager.c @ 1245] \n13 (Inline Function) --------`--------     coreclr!ep_buffer_manager_write_all_buffers_to_file+0x74 [D:\\a\\_work\\1\\s\\src\\native\\eventpipe\\ep-buffer-manager.c @ 1111] \n14 0000009b`f84ffe70 00007fff`2ce8d1c4     coreclr!ep_session_write_all_buffers_to_file+0xc4 [D:\\a\\_work\\1\\s\\src\\native\\eventpipe\\ep-session.c @ 654] \n15 0000009b`f84ffeb0 00007fff`2ce83838     coreclr!streaming_thread+0xe4 [D:\\a\\_work\\1\\s\\src\\native\\eventpipe\\ep-session.c @ 117] \n16 0000009b`f84fff50 00007fff`a5538740     coreclr!ep_rt_thread_coreclr_start_func+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\eventing\\eventpipe\\ep-rt-coreclr.h @ 839] \n17 0000009b`f84fff70 00007fff`a59382c4     kernel32!BaseThreadInitThunk+0x40\n18 0000009b`f84fff80 00000000`00000000     ntdll!RtlUserThreadStart+0x44\n\n   9  Id: 1e40.5a28 Suspend: 0 Teb: 0000009b`f74bf000 Unfrozen\n # Child-SP          RetAddr               Call Site\n00 0000009b`f7effce0 00007fff`a5913858     ntdll!NtWaitForWorkViaWorkerFactory+0x4\n01 0000009b`f7effce0 00007fff`a5538740     ntdll!TppWorkerThread+0x568\n02 0000009b`f7efffc0 00007fff`a59382c4     kernel32!BaseThreadInitThunk+0x40\n03 0000009b`f7efffd0 00000000`00000000     ntdll!RtlUserThreadStart+0x44\n```\n\nCrash dump 32052:\n```\n0:000\u003e ~*k\n\n.  0  Id: 7d34.1038 Suspend: 0 Teb: 000000ba`50000000 Unfrozen\n # Child-SP          RetAddr               Call Site\n00 000000ba`5037e6d0 00007fff`a0aa5cec     ntdll!NtReadFile+0x4\n01 000000ba`5037e6d0 00007fff`2b80b180     KERNELBASE!ReadFile+0xdc\n02 000000ba`5037e730 00007fff`2bb8d574     System_Private_CoreLib+0x31b180\n03 000000ba`5037e830 00007fff`2bbc2328     System_Private_CoreLib+0x69d574\n04 000000ba`5037e890 00007fff`2bbb7674     System_Private_CoreLib+0x6d2328\n05 000000ba`5037e8e0 00007fff`2bb93894     System_Private_CoreLib+0x6c7674\n06 000000ba`5037e930 00007fff`2bb94118     System_Private_CoreLib+0x6a3894\n07 000000ba`5037e950 00007ffe`cd9a9c5c     System_Private_CoreLib+0x6a4118\n08 000000ba`5037e9d0 00000000`00000000     0x00007ffe`cd9a9c5c\n\n   1  Id: 7d34.7b28 Suspend: 0 Teb: 000000ba`50004000 Unfrozen \".NET EventPipe\"\n # Child-SP          RetAddr               Call Site\n00 000000ba`5067f260 00007fff`a0ab98d0     ntdll!NtWaitForMultipleObjects+0x4\n01 000000ba`5067f260 00007fff`2cf16150     KERNELBASE!WaitForMultipleObjectsEx+0xe0\n02 000000ba`5067f540 00007fff`2ce77bf8     coreclr!ds_ipc_poll+0x178 [D:\\a\\_work\\1\\s\\src\\native\\eventpipe\\ds-ipc-pal-namedpipe.c @ 270] \n03 000000ba`5067f7c0 00007fff`2ce8c0cc     coreclr!ds_ipc_stream_factory_get_next_available_stream+0x358 [D:\\a\\_work\\1\\s\\src\\native\\eventpipe\\ds-ipc.c @ 402] \n04 000000ba`5067f920 00007fff`2ce8c37c     coreclr!server_loop_tick+0x3c [D:\\a\\_work\\1\\s\\src\\native\\eventpipe\\ds-server.c @ 118] \n05 000000ba`5067f9a0 00007fff`a5538740     coreclr!server_thread+0xcc [D:\\a\\_work\\1\\s\\src\\native\\eventpipe\\ds-server.c @ 185] \n06 000000ba`5067f9c0 00007fff`a59382c4     kernel32!BaseThreadInitThunk+0x40\n07 000000ba`5067f9d0 00000000`00000000     ntdll!RtlUserThreadStart+0x44\n\n   2  Id: 7d34.183c Suspend: 0 Teb: 000000ba`50006000 Unfrozen \".NET Debugger\"\n # Child-SP          RetAddr               Call Site\n00 000000ba`507ff520 00007fff`a0ab98d0     ntdll!NtWaitForMultipleObjects+0x4\n01 000000ba`507ff520 00007fff`2cf0ea74     KERNELBASE!WaitForMultipleObjectsEx+0xe0\n02 000000ba`507ff800 00007fff`2cf10134     coreclr!DebuggerRCThread::MainLoop+0x1ac [D:\\a\\_work\\1\\s\\src\\coreclr\\debug\\ee\\rcthread.cpp @ 928] \n03 000000ba`507ff8f0 00007fff`2cf10274     coreclr!DebuggerRCThread::ThreadProc+0x3cc [D:\\a\\_work\\1\\s\\src\\coreclr\\debug\\ee\\rcthread.cpp @ 731] \n04 000000ba`507ff970 00007fff`a5538740     coreclr!DebuggerRCThread::ThreadProcStatic+0x74 [D:\\a\\_work\\1\\s\\src\\coreclr\\debug\\ee\\rcthread.cpp @ 1322] \n05 000000ba`507ff990 00007fff`a59382c4     kernel32!BaseThreadInitThunk+0x40\n06 000000ba`507ff9a0 00000000`00000000     ntdll!RtlUserThreadStart+0x44\n\n   3  Id: 7d34.94bc Suspend: 0 Teb: 000000ba`50008000 Unfrozen \".NET Finalizer\"\n # Child-SP          RetAddr               Call Site\n00 000000ba`5097f520 00007fff`a0ab98d0     ntdll!NtWaitForMultipleObjects+0x4\n01 000000ba`5097f520 00007fff`2d15f028     KERNELBASE!WaitForMultipleObjectsEx+0xe0\n02 000000ba`5097f800 00007fff`2d15e234     coreclr!FinalizerThread::WaitForFinalizerEvent+0xc8 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\finalizerthread.cpp @ 290] \n03 000000ba`5097f860 00007fff`2d0d3058     coreclr!FinalizerThread::FinalizerThreadWorker+0x204 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\finalizerthread.cpp @ 376] \n04 (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0x18 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 6830] \n05 000000ba`5097fba0 00007fff`2d0d4b38     coreclr!ManagedThreadBase_DispatchMiddle+0x118 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 6874] \n06 (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchOuter::__l8::__Body::Run::__l4::__Body::Run+0x8 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7032] \n07 000000ba`5097fcc0 00007fff`2d0d3130     coreclr!`ManagedThreadBase_DispatchOuter\u0027::`8\u0027::__Body::Run+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7034] \n08 000000ba`5097fd00 00007fff`2d0d2cac     coreclr!ManagedThreadBase_DispatchOuter+0xa8 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7056] \n09 000000ba`5097fd80 00007fff`2d15dc80     coreclr!ManagedThreadBase::KickOff+0x14 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7072] \n0a 000000ba`5097fda0 00007fff`a5538740     coreclr!FinalizerThread::FinalizerThreadStart+0x1c0 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\finalizerthread.cpp @ 523] \n0b 000000ba`5097fe00 00007fff`a59382c4     kernel32!BaseThreadInitThunk+0x40\n0c 000000ba`5097fe10 00000000`00000000     ntdll!RtlUserThreadStart+0x44\n\n   4  Id: 7d34.a290 Suspend: 0 Teb: 000000ba`5008a000 Unfrozen\n # Child-SP          RetAddr               Call Site\n00 000000ba`504ffcc0 00007fff`a5913858     ntdll!NtWaitForWorkViaWorkerFactory+0x4\n01 000000ba`504ffcc0 00007fff`a5538740     ntdll!TppWorkerThread+0x568\n02 000000ba`504fffa0 00007fff`a59382c4     kernel32!BaseThreadInitThunk+0x40\n03 000000ba`504fffb0 00000000`00000000     ntdll!RtlUserThreadStart+0x44\n```",
                                           "updatedAt":  "2025-08-18T16:32:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_CxiG",
                                           "createdAt":  "2025-08-20T09:37:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "Those stacks look like the test was working fine, just incomplete and ran out of time. In particular this thread looks like it was still making forward progress:\n\n```\n   4  Id: 1e40.69bc Suspend: 0 Teb: 0000009b`f74a5000 Unfrozen \".NET Finalizer\"\n # Child-SP          RetAddr               Call Site\n00 (Inline Function) --------`--------     coreclr!WKS::mark_queue_t::queue_mark+0x30 [D:\\a\\_work\\1\\s\\src\\coreclr\\gc\\gc.cpp @ 27724] \n01 (Inline Function) --------`--------     coreclr!WKS::mark_queue_t::queue_mark+0xa0 [D:\\a\\_work\\1\\s\\src\\coreclr\\gc\\gc.cpp @ 27748] \n02 0000009b`f807ccc0 00007fff`2d3193d0     coreclr!WKS::gc_heap::mark_object_simple1+0xe48 [D:\\a\\_work\\1\\s\\src\\coreclr\\gc\\gc.cpp @ 27959] \n```\n\nGiven that GCStress is known to run more slowly it seems like the test either needs a longer timeout, or we should disable GCStress for this test.",
                                           "updatedAt":  "2025-08-20T09:37:13Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "profiler/dynamicoptimization/DynamicOptimization/DynamicOptimization.cmd timed out under gcstress",
        "labels":  [
                       "arch-arm64",
                       "os-windows",
                       "GCStress",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119212",
        "createdAt":  "2025-08-29T17:55:46Z",
        "number":  119212,
        "author":  "max-charlamb",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-15T14:49:28Z",
        "body":  "Currently the `runtime-diagnostics` pipeline runs its test on the ADO machines, not Helix. We would like to move to helix to support other OS/Arch combinations.\n\nGiven the `runtime-diagnostics` pipeline is a wrapper around the diagnostics PR pipeline (with a live runtime) we have agreed the easiest path forwards is to modify the diagnostics pipeline to use Helix and invoke it from the runtime repo.\n\nSteps to run the diagnostics pipeline on helix:\n* [ ] Decouple building tests from running tests to allow packaging the tests for Helix - https://github.com/dotnet/diagnostics/pull/5554\n* [ ] Support running diagnostics tests out of proc. Several of the diagnostics tests require \u0027debuggees\u0027 which make the tests platform dependent more so than normal managed tests.\n  * [x] DbgShim Tests - https://github.com/dotnet/diagnostics/pull/5554\n  * [ ] SOS Tests\n    * SOS UnitTests build some debuggees at test-time. This may cause problems on helix. \n* [ ] Package tests for helix\n    * Modify single file to prevent compile at test time, compile - We don\u0027t want to compile any code on helix. Several \u0027unit\u0027 tests compile single file debuggee apps. These should be able to be compiled ahead of time.\n    * Use relative paths instead of absolute paths to allow for running locally and on helix\n* [ ] Modify pipelines to push tests to helix\n    * Move non-debugger test to helix",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwPzUoQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7A_NSh",
                                           "createdAt":  "2025-08-29T17:56:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @steveisok, @dotnet/dotnet-diag\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-29T17:56:46Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[cDAC] Run runtime-diagnostics pipeline on more platforms",
        "labels":  [
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119737",
        "createdAt":  "2025-09-15T23:12:26Z",
        "number":  119737,
        "author":  "noahfalk",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-15T23:18:34Z",
        "body":  "### Description\n\nEventPipe is intended to allow serializing all the same data as EventSource using ETW but testing and code review revealed quite a few cases that aren\u0027t properly handled. In each case EventPipe either fails to produce NetTrace metadata describing the event parameter or it produces bad metadata that doesn\u0027t accurately describe what was serialized.\n\nThis issue is tracking several related but separate bugs:\n\n- [ ] - A self-describing EventSource serializes booleans as 1 byte but the Boolean NetTrace metadata implies they are 4 bytes.\n- [ ] - DateTimeOffset doesn\u0027t produces any metadata. [GetTypeCodeExtended](https://source.dot.net/#System.Private.CoreLib/src/libraries/System.Private.CoreLib/src/System/Diagnostics/Tracing/EventPipeMetadataGenerator.cs,256) returns Object but this data type is serialized as an 8 byte tick count.\n- [ ] - TimeSpan doesn\u0027t produces any metadata. [GetTypeCodeExtended](https://source.dot.net/#System.Private.CoreLib/src/libraries/System.Private.CoreLib/src/System/Diagnostics/Tracing/EventPipeMetadataGenerator.cs,256) returns Object but this data type is serialized as an 8 byte tick count.\n- [ ] - Decimal is serialized by converting it to a double and writing 8 bytes, but EventPipe encodes it in metadata as the Decimal type which implies 16 bytes.\n- [ ] - Nullable doesn\u0027t produce any metadata. [GetTypeCodeExtended](https://source.dot.net/#System.Private.CoreLib/src/libraries/System.Private.CoreLib/src/System/Diagnostics/Tracing/EventPipeMetadataGenerator.cs,256) returns Object but casting the TraceLoggingTypeInfo to InvokeTypeInfo fails.\n- [ ] - Arrays of non-scalar types don\u0027t produce any metadata. TraceLogging encodes these as ArrayTypeInfo (not ScalarArrayTypeInfo) and the GenerateMetadata code doesn\u0027t include any case to handle that.\n- [ ] - Complex types don\u0027t produce the correct metadata for any property that isn\u0027t a scalar or another complex type. In this repro we show a scalar array property but it could have been Enumerable, Nullable, non-scalar array, decimal, DateTime, DateTimeOffset, or TimeSpan too.\n\n### Reproduction Steps\n\nRun this code:\n\n```C#\nusing Microsoft.Diagnostics.NETCore.Client;\nusing Microsoft.Diagnostics.Tracing;\nusing Microsoft.Diagnostics.Tracing.Session;\nusing System.Diagnostics.Tracing;\n\nnamespace ConsoleApp55\n{\n    internal class Program\n    {\n        static bool readyReceived = false;\n        static bool allEventsReceived = false;\n\n        static void Main(string[] args)\n        {\n            DiagnosticsClient client = new DiagnosticsClient(Environment.ProcessId);\n            bool testEventPipe = true;\n            EventPipeSession? session = null;\n            TraceEventSession? etwSession = null;\n            if (testEventPipe)\n            {\n                session = client.StartEventPipeSession(new[] {\n                    new EventPipeProvider(\"MyEventSource\", EventLevel.Informational)\n                }, requestRundown: false);\n                EventPipeEventSource source = new EventPipeEventSource(session.EventStream);\n                source.Dynamic.All += PrintEvent;\n                Task.Run(() =\u003e source.Process());\n            }\n            else\n            {\n                etwSession = new TraceEventSession(\"MyETWSession\");\n                etwSession.EnableProvider(\"MyEventSource\", TraceEventLevel.Informational);\n                etwSession.Source.Dynamic.All += PrintEvent;\n                Task.Run(() =\u003e etwSession.Source.Process());\n            }\n\n\n            while (!readyReceived)\n            {\n                MyEventSource.Log.Ready();\n                Thread.Sleep(100);\n            }\n\n            MyEventSource.Log.WriteBool(true, 15);\n            MyEventSource.Log.WriteDateTimeOffset(new DateTimeOffset(2024, 1, 1, 12, 0, 0, TimeSpan.FromHours(-5)));\n            MyEventSource.Log.WriteTimeSpan(TimeSpan.FromHours(1.5));\n            MyEventSource.Log.WriteDecimal(123.45M);\n            MyEventSource.Log.WriteNullable(null);\n            MyEventSource.Log.WriteNullable(42);\n            MyEventSource.Log.WriteStructArray(new Data[] {\n                new Data { Id = 1, Name = \"Alice\" },\n                new Data { Id = 2, Name = \"Bob\" }\n            });\n            MyEventSource.Log.WriteDataWithArray(new DataWithArray { Id = 1, Name = \"Charlie\", Scores = new int[] { 100, 95, 90 } });\n            MyEventSource.Log.Complete();\n\n            while(!allEventsReceived)\n            {\n                Thread.Sleep(100);\n            }\n\n            session?.Stop();\n            etwSession?.Stop();\n            Console.ReadLine();\n            \n        }\n\n        public static void PrintEvent(TraceEvent obj)\n        {\n            if (obj.EventName == \"Ready\")\n            {\n                readyReceived = true;\n            }\n            else if (obj.EventName == \"Complete\")\n            {\n                Console.WriteLine(\"All events received.\");\n                allEventsReceived = true;\n            }\n            else\n            {\n                Console.WriteLine($\"{obj.EventName} event received.\");\n                for (int i = 0; i \u003c obj.PayloadNames.Length; i++)\n                {\n                    Console.WriteLine($\"  {obj.PayloadNames[i]}: {obj.PayloadValue(i)}\");\n                }\n            }\n        }\n    }\n\n    [EventSource(Name = \"MyEventSource\")]\n    public class MyEventSource : EventSource\n    {\n        public static MyEventSource Log = new MyEventSource();\n\n        public MyEventSource() : base(EventSourceSettings.EtwSelfDescribingEventFormat) { }\n\n        [Event(1, Level = EventLevel.Informational)]\n        public void Ready()\n        {\n            WriteEvent(1);\n        }\n\n        [Event(2, Level = EventLevel.Informational)]\n        public void Complete()\n        {\n            WriteEvent(2);\n        }\n\n        [Event(3, Level = EventLevel.Informational)]\n        public void WriteBool(bool flag, int num)\n        {\n            WriteEvent(3, flag, num);\n        }\n\n        [Event(4, Level = EventLevel.Informational)]\n        public void WriteDateTime(DateTime time)\n        {\n            WriteEvent(4, time);\n        }\n\n        [Event(5)]\n        public void WriteDateTimeOffset(DateTimeOffset timeOff)\n        {\n            WriteEvent(5, timeOff);\n        }\n\n        [Event(6)]\n        public void WriteTimeSpan(TimeSpan ts)\n        {\n            WriteEvent(6, ts);\n        }\n\n        [Event(7, Level = EventLevel.Informational)]\n        public void WriteDecimal(decimal dec)\n        {\n            WriteEvent(7, dec);\n        }\n\n        [Event(8, Level = EventLevel.Informational)]\n        public void WriteNullable(int? num)\n        {\n            WriteEvent(8, num);\n        }\n\n        [Event(10, Level = EventLevel.Informational)]\n        public void WriteStructArray(Data[] data)\n        {\n            WriteEvent(10, data);\n        }\n\n        [Event(11, Level = EventLevel.Informational)]\n        public void WriteDataWithArray(DataWithArray data)\n        {\n            WriteEvent(11, data);\n        }\n    }\n\n    [EventData]\n    public struct Data\n    {\n        public int Id;\n        public string Name;\n    }\n\n    [EventData]\n    public struct DataWithArray\n    {\n        public int[] Scores { get; set; }\n        public int Id { get; set; }\n        public string Name { get; set; }\n    }\n}\n```\n\n### Expected behavior\n\nIf the app ran properly you should see output that looks like this:\n\n```\nWriteBool event received.\n  flag: True\n  num: 15\nWriteDateTimeOffset event received.\n  timeOff: { \"Ticks\":\"1/1/2024 4:00:00 AM\", \"Offset\":\"-180000000000\" }\nWriteTimeSpan event received.\n  ts: 54000000000\nWriteDecimal event received.\n  dec: 123.45\nWriteNullable event received.\n  num: { \"HasValue\":False, \"Value\":0 }\nWriteNullable event received.\n  num: { \"HasValue\":True, \"Value\":42 }\nWriteDataWithArray event received.\n  data: { \"Scores\":[ 100, 95, 90 ], \"Id\":1, \"Name\":\"Charlie\" }\nAll events received.\n```\n\nYou can set `bool testEventPipe = false;` near the top of the repro program Main() function to run the repro against ETW instead and it will print this output.\n\n### Actual behavior\n\nThe test outputs:\n\n```\nWriteBool event received.\n  flag: True\n  num: 50563328\n```\n\nNotice that num is wrong and all the other events are missing. \n\n### Regression?\n\nAs far as I can tell all these issues have existed in prior releases, likely for as long as EventPipe existed.\n\n### Known Workarounds\n\nYou can use ETW instead of EventPipe or you can use alternate data types in the events.\n\n### Configuration\n\nI tested with .NET 9, windows, x64 but I suspect any .NET build that supports EventPipe, any OS, any arch would repro it.\n\n### Other information\n\nA significant contributing factor for all these issues is that the [EventPipe metadata generator code](https://source.dot.net/#System.Private.CoreLib/src/libraries/System.Private.CoreLib/src/System/Diagnostics/Tracing/EventPipeMetadataGenerator.cs,254) primarily reasons about types using System.Type and GetExtendedTypeCode() rather than TraceLoggingTypeInfo. In the places where it does use TraceLoggingTypeInfo it still probes for individual concrete types rather than making polymoprhic calls. TraceLoggingTypeInfo has many different cases to take into account and trying to maintain a 2nd version of the same logic has lead to numerous discrepances.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOxFrfBQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7EWt2_",
                                           "createdAt":  "2025-09-15T23:17:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihuBot",
                                           "body":  "I\u0027m a bot. Here is a possible related and/or duplicate issue (I may be wrong):\n- https://github.com/dotnet/runtime/issues/11092",
                                           "updatedAt":  "2025-09-15T23:17:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7EWt8F",
                                           "createdAt":  "2025-09-15T23:17:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @steveisok, @dotnet/dotnet-diag\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-15T23:17:27Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "EventPipe doesn\u0027t properly serialize all types handled by EventSource ETW TraceLogging",
        "labels":  [
                       "EventPipe",
                       "area-Diagnostics-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119921",
        "createdAt":  "2025-09-20T00:36:34Z",
        "number":  119921,
        "author":  "gregg-miskelly",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-20T00:37:20Z",
        "body":  "### Description\n\nThere was a regression that I believe happened in .NET 10 preview 7, though I am seeing more tests fail with this problem in rc1, so I am not totally sure, which we have a number of tests that save minidumps without heap, and stack walk will fail with no frames.\n\nThe failure happens here:\n```\nmscordaccore.dll!DacError\nmscordaccore.dll!DacInstantiateTypeByAddressHelper\n[Inline Frame] mscordaccore.dll!NibbleReader::ReadNibble_NoThrow\nmscordaccore.dll!NibbleReader::ReadEncodedU32_NoThrow\nmscordaccore.dll!DoNativeVarInfo\u003cTransferReader\u003e\nmscordaccore.dll!CompressDebugInfo::RestoreBoundariesAndVars\n[Inline Frame] mscordaccore.dll!EECodeGenManager::GetBoundariesAndVarsWorker\nmscordaccore.dll!EEJitManager::GetBoundariesAndVars\n[Inline Frame] mscordaccore.dll!DebugInfoManager::GetBoundariesAndVars\nmscordaccore.dll!DacDbiInterfaceImpl::GetNativeVarData\nmscordaccore.dll!DacDbiInterfaceImpl::GetNativeCodeSequencePointsAndVarInfo\nmscordbi.dll!CordbNativeCode::LoadNativeInfo\nmscordbi.dll!CordbStackWalk::GetFrameWorker\nmscordbi.dll!CordbStackWalk::GetFrame\n```\n\nGetFrame will wind up returning `HRESULT_FROM_WIN32(ERROR_PARTIAL_COPY)`\n\n### Reproduction Steps\n\n1. Create a new console app with the following code\n2. Build it and run it under a managed debugger\n3. This should stop on the `Debugger.Break`\n4. Save a minidump without heap. In Visual Studio, this can be done using Debug-\u003eSave Dump As, and changing the \u0027Save as type\u0027 to \u0027Minidump\u0027\n5. Stop debugging\n6. Open the dump file and attempt to debug it\n\n```csharp\nusing System;\nusing System.Diagnostics;\n\nstatic class Program\n{\n    static public void Main()\n    {\n        int intValue = 42;\n        string stringValue = \"Hello, World!\";\n\n        PrintValues(intValue, stringValue);\n    }\n\n    static void PrintValues(int intValue, string stringValue)\n    {\n        int length = stringValue.Length;\n        Debugger.Break();\n        Console.WriteLine($\"intValue: {intValue}\");\n        Console.WriteLine($\"stringValue: {stringValue} (length = {length})\");\n    }\n}\n```\n\n### Expected behavior\n\nThe stack walker should be able to successfully unwind the stack\n\n### Actual behavior\n\nNo frames are unwound\n\n### Regression?\n\nYes. I saw one failure like this in .NET 10 preview 7, and now several in rc1.\n\n### Known Workarounds\n\nNone, aside from using full memory dumps\n\n### Configuration\n\nI am seeing this on Windows x86 and x64. I didn\u0027t try any other platforms.\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOxYw3yg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7FjDfK",
                                           "createdAt":  "2025-09-20T00:37:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @steveisok, @dotnet/dotnet-diag\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-20T00:37:20Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "ICorDebugStackWalk.GetFrame fails in minidump without heap/binaries in .NET 10 preview 7+",
        "labels":  [
                       "area-Diagnostics-coreclr",
                       "untriaged"
                   ]
    }
]
