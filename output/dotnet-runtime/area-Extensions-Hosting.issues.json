[
    {
        "url":  "https://github.com/dotnet/runtime/issues/36383",
        "createdAt":  "2018-12-11T18:28:20Z",
        "number":  36383,
        "author":  "sander1095",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCEyLtg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "YZahringer",
                                            "createdAt":  "2020-03-08T11:00:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "msallin",
                                            "createdAt":  "2020-04-16T21:50:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "israelaece",
                                            "createdAt":  "2021-01-26T20:31:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "onsvejda",
                                            "createdAt":  "2021-02-15T10:47:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TAGC",
                                            "createdAt":  "2021-05-05T13:52:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "N0D4N",
                                            "createdAt":  "2021-07-25T16:12:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "WeihanLi",
                                            "createdAt":  "2021-08-16T05:25:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "loraderon",
                                            "createdAt":  "2021-12-01T15:11:37Z"
                                        }
                                    ],
                          "totalCount":  8
                      },
        "updatedAt":  "2025-09-10T21:58:31Z",
        "body":  "### Is your feature request related to a problem? Please describe.\r\nI discovered ASP.NET Core 2.1 has a `BackgroundService` that can be easily used for long running async tasks. It sadly does not have the option to run it on a timer which could be very handy since we are creating an abstraction for `IHostedService` anyway. \r\n\r\nI _could_ remember the last time the method ran and then, if x time passed, run the method again (thus creating my own timer), but that would have to run in `ExecuteAsync()` which feels odd because even though `ExecuteAsync` is called, the method can\u0027t guarantee the _core_ functionality is actually executed. I also do not know the pattern of `ExecuteAsync` calls which could result in the timer not being useful because it would depend on `ExecuteAsync` being called consistently to make sure there is as little delay as possible when _actually_ executing the task, but this could also be because of my new knowledge of this class.\r\n\r\n### Describe the solution you\u0027d like\r\nI\u0027d like to have a new abstraction for `IHostedService` or `BackgroundService` called `TimedBackgroundService`. This could have a constructor argument/configuration argument that has a cron expression to make it run on a timer. Maybe even an attribute? \r\n\r\n### Describe alternatives you\u0027ve considered\r\nIt could be possible to add a cronjob expression to `services.AddHostedService()` to decide there when a backgroundservice will run.\r\n\r\n### Additional context\r\nNone. \r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOw04VsA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0NjMxNTc0Mg==",
                                           "createdAt":  "2018-12-11T18:47:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rynowak",
                                           "body":  "/cc @glennc @davidfowl \r\n\r\nThis is something we\u0027ve been thinking about for the future. If we provided a simple base class that\u0027s a singleton service that was called on an interval you choose, is that what you want? I think it would be possible for you to test-drive something like this through a sample until we have it built in.\r\n\r\nWe\u0027d probably also do things like include logging and error handling by default. Are there other features you\u0027d expect this to have?",
                                           "updatedAt":  "2018-12-11T18:47:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0NjMzMTcxNA==",
                                           "createdAt":  "2018-12-11T19:32:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sander1095",
                                           "body":  "When you mention logging and error handling, do you mean that the sample will include these or the `TimedBackgroundService`? I ask for clarification because `BackgroundService` does not have logging or error handling by default and it seems a bit silly to me to suddenly introduce these 2 functionalities in a new `TimedBackgroundService` class.\r\n\r\nAssumptions: (Please bear in mind I haven\u0027t read much about hosted services yet)\r\n- If I would have a reference to the Service (if this is possible) and would call `ExecuteAsync` even though it is not its time yet, it would still execute since I called it manually. If this is bad design, you could have a `ForceRun()` method that would force it to run. I\u0027m just throwing ideas out there now :)\r\n\r\nA couple new features I can come up with, are:\r\n\r\n- `public DateTimeOffset LastTimeExecuted {get; }` \r\n  - Can be used to get the last time a method ran.\r\n  - You could also make it a `public ExecutionResult LastExecutionResult` which could be a class/struct with the following properties:\r\n     - `public bool Succeeded`\r\n       - True when the Task was completed successfully or when there were no uncaught exceptions;\r\n     - `public DateTimeOffset LastTimeExecuted {get; }` (same as above)\r\n- `public Timespan TimeUntilNextExecution {get; }`\r\n  - Can be used to get the time until the next execution, possibly in combination with calling it manually as I mentioned above. \r\n\r\nThanks for your quick answer! It\u0027s exciting to see you guys already looked into this :)",
                                           "updatedAt":  "2018-12-11T19:32:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3NDk3OTgyOQ==",
                                           "createdAt":  "2019-03-20T18:47:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA4XGyA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "sander1095",
                                                                               "createdAt":  "2019-03-20T18:49:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "rcollina",
                                                                               "createdAt":  "2019-03-27T22:28:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "graham-huck",
                                                                               "createdAt":  "2019-05-14T20:32:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "OskarKlintrot",
                                                                               "createdAt":  "2019-11-27T10:17:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sertunc",
                                                                               "createdAt":  "2020-01-06T10:36:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "sertunc",
                                                                               "createdAt":  "2020-01-06T10:36:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "analogrelay",
                                           "body":  "We\u0027ll look at this in 3.0. No guarantees, but it seems like a useful thing to add.",
                                           "updatedAt":  "2019-03-20T18:47:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0MjI0OTEzNQ==",
                                           "createdAt":  "2019-10-15T14:45:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sander1095",
                                           "body":  "Any updates?",
                                           "updatedAt":  "2019-10-15T14:45:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0MjUwNTIxMg==",
                                           "createdAt":  "2019-10-16T04:16:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MisinformedDNA",
                                           "body":  "I\u0027m looking for a solution as well. It should be as easy as setting a TimerTrigger in Azure Functions.",
                                           "updatedAt":  "2019-10-16T04:16:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0MjUzMjI4Ng==",
                                           "createdAt":  "2019-10-16T05:58:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sander1095",
                                           "body":  "You could also look into a WebJob for now if you host it in Azure, if you feel more comfortable with that. \r\n\r\nOtherwise, look at my own solution for this issue in this StackOverflow issue; please keep the comments in mind that bring good feedback; it\u0027s possible that the solution can be optimized or that it might not meet requirements. \r\n\r\nhttps://stackoverflow.com/questions/53727850/how-to-run-backgroundservice-on-a-timer-in-asp-net-core-2-1/",
                                           "updatedAt":  "2019-10-16T05:58:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3MTA5MDA1NQ==",
                                           "createdAt":  "2020-01-06T10:37:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sertunc",
                                           "body":  "Any updates?",
                                           "updatedAt":  "2020-01-06T10:37:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3MTIzMTc4NA==",
                                           "createdAt":  "2020-01-06T17:31:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA8Ipcg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "rcollina",
                                                                               "createdAt":  "2020-01-08T07:39:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "graham-huck",
                                                                               "createdAt":  "2020-02-20T19:05:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "analogrelay",
                                           "body":  "@sertunc not at this time. We\u0027re doing planning for 5.0 and will consider this during that process, but there\u0027s no guarantee as it will be prioritized against all the other work on our queue.",
                                           "updatedAt":  "2020-01-06T17:31:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NjgzMzY3NA==",
                                           "createdAt":  "2020-06-19T19:43:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBIAh_g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "AnthonyGiretti",
                                                                               "createdAt":  "2020-06-19T23:17:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "karimgsaikali2",
                                           "body":  "Your solution is [here](https://anthonygiretti.com/2020/01/03/building-a-windows-service-with-service-workers-and-net-core-3-1-part-2-migrate-a-timed-service-built-with-topshelf/)",
                                           "updatedAt":  "2020-06-19T19:43:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4MjQyOTk1OQ==",
                                           "createdAt":  "2020-08-28T09:35:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sander1095",
                                           "body":  "@karimgsaikali2 \r\n\r\nSomeone pointed out in my stackoverflow post that using `Timer` and `BackgroundService` might not execute the tasks if your API is not getting requests. I can\u0027t confirm that. But your link basically uses the same code as my stackoverflow post, so I don\u0027t see how this is a 100% better solution?\r\n\r\nYour link does have a good point though! In that person\u0027s post they lock the jobs so it waits until the current one is finished. That would be useful/mandatory as well if it is included as an extension in the net core repo.\r\n\r\n@anurse Any updates? I expect it not to launch with  .NET 5, but I\u0027m curious to know what you think of adding a monitor/lock system and to know if this will ever be added?",
                                           "updatedAt":  "2020-08-28T09:35:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4MjUyNTMxNQ==",
                                           "createdAt":  "2020-08-28T12:56:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karimgsaikali2",
                                           "body":  "@sander1095 \r\nI wonder if the lock used in the post [mentioned](https://anthonygiretti.com/2020/01/03/building-a-windows-service-with-service-workers-and-net-core-3-1-part-2-migrate-a-timed-service-built-with-topshelf/) post is correct?\r\n\r\nIndeed using Monotor.TryEnter will prevent other threads to enter the sub DoWork(),\r\nbut allow the same thread to re-enter the sub DoWork()!\r\n\r\nMaybe instead of using the void DoWork() we may use async void DoWork() and use SemaphoreSlim,\r\nIndeed SemaphoreSlim will prevent any threads to enter the void, it will wait and execute one after another.\r\n\r\nTherefore instead of :\r\nprivate void DoWork(object state)\r\n        {\r\n            _logger.LogDebug($\"Try to execute next iteration {_counter + 1} of DoWork \");\r\n            if (Monitor.TryEnter(_lock))\r\n            {\r\n                try\r\n                {\r\n                    _logger.LogDebug($\"Running DoWork iteration {_counter}\");\r\n                    _myService.DoWorkAsync().Wait();\r\n                    _logger.LogDebug($\"DoWork {_counter} finished, will start iteration {_counter + 1}\");\r\n                }\r\n                finally\r\n                {\r\n                    _counter++;\r\n                    Monitor.Exit(_lock);\r\n                }\r\n            }\r\n        }\r\n\r\nWe will have:\r\n\r\nSemaphoreSlim _sync = new SemaphoreSlim(1);\r\n\r\nprivate async void DoWork(object state)\r\n        {\r\n              await _sync.WaitAsync();\r\n                try\r\n                {\r\n                    _logger.LogDebug($\"Try to execute next iteration {_counter + 1} of DoWork \");\r\n                    _logger.LogDebug($\"Running DoWork iteration {_counter}\");\r\n                  await  _myService.DoWorkAsync();\r\n                    _logger.LogDebug($\"DoWork {_counter} finished, will start iteration {_counter + 1}\");\r\n                }\r\n                finally\r\n                {\r\n                    _counter++;\r\n                    _sync.Release();\r\n                }\r\n        }\r\n\r\nWhat do you think?",
                                           "updatedAt":  "2020-08-28T12:56:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4MjUyOTg0OA==",
                                           "createdAt":  "2020-08-28T12:58:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sander1095",
                                           "body":  "I am not that experienced with `Semaphore` or `Monitor`, sadly.\r\n\r\nAlso, your code is not formatted and rather hard to read. I would ask one of the dot net experts to look more into this :)",
                                           "updatedAt":  "2020-08-28T12:58:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNTY1MjE1Mw==",
                                           "createdAt":  "2020-10-08T15:36:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBS_2hQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sander1095",
                                                                               "createdAt":  "2020-10-09T11:50:19Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "The next step for this would be to prepare APIs and samples from guideline: https://github.com/dotnet/runtime/blob/master/docs/project/api-review-process.md",
                                           "updatedAt":  "2020-10-08T15:36:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5NTMzNjA0NA==",
                                           "createdAt":  "2021-03-10T12:19:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBlKIbQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "moxixuan",
                                                                               "createdAt":  "2021-03-29T07:07:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "moxixuan",
                                                                               "createdAt":  "2021-03-29T07:07:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "moxixuan",
                                                                               "createdAt":  "2021-03-29T07:07:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "sander1095",
                                           "body":  "Sinds the ~2+ years that I posted this I have encountered this issue a few times. \r\n\r\nI believe that my previous suggestion is insufficient, this might need more work:\r\n\r\n- If a task executes every 30 seconds but the actual task takes 40 seconds, a 2nd task will already run. You might want to make that configurable; should it throw? Wait? \r\n- Adding CronJob support could be useful. I found [this blog](https://codeburst.io/schedule-cron-jobs-using-hostedservice-in-asp-net-core-e17c47ba06) some time ago, but that works with the timer api which won\u0027t work if the delay between executions is too big (few weeks). This is why the modern timer api story (#31525) is linked; perhaps that could help?\r\n\r\n\r\nI sadly don\u0027t have the time or knowledge to really help out with this feature, so I\u0027d like someone else to make some proposals. I am also curious what the status of this story is; are there any plans for it? ",
                                           "updatedAt":  "2021-03-10T12:19:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DThWw",
                                           "createdAt":  "2025-09-10T21:58:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sander1095",
                                           "body":  "If the .NET team has interest in this issue, I wouldn\u0027t mind creating an API proposal, keeping in mind the \"ease of use\" of the new periodictimer that might undo the need for this service at all.",
                                           "updatedAt":  "2025-09-10T21:58:19Z"
                                       }
                                   ],
                         "totalCount":  15
                     },
        "title":  "BackgroundService on a timer: TimedBackgroundService",
        "labels":  [
                       "feature-request",
                       "area-Extensions-Hosting"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/36085",
        "createdAt":  "2019-04-19T12:03:28Z",
        "number":  36085,
        "author":  "msschl",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCWYZYA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gojanpaolo",
                                            "createdAt":  "2019-06-12T18:53:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "YZahringer",
                                            "createdAt":  "2019-11-09T11:04:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tibel",
                                            "createdAt":  "2019-11-27T20:17:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kevinchalet",
                                            "createdAt":  "2020-07-14T15:09:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "penenkel",
                                            "createdAt":  "2021-03-04T22:29:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Khitiara",
                                            "createdAt":  "2022-04-06T00:23:13Z"
                                        }
                                    ],
                          "totalCount":  6
                      },
        "updatedAt":  "2025-09-15T21:28:29Z",
        "body":  "### Is your feature request related to a problem?\r\nI\u0027m am trying out the latest .net core 3.0 preview.\r\nI want to build a wpf application that uses the generic host, so I can get some of the aspnet core magic in wpf, like e.g. DI. Is there a sample on how to get startet on this topic, especially with focus on the application lifetime management (something like UseConsoleLifetime)?\r\n\r\n### Describe the solution you\u0027d like\r\nA sample would be nice. Or an extension method like .UseApplicationLifetime(); on the hostbuilder.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOxFbAHw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4NDk1NDY5NQ==",
                                           "createdAt":  "2019-04-19T16:51:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "@glennc ",
                                           "updatedAt":  "2019-04-19T16:51:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4Njg1MzEyNQ==",
                                           "createdAt":  "2019-04-25T21:59:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "analogrelay",
                                           "body":  "Related https://github.com/dotnet/wpf/issues/499\r\n\r\nIt might make sense to move this discussion to dotnet/wpf",
                                           "updatedAt":  "2019-04-25T21:59:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MzkxMjc3Mw==",
                                           "createdAt":  "2020-02-10T00:21:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODKIr9A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tbraz",
                                                                               "createdAt":  "2020-02-18T14:06:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DanielHabenicht",
                                                                               "createdAt":  "2023-10-18T14:15:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "EdinaLewis",
                                           "body":  "https://github.com/dapplo/Dapplo.Microsoft.Extensions.Hosting has some good examples of implementing custom lifetime extensions for things like WPF and WinForms.",
                                           "updatedAt":  "2020-02-10T00:21:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNTU1NzYwNQ==",
                                           "createdAt":  "2020-05-08T00:05:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "As part of the migration of components from dotnet/extensions to dotnet/runtime (https://github.com/aspnet/Announcements/issues/411) we will be bulk closing some of the older issues. If you are still interested in having this issue addressed, just comment and the issue will be automatically reactivated (even if you aren\u0027t the author). When you do that, I\u0027ll page the team to come take a look. If you\u0027ve moved on or workaround the issue and no longer need this change, just ignore this and the issue will be closed in **7 days**.\n\nIf you know that the issue affects a package that has moved to a different repo, please consider re-opening the issue in that repo. If you\u0027re unsure, that\u0027s OK, someone from the team can help!",
                                           "updatedAt":  "2020-05-08T00:05:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNTU5OTE4NA==",
                                           "createdAt":  "2020-05-08T02:46:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "analogrelay",
                                           "body":  "I\u0027m going to unstale this and move it to the runtime since we already have one for WinForms and Xamarin :). As with those, this may be something that needs to live with the WPF team, but for now we can track it.",
                                           "updatedAt":  "2020-05-08T02:46:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNTU5OTE5OA==",
                                           "createdAt":  "2020-05-08T02:46:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Paging @dotnet/extensions-migration ! This issue has been revived from staleness. Please take a look and route to the appropriate repository.",
                                           "updatedAt":  "2020-05-08T02:46:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNTU5OTIzNg==",
                                           "createdAt":  "2020-05-08T02:46:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. Please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-05-08T02:46:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwMDM3MjA1MA==",
                                           "createdAt":  "2021-03-16T15:38:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "IanKemp",
                                           "body":  "A good example at https://marcominerva.wordpress.com/2019/11/07/update-on-using-hostbuilder-dependency-injection-and-service-provider-with-net-core-3-0-wpf-applications/ (disclaimer: I am not the author, nor am I affiliated with the author in any way).",
                                           "updatedAt":  "2021-03-16T15:38:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7EVsAf",
                                           "createdAt":  "2025-09-15T21:28:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of our [issue cleanup automation](https://github.com/dotnet/runtime/blob/main/docs/issue-cleanup.md).\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-15T21:28:28Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Generic host WPF-Application lifetime",
        "labels":  [
                       "feature-request",
                       "area-Extensions-Hosting",
                       "no-recent-activity",
                       "backlog-cleanup-candidate"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/35993",
        "createdAt":  "2019-05-01T01:05:14Z",
        "number":  35993,
        "author":  "glennc",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBrU_Sg==",
                          "nodes":  [
                                        {
                                            "content":  "HOORAY",
                                            "user":  "tmarkovski",
                                            "createdAt":  "2019-05-13T19:10:50Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "weitzhandler",
                                            "createdAt":  "2020-04-27T08:03:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DillonN",
                                            "createdAt":  "2020-12-03T05:53:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "weitzhandler",
                                            "createdAt":  "2021-05-18T23:25:47Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2021-07-14T23:21:40Z",
        "body":  "This is for tracking the items we\u0027ve talked about to support Xamarin development better with GenericHost.\r\n\r\n- [ ]  Config loaded from embedded resource: https://github.com/aspnet/Extensions/issues/496\r\n- [ ]  Support for pause (also implementable for windows services and IIS probably)\r\n- [ ]  Appropriate lifetime for Android/iOS since Console isn\u0027t great.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKi-WSA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4ODM1OTc5Ng==",
                                           "createdAt":  "2019-05-01T17:58:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "glennc",
                                           "body":  "@anurse @davidfowl ",
                                           "updatedAt":  "2019-05-01T17:58:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzODY4NDQ4NA==",
                                           "createdAt":  "2019-10-05T20:10:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA0Iogg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "chrisstaley",
                                                                               "createdAt":  "2019-10-17T13:23:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bddckr",
                                                                               "createdAt":  "2019-11-02T09:26:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "kant2002",
                                           "body":  "Right now Microsoft.Extensions.Hosting cannot be added to Xamarin Android project (I assume that\u0027s for Xamarin iOS as well, but cannot test). There 2 offending libraries\r\n\r\n```\r\nerror XA2002: Can not resolve reference: `System.Diagnostics.EventLog`, referenced by `Microsoft.Extensions.Logging.EventLog`. Please add a NuGet package or assembly reference for `System.Diagnostics.EventLog`, or remove the reference to `Microsoft.Extensions.Logging.EventLog`. \r\nerror XA2002: Can not resolve reference: `Microsoft.Bcl.AsyncInterfaces`, referenced by `System.Text.Json`. Please add a NuGet package or assembly reference for `Microsoft.Bcl.AsyncInterfaces`, or remove the reference to `System.Text.Json`.\r\n```\r\n\r\nAdding `Microsoft.Bcl.AsyncInterfaces` and adding `System.Diagnostics.EventLog` to the XamarinAndroid project does not remove any of these two errors.",
                                           "updatedAt":  "2019-10-05T20:10:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0MzA4MzM4MA==",
                                           "createdAt":  "2019-10-17T09:11:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "malukishtiaq",
                                           "body":  "Any solution to this problem?",
                                           "updatedAt":  "2019-10-17T09:11:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0OTAzNjA4OA==",
                                           "createdAt":  "2019-11-02T11:41:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bddckr",
                                           "body":  "I can build successfully without any issues locally in `VisualStudio.16.Preview/16.4.0-pre.2.0+29411.138` (I have not tried with a non-preview version), but in the Azure DevOps hosted agent (Windows) which uses [`VisualStudio/16.2.0+29123.88`](https://github.com/microsoft/azure-pipelines-image-generation/blob/aa6a1b961161fbd5867b9f82e052237429dd107a/images/win/Vs2019-Server2019-Readme.md#visual-studio-2019-enterprise) I do get the exact same issues:\r\n\u003cdetails\u003e\u003csummary\u003eAzure DevOps build issues\u003c/summary\u003e\r\n\r\n```\r\n2019-11-02T11:05:23.2375752Z     Adding assembly reference for Java.Interop, recursively...\r\n2019-11-02T11:05:23.2385466Z     Adding assembly reference for Microsoft.Extensions.Configuration.Abstractions, recursively...\r\n2019-11-02T11:05:23.2390079Z       Adding assembly reference for netstandard, recursively...\r\n2019-11-02T11:05:23.3074609Z         Adding assembly reference for System.Data, recursively...\r\n2019-11-02T11:05:23.3176150Z           Adding assembly reference for System.Transactions, recursively...\r\n2019-11-02T11:05:23.3190534Z         Adding assembly reference for System.Drawing.Common, recursively...\r\n2019-11-02T11:05:23.3420945Z         Adding assembly reference for System.IO.Compression, recursively...\r\n2019-11-02T11:05:23.3500745Z         Adding assembly reference for System.IO.Compression.FileSystem, recursively...\r\n2019-11-02T11:05:23.3920401Z         Adding assembly reference for System.ComponentModel.Composition, recursively...\r\n2019-11-02T11:05:23.4147682Z         Adding assembly reference for System.Net.Http, recursively...\r\n2019-11-02T11:05:23.4584174Z         Adding assembly reference for System.Runtime.Serialization, recursively...\r\n2019-11-02T11:05:23.5024670Z           Adding assembly reference for System.ServiceModel.Internals, recursively...\r\n2019-11-02T11:05:23.5403709Z         Adding assembly reference for System.Web.Services, recursively...\r\n2019-11-02T11:05:23.5666237Z         Adding assembly reference for System.Xml.Linq, recursively...\r\n2019-11-02T11:05:23.5689407Z     Adding assembly reference for Microsoft.Extensions.Configuration.Binder, recursively...\r\n2019-11-02T11:05:23.5696544Z     Adding assembly reference for Microsoft.Extensions.Configuration.CommandLine, recursively...\r\n2019-11-02T11:05:23.5707382Z     Adding assembly reference for Microsoft.Extensions.Configuration, recursively...\r\n2019-11-02T11:05:23.5722313Z     Adding assembly reference for Microsoft.Extensions.Configuration.EnvironmentVariables, recursively...\r\n2019-11-02T11:05:23.5734555Z     Adding assembly reference for Microsoft.Extensions.Configuration.FileExtensions, recursively...\r\n2019-11-02T11:05:23.5762460Z     Adding assembly reference for Microsoft.Extensions.Configuration.Json, recursively...\r\n2019-11-02T11:05:23.5788221Z     Adding assembly reference for Microsoft.Extensions.Configuration.UserSecrets, recursively...\r\n2019-11-02T11:05:23.5809355Z     Adding assembly reference for Microsoft.Extensions.DependencyInjection.Abstractions, recursively...\r\n2019-11-02T11:05:23.5813196Z     Adding assembly reference for Microsoft.Extensions.DependencyInjection, recursively...\r\n2019-11-02T11:05:23.5821615Z     Adding assembly reference for Microsoft.Extensions.FileProviders.Abstractions, recursively...\r\n2019-11-02T11:05:23.5831788Z     Adding assembly reference for Microsoft.Extensions.FileProviders.Physical, recursively...\r\n2019-11-02T11:05:23.5851472Z     Adding assembly reference for Microsoft.Extensions.FileSystemGlobbing, recursively...\r\n2019-11-02T11:05:23.5854530Z     Adding assembly reference for Microsoft.Extensions.Hosting.Abstractions, recursively...\r\n2019-11-02T11:05:23.5870826Z     Adding assembly reference for Microsoft.Extensions.Hosting, recursively...\r\n2019-11-02T11:05:23.5974757Z     Adding assembly reference for Microsoft.Extensions.Logging.Abstractions, recursively...\r\n2019-11-02T11:05:23.5977213Z     Adding assembly reference for Microsoft.Extensions.Logging.Configuration, recursively...\r\n2019-11-02T11:05:23.6045951Z     Adding assembly reference for Microsoft.Extensions.Logging.Console, recursively...\r\n2019-11-02T11:05:23.6074760Z     Adding assembly reference for Microsoft.Extensions.Logging.Debug, recursively...\r\n2019-11-02T11:05:23.6092830Z     Adding assembly reference for Microsoft.Extensions.Logging, recursively...\r\n2019-11-02T11:05:23.6115211Z     Adding assembly reference for Microsoft.Extensions.Logging.EventLog, recursively...\r\n2019-11-02T11:05:23.6281486Z ##[error]C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\MSBuild\\Xamarin\\Android\\Xamarin.Android.Common.targets(1824,2): Error XA2002: Can not resolve reference: `System.Diagnostics.EventLog`, referenced by `Microsoft.Extensions.Logging.EventLog`. Please add a NuGet package or assembly reference for `System.Diagnostics.EventLog`, or remove the reference to `Microsoft.Extensions.Logging.EventLog`.\r\n2019-11-02T11:05:23.6287999Z C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\MSBuild\\Xamarin\\Android\\Xamarin.Android.Common.targets(1824,2): error XA2002: Can not resolve reference: `System.Diagnostics.EventLog`, referenced by `Microsoft.Extensions.Logging.EventLog`. Please add a NuGet package or assembly reference for `System.Diagnostics.EventLog`, or remove the reference to `Microsoft.Extensions.Logging.EventLog`. [d:\\a\\1\\s\\src\\Mobile.App\\Mobile.App.csproj]\r\n2019-11-02T11:05:23.6290816Z       Adding assembly reference for Microsoft.Extensions.Logging.EventSource, recursively...\r\n2019-11-02T11:05:23.6297204Z         Adding assembly reference for System.Runtime.CompilerServices.Unsafe, recursively...\r\n2019-11-02T11:05:23.6300859Z       Adding assembly reference for Microsoft.Extensions.Options.ConfigurationExtensions, recursively...\r\n2019-11-02T11:05:23.6327692Z       Adding assembly reference for Microsoft.Extensions.Options, recursively...\r\n2019-11-02T11:05:23.6341251Z       Adding assembly reference for Microsoft.Extensions.Primitives, recursively...\r\n2019-11-02T11:05:23.6352310Z       Adding assembly reference for Mono.Android, recursively...\r\n2019-11-02T11:05:23.6375992Z       Adding assembly reference for mscorlib, recursively...\r\n2019-11-02T11:05:23.6376370Z       Adding assembly reference for System.Buffers, recursively...\r\n2019-11-02T11:05:23.6377216Z       Adding assembly reference for System.Core, recursively...\r\n2019-11-02T11:05:23.6382838Z       Adding assembly reference for System, recursively...\r\n2019-11-02T11:05:23.6763753Z         Adding assembly reference for Mono.Security, recursively...\r\n2019-11-02T11:05:23.6778884Z       Adding assembly reference for System.Memory, recursively...\r\n2019-11-02T11:05:23.6780050Z       Adding assembly reference for System.Numerics, recursively...\r\n2019-11-02T11:05:23.6783489Z       Adding assembly reference for System.Numerics.Vectors, recursively...\r\n2019-11-02T11:05:23.6790224Z       Adding assembly reference for System.Runtime, recursively...\r\n2019-11-02T11:05:23.6801234Z       Adding assembly reference for System.Text.Encodings.Web, recursively...\r\n2019-11-02T11:05:23.6807668Z       Adding assembly reference for System.Text.Json, recursively...\r\n2019-11-02T11:05:23.6830405Z         Adding assembly reference for System.Threading.Tasks.Extensions, recursively...\r\n2019-11-02T11:05:23.6854323Z ##[error]C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\MSBuild\\Xamarin\\Android\\Xamarin.Android.Common.targets(1824,2): Error XA2002: Can not resolve reference: `Microsoft.Bcl.AsyncInterfaces`, referenced by `System.Text.Json`. Please add a NuGet package or assembly reference for `Microsoft.Bcl.AsyncInterfaces`, or remove the reference to `System.Text.Json`.\r\n2019-11-02T11:05:23.6854894Z C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\MSBuild\\Xamarin\\Android\\Xamarin.Android.Common.targets(1824,2): error XA2002: Can not resolve reference: `Microsoft.Bcl.AsyncInterfaces`, referenced by `System.Text.Json`. Please add a NuGet package or assembly reference for `Microsoft.Bcl.AsyncInterfaces`, or remove the reference to `System.Text.Json`. [d:\\a\\1\\s\\src\\Mobile.App\\Mobile.App.csproj]\r\n2019-11-02T11:05:23.6855617Z         Adding assembly reference for System.Xml, recursively...\r\n2019-11-02T11:05:23.6855833Z         Adding assembly reference for Xamarin.Android.Arch.Core.Common, recursively...\r\n2019-11-02T11:05:23.6861087Z         Adding assembly reference for Xamarin.Android.Arch.Core.Runtime, recursively...\r\n2019-11-02T11:05:23.6869772Z         Adding assembly reference for Xamarin.Android.Arch.Lifecycle.Common, recursively...\r\n2019-11-02T11:05:23.6876790Z         Adding assembly reference for Xamarin.Android.Arch.Lifecycle.LiveData.Core, recursively...\r\n2019-11-02T11:05:23.6890836Z         Adding assembly reference for Xamarin.Android.Arch.Lifecycle.LiveData, recursively...\r\n2019-11-02T11:05:23.6911376Z         Adding assembly reference for Xamarin.Android.Arch.Lifecycle.Runtime, recursively...\r\n2019-11-02T11:05:23.6930393Z         Adding assembly reference for Xamarin.Android.Arch.Lifecycle.ViewModel, recursively...\r\n2019-11-02T11:05:23.6937637Z         Adding assembly reference for Xamarin.Android.Support.Animated.Vector.Drawable, recursively...\r\n2019-11-02T11:05:23.6960502Z         Adding assembly reference for Xamarin.Android.Support.Annotations, recursively...\r\n2019-11-02T11:05:23.6967188Z         Adding assembly reference for Xamarin.Android.Support.AsyncLayoutInflater, recursively...\r\n2019-11-02T11:05:23.6974954Z         Adding assembly reference for Xamarin.Android.Support.Collections, recursively...\r\n2019-11-02T11:05:23.6982189Z         Adding assembly reference for Xamarin.Android.Support.Compat, recursively...\r\n2019-11-02T11:05:23.7026596Z         Adding assembly reference for Xamarin.Android.Support.CoordinaterLayout, recursively...\r\n2019-11-02T11:05:23.7052466Z         Adding assembly reference for Xamarin.Android.Support.Core.UI, recursively...\r\n2019-11-02T11:05:23.7150757Z         Adding assembly reference for Xamarin.Android.Support.Core.Utils, recursively...\r\n2019-11-02T11:05:23.7210197Z         Adding assembly reference for Xamarin.Android.Support.CursorAdapter, recursively...\r\n2019-11-02T11:05:23.7219403Z         Adding assembly reference for Xamarin.Android.Support.CustomTabs, recursively...\r\n2019-11-02T11:05:23.7229420Z         Adding assembly reference for Xamarin.Android.Support.CustomView, recursively...\r\n2019-11-02T11:05:23.7245645Z         Adding assembly reference for Xamarin.Android.Support.Design, recursively...\r\n2019-11-02T11:05:23.7342384Z         Adding assembly reference for Xamarin.Android.Support.DocumentFile, recursively...\r\n2019-11-02T11:05:23.7350754Z         Adding assembly reference for Xamarin.Android.Support.DrawerLayout, recursively...\r\n2019-11-02T11:05:23.7378278Z         Adding assembly reference for Xamarin.Android.Support.Fragment, recursively...\r\n2019-11-02T11:05:23.7446060Z         Adding assembly reference for Xamarin.Android.Support.Interpolator, recursively...\r\n2019-11-02T11:05:23.7453782Z         Adding assembly reference for Xamarin.Android.Support.Loader, recursively...\r\n2019-11-02T11:05:23.7461918Z         Adding assembly reference for Xamarin.Android.Support.LocalBroadcastManager, recursively...\r\n2019-11-02T11:05:23.7469339Z         Adding assembly reference for Xamarin.Android.Support.Print, recursively...\r\n2019-11-02T11:05:23.7476635Z         Adding assembly reference for Xamarin.Android.Support.SlidingPaneLayout, recursively...\r\n2019-11-02T11:05:23.7501553Z         Adding assembly reference for Xamarin.Android.Support.SwipeRefreshLayout, recursively...\r\n2019-11-02T11:05:23.7516729Z         Adding assembly reference for Xamarin.Android.Support.Transition, recursively...\r\n2019-11-02T11:05:23.7538940Z         Adding assembly reference for Xamarin.Android.Support.v7.AppCompat, recursively...\r\n2019-11-02T11:05:23.7595161Z         Adding assembly reference for Xamarin.Android.Support.v7.CardView, recursively...\r\n2019-11-02T11:05:23.7602972Z         Adding assembly reference for Xamarin.Android.Support.v7.RecyclerView, recursively...\r\n2019-11-02T11:05:23.7629454Z         Adding assembly reference for Xamarin.Android.Support.Vector.Drawable, recursively...\r\n2019-11-02T11:05:23.7647164Z         Adding assembly reference for Xamarin.Android.Support.VersionedParcelable, recursively...\r\n2019-11-02T11:05:23.7654955Z         Adding assembly reference for Xamarin.Android.Support.ViewPager, recursively...\r\n2019-11-02T11:05:23.7723660Z         Adding assembly reference for Xamarin.Essentials, recursively...\r\n2019-11-02T11:05:23.8030653Z Done Building Project \"d:\\a\\1\\s\\src\\Mobile.App\\Mobile.App.csproj\" (default targets) -- FAILED.\r\n```\r\n\u003c/details\u003e\r\n\r\n\u003cdetails\u003e\u003csummary\u003eLocal VS info\u003c/summary\u003e\r\n\r\n```\r\nMicrosoft Visual Studio Community 2019 Preview\r\nVersion 16.4.0 Preview 2.0\r\nVisualStudio.16.Preview/16.4.0-pre.2.0+29411.138\r\nMicrosoft .NET Framework\r\nVersion 4.8.03752\r\n\r\nInstalled Version: Community\r\n\r\nVisual C++ 2019   00435-60000-00000-AA534\r\nMicrosoft Visual C++ 2019\r\n\r\n.ignore   1.2.77\r\nA language service that makes it painless to handle all types of .ignore files such as .gitignore, .tfignore, etc.\r\n\r\nAdd New File   3.5.134\r\nThe fastest and easiest way to add new files to any project - including files that start with a dot\r\n\r\nASP.NET and Web Tools 2019   16.4.284.46185\r\nASP.NET and Web Tools 2019\r\n\r\nASP.NET Web Frameworks and Tools 2019   16.4.284.46185\r\nFor additional information, visit https://www.asp.net/\r\n\r\nAssemblyInfo Wizard   1.0\r\nAssemblyInfo Wizard\r\n\r\nAzure App Service Tools v3.0.0   16.4.284.46185\r\nAzure App Service Tools v3.0.0\r\n\r\nC# Tools   3.4.0-beta2-19504-06+154af84a603094b52bd08b3366c4448f7481af52\r\nC# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nChild Process Debugging Power Tool   1.0\r\nPower tool to add child process debugging to Visual Studio.\r\n\r\nCode Cleanup On Save   1.0.6\r\nAutomatically run one of the Code Clean profiles when saving the document. This ensures your code is always formatted correctly and follows your coding style conventions.\r\n\r\nCodeMaid   11.0.183\r\nCodeMaid is an open source Visual Studio extension to cleanup and simplify our C#, C++, F#, VB, PHP, PowerShell, R, JSON, XAML, XML, ASP, HTML, CSS, LESS, SCSS, JavaScript and TypeScript coding.\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nCreateUnitTestBoilerplateCommand Extension   1.0\r\nCreateUnitTestBoilerplateCommand Visual Studio Extension Detailed Info\r\n\r\nDisable No Source Available Tab   3.0\r\nThis small extension will prevent the tool window with title \u0027No Source Available\u0027 from appearing in Visual Studio, and preserve the focus on the currently active tab.\r\n\r\nAlas, along with brilliant improvements such as IntelliTrace, Visual Studio otherwise displays a tab stating that it cannot find source code where to step into. This is obvious when simply pausing an idle application, therefore it forces the developer to close this window before getting back to the code he wants to modify, which may be a productivity killer. \r\n\r\nLet\u0027s hope this extension will be short-term lived as the Visual Studio development team adds an option to better control this behavior!\r\n\r\nThis extension should work with all locales of Visual Studio.\r\n\r\nEditorConfig Language Service   1.17.260\r\nLanguage service for .editorconfig files.\r\n\r\nEditorConfig helps developers define and maintain consistent coding styles between different editors and IDEs.\r\n\r\nExtensibility Message Bus   1.2.0 (d16-2@8b56e20)\r\nProvides common messaging-based MEF services for loosely coupled Visual Studio extension components communication and integration.\r\n\r\nFile Icons   2.7\r\nAdds icons for files that are not recognized by Solution Explorer\r\n\r\nFormatCommand Extension   1.0\r\nFormatCommand Visual Studio Extension Detailed Info\r\n\r\nGitHub.VisualStudio   2.10.8.8132\r\nA Visual Studio Extension that brings the GitHub Flow into Visual Studio.\r\n\r\nGuidGenPackage   1.0\r\nOffers the new GuidGen tool in the VS Tools menu.\r\n\r\nIntelliCode Extension   1.0\r\nIntelliCode Visual Studio Extension Detailed Info\r\n\r\nJsonViewer   1.0\r\nJSON viewer\r\n\r\nMarkdown Editor   1.12.236\r\nA full featured Markdown editor with live preview and syntax highlighting. Supports GitHub flavored Markdown.\r\n\r\nMicrosoft Continuous Delivery Tools for Visual Studio   0.4\r\nSimplifying the configuration of Azure DevOps pipelines from within the Visual Studio IDE.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft Library Manager   2.0.87+gbb515bf382\r\nInstall client-side libraries easily to any web project\r\n\r\nMicrosoft MI-Based Debugger   1.0\r\nProvides support for connecting Visual Studio to MI compatible debuggers\r\n\r\nMicrosoft Visual C++ Wizards   1.0\r\nMicrosoft Visual C++ Wizards\r\n\r\nMicrosoft Visual Studio Tools for Containers   1.1\r\nDevelop, run, validate your ASP.NET Core applications in the target environment. F5 your application directly into a container with debugging, or CTRL + F5 to edit \u0026 refresh your app without having to rebuild the container.\r\n\r\nMicrosoft Visual Studio VC Package   1.0\r\nMicrosoft Visual Studio VC Package\r\n\r\nMono Debugging for Visual Studio   16.5.21 (2604ba1)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nNuGet Package Manager   5.4.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit https://docs.nuget.org/\r\n\r\nOpen in Visual Studio Code   1.4.46\r\nAdds a menu command that lets you open any solution, project, folder and file in Visual Studio Code.\r\n\r\nPowerShell Pro Tools for Visual Studio   1.0\r\nA set of tools for developing and debugging PowerShell scripts and modules in Visual Studio.\r\n\r\nProjectConfigurationManager   1.9.2171.0\r\nInformation about my package\r\n\r\nProjectServicesPackage Extension   1.0\r\nProjectServicesPackage Visual Studio Extension Detailed Info\r\n\r\nReference Conflict Analyser Extension   1.0\r\nA tool for analysis of the \"Could not load file or assembly or one of its dependencies\" problem.\r\n\r\nReviewsToolWindow Extension   1.0\r\nReviewsToolWindow Visual Studio Extension Detailed Info\r\n\r\nRewrap Extension   1.0\r\nRewrap Extension Detailed Info\r\n\r\nSmart Command Line Arguments Extension   2.2.0\r\nA Visual Studio Extension which aims to provide a better UI to manage your command line arguments. For additional information, visit https://github.com/MBulli/SmartCommandlineArgs\r\n\r\nSQL Server Data Tools   16.0.61910.04130\r\nMicrosoft SQL Server Data Tools\r\n\r\nSubwordNavigation   1.5.0\r\nProvides subword navigation for Visual Studio.\r\n\r\nSyntax Highlighting Pack   2.8.134\r\nAdds syntax highlighting and snippet support for a wide variety of programming languages such as Clojure, Go, Jade, Lua, Swift, Ruby and many more...\r\n\r\nTermWindow Extension   1.0\r\nTermWindow Visual Studio Extension Detailed Info\r\n\r\nTypeScript Tools   16.0.10926.2001\r\nTypeScript Tools for Microsoft Visual Studio\r\n\r\nViasfora   4.2.188\r\nAdd color to your Visual Studio editor!\r\n\r\nVisual Basic Tools   3.4.0-beta2-19504-06+154af84a603094b52bd08b3366c4448f7481af52\r\nVisual Basic components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nVisual F# Tools 10.4 for F# 4.6   16.4.0-beta.19504.1+e3676d75d501a2df6789ad0f5ebc310bc2cee6b5\r\nMicrosoft Visual F# Tools 10.4 for F# 4.6\r\n\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nInterop layer for hosting Visual Studio Code debug adapters in Visual Studio\r\n\r\nVisual Studio Container Tools Extensions (Preview)   1.0\r\nView, manage, and diagnose containers within Visual Studio.\r\n\r\nVisual Studio Spell Check Everywhere   VSSpellCheckEverywhere\r\nAn extension that enables spell checking within any Visual Studio file editor or tool window that uses WPF text boxes.\r\nhttps://GitHub.com/EWSoftware/VSSpellChecker\r\n\r\nVisual Studio Spell Checker   VSSpellChecker\r\nAn editor extension that checks the spelling of comments, strings, and plain text as you type or interactively with tool windows.\r\nhttps://GitHub.com/EWSoftware/VSSpellChecker\r\n\r\nVisual Studio Tools for CMake   1.0\r\nVisual Studio Tools for CMake\r\n\r\nVisual Studio Tools for CMake   1.0\r\nVisual Studio Tools for CMake\r\n\r\nVisual Studio Tools for Containers   1.0\r\nVisual Studio Tools for Containers\r\n\r\nVisual Studio Tools for Unity   4.4.1.0\r\nVisual Studio Tools for Unity\r\n\r\nVisualStudio.DeviceLog   1.0\r\nInformation about my package\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nVSColorOutput   2.6.7\r\nColor output for build and debug windows - https://mike-ward.net/vscoloroutput\r\n\r\nXamarin   16.4.000.269 (d16-4@9202c30)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin Designer   16.4.0.289 (remotes/origin/d16-4@e3c99110c)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin Templates   16.4.15 (51cdaa7)\r\nTemplates for building iOS, Android, and Windows apps with Xamarin and Xamarin.Forms.\r\n\r\nXamarin.Android SDK   10.1.0.1 (d16-4/ee1dfb6)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n    Mono: 5281037\r\n    Java.Interop: xamarin/java.interop/d16-4@35b08ba\r\n    ProGuard: xamarin/proguard/master@905836d\r\n    SQLite: xamarin/sqlite/3.28.0@46204c4\r\n    Xamarin.Android Tools: xamarin/xamarin-android-tools/master@9f4ed4b\r\n\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   13.8.1.1 (2e360ee)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.\r\n```\r\n\u003c/details\u003e\r\n\r\nHere\u0027s something I did notice in the run of `csc.exe` on AzDo:\r\n```\r\n...\r\n/reference:d:\\a\\1\\s\\artifacts\\build\\obj\\base\\.nuget\\packages\\microsoft.bcl.asyncinterfaces\\1.0.0\\ref\\netstandard2.1\\Microsoft.Bcl.AsyncInterfaces.dll\r\n...\r\n/reference:d:\\a\\1\\s\\artifacts\\build\\obj\\base\\.nuget\\packages\\system.diagnostics.eventlog\\4.6.0\\ref\\netstandard2.0\\System.Diagnostics.EventLog.dll\r\n...\r\n```\r\n\r\nSeeing the `\\ref\\` here reminded me about https://github.com/xamarin/xamarin-android/issues/2534 which leads us to https://github.com/xamarin/xamarin-android/issues/2674... but I don\u0027t really know what\u0027s happening here 😅\r\n\r\nAdditionally https://github.com/xamarin/xamarin-android/issues/3723 might be of interest, which is [fixed](https://docs.microsoft.com/en-us/xamarin/android/release-notes/10/10.1#application-mono-framework-behavior-on-device-and-emulator) in the VS preview with preview Xamarin.Android... It says that the fix is also included in Xamarin.Android 10.0.3.0, but it looks like the AzDo agent is using it according to its build logs:\r\n\u003eFound Xamarin.Android 10.0.3.0\r\n\r\nAdditionally this same issue was raised in https://github.com/aspnet/Extensions/issues/2182, too.\r\n\r\n---\r\n\r\nIs this something that should be raised with https://github.com/xamarin/xamarin-android instead? Is it related to the other issues I linked on the Xamarin.Android repo?",
                                           "updatedAt":  "2019-11-02T11:45:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2MTM3MDkwOQ==",
                                           "createdAt":  "2019-12-03T21:45:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "x37v",
                                           "body":  "BTW, I was able to get a server running on android by providing a cancellable cancel token and using the `RunAsync` method..\r\n\r\n```\r\nvar src = new CancellationTokenSource();\r\nvar host = WebHost.CreateDefaultBuilder(null)\r\n.UseKestrel(o =\u003e {\r\n   //...\r\n})\r\n.UseStartup\u003cStartup\u003e()\r\n.Build();\r\nawait host.RunAsync(src.Token);\r\n```\r\n",
                                           "updatedAt":  "2019-12-03T21:45:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2Njc3MzQ5OA==",
                                           "createdAt":  "2019-12-17T22:15:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rneeft",
                                           "body":  "Any new information/workarounds/fixes? I followed the James aspcore DI into xamarin apps post (https://montemagno.com/add-asp-net-cores-dependency-injection-into-xamarin-apps-with-hostbuilder/) Works great but it won\u0027t build on the hosted agent :-( ",
                                           "updatedAt":  "2019-12-17T22:15:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2Njc3ODAyOA==",
                                           "createdAt":  "2019-12-17T22:29:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Eilon",
                                           "body":  "@rneeft can you share what error(s) you\u0027re getting?",
                                           "updatedAt":  "2019-12-17T22:29:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2Njc5NDU1Mw==",
                                           "createdAt":  "2019-12-17T23:23:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rneeft",
                                           "body":  "I get the following errors:\r\nError XA2002 : Can Not resolve reference:    `Microsoft.Bcl.AsyncInterfaces`, referenced by `Microsoft.Extensions.DependencyInjection`. Please add a NuGet package Or assembly reference for `Microsoft.Bcl.AsyncInterfaces`, Or remove the reference to `Microsoft.Extensions.DependencyInjection`. \r\nError XA2002 : Can Not resolve reference:    `Microsoft.Bcl.AsyncInterfaces`, referenced by `Microsoft.Extensions.Hosting.Abstractions`. Please add a NuGet package Or assembly reference for `Microsoft.Bcl.AsyncInterfaces`, Or remove the reference to `Microsoft.Extensions.Hosting.Abstractions`.\r\nError XA2002 : Can Not resolve reference:    `Microsoft.Bcl.AsyncInterfaces`, referenced by `Microsoft.Extensions.Hosting`. Please add a NuGet package Or assembly reference for `Microsoft.Bcl.AsyncInterfaces`, Or remove the reference to `Microsoft.Extensions.Hosting`.\r\nError XA2002 : Can Not resolve reference:    `System.Diagnostics.EventLog`, referenced by `Microsoft.Extensions.Logging.EventLog`. Please add a NuGet package Or assembly reference for `System.Diagnostics.EventLog`, Or remove the reference to `Microsoft.Extensions.Logging.EventLog`. \r\nError XA2002 : Can Not resolve reference:   `Microsoft.Bcl.AsyncInterfaces`, referenced by `System.Text.Json`. Please add a NuGet package Or assembly reference for `Microsoft.Bcl.AsyncInterfaces`, Or remove the reference to `System.Text.Json`.\r\n\r\nSee the attachment for the full build log\r\n[log.txt](https://github.com/aspnet/Extensions/files/3975863/log.txt)\r\n\r\nPart of the YAML build:\r\n```yaml\r\n  jobs:\r\n  - job: Build\r\n    pool:\r\n      vmImage: \u0027windows-latest\u0027\r\n    steps:\r\n\r\n    - task: NuGetToolInstaller@0\r\n      displayName: \u0027Use NuGet 4.4.1\u0027\r\n      inputs:\r\n        versionSpec: 4.4.1\r\n\r\n    - task: NuGetToolInstaller@0\r\n      inputs:\r\n        versionSpec: \u00275.3.0\u0027\r\n      enabled: false\r\n\r\n    - task: NuGetCommand@2\r\n      inputs:\r\n        command: \u0027restore\u0027\r\n        restoreSolution: \u0027**/*.sln\u0027\r\n        feedsToUse: \u0027select\u0027\r\n        restoreDirectory: \u0027../Packages\u0027\r\n        \r\n    - task: VSBuild@1\r\n      displayName: \u0027Build solution\u0027\r\n      inputs:\r\n        solution: \u0027**/*.sln\u0027\r\n        msbuildArgs: \u0027/p:AppxBundle=Never /p:DeployOnBuild=true /p:DeployDefaultTarget=WebPublish /p:WebPublishMethod=FileSystem /p:publishUrl=$(build.artifactstagingdirectory)\\Website\u0027\r\n        platform: \u0027any cpu\u0027\r\n        configuration: \u0027release\u0027\r\n```\r\n\r\nI hope it helps. Let me know when you need something more. \r\n\r\n",
                                           "updatedAt":  "2019-12-17T23:23:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2NjgwMDQ0OA==",
                                           "createdAt":  "2019-12-17T23:47:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Eilon",
                                           "body":  "Hmm so far it looks OK to me. Can you show what the affected CSPROJ looks like? It\u0027s presumably one of the Xamarin.Forms projects.",
                                           "updatedAt":  "2019-12-17T23:47:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2NjgwNTAzNg==",
                                           "createdAt":  "2019-12-18T00:04:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rneeft",
                                           "body":  "XamarinForms.cspoj\r\n``` xml\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cTargetFramework\u003enetstandard2.0\u003c/TargetFramework\u003e\r\n    \u003cAssemblyName\u003eChroomsoft.Top2000.Mobile\u003c/AssemblyName\u003e\r\n    \u003cRootNamespace\u003eChroomsoft.Top2000.Mobile\u003c/RootNamespace\u003e\r\n    \u003cNullableReferenceTypes\u003etrue\u003c/NullableReferenceTypes\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n  \u003cPropertyGroup Condition=\"\u0027$(Configuration)|$(Platform)\u0027==\u0027Debug|AnyCPU\u0027\"\u003e\r\n    \u003cDebugType\u003epdbonly\u003c/DebugType\u003e\r\n    \u003cDebugSymbols\u003etrue\u003c/DebugSymbols\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n  \u003cItemGroup\u003e\r\n    \u003cNone Remove=\"appsettings.json\" /\u003e\r\n    \u003cNone Remove=\"Database\\Top2000.db\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n\r\n  \u003cItemGroup\u003e\r\n    \u003cEmbeddedResource Include=\"appsettings.json\" /\u003e\r\n    \u003cEmbeddedResource Include=\"Database\\Top2000.db\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n\r\n  \u003cItemGroup\u003e\r\n    \u003cPackageReference Include=\"Microsoft.AppCenter.Analytics\" Version=\"2.6.4\" /\u003e\r\n    \u003cPackageReference Include=\"Microsoft.AppCenter.Crashes\" Version=\"2.6.4\" /\u003e\r\n    \u003cPackageReference Include=\"Microsoft.CSharp\" Version=\"4.6.0\" /\u003e\r\n    \u003cPackageReference Include=\"Microsoft.Extensions.Hosting\" Version=\"3.1.0\" /\u003e\r\n    \u003cPackageReference Include=\"Microsoft.Extensions.Http\" Version=\"3.1.0\" /\u003e\r\n    \u003cPackageReference Include=\"Xamarin.Forms\" Version=\"4.4.0.991265\" /\u003e\r\n    \u003cPackageReference Include=\"Xamarin.Essentials\" Version=\"1.3.1\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n\r\n  \u003cItemGroup\u003e\r\n    \u003cProjectReference Include=\"..\\..\\..\\Base\\Access\\SQLite\\Access.SQLite\\Access.SQLite.csproj\" /\u003e\r\n    \u003cProjectReference Include=\"..\\..\\..\\Base\\Top2000\\Top2000.csproj\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n\r\n  \u003cItemGroup\u003e\r\n    \u003cReference Include=\"Java.Interop\"\u003e\r\n      \u003cHintPath\u003eC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\Common7\\IDE\\ReferenceAssemblies\\Microsoft\\Framework\\MonoAndroid\\v1.0\\Java.Interop.dll\u003c/HintPath\u003e\r\n    \u003c/Reference\u003e\r\n  \u003c/ItemGroup\u003e\r\n\r\n  \u003cItemGroup\u003e\r\n    \u003cCompile Update=\"Globalisation\\AppResources.Designer.cs\"\u003e\r\n      \u003cDesignTime\u003eTrue\u003c/DesignTime\u003e\r\n      \u003cAutoGen\u003eTrue\u003c/AutoGen\u003e\r\n      \u003cDependentUpon\u003eAppResources.resx\u003c/DependentUpon\u003e\r\n    \u003c/Compile\u003e\r\n  \u003c/ItemGroup\u003e\r\n\r\n  \u003cItemGroup\u003e\r\n    \u003cEmbeddedResource Update=\"About\\AboutView.xaml\"\u003e\r\n      \u003cGenerator\u003eMSBuild:UpdateDesignTimeXaml\u003c/Generator\u003e\r\n    \u003c/EmbeddedResource\u003e\r\n    \u003cEmbeddedResource Update=\"AppShell.xaml\"\u003e\r\n      \u003cGenerator\u003eMSBuild:UpdateDesignTimeXaml\u003c/Generator\u003e\r\n    \u003c/EmbeddedResource\u003e\r\n    \u003cEmbeddedResource Update=\"Globalisation\\AppResources.fr.resx\"\u003e\r\n      \u003cGenerator\u003ePublicResXFileCodeGenerator\u003c/Generator\u003e\r\n    \u003c/EmbeddedResource\u003e\r\n    \u003cEmbeddedResource Update=\"Globalisation\\AppResources.resx\"\u003e\r\n      \u003cGenerator\u003ePublicResXFileCodeGenerator\u003c/Generator\u003e\r\n      \u003cLastGenOutput\u003eAppResources.Designer.cs\u003c/LastGenOutput\u003e\r\n    \u003c/EmbeddedResource\u003e\r\n    \u003cEmbeddedResource Update=\"Globalisation\\AppResources.en.resx\"\u003e\r\n      \u003cGenerator\u003ePublicResXFileCodeGenerator\u003c/Generator\u003e\r\n      \u003cLastGenOutput\u003eAppResources.en.Designer.cs\u003c/LastGenOutput\u003e\r\n    \u003c/EmbeddedResource\u003e\r\n    \u003cEmbeddedResource Update=\"Search\\SearchView.xaml\"\u003e\r\n      \u003cGenerator\u003eMSBuild:UpdateDesignTimeXaml\u003c/Generator\u003e\r\n    \u003c/EmbeddedResource\u003e\r\n    \u003cEmbeddedResource Update=\"SelectDate\\SelectDateView.xaml\"\u003e\r\n      \u003cGenerator\u003eMSBuild:UpdateDesignTimeXaml\u003c/Generator\u003e\r\n    \u003c/EmbeddedResource\u003e\r\n    \u003cEmbeddedResource Update=\"Settings\\SettingsView.xaml\"\u003e\r\n      \u003cGenerator\u003eMSBuild:UpdateDesignTimeXaml\u003c/Generator\u003e\r\n    \u003c/EmbeddedResource\u003e\r\n    \u003cEmbeddedResource Update=\"SingleTrack\\SingleTrackView.xaml\"\u003e\r\n      \u003cGenerator\u003eMSBuild:UpdateDesignTimeXaml\u003c/Generator\u003e\r\n    \u003c/EmbeddedResource\u003e\r\n    \u003cEmbeddedResource Update=\"ViewByDate\\ViewByDateView.xaml\"\u003e\r\n      \u003cGenerator\u003eMSBuild:UpdateDesignTimeXaml\u003c/Generator\u003e\r\n    \u003c/EmbeddedResource\u003e\r\n    \u003cEmbeddedResource Update=\"YearOverview\\YearOverviewView.xaml\"\u003e\r\n      \u003cGenerator\u003eMSBuild:UpdateDesignTimeXaml\u003c/Generator\u003e\r\n    \u003c/EmbeddedResource\u003e\r\n  \u003c/ItemGroup\u003e\r\n\u003c/Project\u003e\r\n```\r\nXamarinForms.Android.csproj\r\n``` xml\r\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\r\n\u003cProject DefaultTargets=\"Build\" ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"\u003e\r\n  \u003cPropertyGroup\u003e\r\n    \u003cConfiguration Condition=\" \u0027$(Configuration)\u0027 == \u0027\u0027 \"\u003eDebug\u003c/Configuration\u003e\r\n    \u003cPlatform Condition=\" \u0027$(Platform)\u0027 == \u0027\u0027 \"\u003eAnyCPU\u003c/Platform\u003e\r\n    \u003cProjectGuid\u003e{A25989B6-2A0E-471C-AB01-A478DA574BEE}\u003c/ProjectGuid\u003e\r\n    \u003cProjectTypeGuids\u003e{EFBA0AD7-5A72-4C68-AF49-83D382785DCF};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\u003c/ProjectTypeGuids\u003e\r\n    \u003cTemplateGuid\u003e{c9e5eea5-ca05-42a1-839b-61506e0a37df}\u003c/TemplateGuid\u003e\r\n    \u003cOutputType\u003eLibrary\u003c/OutputType\u003e\r\n    \u003cRootNamespace\u003eChroomsoft.Top2000.Mobile.Droid\u003c/RootNamespace\u003e\r\n    \u003cAssemblyName\u003eChroomsoft.Top2000.Mobile.Droid\u003c/AssemblyName\u003e\r\n    \u003cAndroidApplication\u003eTrue\u003c/AndroidApplication\u003e\r\n    \u003cAndroidResgenFile\u003eResources\\Resource.designer.cs\u003c/AndroidResgenFile\u003e\r\n    \u003cAndroidResgenClass\u003eResource\u003c/AndroidResgenClass\u003e\r\n    \u003cAndroidManifest\u003eProperties\\AndroidManifest.xml\u003c/AndroidManifest\u003e\r\n    \u003cMonoAndroidResourcePrefix\u003eResources\u003c/MonoAndroidResourcePrefix\u003e\r\n    \u003cMonoAndroidAssetsPrefix\u003eAssets\u003c/MonoAndroidAssetsPrefix\u003e\r\n    \u003cAndroidUseLatestPlatformSdk\u003efalse\u003c/AndroidUseLatestPlatformSdk\u003e\r\n    \u003cTargetFrameworkVersion\u003ev9.0\u003c/TargetFrameworkVersion\u003e\r\n    \u003cAndroidEnableSGenConcurrent\u003etrue\u003c/AndroidEnableSGenConcurrent\u003e\r\n    \u003cAndroidUseAapt2\u003etrue\u003c/AndroidUseAapt2\u003e\r\n    \u003cAndroidHttpClientHandlerType\u003eXamarin.Android.Net.AndroidClientHandler\u003c/AndroidHttpClientHandlerType\u003e\r\n    \u003cNuGetPackageImportStamp\u003e\r\n    \u003c/NuGetPackageImportStamp\u003e\r\n    \u003cAndroidKeyStore\u003efalse\u003c/AndroidKeyStore\u003e\r\n  \u003c/PropertyGroup\u003e\r\n  \u003cPropertyGroup Condition=\" \u0027$(Configuration)|$(Platform)\u0027 == \u0027Debug|AnyCPU\u0027 \"\u003e\r\n    \u003cDebugSymbols\u003etrue\u003c/DebugSymbols\u003e\r\n    \u003cDebugType\u003eportable\u003c/DebugType\u003e\r\n    \u003cOptimize\u003efalse\u003c/Optimize\u003e\r\n    \u003cOutputPath\u003ebin\\Debug\u003c/OutputPath\u003e\r\n    \u003cDefineConstants\u003eDEBUG;\u003c/DefineConstants\u003e\r\n    \u003cErrorReport\u003eprompt\u003c/ErrorReport\u003e\r\n    \u003cWarningLevel\u003e4\u003c/WarningLevel\u003e\r\n    \u003cAndroidLinkMode\u003eNone\u003c/AndroidLinkMode\u003e\r\n    \u003cAndroidSupportedAbis /\u003e\r\n    \u003cAndroidLinkSkip\u003eSystem.Diagnostics.EventLog\u003c/AndroidLinkSkip\u003e\r\n  \u003c/PropertyGroup\u003e\r\n  \u003cPropertyGroup Condition=\" \u0027$(Configuration)|$(Platform)\u0027 == \u0027Release|AnyCPU\u0027 \"\u003e\r\n    \u003cDebugSymbols\u003efalse\u003c/DebugSymbols\u003e\r\n    \u003cDebugType\u003eportable\u003c/DebugType\u003e\r\n    \u003cOptimize\u003etrue\u003c/Optimize\u003e\r\n    \u003cOutputPath\u003ebin\\Release\u003c/OutputPath\u003e\r\n    \u003cErrorReport\u003eprompt\u003c/ErrorReport\u003e\r\n    \u003cWarningLevel\u003e4\u003c/WarningLevel\u003e\r\n    \u003cAndroidManagedSymbols\u003etrue\u003c/AndroidManagedSymbols\u003e\r\n    \u003cAndroidUseSharedRuntime\u003efalse\u003c/AndroidUseSharedRuntime\u003e\r\n    \u003cEmbedAssembliesIntoApk\u003etrue\u003c/EmbedAssembliesIntoApk\u003e\r\n    \u003cAndroidUseAapt2\u003efalse\u003c/AndroidUseAapt2\u003e\r\n    \u003cAndroidLinkMode\u003eSdkOnly\u003c/AndroidLinkMode\u003e\r\n    \u003cAndroidSupportedAbis /\u003e\r\n    \u003cMandroidI18n /\u003e\r\n    \u003cAndroidPackageFormat\u003eapk\u003c/AndroidPackageFormat\u003e\r\n    \u003cAndroidKeyStore\u003efalse\u003c/AndroidKeyStore\u003e\r\n    \u003cAndroidSigningKeyStore\u003e\r\n    \u003c/AndroidSigningKeyStore\u003e\r\n    \u003cAndroidSigningKeyAlias\u003e\r\n    \u003c/AndroidSigningKeyAlias\u003e\r\n    \u003cAndroidSigningStorePass\u003e\r\n    \u003c/AndroidSigningStorePass\u003e\r\n  \u003c/PropertyGroup\u003e\r\n  \u003cItemGroup\u003e\r\n    \u003cReference Include=\"Mono.Android\" /\u003e\r\n    \u003cReference Include=\"System\" /\u003e\r\n    \u003cReference Include=\"System.Core\" /\u003e\r\n    \u003cReference Include=\"System.Data\" /\u003e\r\n    \u003cReference Include=\"System.Xml.Linq\" /\u003e\r\n    \u003cReference Include=\"System.Xml\" /\u003e\r\n    \u003cReference Include=\"System.Numerics\" /\u003e\r\n    \u003cReference Include=\"System.Numerics.Vectors\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n  \u003cItemGroup\u003e\r\n    \u003cPackageReference Include=\"Microsoft.AppCenter.Analytics\"\u003e\r\n      \u003cVersion\u003e2.6.4\u003c/Version\u003e\r\n    \u003c/PackageReference\u003e\r\n    \u003cPackageReference Include=\"Microsoft.AppCenter.Crashes\"\u003e\r\n      \u003cVersion\u003e2.6.4\u003c/Version\u003e\r\n    \u003c/PackageReference\u003e\r\n    \u003cPackageReference Include=\"Microsoft.CSharp\"\u003e\r\n      \u003cVersion\u003e4.6.0\u003c/Version\u003e\r\n    \u003c/PackageReference\u003e\r\n    \u003cPackageReference Include=\"Microsoft.Extensions.Hosting\"\u003e\r\n      \u003cVersion\u003e3.1.0\u003c/Version\u003e\r\n    \u003c/PackageReference\u003e\r\n    \u003cPackageReference Include=\"Microsoft.Extensions.Http\"\u003e\r\n      \u003cVersion\u003e3.1.0\u003c/Version\u003e\r\n    \u003c/PackageReference\u003e\r\n    \u003cPackageReference Include=\"Xamarin.Forms\" Version=\"4.4.0.991265\" /\u003e\r\n    \u003cPackageReference Include=\"Xamarin.Android.Support.Design\" Version=\"28.0.0.3\" /\u003e\r\n    \u003cPackageReference Include=\"Xamarin.Android.Support.v7.AppCompat\" Version=\"28.0.0.3\" /\u003e\r\n    \u003cPackageReference Include=\"Xamarin.Android.Support.v4\" Version=\"28.0.0.3\" /\u003e\r\n    \u003cPackageReference Include=\"Xamarin.Android.Support.v7.CardView\" Version=\"28.0.0.3\" /\u003e\r\n    \u003cPackageReference Include=\"Xamarin.Android.Support.v7.MediaRouter\" Version=\"28.0.0.3\" /\u003e\r\n    \u003cPackageReference Include=\"Xamarin.Android.Support.Core.Utils\" Version=\"28.0.0.3\" /\u003e\r\n    \u003cPackageReference Include=\"Xamarin.Android.Support.CustomTabs\" Version=\"28.0.0.3\" /\u003e\r\n    \u003cPackageReference Include=\"Xamarin.Essentials\" Version=\"1.3.1\" /\u003e\r\n    \u003cPackageReference Include=\"System.Threading.Tasks.Extensions\" Version=\"4.5.3\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n  \u003cItemGroup\u003e\r\n    \u003cCompile Include=\"Controls\\ProgressRingRenderer.cs\" /\u003e\r\n    \u003cCompile Include=\"Globalisation\\LocalisationService.cs\" /\u003e\r\n    \u003cCompile Include=\"MainActivity.cs\" /\u003e\r\n    \u003cCompile Include=\"Resources\\Resource.designer.cs\" /\u003e\r\n    \u003cCompile Include=\"Properties\\AssemblyInfo.cs\" /\u003e\r\n    \u003cCompile Include=\"SplashActivity.cs\" /\u003e\r\n    \u003cCompile Include=\"Top2000SQLiteDatabaseFactory.cs\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n  \u003cItemGroup\u003e\r\n    \u003cAndroidAsset Include=\"Assets\\Symbols.ttf\" /\u003e\r\n    \u003cNone Include=\"Resources\\AboutResources.txt\" /\u003e\r\n    \u003cNone Include=\"Assets\\AboutAssets.txt\" /\u003e\r\n    \u003cNone Include=\"Properties\\AndroidManifest.xml\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n  \u003cItemGroup\u003e\r\n    \u003cAndroidResource Include=\"Resources\\layout\\Tabbar.xml\" /\u003e\r\n    \u003cAndroidResource Include=\"Resources\\layout\\Toolbar.xml\" /\u003e\r\n    \u003cAndroidResource Include=\"Resources\\values\\styles.xml\" /\u003e\r\n    \u003cAndroidResource Include=\"Resources\\values\\colors.xml\" /\u003e\r\n    \u003cAndroidResource Include=\"Resources\\mipmap-anydpi-v26\\icon.xml\" /\u003e\r\n    \u003cAndroidResource Include=\"Resources\\mipmap-anydpi-v26\\icon_round.xml\" /\u003e\r\n    \u003cAndroidResource Include=\"Resources\\mipmap-hdpi\\top2000icon.png\" /\u003e\r\n    \u003cAndroidResource Include=\"Resources\\mipmap-mdpi\\top2000icon.png\" /\u003e\r\n    \u003cAndroidResource Include=\"Resources\\mipmap-xhdpi\\top2000icon.png\" /\u003e\r\n    \u003cAndroidResource Include=\"Resources\\mipmap-xxhdpi\\top2000icon.png\" /\u003e\r\n    \u003cAndroidResource Include=\"Resources\\mipmap-xxxhdpi\\top2000icon.png\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n  \u003cItemGroup\u003e\r\n    \u003cFolder Include=\"Resources\\drawable-hdpi\\\" /\u003e\r\n    \u003cFolder Include=\"Resources\\drawable-mdpi\\\" /\u003e\r\n    \u003cFolder Include=\"Resources\\drawable-xhdpi\\\" /\u003e\r\n    \u003cFolder Include=\"Resources\\drawable-xxhdpi\\\" /\u003e\r\n    \u003cFolder Include=\"Resources\\drawable-xxxhdpi\\\" /\u003e\r\n    \u003cFolder Include=\"Resources\\raw\\\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n  \u003cItemGroup\u003e\r\n    \u003cProjectReference Include=\"..\\..\\..\\Base\\Access\\SQLite\\Access.SQLite\\Access.SQLite.csproj\"\u003e\r\n      \u003cProject\u003e{e13d6870-170a-4b4f-a2d2-5f14a0e3bdc6}\u003c/Project\u003e\r\n      \u003cName\u003eAccess.SQLite\u003c/Name\u003e\r\n    \u003c/ProjectReference\u003e\r\n    \u003cProjectReference Include=\"..\\..\\..\\Base\\Top2000\\Top2000.csproj\"\u003e\r\n      \u003cProject\u003e{d009ccde-77ba-4b62-a79b-02bc6d823e50}\u003c/Project\u003e\r\n      \u003cName\u003eTop2000\u003c/Name\u003e\r\n    \u003c/ProjectReference\u003e\r\n    \u003cProjectReference Include=\"..\\XamarinForms\\XamarinForms.csproj\"\u003e\r\n      \u003cProject\u003e{4BD9C2AD-0167-45B7-9B05-D46BBCC4ED78}\u003c/Project\u003e\r\n      \u003cName\u003eXamarinForms\u003c/Name\u003e\r\n    \u003c/ProjectReference\u003e\r\n  \u003c/ItemGroup\u003e\r\n  \u003cItemGroup\u003e\r\n    \u003cAndroidResource Include=\"Resources\\drawable\\Up.png\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n  \u003cItemGroup\u003e\r\n    \u003cAndroidResource Include=\"Resources\\drawable\\splash_screen.xml\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n  \u003cItemGroup\u003e\r\n    \u003cAndroidResource Include=\"Resources\\drawable\\nl.png\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n  \u003cItemGroup\u003e\r\n    \u003cAndroidResource Include=\"Resources\\drawable\\fr.png\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n  \u003cItemGroup\u003e\r\n    \u003cAndroidResource Include=\"Resources\\drawable\\en.png\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n  \u003cItemGroup\u003e\r\n    \u003cAndroidResource Include=\"Resources\\drawable\\header.png\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n  \u003cItemGroup\u003e\r\n    \u003cAndroidResource Include=\"Resources\\mipmap-hdpi\\top2000iconRound.png\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n  \u003cItemGroup\u003e\r\n    \u003cAndroidResource Include=\"Resources\\mipmap-mdpi\\top2000iconRound.png\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n  \u003cItemGroup\u003e\r\n    \u003cAndroidResource Include=\"Resources\\mipmap-xhdpi\\top2000iconRound.png\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n  \u003cItemGroup\u003e\r\n    \u003cAndroidResource Include=\"Resources\\mipmap-xxhdpi\\top2000iconRound.png\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n  \u003cItemGroup\u003e\r\n    \u003cAndroidResource Include=\"Resources\\mipmap-xxxhdpi\\top2000iconRound.png\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n  \u003cItemGroup\u003e\r\n    \u003cAndroidResource Include=\"Resources\\mipmap-hdpi\\top2000splash.png\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n  \u003cItemGroup\u003e\r\n    \u003cAndroidResource Include=\"Resources\\mipmap-mdpi\\top2000splash.png\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n  \u003cItemGroup\u003e\r\n    \u003cAndroidResource Include=\"Resources\\mipmap-xhdpi\\top2000splash.png\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n  \u003cItemGroup\u003e\r\n    \u003cAndroidResource Include=\"Resources\\mipmap-xxhdpi\\top2000splash.png\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n  \u003cItemGroup\u003e\r\n    \u003cAndroidResource Include=\"Resources\\mipmap-xxxhdpi\\top2000splash.png\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n  \u003cImport Project=\"$(MSBuildExtensionsPath)\\Xamarin\\Android\\Xamarin.Android.CSharp.targets\" /\u003e\r\n\u003c/Project\u003e\r\n```",
                                           "updatedAt":  "2019-12-18T00:04:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2Njg4NzY0OQ==",
                                           "createdAt":  "2019-12-18T06:29:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Eilon",
                                           "body":  "Thank you, I will take a look in the morning,",
                                           "updatedAt":  "2019-12-18T06:29:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2NzE5NzExNw==",
                                           "createdAt":  "2019-12-18T20:20:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Eilon",
                                           "body":  "@rneeft the only thing I can think of right now is that maybe there\u0027s an issue specific to v3.1 of these packages?\r\n\r\n```xml\r\n    \u003cPackageReference Include=\"Microsoft.Extensions.Hosting\" Version=\"3.1.0\" /\u003e\r\n    \u003cPackageReference Include=\"Microsoft.Extensions.Http\" Version=\"3.1.0\" /\u003e\r\n```\r\n\r\nWhat if you try 3.0.0?",
                                           "updatedAt":  "2019-12-18T20:20:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2NzI0NTkyMA==",
                                           "createdAt":  "2019-12-18T22:44:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rneeft",
                                           "body":  "@Eilon I tried to move from 3.1.0 to 3.0.0 resulting into fewer errors. The only two left are:\r\n\r\n##[error]C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\MSBuild\\Xamarin\\Android\\Xamarin.Android.Common.targets(1808,2): Error XA2002: Can not resolve reference: `System.Diagnostics.EventLog`, referenced by `Microsoft.Extensions.Logging.EventLog`. Please add a NuGet package or assembly reference for `System.Diagnostics.EventLog`, or remove the reference to `Microsoft.Extensions.Logging.EventLog`.\r\n\r\n##[error]C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\MSBuild\\Xamarin\\Android\\Xamarin.Android.Common.targets(1808,2): Error XA2002: Can not resolve reference: `Microsoft.Bcl.AsyncInterfaces`, referenced by `System.Text.Json`. Please add a NuGet package or assembly reference for `Microsoft.Bcl.AsyncInterfaces`, or remove the reference to `System.Text.Json`.\r\n\r\nI\u0027ll tried to work on this some more the coming weekend. Thanks for the help. If you have any more tips please let me know. I\u0027ll keep posting any new development from my side.",
                                           "updatedAt":  "2019-12-18T22:44:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3NTc4NTc2MA==",
                                           "createdAt":  "2020-01-17T20:36:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rneeft",
                                           "body":  "Hi All,\r\n\r\nI still don\u0027t have any luck from my side. To help troubleshoot and isolate the issue, I created a GitHub repository and a public Azure DevOps Team Project with a (YAML) build pipeline.\r\n\r\n- https://github.com/rneeft/XamarinDotNetCoreIssue\r\n- https://dev.azure.com/Chroomsoft/XamarinDotNetCoreIssue/_build?definitionId=44\u0026_a=summary\r\n\r\nI hope the issue can be fixed because I love the way it is working (except for the build off course). \r\n\r\nRick",
                                           "updatedAt":  "2020-01-17T20:36:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4NzkzNTIwMQ==",
                                           "createdAt":  "2020-02-18T22:26:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "yanxiaodi",
                                           "body":  "I have the same error regarding `Can not resolve reference: Microsoft.Bcl.AsyncInterfaces` when building the Xamarin.Android project on hosted windows2019 of Azure DevOps. The package has been installed correctly and I can build it on my local machine.",
                                           "updatedAt":  "2020-02-18T22:26:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4ODAyMzIxOA==",
                                           "createdAt":  "2020-02-19T03:57:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kant2002",
                                           "body":  "@yanxiaodi   You can track work on that issue at Xamarin https://github.com/xamarin/xamarin-android/issues/4074\r\nIf you really desperate you can try build Xamarin from https://github.com/xamarin/xamarin-android/pull/4171\r\n",
                                           "updatedAt":  "2020-02-19T03:57:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4ODA3MzI2OA==",
                                           "createdAt":  "2020-02-19T07:23:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VladislavAntonyuk",
                                           "body":  "@yanxiaodi I had the same issue. There are 2 workarounds. Use net standard 2.1, so you don’t need explicitly install the package. Or make sure you restore your packages in C:/users/username/.nuget/packages",
                                           "updatedAt":  "2020-02-19T07:23:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4ODU0NzAyNA==",
                                           "createdAt":  "2020-02-20T00:30:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "yanxiaodi",
                                           "body":  "@kant2002 @VladislavAntonyuk many thanks for your help. But we are using Azure DevOps Hosted VS1029 to build the project so cannot manually restore the packages. It is hard to update to .net standard 2.1 because that would impact some other projects, which means more risks. I have to revert to the old packages at the moment.",
                                           "updatedAt":  "2020-02-20T00:30:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5MzQxNTI0MA==",
                                           "createdAt":  "2020-03-02T13:59:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DAMcK-TREC",
                                           "body":  "I have the \"Can not resolve reference: Microsoft.Bcl.AsyncInterfaces\" issue also. Using .NET Standard 2.1 nor restoring packages to C:/users/username/.nuget/packages fixes things.",
                                           "updatedAt":  "2020-03-02T13:59:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5MzUxNTI4OA==",
                                           "createdAt":  "2020-03-02T17:20:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kant2002",
                                           "body":  "@DAMcK-TREC Can you try suggestion here? https://github.com/xamarin/xamarin-android/issues/4074#issuecomment-592935384",
                                           "updatedAt":  "2020-03-02T17:20:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxNDg0MDgyNA==",
                                           "createdAt":  "2020-04-16T19:06:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rneeft",
                                           "body":  "I believe the issue is fixed. My test project is building fine on the build server now :)",
                                           "updatedAt":  "2020-04-16T19:06:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxOTgxNDY3Mw==",
                                           "createdAt":  "2020-04-27T08:18:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "weitzhandler",
                                           "body":  "I\u0027m trying to use Generic Host in my Android app.\r\nI\u0027m calling `Host.CreateDefaultHost()` to initiate it.\r\nWhen I call `host.Start()`, it calls `ConsoleLifetime.WaitForStartAsync(token)` under the hood, which calls `Console.CancelKeyPress += OnCancelKeyPress;`, that throws a `PlatformNotSupportedException`.\r\n",
                                           "updatedAt":  "2020-04-27T08:18:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxOTgyMjE1MA==",
                                           "createdAt":  "2020-04-27T08:33:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "weitzhandler",
                                           "body":  "I copied the `ConsoleLifetime` file to my project, and removed that line.\r\nThen at service config I added it to the service registration:\r\n```c#\r\nservicesBuilder.AddSingleton\u003cIHostLifetime, AppConsoleLifetime\u003e();\r\n```\r\nWorks like a charm.\r\n\r\nPlease look at PR dotnet/extensions#3208 for a sample of having another console option that allows ignoring the cancel event.",
                                           "updatedAt":  "2020-04-27T08:47:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyMTUxMjc4Nw==",
                                           "createdAt":  "2020-04-29T23:01:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "analogrelay",
                                           "body":  "Triage: Transferring this issue to runtime to keep on the future backlog, but there\u0027s currently no concrete plan on where (Xamarin, runtime, etc.), when or if the work will happen :).",
                                           "updatedAt":  "2020-04-29T23:01:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNTQ0NTE3MQ==",
                                           "createdAt":  "2020-05-07T19:14:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. Please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-05-07T19:14:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0ODU3MTgxMg==",
                                           "createdAt":  "2020-06-24T04:10:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "weitzhandler",
                                           "body":  "I\u0027m willing to contribute.",
                                           "updatedAt":  "2020-06-24T04:10:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNzc2MTczNg==",
                                           "createdAt":  "2020-10-13T14:04:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rmarinho",
                                           "body":  "Any work on this issue? seems is keeping us of using the Host on Android ",
                                           "updatedAt":  "2020-10-13T14:04:32Z"
                                       }
                                   ],
                         "totalCount":  27
                     },
        "title":  "Support for Xamarin in GenericHost",
        "labels":  [
                       "feature-request",
                       "area-Extensions-Hosting"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/50021",
        "createdAt":  "2019-10-28T15:31:06Z",
        "number":  50021,
        "author":  "artiomchi",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC4LnZA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "twelve-cgn",
                                            "createdAt":  "2021-03-26T14:23:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Grauenwolf",
                                            "createdAt":  "2022-07-14T20:59:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "RachelXGanon",
                                            "createdAt":  "2022-11-08T08:05:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hervehobbes",
                                            "createdAt":  "2024-05-27T12:14:32Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2025-04-29T13:10:29Z",
        "body":  "### Is your feature request related to a problem? Please describe.\r\nCurrently there\u0027s a simple way to run a netcore3 app as a windows service using the `.UseWindowsService()` extension. The issue is that this extension uses it\u0027s own `ServiceBase` class, which is the only class that receives pause and continue events, shutdown events and custom service commands.\r\n\r\n### Describe the solution you\u0027d like\r\nAdd a second generic extension method that allows a custom class to be passed to `.UseWindowsService\u003c\u003e()`, which will be based on the existing `WindowsServiceLifetime`, retaining all functionality, but allowing extra customisation.\r\n\r\n### Describe alternatives you\u0027ve considered\r\nI\u0027ve thought of altering the `WindowsServiceLifetime` class to receive a `ICollection\u003cServiceBase\u003e` from DI, and register them alongside itself in the `ServiceBase.Run()` call, but that will mean the `ApplicationLifetime.ApplicationStarted` will be called only after the `WindowsServiceLifetime` service has started, not when all services have.\r\n\r\nAlso, it seems to make sense to only have one service registered, and move \"service\" functionality to hosted service classes instead.\r\n\r\n### Additional context\r\nI\u0027ve added an implementation to my fork, branched off `release/3.0`, since I wasn\u0027t sure which branch would be best to start the fix from: [feature/windows-service-custom-class](https://github.com/artiomchi/Extensions/tree/feature/windows-service-custom-class), with the fix being in this commit: [d9bafd6\r\n](https://github.com/artiomchi/Extensions/commit/d9bafd63027ba352af6839b0f0003a8e504eb519)\r\n\r\nIf you let me know whether I should do it from `master`, or any other branch, I can make a PR for this.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOqTUZvg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0NzQ2OTM2Ng==",
                                           "createdAt":  "2019-10-29T15:09:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "Can you give some code examples here showing the proposed usage?\r\n\r\nYes, we primarily work in master.",
                                           "updatedAt":  "2019-10-29T15:09:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0NzQ4NTU5OQ==",
                                           "createdAt":  "2019-10-29T15:40:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODmWYMw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Grauenwolf",
                                                                               "createdAt":  "2022-07-14T20:59:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hervehobbes",
                                                                               "createdAt":  "2024-05-30T11:22:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "yasensimeonov",
                                                                               "createdAt":  "2024-06-20T08:33:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "artiomchi",
                                           "body":  "Sure,\r\n\r\nThe idea is to subclass the `WindowsServiceLifetime`, and overtide the standard `ServiceBase` methods, adding custom behaviour (making sure to not forget to call the base implementation on the start and stop methods).\r\n\r\nFor example:\r\n\r\n```csharp\r\npublic class CustomService : WindowsServiceLifetime\r\n{\r\n    public CustomService(IHostEnvironment environment, IHostApplicationLifetime applicationLifetime, ILoggerFactory loggerFactory, IOptions\u003cHostOptions\u003e optionsAccessor)\r\n        : base(environment, applicationLifetime, loggerFactory, optionsAccessor)\r\n    {\r\n        // Enable whichever events you want to be notified of\r\n        CanPauseAndContinue = true;\r\n        CanShutdown = true;\r\n        CanHandleSessionChangeEvent = true;\r\n        CanHandlePowerEvent = true;\r\n    }\r\n\r\n    protected override void OnStart(String[] args)\r\n    {\r\n        base.OnStart(args);\r\n        // Custom start behaviour\r\n    }\r\n\r\n    protected override void OnPause()\r\n    {\r\n        base.OnPause();\r\n        // Service continue handler\r\n    }\r\n\r\n    protected override void OnContinue()\r\n    {\r\n        base.OnContinue();\r\n        // Service pause handler\r\n    }\r\n\r\n    protected override void OnShutdown()\r\n    {\r\n        base.OnShutdown();\r\n        // System shutdown handler\r\n    }\r\n\r\n    protected override void OnSessionChange(SessionChangeDescription changeDescription)\r\n    {\r\n        base.OnSessionChange(changeDescription);\r\n        // Session change handler\r\n    }\r\n\r\n    protected override void OnCustomCommand(Int32 command)\r\n    {\r\n        base.OnCustomCommand(command);\r\n        // Custom command handler\r\n    }\r\n}\r\n```\r\n\r\nThe service can also then be programatically paused/resumed, or sent custom commands to:\r\n```csharp\r\nvar serviceController = new ServiceController(ServiceName);\r\nserviceController.ExecuteCommand(42);\r\nserviceController.Pause();\r\n```\r\n\r\nI\u0027ll cherry pick the commit to the master branch then, and make a PR for a review",
                                           "updatedAt":  "2019-10-29T15:40:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0NzQ4NzkwMg==",
                                           "createdAt":  "2019-10-29T15:44:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "artiomchi",
                                           "body":  "I forgot to add, to use this new class, it\u0027d have to be registered when setting up the host:\r\n```csharp\r\nHost.CreateDefaultBuilder(args)\r\n    .UseWindowsService\u003cCustomService\u003e()\r\n```",
                                           "updatedAt":  "2019-10-29T15:44:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0NzUwMDg5Mg==",
                                           "createdAt":  "2019-10-29T16:08:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "Couldn\u0027t you do this today by calling `services.AddSingleton\u003cIHostLifetime, CustomService\u003e();`?",
                                           "updatedAt":  "2019-10-29T16:08:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0NzUwMzY4NA==",
                                           "createdAt":  "2019-10-29T16:14:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "artiomchi",
                                           "body":  "Close, This should only be registered when running within the context of a web service. So the full solution becomes:\r\n\r\n```csharp\r\nHost.CreateDefaultBuilder(args)\r\n    .UseWindowsService()\r\n    .ConfigureServices((hostContext, services) =\u003e\r\n    {\r\n        if (WindowsServiceHelpers.IsWindowsService())\r\n            services.AddSingleton\u003cIHostLifetime, CustomService\u003e();\r\n    })\r\n```\r\n\r\nI just thought to suggest a more streamlined option, as well as extend the documentation, so that making a windows service that can handle power/pause events is more obvious.\r\n\r\nIf this is considered unnecessary, then I\u0027m happy to cancel the PR and close the issue\r\n",
                                           "updatedAt":  "2019-10-29T16:14:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0NzUwNDc3Nw==",
                                           "createdAt":  "2019-10-29T16:16:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "Just wanted to be clear on the benefits.\r\n\r\n@glennc what do you think?",
                                           "updatedAt":  "2019-10-29T16:16:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1MDIyNTY2NA==",
                                           "createdAt":  "2019-11-06T09:32:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "This makes sense but I\u0027m not sure it would be a derived class, couldn\u0027t it just be a type that forwards those ServiceBase events?\r\n\r\n```C#\r\nHost.CreateDefaultBuilder(args)\r\n    .UseWindowsService\u003cCustomServiceHandler\u003e()\r\n```\r\n\r\nOR\r\n\r\n```C#\r\nHost.CreateDefaultBuilder(args)\r\n    .UseWindowsService(options =\u003e options.Events = new CustomServiceHandler());\r\n```",
                                           "updatedAt":  "2019-11-06T09:32:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1MDI1MjMyNg==",
                                           "createdAt":  "2019-11-06T10:40:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "artiomchi",
                                           "body":  "Hey David,\r\n\r\nYeah, it could be done this way too. I\u0027ve been playing with several ideas in my head, and settled on my implementation for the sake of simplicity, but it does have it\u0027s issues (like not calling `base.OnStart(args)` method will hang the service).\r\n\r\nAnother thought I had was extending the IHostApplicationLifetime to add extra events, at least the pause/resume ones, but it\u0027s set up using `CancellationToken`s, so that\u0027s not really an option, since they can be triggered multiple times. Plus they\u0027d only work with a windows service anyway.\r\n\r\nYour suggestion re: `CustomServiceHandler` is a good one, but it\u0027d most likely have to be the first implementation, since the handler might need access to other services to perform it\u0027s tasks, and should likely be injected by DI as a singleton. It could then handle standard service events for start/stop/pause/continue/shutdown/session events.\r\n\r\nShould I then change my PR to something like this instead, adding a `IWindowsServiceEventsHandler` interface?",
                                           "updatedAt":  "2019-11-06T10:40:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNTU1NjQ0MA==",
                                           "createdAt":  "2020-05-08T00:01:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "As part of the migration of components from dotnet/extensions to dotnet/runtime (https://github.com/aspnet/Announcements/issues/411) we will be bulk closing some of the older issues. If you are still interested in having this issue addressed, just comment and the issue will be automatically reactivated (even if you aren\u0027t the author). When you do that, I\u0027ll page the team to come take a look. If you\u0027ve moved on or workaround the issue and no longer need this change, just ignore this and the issue will be closed in **7 days**.\n\nIf you know that the issue affects a package that has moved to a different repo, please consider re-opening the issue in that repo. If you\u0027re unsure, that\u0027s OK, someone from the team can help!",
                                           "updatedAt":  "2020-05-08T00:01:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwMDQ2NTIyMg==",
                                           "createdAt":  "2021-03-16T17:32:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mguinness",
                                           "body":  "I see that PR https://github.com/dotnet/extensions/pull/2572 was closed as not adding value.  Was that because there isn\u0027t analogous behavior with Unix daemons?",
                                           "updatedAt":  "2021-03-16T17:32:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwMDQ2NTI3MA==",
                                           "createdAt":  "2021-03-16T17:32:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Paging @dotnet/extensions-migration ! This issue has been revived from staleness. Please take a look and route to the appropriate repository.",
                                           "updatedAt":  "2021-03-16T17:32:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNDM2NzI1NA==",
                                           "createdAt":  "2021-03-22T20:20:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eerhardt, @maryamariyan\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Is your feature request related to a problem? Please describe.\r\nCurrently there\u0027s a simple way to run a netcore3 app as a windows service using the `.UseWindowsService()` extension. The issue is that this extension uses it\u0027s own `ServiceBase` class, which is the only class that receives pause and continue events, shutdown events and custom service commands.\r\n\r\n### Describe the solution you\u0027d like\r\nAdd a second generic extension method that allows a custom class to be passed to `.UseWindowsService\u003c\u003e()`, which will be based on the existing `WindowsServiceLifetime`, retaining all functionality, but allowing extra customisation.\r\n\r\n### Describe alternatives you\u0027ve considered\r\nI\u0027ve thought of altering the `WindowsServiceLifetime` class to receive a `ICollection\u003cServiceBase\u003e` from DI, and register them alongside itself in the `ServiceBase.Run()` call, but that will mean the `ApplicationLifetime.ApplicationStarted` will be called only after the `WindowsServiceLifetime` service has started, not when all services have.\r\n\r\nAlso, it seems to make sense to only have one service registered, and move \"service\" functionality to hosted service classes instead.\r\n\r\n### Additional context\r\nI\u0027ve added an implementation to my fork, branched off `release/3.0`, since I wasn\u0027t sure which branch would be best to start the fix from: [feature/windows-service-custom-class](https://github.com/artiomchi/Extensions/tree/feature/windows-service-custom-class), with the fix being in this commit: [d9bafd6\r\n](https://github.com/artiomchi/Extensions/commit/d9bafd63027ba352af6839b0f0003a8e504eb519)\r\n\r\nIf you let me know whether I should do it from `master`, or any other branch, I can make a PR for this.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eartiomchi\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Hosting`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-03-22T20:20:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5N5A-e",
                                           "createdAt":  "2022-11-08T08:10:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RachelXGanon",
                                           "body":  "@artiomchi - I have the same issue. I need the OnSessionChange() which not exists in worker service.\r\nDid you find a solution?\r\nI\u0027m using .NET 5\r\nThank you",
                                           "updatedAt":  "2022-11-08T08:10:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5N7y9E",
                                           "createdAt":  "2022-11-08T16:50:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODmWZrg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maryamariyan",
                                                                               "createdAt":  "2022-11-08T22:18:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "RachelXGanon",
                                                                               "createdAt":  "2022-11-09T11:29:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "yasensimeonov",
                                                                               "createdAt":  "2024-06-20T08:35:55Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "I don\u0027t think we should duplicate all the APIs of `ServiceBase` in Windows Service Hosting\u0027s layer. It is straightforward to implement this yourself as illustrated above. Doing it that way, you have the full power of `ServiceBase` without needing to add additional APIs.\r\n\r\nSee also the conversation here: https://github.com/dotnet/runtime/issues/75276#issuecomment-1258446954\r\n\r\n@RachelXGanon - have you tried the approach outlined above? Derive a class from `WindowsServiceLifetime` and register it as the `IHostLifetime` service. That approach is also described at: https://github.com/dotnet/runtime/issues/75276#issuecomment-1242336776",
                                           "updatedAt":  "2022-11-08T16:50:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5N_9ZG",
                                           "createdAt":  "2022-11-09T11:29:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RachelXGanon",
                                           "body":  "@eerhardt  I appreciate your quick response.\r\nDoes it mean that in case that I need a service with the `ServiceBase` functionality, I can create custom service that derived from `ServiceBase`, in console app project?\r\nAnd I don\u0027t need the worker service template? \r\nThank you.",
                                           "updatedAt":  "2022-11-09T11:29:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5OBMLy",
                                           "createdAt":  "2022-11-09T15:28:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCvT4fA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "RachelXGanon",
                                                                               "createdAt":  "2022-11-09T16:23:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "@RachelXGanon - you can make either approach work. If you don\u0027t want/need the functionality that the \"worker service\" template brings you (DependencyInjection, Logging, Configuration, etc), you can just create a regular Windows Service using `ServiceBase` and a console app project.  (or a Windows Service (.NET Framework) project that you upgrade to .NET 6/7.)\r\n\r\nBut if you want the functionality the worker service brings, you can make your own class derived from `WindowsServiceLifetime` (which itself derives from `ServiceBase`) as described above and override `OnSessionChange()`.",
                                           "updatedAt":  "2022-11-09T15:28:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xxhVA",
                                           "createdAt":  "2024-01-24T19:46:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "A9G-Data-Droid",
                                           "body":  "On the topic of what this adds; I looked at the source for [WindowsServiceLifetime](https://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.Extensions.Hosting.WindowsServices/src/WindowsServiceLifetime.cs) and it doesn\u0027t implement `OnPause` at all. The windows service control does have a pause button. What happens when an admin presses pause in the service control dialogue? Nothing?",
                                           "updatedAt":  "2024-01-24T19:46:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xx087",
                                           "createdAt":  "2024-01-24T20:45:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODT-DLQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "A9G-Data-Droid",
                                                                               "createdAt":  "2024-01-24T20:46:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "@A9G-Data-Droid, because WindowsServiceLifetime does not set the ServiceBase.CanPauseAndContinue property, its value should remain false.  The service control UI should detect that and disable the pause button.",
                                           "updatedAt":  "2024-01-24T20:45:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6oZ9Ig",
                                           "createdAt":  "2025-04-23T19:58:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "snowkoan",
                                           "body":  "Doesn\u0027t this approach end up creating two WindowsServiceLifetime objects?\n\nHere is the proposed solution:\n\n```\nHost.CreateDefaultBuilder(args)\n    .UseWindowsService()\n    .ConfigureServices((hostContext, services) =\u003e\n    {\n        if (WindowsServiceHelpers.IsWindowsService())\n            services.AddSingleton\u003cIHostLifetime, CustomService\u003e();\n    })\n```\n\nBut UseWindowsService creates its own IHostLifetime:\n\n```\nUseWindowsService() {\n\u003csnip\u003e\n    services.AddSingleton\u003cIHostLifetime, WindowsServiceLifetime\u003e();\n\u003csnip\u003e\n}\n```\nIt doesn\u0027t make much sense to have *two* WindowsServiceLifetimes. I expect there will be races - which one will actually interact with SCM?\n\nI could work around it by not calling UseWindowsService. But... it seems a bit silly to copy/paste that code into my CustomService.\n\nUPDATE: I originally mentioned that I was seeing occasional SCM errors at shutdown. This is an unrelated thing, and it\u0027s a race I don\u0027t quite understand. I can work around it by disposing of the WindowsServiceLifetime at the end of my BackgroundService ExecuteAsync method",
                                           "updatedAt":  "2025-04-29T13:06:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6pJwBK",
                                           "createdAt":  "2025-04-29T08:20:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "\u003e Doesn\u0027t this approach end up creating two WindowsServiceLifetime objects?\n\nProbably not; if two singleton implementations of IHostLifetime have been registered in IServiceCollection, and IHostLifetime is requested from the IServiceProvider, then it chooses the one that was registered last; doesn\u0027t create an instance of the other one.\n\nIf something requests IEnumerable\\\u003cIHostLifetime\\\u003e from the IServiceProvider, then it gets both implementations.  It\u0027s unlikely that anything would request that, since normally there\u0027s only one IHostLifetime.  But if you are concerned, you can explicitly remove the existing IHostLifetime ServiceDescriptor from the IServiceCollection before adding yours.",
                                           "updatedAt":  "2025-04-29T08:20:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6pNRm-",
                                           "createdAt":  "2025-04-29T13:10:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "snowkoan",
                                           "body":  "Thanks, I appreciate the answer. This .NET stuff is another world.",
                                           "updatedAt":  "2025-04-29T13:10:28Z"
                                       }
                                   ],
                         "totalCount":  21
                     },
        "title":  "Windows service ServiceBase access for pause/continue support",
        "labels":  [
                       "area-Extensions-Hosting"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/50019",
        "createdAt":  "2020-01-06T22:20:32Z",
        "number":  50019,
        "author":  "davidmatson",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCZO50Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kmcclellan",
                                            "createdAt":  "2020-08-21T16:02:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vukovinski",
                                            "createdAt":  "2020-08-24T14:32:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "its-mash",
                                            "createdAt":  "2022-04-22T08:01:58Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2021-03-26T04:44:14Z",
        "body":  "### Describe the bug\r\nWhen using .UseWindowsService(), the windows service always reports success from startup, regardless of whether the host actually starts up successfully.\r\nA clear and concise description of what the bug is.\r\n\r\n### To Reproduce\r\n1. Use the code below.\r\n2. Start the service with net start.\r\n\r\n### Expected behavior\r\nNet start indicates the service failed to start.\r\n\r\n### Actual behavior\r\nNet start indicates the service started successfully.\r\n\r\n### Additional context\r\nNote that on some older versions of .NET Framework (pre 4.7.2 maybe), service startup exceptions aren\u0027t propagated correctly.\r\n\r\nProgram.cs:\r\n```c#\r\nusing Microsoft.Extensions.DependencyInjection;\r\nusing Microsoft.Extensions.Hosting;\r\nusing Microsoft.Extensions.Logging;\r\nusing System;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\n\r\nstatic class Program\r\n{\r\n    static void Main()\r\n    {\r\n        new HostBuilder()\r\n            .ConfigureLogging(l =\u003e l.AddConsole())\r\n            .ConfigureServices((s) =\u003e\r\n            {\r\n                s.AddHostedService\u003cTestService\u003e();\r\n            })\r\n            .UseWindowsService()\r\n            .Build()\r\n            .Run();\r\n    }\r\n}\r\n\r\nclass TestService : IHostedService\r\n{\r\n    readonly ILogger log;\r\n\r\n    public TestService(ILogger\u003cTestService\u003e log)\r\n    {\r\n        this.log = log;\r\n    }\r\n\r\n\r\n    public Task StartAsync(CancellationToken cancellationToken)\r\n    {\r\n        log.LogInformation(\"Starting...\");\r\n        throw new InvalidOperationException(\"Test when startup always fails.\");\r\n        //log.LogInformation(\"Started.\");\r\n        //return Task.CompletedTask;\r\n    }\r\n\r\n    public Task StopAsync(CancellationToken cancellationToken)\r\n    {\r\n        log.LogInformation(\"Stopping...\");\r\n        log.LogInformation(\"Stopped.\");\r\n        return Task.CompletedTask;\r\n    }\r\n}\r\n```\r\n\r\nTestHostBuilder.csproj:\r\n```c#\r\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\r\n\u003cProject ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"\u003e\r\n  \u003cImport Project=\"$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.props\" Condition=\"Exists(\u0027$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.props\u0027)\" /\u003e\r\n  \u003cPropertyGroup\u003e\r\n    \u003cConfiguration Condition=\" \u0027$(Configuration)\u0027 == \u0027\u0027 \"\u003eDebug\u003c/Configuration\u003e\r\n    \u003cPlatform Condition=\" \u0027$(Platform)\u0027 == \u0027\u0027 \"\u003eAnyCPU\u003c/Platform\u003e\r\n    \u003cProjectGuid\u003e{9463B6C5-BC95-43AA-968F-651084C85DAE}\u003c/ProjectGuid\u003e\r\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n    \u003cRootNamespace\u003eTestHostBuilder\u003c/RootNamespace\u003e\r\n    \u003cAssemblyName\u003eTestHostBuilder\u003c/AssemblyName\u003e\r\n    \u003cTargetFrameworkVersion\u003ev4.8\u003c/TargetFrameworkVersion\u003e\r\n    \u003cFileAlignment\u003e512\u003c/FileAlignment\u003e\r\n    \u003cAutoGenerateBindingRedirects\u003etrue\u003c/AutoGenerateBindingRedirects\u003e\r\n    \u003cDeterministic\u003etrue\u003c/Deterministic\u003e\r\n  \u003c/PropertyGroup\u003e\r\n  \u003cPropertyGroup Condition=\" \u0027$(Configuration)|$(Platform)\u0027 == \u0027Debug|AnyCPU\u0027 \"\u003e\r\n    \u003cPlatformTarget\u003eAnyCPU\u003c/PlatformTarget\u003e\r\n    \u003cDebugSymbols\u003etrue\u003c/DebugSymbols\u003e\r\n    \u003cDebugType\u003efull\u003c/DebugType\u003e\r\n    \u003cOptimize\u003efalse\u003c/Optimize\u003e\r\n    \u003cOutputPath\u003ebin\\Debug\\\u003c/OutputPath\u003e\r\n    \u003cDefineConstants\u003eDEBUG;TRACE\u003c/DefineConstants\u003e\r\n    \u003cErrorReport\u003eprompt\u003c/ErrorReport\u003e\r\n    \u003cWarningLevel\u003e4\u003c/WarningLevel\u003e\r\n  \u003c/PropertyGroup\u003e\r\n  \u003cPropertyGroup Condition=\" \u0027$(Configuration)|$(Platform)\u0027 == \u0027Release|AnyCPU\u0027 \"\u003e\r\n    \u003cPlatformTarget\u003eAnyCPU\u003c/PlatformTarget\u003e\r\n    \u003cDebugType\u003epdbonly\u003c/DebugType\u003e\r\n    \u003cOptimize\u003etrue\u003c/Optimize\u003e\r\n    \u003cOutputPath\u003ebin\\Release\\\u003c/OutputPath\u003e\r\n    \u003cDefineConstants\u003eTRACE\u003c/DefineConstants\u003e\r\n    \u003cErrorReport\u003eprompt\u003c/ErrorReport\u003e\r\n    \u003cWarningLevel\u003e4\u003c/WarningLevel\u003e\r\n  \u003c/PropertyGroup\u003e\r\n  \u003cItemGroup\u003e\r\n    \u003cReference Include=\"System\" /\u003e\r\n    \u003cReference Include=\"System.Core\" /\u003e\r\n    \u003cReference Include=\"System.Xml.Linq\" /\u003e\r\n    \u003cReference Include=\"System.Data.DataSetExtensions\" /\u003e\r\n    \u003cReference Include=\"Microsoft.CSharp\" /\u003e\r\n    \u003cReference Include=\"System.Data\" /\u003e\r\n    \u003cReference Include=\"System.Net.Http\" /\u003e\r\n    \u003cReference Include=\"System.Xml\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n  \u003cItemGroup\u003e\r\n    \u003cCompile Include=\"Program.cs\" /\u003e\r\n    \u003cCompile Include=\"Properties\\AssemblyInfo.cs\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n  \u003cItemGroup\u003e\r\n    \u003cNone Include=\"App.config\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n  \u003cItemGroup\u003e\r\n    \u003cPackageReference Include=\"Microsoft.Extensions.Hosting\"\u003e\r\n      \u003cVersion\u003e3.1.0\u003c/Version\u003e\r\n    \u003c/PackageReference\u003e\r\n    \u003cPackageReference Include=\"Microsoft.Extensions.Hosting.WindowsServices\"\u003e\r\n      \u003cVersion\u003e3.1.0\u003c/Version\u003e\r\n    \u003c/PackageReference\u003e\r\n  \u003c/ItemGroup\u003e\r\n  \u003cImport Project=\"$(MSBuildToolsPath)\\Microsoft.CSharp.targets\" /\u003e\r\n\u003c/Project\u003e```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOL_soIQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3MTM0MTgwMA==",
                                           "createdAt":  "2020-01-06T22:22:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidmatson",
                                           "body":  "The problematic line of code appears to be:\r\nhttps://github.com/aspnet/Extensions/blob/b83b27d76439497459fe9cf7337d5128c900eb5a/src/Hosting/WindowsServices/src/WindowsServiceLifetime.cs#L91\r\n\r\nThe actual service startup logic only unblocks the app from starting - it doesn\u0027t wait for the app to start and throw an exception if startup fails.\r\n\r\nIf the OnStart method awaited a task that does actual host/app startup, that would likely fix the problem. (It would also fix the problem that the Windows Service is reporting as started before it is fully started, which is another related bug that currently exists.)",
                                           "updatedAt":  "2020-01-06T22:22:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3MTg1MTM3Mw==",
                                           "createdAt":  "2020-01-08T01:31:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCZQOtw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MaxDZ8",
                                                                               "createdAt":  "2020-05-26T15:08:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "MaxDZ8",
                                                                               "createdAt":  "2020-05-27T15:55:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tulumbas",
                                                                               "createdAt":  "2020-07-25T21:37:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vukovinski",
                                                                               "createdAt":  "2020-08-24T14:32:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kjkrum",
                                                                               "createdAt":  "2020-12-06T20:52:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "joshua5822",
                                                                               "createdAt":  "2021-09-16T18:42:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "its-mash",
                                                                               "createdAt":  "2022-04-22T09:18:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "davidmatson",
                                           "body":  "I think .UseWindowsService() may just not be possible to do correctly - the Service class and IHostLifetime abstractions just don\u0027t match. Particularly, the Service class expects all startup logic to live inside OnStart, and for the program not to do anything that might throw before then.\r\n\r\nI tried ways to solve this bug as well as dotnet/runtime#50018. The only solution I found to both was not to use UseWindowsService at all. An IHostLifetime isn\u0027t told about exception starting up hosted services. The best it can do is know if the application has started via IHostApplicationLifetime, but it won\u0027t know when an exception in Internal\\Host.cs\u0027s startup means that method will never get called. I even tried using AppDomain.CurrentDomain.UnhandledException, but that doesn\u0027t work all the time (only works if the program doesn\u0027t handle exceptions), and doesn\u0027t allow the service to report startup failure, only to have it terminate abnormally.\r\n\r\nHere\u0027s what I ended up doing - use only WindowsServiceHelpers.IsWindowsService() and not .UseWindowsService(). Having all startup for a Windows services happen inside Service.OnStart is how that API is intended to work, and all these bugs go away when it\u0027s used that way.\r\n\r\n```c#\r\nusing Microsoft.Extensions.DependencyInjection;\r\nusing Microsoft.Extensions.Hosting;\r\nusing Microsoft.Extensions.Hosting.WindowsServices;\r\nusing Microsoft.Extensions.Logging;\r\nusing System;\r\nusing System.ServiceProcess;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\n\r\nclass Program\r\n{\r\n    public static int Main()\r\n    {\r\n        // See the following issues for more information:\r\n        // https://github.com/dotnet/extensions/issues/2831\r\n        // https://github.com/dotnet/extensions/issues/2835\r\n        // https://github.com/dotnet/extensions/issues/2836\r\n        if (WindowsServiceHelpers.IsWindowsService())\r\n        {\r\n            RunViaWindowsService();\r\n        }\r\n        else\r\n        {\r\n            try\r\n            {\r\n                RunViaConsole();\r\n            }\r\n            catch (Exception exception)\r\n            {\r\n                Console.Error.WriteLine(exception);\r\n                return exception.HResult;\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    static IHost CreateHost()\r\n    {\r\n        return new HostBuilder()\r\n            .ConfigureLogging(l =\u003e l.AddConsole())\r\n            .ConfigureServices((s) =\u003e\r\n            {\r\n                s.AddHostedService\u003cTestService\u003e();\r\n            })\r\n            .Build();\r\n    }\r\n\r\n    static void RunViaConsole()\r\n    {\r\n        CreateHost()\r\n            // This is a long-running process that only needs to be restarted if it crashes.\r\n            // Effectively, this call starts a thread polling a queue and invoking callbacks in the Functions class\r\n            // as-needed.\r\n            .Run();\r\n    }\r\n\r\n    static void RunViaWindowsService()\r\n    {\r\n        ServiceBase.Run(new WindowsService(CreateHost));\r\n    }\r\n\r\n    class WindowsService : ServiceBase\r\n    {\r\n        readonly Func\u003cIHost\u003e createHost;\r\n\r\n        IHost host;\r\n        bool disposed;\r\n\r\n        public WindowsService(Func\u003cIHost\u003e createHost)\r\n        {\r\n            if (createHost == null)\r\n            {\r\n                throw new ArgumentNullException(nameof(createHost));\r\n            }\r\n\r\n            this.createHost = createHost;\r\n        }\r\n\r\n        protected override void OnStart(string[] args)\r\n        {\r\n            host = CreateHost();\r\n            host.StartAsync().GetAwaiter().GetResult();\r\n            base.OnStart(args);\r\n        }\r\n\r\n        protected override void OnStop()\r\n        {\r\n            host.StopAsync().GetAwaiter().GetResult();\r\n            base.OnStop();\r\n        }\r\n\r\n        protected override void Dispose(bool disposing)\r\n        {\r\n            if (disposing \u0026\u0026 !disposed)\r\n            {\r\n                host.Dispose();\r\n                disposed = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    class TestService : IHostedService\r\n    {\r\n        readonly ILogger log;\r\n\r\n        public TestService(ILogger\u003cTestService\u003e log)\r\n        {\r\n            this.log = log;\r\n        }\r\n\r\n\r\n        public Task StartAsync(CancellationToken cancellationToken)\r\n        {\r\n            log.LogInformation(\"Starting...\");\r\n            throw new InvalidOperationException(\"Test when startup always fails.\");\r\n            //log.LogInformation(\"Started.\");\r\n            //return Task.CompletedTask;\r\n        }\r\n\r\n        public Task StopAsync(CancellationToken cancellationToken)\r\n        {\r\n            log.LogInformation(\"Stopping...\");\r\n            log.LogInformation(\"Stopped.\");\r\n            return Task.CompletedTask;\r\n        }\r\n    }\r\n}\r\n```",
                                           "updatedAt":  "2020-01-08T01:31:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3ODY1ODEzMw==",
                                           "createdAt":  "2020-08-22T16:01:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCZQOqA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CodeCasterNL",
                                                                               "createdAt":  "2021-05-28T19:33:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "its-mash",
                                                                               "createdAt":  "2022-04-22T09:18:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "kmcclellan",
                                           "body":  "Here\u0027s a workaround that still leverages the functionality of `UseWindowsService()` and `WindowsServiceLifetime`. Hoping this gets fixed at some point and I can remove this from my application!\r\n```c#\r\n    static class WindowsServiceAdapter\r\n    {\r\n        public static IHostBuilder UseWindowsService(this IHostBuilder builder)\r\n        {\r\n            WindowsServiceLifetimeHostBuilderExtensions.UseWindowsService(builder);\r\n\r\n            return builder.ConfigureServices(services =\u003e\r\n            {\r\n                var lifetime = services.FirstOrDefault(s =\u003e s.ImplementationType == typeof(WindowsServiceLifetime));\r\n                if (lifetime != null)\r\n                {\r\n                    services.Remove(lifetime);\r\n                    services.AddSingleton\u003cIHostLifetime, Lifetime\u003e();\r\n                }\r\n            });\r\n        }\r\n\r\n        private class Lifetime : WindowsServiceLifetime, IHostLifetime\r\n        {\r\n            private readonly CancellationTokenSource _starting = new CancellationTokenSource();\r\n            private readonly ManualResetEventSlim _started = new ManualResetEventSlim();\r\n            private readonly IHostApplicationLifetime _applicationLifetime;\r\n\r\n            public Lifetime(\r\n                IHostEnvironment environment,\r\n                IHostApplicationLifetime applicationLifetime,\r\n                ILoggerFactory loggerFactory,\r\n                IOptions\u003cHostOptions\u003e optionsAccessor)\r\n                : base(environment, applicationLifetime, loggerFactory, optionsAccessor)\r\n            {\r\n                _applicationLifetime = applicationLifetime;\r\n            }\r\n\r\n            public new async Task WaitForStartAsync(CancellationToken cancellationToken)\r\n            {\r\n                _applicationLifetime.ApplicationStarted.Register(() =\u003e _started.Set());\r\n\r\n                try\r\n                {\r\n                    using var cts = CancellationTokenSource.CreateLinkedTokenSource(_starting.Token, cancellationToken);\r\n                    await base.WaitForStartAsync(cts.Token);\r\n                }\r\n                catch (OperationCanceledException) when (_starting.IsCancellationRequested) { }\r\n            }\r\n\r\n            protected override void OnStart(string[] args)\r\n            {\r\n                _starting.Cancel();\r\n\r\n                // Make sure the application actually started successfully.\r\n                _started.Wait(_applicationLifetime.ApplicationStopping);\r\n                if (!_applicationLifetime.ApplicationStarted.IsCancellationRequested)\r\n                {\r\n                    throw new Exception(\"Failed to start host\");\r\n                }\r\n\r\n                base.OnStart(args);\r\n            }\r\n\r\n            protected override void Dispose(bool disposing)\r\n            {\r\n                if (disposing)\r\n                {\r\n                    _starting.Dispose();\r\n                    _started.Set();\r\n                }\r\n\r\n                base.Dispose(disposing);\r\n            }\r\n        }\r\n    }\r\n```",
                                           "updatedAt":  "2020-08-22T16:01:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNDI1MDQzOA==",
                                           "createdAt":  "2021-03-22T17:24:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-03-22T17:24:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNDk4ODk2MQ==",
                                           "createdAt":  "2021-03-23T15:17:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eerhardt, @maryamariyan\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Describe the bug\r\nWhen using .UseWindowsService(), the windows service always reports success from startup, regardless of whether the host actually starts up successfully.\r\nA clear and concise description of what the bug is.\r\n\r\n### To Reproduce\r\n1. Use the code below.\r\n2. Start the service with net start.\r\n\r\n### Expected behavior\r\nNet start indicates the service failed to start.\r\n\r\n### Actual behavior\r\nNet start indicates the service started successfully.\r\n\r\n### Additional context\r\nNote that on some older versions of .NET Framework (pre 4.7.2 maybe), service startup exceptions aren\u0027t propagated correctly.\r\n\r\nProgram.cs:\r\n```c#\r\nusing Microsoft.Extensions.DependencyInjection;\r\nusing Microsoft.Extensions.Hosting;\r\nusing Microsoft.Extensions.Logging;\r\nusing System;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\n\r\nstatic class Program\r\n{\r\n    static void Main()\r\n    {\r\n        new HostBuilder()\r\n            .ConfigureLogging(l =\u003e l.AddConsole())\r\n            .ConfigureServices((s) =\u003e\r\n            {\r\n                s.AddHostedService\u003cTestService\u003e();\r\n            })\r\n            .UseWindowsService()\r\n            .Build()\r\n            .Run();\r\n    }\r\n}\r\n\r\nclass TestService : IHostedService\r\n{\r\n    readonly ILogger log;\r\n\r\n    public TestService(ILogger\u003cTestService\u003e log)\r\n    {\r\n        this.log = log;\r\n    }\r\n\r\n\r\n    public Task StartAsync(CancellationToken cancellationToken)\r\n    {\r\n        log.LogInformation(\"Starting...\");\r\n        throw new InvalidOperationException(\"Test when startup always fails.\");\r\n        //log.LogInformation(\"Started.\");\r\n        //return Task.CompletedTask;\r\n    }\r\n\r\n    public Task StopAsync(CancellationToken cancellationToken)\r\n    {\r\n        log.LogInformation(\"Stopping...\");\r\n        log.LogInformation(\"Stopped.\");\r\n        return Task.CompletedTask;\r\n    }\r\n}\r\n```\r\n\r\nTestHostBuilder.csproj:\r\n```c#\r\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\r\n\u003cProject ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"\u003e\r\n  \u003cImport Project=\"$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.props\" Condition=\"Exists(\u0027$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.props\u0027)\" /\u003e\r\n  \u003cPropertyGroup\u003e\r\n    \u003cConfiguration Condition=\" \u0027$(Configuration)\u0027 == \u0027\u0027 \"\u003eDebug\u003c/Configuration\u003e\r\n    \u003cPlatform Condition=\" \u0027$(Platform)\u0027 == \u0027\u0027 \"\u003eAnyCPU\u003c/Platform\u003e\r\n    \u003cProjectGuid\u003e{9463B6C5-BC95-43AA-968F-651084C85DAE}\u003c/ProjectGuid\u003e\r\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n    \u003cRootNamespace\u003eTestHostBuilder\u003c/RootNamespace\u003e\r\n    \u003cAssemblyName\u003eTestHostBuilder\u003c/AssemblyName\u003e\r\n    \u003cTargetFrameworkVersion\u003ev4.8\u003c/TargetFrameworkVersion\u003e\r\n    \u003cFileAlignment\u003e512\u003c/FileAlignment\u003e\r\n    \u003cAutoGenerateBindingRedirects\u003etrue\u003c/AutoGenerateBindingRedirects\u003e\r\n    \u003cDeterministic\u003etrue\u003c/Deterministic\u003e\r\n  \u003c/PropertyGroup\u003e\r\n  \u003cPropertyGroup Condition=\" \u0027$(Configuration)|$(Platform)\u0027 == \u0027Debug|AnyCPU\u0027 \"\u003e\r\n    \u003cPlatformTarget\u003eAnyCPU\u003c/PlatformTarget\u003e\r\n    \u003cDebugSymbols\u003etrue\u003c/DebugSymbols\u003e\r\n    \u003cDebugType\u003efull\u003c/DebugType\u003e\r\n    \u003cOptimize\u003efalse\u003c/Optimize\u003e\r\n    \u003cOutputPath\u003ebin\\Debug\\\u003c/OutputPath\u003e\r\n    \u003cDefineConstants\u003eDEBUG;TRACE\u003c/DefineConstants\u003e\r\n    \u003cErrorReport\u003eprompt\u003c/ErrorReport\u003e\r\n    \u003cWarningLevel\u003e4\u003c/WarningLevel\u003e\r\n  \u003c/PropertyGroup\u003e\r\n  \u003cPropertyGroup Condition=\" \u0027$(Configuration)|$(Platform)\u0027 == \u0027Release|AnyCPU\u0027 \"\u003e\r\n    \u003cPlatformTarget\u003eAnyCPU\u003c/PlatformTarget\u003e\r\n    \u003cDebugType\u003epdbonly\u003c/DebugType\u003e\r\n    \u003cOptimize\u003etrue\u003c/Optimize\u003e\r\n    \u003cOutputPath\u003ebin\\Release\\\u003c/OutputPath\u003e\r\n    \u003cDefineConstants\u003eTRACE\u003c/DefineConstants\u003e\r\n    \u003cErrorReport\u003eprompt\u003c/ErrorReport\u003e\r\n    \u003cWarningLevel\u003e4\u003c/WarningLevel\u003e\r\n  \u003c/PropertyGroup\u003e\r\n  \u003cItemGroup\u003e\r\n    \u003cReference Include=\"System\" /\u003e\r\n    \u003cReference Include=\"System.Core\" /\u003e\r\n    \u003cReference Include=\"System.Xml.Linq\" /\u003e\r\n    \u003cReference Include=\"System.Data.DataSetExtensions\" /\u003e\r\n    \u003cReference Include=\"Microsoft.CSharp\" /\u003e\r\n    \u003cReference Include=\"System.Data\" /\u003e\r\n    \u003cReference Include=\"System.Net.Http\" /\u003e\r\n    \u003cReference Include=\"System.Xml\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n  \u003cItemGroup\u003e\r\n    \u003cCompile Include=\"Program.cs\" /\u003e\r\n    \u003cCompile Include=\"Properties\\AssemblyInfo.cs\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n  \u003cItemGroup\u003e\r\n    \u003cNone Include=\"App.config\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n  \u003cItemGroup\u003e\r\n    \u003cPackageReference Include=\"Microsoft.Extensions.Hosting\"\u003e\r\n      \u003cVersion\u003e3.1.0\u003c/Version\u003e\r\n    \u003c/PackageReference\u003e\r\n    \u003cPackageReference Include=\"Microsoft.Extensions.Hosting.WindowsServices\"\u003e\r\n      \u003cVersion\u003e3.1.0\u003c/Version\u003e\r\n    \u003c/PackageReference\u003e\r\n  \u003c/ItemGroup\u003e\r\n  \u003cImport Project=\"$(MSBuildToolsPath)\\Microsoft.CSharp.targets\" /\u003e\r\n\u003c/Project\u003e```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edavidmatson\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Hosting`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-03-23T15:17:28Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "UseWindowsService always reports successful service startup even when Host startup fails",
        "labels":  [
                       "area-Extensions-Hosting"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/50018",
        "createdAt":  "2020-01-07T20:31:35Z",
        "number":  50018,
        "author":  "davidmatson",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBFdcbQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "simongymer",
                                            "createdAt":  "2020-03-03T11:28:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MaxDZ8",
                                            "createdAt":  "2020-05-27T06:26:18Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2021-03-26T04:46:16Z",
        "body":  "### Describe the bug\r\nExceptions starting up the host aren\u0027t reported as Windows service startup failures.\r\n\r\n### To Reproduce\r\n1. Use the program below.\r\n2. Start the service.\r\n\r\n### Expected behavior\r\nNet start reports the service failed to start, and the startup exception is logged in event viewer.\r\n\r\n### Actual behavior\r\nNet start reports the service didn\u0027t respond to the control request in a timely fashion, and the startup exception is not logged in event viewer.\r\n\r\n### Additional context\r\nProgram.cs:\r\n```c#\r\nusing Microsoft.Extensions.Hosting;\r\nusing Microsoft.Extensions.Logging;\r\nusing System;\r\n\r\nstatic class Program\r\n{\r\n    static void Main()\r\n    {\r\n        new HostBuilder()\r\n            .ConfigureLogging(l =\u003e l.AddConsole())\r\n            .ConfigureServices((s) =\u003e\r\n            {\r\n                throw new InvalidOperationException(\"Configuring services failed for some reason.\");\r\n            })\r\n            .UseWindowsService()\r\n            .Build()\r\n            .Run();\r\n    }\r\n}\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOL_snAg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3MjI2NTkxNg==",
                                           "createdAt":  "2020-01-08T21:30:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "analogrelay",
                                           "body":  "Seems like we should take a look at this. Hopefully there\u0027s a hook we can catch here. If it happens during process main we may be a little stuck since the exception is happening before any of the logging can be set up.",
                                           "updatedAt":  "2020-01-08T21:30:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5MzkwNTIzMQ==",
                                           "createdAt":  "2020-03-03T11:30:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBUXSsA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jinek",
                                                                               "createdAt":  "2020-10-22T13:59:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "simongymer",
                                           "body":  "Just found this in a .NET core service I\u0027ve written where there was a simple mistake in a connection string inside the appsettings.json file. It was throwing an exception, I was catching it and trying to log an error, but it never got logged and nothing useful in the event log either, so took me a while to debug.",
                                           "updatedAt":  "2020-03-03T11:30:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxOTI1MzEzNw==",
                                           "createdAt":  "2020-04-24T21:48:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBUXS6w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jinek",
                                                                               "createdAt":  "2020-10-22T13:59:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "analogrelay",
                                           "body":  "\u003e Net start reports the service didn\u0027t respond to the control request in a timely fashion\r\n\r\nThis is probably due to https://github.com/dotnet/extensions/issues/2836 rather than the exception itself.\r\n\r\n\u003e the startup exception is not logged in event viewer.\r\n\r\nThis is trickier since we don\u0027t have any logging set up yet. I\u0027m surprised that the exception isn\u0027t going *anywhere*, since the runtime is supposed to write startup exceptions to the Application Event Log.\r\n\r\nTriage: We\u0027ll do a quick investigation after fixing dotnet/extensions#2836 and see if the event shows up somewhere now that we\u0027re properly exiting.",
                                           "updatedAt":  "2020-04-24T21:48:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNDI1MDM1OQ==",
                                           "createdAt":  "2021-03-22T17:24:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-03-22T17:24:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNDk4ODY3NA==",
                                           "createdAt":  "2021-03-23T15:17:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eerhardt, @maryamariyan\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Describe the bug\r\nExceptions starting up the host aren\u0027t reported as Windows service startup failures.\r\n\r\n### To Reproduce\r\n1. Use the program below.\r\n2. Start the service.\r\n\r\n### Expected behavior\r\nNet start reports the service failed to start, and the startup exception is logged in event viewer.\r\n\r\n### Actual behavior\r\nNet start reports the service didn\u0027t respond to the control request in a timely fashion, and the startup exception is not logged in event viewer.\r\n\r\n### Additional context\r\nProgram.cs:\r\n```c#\r\nusing Microsoft.Extensions.Hosting;\r\nusing Microsoft.Extensions.Logging;\r\nusing System;\r\n\r\nstatic class Program\r\n{\r\n    static void Main()\r\n    {\r\n        new HostBuilder()\r\n            .ConfigureLogging(l =\u003e l.AddConsole())\r\n            .ConfigureServices((s) =\u003e\r\n            {\r\n                throw new InvalidOperationException(\"Configuring services failed for some reason.\");\r\n            })\r\n            .UseWindowsService()\r\n            .Build()\r\n            .Run();\r\n    }\r\n}\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edavidmatson\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Hosting`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-03-23T15:17:10Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "With UseWindowsService, exceptions during configuration aren\u0027t reported as service startup exceptions",
        "labels":  [
                       "area-Extensions-Hosting"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/34090",
        "createdAt":  "2020-03-25T21:12:23Z",
        "number":  34090,
        "author":  "maryamariyan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-19T21:38:46Z",
        "body":  "This issue tracks enabling of FunctionalTests/TestApp on Hosting:\r\n\r\nhttps://github.com/dotnet/runtime/pull/33984#discussion_r396833842\r\n\r\nalso: https://github.com/dotnet/aspnetcore/issues/10268#issuecomment-603553288",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Enable FunctionalTests/TestApp on Extensions Hosting",
        "labels":  [
                       "disabled-test",
                       "area-Extensions-Hosting"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/35288",
        "createdAt":  "2020-04-22T16:21:53Z",
        "number":  35288,
        "author":  "bdovaz",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-08-04T14:53:33Z",
        "body":  "I\u0027m trying to implement Generic HostBuilder in our company\u0027s Unity code base.\r\n\r\nAs you know, Unity is a game engine that allows you to publish to multiple platforms.\r\n\r\nSo far I have tried several platforms like Windows, MacOS, Android and WebGL.\r\n\r\nDue to the particularities of each platform I have found several problems.\r\n\r\n1. PhysicalFileProvider cannot be used on WebGL for obvious reasons. That is, in WebGL you cannot access System.IO APIs. In the code there are several places that make checks of the type Directory.Exists().\r\n\r\nHere is an example where there is no way to set up another provider so that this assignment is not made:\r\n\r\nhttps://github.com/dotnet/runtime/blob/e3ffd343ad5bd3a999cb9515f59e6e7a777b2c34/src/libraries/Microsoft.Extensions.Hosting/src/HostBuilder.cs#L164\r\n\r\nThis code is in another project but it is also used by the Hosting project:\r\n\r\nhttps://github.com/dotnet/runtime/blob/e3ffd343ad5bd3a999cb9515f59e6e7a777b2c34/src/libraries/Microsoft.Extensions.Configuration.FileExtensions/src/FileConfigurationExtensions.cs#L73\r\n\r\n2. AppContext.BaseDirectory does not work on platforms such as Android or WebGL:\r\n\r\nThere should be a way to overwrite that check or do it differently so that you don\u0027t use AppContext:\r\n\r\nhttps://github.com/dotnet/runtime/blob/e3ffd343ad5bd3a999cb9515f59e6e7a777b2c34/src/libraries/Microsoft.Extensions.Hosting/src/HostBuilder.cs#L155",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOR9g4Ww==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxNzg4Mjc2Nw==",
                                           "createdAt":  "2020-04-22T16:21:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @ViktorHofer\nNotify danmosemsft if you want to be subscribed.",
                                           "updatedAt":  "2020-04-22T16:21:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NzYzMDA0Nw==",
                                           "createdAt":  "2020-06-22T16:27:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "This scenario hasn\u0027t been tried before, something to be considered for the next release. \r\n/cc: @davidfowl \r\n\r\n",
                                           "updatedAt":  "2020-06-22T16:27:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5G54Yo",
                                           "createdAt":  "2022-07-19T21:41:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "@bdovaz - are you still blocked by this on Unity? Interested in contributing a fix for it?",
                                           "updatedAt":  "2022-07-19T21:41:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5G54jJ",
                                           "createdAt":  "2022-07-19T21:42:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been marked `needs-author-action` and may be missing some important information.",
                                           "updatedAt":  "2022-07-19T21:42:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5G59_l",
                                           "createdAt":  "2022-07-19T22:10:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCngpGw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eerhardt",
                                                                               "createdAt":  "2022-07-19T22:13:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "HostBuilder is not a good fit for client apps like games.\r\n\r\nMAUI tried to use it but dropped it. The reasons are explained in https://github.com/dotnet/maui/issues/4393 . You may want to do the same.",
                                           "updatedAt":  "2022-07-19T22:10:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Hut7b",
                                           "createdAt":  "2022-08-03T03:02:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been automatically marked `no-recent-activity` because it has not had any activity for 14 days. It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will remove `no-recent-activity`.",
                                           "updatedAt":  "2022-08-03T03:02:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5H1pOH",
                                           "createdAt":  "2022-08-04T13:17:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bdovaz",
                                           "body":  "@eerhardt We have been using Microsoft.Extensions.* for years with Unity including Microsoft.Extensions.Hosting.... The \"only\" problems we have encountered:\r\n* Having to implement our own IHostLifetime specific to Unity.\r\n* Having to implement our own IHostEnvironment specific for Unity\r\n* Have to modify IHostBuilder SetFileProvider due to Unity (Android / WebGL) particularities.\r\n* Having to make a fork of the Internal/Host.cs class that by default does not work in WebGL (no threads) because of the ConfigureAwait(false)... Then replace it with services.Replace()\r\n\r\nThe worst is the last one because in every major version of Microsoft.Extensions.Hosting we have to revise that class and adapt it again.\r\n\r\nThe rest of the problems \"fixed themselves\" in some upgrade of Unity\u0027s Mono fork or using Unity\u0027s IL2CPP backend.",
                                           "updatedAt":  "2022-08-04T13:17:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5H16IF",
                                           "createdAt":  "2022-08-04T14:11:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "The first two seem reasonable - Unity is a completely different environment/platform. I would expect needing to implement a new lifetime for it. The IHostEnvironment is just a simple data holder, so I guess I don\u0027t fully understand why the built-in HostingEnvironment doesn\u0027t work.\r\n\r\nFor the SetFileProvider, we could add an option to the [HostApplicationBuilderSettings](https://github.com/dotnet/runtime/blob/6ee429c704e52c48cee7902f76df7b358f8c19ec/src/libraries/Microsoft.Extensions.Hosting/src/HostApplicationBuilderSettings.cs#L13) class to allow people to specify/customize the file provider being used. That seems like a straight forward fix.\r\n\r\nThe last one is a lot harder to fix though. It would be good to completely understand what doesn\u0027t work. You say \"no threads, because of the ConfigureAwait(false)\", but if that doesn\u0027t work, then what does work? We call ConfigureAwait(false) all over in dotnet/runtime.",
                                           "updatedAt":  "2022-08-04T14:11:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5H2Dhb",
                                           "createdAt":  "2022-08-04T14:40:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bdovaz",
                                           "body":  "About IHostEnvironment I have not explained well, I mean that I had to implement it by the ContentRootFileProvider property which is of type IFileProvider and I run into the same problem as in point 3. That is, in Android / WebGL you can not set a PhysicalFileProvider:\r\n* WebGL for obvious reasons, you can\u0027t access the physical file system.\r\n* Android, the same thing happens, you can\u0027t read the file system freely: https://docs.unity3d.com/Manual/StreamingAssets.htm\r\n\r\nAs it says in the documentation, depending on the platform, the Application.streamingAssetsPath directory can be read or not (Android / WebGL) with standard .NET APIs of System.IO as used by PhysicalFileProvider. In Android depending on what is set as ContentRootPath, it will work or not, for example, Application.persistentDataPath would work. On the other hand, in WebGL it is impossible for anything to work.\r\n\r\nThat is why it would be necessary to be able to completely override the implementation of IFileProvider and not have to be PhysicalFileProvider. So that in the case of WebGL override it by a dummy IFileProvider implementation that does nothing but at least does not fail.\r\n\r\nContext: \r\n\r\nhttps://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.Extensions.Hosting/src/HostBuilder.cs#L235\r\n\r\nhttps://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.Extensions.Hosting/src/HostBuilder.cs#L215\r\n\r\n**About the ConfigureAwait(false) problem:**\r\n\r\nThey solve it as \"By Design\" without even an explanation:\r\nhttps://issuetracker.unity3d.com/issues/webgl-task-awaited-with-task-dot-configureawait-false-does-not-continue-in-a-webgl-build\r\n\r\nThere is a very hacky patch that fixes in theory what Unity can\u0027t/wants:\r\n\r\nhttps://github.com/VolodymyrBS/WebGLThreadingPatcher\r\n\r\nAnd finally, there are libraries like this one that allow you to configure this behavior but in a very large codebase this is not feasible:\r\n\r\nhttps://github.com/IdentityModel/IdentityModel/blob/main/src/Internal/TaskHelpers.cs#L14\r\n\r\nhttps://github.com/IdentityModel/IdentityModel/pull/206\r\n\r\nIn the PR they talk about the issue marked \"By Design\" and everything I have posted in general.",
                                           "updatedAt":  "2022-08-04T14:53:33Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Generic HostBuilder problems using Unity on some platforms",
        "labels":  [
                       "area-Extensions-Hosting"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/38751",
        "createdAt":  "2020-07-03T11:58:19Z",
        "number":  38751,
        "author":  "rvanmaanen",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCwyTwg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "droosma",
                                            "createdAt":  "2020-07-03T12:17:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ReubenBond",
                                            "createdAt":  "2020-07-08T23:37:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pherbel",
                                            "createdAt":  "2020-09-15T12:13:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "chamook",
                                            "createdAt":  "2020-12-04T08:15:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "toralux",
                                            "createdAt":  "2020-12-10T21:49:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "liamkernighan",
                                            "createdAt":  "2020-12-16T21:17:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "chertpong",
                                            "createdAt":  "2020-12-17T08:48:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "HakamFostok",
                                            "createdAt":  "2020-12-26T14:42:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "greghoover",
                                            "createdAt":  "2021-01-31T04:52:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "akin-tekeoglu",
                                            "createdAt":  "2021-02-09T18:19:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "boi87",
                                            "createdAt":  "2021-02-16T17:51:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Speiser",
                                            "createdAt":  "2021-02-23T11:35:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nnaskov",
                                            "createdAt":  "2021-03-03T13:28:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GustavoAmerico",
                                            "createdAt":  "2021-04-01T20:54:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "marius-w-nilsen",
                                            "createdAt":  "2021-04-07T08:33:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "icistrate",
                                            "createdAt":  "2021-04-22T07:49:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "austindrenski",
                                            "createdAt":  "2021-04-28T18:26:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "WesleyBuck",
                                            "createdAt":  "2021-05-03T14:51:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ahdung",
                                            "createdAt":  "2021-05-14T05:34:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hughesjs",
                                            "createdAt":  "2021-06-16T17:13:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cfbao",
                                            "createdAt":  "2021-07-23T20:02:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "piekstra",
                                            "createdAt":  "2021-07-26T15:22:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aldriguz",
                                            "createdAt":  "2021-07-31T01:24:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NekkoDroid",
                                            "createdAt":  "2021-07-31T19:55:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "edelcastillo-globant",
                                            "createdAt":  "2021-08-01T14:37:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "stefangeorgievw",
                                            "createdAt":  "2021-08-03T12:23:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "edubsi",
                                            "createdAt":  "2021-10-15T17:58:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vansha",
                                            "createdAt":  "2021-11-05T17:10:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "quixoticaxis",
                                            "createdAt":  "2021-11-24T00:38:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "benmccallum",
                                            "createdAt":  "2021-12-03T16:00:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "billhong-just",
                                            "createdAt":  "2021-12-06T02:43:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "yusniel-aplaceformom",
                                            "createdAt":  "2021-12-27T06:37:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alan994",
                                            "createdAt":  "2022-01-12T19:39:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "zsojma",
                                            "createdAt":  "2022-03-09T11:55:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "br3nt",
                                            "createdAt":  "2022-04-27T07:33:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ArminShoeibi",
                                            "createdAt":  "2022-04-30T19:42:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "esond",
                                            "createdAt":  "2022-05-27T21:29:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "paulowirth",
                                            "createdAt":  "2022-06-17T00:26:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "blaskoa",
                                            "createdAt":  "2022-06-17T14:20:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Dynalon",
                                            "createdAt":  "2022-09-04T11:30:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Jontem",
                                            "createdAt":  "2022-09-05T06:23:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "computas-hal",
                                            "createdAt":  "2022-09-22T07:40:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "arthurvaverko-kaltura",
                                            "createdAt":  "2022-10-11T13:35:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ViacheslavRud",
                                            "createdAt":  "2022-10-30T21:42:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0xfeeddeadbeef",
                                            "createdAt":  "2022-11-26T16:31:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "chris-stillwell",
                                            "createdAt":  "2023-01-25T13:27:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MichaelDeutschCoding",
                                            "createdAt":  "2023-01-29T08:05:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "zdenan",
                                            "createdAt":  "2023-03-16T17:23:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kevinharing",
                                            "createdAt":  "2023-03-28T11:57:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SuricateCan",
                                            "createdAt":  "2023-06-19T19:21:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Lextokil",
                                            "createdAt":  "2023-07-11T14:49:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "shainegordon",
                                            "createdAt":  "2023-07-20T14:27:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "stephenhendry",
                                            "createdAt":  "2023-08-20T14:00:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SeanFeldman",
                                            "createdAt":  "2023-08-22T00:25:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mmercan",
                                            "createdAt":  "2023-10-12T04:09:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "findyourexit",
                                            "createdAt":  "2023-10-20T13:07:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "BoundedChenn31",
                                            "createdAt":  "2023-10-28T11:46:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "binoytv9",
                                            "createdAt":  "2023-11-04T15:43:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Proladge",
                                            "createdAt":  "2024-01-08T12:16:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Kahbazi",
                                            "createdAt":  "2024-04-06T11:20:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MPeli",
                                            "createdAt":  "2024-05-10T06:45:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vladimir-lu",
                                            "createdAt":  "2024-07-03T14:57:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dmytro-bardai",
                                            "createdAt":  "2024-10-17T16:50:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lars-lian",
                                            "createdAt":  "2024-11-25T09:42:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jesperkristensen",
                                            "createdAt":  "2025-01-25T11:48:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mlaily",
                                            "createdAt":  "2025-01-30T16:18:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rcollina",
                                            "createdAt":  "2025-03-01T19:41:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rtfleg",
                                            "createdAt":  "2025-04-27T20:18:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NilsLattek",
                                            "createdAt":  "2025-05-30T18:09:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "unzeitip",
                                            "createdAt":  "2025-06-10T14:13:06Z"
                                        }
                                    ],
                          "totalCount":  70
                      },
        "updatedAt":  "2025-07-26T10:39:07Z",
        "body":  "## Background and Motivation\r\n\r\nWe are using the factory method overload `public static IServiceCollection AddHostedService\u003cTHostedService\u003e(this IServiceCollection services, Func\u003cIServiceProvider, THostedService\u003e implementationFactory) where THostedService : class, IHostedService` to add multiple hosted services, but each with different configuration. Every hosted service is responsible for listening to a certain service bus topic. This didn\u0027t work and only the first hosted service was started. After diving into the code, we noticed that `public static void TryAddEnumerable(this IServiceCollection services, ServiceDescriptor descriptor)` is called and that method only adds if there is not already a Type / Implementation combination present.\r\n\r\nIt would be great if this behavior can be made more clear by renaming AddHostedService to for instance TryAddHostedService, or by being able to configure the way AddHostedService should behave.\r\n\r\n## Proposed API\r\n\r\n```diff\r\nnamespace Microsoft.Extensions.DependencyInjection\r\n{\r\n    public static class ServiceCollectionHostedServiceExtensions\r\n    {\r\n        public static IServiceCollection AddHostedService\u003cTHostedService\u003e(this IServiceCollection services)\r\n            where THostedService : class, IHostedService\r\n        {\r\n-           services.TryAddEnumerable(ServiceDescriptor.Singleton\u003cIHostedService, THostedService\u003e());\r\n+           services.Add(ServiceDescriptor.Singleton\u003cIHostedService, THostedService\u003e());\r\n\r\n            return services;\r\n        }\r\n\r\n        public static IServiceCollection AddHostedService\u003cTHostedService\u003e(this IServiceCollection services, Func\u003cIServiceProvider, THostedService\u003e implementationFactory)\r\n            where THostedService : class, IHostedService\r\n        {\r\n-           services.TryAddEnumerable(ServiceDescriptor.Singleton\u003cIHostedService\u003e(implementationFactory));\r\n+           services.Add(ServiceDescriptor.Singleton\u003cIHostedService\u003e(implementationFactory));\r\n\r\n            return services;\r\n        }\r\n+\r\n+       public static IServiceCollection TryAddHostedService\u003cTHostedService\u003e(this IServiceCollection services)\r\n+           where THostedService : class, IHostedService\r\n+       {\r\n+           services.TryAdd(ServiceDescriptor.Singleton\u003cIHostedService, THostedService\u003e());\r\n+\r\n+           return services;\r\n+       }\r\n+\r\n+       public static IServiceCollection TryAddHostedService\u003cTHostedService\u003e(this IServiceCollection services, Func\u003cIServiceProvider, THostedService\u003e implementationFactory)\r\n+           where THostedService : class, IHostedService\r\n+       {\r\n+           services.TryAdd(ServiceDescriptor.Singleton\u003cIHostedService\u003e(implementationFactory));\r\n+\r\n+           return services;\r\n+       }\r\n+   }\r\n+}\r\n```\r\n\r\n## Usage Examples\r\n\r\n```\r\nvar serviceBusSubscriptions = serviceBusConnections.Where(_ =\u003e true));\r\nforeach (var serviceBusSubscription in serviceBusSubscriptions)\r\n{\r\n  services.AddHostedService(sp =\u003e new MyHostedService(serviceBusSubscription));\r\n}\r\n```\r\n\r\n## Alternative Designs\r\n\r\nAdd an optional parameter to AddHostedService that configures the desired behavior?\r\n\r\n## Risks\r\n\r\nBehavior of the original AddHostedService method changes, which might lead to problems for some people.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOtbAnqA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NjIyMDE5OA==",
                                           "createdAt":  "2020-07-09T16:15:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEP21Lw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cainux",
                                                                               "createdAt":  "2020-11-24T23:36:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pcontrerasp",
                                                                               "createdAt":  "2021-01-04T18:21:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "pcontrerasp",
                                                                               "createdAt":  "2021-01-04T18:22:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "conficient",
                                                                               "createdAt":  "2021-01-07T15:30:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "greghoover",
                                                                               "createdAt":  "2021-01-31T04:52:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nik0lias",
                                                                               "createdAt":  "2021-02-02T11:30:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "akin-tekeoglu",
                                                                               "createdAt":  "2021-02-09T18:19:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wolf8196",
                                                                               "createdAt":  "2021-02-17T06:35:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Assam",
                                                                               "createdAt":  "2021-04-28T18:05:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "blueghostuk",
                                                                               "createdAt":  "2021-05-11T11:05:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gupta-kartik",
                                                                               "createdAt":  "2021-05-20T04:59:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "grzegorzcierpka",
                                                                               "createdAt":  "2021-06-09T07:53:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rjpnps",
                                                                               "createdAt":  "2021-07-01T15:40:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "rjpnps",
                                                                               "createdAt":  "2021-07-01T15:40:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vansha",
                                                                               "createdAt":  "2021-11-05T17:10:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "vansha",
                                                                               "createdAt":  "2021-11-05T17:10:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "benmccallum",
                                                                               "createdAt":  "2021-12-03T16:02:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "billhong-just",
                                                                               "createdAt":  "2021-12-06T02:19:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jerryk414",
                                                                               "createdAt":  "2022-05-02T19:38:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Dynalon",
                                                                               "createdAt":  "2022-09-04T11:22:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pete-wckdrzr",
                                                                               "createdAt":  "2022-10-18T09:44:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ViacheslavRud",
                                                                               "createdAt":  "2022-10-30T21:42:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "hfostok-plana",
                                                                               "createdAt":  "2022-11-30T07:26:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hfostok-plana",
                                                                               "createdAt":  "2022-11-30T07:26:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "halilkocaerkek",
                                                                               "createdAt":  "2022-12-14T07:48:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "MichaelDeutschCoding",
                                                                               "createdAt":  "2023-01-29T08:05:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "djj0809",
                                                                               "createdAt":  "2023-04-12T18:04:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "SuricateCan",
                                                                               "createdAt":  "2023-06-19T19:21:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SuricateCan",
                                                                               "createdAt":  "2023-06-19T19:22:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "kroozee",
                                                                               "createdAt":  "2023-08-15T17:04:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gusarov",
                                                                               "createdAt":  "2023-09-17T02:27:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "0xfeeddeadbeef",
                                                                               "createdAt":  "2023-11-06T03:20:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "guilhermeneves",
                                                                               "createdAt":  "2023-12-10T20:28:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jaredthirsk",
                                                                               "createdAt":  "2024-04-21T18:04:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jesperkristensen",
                                                                               "createdAt":  "2025-01-25T11:49:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "keith-hall-tg",
                                                                               "createdAt":  "2025-02-10T06:48:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "shokri-navid",
                                                                               "createdAt":  "2025-04-27T15:20:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  37
                                                         },
                                           "author":  "ReubenBond",
                                           "body":  "I ran into this bug today, so I hope we can fix it so that no one else has to debug it.\r\n\r\n`AddHostedService` called multiple times with different `implementationFactory` instances should result in multiple hosted services being added. In the end, I replaced `AddHostedService(factory)` with `AddSingleton\u003cIHostedService\u003e(factory)` and everything worked as expected.",
                                           "updatedAt":  "2020-07-09T16:15:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4NTY2MjUzOA==",
                                           "createdAt":  "2021-02-25T06:54:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEd61bg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "ahdung",
                                                                               "createdAt":  "2021-05-14T05:36:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "ctrmcubed",
                                                                               "createdAt":  "2021-05-26T07:29:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "naiduv",
                                                                               "createdAt":  "2021-05-29T13:21:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "rjpnps",
                                                                               "createdAt":  "2021-07-01T15:40:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "edelcastillo-globant",
                                                                               "createdAt":  "2021-08-01T14:39:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "madallday",
                                                                               "createdAt":  "2021-08-26T22:39:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "ben-page",
                                                                               "createdAt":  "2021-10-01T01:32:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "will-molloy",
                                                                               "createdAt":  "2021-11-30T00:38:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "drauch",
                                                                               "createdAt":  "2021-12-03T08:53:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "billhong-just",
                                                                               "createdAt":  "2021-12-06T02:43:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "sammyaxe",
                                                                               "createdAt":  "2021-12-10T19:39:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "jerryk414",
                                                                               "createdAt":  "2022-05-02T19:38:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "ronnieoverby",
                                                                               "createdAt":  "2022-05-27T13:49:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "paulowirth",
                                                                               "createdAt":  "2022-06-17T00:27:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "computas-hal",
                                                                               "createdAt":  "2022-09-22T07:40:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "arthurvaverko-kaltura",
                                                                               "createdAt":  "2022-10-11T13:35:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "ViacheslavRud",
                                                                               "createdAt":  "2022-10-30T21:42:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "hfostok-plana",
                                                                               "createdAt":  "2022-11-30T07:27:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "halilkocaerkek",
                                                                               "createdAt":  "2022-12-14T07:48:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "MichaelDeutschCoding",
                                                                               "createdAt":  "2023-01-29T08:00:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "Martin-Pucalka",
                                                                               "createdAt":  "2023-04-20T09:07:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "nullpainter",
                                                                               "createdAt":  "2023-04-24T06:41:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "qwertyuiope",
                                                                               "createdAt":  "2023-07-16T20:17:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "Gaspa79",
                                                                               "createdAt":  "2023-08-16T20:49:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "mmercan",
                                                                               "createdAt":  "2023-10-12T04:14:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "zharchimage",
                                                                               "createdAt":  "2023-11-02T23:25:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "0xfeeddeadbeef",
                                                                               "createdAt":  "2023-11-06T03:20:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "maXA1m",
                                                                               "createdAt":  "2024-09-03T13:51:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "dkrasnikov-caret",
                                                                               "createdAt":  "2024-10-11T13:37:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "perdub",
                                                                               "createdAt":  "2025-06-20T22:13:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "wendelicious",
                                                                               "createdAt":  "2025-08-12T01:19:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  31
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "It\u0027s not a bug, it\u0027s actually by design. We need a new overload as this will break code that relies on there being a single instance.",
                                           "updatedAt":  "2021-02-25T06:54:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyODY2ODg1OA==",
                                           "createdAt":  "2021-04-28T18:09:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Assam",
                                           "body":  "So is it ok to call `AddSingleton\u003cIHostedService\u003e(factory)` for registering multiple instances of the same background service?  Also was there a good reason to make `AddHostedService(factory)` single instance?",
                                           "updatedAt":  "2021-04-28T18:09:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MTA0NTcxNg==",
                                           "createdAt":  "2021-05-14T06:40:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I think the proposal above is good, but I\u0027m not sure how to manage the breaking change. Maybe we can bite the bullet and make the change in .NET 6? It\u0027ll potentially break libraries that are compiled against older versions (as it would add duplicates now) and it would force them to update their dependency to the 6.0.0 version of hosting to use the new API.",
                                           "updatedAt":  "2021-05-14T06:53:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2MjU1NDg4Nw==",
                                           "createdAt":  "2021-06-16T17:05:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCwamlQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "oesebus",
                                                                               "createdAt":  "2022-08-13T18:21:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hfostok-plana",
                                                                               "createdAt":  "2022-11-30T07:29:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "hughesjs",
                                           "body":  "Wouldn\u0027t the simplest option to be to add a boolean parameter as an overload that indicates whether or not we\u0027re creating multiple instances? That then wouldn\u0027t break anything (at least I don\u0027t think it should)\r\n",
                                           "updatedAt":  "2021-06-16T17:05:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2MjU3NzMyMA==",
                                           "createdAt":  "2021-06-16T17:39:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODjRuAg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MichaelDeutschCoding",
                                                                               "createdAt":  "2023-01-29T08:01:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "cicorias",
                                                                               "createdAt":  "2024-02-27T22:21:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jaredthirsk",
                                                                               "createdAt":  "2024-04-21T18:05:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "Drabenstein",
                                                                               "createdAt":  "2024-05-26T16:21:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Yea, but that\u0027s pretty ugly. I\u0027m not sure I can stomach the inconsistency...",
                                           "updatedAt":  "2021-06-16T17:39:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2Nzk3NDg5MQ==",
                                           "createdAt":  "2021-06-24T21:51:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sashafencyk",
                                           "body":  "Was looking for the same solution as @rvanmaanen . I agree with @davidfowl that adding a parameter to control the behavior is not really consistent, I would rather add a method that declares such behavior. But I am also okay to use AddSingelton\u003cIHostedService\u003e(factory)",
                                           "updatedAt":  "2021-06-24T21:51:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40nFJr",
                                           "createdAt":  "2021-07-19T15:52:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "It\u0027s now too late for a breaking change in 6, moving to 7.",
                                           "updatedAt":  "2021-07-19T15:52:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49brE4",
                                           "createdAt":  "2022-02-05T17:26:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODAu3ww==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ReubenBond",
                                                                               "createdAt":  "2022-02-05T17:30:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mihael74",
                                                                               "createdAt":  "2022-02-06T09:15:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rafikiassumani-msft",
                                                                               "createdAt":  "2022-02-07T22:07:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alexjoybc",
                                                                               "createdAt":  "2022-02-20T15:34:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "simonvane",
                                                                               "createdAt":  "2022-04-04T09:55:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "br3nt",
                                                                               "createdAt":  "2022-04-27T07:32:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ArminShoeibi",
                                                                               "createdAt":  "2022-04-30T19:41:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jerryk414",
                                                                               "createdAt":  "2022-05-02T19:38:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ronnieoverby",
                                                                               "createdAt":  "2022-05-27T13:49:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MichaelDeutschCoding",
                                                                               "createdAt":  "2023-01-29T08:02:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "HardBlock729",
                                                                               "createdAt":  "2023-07-14T16:39:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  11
                                                         },
                                           "author":  "bradygaster",
                                           "body":  "I ran into a scenario today in which this would be valuable, would like to see about getting this prioritized for 7. Agreed with @ReubenBond. cc @rafikiassumani-msft - i think this would be valuable to the background worker side of the cloud native theme - mind if we consider this? ",
                                           "updatedAt":  "2022-02-05T17:26:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5D7YGT",
                                           "createdAt":  "2022-05-27T13:50:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODu_JNg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "MichaelDeutschCoding",
                                                                               "createdAt":  "2023-01-29T08:02:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "cicorias",
                                                                               "createdAt":  "2024-02-27T22:20:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "lwestfall",
                                                                               "createdAt":  "2024-08-20T22:39:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "ronnieoverby",
                                           "body":  "It\u0027s by design that subsequent calls to `.AddHostedService(…)` would just silently do nothing? 🙄",
                                           "updatedAt":  "2022-05-27T13:50:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5D89K0",
                                           "createdAt":  "2022-05-27T21:28:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEMJVgA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "bradygaster",
                                                                               "createdAt":  "2022-05-27T21:35:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "fauresco",
                                                                               "createdAt":  "2022-07-12T20:46:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Kkamikadzee",
                                                                               "createdAt":  "2022-12-27T12:49:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "waqassiddiqi",
                                                                               "createdAt":  "2023-09-26T03:47:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "MonocleKelso",
                                                                               "createdAt":  "2024-02-22T14:34:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "ronnieoverby",
                                                                               "createdAt":  "2024-07-26T13:41:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "DeivyCode",
                                                                               "createdAt":  "2025-03-30T18:53:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "esond",
                                           "body":  "I arrived at this issue when trying to fill a desire similar to the one @bradygaster mentioned. I have a background worker (very similar to the one outlined in [this doc](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/hosted-services?view=aspnetcore-6.0\u0026tabs=visual-studio#queued-background-tasks)), and I would like to have two or more processor services running at the same time, to pull tasks off a queue in parallel.\r\n\r\nConsider this my \"+1\" on this feature request.",
                                           "updatedAt":  "2022-05-27T21:31:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5D8-W_",
                                           "createdAt":  "2022-05-27T21:37:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bradygaster",
                                           "body":  "\u003e It\u0027s now too late for a breaking change in 6, moving to 7.\r\n\r\nplz?",
                                           "updatedAt":  "2022-05-27T21:37:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5D8_ik",
                                           "createdAt":  "2022-05-27T21:48:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEJlw8Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maryamariyan",
                                                                               "createdAt":  "2022-06-01T21:32:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rmed1na",
                                                                               "createdAt":  "2022-11-24T04:01:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Kkamikadzee",
                                                                               "createdAt":  "2022-12-27T12:51:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "chris-stillwell",
                                                                               "createdAt":  "2023-01-25T13:28:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wpknox",
                                                                               "createdAt":  "2023-03-01T22:05:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ghosttie",
                                                                               "createdAt":  "2023-08-24T21:42:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "whc2001",
                                                                               "createdAt":  "2023-09-11T09:05:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "0xfeeddeadbeef",
                                                                               "createdAt":  "2023-11-06T03:21:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Sonic198",
                                                                               "createdAt":  "2025-03-12T15:24:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  9
                                                         },
                                           "author":  "esond",
                                           "body":  "FWIW, for anyone in my position who just wants their background tasks worked on in parallel, in the time since my last comment I came up with this (as adjusted from [the reference doc](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/hosted-services?view=aspnetcore-6.0\u0026tabs=visual-studio#queued-background-tasks) I linked earlier):\r\n\r\n```csharp\r\npublic class QueuedHostedService : BackgroundService\r\n{\r\n    private readonly ILogger\u003cQueuedHostedService\u003e _logger;\r\n    private readonly IBackgroundTaskQueue _taskQueue;\r\n\r\n    private static readonly int WorkerCount = Environment.ProcessorCount; // Or any integer of your choice\r\n\r\n    public QueuedHostedService(IBackgroundTaskQueue taskQueue, ILogger\u003cQueuedHostedService\u003e logger)\r\n    {\r\n        _taskQueue = taskQueue;\r\n        _logger = logger;\r\n    }\r\n\r\n    protected override async Task ExecuteAsync(CancellationToken stoppingToken)\r\n    {\r\n        _logger.LogInformation(\"Queued Hosted Service is running\");\r\n\r\n        await BackgroundProcessing(stoppingToken);\r\n    }\r\n\r\n    private async Task BackgroundProcessing(CancellationToken stoppingToken)\r\n    {\r\n        while (!stoppingToken.IsCancellationRequested)\r\n        {\r\n            async Task DoWorkAsync(CancellationToken cancellationToken)\r\n            {\r\n                var workItem = await _taskQueue.DequeueAsync(cancellationToken);\r\n\r\n                await workItem(stoppingToken);\r\n            }\r\n\r\n            var jobs = Enumerable.Range(0, WorkerCount).Select(_ =\u003e DoWorkAsync(stoppingToken));\r\n\r\n            await Task.WhenAll(jobs);\r\n        }\r\n    }\r\n\r\n    public override async Task StopAsync(CancellationToken cancellationToken)\r\n    {\r\n        _logger.LogInformation(\"Queued Hosted Service is stopping\");\r\n\r\n        await base.StopAsync(cancellationToken);\r\n    }\r\n}\r\n```\r\n\r\nHopefully it doesn\u0027t blow up in my face!",
                                           "updatedAt":  "2022-05-27T21:49:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EMpWD",
                                           "createdAt":  "2022-06-01T21:40:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "\u003e It\u0027s not a bug, it\u0027s actually by design. We need a new overload as this will break code that relies on there being a single instance.\r\n\r\nBased on the above comments seems like this is by design and not a bug.\r\n \r\nHopefully the workaround in https://github.com/dotnet/runtime/issues/38751#issuecomment-1140062372 could also help out.\r\n\r\nWe did not commit to this for 7.0. Based on an offline chat with @bradygaster seems like it would be good to engage with the dotnet/orleans community to understand what cases they are running into and see if they have clear workarounds for them before we continue progress here. ",
                                           "updatedAt":  "2022-06-01T21:40:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EMqP5",
                                           "createdAt":  "2022-06-01T21:44:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bradygaster",
                                           "body":  "Agreed - if folks from Orleans are getting bitten by this please let us know, and if you try the workaround and it\u0027s not up to snuff, please also let us know. Thanks @maryamariyan and the team for your support. ",
                                           "updatedAt":  "2022-06-01T21:44:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FCvI0",
                                           "createdAt":  "2022-06-17T00:40:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "paulowirth",
                                           "body":  "\u003e I ran into this bug today, so I hope we can fix it so that no one else has to debug it.\r\n\u003e \r\n\u003e `AddHostedService` called multiple times with different `implementationFactory` instances should result in multiple hosted services being added. In the end, I replaced `AddHostedService(factory)` with `AddSingleton\u003cIHostedService\u003e(factory)` and everything worked as expected.\r\n\r\nHi, \r\n\r\nPlease, care to provide further details when using `AddSingleton\u003cIHostedService\u003e(factory)` alternative?\r\n\r\nI have a scenario where I am working with different schedule services using cron expressions, but I don\u0027t think it makes sense to create a class for each expression, say, CronScheduleServiceA, B ... n, and then register using the `AddHostedService`, since the class behavior is the same.\r\n\r\nKind regards.",
                                           "updatedAt":  "2022-06-17T00:40:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FCwg-",
                                           "createdAt":  "2022-06-17T00:49:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEKLTMg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mfindlater",
                                                                               "createdAt":  "2022-06-17T03:31:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "paulowirth",
                                                                               "createdAt":  "2022-06-17T17:16:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "atliuhui",
                                                                               "createdAt":  "2022-06-24T02:00:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ArquitetoMovel",
                                                                               "createdAt":  "2022-10-05T22:32:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "marklagendijk",
                                                                               "createdAt":  "2022-12-01T14:59:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "luk355",
                                                                               "createdAt":  "2022-12-06T15:47:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rezabay",
                                                                               "createdAt":  "2023-01-06T18:14:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "chris-stillwell",
                                                                               "createdAt":  "2023-01-25T13:29:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MichaelDeutschCoding",
                                                                               "createdAt":  "2023-01-29T08:03:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "qwertyuiope",
                                                                               "createdAt":  "2023-07-16T20:19:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "shainegordon",
                                                                               "createdAt":  "2023-07-20T14:28:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mmercan",
                                                                               "createdAt":  "2023-10-12T04:36:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "binoytv9",
                                                                               "createdAt":  "2023-11-05T04:44:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "asbaker",
                                                                               "createdAt":  "2023-11-09T17:27:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "RicoSuter",
                                                                               "createdAt":  "2024-04-11T12:21:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jakobjoergensen",
                                                                               "createdAt":  "2024-05-05T14:28:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "soniccyclone",
                                                                               "createdAt":  "2024-06-07T18:33:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "QuintinWillison",
                                                                               "createdAt":  "2025-03-17T13:26:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  18
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Alternative is to write this code:\r\n\r\n```C#\r\nservices.AddSingleton\u003cIHostedService, CronScheduleService\u003e();\r\nservices.AddSingleton\u003cIHostedService, CronScheduleService\u003e();\r\nservices.AddSingleton\u003cIHostedService, CronScheduleService\u003e();\r\n```",
                                           "updatedAt":  "2022-06-17T00:49:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FCxKY",
                                           "createdAt":  "2022-06-17T00:53:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "paulowirth",
                                           "body":  "\u003e Alternative is to write this code:\r\n\u003e \r\n\u003e ```cs\r\n\u003e services.AddSingleton\u003cIHostedService, CronScheduleService\u003e();\r\n\u003e services.AddSingleton\u003cIHostedService, CronScheduleService\u003e();\r\n\u003e services.AddSingleton\u003cIHostedService, CronScheduleService\u003e();\r\n\u003e ```\r\n\r\nThank you, will try this and report if it works as expected.",
                                           "updatedAt":  "2022-06-17T00:53:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FFj4I",
                                           "createdAt":  "2022-06-17T17:16:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "@paulowirth  This is an API design problem that is unrelated to the current issue. Maybe start a discussions thread instead?",
                                           "updatedAt":  "2022-06-17T17:16:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FFkHd",
                                           "createdAt":  "2022-06-17T17:17:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "paulowirth",
                                           "body":  "\u003e @paulowirth  This is an API design problem that is unrelated to the current issue. Maybe start a discussions thread instead?\n\nOf course David. I\u0027ve removed the original comment and just to report that the suggested code works as expected. Thank you. ",
                                           "updatedAt":  "2022-06-17T17:20:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NRNqq",
                                           "createdAt":  "2022-10-30T21:48:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODnOPEA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cicorias",
                                                                               "createdAt":  "2024-02-27T22:23:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nicktuckerequias",
                                                                               "createdAt":  "2024-06-26T09:24:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "ViacheslavRud",
                                           "body":  "I\u0027ve also faced this issue. It would be nice to simply call it as many times as I want. Because I have one worker class that may process similar data from different sources.\r\n+1 from me",
                                           "updatedAt":  "2022-10-30T21:48:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5V9qne",
                                           "createdAt":  "2023-02-23T18:20:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOED_ntQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "loraderon",
                                                                               "createdAt":  "2023-02-24T06:26:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mattiasnordqvist",
                                                                               "createdAt":  "2023-03-21T16:59:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SuricateCan",
                                                                               "createdAt":  "2023-06-19T19:27:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sergei-s-s-1",
                                                                               "createdAt":  "2023-06-21T21:41:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hakanderyal",
                                                                               "createdAt":  "2023-06-25T08:47:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tehsoul",
                                                                               "createdAt":  "2023-06-28T12:18:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "0xfeeddeadbeef",
                                                                               "createdAt":  "2023-11-06T03:22:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "RicoSuter",
                                                                               "createdAt":  "2024-04-11T12:20:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "goncalo-oliveira",
                                                                               "createdAt":  "2024-06-21T11:15:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jesperkristensen",
                                                                               "createdAt":  "2025-01-25T11:51:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  10
                                                         },
                                           "author":  "irontoby",
                                           "body":  "\u003e I think the proposal above is good, but I\u0027m not sure how to manage the breaking change. Maybe we can bite the bullet and make the change in .NET 6? It\u0027ll potentially break libraries that are compiled against older versions (as it would add duplicates now) and it would force them to update their dependency to the 6.0.0 version of hosting to use the new API.\r\n\r\n@davidfowl It\u0027s indeed unfortunate that this method didn\u0027t use the `Try` syntax for consistency with e.g. `services.AddSingleton\u003cT\u003e` vs. `services.TryAddSingleton\u003cT\u003e`.\r\n\r\nHow would you feel about replacing this method with `services.AddHosted\u003cT\u003e` and `services.TryAddHosted\u003cT\u003e`, then deprecating `services.AddHostedService\u003cT\u003e`? (I mean, we already know it\u0027s a service since it\u0027s being added to an `IServiceCollection` anyway).\r\n\r\nAt the very least it seems as though the current behavior should be documented. Would a PR be welcome to clarify?",
                                           "updatedAt":  "2023-02-23T18:20:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hOeEU",
                                           "createdAt":  "2023-07-11T17:06:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Lextokil",
                                           "body":  "This thread saved my life!\r\nUsing the @rvanmaanen extensions i solved my problem\r\n\r\nAnd an alternative to factorys i used this guy -\u003e `ActivatorUtilities.CreateInstance\u003cT\u003e`\r\n\r\nActivatorUtilities will create an instance of MyConsumerWithParameter calling its constructor with any dependencies resolved through the IServiceProvider and custom parameters. \r\nThis is not only useful for selecting what constructor should be used. It also allows us to pass in explicit arguments that could or should otherwise not be resolved through dependency injection.\r\n\r\n` MyParameters.ForEach(parameter =\u003e  services.AddHostedService(provider =\u003e ActivatorUtilities.CreateInstance\u003cMyConsumerWithParameter\u003e(provider, parameter)));`",
                                           "updatedAt":  "2023-07-11T17:06:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5pReEI",
                                           "createdAt":  "2023-10-17T11:05:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "klinki",
                                           "body":  "Any news on this? I just encountered this issue too and was quite surprised by it.\r\n\r\nLuckily workaround provided by @davidfowl works. ",
                                           "updatedAt":  "2023-10-17T11:05:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qqsp8",
                                           "createdAt":  "2023-11-01T19:51:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOED_n3Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "RicoSuter",
                                                                               "createdAt":  "2024-04-11T12:21:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "danielloganking",
                                                                               "createdAt":  "2024-07-17T15:42:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dkrasnikov-caret",
                                                                               "createdAt":  "2024-10-11T13:47:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CRidge",
                                                                               "createdAt":  "2024-11-21T11:54:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jesperkristensen",
                                                                               "createdAt":  "2025-01-25T11:52:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Changing the existing semantics will be too breaking. The suggestion from https://github.com/dotnet/runtime/issues/38751#issuecomment-1442228702 I think is doable:\r\n\r\nInstead, we could:\r\n- Obsolete the existing `AddHostedService\u003cT\u003e`\r\n- Add `TryAddHosted\u003cT\u003e` that has the same semantics as `AddHostedService\u003cT\u003e` (enumerable).\r\n- Add `AddHosted\u003cT\u003e` that has the same semantics as `AddSingleton`\r\n- Update the doc to make this clear.",
                                           "updatedAt":  "2023-11-01T19:51:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc51SrSz",
                                           "createdAt":  "2024-02-27T22:51:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEZcMcA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jakobjoergensen",
                                                                               "createdAt":  "2024-05-05T14:28:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JeffDennyWellSky",
                                                                               "createdAt":  "2024-07-09T14:34:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pranair",
                                                                               "createdAt":  "2024-08-22T09:11:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "VaclavK",
                                                                               "createdAt":  "2024-10-09T09:29:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TormodKvLede",
                                                                               "createdAt":  "2024-11-28T08:31:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pipka76",
                                                                               "createdAt":  "2024-12-18T10:31:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aboccag",
                                                                               "createdAt":  "2025-01-13T10:47:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SubjectiveReality",
                                                                               "createdAt":  "2025-02-07T21:05:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rcollina",
                                                                               "createdAt":  "2025-03-01T19:42:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wilchn",
                                                                               "createdAt":  "2025-03-11T14:31:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "qfyra",
                                                                               "createdAt":  "2025-05-20T15:06:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "johnW-ret",
                                                                               "createdAt":  "2025-06-20T16:11:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jonathan-vogel-siemens",
                                                                               "createdAt":  "2025-06-26T16:13:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "0xfeeddeadbeef",
                                                                               "createdAt":  "2025-07-05T11:02:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  14
                                                         },
                                           "author":  "cicorias",
                                           "body":  "for those like me that desire the `AddHostedService`  permit multiple instances of the same type perhaps with different config params, this is the method via `AddSingleton` that works for me.\r\n\r\n```csharp\r\nbuilder.Services.AddSingleton\u003cIHostedService, Worker\u003e(provider =\u003e\r\n{\r\n    return new Worker(\"0\");\r\n});\r\n\r\nbuilder.Services.AddSingleton\u003cIHostedService, Worker\u003e(provider =\u003e\r\n{\r\n    return new Worker(\"2\");\r\n});\r\n```\r\n# and if passing in other DI things...\r\n\r\n```csharp\r\n  builder.Services.AddSingleton\u003cIHostedService, Worker\u003e(provider =\u003e\r\n  {\r\n      return new Worker(\"0\", provider.GetRequiredService\u003cILogger\u003cWorker\u003e\u003e());\r\n  });\r\n\r\n  builder.Services.AddSingleton\u003cIHostedService, Worker\u003e(provider =\u003e\r\n  {\r\n      return new Worker(\"1\", provider.GetRequiredService\u003cILogger\u003cWorker\u003e\u003e());\r\n  });\r\n```",
                                           "updatedAt":  "2024-02-27T22:57:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc61HAls",
                                           "createdAt":  "2025-07-05T08:36:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEZpxdQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "chrisoverzero",
                                                                               "createdAt":  "2025-07-05T18:49:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nuriEmmi-qs",
                                                                               "createdAt":  "2025-07-07T19:39:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "ltbyun",
                                           "body":  "five years later, still in milestone",
                                           "updatedAt":  "2025-07-05T08:36:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc61k1Ji",
                                           "createdAt":  "2025-07-07T19:43:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nuriEmmi-qs",
                                           "body":  "As @cicorias  samples are working for me also.\n\n```\nfor (int i = 1; i \u003c 6; i++) {\n                    int queueId = i;\n                    services.AddSingleton\u003cIHostedService, LimitOrderQueueConsumer\u003e(sp =\u003e {\n                        var queues = sp.GetRequiredService\u003cDictionary\u003cint, ILimitOrderQueue\u003e\u003e();\n                        return new LimitOrderQueueConsumer(queues[queueId], queueId);\n                    });\n                }\n\n//hack: Assigning to queueId prevents the loop variable from being incorrectly captured by the closure and ensures that each service gets the correct queue ID.\n```",
                                           "updatedAt":  "2025-07-07T19:44:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc61sCeo",
                                           "createdAt":  "2025-07-08T10:05:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nuriEmmi-qs",
                                           "body":  "CompositeHostedService is working for me.\n\n```\npublic class CompositeHostedService : IHostedService {\n    private readonly IEnumerable\u003cIHostedService\u003e _services;\n\n    public CompositeHostedService(IEnumerable\u003cIHostedService\u003e services)\n        =\u003e _services = services;\n\n    public async Task StartAsync(CancellationToken ct)\n        =\u003e await Task.WhenAll(_services.Select(s =\u003e s.StartAsync(ct)));\n\n    public async Task StopAsync(CancellationToken ct)\n        =\u003e await Task.WhenAll(_services.Select(s =\u003e s.StopAsync(ct)));\n}\n\n//register as singleton\nservices.AddSingleton\u003cIHostedService\u003e\n```",
                                           "updatedAt":  "2025-07-08T10:05:23Z"
                                       }
                                   ],
                         "totalCount":  29
                     },
        "title":  "Calling AddHostedService multiple times for same class only registers the first hosted service provided",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Hosting"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/50014",
        "createdAt":  "2020-09-25T02:41:52Z",
        "number":  50014,
        "author":  "GZidar",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-08-10T20:09:03Z",
        "body":  "Has there been any consideration given to allowing the net core worker services to receive notifications from the OS when a device is put to sleep or resumes from sleep. This is available in the .net framework System.ServiceProcess.ServiceBase classes but does not appear to have an equivalent in the worker service implementations.\r\n\r\nIs there any way to do this already?\r\n\r\n### Describe the solution you\u0027d like\r\nThe way this is done in the System.ServiceProcess.ServiceBase seems like a reasonable approach. Service hooks into OS level events that allow the developer to customize how their service reacts to the various messages.\r\n\r\n### Additional context\r\nIdeally this would be available on all platforms but if that is not possible then perhaps it should be accessed via the WindowsServiceLifetime hooks (or something)\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONWw6mw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5ODcyNDg4NQ==",
                                           "createdAt":  "2020-09-25T05:17:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eerhardt, @maryamariyan\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-09-25T05:17:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNTM0ODM5NQ==",
                                           "createdAt":  "2020-10-08T05:58:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "It might be better to give people a way to get the raw events from service base somehow",
                                           "updatedAt":  "2020-10-08T05:58:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNDI1MTM5NA==",
                                           "createdAt":  "2021-03-22T17:26:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "What are \"worker services\" in this context?",
                                           "updatedAt":  "2021-03-22T17:26:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNDI4MTE3Nw==",
                                           "createdAt":  "2021-03-22T18:08:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "\u003e What are \"worker services\" in this context?\r\n\r\n![image](https://user-images.githubusercontent.com/95136/112037417-f1eb7b80-8afe-11eb-8716-76c93acf6457.png)\r\n\r\nIt\u0027s a console app hooked up to Microsoft.Extensions.Hosting.",
                                           "updatedAt":  "2021-03-22T18:08:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41a-pY",
                                           "createdAt":  "2021-08-10T19:38:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eerhardt, @maryamariyan\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nHas there been any consideration given to allowing the net core worker services to receive notifications from the OS when a device is put to sleep or resumes from sleep. This is available in the .net framework System.ServiceProcess.ServiceBase classes but does not appear to have an equivalent in the worker service implementations.\r\n\r\nIs there any way to do this already?\r\n\r\n### Describe the solution you\u0027d like\r\nThe way this is done in the System.ServiceProcess.ServiceBase seems like a reasonable approach. Service hooks into OS level events that allow the developer to customize how their service reacts to the various messages.\r\n\r\n### Additional context\r\nIdeally this would be available on all platforms but if that is not possible then perhaps it should be accessed via the WindowsServiceLifetime hooks (or something)\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eGZidar\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.ServiceProcess`, `untriaged`, `area-Extensions-Hosting`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-08-10T19:38:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41bDqb",
                                           "createdAt":  "2021-08-10T20:09:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@GZidar perhaps you\u0027d like to offer an API proposal in this issue similar to this template. You can edit the top post. https://github.com/dotnet/runtime/issues/new?assignees=\u0026labels=api-suggestion\u0026template=02_api_proposal.yml\u0026title=%5BAPI+Proposal%5D%3A+",
                                           "updatedAt":  "2021-08-10T20:09:02Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Include support for OnPowerEvent in .net core worker services",
        "labels":  [
                       "feature-request",
                       "area-Extensions-Hosting"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/44470",
        "createdAt":  "2020-11-10T17:36:57Z",
        "number":  44470,
        "author":  "sedvardsen",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-10-09T02:48:04Z",
        "body":  "\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\nWe use a BackgroundService triggered by Windows Task Scheduler hosted in (due to required legacy libraries) .NET 4.8. We need to flush the application log on shutdown (when the application is stopped on purpose or due to a fault). This seem to work as expected on .NET Core (3.1), but not on .NET 4.8.\r\n\r\nGiven the code\r\n```csharp\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var host = CreateHostBuilder(args).Build();\r\n\r\n            var lifeTime = host.Services.GetService\u003cIHostApplicationLifetime\u003e();\r\n\r\n            lifeTime.ApplicationStopped.Register(ApplicationStopped);\r\n            lifeTime.ApplicationStopping.Register(ApplicationStopping);\r\n            lifeTime.ApplicationStarted.Register(ApplicationStart);\r\n\r\n            host.Run();\r\n        }\r\n        private static void ApplicationStopping()\r\n        {\r\n            Console.WriteLine(\"STOPPING\");\r\n            File.WriteAllText($\"{DateTime.Now:yyyy-dd-M-HH-mm-ss}-STOPPING\", \"ApplicationStopping was called\");\r\n        }\r\n\r\n        private static void ApplicationStopped()\r\n        {\r\n            Console.WriteLine(\"STOP\");\r\n            File.WriteAllText($\"{DateTime.Now:yyyy-dd-M-HH-mm-ss}-STOP\", \"ApplicationStopped was called\");\r\n        }\r\n\r\n        private static void ApplicationStart()\r\n        {\r\n            Console.WriteLine(\"START\");\r\n            File.WriteAllText($\"{DateTime.Now:yyyy-dd-M-HH-mm-ss}-START\", \"ApplicationStart was called\");\r\n        }\r\n\r\n\r\n        static IHostBuilder CreateHostBuilder(string[] args) =\u003e\r\n          Host.CreateDefaultBuilder(args)\r\n              .ConfigureServices((hostContext, services) =\u003e\r\n              {\r\n                  services.AddHostedService\u003cService\u003e();\r\n              });\r\n    }\r\n\r\n    public class Service : BackgroundService\r\n    {\r\n        protected override async Task ExecuteAsync(CancellationToken stoppingToken)\r\n        {\r\n            while (!stoppingToken.IsCancellationRequested)\r\n            {\r\n                Console.WriteLine(\"Ping\");\r\n                await Task.Delay(10000, stoppingToken);\r\n            }\r\n        }\r\n    }\r\n\r\n```\r\n\r\nWhen stopped by CTRL-C in console window this produces three files, one for each of the events, on both .NET Core and .NET 4.8. \r\n\r\nWhen stopped via Task Scheduler-\"End\", only the .NET Core hosting produces the three files. When hosted in .NET 4.8, only the file from ApplicationStart() is produced. This is an issue for us as the logs are not flushed and therefore are lost.\r\n\r\nRepo with samples can be found at https://github.com/sedvardsen/GenericHostSample\r\nBuilt with .NET Core 3.1 and .NET 4.8, both run with default Debug/Any CPU\r\nTested on Windows 10 Enterprise\r\n\r\nMicrosoft.Extensions.Hosting version 5.0.0 (but also reproduced on 3.1.8)\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKzWfvQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyNDkzNDU4OQ==",
                                           "createdAt":  "2020-11-10T20:01:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eerhardt, @maryamariyan\nSee info in area-owners.md if you want to be subscribed.\u003cdetails\u003e\n  \u003chr\u003e\n  \u003cb\u003eIssue meta data\u003c/b\u003e\n  \u003ctable\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eIssue content:\u003c/td\u003e\n    \u003ctd\u003e\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\nWe use a BackgroundService triggered by Windows Task Scheduler hosted in (due to required legacy libraries) .NET 4.8. We need to flush the application log on shutdown (when the application is stopped on purpose or due to a fault). This seem to work as expected on .NET Core (3.1), but not on .NET 4.8.\r\n\r\nGiven the code\r\n```csharp\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var host = CreateHostBuilder(args).Build();\r\n\r\n            var lifeTime = host.Services.GetService\u003cIHostApplicationLifetime\u003e();\r\n\r\n            lifeTime.ApplicationStopped.Register(ApplicationStopped);\r\n            lifeTime.ApplicationStopping.Register(ApplicationStopping);\r\n            lifeTime.ApplicationStarted.Register(ApplicationStart);\r\n\r\n            host.Run();\r\n        }\r\n        private static void ApplicationStopping()\r\n        {\r\n            Console.WriteLine(\"STOPPING\");\r\n            File.WriteAllText($\"{DateTime.Now:yyyy-dd-M-HH-mm-ss}-STOPPING\", \"ApplicationStopping was called\");\r\n        }\r\n\r\n        private static void ApplicationStopped()\r\n        {\r\n            Console.WriteLine(\"STOP\");\r\n            File.WriteAllText($\"{DateTime.Now:yyyy-dd-M-HH-mm-ss}-STOP\", \"ApplicationStopped was called\");\r\n        }\r\n\r\n        private static void ApplicationStart()\r\n        {\r\n            Console.WriteLine(\"START\");\r\n            File.WriteAllText($\"{DateTime.Now:yyyy-dd-M-HH-mm-ss}-START\", \"ApplicationStart was called\");\r\n        }\r\n\r\n\r\n        static IHostBuilder CreateHostBuilder(string[] args) =\u003e\r\n          Host.CreateDefaultBuilder(args)\r\n              .ConfigureServices((hostContext, services) =\u003e\r\n              {\r\n                  services.AddHostedService\u003cService\u003e();\r\n              });\r\n    }\r\n\r\n    public class Service : BackgroundService\r\n    {\r\n        protected override async Task ExecuteAsync(CancellationToken stoppingToken)\r\n        {\r\n            while (!stoppingToken.IsCancellationRequested)\r\n            {\r\n                Console.WriteLine(\"Ping\");\r\n                await Task.Delay(10000, stoppingToken);\r\n            }\r\n        }\r\n    }\r\n\r\n```\r\n\r\nWhen stopped by CTRL-C in console window this produces three files, one for each of the events, on both .NET Core and .NET 4.8. \r\n\r\nWhen stopped via Task Scheduler-\"End\", only the .NET Core hosting produces the three files. When hosted in .NET 4.8, only the file from ApplicationStart() is produced. This is an issue for us as the logs are not flushed and therefore are lost.\r\n\r\nRepo with samples can be found at https://github.com/sedvardsen/GenericHostSample\r\nBuilt with .NET Core 3.1 and .NET 4.8, both run with default Debug/Any CPU\r\nTested on Windows 10 Enterprise\r\n\r\nMicrosoft.Extensions.Hosting version 5.0.0 (but also reproduced on 3.1.8)\r\n\r\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eIssue author:\u003c/td\u003e\n    \u003ctd\u003esedvardsen\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eAssignees:\u003c/td\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eMilestone:\u003c/td\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003c/table\u003e\n  \u003c/details\u003e",
                                           "updatedAt":  "2020-11-10T20:01:47Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "IHostApplicationLifetime + Task Scheduler-End does not trigger ApplicationStopping and ApplicationStopped on .NET 4.8",
        "labels":  [
                       "area-Extensions-Hosting"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/50011",
        "createdAt":  "2021-02-02T20:08:35Z",
        "number":  50011,
        "author":  "andreispark",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-20T02:23:25Z",
        "body":  "### Describe the bug\r\n\r\nBasically I created this issue but could not comment on it anymore only the collaborators are allowed to comment on it. I am still having the same issue even in dotnet 5.0 I even tested this with a simple hello world application that runs in CentOS, but fails to un in OpenSuse.\r\ndotnet/extensions#2947 \r\n\r\nI am running a netcore 3.1/5.0 console app as a systemd service following Microsoft\u0027s documentation for IHostBuilder . It should run my application as a systemd service, however it is failing with a (code=dumped, signal=ABRT).\r\n\r\nWhen I run a systemctl status on my service it shows as loaded but a failed active state.\r\n\r\nHowever, when I run the console app from the terminal directly, the application runs fine and does not throw any errors.\r\n\r\nI did not encounter any issues on Debian, Ubuntu or Centos.\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n\r\nI am using OpenSuse Leap 15.2\r\nUsing netcore 5.0 build the console application.\r\nPublish the application with the following command:\r\n```\r\n\u003e dotnet publish -c Release --self-contained --runtime=opensuse-x64\r\n```\r\nTake the publish folder and put it in your OpenSuse environment\r\nCreate a systemd service file. For example: /etc/systemd/system/test-service.service\r\nModify the service file contents to be:\r\n```\r\n[Unit]\r\nDescription=Enable the test-service service at boot\r\n\r\n[Service]\r\nExecStart=/path/to/service/\r\nRestart=always\r\n\r\n[Install]\r\nWantedBy=default.target\r\n```\r\nNote that the ExecStart is pointed to our console application dll\r\n\r\nThen run a daemon reload systemctl daemon-reload\r\nStart the service systemctl start test-service.service\r\nSee the service fails to start, however if you run the dll directly, it runs without any errors\r\n\r\n### Expected behavior\r\nThe service should start without any errors just like in Ubuntu, Debian and Centos.\r\n\r\n### Screenshots\r\n![OpenSuseDownload](https://user-images.githubusercontent.com/41339586/106656079-d08afc00-655f-11eb-937a-383d2ccad0d3.png)\r\n\r\nIn /var/log/messages I only see the relevant output unit entered a failed state. And Failed with \u0027result core-dumped\u0027 for my application. However, If  I run the application dll directly from the terminal. There are no issues\r\n\r\n### Additional context\r\nThis application was built with the self-contained flag and does not require dotnet to be installed on the target os.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORunoDg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNDI0OTYwNA==",
                                           "createdAt":  "2021-03-22T17:23:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-03-22T17:23:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNDk4NDA1Mg==",
                                           "createdAt":  "2021-03-23T15:11:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eerhardt, @maryamariyan\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Describe the bug\r\n\r\nBasically I created this issue but could not comment on it anymore only the collaborators are allowed to comment on it. I am still having the same issue even in dotnet 5.0 I even tested this with a simple hello world application that runs in CentOS, but fails to un in OpenSuse.\r\ndotnet/extensions#2947 \r\n\r\nI am running a netcore 3.1/5.0 console app as a systemd service following Microsoft\u0027s documentation for IHostBuilder . It should run my application as a systemd service, however it is failing with a (code=dumped, signal=ABRT).\r\n\r\nWhen I run a systemctl status on my service it shows as loaded but a failed active state.\r\n\r\nHowever, when I run the console app from the terminal directly, the application runs fine and does not throw any errors.\r\n\r\nI did not encounter any issues on Debian, Ubuntu or Centos.\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n\r\nI am using OpenSuse Leap 15.2\r\nUsing netcore 5.0 build the console application.\r\nPublish the application with the following command:\r\ndotnet publish -c Release --self-contained --runtime=opensuse-x64\r\nTake the publish folder and put it in your OpenSuse environment\r\nCreate a systemd service file. For example: /etc/systemd/system/test-service.service\r\nModify the service file contents to be:\r\n[Unit]\r\nDescription=Enable the test-service service at boot\r\n\r\n[Service]\r\nExecStart=/path/to/service/\r\nRestart=always\r\n\r\n[Install]\r\nWantedBy=default.target\r\n\r\nNote that the ExecStart is pointed to our console application dll\r\n\r\nThen run a daemon reload systemctl daemon-reload\r\nStart the service systemctl start test-service.service\r\nSee the service fails to start, however if you run the dll directly, it runs without any errors\r\n\r\n### Expected behavior\r\nThe service should start without any errors just like in Ubuntu, Debian and Centos.\r\n\r\n### Screenshots\r\n![OpenSuseDownload](https://user-images.githubusercontent.com/41339586/106656079-d08afc00-655f-11eb-937a-383d2ccad0d3.png)\r\n\r\nIn /var/log/messages I only see the relevant output unit entered a failed state. And Failed with \u0027result core-dumped\u0027 for my application. However, If  I run the application dll directly from the terminal. There are no issues\r\n\r\n### Additional context\r\nThis application was built with the self-contained flag and does not require dotnet to be installed on the target os.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eandreispark\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Hosting`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-03-23T15:11:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Gsgg4",
                                           "createdAt":  "2022-07-16T02:42:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bureado",
                                           "body":  "@andreispark in your terminal, can you try running `TERM= ./app \u003e /tmp/xyz`. In other words, can you unset the `TERM` variable _while_ also redirecting STDOUT? Does your app run, or does it hang?",
                                           "updatedAt":  "2022-07-16T02:42:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5G6egO",
                                           "createdAt":  "2022-07-20T02:23:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "andreispark",
                                           "body":  "Hello @bureado. Yeah let me run that tomorrow and see what I get as the output. Granted it has been over 2 years since I have used that system and distro because the app would not run, but let me try it out.",
                                           "updatedAt":  "2022-07-20T02:23:25Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Running NetCore console app as a systemd service not working on OpenSuse 15.2",
        "labels":  [
                       "help wanted",
                       "area-Extensions-Hosting"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/49725",
        "createdAt":  "2021-03-16T19:38:24Z",
        "number":  49725,
        "author":  "Anipik",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBkhq2w==",
                          "nodes":  [
                                        {
                                            "content":  "HEART",
                                            "user":  "eerhardt",
                                            "createdAt":  "2021-03-16T20:17:43Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "SkiFoD",
                                            "createdAt":  "2021-03-23T16:23:46Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2022-06-03T18:24:32Z",
        "body":  "We have very few tests for Microsoft.Extensions.Hosting* projects which basically gives us no coverage. We should rectify this by adding more tests ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORFJLDQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwMDU1MDE4NA==",
                                           "createdAt":  "2021-03-16T19:38:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eerhardt, @maryamariyan\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWe have very few tests for Microsoft.Extensions.Hosting* projects which basically gives us no coverage. We should rectify this by adding more tests \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eAnipik\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Hosting`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-03-16T19:38:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNTA0NTkzNQ==",
                                           "createdAt":  "2021-03-23T16:28:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SkiFoD",
                                           "body":  "Hey, I am considering to grab the task, however I feel like there is a lack of scenarios to cover. Do you have any idea what behavior we want to test?",
                                           "updatedAt":  "2021-03-23T16:28:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EUirT",
                                           "createdAt":  "2022-06-03T18:13:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "deeprobin",
                                           "body":  "What is the current code coverage of this? @Anipik Can you provide a coverage report?",
                                           "updatedAt":  "2022-06-03T18:13:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EUksN",
                                           "createdAt":  "2022-06-03T18:23:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e Can you provide a coverage report?\r\n\r\n@deeprobin, you can just do `dotnet build /t:test /p:Coverage=true` in the relevant test directory to create a report.",
                                           "updatedAt":  "2022-06-03T18:24:32Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Add more unit tests for Microsoft.Extensions.Hosting*",
        "labels":  [
                       "help wanted",
                       "area-Extensions-Hosting"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/51297",
        "createdAt":  "2021-04-15T06:45:10Z",
        "number":  51297,
        "author":  "ArthurHNL",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-04-23T08:38:26Z",
        "body":  "## Background and Motivation\r\n\r\nWe are developing a Windows Service using .NET Core 3.1. We use [Serilog](https://serilog.net/) as a logging provider for logging through `Microsoft.Extensions.Logging`. However, when we call `UseWindowsService` on the host builder to make the host use the `WindowsServiceLifetime` when running as a Windows Service, [this also enables logging to the Windows event log](https://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.Extensions.Hosting.WindowsServices/src/WindowsServiceLifetimeHostBuilderExtensions.cs#L50).\r\n\r\nBecause of this, all our logging messages are now effectively logged twice: once to the Windows event log and once to Serilog which then distributes it whatever logging sink it is configured to use. We do not want to log to the Windows event log for now and if we ever wanted to log to the Windows Event log, we would prefer to do this through Serilog. Therefore, we need to disable Windows Event logging.\r\n\r\nCurrently, the only ways to disable Windows Event logging are to either manually check if the application is running as a Windows Service and then (and only then) manually configure the host to use the [`WindowsServiceLifetime`](https://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.Extensions.Hosting.WindowsServices/src/WindowsServiceLifetime.cs) or to try and remove the Windows Event Log logging provider from the host after calling `UseWindowsService`.\r\n\r\nTherefore, I would propose an optional parameter for the `UseWindowsService` extension methods that allow logging to the Windows event log to be disabled.\r\n\r\n## Proposed API\r\n\r\n```diff\r\nnamespace Microsoft.Extensions.Hosting\r\n{\r\n-    public static IHostBuilder UseWindowsService(this IHostBuilder hostBuilder)\r\n+    public static IHostBuilder UseWindowsService(this IHostBuilder hostBuilder, bool logToWindowsEventLog = true)\r\n-    public static IHostBuilder UseWindowsService(this IHostBuilder hostBuilder, Action\u003cWindowsServiceLifetimeOptions\u003e configure)\r\n+    public static IHostBuilder UseWindowsService(this IHostBuilder hostBuilder, Action\u003cWindowsServiceLifetimeOptions\u003e configure, bool logToWindowsEventLog = true)\r\n}\r\n```\r\n\r\n## Usage Examples\r\n\r\n```C#\r\npublic static IHostBuilder CreateHostBuilder(string args) =\u003e Host.CreateDefaultBuilder()\r\n    .UseWindowsService(logToWindowsEventLog: false)\r\n    .UseSerilog()\r\n    .ConfigureWebHostDefaults();\r\n```\r\n\r\n## Alternative Designs\r\n\r\nIt would be possible to put this setting in a `WindowsServiceOptions` object and then add an `Action\u003cWindowsServiceOptions\u003e` parameter that allows configuring this setting. However this would be against the \"philosophy\" of the builder APIs that tend to use optional parameters or overloads.\r\n\r\n## Risks\r\n\r\nI do not see any significant risks because the change only involves adding an optional parameter to a method that preserves the default behavior.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMSddrw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyMDE2MTYxOA==",
                                           "createdAt":  "2021-04-15T06:45:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eerhardt, @maryamariyan\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n## Background and Motivation\r\n\r\nWe are developing a Windows Service using .NET Core 3.1. We use [Serilog](https://serilog.net/) as a logging provider for logging through `Microsoft.Extensions.Logging`. However, when we call `UseWindowsService` on the host builder to make the host use the `WindowsServiceLifetime` when running as a Windows Service, [this also enables logging to the Windows event log](https://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.Extensions.Hosting.WindowsServices/src/WindowsServiceLifetimeHostBuilderExtensions.cs#L50).\r\n\r\nBecause of this, all our logging messages are now effectively logged twice: once to the Windows event log and once to Serilog which then distributes it whatever logging sink it is configured to use. We do not want to log to the Windows event log for now and if we ever wanted to log to the Windows Event log, we would prefer to do this through Serilog. Therefore, we need to disable Windows Event logging.\r\n\r\nCurrently, the only ways to disable Windows Event logging are to either manually check if the application is running as a Windows Service and then (and only then) manually configure the host to use the [`WindowsServiceLifetime`](https://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.Extensions.Hosting.WindowsServices/src/WindowsServiceLifetime.cs) or to try and remove the Windows Event Log logging provider from the host after calling `UseWindowsService`.\r\n\r\nTherefore, I would propose an optional parameter for the `UseWindowsService` extension methods that allow logging to the Windows event log to be disabled.\r\n\r\n## Proposed API\r\n\r\n```diff\r\nnamespace Microsoft.Extensions.Hosting\r\n{\r\n-    public static IHostBuilder UseWindowsService(this IHostBuilder hostBuilder)\r\n+    public static IHostBuilder UseWindowsService(this IHostBuilder hostBuilder, bool logToWindowsEventLog = true)\r\n-    public static IHostBuilder UseWindowsService(this IHostBuilder hostBuilder, Action\u003cWindowsServiceLifetimeOptions\u003e configure)\r\n+    public static IHostBuilder UseWindowsService(this IHostBuilder hostBuilder, Action\u003cWindowsServiceLifetimeOptions\u003e configure, bool logToWindowsEventLog = true)\r\n}\r\n```\r\n\r\n## Usage Examples\r\n\r\n```C#\r\npublic static IHostBuilder CreateHostBuilder(string args) =\u003e Host.CreateDefaultBuilder()\r\n    .UseWindowsService(logToWindowsEventLog: false)\r\n    .UseSerilog()\r\n    .ConfigureWebHostDefaults();\r\n```\r\n\r\n## Alternative Designs\r\n\r\nIt would be possible to put this setting in a `WindowsServiceOptions` object and then add an `Action\u003cWindowsServiceOptions\u003e` parameter that allows configuring this setting. However this would be against the \"philosophy\" of the builder APIs that tend to use optional parameters or overloads.\r\n\r\n## Risks\r\n\r\nI do not see any significant risks because the change only involves adding an optional parameter to a method that preserves the default behavior.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eArthurHNL\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-Extensions-Hosting`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-04-15T06:45:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyMDM3MTcyMg==",
                                           "createdAt":  "2021-04-15T12:06:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBoT31A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ArthurHNL",
                                                                               "createdAt":  "2021-04-15T13:53:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maryamariyan",
                                                                               "createdAt":  "2021-04-23T08:35:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "gfoidl",
                                           "body":  "\u003e Currently, the only ways to disable Windows Event logging\r\n\r\nor disable it via config:\r\n```json\r\n{\r\n    \"Logging\": {\r\n        \"EventSource\": {\r\n            \"LogLevel\": \"None\"\r\n        }\r\n    }\r\n}\r\n```",
                                           "updatedAt":  "2021-04-15T12:06:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyNDY2MzQ3MQ==",
                                           "createdAt":  "2021-04-22T08:51:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ArthurHNL",
                                           "body":  "Our current workaround is to simply \u0027recreate\u0027 the `UseWindowsService` extension method were we do everything in the original method, except logging:\r\n\r\n```fsharp\r\nmodule HostBuilderExtensions =\r\n    \r\n    open System\r\n    open Microsoft.Extensions.DependencyInjection\r\n    open Microsoft.Extensions.Hosting\r\n    open Microsoft.Extensions.Hosting.WindowsServices\r\n\r\n\r\n    type IHostBuilder with\r\n        /// Configures the host to use the Windows Service Lifetime without also using Event Logging. The default method\r\n        /// UseWindowsService does not allow this,\r\n        /// ref.: https://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.Extensions.Hosting.WindowsServices/src/WindowsServiceLifetimeHostBuilderExtensions.cs#L44 .\r\n        /// This method therefore does everything that that method does except enabling Windows Event logging. An issue has been created at the .NET Team that requests\r\n        /// an optional parameter to disable Windows Event logging. If the .NET Team implements this request, this method can be removed and the new method\r\n        /// can be used.\r\n        /// Issue ref.: https://github.com/dotnet/runtime/issues/51297 .\r\n        member builder.UseWindowsServiceWithoutEventLogging(configureOpt: (WindowsServiceLifetimeOptions -\u003e unit)) =\r\n            if WindowsServiceHelpers.IsWindowsService() then\r\n               builder.UseContentRoot(AppContext.BaseDirectory) |\u003e ignore\r\n               builder.ConfigureServices(fun svc -\u003e\r\n                    svc.AddSingleton\u003cIHostLifetime, WindowsServiceLifetime\u003e() |\u003e ignore\r\n                    svc.Configure(configureOpt) |\u003e ignore) |\u003e ignore\r\n\r\n            builder\r\n```\r\n\r\nThis is F# but this workaround could be easily ported to C#.",
                                           "updatedAt":  "2021-04-22T08:52:33Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Make Windows Event Logging when calling UseWindowsService optional",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Hosting"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/51611",
        "createdAt":  "2021-04-21T06:10:55Z",
        "number":  51611,
        "author":  "radical",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-01-26T19:41:29Z",
        "body":  "Log: https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-48226-merge-49c01169a7014d18bb/Microsoft.Extensions.Hosting.Unit.Tests/console.f3dc96fe.log?sv=2019-07-07\u0026se=2021-05-11T04%3A20%3A01Z\u0026sr=c\u0026sp=rl\u0026sig=RGudxk2x8A28NhhITwJQc2ShNw22Qq7kPc50yidjCHw%3D\r\n\r\nBuild: https://dev.azure.com/dnceng/public/_build/results?buildId=1099089\u0026view=logs\u0026jobId=71afe768-e493-597c-228c-037834193aeb\u0026j=c6f8dc49-92a1-5760-c098-ba97b8142bfb\r\n\r\n```\r\n  Discovering: Microsoft.Extensions.Hosting.Unit.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  Microsoft.Extensions.Hosting.Unit.Tests (found 106 of 107 test cases)\r\n  Starting:    Microsoft.Extensions.Hosting.Unit.Tests (parallel test collections = on, max threads = 4)\r\n\r\nUnhandled Exception:\r\nSystem.NullReferenceException: Object reference not set to an instance of an object\r\n   at System.IO.FileSystemWatcher.RunningInstance.FileSystemEventCallback(IntPtr streamRef, IntPtr clientCallBackInfo, IntPtr numEvents, Byte** eventPaths, FSEventStreamEventFlags* eventFlags, UInt64* eventIds) in /_/src/libraries/System.IO.FileSystem.Watcher/src/System/IO/FileSystemWatcher.OSX.cs:line 354\r\n   at System.IO.FileSystemWatcher.RunningInstance.StaticWatcherRunLoopManager.WatchForFileSystemEventsThreadStart(ManualResetEventSlim runLoopStarted, SafeEventStreamHandle eventStream) in /_/src/libraries/System.IO.FileSystem.Watcher/src/System/IO/FileSystemWatcher.OSX.cs:line 255\r\n   at System.IO.FileSystemWatcher.RunningInstance.StaticWatcherRunLoopManager.\u003c\u003ec.\u003cScheduleEventStream\u003eb__3_0(Object args) in /_/src/libraries/System.IO.FileSystem.Watcher/src/System/IO/FileSystemWatcher.OSX.cs:line 205\r\n   at System.Threading.Thread.StartCallback() in /_/src/mono/System.Private.CoreLib/src/System/Threading/Thread.Mono.cs:line 237\r\n\r\n=================================================================\r\n\tNative Crash Reporting\r\n=================================================================\r\nGot a SIGSEGV while executing native code. This usually indicates\r\na fatal error in the mono runtime or one of the native libraries \r\nused by your application.\r\n=================================================================\r\n\r\n=================================================================\r\n\tNative stacktrace:\r\n=================================================================\r\n\t0x101732556 - /private/tmp/helix/working/A1F20910/p/shared/Microsoft.NETCore.App/6.0.0/libcoreclr.dylib : mono_dump_native_crash_info\r\n\t0x1016d29be - /private/tmp/helix/working/A1F20910/p/shared/Microsoft.NETCore.App/6.0.0/libcoreclr.dylib : mono_handle_native_crash\r\n\t0x10162ab2f - /private/tmp/helix/working/A1F20910/p/shared/Microsoft.NETCore.App/6.0.0/libcoreclr.dylib : mono_sigsegv_signal_handler_debug\r\n\t0x7fff5df2bb5d - /usr/lib/system/libsystem_platform.dylib : _sigtramp\r\n\t0x7fd3ed700000 - Unknown\r\n\t0x106787708 - Unknown\r\n\t0x10162dcf2 - /private/tmp/helix/working/A1F20910/p/shared/Microsoft.NETCore.App/6.0.0/libcoreclr.dylib : mono_jit_runtime_invoke\r\n\t0x1015472cf - /private/tmp/helix/working/A1F20910/p/shared/Microsoft.NETCore.App/6.0.0/libcoreclr.dylib : mono_runtime_try_invoke\r\n\t0x101552039 - /private/tmp/helix/working/A1F20910/p/shared/Microsoft.NETCore.App/6.0.0/libcoreclr.dylib : mono_object_try_to_string\r\n\t0x1014fccfb - /private/tmp/helix/working/A1F20910/p/shared/Microsoft.NETCore.App/6.0.0/libcoreclr.dylib : mono_invoke_unhandled_exception_hook\r\n\t0x10155e567 - /private/tmp/helix/working/A1F20910/p/shared/Microsoft.NETCore.App/6.0.0/libcoreclr.dylib : start_wrapper_internal\r\n\t0x10155e29e - /private/tmp/helix/working/A1F20910/p/shared/Microsoft.NETCore.App/6.0.0/libcoreclr.dylib : start_wrapper\r\n\t0x7fff5df342eb - /usr/lib/system/libsystem_pthread.dylib : _pthread_body\r\n\t0x7fff5df37249 - /usr/lib/system/libsystem_pthread.dylib : _pthread_start\r\n\t0x7fff5df3340d - /usr/lib/system/libsystem_pthread.dylib : thread_start\r\n\r\n=================================================================\r\n\tTelemetry Dumper:\r\n=================================================================\r\nPkilling 0x123145529155584x from 0x123145537593344x\r\nPkilling 0x123145527046144x from 0x123145537593344x\r\nPkilling 0x123145524936704x from 0x123145537593344x\r\nPkilling 0x123145522827264x from 0x123145537593344x\r\nPkilling 0x123145517260800x from 0x123145537593344x\r\nPkilling 0x123145541812224x from 0x123145537593344x\r\nPkilling 0x4545529280x from 0x123145537593344x\r\nPkilling 0x123145515151360x from 0x123145537593344x\r\nPkilling 0x123145520717824x from 0x123145537593344x\r\nPkilling 0x123145539702784x from 0x123145537593344x\r\nPkilling 0x123145518608384x from 0x123145537593344x\r\nPkilling 0x123145513041920x from 0x123145537593344x\r\nPkilling 0x123145510932480x from 0x123145537593344x\r\nPkilling 0x123145535483904x from 0x123145537593344x\r\nPkilling 0x123145533374464x from 0x123145537593344x\r\nPkilling 0x123145531265024x from 0x123145537593344x\r\nEntering thread summarizer pause from 0x123145537593344x\r\nCould not exec mono-hang-watchdog, expected on path \u0027/Users/runner/work/1/s/artifacts/obj/mono/OSX.x64.Release/out/etc/../bin/mono-hang-watchdog\u0027 (errno 2)\r\nFinished thread summarizer pause from 0x123145537593344x.\r\nFailed to create breadcrumb file (null)/crash_hash_0x1267f66204\r\n\r\nWaiting for dumping threads to resume\r\n\r\n=================================================================\r\n\tExternal Debugger Dump:\r\n=================================================================\r\n\r\n=================================================================\r\n\tBasic Fault Address Reporting\r\n=================================================================\r\nMemory around native instruction pointer (0x1016cf653):0x1016cf643  e8 18 ef e4 ff 48 89 c3 4c 89 e7 e8 0d ef e4 ff  .....H..L.......\r\n0x1016cf653  f6 40 20 7c 0f 84 d3 00 00 00 49 c7 46 28 00 00  .@ |......I.F(..\r\n0x1016cf663  00 00 49 89 df 48 89 df be 01 00 00 00 31 d2 b9  ..I..H.......1..\r\n0x1016cf673  01 00 00 00 e8 c4 83 e2 ff 4c 89 6d 88 49 89 c5  .........L.m.I..\r\n\r\n=================================================================\r\n\tManaged Stacktrace:\r\n=================================================================\r\n\t  at \u003cunknown\u003e \u003c0xffffffff\u003e\r\n\t  at System.Diagnostics.StackTrace:get_trace \u003c0x00087\u003e\r\n\t  at System.Diagnostics.StackTrace:InitializeForException \u003c0x0006a\u003e\r\n\t  at System.Diagnostics.StackTrace:.ctor \u003c0x00062\u003e\r\n\t  at System.Exception:GetStackTrace \u003c0x000b2\u003e\r\n\t  at System.Exception:get_StackTrace \u003c0x00042\u003e\r\n\t  at System.Exception:ToString \u003c0x000e9\u003e\r\n\t  at \u003cModule\u003e:runtime_invoke_object__this__ \u003c0x000b0\u003e\r\n=================================================================\r\n./RunTests.sh: line 162: 96012 Abort trap: 6           (core dumped) \"$RUNTIME_PATH/dotnet\" exec --runtimeconfig Microsoft.Extensions.Hosting.Unit.Tests.runtimeconfig.json --depsfile Microsoft.Extensions.Hosting.Unit.Tests.deps.json xunit.console.dll Microsoft.Extensions.Hosting.Unit.Tests.dll -xml testResults.xml -nologo -nocolor -notrait category=IgnoreForCI -notrait category=OuterLoop -notrait category=failing $RSP_FILE\r\n/private/tmp/helix/working/A1F20910/w/A2B7091C/e\r\n----- end Tue Apr 20 21:20:30 PDT 2021 ----- exit code 134 ----------------------------------------------------------\r\nexit code 134 means SIGABRT Abort. Managed or native assert, or runtime check such as heap corruption, caused call to abort(). Core dumped.\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcf_n-w==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyMzgwNDMyMw==",
                                           "createdAt":  "2021-04-21T06:11:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-04-21T06:11:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyODQ2ODk3NQ==",
                                           "createdAt":  "2021-04-28T13:46:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "Failed again here:\r\n\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=1110822\u0026view=logs\u0026j=c6f8dc49-92a1-5760-c098-ba97b8142bfb\u0026t=5d5289b6-723b-5155-5d15-b590d280a14a\u0026l=73\r\n\r\nhttps://helix.dot.net/api/2019-06-17/jobs/ac3fc3cd-cc46-48cb-8299-aed64c18f4ee/workitems/Microsoft.Extensions.Hosting.Unit.Tests/console\r\n\r\n```\r\n/private/tmp/helix/working/C3CB0A70/w/ACAC097A/e /private/tmp/helix/working/C3CB0A70/w/ACAC097A/e\r\n  Discovering: Microsoft.Extensions.Hosting.Unit.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  Microsoft.Extensions.Hosting.Unit.Tests (found 108 of 109 test cases)\r\n  Starting:    Microsoft.Extensions.Hosting.Unit.Tests (parallel test collections = on, max threads = 12)\r\n\r\n=================================================================\r\n\tNative Crash Reporting\r\n=================================================================\r\nGot a SIGSEGV while executing native code. This usually indicates\r\na fatal error in the mono runtime or one of the native libraries \r\nused by your application.\r\n=================================================================\r\n\r\n=================================================================\r\n\tNative stacktrace:\r\n=================================================================\r\n\t0x1077514e6 - /private/tmp/helix/working/C3CB0A70/p/shared/Microsoft.NETCore.App/6.0.0/libcoreclr.dylib : mono_dump_native_crash_info\r\n\t0x1076f194e - /private/tmp/helix/working/C3CB0A70/p/shared/Microsoft.NETCore.App/6.0.0/libcoreclr.dylib : mono_handle_native_crash\r\n\t0x1076497df - /private/tmp/helix/working/C3CB0A70/p/shared/Microsoft.NETCore.App/6.0.0/libcoreclr.dylib : mono_sigsegv_signal_handler_debug\r\n\t0x7fff684ae5fd - /usr/lib/system/libsystem_platform.dylib : _sigtramp\r\n\t0x100000006 - Unknown\r\n\t0x10bf94898 - Unknown\r\n\t0x10764c9c2 - /private/tmp/helix/working/C3CB0A70/p/shared/Microsoft.NETCore.App/6.0.0/libcoreclr.dylib : mono_jit_runtime_invoke\r\n\t0x107565e1f - /private/tmp/helix/working/C3CB0A70/p/shared/Microsoft.NETCore.App/6.0.0/libcoreclr.dylib : mono_runtime_try_invoke\r\n\t0x10756ba07 - /private/tmp/helix/working/C3CB0A70/p/shared/Microsoft.NETCore.App/6.0.0/libcoreclr.dylib : mono_print_unhandled_exception_internal\r\n\t0x10756b278 - /private/tmp/helix/working/C3CB0A70/p/shared/Microsoft.NETCore.App/6.0.0/libcoreclr.dylib : mono_unhandled_exception_checked\r\n\t0x10756afff - /private/tmp/helix/working/C3CB0A70/p/shared/Microsoft.NETCore.App/6.0.0/libcoreclr.dylib : mono_unhandled_exception_internal\r\n\t0x10757d0af - /private/tmp/helix/working/C3CB0A70/p/shared/Microsoft.NETCore.App/6.0.0/libcoreclr.dylib : start_wrapper_internal\r\n\t0x10757cdee - /private/tmp/helix/working/C3CB0A70/p/shared/Microsoft.NETCore.App/6.0.0/libcoreclr.dylib : start_wrapper\r\n\t0x7fff684ba109 - /usr/lib/system/libsystem_pthread.dylib : _pthread_start\r\n\t0x7fff684b5b8b - /usr/lib/system/libsystem_pthread.dylib : thread_start\r\n\r\n=================================================================\r\n\tTelemetry Dumper:\r\n=================================================================\r\nPkilling 0x123145603325952x from 0x123145609654272x\r\nPkilling 0x123145573793792x from 0x123145609654272x\r\nPkilling 0x123145571409920x from 0x123145609654272x\r\nPkilling 0x123145580122112x from 0x123145609654272x\r\nPkilling 0x123145586450432x from 0x123145609654272x\r\nPkilling 0x123145592778752x from 0x123145609654272x\r\nPkilling 0x123145612300288x from 0x123145609654272x\r\nPkilling 0x123145599107072x from 0x123145609654272x\r\nCould not exec mono-hang-watchdog, expected on path \u0027/Users/runner/work/1/s/artifacts/obj/mono/OSX.x64.Release/out/etc/../bin/mono-hang-watchdog\u0027 (errno 2)\r\nPkilling 0x123145618628608x from 0x123145609654272x\r\nPkilling 0x123145605435392x from 0x123145609654272x\r\nPkilling 0x123145567191040x from 0x123145609654272x\r\nPkilling 0x123145575903232x from 0x123145609654272x\r\nPkilling 0x123145573519360x from 0x123145609654272x\r\nPkilling 0x123145582231552x from 0x123145609654272x\r\nPkilling 0x4661095872x from 0x123145609654272x\r\nPkilling 0x123145588559872x from 0x123145609654272x\r\nPkilling 0x123145594888192x from 0x123145609654272x\r\nPkilling 0x123145614409728x from 0x123145609654272x\r\nPkilling 0x123145601216512x from 0x123145609654272x\r\nPkilling 0x123145607544832x from 0x123145609654272x\r\nPkilling 0x123145569300480x from 0x123145609654272x\r\nPkilling 0x123145578012672x from 0x123145609654272x\r\nPkilling 0x123145584340992x from 0x123145609654272x\r\nPkilling 0x123145590669312x from 0x123145609654272x\r\nPkilling 0x123145596997632x from 0x123145609654272x\r\nEntering thread summarizer pause from 0x123145609654272x\r\nFinished thread summarizer pause from 0x123145609654272x.\r\nFailed to create breadcrumb file (null)/crash_hash_0x1268026cbb\r\n\r\nWaiting for dumping threads to resume\r\n\r\n=================================================================\r\n\tExternal Debugger Dump:\r\n=================================================================\r\n\r\n=================================================================\r\n\tBasic Fault Address Reporting\r\n=================================================================\r\nMemory around native instruction pointer (0x1076ee5c3):0x1076ee5b3  e8 f8 ea e4 ff 48 89 c3 4c 89 e7 e8 ed ea e4 ff  .....H..L.......\r\n0x1076ee5c3  f6 40 20 7c 0f 84 d3 00 00 00 49 c7 46 28 00 00  .@ |......I.F(..\r\n0x1076ee5d3  00 00 49 89 df 48 89 df be 01 00 00 00 31 d2 b9  ..I..H.......1..\r\n0x1076ee5e3  01 00 00 00 e8 24 84 e2 ff 4c 89 6d 88 49 89 c5  .....$...L.m.I..\r\n\r\n=================================================================\r\n\tManaged Stacktrace:\r\n=================================================================\r\n\t  at \u003cunknown\u003e \u003c0xffffffff\u003e\r\n\t  at System.Diagnostics.StackTrace:get_trace \u003c0x00087\u003e\r\n\t  at System.Diagnostics.StackTrace:InitializeForException \u003c0x0006a\u003e\r\n\t  at System.Diagnostics.StackTrace:.ctor \u003c0x00062\u003e\r\n\t  at System.Exception:GetStackTrace \u003c0x000b2\u003e\r\n\t  at System.Exception:get_StackTrace \u003c0x00042\u003e\r\n\t  at System.Exception:ToString \u003c0x000e9\u003e\r\n\t  at \u003cModule\u003e:runtime_invoke_object__this__ \u003c0x000b0\u003e\r\n=================================================================\r\n./RunTests.sh: line 162:  3774 Abort trap: 6           (core dumped) \"$RUNTIME_PATH/dotnet\" exec --runtimeconfig Microsoft.Extensions.Hosting.Unit.Tests.runtimeconfig.json --depsfile Microsoft.Extensions.Hosting.Unit.Tests.deps.json xunit.console.dll Microsoft.Extensions.Hosting.Unit.Tests.dll -xml testResults.xml -nologo -nocolor -notrait category=IgnoreForCI -notrait category=OuterLoop -notrait category=failing $RSP_FILE\r\n/private/tmp/helix/working/C3CB0A70/w/ACAC097A/e\r\n----- end Tue Apr 27 18:50:34 EDT 2021 ----- exit code 134 ----------------------------------------------------------\r\nexit code 134 means SIGABRT Abort. Managed or native assert, or runtime check such as heap corruption, caused call to abort(). Core dumped.\r\n```",
                                           "updatedAt":  "2021-04-28T13:46:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3NzkzNDY5MA==",
                                           "createdAt":  "2021-07-12T03:07:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "/cc @lambdageek ",
                                           "updatedAt":  "2021-07-12T03:07:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5x_-f7",
                                           "createdAt":  "2024-01-26T19:41:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-hosting\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nLog: https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-48226-merge-49c01169a7014d18bb/Microsoft.Extensions.Hosting.Unit.Tests/console.f3dc96fe.log?sv=2019-07-07\u0026se=2021-05-11T04%3A20%3A01Z\u0026sr=c\u0026sp=rl\u0026sig=RGudxk2x8A28NhhITwJQc2ShNw22Qq7kPc50yidjCHw%3D\r\n\r\nBuild: https://dev.azure.com/dnceng/public/_build/results?buildId=1099089\u0026view=logs\u0026jobId=71afe768-e493-597c-228c-037834193aeb\u0026j=c6f8dc49-92a1-5760-c098-ba97b8142bfb\r\n\r\n```\r\n  Discovering: Microsoft.Extensions.Hosting.Unit.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  Microsoft.Extensions.Hosting.Unit.Tests (found 106 of 107 test cases)\r\n  Starting:    Microsoft.Extensions.Hosting.Unit.Tests (parallel test collections = on, max threads = 4)\r\n\r\nUnhandled Exception:\r\nSystem.NullReferenceException: Object reference not set to an instance of an object\r\n   at System.IO.FileSystemWatcher.RunningInstance.FileSystemEventCallback(IntPtr streamRef, IntPtr clientCallBackInfo, IntPtr numEvents, Byte** eventPaths, FSEventStreamEventFlags* eventFlags, UInt64* eventIds) in /_/src/libraries/System.IO.FileSystem.Watcher/src/System/IO/FileSystemWatcher.OSX.cs:line 354\r\n   at System.IO.FileSystemWatcher.RunningInstance.StaticWatcherRunLoopManager.WatchForFileSystemEventsThreadStart(ManualResetEventSlim runLoopStarted, SafeEventStreamHandle eventStream) in /_/src/libraries/System.IO.FileSystem.Watcher/src/System/IO/FileSystemWatcher.OSX.cs:line 255\r\n   at System.IO.FileSystemWatcher.RunningInstance.StaticWatcherRunLoopManager.\u003c\u003ec.\u003cScheduleEventStream\u003eb__3_0(Object args) in /_/src/libraries/System.IO.FileSystem.Watcher/src/System/IO/FileSystemWatcher.OSX.cs:line 205\r\n   at System.Threading.Thread.StartCallback() in /_/src/mono/System.Private.CoreLib/src/System/Threading/Thread.Mono.cs:line 237\r\n\r\n=================================================================\r\n\tNative Crash Reporting\r\n=================================================================\r\nGot a SIGSEGV while executing native code. This usually indicates\r\na fatal error in the mono runtime or one of the native libraries \r\nused by your application.\r\n=================================================================\r\n\r\n=================================================================\r\n\tNative stacktrace:\r\n=================================================================\r\n\t0x101732556 - /private/tmp/helix/working/A1F20910/p/shared/Microsoft.NETCore.App/6.0.0/libcoreclr.dylib : mono_dump_native_crash_info\r\n\t0x1016d29be - /private/tmp/helix/working/A1F20910/p/shared/Microsoft.NETCore.App/6.0.0/libcoreclr.dylib : mono_handle_native_crash\r\n\t0x10162ab2f - /private/tmp/helix/working/A1F20910/p/shared/Microsoft.NETCore.App/6.0.0/libcoreclr.dylib : mono_sigsegv_signal_handler_debug\r\n\t0x7fff5df2bb5d - /usr/lib/system/libsystem_platform.dylib : _sigtramp\r\n\t0x7fd3ed700000 - Unknown\r\n\t0x106787708 - Unknown\r\n\t0x10162dcf2 - /private/tmp/helix/working/A1F20910/p/shared/Microsoft.NETCore.App/6.0.0/libcoreclr.dylib : mono_jit_runtime_invoke\r\n\t0x1015472cf - /private/tmp/helix/working/A1F20910/p/shared/Microsoft.NETCore.App/6.0.0/libcoreclr.dylib : mono_runtime_try_invoke\r\n\t0x101552039 - /private/tmp/helix/working/A1F20910/p/shared/Microsoft.NETCore.App/6.0.0/libcoreclr.dylib : mono_object_try_to_string\r\n\t0x1014fccfb - /private/tmp/helix/working/A1F20910/p/shared/Microsoft.NETCore.App/6.0.0/libcoreclr.dylib : mono_invoke_unhandled_exception_hook\r\n\t0x10155e567 - /private/tmp/helix/working/A1F20910/p/shared/Microsoft.NETCore.App/6.0.0/libcoreclr.dylib : start_wrapper_internal\r\n\t0x10155e29e - /private/tmp/helix/working/A1F20910/p/shared/Microsoft.NETCore.App/6.0.0/libcoreclr.dylib : start_wrapper\r\n\t0x7fff5df342eb - /usr/lib/system/libsystem_pthread.dylib : _pthread_body\r\n\t0x7fff5df37249 - /usr/lib/system/libsystem_pthread.dylib : _pthread_start\r\n\t0x7fff5df3340d - /usr/lib/system/libsystem_pthread.dylib : thread_start\r\n\r\n=================================================================\r\n\tTelemetry Dumper:\r\n=================================================================\r\nPkilling 0x123145529155584x from 0x123145537593344x\r\nPkilling 0x123145527046144x from 0x123145537593344x\r\nPkilling 0x123145524936704x from 0x123145537593344x\r\nPkilling 0x123145522827264x from 0x123145537593344x\r\nPkilling 0x123145517260800x from 0x123145537593344x\r\nPkilling 0x123145541812224x from 0x123145537593344x\r\nPkilling 0x4545529280x from 0x123145537593344x\r\nPkilling 0x123145515151360x from 0x123145537593344x\r\nPkilling 0x123145520717824x from 0x123145537593344x\r\nPkilling 0x123145539702784x from 0x123145537593344x\r\nPkilling 0x123145518608384x from 0x123145537593344x\r\nPkilling 0x123145513041920x from 0x123145537593344x\r\nPkilling 0x123145510932480x from 0x123145537593344x\r\nPkilling 0x123145535483904x from 0x123145537593344x\r\nPkilling 0x123145533374464x from 0x123145537593344x\r\nPkilling 0x123145531265024x from 0x123145537593344x\r\nEntering thread summarizer pause from 0x123145537593344x\r\nCould not exec mono-hang-watchdog, expected on path \u0027/Users/runner/work/1/s/artifacts/obj/mono/OSX.x64.Release/out/etc/../bin/mono-hang-watchdog\u0027 (errno 2)\r\nFinished thread summarizer pause from 0x123145537593344x.\r\nFailed to create breadcrumb file (null)/crash_hash_0x1267f66204\r\n\r\nWaiting for dumping threads to resume\r\n\r\n=================================================================\r\n\tExternal Debugger Dump:\r\n=================================================================\r\n\r\n=================================================================\r\n\tBasic Fault Address Reporting\r\n=================================================================\r\nMemory around native instruction pointer (0x1016cf653):0x1016cf643  e8 18 ef e4 ff 48 89 c3 4c 89 e7 e8 0d ef e4 ff  .....H..L.......\r\n0x1016cf653  f6 40 20 7c 0f 84 d3 00 00 00 49 c7 46 28 00 00  .@ |......I.F(..\r\n0x1016cf663  00 00 49 89 df 48 89 df be 01 00 00 00 31 d2 b9  ..I..H.......1..\r\n0x1016cf673  01 00 00 00 e8 c4 83 e2 ff 4c 89 6d 88 49 89 c5  .........L.m.I..\r\n\r\n=================================================================\r\n\tManaged Stacktrace:\r\n=================================================================\r\n\t  at \u003cunknown\u003e \u003c0xffffffff\u003e\r\n\t  at System.Diagnostics.StackTrace:get_trace \u003c0x00087\u003e\r\n\t  at System.Diagnostics.StackTrace:InitializeForException \u003c0x0006a\u003e\r\n\t  at System.Diagnostics.StackTrace:.ctor \u003c0x00062\u003e\r\n\t  at System.Exception:GetStackTrace \u003c0x000b2\u003e\r\n\t  at System.Exception:get_StackTrace \u003c0x00042\u003e\r\n\t  at System.Exception:ToString \u003c0x000e9\u003e\r\n\t  at \u003cModule\u003e:runtime_invoke_object__this__ \u003c0x000b0\u003e\r\n=================================================================\r\n./RunTests.sh: line 162: 96012 Abort trap: 6           (core dumped) \"$RUNTIME_PATH/dotnet\" exec --runtimeconfig Microsoft.Extensions.Hosting.Unit.Tests.runtimeconfig.json --depsfile Microsoft.Extensions.Hosting.Unit.Tests.deps.json xunit.console.dll Microsoft.Extensions.Hosting.Unit.Tests.dll -xml testResults.xml -nologo -nocolor -notrait category=IgnoreForCI -notrait category=OuterLoop -notrait category=failing $RSP_FILE\r\n/private/tmp/helix/working/A1F20910/w/A2B7091C/e\r\n----- end Tue Apr 20 21:20:30 PDT 2021 ----- exit code 134 ----------------------------------------------------------\r\nexit code 134 means SIGABRT Abort. Managed or native assert, or runtime check such as heap corruption, caused call to abort(). Core dumped.\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eradical\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`os-mac-os-x`, `area-CoreLib-mono`, `runtime-mono`, `area-Extensions-Hosting`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-01-26T19:41:28Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Tests crash for `Microsoft.Extensions.Hosting.Unit.Tests` in `Libraries Test Run release mono OSX x64 Debug`",
        "labels":  [
                       "os-mac-os-x",
                       "runtime-mono",
                       "area-Extensions-Hosting"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/51613",
        "createdAt":  "2021-04-21T06:39:40Z",
        "number":  51613,
        "author":  "pardahlman",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-09-07T22:00:56Z",
        "body":  "### Description\r\n\r\nAs `Microsoft.Extensions.Hosting.Internal.Host` starts, it resolves all registered instances of  `IHostedService` and starts them in sequence. If a hosted service stops the application (using `IHostApplicationLifetime.StopApplication()`), the remaining hosted services are still started (that is `StartAsync` is called), despite the fact that the application is instructed to shut down.\r\n\r\nThis can results in a combination of the following behaviors:\r\n\r\n* If any of the remaining hosted services checks the provided cancellation token and throws an exception, it propagates and results in an unhandled exception unless the user wraps the start call in try/catch. This feels unexpected, as the stopping should be considered graceful.\r\n* If the remaining hosted services does not check the cancellation token, time and resources may be spent starting components that will just be stopped shortly after. This does not scale well if there are \"a lot\" of registered hosted services that takes \"long\" time to start.\r\n \r\nI think it would make sense to check the `IHostApplicationLifetime.ApplicationStopping` cancellation token after each started hosted service and if it is triggered, gracefully exit the application.\r\n\r\nOne could also argue that `ThrowIfCancellationRequested` should be called on the cancellation token passed to `StartAsync`  after each started service.\r\n\r\nLooking forward hearing your thoughts on this!",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOM07xbQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyMzgxNzEwNQ==",
                                           "createdAt":  "2021-04-21T06:39:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eerhardt, @maryamariyan\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nAs `Microsoft.Extensions.Hosting.Internal.Host` starts, it resolves all registered instances of  `IHostedService` and starts them in sequence. If a hosted service stops the application (using `IHostApplicationLifetime.StopApplication()`), the remaining hosted services are still started (that is `StartAsync` is called), despite the fact that the application is instructed to shut down.\r\n\r\nThis can results in a combination of the following behaviors:\r\n\r\n* If any of the remaining hosted services checks the provided cancellation token and throws an exception, it propagates and results in an unhandled exception unless the user wraps the start call in try/catch. This feels unexpected, as the stopping should be considered graceful.\r\n* If the remaining hosted services does not check the cancellation token, time and resources may be spent starting components that will just be stopped shortly after. This does not scale well if there are \"a lot\" of registered hosted services that takes \"long\" time to start.\r\n \r\nI think it would make sense to check the `IHostApplicationLifetime.ApplicationStopping` cancellation token after each started hosted service and if it is triggered, gracefully exit the application.\r\n\r\nOne could also argue that `ThrowIfCancellationRequested` should be called on the cancellation token passed to `StartAsync`  after each started service.\r\n\r\nLooking forward hearing your thoughts on this!\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003epardahlman\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Hosting`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-04-21T06:39:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyMzgyMjUwMg==",
                                           "createdAt":  "2021-04-21T06:50:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "What\u0027s a the scenario for gracefully shutting down in start?",
                                           "updatedAt":  "2021-04-21T06:50:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyMzk5MzY2MQ==",
                                           "createdAt":  "2021-04-21T11:39:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pardahlman",
                                           "body":  "Hi @davidfowl , thanks for getting back on this issue this quickly 🙏 I suspect you\u0027re not going to be enthusiastic over the reasons behind why we want to do this, but here I go...\r\n\r\nBasically, we are calling an external API that connects to a message broker and sets up consumers and producers for it. This call may fail for a number of reasons and if so it throws an exception. We want to log that exception and then shut down the application with a non-zero exit code. Sounds like an we should just throw an exception and let it be unhandled, right? We tried that, but something (which I now suspect is the runtime?) logs unhandled exception to the console. Everything that is written to stdout is ingested to one of our log system, so the exception was logged by our code and whatever it is that writes to the console. It would not do to just rely on the \"logging\" written to the console, as it does not follow our JSON schema for log entries, but more importantly, we have other logging providers that pushes data to other destinations.\r\n\r\nWe considered wrappng the call to `IHost.RunAsync` in a try/catch, but at this point we have too many services in too many repositories for such change to be feasible. Based on this I think you can guess what solution we ended up with: using `StopApplication` on `IHostApplicationLifetime`.\r\n\r\nSo that is the backstory... but, if we raise the issue to a more theoretical level, wouldn\u0027t you expect the scenario described in the issue to result in a graceful shutdown?",
                                           "updatedAt":  "2021-04-21T11:39:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyNDE2MDA1Mg==",
                                           "createdAt":  "2021-04-21T15:37:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "So if I got this right, you don\u0027t want the exception to be printed to the console, *and* you don\u0027t want to add a try/catch to your code, but you want a non-zero exit code for a graceful shutdown? \r\n\r\nThe graceful shutdown sounds reasonable, but not the non-zero exit code.",
                                           "updatedAt":  "2021-04-21T15:37:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyNDU1NDM3Mg==",
                                           "createdAt":  "2021-04-22T05:40:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pardahlman",
                                           "body":  "You got it right 👌 The non-zero exit code is part of another implementation detail that has to do with compatibility with services still running on Windows. It has very little bearing for this issue. What I\u0027m suggesting is that it would be reasonable to expect the following:\r\n\r\n1. If an `IHostedService` stops the application (`IHostApplicationLifetime.StopApplication()`) it should result in a graceful shutdown, preferably as soon as possible (e.g. check before starting each `IHostedService`).\r\n2. If cancellation is requested for the user provided `CancellationToken` it should throw an `OperationCanceledException` as soon as possible (e.g. check before starting each `IHostedService`)\r\n\r\nIf you think this makes sense I could submit an MR for these changes.",
                                           "updatedAt":  "2021-04-22T05:40:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyNDU5MjY4NA==",
                                           "createdAt":  "2021-04-22T07:00:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "\u003e If an IHostedService stops the application (IHostApplicationLifetime.StopApplication()) it should result in a graceful shutdown, preferably as soon as possible (e.g. check before starting each IHostedService).\r\n\r\nThis sounds reasonable. In this case is an exception thrown? If yes, how does it fix your scenario?\r\n\r\n\u003e If cancellation is requested for the user provided CancellationToken it should throw an OperationCanceledException as soon as possible (e.g. check before starting each IHostedService)\r\n\r\nYes this is fine.",
                                           "updatedAt":  "2021-04-22T07:00:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyNDcyNDUxNw==",
                                           "createdAt":  "2021-04-22T10:27:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pardahlman",
                                           "body":  "\u003e In this case is an exception thrown? If yes, how does it fix your scenario?\r\n\r\nNo, I would suggest that the graceful shutdown does not throw an unhandled exception, but instead aborts the starting up of hosted services, probably do some cleanup (like stopping the already started services? call `ApplicationLifetime.NotifyStopped`?) and then return.\r\n\r\nI guess there is an argument that stopping the application (`IHostApplicationLifetime.StopApplication()`) triggers a cancellation request on the `CancellationToken` `ApplicationStopping`, which would be a reason to throw `OperationCanceledException`.  I haven\u0027t considered that to be a desired behavior, as I don\u0027t think an unhandled exception from `IHost.StartAsync` is graceful. Let me know if you\u0027re seeing this differently! ",
                                           "updatedAt":  "2021-04-22T10:27:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNTcyOTQyNw==",
                                           "createdAt":  "2021-05-09T07:41:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCVX1Fw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "dignite",
                                                                               "createdAt":  "2022-03-30T12:40:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dignite",
                                                                               "createdAt":  "2022-03-30T12:40:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "pardahlman",
                                           "body":  "I\u0027ve been giving this issue some more thought and created an PR with a suggestion of how to modify the startup behavior to respect `IHostApplicationLifetime.ApplicationStopping` and the user provided `CancellationToken` while starting up the hosted services. Looking forward hearing your thought on this!",
                                           "updatedAt":  "2021-05-09T07:41:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2MDgxMTYyOQ==",
                                           "createdAt":  "2021-06-14T16:14:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "\u003e It would not do to just rely on the \"logging\" written to the console, as it does not follow our JSON schema for log entries\r\n\r\nnot completely related to the gist of this issue, but also wanted to mention that console logs can be written in a JSON format too when you use AddJsonConsole.",
                                           "updatedAt":  "2021-06-14T16:14:58Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Hosted services are started even though the application is instructed to stop.",
        "labels":  [
                       "area-Extensions-Hosting"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/53720",
        "createdAt":  "2021-06-04T10:06:58Z",
        "number":  53720,
        "author":  "vitek-karas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-08T02:03:44Z",
        "body":  "https://dev.azure.com/dnceng/public/_build/results?buildId=1170895\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=35271328\u0026resultId=115693\u0026paneView=debug\r\n\r\n```console\r\nAssert.True() Failure\r\nExpected: True\r\nActual:   False\r\n\r\n\r\nStack trace\r\n   at Microsoft.Extensions.Hosting.Internal.HostTests.HostApplicationLifetimeEventsOrderedCorrectlyDuringShutdown() in /_/src/libraries/Microsoft.Extensions.Hosting/tests/UnitTests/Internal/HostTests.cs:line 807\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwpGsQg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NDU1MTY5NQ==",
                                           "createdAt":  "2021-06-04T10:07:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eerhardt, @maryamariyan\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=1170895\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=35271328\u0026resultId=115693\u0026paneView=debug\r\n\r\n```console\r\nAssert.True() Failure\r\nExpected: True\r\nActual:   False\r\n\r\n\r\nStack trace\r\n   at Microsoft.Extensions.Hosting.Internal.HostTests.HostApplicationLifetimeEventsOrderedCorrectlyDuringShutdown() in /_/src/libraries/Microsoft.Extensions.Hosting/tests/UnitTests/Internal/HostTests.cs:line 807\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003evitek-karas\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Hosting`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-06-04T10:07:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7CkaxC",
                                           "createdAt":  "2025-09-08T02:03:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-pgo 20250906.1](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=1141204)\n\n**Failed tests:**\n```\nnet10.0-windows-Release-x64-syntheticpgo-Windows.10.Amd64.Open\n    - Microsoft.Extensions.Hosting.Internal.HostTests.HostApplicationLifetimeEventsOrderedCorrectlyDuringShutdown\n```\n\n**Error message:**\n```\nAssert.True() Failure\nExpected: True\nActual:   False\n```\n\n**Stack trace:**\n```\n   at Microsoft.Extensions.Hosting.Internal.HostTests.HostApplicationLifetimeEventsOrderedCorrectlyDuringShutdown() in /_/src/libraries/Microsoft.Extensions.Hosting/tests/UnitTests/Internal/HostTests.cs:line 838\n   at System.RuntimeMethodHandle.InvokeMethod(ObjectHandleOnStack target, Void** arguments, ObjectHandleOnStack sig, BOOL isConstructor, ObjectHandleOnStack result)\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor) in /_/src/coreclr/System.Private.CoreLib/src/System/RuntimeHandles.cs:line 1168\n   at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args) in /_/src/coreclr/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.CoreCLR.cs:line 36\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\n```",
                                           "updatedAt":  "2025-09-08T02:03:44Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Test failing in CI: Microsoft.Extensions.Hosting.InternalHostTests.HostApplicationLifetimeEventsOrderedCorrectlyDuringShutdown",
        "labels":  [
                       "area-Extensions-Hosting"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/53831",
        "createdAt":  "2021-06-07T19:43:15Z",
        "number":  53831,
        "author":  "tthiery",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC16vtw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jakmeier",
                                            "createdAt":  "2024-02-16T16:05:51Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2021-07-21T03:20:56Z",
        "body":  "\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\n````csharp\r\nclass FooService : IHostedService\r\n{\r\n    public FooService() {}\r\n    /* ... */\r\n}\r\nclass BarService : IHostedService\r\n{\r\n    public BarService(FooService foo) {}\r\n    /* ... */\r\n}\r\n\r\nservices.AddHostedService\u003cFooService\u003e(); // works\r\nservices.AddHostedService\u003cBarService\u003e(); // crashes when because DI container does not find FooService\r\n````\r\n\r\nThe issue is quite straight forward in the .NET [source code](https://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.Extensions.Hosting.Abstractions/src/ServiceCollectionHostedServiceExtensions.cs#L22) because the `THostedService` is not registered but instead a `IHostedService` ...\r\n\r\n````csharp\r\npublic static IServiceCollection AddHostedService\u003cTHostedService\u003e(this IServiceCollection services)\r\n    where THostedService : class, IHostedService\r\n{\r\n     services.TryAddEnumerable(ServiceDescriptor.Singleton\u003cIHostedService, THostedService\u003e());\r\n     return services;\r\n}\r\n````\r\n\r\nThe common workaround seems to be like\r\n\r\n````csharp\r\nservices.AddSingleton\u003cFooService\u003e();\r\nservices.AddSingleton\u003cBarService\u003e(); \r\nservices.AddHostedService(sp =\u003e sp.GetService\u003cFooService\u003e());\r\nservices.AddHostedService(sp =\u003e sp.GetService\u003cBarService\u003e());\r\n````\r\n\r\nMy expectation was clearly, that the type I register with a `ServiceCollection.Add*` function later can be retrieved. I lost several hours due to this until I found the answer somewhere on StackOverflow.\r\n\r\n### Configuration\r\n\r\n- .NET 5\r\n- OS/Arch: Does not matter\r\n\r\n### Regression?\r\n\r\nNo\r\n\r\n### Other information\r\n\r\nIf the vote is not to double register the service (I assume the `IHostedService` is needed for the host logic), I would at least propose to add a warning in the documentation and maybe the function inline documentation.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMwis7Q==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NjIwNjU3Mw==",
                                           "createdAt":  "2021-06-07T19:43:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eerhardt, @maryamariyan\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\n````csharp\r\nclass FooService : IHostedService\r\n{\r\n    public FooService() {}\r\n    /* ... */\r\n}\r\nclass BarService : IHostedService\r\n{\r\n    public BarService(FooService foo) {}\r\n    /* ... */\r\n}\r\n\r\nservices.AddHostedService\u003cFooService\u003e(); // works\r\nservices.AddHostedService\u003cBarService\u003e(); // crashes when because DI container does not find FooService\r\n````\r\n\r\nThe issue is quite straight forward in the .NET [source code](https://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.Extensions.Hosting.Abstractions/src/ServiceCollectionHostedServiceExtensions.cs#L22) because the `THostedService` is not registered but instead a `IHostedService` ...\r\n\r\n````csharp\r\npublic static IServiceCollection AddHostedService\u003cTHostedService\u003e(this IServiceCollection services)\r\n    where THostedService : class, IHostedService\r\n{\r\n     services.TryAddEnumerable(ServiceDescriptor.Singleton\u003cIHostedService, THostedService\u003e());\r\n     return services;\r\n}\r\n````\r\n\r\nThe common workaround seems to be like\r\n\r\n````csharp\r\nservices.AddSingleton\u003cFooService\u003e();\r\nservices.AddSingleton\u003cBarService\u003e(); \r\nservices.AddHostedService(sp =\u003e sp.GetService\u003cFooService\u003e());\r\nservices.AddHostedService(sp =\u003e sp.GetService\u003cBarService\u003e());\r\n````\r\n\r\nMy expectation was clearly, that the type I register with a `ServiceCollection.Add*` function later can be retrieved. I lost several hours due to this until I found the answer somewhere on StackOverflow.\r\n\r\n### Configuration\r\n\r\n- .NET 5\r\n- OS/Arch: Does not matter\r\n\r\n### Regression?\r\n\r\nNo\r\n\r\n### Other information\r\n\r\nIf the vote is not to double register the service (I assume the `IHostedService` is needed for the host logic), I would at least propose to add a warning in the documentation and maybe the function inline documentation.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003etthiery\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Hosting`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-06-07T19:43:19Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "AddHostedService does not register specified Type Parameter in DI container",
        "labels":  [
                       "area-Extensions-Hosting"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/54654",
        "createdAt":  "2021-06-23T22:51:18Z",
        "number":  54654,
        "author":  "LarinLive",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCuqvjA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "abbottdev",
                                            "createdAt":  "2023-03-02T12:56:15Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2021-06-24T18:40:15Z",
        "body":  "Hello.\r\n\r\nCould you provide support for running a .Net Generic Host as an MacOS daemon? It is needed something like the Microsoft.Extensions.Hosting.Systemd package but for MacOS.\r\n\r\nAnton",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOM7PXPA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2NzIwOTcyMw==",
                                           "createdAt":  "2021-06-23T22:51:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eerhardt, @maryamariyan\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nHello.\r\n\r\nCould you provide support for running a .Net Generic Host as an MacOS daemon? It is needed something like the Microsoft.Extensions.Hosting.Systemd package but for MacOS.\r\n\r\nAnton\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eAntonPlotnikov\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Hosting`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-06-23T22:51:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2NzQyNDA2MA==",
                                           "createdAt":  "2021-06-24T07:55:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "See more details here https://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLaunchdJobs.html.\r\n\r\nPS: I\u0027m not yet sure what features this package would have. If you could provide details that would be great.",
                                           "updatedAt":  "2021-06-24T07:56:40Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Microsoft.Extensions.Hosting and MacOS daemons",
        "labels":  [
                       "area-Extensions-Hosting"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/58715",
        "createdAt":  "2021-09-06T08:15:53Z",
        "number":  58715,
        "author":  "fgheysels",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCFx7WQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gnjack",
                                            "createdAt":  "2021-12-08T17:57:20Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-03-23T10:13:19Z",
        "body":  "I\u0027ve noticed that, if you have multiple `BackgroundServices`, the `StopAsync` method of those services is not called in parallel when the host is stopping.  They\u0027re rather called in a blocking fashion.\r\n\r\nSuppose:\r\n\r\n```csharp\r\n static async Task Main(string[] args)\r\n{\r\n    var host = Host.CreateDefaultBuilder(args)\r\n                   .ConfigureServices(services =\u003e\r\n                   {\r\n                       services.AddHostedService\u003cWorker1\u003e();\r\n                       services.AddHostedService\u003cWorker2\u003e();\r\n                   })\r\n                   .UseConsoleLifetime()\r\n                   .Build();\r\n            \r\n    await host.RunAsync(CancellationTokenSource.Token);\r\n}\r\n```\r\n\r\nAnd we have these backgroundservices:\r\n\r\n```csharp\r\npublic class Worker1 : BackgroundService\r\n{\r\n    protected override async Task ExecuteAsync(CancellationToken stoppingToken)\r\n    {\r\n        while (stoppingToken.IsCancellationRequested == false)\r\n        {\r\n            Console.WriteLine(\"working\");\r\n            await Task.Delay(TimeSpan.FromMilliseconds(2000), stoppingToken);\r\n        }\r\n    }\r\n\r\n    public override async Task StopAsync(CancellationToken cancellationToken)\r\n    {\r\n        Console.WriteLine(\"Stop called for worker 1\");\r\n        await base.StopAsync(cancellationToken);\r\n    }\r\n}\r\n\r\npublic class Worker2 : BackgroundService\r\n{\r\n    protected override async Task ExecuteAsync(CancellationToken stoppingToken)\r\n    {\r\n        while (stoppingToken.IsCancellationRequested == false)\r\n        {\r\n            Console.WriteLine(\"working 2\");\r\n            await Task.Delay(TimeSpan.FromMilliseconds(2000), stoppingToken);\r\n        }\r\n    }\r\n\r\n    public override async Task StopAsync(CancellationToken cancellationToken)\r\n    {\r\n        Console.WriteLine(\"stop called for 2\");\r\n        await Task.Delay(TimeSpan.FromSeconds(10));\r\n        await base.StopAsync(cancellationToken);\r\n        Console.WriteLine(\"stop 2 finished\");\r\n    }\r\n}\r\n```\r\n\r\nWhen running the application, and then pressing ctrl+c, we see this output:\r\n\r\n![image](https://user-images.githubusercontent.com/3605786/132183334-01629b00-b0ae-46f9-a4f3-deff86a2608e.png)\r\n\r\nThis means that the `StopAsync` method for the last registered backgroundservice is called first, and the runtime is waiting for this `StopAsync` method to finish before `StopAsync` for the other worker is called.\r\n\r\nIs there a reason why the `StopAsync` methods are not called in parallel, and all the returned tasks are awaited ?\r\nSomething like this ?  (pseudo-code off course)\r\n```\r\nvar services = this.HostedServices;\r\n\r\nvar stopTasks = new List\u003cTask\u003e();\r\n\r\nforeach( var service in services )\r\n{\r\n    stopTasks.Add(service.StopAsync());\r\n}\r\n\r\nawait Task.WhenAll(stopTasks);\r\n```\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOeDBS2Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc42cg-C",
                                           "createdAt":  "2021-09-06T08:15:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-09-06T08:15:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42chKy",
                                           "createdAt":  "2021-09-06T08:17:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fgheysels",
                                           "body":  "Best label would be area-Extensions-Hosting imho.",
                                           "updatedAt":  "2021-09-06T08:17:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42oqSn",
                                           "createdAt":  "2021-09-10T04:49:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eerhardt, @maryamariyan\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nI\u0027ve noticed that, if you have multiple `BackgroundServices`, the `StopAsync` method of those services is not called in parallel when the host is stopping.  They\u0027re rather called in a blocking fashion.\r\n\r\nSuppose:\r\n\r\n```csharp\r\n static async Task Main(string[] args)\r\n{\r\n    var host = Host.CreateDefaultBuilder(args)\r\n                   .ConfigureServices(services =\u003e\r\n                   {\r\n                       services.AddHostedService\u003cWorker1\u003e();\r\n                       services.AddHostedService\u003cWorker2\u003e();\r\n                   })\r\n                   .UseConsoleLifetime()\r\n                   .Build();\r\n            \r\n    await host.RunAsync(CancellationTokenSource.Token);\r\n}\r\n```\r\n\r\nAnd we have these backgroundservices:\r\n\r\n```csharp\r\npublic class Worker1 : BackgroundService\r\n{\r\n    protected override async Task ExecuteAsync(CancellationToken stoppingToken)\r\n    {\r\n        while (stoppingToken.IsCancellationRequested == false)\r\n        {\r\n            Console.WriteLine(\"working\");\r\n            await Task.Delay(TimeSpan.FromMilliseconds(2000), stoppingToken);\r\n        }\r\n    }\r\n\r\n    public override async Task StopAsync(CancellationToken cancellationToken)\r\n    {\r\n        Console.WriteLine(\"Stop called for worker 1\");\r\n        await base.StopAsync(cancellationToken);\r\n    }\r\n}\r\n\r\npublic class Worker2 : BackgroundService\r\n{\r\n    protected override async Task ExecuteAsync(CancellationToken stoppingToken)\r\n    {\r\n        while (stoppingToken.IsCancellationRequested == false)\r\n        {\r\n            Console.WriteLine(\"working 2\");\r\n            await Task.Delay(TimeSpan.FromMilliseconds(2000), stoppingToken);\r\n        }\r\n    }\r\n\r\n    public override async Task StopAsync(CancellationToken cancellationToken)\r\n    {\r\n        Console.WriteLine(\"stop called for 2\");\r\n        await Task.Delay(TimeSpan.FromSeconds(10));\r\n        await base.StopAsync(cancellationToken);\r\n        Console.WriteLine(\"stop 2 finished\");\r\n    }\r\n}\r\n```\r\n\r\nWhen running the application, and then pressing ctrl+c, we see this output:\r\n\r\n![image](https://user-images.githubusercontent.com/3605786/132183334-01629b00-b0ae-46f9-a4f3-deff86a2608e.png)\r\n\r\nThis means that the `StopAsync` method for the last registered backgroundservice is called first, and the runtime is waiting for this `StopAsync` method to finish before `StopAsync` for the other worker is called.\r\n\r\nIs there a reason why the `StopAsync` methods are not called in parallel, and all the returned tasks are awaited ?\r\nSomething like this ?  (pseudo-code off course)\r\n```\r\nvar services = this.HostedServices;\r\n\r\nvar stopTasks = new List\u003cTask\u003e();\r\n\r\nforeach( var service in services )\r\n{\r\n    stopTasks.Add(service.StopAsync());\r\n}\r\n\r\nawait Task.WhenAll(stopTasks);\r\n```\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003efgheysels\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Hosting`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-09-10T04:49:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42pjs3",
                                           "createdAt":  "2021-09-10T12:21:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "It is the same for `StartAsync`, they are started sequentially and not in parallel.\r\n\r\nhttps://github.com/dotnet/runtime/blob/df6e28ee6312184a5ee9c64f6460bd86ea5886e1/src/libraries/Microsoft.Extensions.Hosting/src/Internal/Host.cs#L63-L66\r\n\r\nhttps://github.com/dotnet/runtime/blob/df6e28ee6312184a5ee9c64f6460bd86ea5886e1/src/libraries/Microsoft.Extensions.Hosting/src/Internal/Host.cs#L119-L123\r\n\r\nIn your above code example, if you call `base.StopAsync` right away, your `ExecuteAsync` method will stop running right away:\r\n\r\n```C#\r\npublic override async Task StopAsync(CancellationToken cancellationToken)\r\n    {\r\n        Console.WriteLine(\"stop called for 2\");\r\n        await base.StopAsync(cancellationToken);\r\n        await Task.Delay(TimeSpan.FromSeconds(10));\r\n        Console.WriteLine(\"stop 2 finished\");\r\n    }\r\n```",
                                           "updatedAt":  "2021-09-10T12:21:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54MFLZ",
                                           "createdAt":  "2024-03-23T09:59:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "Concurrent StopAsync was implemented in \u003chttps://github.com/dotnet/runtime/pull/84048\u003e.  I suggest closing this issue as a duplicate of \u003chttps://github.com/dotnet/runtime/issues/68036\u003e.",
                                           "updatedAt":  "2024-03-23T10:13:19Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "StopAsync of BackgroundServices is called sequentially",
        "labels":  [
                       "question",
                       "area-Extensions-Hosting"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/59977",
        "createdAt":  "2021-09-30T19:49:46Z",
        "number":  59977,
        "author":  "mnicolaides",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-10-05T14:48:37Z",
        "body":  "### Description\r\nI\u0027ve created a .NET 5 Windows service based on [https://docs.microsoft.com/en-us/dotnet/core/extensions/windows-service](https://docs.microsoft.com/en-us/dotnet/core/extensions/windows-service) (did not used the single-file self-contained output). The service is created/started/stopped all via servicer controller.\r\n\r\nAfter a number of stop, wait 10 seconds, start attempts (could be up to 20) an error will display in the Event Viewer\u0027 System log after an `sc stop`.\r\n`The TestService service terminated unexpectedly.  It has done this 1 time(s).`\r\n\r\nAnd this MAY display in the Event Viewer\u0027s Application log after an `sc stop` also.\r\n`Application: TestService.exe\r\nCoreCLR Version: 5.0.921.35908\r\n.NET Version: 5.0.9\r\nDescription: The process was terminated due to an internal error in the .NET Runtime at IP 00007FFBA4C11EA9 (00007FFBA4A60000) with exit code c0000005.`\r\n\r\nIs this a legitimate issue or is this just a nuisance?\r\n\r\n\u003c!--\r\n* Please share a clear and concise description of the problem.\r\n* Include minimal steps to reproduce the problem if possible. E.g.: the smallest possible code snippet; or a small repo to clone, with steps to run it.\r\n* What behavior are you seeing, and what behavior would you expect?\r\n  --\u003e\r\n\r\n### Configuration\r\nNLog is the provider for MS logging\r\n.NET 5.0.303\r\nWindows 10 Version - 10.0.19042 Build 19042\r\nx64 arch\r\nService created based on: https://docs.microsoft.com/en-us/dotnet/core/extensions/windows-service\r\n\r\n### Code\r\n**Program.cs**\r\n`\r\nusing Microsoft.Extensions.DependencyInjection;\r\nusing Microsoft.Extensions.Hosting;\r\nusing Microsoft.Extensions.Logging;\r\nusing System.Threading.Tasks;\r\nusing NLog.Extensions.Hosting;\r\nusing NLog.Extensions.Logging;\r\nusing NLog;\r\n\r\nnamespace TestService\r\n{\r\n    public class Program\r\n    {\r\n        static Logger logger_ = LogManager.GetLogger(\"TestService\");\r\n\r\n        public static async Task Main(string[] args)\r\n        {\r\n            var builder = CreateHostBuilder(args);\r\n            builder.UseWindowsService();\r\n            logger_.Info($\"await builder.Build().RunAsync();\");\r\n            await builder.Build().RunAsync();\r\n            LogManager.Shutdown();\r\n        }\r\n\r\n        public static IHostBuilder CreateHostBuilder(string[] args) =\u003e\r\n            Host.CreateDefaultBuilder(args)\r\n            .ConfigureLogging((webhostContext, loggingBuilder) =\u003e\r\n            {\r\n                loggingBuilder.ClearProviders();\r\n                loggingBuilder.SetMinimumLevel(Microsoft.Extensions.Logging.LogLevel.Trace);\r\n                loggingBuilder.AddNLog(webhostContext.Configuration);\r\n            })\r\n            .ConfigureServices((hostContext, services) =\u003e\r\n            {\r\n                services.AddHostedService\u003cWorker\u003e();\r\n            })\r\n            .UseNLog();\r\n    }\r\n}\r\n\r\n`\r\n\r\n**Worker.cs**\r\n`\r\nusing Microsoft.Extensions.Hosting;\r\nusing Microsoft.Extensions.Logging;\r\nusing System;\r\nusing System.Linq;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\n\r\npublic sealed class Worker : BackgroundService\r\n    {\r\n        private readonly ILogger\u003cWorker\u003e _logger;\r\n        private int executionCount = 0;\r\n        private static bool _isDebug = false;\r\n\r\n        public Worker(ILogger\u003cWorker\u003e logger) =\u003e (_logger) = (logger);\r\n\r\n        protected override async Task ExecuteAsync(CancellationToken stoppingToken)\r\n        {\r\n            while (!stoppingToken.IsCancellationRequested)\r\n            {\r\n                try\r\n                {\r\n                    var count = Interlocked.Increment(ref executionCount);\r\n\r\n                    _logger.LogInformation(\"Background Service is working. Count: {Count}\", count);\r\n\r\n                    await Task.Delay(TimeSpan.FromSeconds(1), stoppingToken);\r\n                }\r\n                catch (OperationCanceledException)\r\n                {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n}`\r\n\r\n\u003c!--\r\n* Which version of .NET is the code running on?\r\n* What OS and version, and for Linux, what distro?\r\n* What is the architecture (x64, x86, ARM, ARM64)?\r\n* Do you know whether it is specific to that configuration?\r\n* If you\u0027re using Blazor, which web browser(s) do you see this issue in?\r\n  --\u003e\r\n\r\n### Regression?\r\n\r\n\u003c!--\r\n* Did this work in a previous build or release of .NET Core, or from .NET Framework? If you can try a previous release or build to find out, that can help us narrow down the problem. If you don\u0027t know, that\u0027s OK.\r\n  --\u003e\r\n\r\n### Other information\r\n\r\n\u003c!--\r\n* Please include any relevant stack traces or error messages. If possible please include text as text rather than images (so it shows up in searches).\r\n* If you have an idea where the problem might lie, let us know that here. Please include any pointers to code, relevant changes, or related issues you know of.\r\n* Do you know of any workarounds?\r\n  --\u003e\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHON6v-vA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc43q8g8",
                                           "createdAt":  "2021-10-05T02:22:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-10-05T02:22:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43q_ts",
                                           "createdAt":  "2021-10-05T03:01:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eerhardt, @maryamariyan\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\nI\u0027ve created a .NET 5 Windows service based on [https://docs.microsoft.com/en-us/dotnet/core/extensions/windows-service](https://docs.microsoft.com/en-us/dotnet/core/extensions/windows-service) (did not used the single-file self-contained output). The service is created/started/stopped all via servicer controller.\r\n\r\nAfter a number of stop, wait 10 seconds, start attempts (could be up to 20) an error will display in the Event Viewer\u0027 System log after an `sc stop`.\r\n`The TestService service terminated unexpectedly.  It has done this 1 time(s).`\r\n\r\nAnd this MAY display in the Event Viewer\u0027s Application log after an `sc stop` also.\r\n`Application: TestService.exe\r\nCoreCLR Version: 5.0.921.35908\r\n.NET Version: 5.0.9\r\nDescription: The process was terminated due to an internal error in the .NET Runtime at IP 00007FFBA4C11EA9 (00007FFBA4A60000) with exit code c0000005.`\r\n\r\nIs this a legitimate issue or is this just a nuisance?\r\n\r\n\u003c!--\r\n* Please share a clear and concise description of the problem.\r\n* Include minimal steps to reproduce the problem if possible. E.g.: the smallest possible code snippet; or a small repo to clone, with steps to run it.\r\n* What behavior are you seeing, and what behavior would you expect?\r\n  --\u003e\r\n\r\n### Configuration\r\nNLog is the provider for MS logging\r\n.NET 5.0.303\r\nWindows 10 Version - 10.0.19042 Build 19042\r\nx64 arch\r\nService created based on: https://docs.microsoft.com/en-us/dotnet/core/extensions/windows-service\r\n\r\n### Code\r\n**Program.cs**\r\n`\r\nusing Microsoft.Extensions.DependencyInjection;\r\nusing Microsoft.Extensions.Hosting;\r\nusing Microsoft.Extensions.Logging;\r\nusing System.Threading.Tasks;\r\nusing NLog.Extensions.Hosting;\r\nusing NLog.Extensions.Logging;\r\nusing NLog;\r\n\r\nnamespace TestService\r\n{\r\n    public class Program\r\n    {\r\n        static Logger logger_ = LogManager.GetLogger(\"TestService\");\r\n\r\n        public static async Task Main(string[] args)\r\n        {\r\n            var builder = CreateHostBuilder(args);\r\n            builder.UseWindowsService();\r\n            logger_.Info($\"await builder.Build().RunAsync();\");\r\n            await builder.Build().RunAsync();\r\n            LogManager.Shutdown();\r\n        }\r\n\r\n        public static IHostBuilder CreateHostBuilder(string[] args) =\u003e\r\n            Host.CreateDefaultBuilder(args)\r\n            .ConfigureLogging((webhostContext, loggingBuilder) =\u003e\r\n            {\r\n                loggingBuilder.ClearProviders();\r\n                loggingBuilder.SetMinimumLevel(Microsoft.Extensions.Logging.LogLevel.Trace);\r\n                loggingBuilder.AddNLog(webhostContext.Configuration);\r\n            })\r\n            .ConfigureServices((hostContext, services) =\u003e\r\n            {\r\n                services.AddHostedService\u003cWorker\u003e();\r\n            })\r\n            .UseNLog();\r\n    }\r\n}\r\n\r\n`\r\n\r\n**Worker.cs**\r\n`\r\nusing Microsoft.Extensions.Hosting;\r\nusing Microsoft.Extensions.Logging;\r\nusing System;\r\nusing System.Linq;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\n\r\npublic sealed class Worker : BackgroundService\r\n    {\r\n        private readonly ILogger\u003cWorker\u003e _logger;\r\n        private int executionCount = 0;\r\n        private static bool _isDebug = false;\r\n\r\n        public Worker(ILogger\u003cWorker\u003e logger) =\u003e (_logger) = (logger);\r\n\r\n        protected override async Task ExecuteAsync(CancellationToken stoppingToken)\r\n        {\r\n            while (!stoppingToken.IsCancellationRequested)\r\n            {\r\n                try\r\n                {\r\n                    var count = Interlocked.Increment(ref executionCount);\r\n\r\n                    _logger.LogInformation(\"Background Service is working. Count: {Count}\", count);\r\n\r\n                    await Task.Delay(TimeSpan.FromSeconds(1), stoppingToken);\r\n                }\r\n                catch (OperationCanceledException)\r\n                {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n}`\r\n\r\n\u003c!--\r\n* Which version of .NET is the code running on?\r\n* What OS and version, and for Linux, what distro?\r\n* What is the architecture (x64, x86, ARM, ARM64)?\r\n* Do you know whether it is specific to that configuration?\r\n* If you\u0027re using Blazor, which web browser(s) do you see this issue in?\r\n  --\u003e\r\n\r\n### Regression?\r\n\r\n\u003c!--\r\n* Did this work in a previous build or release of .NET Core, or from .NET Framework? If you can try a previous release or build to find out, that can help us narrow down the problem. If you don\u0027t know, that\u0027s OK.\r\n  --\u003e\r\n\r\n### Other information\r\n\r\n\u003c!--\r\n* Please include any relevant stack traces or error messages. If possible please include text as text rather than images (so it shows up in searches).\r\n* If you have an idea where the problem might lie, let us know that here. Please include any pointers to code, relevant changes, or related issues you know of.\r\n* Do you know of any workarounds?\r\n  --\u003e\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emnicolaides\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Hosting`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-10-05T03:01:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43q_68",
                                           "createdAt":  "2021-10-05T03:03:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Hello. This info isn’t enough to investigate unfortunately. The most common cause of fatal runtime errors is likely bad interop or other unsafe code, rather than a runtime bug.\r\nDoes it repro with 6.0 RC1?\r\nIs it possible to reduce to a minimal repro program we can try?",
                                           "updatedAt":  "2021-10-05T03:03:44Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Stopping and starting .NET 5 Windows service randomly causes a error entry in the Event Viewer",
        "labels":  [
                       "area-Extensions-Hosting"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/61349",
        "createdAt":  "2021-11-05T22:08:37Z",
        "number":  61349,
        "author":  "vsfeedback",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-08-16T21:40:17Z",
        "body":  "_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/Worker-Service:-Windows-Service-argument/1566442)._\n\n---\n[severity:It bothers me. A fix would be nice]\r\nTo reproduce this: Create a Windows Service, created with .NET 5.0 using the \"Worker Service\" template - inheriting from BackgroundService , after the service is deployed,  arguments are not picked up and passed to the service.  \n\ne.g. a basic Worker service which prints the args passed to it  (to a log file or event log)\nRun in debug, and the arguments are printed\n\nPublish and application, and install it as a service, and it does not pick up arguments\n\nTo create the service from PowerShell, I am using these commands\n\n`sc.exe create MyService binpath= \"C:\\Temp\\MyService\\MyService.exe\" DisplayName= My Test Service\" start= auto`\n\nI verified that the service exists in the Services App:  Then start the service with arguments\n\n`sc.exe start MyService arg1 arg2` \n\nArguments are not picked up by the service\n\nAlternative start method\n\n```\n$service = Get-Service MyService\n$service. Start(@(\u0027arg1\u0027,\u0027arg2\u0027))\n```\n\nAgain arguments are not picked up by the service\n\nHowever, If I create the service, and add the arguments to the binpath, then the arguments ARE passed correctly\n\n```\nsc.exe create MyService binpath= \"C:\\Temp\\MyService\\MyService.exe arg1 arg2\" DisplayName= My Test Service\" start= auto\nsc.exe start MyService\n```\n\nArguments (from binpath) are picked up - as long as the arguments are within the quotes\n\nThis seems to be a problem with Windows passing arguments to a Worker-Style service .  \nMy guess is something the fault lies in  Microsoft.Extensions.Hosting.WindowsService\n\nOld-style Windows services can still be created using this version of Visual Studio - and the argument passing works fine.\nThis only affects the new-style Worker Service projects\n\n---\n### Original Comments\n\n#### Feedback Bot on 10/28/2021, 08:29 PM: \n\n\u003cp\u003eWe have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.\u003c/p\u003e\n\n\n---\n### Original Solutions\n(no solutions)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSIzuhw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc45b2kB",
                                           "createdAt":  "2021-11-08T21:44:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "I remember there being something strange about the way args flow in a windows service process. I don\u0027t think they\u0027re passed to Main, you get them later.\r\nhttps://github.com/dotnet/runtime/blob/704f023147b49692cec842427b116e9ee7e64305/src/libraries/System.ServiceProcess.ServiceController/src/System/ServiceProcess/ServiceBase.cs#L366-L381",
                                           "updatedAt":  "2021-11-08T21:44:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45ck2L",
                                           "createdAt":  "2021-11-09T03:52:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "They aren\u0027t and this would need to be opt in if we wanted to support it.",
                                           "updatedAt":  "2021-11-09T03:52:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45ck4j",
                                           "createdAt":  "2021-11-09T03:52:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Moving to runtime",
                                           "updatedAt":  "2021-11-09T03:52:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45urbG",
                                           "createdAt":  "2021-11-15T04:53:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eerhardt, @maryamariyan\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/Worker-Service:-Windows-Service-argument/1566442)._\n\n---\n[severity:It bothers me. A fix would be nice]\r\nTo reproduce this: Create a Windows Service, created with .NET 5.0 using the \"Worker Service\" template - inheriting from BackgroundService , after the service is deployed,  arguments are not picked up and passed to the service.  \n\ne.g. a basic Worker service which prints the args passed to it  (to a log file or event log)\nRun in debug, and the arguments are printed\n\nPublish and application, and install it as a service, and it does not pick up arguments\n\nTo create the service from PowerShell, I am using these commands\n\n`sc.exe create MyService binpath= \"C:\\Temp\\MyService\\MyService.exe\" DisplayName= My Test Service\" start= auto`\n\nI verified that the service exists in the Services App:  Then start the service with arguments\n\n`sc.exe start MyService arg1 arg2` \n\nArguments are not picked up by the service\n\nAlternative start method\n\n```\n$service = Get-Service MyService\n$service. Start(@(\u0027arg1\u0027,\u0027arg2\u0027))\n```\n\nAgain arguments are not picked up by the service\n\nHowever, If I create the service, and add the arguments to the binpath, then the arguments ARE passed correctly\n\n```\nsc.exe create MyService binpath= \"C:\\Temp\\MyService\\MyService.exe arg1 arg2\" DisplayName= My Test Service\" start= auto\nsc.exe start MyService\n```\n\nArguments (from binpath) are picked up - as long as the arguments are within the quotes\n\nThis seems to be a problem with Windows passing arguments to a Worker-Style service .  \nMy guess is something the fault lies in  Microsoft.Extensions.Hosting.WindowsService\n\nOld-style Windows services can still be created using this version of Visual Studio - and the argument passing works fine.\nThis only affects the new-style Worker Service projects\n\n---\n### Original Comments\n\n#### Feedback Bot on 10/28/2021, 08:29 PM: \n\n\u003cp\u003eWe have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.\u003c/p\u003e\n\n\n---\n### Original Solutions\n(no solutions)\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003evsfeedback\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003ebradygaster\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Hosting`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-11-15T04:53:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5F7aHN",
                                           "createdAt":  "2022-07-04T00:06:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dragan-Juric",
                                           "body":  "I just ran into this issue, and it worked without problems in the earlier Windows Service model in .Net 4.7.x...\r\nJust posting here so that you guys know that there may be more people who need this to work :)\r\n",
                                           "updatedAt":  "2022-07-04T00:06:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5F7dOI",
                                           "createdAt":  "2022-07-04T00:45:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "This still works the way it used to work on .NET Framework. This issue is specifically about Microsoft.Extensions.Hosting.WindowsServices.",
                                           "updatedAt":  "2022-07-04T00:46:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5F7hgE",
                                           "createdAt":  "2022-07-04T01:19:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dragan-Juric",
                                           "body":  "Oh, I know it works on .Net Framework. Perhaps I was unclear in my first comment.\r\nI upgraded a .Net Framework Windows Service project to .Net 6, complete with Microsoft.Extensions.Hosting.WindowsServices and all that... and then it stopped working.\r\n",
                                           "updatedAt":  "2022-07-04T01:19:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IghL1",
                                           "createdAt":  "2022-08-16T11:03:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pstrus",
                                           "body":  "I\u0027m having same issue .Is there any way/workaround to read these params ?",
                                           "updatedAt":  "2022-08-16T11:03:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IieyV",
                                           "createdAt":  "2022-08-16T18:28:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCt_pLw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eerhardt",
                                                                               "createdAt":  "2022-08-18T22:45:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nestorpal",
                                                                               "createdAt":  "2022-10-17T21:53:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "```C#\r\nusing System.ServiceProcess;\r\nusing WorkerService1;\r\n\r\nvar service = new MyService();\r\nServiceBase.Run(service);\r\nif (service.TheHost != null)\r\n{\r\n    await service.TheHost.StopAsync();\r\n}\r\n\r\nclass MyService : ServiceBase\r\n{\r\n    private IHost? _host;\r\n\r\n    public IHost? TheHost =\u003e _host;\r\n\r\n    protected override void OnStart(string[] args)\r\n    {\r\n        _host = Host.CreateDefaultBuilder(args)\r\n        .ConfigureServices(services =\u003e\r\n        {\r\n            services.AddHostedService\u003cWorker\u003e();\r\n        })\r\n        .Build();\r\n\r\n        _host.Start();\r\n        base.OnStart(args);\r\n    }\r\n}\r\n```",
                                           "updatedAt":  "2022-08-16T21:39:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IjO6H",
                                           "createdAt":  "2022-08-16T21:40:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "This will use the args from the start instead.",
                                           "updatedAt":  "2022-08-16T21:40:17Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "Worker Service: Windows Service arguments are not picked up ",
        "labels":  [
                       "area-Extensions-Hosting"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/61967",
        "createdAt":  "2021-11-23T15:11:02Z",
        "number":  61967,
        "author":  "Timovzl",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC7yYjQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gimlichael",
                                            "createdAt":  "2024-10-13T18:35:28Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2021-12-02T00:00:20Z",
        "body":  "**Background Services vs. Regular Hosted Services**\r\n\r\nWhen implementing a service that should perform startup and/or shutdown logic, we implement `IHostedService`. When implementing services that should perform background work, we inherit from `BackgroundService`. This way, our service needs to implement the set of methods that makes the most sense for the situation.\r\n\r\nFor an `IHostedService`, it makes sense that `StartAsync` is invoked before the host starts listening for requests (in the cast of a web host) and application startup is considered completed. After all, an `IHostedService` is permitted to cause application startup to fail (since .NET Core 3, IIRC).\r\n\r\nFor a `BackgroundService`, however, it makes much less sense for the (likely continuous) work to cause application startup to fail. The current behavior (with .NET 6) is:\r\n\r\n1. If `ExecuteAsync` throws after any `await`, `HostOptions.BackgroundServiceExceptionBehavior` is honored, leading to host shutdown (default) or the ignoring of the exception. This is good.\r\n2. If `ExecuteAsync` throws _before_ any `await`, application shutdown is prevented. Arguably, this is not as good.\r\n\r\nAn exception in _background_ logic that just so happens to occur before the first `await` should probably not be treated differently.\r\n\r\nMore importantly, however, background work is currently started _before the host has successfully started_ (e.g. is ready to accept requests, if it is a web host). This makes little sense. In fact, if the `BackgroundService` happens to have been registered _before_ a non-background `IHostedService`, the background work will actually start _before_ the latter service\u0027s startup logic. Halfway through the background work, the latter service may throw and thus prevent successful application startup. Confusing.\r\n\r\nAs a simple way to observe the confusing scenario, register a background service that logs to the console. Notice how the background work starts getting logged before the host logs that it is ready to serve requests. Confusing.\r\n\r\nIt would make so much more sense for background services to start their actual work _after_ the application has successfully started.\r\n\r\n**Proposed Solution**\r\n\r\nI reason that it makes perfect sense for the logic in `BackgroundService.StartAsync` to await `IHostApplicationLifetime.ApplicationStarted` before invoking `ExecuteAsync`.\r\n\r\n```cs\r\nTask.Delay(Timeout.InfiniteTimeSpan, // Wait \"indefinitely\"...\r\n    this.HostApplicationLifetime.ApplicationStarted) // ...but actually only until ApplicationStarted is triggered...\r\n    .ContinueWith( _ =\u003e this.ExecuteAsync(ct), TaskContinuationOptions.OnlyOnCanceled); // ...and then ExecuteAsync\r\n```\r\n\r\nFor simplicity, the above snippet does not take into account startup cancellation.\r\n\r\n**Considerations**\r\n\r\nAs a natural consequence, the proposed solution changes the behavior of the scenario from bullet point 2 above to match the behavior described in bullet point 1. I would argue that this is an improvement. Inheriting from `BackgroundService` is a clear declaration of intent. The proposed solution more closely aligns the behavior to that intent. And `HostOptions.BackgroundServiceExceptionBehavior` still grants control over uncaught exception handling.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOOqkv8g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc46NxdN",
                                           "createdAt":  "2021-11-23T15:11:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eerhardt, @maryamariyan\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n**Background Services vs. Regular Hosted Services**\r\n\r\nWhen implementing a service that should perform startup and/or shutdown logic, we implement `IHostedService`. When implementing services that should perform background work, we inherit from `BackgroundService`. This way, our service needs to implement the set of methods that makes the most sense for the situation.\r\n\r\nFor an `IHostedService`, it makes sense that `StartAsync` is invoked before the host starts listening for requests (in the cast of a web host) and application startup is considered completed. After all, an `IHostedService` is permitted to cause application startup to fail (since .NET Core 3, IIRC).\r\n\r\nFor a `BackgroundService`, however, it makes much less sense for the (likely continuous) work to cause application startup to fail. The current behavior (with .NET 6) is:\r\n\r\n1. If `ExecuteAsync` throws after any `await`, `HostOptions.BackgroundServiceExceptionBehavior` is honored, leading to host shutdown (default) or the ignoring of the exception. This is good.\r\n2. If `ExecuteAsync` throws _before_ any `await`, application shutdown is prevented. Arguably, this is not as good.\r\n\r\nAn exception in _background_ logic that just so happens to occur before the first `await` should probably not be treated differently.\r\n\r\nMore importantly, however, background work is currently started _before the host has successfully started_ (e.g. is ready to accept requests, if it is a web host). This makes little sense. In fact, if the `BackgroundService` happens to have been registered _before_ a non-background `IHostedService`, the background work will actually start _before_ the latter service\u0027s startup logic. Halfway through the background work, the latter service may throw and thus prevent successful application startup. Confusing.\r\n\r\nAs a simple way to observe the confusing scenario, register a background service that logs to the console. Notice how the background work starts getting logged before the host logs that it is ready to serve requests. Confusing.\r\n\r\nIt would make so much more sense for background services to start their actual work _after_ the application has successfully started.\r\n\r\n**Proposed Solution**\r\n\r\nI reason that it makes perfect sense for the logic in `BackgroundService.StartAsync` to await `IHostApplicationLifetime.ApplicationStarted` before invoking `ExecuteAsync`.\r\n\r\n```cs\r\nTask.Delay(Timeout.InfiniteTimeSpan, // Wait \"indefinitely\"...\r\n    this.HostApplicationLifetime.ApplicationStarted) // ...but actually only until ApplicationStarted is triggered...\r\n    .ContinueWith( _ =\u003e this.ExecuteAsync(ct), TaskContinuationOptions.OnlyOnCanceled); // ...and then ExecuteAsync\r\n```\r\n\r\nFor simplicity, the above snippet does not take into account startup cancellation.\r\n\r\n**Considerations**\r\n\r\nAs a natural consequence, the proposed solution changes the behavior of the scenario from bullet point 2 above to match the behavior described in bullet point 1. I would argue that this is an improvement. Inheriting from `BackgroundService` is a clear declaration of intent. The proposed solution more closely aligns the behavior to that intent. And `HostOptions.BackgroundServiceExceptionBehavior` still grants control over uncaught exception handling.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eTimovzl\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Hosting`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-11-23T15:11:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46QMaC",
                                           "createdAt":  "2021-11-24T00:46:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "quixoticaxis",
                                           "body":  "Why should the external behavior of a particular implementation of `IHostedService`, namely `BackgroundService`, differ from other implementations?\nAlso `BackgroundService` does not seal `StartAsync` and `StopAsync`, so derived classes can still do any initialization or cleanup if needed.",
                                           "updatedAt":  "2021-11-24T09:59:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46SCRL",
                                           "createdAt":  "2021-11-24T11:54:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Timovzl",
                                           "body":  "@quixoticaxis I believe I have addressed the \"why\" quite extensively in the original post. To summarize, because background services have a different intent (running continuous or periodic background work) than other hosted services, having them wait _just a tad longer_ until startup has finished leads to a more sensible, less confusing result.\r\n\r\n\u003e Also BackgroundService does not seal StartAsync and StopAsync, so derived classes can still do any initialization or cleanup if needed.\r\n\r\nSure, it is possible for every background service we write to override `StartAsync` and make the change ourselves. That is not exactly a desirable situation. Some developers will remember to do this, while others will not. And for third party class libraries (a perfect example being Quartz.NET, the job scheduler) we do not control the background service implementation.\r\n\r\nI am suggesting that the proposed behavior is desirable for all background services, due to their nature.",
                                           "updatedAt":  "2021-11-24T11:54:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46SQAY",
                                           "createdAt":  "2021-11-24T13:09:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "quixoticaxis",
                                           "body":  "I don\u0027t believe so, you mostly presented the \"it makes sense\" arguments.\nWhy do you assume the different intent? `BackgroundService` is per documentation a base class for implementing `IHostedService`, and that\u0027s all.\nWhy its initialization should be called after the host start is not exactly clear.\nMy code would definitely break, because my services need initialization.",
                                           "updatedAt":  "2021-11-24T13:11:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46SYh7",
                                           "createdAt":  "2021-11-24T13:50:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD1519w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gimlichael",
                                                                               "createdAt":  "2024-10-13T18:33:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Timovzl",
                                           "body":  "\u003e Why do you assume the different intent?\r\n\r\nFirst of all, the name indicates background work, which is different from startup/shutdown work.\r\n\r\nSecond, the docs [state](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/hosted-services?view=aspnetcore-6.0\u0026tabs=visual-studio#backgroundservice-base-class) that \"`BackgroundService` is a base class for implementing a _long running_ `IHostedService`\" (emphasis mine). They proceed to state: \"Avoid performing long, blocking initialization work in `ExecuteAsync`.\" And finally: \"`StartAsync` should be limited to short running tasks because hosted services are run sequentially, and no further services are started until `StartAsync` runs to completion. Long running tasks should be placed in `ExecuteAsync`.\"\r\n\r\nAll of the above seems to support the intent of performing long-running background work that is specific to `BackgroundService`. By definition, long-running background work is a clearly distinct concept from short-running startup work.\r\n\r\nNote that a `BackgroundService` could still override `StartAsync` if it _also_ features short-running startup work. (By delegating to `base.StartAsync` at the end, it would still benefit from the proposal.)\r\n\r\n\u003e Why its initialization should be called after the host start is not exactly clear.\r\n\r\nI have provided two examples of how the current situation is confusing and somewhat illogical, including the running of long-running background work when application startup still has the chance to fail.\r\n\r\nAdditionally, I might add that it seems strange to start running long-running background work when an application\u0027s health check endpoint is not even _reachable_ yet. A completed startup and a reachable health check endpoint (where applicable) seems like a sensible bare minimum for assuming that it is OK to start doing background work.\r\n\r\n\u003e My code would definitely break, because my services need initialization.\r\n\r\nThis is very useful feedback. Can you explain what type of initialization is performed by your background services, and in what precisely things break when they are deferred until after startup completes? Examples are very welcome.",
                                           "updatedAt":  "2021-11-24T13:50:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46SoGF",
                                           "createdAt":  "2021-11-24T15:03:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "quixoticaxis",
                                           "body":  "@Timovzl well, long and short are relative terms. My scenario: my service does some data processing in soft real-time, to start I need to preload around one gigabyte of math data from Kafka parition to launch my long-running message processing, as soon as it is loaded, the healthcheck becomes responsive and Kubernetes makes container public.\nThe start-up is relatively short, it takes seconds, processing is relatively long because it processes the new data as it comes and can and should run for days or weeks.\nAs soon as health check is responsive I would fail to meet my soft real time guarantees if my processing is still waiting for data, which is a no go business-wise.\n\nTheoretically, I could break the service in two: the data initializer and the processor, but the reading is seamless in Apache Kafka, so there\u0027s little reason to.",
                                           "updatedAt":  "2021-11-24T15:04:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46llQQ",
                                           "createdAt":  "2021-11-30T19:03:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sakno",
                                           "body":  "\u003e the healthcheck becomes responsive and Kubernetes makes container public.\r\n\r\nKubernetes already has the solution for such kind of situations: [startup probes](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/). In our company we widely using this type of probes to give the necessary warmup time to .NET microservices. And we also using `BackgroundService` without any changes in CoreFX library. All you need is to switch startup probe to _ready_ state.",
                                           "updatedAt":  "2021-11-30T19:07:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46l6V-",
                                           "createdAt":  "2021-11-30T21:01:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "quixoticaxis",
                                           "body":  "\u003e \u003e the healthcheck becomes responsive and Kubernetes makes container public.\n\u003e \n\u003e Kubernetes already has the solution for such kind of situations: [startup probes](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/). In our company we widely using this type of probes to give the necessary warmup time to .NET microservices. And we also using `BackgroundService` without any changes in CoreFX library. All you need is to switch startup probe to _ready_ state.\n\nI know, could you clarify your point? I don\u0027t have issues with Kubernetes.",
                                           "updatedAt":  "2021-11-30T21:02:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46n8uC",
                                           "createdAt":  "2021-12-01T11:32:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCExk2w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "quixoticaxis",
                                                                               "createdAt":  "2021-12-01T14:23:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "sakno",
                                           "body":  "That was just a comment that in case of Kubernetes there is a feature provided out-of-the-box. As regards to the subject, there is no relation between web host and custom `BackgroundService`. Both implement the same `IHostedService` interface. So it\u0027s easy to configure the pipeline and specify that custom background service should start after web host. Just call `ConfigureWebHost` on `HostBuilder` directly before registering background service as a singleton in DI instead of using **Startup** class. I think that @Timovzl  uses `ConfigureServices` inside of startup class to register the background service. That\u0027s why it starts before web host.",
                                           "updatedAt":  "2021-12-01T11:32:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46ogT2",
                                           "createdAt":  "2021-12-01T14:29:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "quixoticaxis",
                                           "body":  "@sakno oh, I see. Yeah, actually I\u0027m using it in a very lazy way by configuring startup, readiness, and liveness probes to point at the very same Kestrel\u0027s default healthcheck.\n\nGood point about manual registration. I was too shy to recommend it, because I\u0027ve never did it myself that way (registering web host as a hosted service by hand) and don\u0027t know whether there are any catches.",
                                           "updatedAt":  "2021-12-01T14:29:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46qSDP",
                                           "createdAt":  "2021-12-01T23:52:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "I think this would be \"too breaking\" of a change to make. `BackgroundService` has shipped for a few releases, and there are lots of uses of it out in the ecosystem.\r\n\r\nI\u0027m also not convinced that every `BackgroundService` should have this behavior (even if we were to write it new from scratch). I get that some services might want it. If you need this behavior, you can derive an abstract class from `BackgroundService` and implement it as an extension. You can derive from that class in any service you want.\r\n\r\nPotentially we could consider adding an option for this behavior.\r\n\r\n@davidfowl @Tratcher - thoughts?",
                                           "updatedAt":  "2021-12-01T23:52:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46qS_y",
                                           "createdAt":  "2021-12-02T00:00:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "No we shouldn\u0027t change any behavior here because it would introduce subtle bugs in existing code (even not so subtle deadlocks). IHostedService.Start runs before started. We could add a new Started method that would get called after but we shouldn\u0027t change the existing thing.",
                                           "updatedAt":  "2021-12-02T00:00:20Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "BackgroundService.StartAsync() should await ApplicationStarted",
        "labels":  [
                       "feature-request",
                       "area-Extensions-Hosting"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/63540",
        "createdAt":  "2022-01-08T17:09:02Z",
        "number":  63540,
        "author":  "foriequal0",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC0kBqA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "EpifanovVia",
                                            "createdAt":  "2022-11-15T15:25:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "zahirtezcan-bugs",
                                            "createdAt":  "2023-12-11T17:23:49Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2022-04-27T20:31:19Z",
        "body":  "### Description\r\n\r\nStarting and Stopping a generic host created with ```Host.CreateDefaultBuilder(args)``` in a tight loop can cause inotify limit exception.\r\n\r\n### Reproduction Steps\r\n\r\n```c#\r\nusing System.Threading.Tasks;\r\nusing Microsoft.Extensions.Hosting;\r\n\r\nnamespace App\r\n{\r\n    public class Program\r\n    {\r\n        public static async Task Main(string[] args)\r\n        {\r\n            for (var i = 0; i \u003c 100; i++)\r\n            {\r\n                using var host = await Host.CreateDefaultBuilder(args).StartAsync();\r\n                await host.StopAsync();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\n### Expected behavior\r\n\r\n```JsonConfigurationProvider``` is disposed when the host is stopped and disposed.\r\n\r\n### Actual behavior\r\n\r\n```\r\nUnhandled exception. System.IO.IOException: The configured user limit (128) on the number of inotify instances has been reached, or the per-process limit on the number of open file descriptors has been reached.\r\n   at System.IO.FileSystemWatcher.StartRaisingEvents()\r\n   at System.IO.FileSystemWatcher.StartRaisingEventsIfNotDisposed()\r\n   at System.IO.FileSystemWatcher.set_EnableRaisingEvents(Boolean value)\r\n   at Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.TryEnableFileSystemWatcher()\r\n   at Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.CreateFileChangeToken(String filter)\r\n   at Microsoft.Extensions.FileProviders.PhysicalFileProvider.Watch(String filter)\r\n   at Microsoft.Extensions.Configuration.FileConfigurationProvider.\u003c.ctor\u003eb__1_0()\r\n   at Microsoft.Extensions.Primitives.ChangeToken.OnChange(Func`1 changeTokenProducer, Action changeTokenConsumer)\r\n   at Microsoft.Extensions.Configuration.FileConfigurationProvider..ctor(FileConfigurationSource source)\r\n   at Microsoft.Extensions.Configuration.Json.JsonConfigurationSource.Build(IConfigurationBuilder builder)\r\n   at Microsoft.Extensions.Configuration.ConfigurationBuilder.Build()\r\n   at Microsoft.Extensions.Hosting.HostBuilder.BuildAppConfiguration()\r\n   at Microsoft.Extensions.Hosting.HostBuilder.Build()\r\n   at Microsoft.Extensions.Hosting.HostingAbstractionsHostBuilderExtensions.StartAsync(IHostBuilder hostBuilder, CancellationToken cancellationToken)\r\n   at WebApplication1.Program.Main(String[] args) in /home/foriequal0/workspace/nk-backend/Library/WebApplication1/Program.cs:line 12\r\n   at WebApplication1.Program.\u003cMain\u003e(String[] args)\r\n\r\nProcess finished with exit code 134.\r\n```\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\nDispose manually file providers\r\n```c#\r\n                using var host = await Host.CreateDefaultBuilder(args).StartAsync();\r\n                await host.StopAsync();\r\n\r\n                var configuration = host.Services.GetService\u003cIConfiguration\u003e() as ConfigurationRoot;\r\n                foreach (var provider in configuration?.Providers?.OfType\u003cFileConfigurationProvider\u003e() ?? Array.Empty\u003cFileConfigurationProvider\u003e())\r\n                {\r\n                    (provider.Source.FileProvider as IDisposable)?.Dispose();\r\n                }\r\n```\r\n\r\n### Configuration\r\n\r\nUbuntu 21.10, .NET 6\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOQj9q_Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc48FeCb",
                                           "createdAt":  "2022-01-08T17:09:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-hosting\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nStarting and Stopping a generic host created with ```Host.CreateDefaultBuilder(args)``` in a tight loop can cause inotify limit exception.\r\nI found that ```JsonConfigurationProvider``` is never disposed.\n\n### Reproduction Steps\n\n```c#\r\nusing System.Threading.Tasks;\r\nusing Microsoft.Extensions.Hosting;\r\n\r\nnamespace App\r\n{\r\n    public class Program\r\n    {\r\n        public static async Task Main(string[] args)\r\n        {\r\n            for (var i = 0; i \u003c 100; i++)\r\n            {\r\n                using var host = await Host.CreateDefaultBuilder(args).StartAsync();\r\n                await host.StopAsync();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n### Expected behavior\n\n```JsonConfigurationProvider``` is disposed when the host is stopped and disposed.\n\n### Actual behavior\n\n```\r\nUnhandled exception. System.IO.IOException: The configured user limit (128) on the number of inotify instances has been reached, or the per-process limit on the number of open file descriptors has been reached.\r\n   at System.IO.FileSystemWatcher.StartRaisingEvents()\r\n   at System.IO.FileSystemWatcher.StartRaisingEventsIfNotDisposed()\r\n   at System.IO.FileSystemWatcher.set_EnableRaisingEvents(Boolean value)\r\n   at Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.TryEnableFileSystemWatcher()\r\n   at Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.CreateFileChangeToken(String filter)\r\n   at Microsoft.Extensions.FileProviders.PhysicalFileProvider.Watch(String filter)\r\n   at Microsoft.Extensions.Configuration.FileConfigurationProvider.\u003c.ctor\u003eb__1_0()\r\n   at Microsoft.Extensions.Primitives.ChangeToken.OnChange(Func`1 changeTokenProducer, Action changeTokenConsumer)\r\n   at Microsoft.Extensions.Configuration.FileConfigurationProvider..ctor(FileConfigurationSource source)\r\n   at Microsoft.Extensions.Configuration.Json.JsonConfigurationSource.Build(IConfigurationBuilder builder)\r\n   at Microsoft.Extensions.Configuration.ConfigurationBuilder.Build()\r\n   at Microsoft.Extensions.Hosting.HostBuilder.BuildAppConfiguration()\r\n   at Microsoft.Extensions.Hosting.HostBuilder.Build()\r\n   at Microsoft.Extensions.Hosting.HostingAbstractionsHostBuilderExtensions.StartAsync(IHostBuilder hostBuilder, CancellationToken cancellationToken)\r\n   at WebApplication1.Program.Main(String[] args) in /home/foriequal0/workspace/nk-backend/Library/WebApplication1/Program.cs:line 12\r\n   at WebApplication1.Program.\u003cMain\u003e(String[] args)\r\n\r\nProcess finished with exit code 134.\r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nUbuntu 21.10, .NET 6\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eforiequal0\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Hosting`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-01-08T17:09:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48FgiZ",
                                           "createdAt":  "2022-01-08T17:46:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "foriequal0",
                                           "body":  "I found that `FileConfigurationSource` doesn\u0027t implement IDisposable who holds `PhysicalFileProvider`.\r\nI think it should implement IDisposable, and `FileConfigurationProvider` should dispose it too.",
                                           "updatedAt":  "2022-01-08T18:16:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48Fgzx",
                                           "createdAt":  "2022-01-08T17:50:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "foriequal0",
                                           "body":  "There were already an exact issue for this, and it was closed: https://github.com/dotnet/runtime/issues/37610\r\n\r\nI saw the comment from @mjrousos.\r\n`FileConfigurationProvider` already implements `IDisposable`, and `PhysicalFileProvider` does too.\r\nI don\u0027t see why implementing `IDisposable` for `FileConfigurationSource` would not be viable.",
                                           "updatedAt":  "2022-01-08T18:17:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CP2r9",
                                           "createdAt":  "2022-04-27T20:31:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "srollinet",
                                           "body":  "I have the same issue and I try to debug it to see what happens, but I don\u0027t understand what happens\r\n\r\nI profiled the application using your original code\r\n\r\n```csharp\r\nusing System.Threading.Tasks;\r\nusing Microsoft.Extensions.Hosting;\r\n\r\nnamespace App\r\n{\r\n    public class Program\r\n    {\r\n        public static async Task Main(string[] args)\r\n        {\r\n            for (var i = 0; i \u003c 100; i++)\r\n            {\r\n                using var host = await Host.CreateDefaultBuilder(args).StartAsync();\r\n                await host.StopAsync();\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/12350967/165623862-628c6eb5-2614-4ac4-be1e-a0abc0ca9b2f.png)\r\n\r\nLooking at the calls number, the `PhysicalFileProvider` is disposed, but its internal `PhysicalFilesWatcher` is never disposed\r\n\r\nI tried to debug the code step by step using Rider and this is also what I observe. When I step into this method, the debugger tells me that `_fileWatcher` is null, even when it has been created.\r\nhttps://github.com/dotnet/runtime/blob/be98e88c760526452df94ef452fff4602fb5bded/src/libraries/Microsoft.Extensions.FileProviders.Physical/src/PhysicalFileProvider.cs#L208-L218\r\n\r\nI suspect the debugger / profiler is lying to me somehow. Otherwise something really strange is happening.",
                                           "updatedAt":  "2022-04-27T20:31:18Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Hit inotify user limit on linux when you start and stop hosts created with Host.CreateDefaultBuilder(args) in a tight loop",
        "labels":  [
                       "bug",
                       "area-Extensions-Hosting"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/64874",
        "createdAt":  "2022-02-05T17:43:12Z",
        "number":  64874,
        "author":  "bradygaster",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODAVhIA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kevinchalet",
                                            "createdAt":  "2022-02-06T04:19:43Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "martincostello",
                                            "createdAt":  "2022-02-05T19:41:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "halter73",
                                            "createdAt":  "2022-02-07T19:23:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Mrxx99",
                                            "createdAt":  "2022-02-12T18:22:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Khitiara",
                                            "createdAt":  "2022-04-06T00:22:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julian-code",
                                            "createdAt":  "2022-11-14T10:36:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cheng93",
                                            "createdAt":  "2025-03-20T22:22:46Z"
                                        }
                                    ],
                          "totalCount":  7
                      },
        "updatedAt":  "2025-04-23T20:29:50Z",
        "body":  "## Background and Motivation\r\n\r\nI had this idea over the weekend when building a minimal API, that would be augmented with a `BackgroundService` later on for some background processes. I thought \"it would be great to have something like a **Minimal Workers** sort of API. I mentioned it to @halter73 in an email to get his 2C, but wanted to put this out here for discussion.\r\n\r\n## Proposed API\r\n\r\nThis is in no way proposed to be final, but, hopefully the idea will come across. Let\u0027s say I have 3 different processes I want to run on intervals in the background of an ASP.NET app, but none of them are really big enough to warrant a whole new class. It\u0027d be great if I could just do something like this in my `Program.cs` to wire up some background processes. \r\n\r\n## Usage Examples\r\n\r\n```csharp\r\nbuilder.Services.AddBackgroundProcess(async (token) =\u003e\r\n{\r\n    Console.WriteLine($\"First Process Running at {DateTime.Now}\");\r\n    await Task.Delay(1000);\r\n});\r\n\r\nbuilder.Services.AddBackgroundProcess(async (token) =\u003e\r\n{\r\n    Console.WriteLine($\"Second Process Running at {DateTime.Now}\");\r\n    await Task.Delay(5000);\r\n});\r\n\r\nbuilder.Services.AddBackgroundProcess(async (token) =\u003e\r\n{\r\n    Console.WriteLine($\"Third Process Running at {DateTime.Now}\");\r\n    await Task.Delay(10000);\r\n});\r\n\r\nvar app = builder.Build();\r\n```\r\n\r\n## Very Brief Implementation and Usage\r\n\r\nI wired up a super-simple implementation to support this usage scenario. This is in no way intended to be an actual proposal - surely it\u0027d need some improvement and more consideration. \r\n\r\n```csharp\r\nnamespace Microsoft.Extensions.Hosting\r\n{\r\n    public class BackgroundProcessWrapper : BackgroundService\r\n    {\r\n        public BackgroundProcessWrapper(Func\u003cCancellationToken, Task\u003e? unitOfWork)\r\n        {\r\n            UnitOfWork = unitOfWork;\r\n        }\r\n\r\n        public Func\u003cCancellationToken, Task\u003e? UnitOfWork { get; set; }\r\n\r\n        protected override async Task ExecuteAsync(CancellationToken stoppingToken)\r\n        {\r\n            if (UnitOfWork == null) return;\r\n\r\n            while (!stoppingToken.IsCancellationRequested)\r\n            {\r\n                await UnitOfWork(stoppingToken);\r\n            }\r\n        }\r\n    }\r\n\r\n    public static class BackgroundServiceExtensions\r\n    {\r\n        public static IServiceCollection AddBackgroundProcess(this IServiceCollection services, Func\u003cCancellationToken, Task\u003e? process)\r\n        {\r\n            services.AddSingleton\u003cIHostedService\u003e((services) =\u003e new BackgroundProcessWrapper(process));\r\n            return services;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## Alternative Designs\r\n\r\nI\u0027m sure there\u0027s a better way to do this - just starting the conversation on a way to achieve \"minimal workers\" if other folks think there\u0027s value. \r\n\r\n## Risks\r\n\r\nWe\u0027d need to support the ability to inject services from the `IServicesCollection` into the `AddBackgroundProcess` `process` Func, so folks could use their services within the `ExecuteAsync` phase. \r\n\r\nFeedback welcome. \r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOqGi7bw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc49cczx",
                                           "createdAt":  "2022-02-06T16:37:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-02-06T16:37:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49cc6y",
                                           "createdAt":  "2022-02-06T16:40:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "`BackgroundProcessWrapper` doesn\u0027t need to be public. I would probably also rename `AddBackgroundProcess` to something else, `AddBackgroundService`? Since it\u0027s just a `BackgroundService`.",
                                           "updatedAt":  "2022-02-06T16:40:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49ev61",
                                           "createdAt":  "2022-02-07T13:29:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Kahbazi",
                                           "body":  "Should there be two type of background service method? One for recurring which would be in a while loop and the other just run for once and let user decide how the service is run, it could be useful when listening to an events instead of timer.\r\n\r\nAlso the methods could get a `Delegate` like minimal API and provide `CancellationToken` and other services from a `IServiceProvider`. But the `IServiceProvider` in `AddBackgroundService` could be the main one but in `AddRecurringBackgroundService` a scope could be created and the services are resolved from its `IServiceProvider`.\r\n\r\n```csharp\r\npublic static class BackgroundServiceExtensions\r\n{\r\n    public static IServiceCollection AddBackgroundService(this IServiceCollection services, Delegate process);\r\n    public static IServiceCollection AddRecurringBackgroundService(this IServiceCollection services, Delegate process);\r\n}\r\n```\r\n\r\nAnd since this API in on `IServiceCollection`, it might be a little confusing for new users that why `builder.Services.AddBackgroundService` works but `app.Services.AddBackgroundService` don\u0027t.",
                                           "updatedAt":  "2022-02-07T13:29:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49fTzF",
                                           "createdAt":  "2022-02-07T15:48:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-hosting\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n## Background and Motivation\r\n\r\nI had this idea over the weekend when building a minimal API, that would be augmented with a `BackgroundService` later on for some background processes. I thought \"it would be great to have something like a **Minimal Workers** sort of API. I mentioned it to @halter73 in an email to get his 2C, but wanted to put this out here for discussion.\r\n\r\n## Proposed API\r\n\r\nThis is in no way proposed to be final, but, hopefully the idea will come across. Let\u0027s say I have 3 different processes I want to run on intervals in the background of an ASP.NET app, but none of them are really big enough to warrant a whole new class. It\u0027d be great if I could just do something like this in my `Program.cs` to wire up some background processes. \r\n\r\n## Usage Examples\r\n\r\n```csharp\r\nbuilder.Services.AddBackgroundProcess(async (token) =\u003e\r\n{\r\n    Console.WriteLine($\"First Process Running at {DateTime.Now}\");\r\n    await Task.Delay(1000);\r\n});\r\n\r\nbuilder.Services.AddBackgroundProcess(async (token) =\u003e\r\n{\r\n    Console.WriteLine($\"Second Process Running at {DateTime.Now}\");\r\n    await Task.Delay(5000);\r\n});\r\n\r\nbuilder.Services.AddBackgroundProcess(async (token) =\u003e\r\n{\r\n    Console.WriteLine($\"Third Process Running at {DateTime.Now}\");\r\n    await Task.Delay(10000);\r\n});\r\n\r\nvar app = builder.Build();\r\n```\r\n\r\n## Very Brief Implementation and Usage\r\n\r\nI wired up a super-simple implementation to support this usage scenario. This is in no way intended to be an actual proposal - surely it\u0027d need some improvement and more consideration. \r\n\r\n```csharp\r\nnamespace Microsoft.Extensions.Hosting\r\n{\r\n    public class BackgroundProcessWrapper : BackgroundService\r\n    {\r\n        public BackgroundProcessWrapper(Func\u003cCancellationToken, Task\u003e? unitOfWork)\r\n        {\r\n            UnitOfWork = unitOfWork;\r\n        }\r\n\r\n        public Func\u003cCancellationToken, Task\u003e? UnitOfWork { get; set; }\r\n\r\n        protected override async Task ExecuteAsync(CancellationToken stoppingToken)\r\n        {\r\n            if (UnitOfWork == null) return;\r\n\r\n            while (!stoppingToken.IsCancellationRequested)\r\n            {\r\n                await UnitOfWork(stoppingToken);\r\n            }\r\n        }\r\n    }\r\n\r\n    public static class BackgroundServiceExtensions\r\n    {\r\n        public static IServiceCollection AddBackgroundProcess(this IServiceCollection services, Func\u003cCancellationToken, Task\u003e? process)\r\n        {\r\n            services.AddSingleton\u003cIHostedService\u003e((services) =\u003e new BackgroundProcessWrapper(process));\r\n            return services;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## Alternative Designs\r\n\r\nI\u0027m sure there\u0027s a better way to do this - just starting the conversation on a way to achieve \"minimal workers\" if other folks think there\u0027s value. \r\n\r\n## Risks\r\n\r\nWe\u0027d need to support the ability to inject services from the `IServicesCollection` into the `AddBackgroundProcess` `process` Func, so folks could use their services within the `ExecuteAsync` phase. \r\n\r\nFeedback welcome. \r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ebradygaster\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `untriaged`, `area-Extensions-Hosting`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-02-07T15:48:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49fo4v",
                                           "createdAt":  "2022-02-07T17:06:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "\u003e  One for recurring which would be in a while loop and the other just run for once and let user decide how the service is run, it could be useful when listening to an events instead of timer.\r\n\r\nThis should be a separate feature request. There\u0027s all sorts of questions here about scheduling.\r\n\r\n\u003e And since this API in on IServiceCollection, it might be a little confusing for new users that why builder.Services.AddBackgroundService works but app.Services.AddBackgroundService don\u0027t.\r\n\r\nAgree but I don\u0027t know what the fix is for that. Also, I\u0027m not sure why the method takes a delegate? Is that to support DI parameters? What about scoped services? What about the cancellation token etc. etc.",
                                           "updatedAt":  "2022-02-07T17:06:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49gLH9",
                                           "createdAt":  "2022-02-07T19:36:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "Here\u0027s the proposal for the new `builder` in runtime: https://github.com/dotnet/runtime/issues/61634. This is also how it would look with `WebApplicationBuilder`.\r\n\r\nI\u0027m on the fence about the `Delegate` parameter. It doesn\u0027t seem as useful as it is with minimal APIs since the parameter binding wouldn\u0027t be as advanced, but I do see how it\u0027s a bit cleaner than taking an `IServiceProvider`. The cost is not being able to quickly determine what parameters are allowed by looking at the signature.",
                                           "updatedAt":  "2022-02-07T20:37:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49m_Sr",
                                           "createdAt":  "2022-02-09T10:56:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Kahbazi",
                                           "body":  "\u003e \u003e One for recurring which would be in a while loop and the other just run for once and let user decide how the service is run, it could be useful when listening to an events instead of timer.\r\n\u003e \r\n\u003e This should be a separate feature request. There\u0027s all sorts of questions here about scheduling.\r\n\r\nI think I used the wrong term here, by recurring I meant the very same implementation that is in the proposed issue which run the delegate in a while loop, and the simple one just don\u0027t have the while loop.\r\n\r\n\u003e I\u0027m not sure why the method takes a delegate? Is that to support DI parameters? What about scoped services? What about the cancellation token etc. etc.\r\n\r\nYes, the `delegate` is to support the parameters injection from DI and for `CancellationToken` the `stoppingToken` from `BackgroundService.ExecuteAsync` could be send. Also each call to the delegate would be in its own scope.\r\n\r\n```csharp\r\ninternal class RecurringBackgroundProcessWrapper : BackgroundService\r\n{\r\n    private readonly IServiceScopeFactory _serviceScopeFactory;\r\n    private readonly Func\u003cIServiceProvider, CancellationToken, Task\u003e _process;\r\n\r\n    public RecurringBackgroundProcessWrapper(IServiceProvider serviceProvider, Delegate process)\r\n    {\r\n        _process = BackgroundServiceBuilder.Build(process);\r\n        _serviceScopeFactory = serviceProvider.GetRequiredService\u003cIServiceScopeFactory\u003e();\r\n    }\r\n\r\n    protected override async Task ExecuteAsync(CancellationToken stoppingToken)\r\n    {\r\n        while (!stoppingToken.IsCancellationRequested)\r\n        {\r\n            var scope = _serviceScopeFactory.CreateScope();\r\n            try\r\n            {\r\n                await _process.Invoke(scope.ServiceProvider, stoppingToken);\r\n            }\r\n            finally\r\n            {\r\n                if (scope is IAsyncDisposable asyncDisposable)\r\n                {\r\n                    await asyncDisposable.DisposeAsync();\r\n                }\r\n                else\r\n                {\r\n                    scope.Dispose();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninternal class BackgroundProcessWrapper : BackgroundService\r\n{\r\n    private readonly IServiceProvider _serviceProvider;\r\n    private readonly Func\u003cIServiceProvider, CancellationToken, Task\u003e _process;\r\n\r\n    public BackgroundProcessWrapper(IServiceProvider serviceProvider, Delegate process)\r\n    {\r\n        _process = BackgroundServiceBuilder.Build(process);\r\n        _serviceProvider = serviceProvider;\r\n    }\r\n\r\n    protected override async Task ExecuteAsync(CancellationToken stoppingToken)\r\n    {\r\n        // I\u0027m not sure if this one is also needs a scope.\r\n        // It seems the Microsoft implementation of IServiceProvider can inject scope service\r\n        // when there\u0027s no scope but I\u0027m not sure about the third party implementations.\r\n        await _process.Invoke(_serviceProvider, stoppingToken);\r\n    }\r\n}\r\n\r\npublic static class BackgroundServiceExtensions\r\n{\r\n    public static IServiceCollection AddBackgroundProcess(this IServiceCollection services, Delegate process)\r\n    {\r\n        services.AddSingleton\u003cIHostedService\u003e((services) =\u003e new BackgroundProcessWrapper(services, process));\r\n        return services;\r\n    }\r\n\r\n    public static IServiceCollection AddRecurringBackgroundProcess(this IServiceCollection services, Delegate process)\r\n    {\r\n        services.AddSingleton\u003cIHostedService\u003e((services) =\u003e new RecurringBackgroundProcessWrapper(services, process));\r\n        return services;\r\n    }\r\n}\r\n```\r\n",
                                           "updatedAt":  "2022-02-09T10:56:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49ofCa",
                                           "createdAt":  "2022-02-09T17:37:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "So something that runs in a tight loop? Is that useful without being able to control an interval? Or is the idea that you also have to wait in your callback?",
                                           "updatedAt":  "2022-02-09T17:37:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc490xKK",
                                           "createdAt":  "2022-02-12T14:38:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Kahbazi",
                                           "body":  "\u003e Or is the idea that you also have to wait in your callback?\r\n\r\nYes, this way the callback could even decide to have different interval if its needed.\r\n\r\nAnother idea is that the delegate could return a `Timespan?` which decide the next interval and if it is null the loop would stoped.",
                                           "updatedAt":  "2022-02-12T14:38:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ON3NV",
                                           "createdAt":  "2022-11-11T23:10:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "I think we should overload `AddHostedService`. We also need a way to resolve services. Straw man API proposal:\r\n\r\n## Proposed API\r\n\r\n```diff\r\n// Microsoft.Extensions.Hosting.Abstractions.dll\r\n\r\nnamespace Microsoft.Extensions.DependencyInjection;\r\n\r\npublic static class ServiceCollectionHostedServiceExtensions\r\n{\r\n+    public static IServiceCollection AddHostedService(this IServiceCollection services, Func\u003cIServiceProvider, CancellationToken\u003e backgroundWorker)\r\n}\r\n```\r\n\r\n## Usage Examples\r\n\r\n```csharp\r\nvar builder = Host.CreateApplicationBuilder(args);\r\n\r\nbuilder.Services.AddSingleton\u003cMyService\u003e();\r\nbuilder.Services.AddHostedService(async (serviceProvider, stoppingToken) =\u003e\r\n{\r\n    var myService = serviceProvider.GetRequiredService\u003cMyService\u003e();\r\n    using var timer = new PeriodicTimer(TimeSpan.FromSeconds(10));\r\n\r\n    while (await timer.WaitForNextTickAsync(stoppingToken))\r\n    {\r\n        service.Ping()\r\n    }\r\n});\r\n\r\nbuilder.Build().Run();\r\n```\r\n\r\n## Alternative Designs\r\n\r\nWe could pass in the `IHost` instead of the `IServiceProvider`, but I think 99% of `IHost` usage would be `host.Services`. And you can resolve the `IHost` from the service provider.\r\n\r\n```diff\r\n+    public static IServiceCollection AddHostedService(this IServiceCollection services, Func\u003cIHost, CancellationToken\u003e backgroundWorker)\r\n```\r\n\r\nOr we could pass in a `Delagate` as @Kahbazi suggested above and @julian-code in #78137.\r\n\r\n```diff\r\n+    public static IServiceCollection AddHostedService(this IServiceCollection services, Delegate backgroundWorker)\r\n```\r\n\r\n## Risks\r\n\r\n@Kahbazi points out an interesting risk [above](https://github.com/dotnet/runtime/issues/64874#issuecomment-1031470773). \r\n\r\n\u003e And since this API in on `IServiceCollection`, it might be a little confusing for new users that why `builder.Services.AddBackgroundService` works but `app.Services.AddBackgroundService` don\u0027t.\r\n\r\nWe *could* have the host register a parent hosted service by default that runs child hosted services added by an extension method on `IServiceProvider`, but adding an `IServiceProvider` extension method that does anything other than resolve a service seems like going way too far.\r\n\r\n`IHost` might be a better target for an `AddHostedService` (or `AddBackgroundService` since we\u0027re no longer overloading) extension method that works this way. `app.AddBackgroundService(...)` feels reasonable.",
                                           "updatedAt":  "2022-11-11T23:16:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5OOH4x",
                                           "createdAt":  "2022-11-12T02:31:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "\u003e IHost might be a better target for an AddHostedService (or AddBackgroundService since we\u0027re no longer overloading) extension method that works this way. app.AddBackgroundService(...) feels reasonable.\r\n\r\nDid you mean IHostBuilder?",
                                           "updatedAt":  "2022-11-12T02:31:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5OOH_8",
                                           "createdAt":  "2022-11-12T02:32:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "\u003e Or we could pass in a Delagate as @Kahbazi suggested above and @julian-code in https://github.com/dotnet/runtime/issues/78137.\r\n\r\nI think we should avoid this. There\u0027s too much infrastructure missing to do this properly and it will turn into a mini framework before we know it. We should do the basic overload and hold off on the Delegate overload.",
                                           "updatedAt":  "2022-11-12T02:32:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6oaLtv",
                                           "createdAt":  "2025-04-23T20:29:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TopSwagCode",
                                           "body":  "@bradygaster @davidfowl \u003e Just found this post and wanted to share the version I went with implementing. I tried make it look and feel as MinimalAPI as much as possible.\n\n### Continuous Background Worker\n\n```csharp\napp.MapBackgroundWorker(async (MyService service, CancellationToken token) =\u003e\n{\n    while (!token.IsCancellationRequested)\n    {\n        await service.DoWorkAsync();\n        await Task.Delay(1000, token);\n    }\n});\n```\n\n### Periodic Background Worker\n\n```csharp\napp.MapPeriodicBackgroundWorker(TimeSpan.FromMinutes(5), async (MyService service, CancellationToken token) =\u003e\n{\n    await service.CleanupAsync();\n});\n```\n\nCode can be found here: https://github.com/TopSwagCode/MinimalWorker/blob/master/src/MinimalWorker/BackgroundWorkerExtensions.cs",
                                           "updatedAt":  "2025-04-23T20:29:49Z"
                                       }
                                   ],
                         "totalCount":  13
                     },
        "title":  "Minimal Workers",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Hosting"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/67146",
        "createdAt":  "2022-03-25T15:07:34Z",
        "number":  67146,
        "author":  "Vandersteen",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODIW7Ag==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "msschl",
                                            "createdAt":  "2023-10-04T14:09:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "msschl",
                                            "createdAt":  "2023-10-04T14:09:31Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "msschl",
                                            "createdAt":  "2023-10-04T14:09:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "miroslavp",
                                            "createdAt":  "2023-10-18T18:00:59Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "volllly",
                                            "createdAt":  "2023-10-24T14:18:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "volllly",
                                            "createdAt":  "2023-10-24T14:18:12Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "pvrobays",
                                            "createdAt":  "2023-11-13T14:23:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DamianEdwards",
                                            "createdAt":  "2024-09-26T18:03:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "richteaclue",
                                            "createdAt":  "2024-10-25T10:18:46Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "richteaclue",
                                            "createdAt":  "2024-10-25T10:18:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xackus",
                                            "createdAt":  "2024-12-19T15:09:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mhenry-cb",
                                            "createdAt":  "2025-01-31T22:01:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TobiasJohansen",
                                            "createdAt":  "2025-02-19T10:44:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bdominguez",
                                            "createdAt":  "2025-06-06T11:59:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bdovaz",
                                            "createdAt":  "2025-06-06T12:00:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "delreluca",
                                            "createdAt":  "2025-07-24T14:02:50Z"
                                        }
                                    ],
                          "totalCount":  16
                      },
        "updatedAt":  "2025-07-24T18:56:36Z",
        "body":  "Given the following `Program.cs`\r\n\r\n```c#\r\nIHost host = Host.CreateDefaultBuilder(args)\r\n    .ConfigureServices(services =\u003e\r\n    {\r\n        services.AddHostedService\u003cWorker\u003e(); \r\n        services.Configure\u003cHostOptions\u003e(hostOptions =\u003e\r\n        {\r\n            hostOptions.BackgroundServiceExceptionBehavior = BackgroundServiceExceptionBehavior.StopHost;\r\n        });\r\n    })\r\n    .Build();\r\n\r\nawait host.RunAsync();\r\n```\r\n\r\nAnd `Worker.cs`\r\n\r\n```c#\r\npublic class Worker : BackgroundService\r\n{\r\n    protected override async Task ExecuteAsync(CancellationToken stoppingToken)\r\n    {\r\n        //await Task.Delay(TimeSpan.FromSeconds(1), stoppingToken);\r\n        throw new Exception();\r\n    }\r\n}\r\n```\r\n\r\n\r\nI get an \u0027error\u0027 exit code, which is usefull to detect errors in let\u0027s say kubernetes\r\n\r\n\u003e Process finished with exit code 134.\r\n\r\nHowever when uncommenting the \u0027await Task...\u0027 \r\n\r\nThere is no longer an \u0027error\u0027 exit code\r\n\r\n```\r\ncrit: Microsoft.Extensions.Hosting.Internal.Host[10]\r\n      The HostOptions.BackgroundServiceExceptionBehavior is configured to StopHost. A BackgroundService has thrown an unhandled exception, and the IHost instance is stopping. To avoid this behavior, configure this to Ignore; however the BackgroundService will not be restarted.\r\n      System.Exception: Exception of type \u0027System.Exception\u0027 was thrown.\r\n         at TestUpgrade.Worker.ExecuteAsync(CancellationToken stoppingToken) in Worker.cs:line 8\r\n         at Microsoft.Extensions.Hosting.Internal.Host.TryExecuteBackgroundServiceAsync(BackgroundService backgroundService)\r\ninfo: Microsoft.Hosting.Lifetime[0]\r\n      Application is shutting down...\r\n\r\nProcess finished with exit code 0. \u003c-------\r\n```\r\n\r\nIs there a way to detect this case using the hostbuilder ?\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOuaP5GA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5AUhae",
                                           "createdAt":  "2022-03-25T15:07:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-hosting\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nGiven the following `Program.cs`\r\n\r\n```\r\nIHost host = Host.CreateDefaultBuilder(args)\r\n    .ConfigureServices(services =\u003e\r\n    {\r\n        services.AddHostedService\u003cWorker\u003e(); \r\n        services.Configure\u003cHostOptions\u003e(hostOptions =\u003e\r\n        {\r\n            hostOptions.BackgroundServiceExceptionBehavior = BackgroundServiceExceptionBehavior.StopHost;\r\n        });\r\n    })\r\n    .Build();\r\n\r\nawait host.RunAsync();\r\n```\r\n\r\nAnd `Worker.cs`\r\n\r\n```\r\npublic class Worker : BackgroundService\r\n{\r\n    protected override async Task ExecuteAsync(CancellationToken stoppingToken)\r\n    {\r\n        //await Task.Delay(TimeSpan.FromSeconds(1), stoppingToken);\r\n        throw new Exception();\r\n    }\r\n}\r\n```\r\n\r\n\r\nI get an \u0027error\u0027 exit code, which is usefull to detect errors in let\u0027s say kubernetes\r\n\r\n\u003e Process finished with exit code 134.\r\n\r\nHowever when uncommenting the \u0027await Task...\u0027 \r\n\r\nThere is no longer an \u0027error\u0027 exit code\r\n\r\n```\r\ncrit: Microsoft.Extensions.Hosting.Internal.Host[10]\r\n      The HostOptions.BackgroundServiceExceptionBehavior is configured to StopHost. A BackgroundService has thrown an unhandled exception, and the IHost instance is stopping. To avoid this behavior, configure this to Ignore; however the BackgroundService will not be restarted.\r\n      System.Exception: Exception of type \u0027System.Exception\u0027 was thrown.\r\n         at TestUpgrade.Worker.ExecuteAsync(CancellationToken stoppingToken) in /Users/rein/Projects/Skyfresh/system/dotnet/tools/TestUpgrade/Worker.cs:line 8\r\n         at Microsoft.Extensions.Hosting.Internal.Host.TryExecuteBackgroundServiceAsync(BackgroundService backgroundService)\r\ninfo: Microsoft.Hosting.Lifetime[0]\r\n      Application is shutting down...\r\n\r\nProcess finished with exit code 0. \u003c-------\r\n```\r\n\r\nIs there a way to detect this case using the hostbuilder ?\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eVandersteen\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Hosting`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-03-25T15:07:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Aa5pJ",
                                           "createdAt":  "2022-03-28T15:24:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "The difference in behavior here is that when you don\u0027t `await` in your hosted service, your code runs inline during the process startup. Thus when an exception is thrown before `await` happens, your startup is failing and the app crashes.\r\n\r\nAfter the `await` has occurred, the host is started and the background service throws an exception, which the host catches, logs, and then exits the app. In that case the app exists \"cleanly\" today.\r\n\r\nI think it would make sense to set the exit code to something non-zero in this case to indicate that the app has been stopped. Potentially, we may need an option to control the behavior if someone wants to opt-out of it.\r\n\r\nThoughts, @davidfowl @Tratcher @maryamariyan ?",
                                           "updatedAt":  "2022-03-28T15:24:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ag-6H",
                                           "createdAt":  "2022-03-29T21:24:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "\u003e I think it would make sense to set the exit code to something non-zero in this case to indicate that the app has been stopped.\r\n\r\n+1. Keeping as-is. Might be good to look for more feedback here before deciding on how to approach this.",
                                           "updatedAt":  "2022-03-29T21:24:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DzgeV",
                                           "createdAt":  "2022-05-25T17:11:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "deeprobin",
                                           "body":  "@maryamariyan In my private kubernetes development cluster I already had also the problem that error handling is hard to show without error code.\r\n\r\nKubernetes dashboard for ex. would otherwise display the status \"finished\" or something like that instead of \"Failed\".\r\n![grafik](https://user-images.githubusercontent.com/10373452/170321483-0e18bbe0-b501-4739-aaa3-5feff616bea7.png)\r\n\r\nBut there are many usecases (for ex. Docker)",
                                           "updatedAt":  "2022-05-25T17:11:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5D1Xwv",
                                           "createdAt":  "2022-05-26T02:04:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Why not change application code to return a non-zero exit code? This feels more like a template change than a change to these APIs tbh.",
                                           "updatedAt":  "2022-05-26T02:04:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5D1cAB",
                                           "createdAt":  "2022-05-26T02:35:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "\u003e Why not change application code to return a non-zero exit code?\r\n\r\nHow does the app know to return a non-zero exit code?\r\n\r\n```C#\r\nIHost host = Host.CreateDefaultBuilder(args)\r\n    .ConfigureServices(services =\u003e\r\n    {\r\n        services.AddHostedService\u003cWorker\u003e();\r\n    })\r\n    .Build();\r\n\r\nawait host.RunAsync();\r\n```\r\n\r\n`Run` and `RunAsync` return `void` and `Task`.\r\n\r\nhttps://github.com/dotnet/runtime/blob/8aac5ee2e821498684b385f443d2474db215b2ae/src/libraries/Microsoft.Extensions.Hosting.Abstractions/src/HostingAbstractionsHostExtensions.cs#L48-L60\r\n\r\nWe would somehow need to bubble the exception up through `RunAsync`. Or some other way to know that the `Host` faulted.",
                                           "updatedAt":  "2022-05-26T02:35:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5D1hbw",
                                           "createdAt":  "2022-05-26T03:14:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Then I would change the title of this issue to make sure that RunAsync throws if we\u0027re shutting down the host. We can store the exception and make StopAsync throw observe the exception.",
                                           "updatedAt":  "2022-05-26T03:14:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5D3jgs",
                                           "createdAt":  "2022-05-26T14:26:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "I think the title is fine - it describes the intended behavior, not the solution.\r\n\r\nThere are other possible solutions here. One would be to store the caught exceptions on the `IHost`, and expose them publicly in a property. Then the app code can do whatever they want after `RunAsync` is done by inspecting the background exceptions.",
                                           "updatedAt":  "2022-05-26T14:26:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5D3l7Z",
                                           "createdAt":  "2022-05-26T14:35:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "deeprobin",
                                           "body":  "What do you think about simply setting `Environment.ExitCode`? \r\n(Of course we should not set this behavior as default, because otherwise there might be breaking changes, but this property is the first thing that comes to my mind).",
                                           "updatedAt":  "2022-05-26T14:35:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5D3mZc",
                                           "createdAt":  "2022-05-26T14:37:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "We shouldn\u0027t be setting the exit code. We used to do that a long time ago in the library because of other issues but the application owns the entrypoint.\r\n\r\n\u003e There are other possible solutions here. One would be to store the caught exceptions on the IHost, and expose them publicly in a property. Then the app code can do whatever they want after RunAsync is done by inspecting the background exceptions.\r\n\r\nMaybe it\u0027s both? RunAsync is one observer of the Exception that was captured, which rethrows.\r\n",
                                           "updatedAt":  "2022-05-26T14:37:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ku7ND",
                                           "createdAt":  "2022-09-21T14:43:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODIiWHw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Dean-NC",
                                                                               "createdAt":  "2023-10-03T22:17:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tmds",
                                           "body":  "Exiting due to failure with a success exit code is bad.\r\n\r\n\u003e We can store the exception and make StopAsync throw observe the exception.\r\n\r\nThis seems like the proper thing to do. `StopAsync` already throws an `AggregateException` when `IHostedServices` throw during `StopAsync`.\r\n\r\nWe can\u0027t capture the exception for the generic `IHostedServices` because they don\u0027t have a `Task` that tracks the execution.\r\nIt is possible for `BackgroundService`, which has such a `Task` (`ExecuteTask` property).\r\n(note: `ExecuteTask` isn\u0027t set if someone overrides StartAsync but forgets to call the base version.)",
                                           "updatedAt":  "2022-09-21T14:43:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Kv_U_",
                                           "createdAt":  "2022-09-21T18:46:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "deeprobin",
                                           "body":  "\u003e We can\u0027t capture the exception for the generic IHostedServices because they don\u0027t have a Task that tracks the execution.\r\n\r\n@tmds \r\nHow about try-catch?",
                                           "updatedAt":  "2022-09-21T18:46:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5oDyAP",
                                           "createdAt":  "2023-10-03T22:25:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dean-NC",
                                           "body":  "I agree with the ability to have a different exit code. I\u0027d like my Windows service\u0027s recovery to get done (restart), but with `BackgroundServiceExceptionBehavior.StopHost` I can\u0027t tell if the host is stopping due to an unhandled error. `IHostApplicationLifetime.ApplicationStopping` doesn\u0027t help...nothing to check in there.",
                                           "updatedAt":  "2023-10-03T22:25:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5oIHWg",
                                           "createdAt":  "2023-10-04T14:09:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "msschl",
                                           "body":  "I think an other BackgroundServiceExceptionBehavior value on the enum which sets an exit code on an unhandled error would be good. For Kubernetes when you use a dotnet worker as a cronjob the job is shown as completed with no failure although the background service might have failed.",
                                           "updatedAt":  "2023-10-04T14:09:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6NuzQ6",
                                           "createdAt":  "2024-09-26T20:17:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEayN8g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "msschl",
                                                                               "createdAt":  "2024-09-27T06:14:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "msschl",
                                                                               "createdAt":  "2024-09-27T06:14:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ea-jc",
                                                                               "createdAt":  "2024-10-14T10:23:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mhenry-cb",
                                                                               "createdAt":  "2025-01-31T22:01:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Prunkles",
                                                                               "createdAt":  "2025-04-23T17:08:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "oising",
                                                                               "createdAt":  "2025-05-16T23:49:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bdominguez",
                                                                               "createdAt":  "2025-06-06T12:00:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bdovaz",
                                                                               "createdAt":  "2025-06-06T12:00:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Rafnel",
                                                                               "createdAt":  "2025-06-16T17:03:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lvde0",
                                                                               "createdAt":  "2025-07-16T13:10:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  10
                                                         },
                                           "author":  "DamianEdwards",
                                           "body":  "Extension I put together just now for a template we\u0027re working on that ensures the app exits with a non-zero exit code if a `BackgroundService` faults:\r\n\r\n```csharp\r\npublic static class HostExtensions\r\n{\r\n    public static async Task RunAndObserveBackgroundServices(this IHost host)\r\n    {\r\n        var backgroundServiceTasks = host.Services.GetServices\u003cIHostedService\u003e()\r\n            .OfType\u003cBackgroundService\u003e().Select(s =\u003e s.ExecuteTask);\r\n\r\n        await host.RunAsync();\r\n\r\n        if (backgroundServiceTasks.Any(t =\u003e t?.IsFaulted == true))\r\n        {\r\n            // If a BackgroundService failed, set the exit code to -1.\r\n            Environment.ExitCode = -1;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nSimply call this method instead of `RunAsync()`/`Run()` from your `Program.Main`.\r\n\r\nAlternative is add an additional `IHostedService` like the folllowing:\r\n\r\n```csharp\r\nclass BackgroundServiceObserver(IServiceProvider serviceProvider) : IHostedService\r\n{\r\n    public Task StartAsync(CancellationToken cancellationToken) =\u003e Task.CompletedTask;\r\n\r\n    public Task StopAsync(CancellationToken cancellationToken)\r\n    {\r\n        var backgroundServiceTasks = serviceProvider.GetServices\u003cIHostedService\u003e()\r\n            .OfType\u003cBackgroundService\u003e().Select(s =\u003e s.ExecuteTask);\r\n\r\n        if (backgroundServiceTasks.Any(t =\u003e t?.IsFaulted == true))\r\n        {\r\n            // If a BackgroundService failed, set the exit code to -1.\r\n            Environment.ExitCode = -1;\r\n        }\r\n\r\n        return Task.CompletedTask;\r\n    }\r\n}\r\n```\r\n\r\nGiven the impact of the current behavior in environments like Kubernetes, Azure Container Apps, Aspire, etc., I think we should prioritize improving this behavior in the runtime. As @msschl suggest, we should add a new value to `BackgroundServiceExceptionBehavior` (e.g. `StopHostAndSetExitNonZeroCode`, aka my best name suggestion ever) in .NET 10. We should also consider servicing .NET 8 and .NET 9 to enable this behavior via an app context switch (i.e. quirk it) so that folks can get the benefit of this change without having to wait for .NET 10.",
                                           "updatedAt":  "2024-09-26T21:04:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc63fyAx",
                                           "createdAt":  "2025-07-16T13:13:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEfrT0Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Haytek",
                                                                               "createdAt":  "2025-08-26T14:47:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "lvde0",
                                           "body":  "Yes, this should be higher priority. The [official example for applying EF Core migrations in Aspire](https://learn.microsoft.com/en-us/dotnet/aspire/database/ef-core-migrations) is currently not working correctly when migration fails. All dependent services are still started despite the migration failure. ",
                                           "updatedAt":  "2025-07-16T13:13:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc65jDZI",
                                           "createdAt":  "2025-07-24T10:43:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "delreluca",
                                           "body":  "In addition I’ve noticed that this also breaks the exit code of Windows services when using `WindowsServiceLifetime` [(from the official package)](https://www.nuget.org/packages/Microsoft.Extensions.Hosting.WindowsServices).\n\nA Windows service has its own exit code which is controlled via `WindowsServiceLifetime.ExitCode`. However for it to be communicated back properly it has to be set before stop or shutdown. But the `StopHost` behaviour immediately shuts down, so something like\n\n```cs\nvar lifetime = host.Services.GetService\u003cIHostLifetime\u003e();\n\nawait host.RunAsync();\n\nif (backgroundServiceTasks.Any(t =\u003e t?.IsFaulted == true))\n{\n    // If a BackgroundService failed, set the exit code to -1.\n    Environment.ExitCode = -1;\n\n    if (lifetime is WindowsServiceLifetime svc) svc.ExitCode = Environment.ExitCode;\n}\n```\n\nwill be too late, it seems.\n\nThis affects [service recovery](https://learn.microsoft.com/en-us/dotnet/core/extensions/windows-service#configure-the-windows-service) (but note that these docs forget to tell you to set `sc failureflag serviceName 1` which will enable recovery when the service stops with an exit code, slight oversight).\n\nNote that `WindowsServiceLifetime` doesn’t consider `Environment.ExitCode` at all, which would make for a good fallback and also work well with the proposed new `StopHostAndSetExitNonZeroCode` idea.\n\n(The linked docs are not wrong per se, since they suggest to add a `try`/`catch` to each background service and call `Environment.Exit(1)`. An `Exit(1)` will of course terminate the process immediately which will leave the service in an unstopped state and thus still register as a failure even without the appropriate `failureflag` settings. However, immediately terminating is not always a good idea, for example my `host.Run()` is wrapped in a `try`/`finally` for log flushing.)",
                                           "updatedAt":  "2025-07-24T11:09:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc65o_kY",
                                           "createdAt":  "2025-07-24T18:56:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Vandersteen",
                                           "body":  "In our case a background service was not a requirement, as we have a separate project that handles migrations / ...\nThis is how we solved it.\nYou can extend this how you want and have full control of the exit code\n\n```csharp\nusing System;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\n\nnamespace UpgradeDb\n{\n    public class Program\n    {\n        public static async Task\u003cint\u003e Main(string[] args)\n        {\n            try\n            {\n                using var host = CreateWebHostBuilder(args).Build();\n                using var scope = host.Services.CreateScope();\n\n                var upgradeDbService = scope.ServiceProvider.GetRequiredService\u003cUpgradeDbService\u003e();\n\n                await upgradeDbService.ExecuteAsync();\n\n                return 0;\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine($\"Host terminated unexpectedly!{Environment.NewLine}{e}\");\n                return 1;\n            }\n        }\n\n        private static IHostBuilder CreateWebHostBuilder(string[] args)\n        {\n            var builder = Host.CreateDefaultBuilder(args)\n                .ConfigureServices((context, services) =\u003e\n                {\n                    services.AddDbContext\u003cDbContext\u003e((provider, builder) =\u003e\n                    {\n\n                        builder.UseSqlServer(readonlyConnectionString, b =\u003e\n                        {\n                            ...\n                        });\n                    });\n\n                    services.AddSingleton\u003cUpgradeDbService\u003e();\n                });\n\n            return builder;\n        }\n    }\n\n    public class UpgradeDbService\n    {\n        private readonly DbContext _dbContext;\n\n        public UpgradeDbService(DbContext dbContext)\n        {\n            _dbContext = dbContext;\n        }\n        public async Task ExecuteAsync()\n        {\n            await _dbContext.MigrateAsync();\n            //other migration logic if needed\n        }\n    }\n}\n```",
                                           "updatedAt":  "2025-07-24T18:56:36Z"
                                       }
                                   ],
                         "totalCount":  18
                     },
        "title":  "Different Exit code when IHost stops from failing (async)IHostedService",
        "labels":  [
                       "area-Extensions-Hosting"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/70751",
        "createdAt":  "2022-06-14T20:53:47Z",
        "number":  70751,
        "author":  "amaltinsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-09-07T19:59:20Z",
        "body":  "### Description\n\nAs reported before in (#52416, #50020), asp.net fails the `IsWindowsService()` check on Windows Server Core and in Docker containers. This breaks all asp.net services on these platforms, requiring  brittle workarounds.\r\n\r\nThis issue was fixed in #62452 but unfortunately, the fix (https://github.com/dotnet/runtime/commit/36bf84fc4a89209f4fdbc1fc201e81afd8be49b0) was not back ported to existing dotnet versions, including 6.0 despite being an LTS release that\u0027s supposed to be supported for over two more years.\n\n### Reproduction Steps\n\nCreate an ASP.Net Windows Service and run it in a Docker container.\r\nCheck `IsWindowsService()`\n\n### Expected behavior\n\n`IsWindowsService()`  should return `true` when running as a service\n\n### Actual behavior\n\n`IsWindowsService()` returns false, causing `.UseWindowsService()` to not configure the app properly.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSLhGQQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5E4p_9",
                                           "createdAt":  "2022-06-14T20:53:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-06-14T20:53:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5E4q23",
                                           "createdAt":  "2022-06-14T20:57:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "amaltinsky",
                                           "body":  "Tagging @ericstj as the area lead",
                                           "updatedAt":  "2022-06-14T20:57:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5E5h2A",
                                           "createdAt":  "2022-06-15T03:06:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-hosting\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nAs reported before in (#52416, #50020), asp.net fails the `IsWindowsService()` check on Windows Server Core and in Docker containers. This breaks all asp.net services on these platforms, requiring  brittle workarounds.\r\n\r\nThis issue was fixed in #62452 but unfortunately, the fix (https://github.com/dotnet/runtime/commit/36bf84fc4a89209f4fdbc1fc201e81afd8be49b0) was not back ported to existing dotnet versions, including 6.0 despite being an LTS release that\u0027s supposed to be supported for over two more years.\n\n### Reproduction Steps\n\nCreate an ASP.Net Windows Service and run it in a Docker container.\r\nCheck `IsWindowsService()`\n\n### Expected behavior\n\n`IsWindowsService()`  should return `true` when running as a service\n\n### Actual behavior\n\n`IsWindowsService()` returns false, causing `.UseWindowsService()` to not configure the app properly.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eamaltinsky\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Hosting`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-06-15T03:06:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5E5iWO",
                                           "createdAt":  "2022-06-15T03:10:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@eerhardt (as you made the fix) this seems like a good backport candidate, low risk change and apparently has impacted a number of customers. thoughts?",
                                           "updatedAt":  "2022-06-15T03:10:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IuEZB",
                                           "createdAt":  "2022-08-18T22:25:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "I\u0027ve opened https://github.com/dotnet/runtime/pull/74188 to backport this change to `release/6.0`.",
                                           "updatedAt":  "2022-08-18T22:25:37Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Asp.Net 6.X app fails to run as a Windows Service in Windows Server Core/Docker container",
        "labels":  [
                       "area-Extensions-Hosting"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/72590",
        "createdAt":  "2022-07-21T09:15:35Z",
        "number":  72590,
        "author":  "i-sinister",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC_EHHw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fremat",
                                            "createdAt":  "2025-02-13T15:57:09Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2022-08-10T22:47:33Z",
        "body":  "### Description\r\n\r\nThere are several bugs related to WindowsServiceLifetime implementation in 3.1:\r\n1. windows service hangs if there are errors during host initialization\r\n2. windows service is reported running until host is initialized.\r\n\r\n#2 is can be a problem if the service is dependent by another windows service.\r\n\r\n\r\n### Reproduction Steps\r\n\r\nHere is an example of what is roughly going on when application is started as windows service.\r\n\r\nCreate a new console application\r\n\r\n```cmd\r\ndotnet new console --framework netcoreapp3.1 --output ServiceExitTest\r\ndotnet add ServiceExitTest\\ServiceExitTest.csproj package --version 3.1.3 Microsoft.Extensions.Hosting.WindowsServices\r\n```\r\nReplace Program.cs:\r\n```csharp\r\nnamespace ServiceExitTest\r\n{\r\n\tusing System;\r\n\tusing System.IO;\r\n\tusing System.ServiceProcess;\r\n\tusing System.Threading;\r\n\r\n\tpublic class Program\r\n\t{\r\n\t\tprivate readonly static object logLock = new object();\r\n\t\tpublic static void Log(string name, string message)\r\n\t\t{\r\n\t\t\tlock (logLock)\r\n\t\t\t{\r\n\t\t\t\tmessage = $\"{DateTime.Now} [{name}] {message}\";\r\n\t\t\t\tFile.AppendAllText(\"service_log.txt\", message + Environment.NewLine);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic static void Log(string message) =\u003e Log(nameof(Program), message);\r\n\r\n\t\tclass StrangeService : ServiceBase\r\n\t\t{\r\n\t\t\tprivate static void Log(string message) =\u003e Program.Log(nameof(StrangeService), message);\r\n\r\n\t\t\tprivate readonly ManualResetEvent mre = new ManualResetEvent(false);\r\n\r\n\t\t\tpublic void StartService()\r\n\t\t\t{\r\n\t\t\t\tLog(\"starting service\");\r\n\t\t\t\tnew Thread(new ThreadStart(Run)).Start();\r\n\t\t\t\tLog(\"waiting for service to start\");\r\n\t\t\t\tmre.WaitOne();\r\n\t\t\t\tLog(\"service started\");\r\n\t\t\t}\r\n\r\n\t\t\tprotected override void OnStart(string[] args)\r\n\t\t\t{\r\n\t\t\t\tLog(\"notifying started\");\r\n\t\t\t\tmre.Set();\r\n\t\t\t\tLog(\"started notification complete\");\r\n\t\t\t\tbase.OnStart(args);\r\n\t\t\t}\r\n\r\n\t\t\tprivate void Run()\r\n\t\t\t{\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tLog(\"calling ServiceBase.Run(this)\");\r\n\t\t\t\t\tRun(this);\r\n\t\t\t\t\tLog(\"ServiceBase.Run(this) completed\");\r\n\t\t\t\t}\r\n\t\t\t\tcatch { }\r\n\t\t\t\tfinally\r\n\t\t\t\t{\r\n\t\t\t\t\tLog(\"notifying completed\");\r\n\t\t\t\t\tmre.Set();\r\n\t\t\t\t\tLog(\"completed notified\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic static int Main()\r\n\t\t{\r\n\t\t\tDirectory.SetCurrentDirectory(AppDomain.CurrentDomain.BaseDirectory);\r\n\t\t\tusing var service = new StrangeService();\r\n\t\t\tLog(\"starting strange service\");\r\n\t\t\tservice.StartService();\r\n\t\t\tLog(\"strange service started\");\r\n\t\t\tLog(\"exiting application\");\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t}\r\n}\r\n```\r\nCreate build.cmd with following content:\r\n```cmd\r\n@echo off\r\nsc.exe stop WINSERVICE_STOP_TEST\r\ndotnet publish --self-contained true --configuration Release --runtime win10-x64 ServiceExitTest\\ServiceExitTest.csproj\r\nsc.exe delete WINSERVICE_STOP_TEST\r\nsc.exe create WINSERVICE_STOP_TEST binPath= \"%~dp0\\ServiceExitTest\\bin\\Release\\netcoreapp3.1\\win10-x64\\publish\\ServiceExitTest.exe\"\r\nsc.exe start WINSERVICE_STOP_TEST\r\n```\r\n\r\nExecute build.cmd and check the current state:\r\n```\r\nC:\\Repos\u003emore ServiceExitTest\\bin\\Release\\netcoreapp3.1\\win10-x64\\publish\\service_log.txt\r\n21.07.2022 11:37:25 [Program] starting strange service\r\n21.07.2022 11:37:25 [StrangeService] starting service\r\n21.07.2022 11:37:25 [StrangeService] waiting for service to start\r\n21.07.2022 11:37:25 [StrangeService] calling ServiceBase.Run(this)\r\n21.07.2022 11:37:25 [StrangeService] notifying started\r\n21.07.2022 11:37:25 [StrangeService] started notification complete\r\n21.07.2022 11:37:25 [StrangeService] service started\r\n21.07.2022 11:37:25 [Program] strange service started\r\n21.07.2022 11:37:25 [Program] exiting application\r\n\r\nC:\\Repos\u003esc.exe query WINSERVICE_STOP_TEST\r\n\r\nSERVICE_NAME: WINSERVICE_STOP_TEST\r\n        TYPE               : 10  WIN32_OWN_PROCESS\r\n        STATE              : 4  RUNNING\r\n                                (STOPPABLE, NOT_PAUSABLE, ACCEPTS_SHUTDOWN)\r\n        WIN32_EXIT_CODE    : 0  (0x0)\r\n        SERVICE_EXIT_CODE  : 0  (0x0)\r\n        CHECKPOINT         : 0x0\r\n        WAIT_HINT          : 0x0\r\n\r\nC:\\Repos\u003etasklist /fi \"IMAGENAME eq ServiceExitTest.exe\"\r\n\r\nImage Name                     PID Session Name        Session#    Mem Usage\r\n========================= ======== ================ =========== ============\r\nServiceExitTest.exe          10928 Services                   0     18,800 K\r\n```\r\n\r\nSo even though Main method has exited service and executable remain running. This happens because StrangeService.StartService starts new foreground thread which never completes (ServiceBase.Run does not return) because StrangeService.Stop is not called.\r\n\r\nIf you\u0027ll squint your eyes you can see that StrangeService is a WindowsServiceLifetime. The same behavior is observed in \"real project\" when error happens during IHostedService.StartAsync. There are couple ways to solve/workaround it:\r\n1. start thread as background - it will cause thread running ServiceBase.Run to be torn down when Main exists\r\n2. implement startup error handling to call ServiceBase.Stop if error occurred\r\n3. dont report service as started until ApplicationStarted is raised (my fav)\r\n\r\nAbout #3 - unlike SystemdLifetime, WindowsServiceLifetime reports service is up and running inside WaitForStartAsync before IHostApplicationLifetime.ApplicationStarted is raised which is completely wrong because service is not running. This can cause problems when the service is dependent by other services.\r\n\r\n### Expected behavior\r\n\r\n1. windows service should stop when main method exists\r\n2. windows service should not be reported as started until ApplicationStarted event is raised\r\n\r\n### Actual behavior\r\n\r\n1. windows service does not stop if execution happens during IHostedService.Start method\r\n2. windows service is reported as started before ApplicationStarted event is raised\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSDPnEQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5HAPjj",
                                           "createdAt":  "2022-07-21T09:15:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-serviceprocess\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nThere are several bugs related to WindowsServiceLifetime implementation in 3.1:\r\n1. windows service to hangs if there are errors during host initialization\r\n2. windows service is reported running until host is initialized.\r\n\r\n#2 is can be a problem if the service is dependent by another windows service.\r\n\n\n### Reproduction Steps\n\nHere is an example of what is roughly going on when application is started as windows service.\r\n\r\nCreate a new console application\r\n\r\n```cmd\r\ndotnet new console --framework netcoreapp3.1 --output ServiceExitTest\r\ndotnet add ServiceExitTest\\ServiceExitTest.csproj package --version 3.1.3 Microsoft.Extensions.Hosting.WindowsServices\r\n```\r\nReplace Program.cs:\r\n```csharp\r\nnamespace ServiceExitTest\r\n{\r\n\tusing System;\r\n\tusing System.IO;\r\n\tusing System.ServiceProcess;\r\n\tusing System.Threading;\r\n\r\n\tpublic class Program\r\n\t{\r\n\t\tprivate readonly static object logLock = new object();\r\n\t\tpublic static void Log(string name, string message)\r\n\t\t{\r\n\t\t\tlock (logLock)\r\n\t\t\t{\r\n\t\t\t\tmessage = $\"{DateTime.Now} [{name}] {message}\";\r\n\t\t\t\tFile.AppendAllText(\"service_log.txt\", message + Environment.NewLine);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic static void Log(string message) =\u003e Log(nameof(Program), message);\r\n\r\n\t\tclass StrangeService : ServiceBase\r\n\t\t{\r\n\t\t\tprivate static void Log(string message) =\u003e Program.Log(nameof(StrangeService), message);\r\n\r\n\t\t\tprivate readonly ManualResetEvent mre = new ManualResetEvent(false);\r\n\r\n\t\t\tpublic void StartService()\r\n\t\t\t{\r\n\t\t\t\tLog(\"starting service\");\r\n\t\t\t\tnew Thread(new ThreadStart(Run)).Start();\r\n\t\t\t\tLog(\"waiting for service to start\");\r\n\t\t\t\tmre.WaitOne();\r\n\t\t\t\tLog(\"service started\");\r\n\t\t\t}\r\n\r\n\t\t\tprotected override void OnStart(string[] args)\r\n\t\t\t{\r\n\t\t\t\tLog(\"notifying started\");\r\n\t\t\t\tmre.Set();\r\n\t\t\t\tLog(\"started notification complete\");\r\n\t\t\t\tbase.OnStart(args);\r\n\t\t\t}\r\n\r\n\t\t\tprivate void Run()\r\n\t\t\t{\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tLog(\"calling ServiceBase.Run(this)\");\r\n\t\t\t\t\tRun(this);\r\n\t\t\t\t\tLog(\"ServiceBase.Run(this) completed\");\r\n\t\t\t\t}\r\n\t\t\t\tcatch { }\r\n\t\t\t\tfinally\r\n\t\t\t\t{\r\n\t\t\t\t\tLog(\"notifying completed\");\r\n\t\t\t\t\tmre.Set();\r\n\t\t\t\t\tLog(\"completed notified\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic static int Main()\r\n\t\t{\r\n\t\t\tDirectory.SetCurrentDirectory(AppDomain.CurrentDomain.BaseDirectory);\r\n\t\t\tusing var service = new StrangeService();\r\n\t\t\tLog(\"starting strange service\");\r\n\t\t\tservice.StartService();\r\n\t\t\tLog(\"strange service started\");\r\n\t\t\tLog(\"exiting application\");\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t}\r\n}\r\n```\r\nCreate build.cmd with following content:\r\n```cmd\r\n@echo off\r\nsc.exe stop WINSERVICE_STOP_TEST\r\ndotnet publish --self-contained true --configuration Release --runtime win10-x64 ServiceExitTest\\ServiceExitTest.csproj\r\nsc.exe delete WINSERVICE_STOP_TEST\r\nsc.exe create WINSERVICE_STOP_TEST binPath= \"%~dp0\\ServiceExitTest\\bin\\Release\\netcoreapp3.1\\win10-x64\\publish\\ServiceExitTest.exe\"\r\nsc.exe start WINSERVICE_STOP_TEST\r\n```\r\n\r\nExecute build.cmd and check the current state:\r\n```\r\nC:\\Repos\u003emore ServiceExitTest\\bin\\Release\\netcoreapp3.1\\win10-x64\\publish\\service_log.txt\r\n21.07.2022 11:37:25 [Program] starting strange service\r\n21.07.2022 11:37:25 [StrangeService] starting service\r\n21.07.2022 11:37:25 [StrangeService] waiting for service to start\r\n21.07.2022 11:37:25 [StrangeService] calling ServiceBase.Run(this)\r\n21.07.2022 11:37:25 [StrangeService] notifying started\r\n21.07.2022 11:37:25 [StrangeService] started notification complete\r\n21.07.2022 11:37:25 [StrangeService] service started\r\n21.07.2022 11:37:25 [Program] strange service started\r\n21.07.2022 11:37:25 [Program] exiting application\r\n\r\nC:\\Repos\u003esc.exe query WINSERVICE_STOP_TEST\r\n\r\nSERVICE_NAME: WINSERVICE_STOP_TEST\r\n        TYPE               : 10  WIN32_OWN_PROCESS\r\n        STATE              : 4  RUNNING\r\n                                (STOPPABLE, NOT_PAUSABLE, ACCEPTS_SHUTDOWN)\r\n        WIN32_EXIT_CODE    : 0  (0x0)\r\n        SERVICE_EXIT_CODE  : 0  (0x0)\r\n        CHECKPOINT         : 0x0\r\n        WAIT_HINT          : 0x0\r\n\r\nC:\\Repos\u003etasklist /fi \"IMAGENAME eq ServiceExitTest.exe\"\r\n\r\nImage Name                     PID Session Name        Session#    Mem Usage\r\n========================= ======== ================ =========== ============\r\nServiceExitTest.exe          10928 Services                   0     18,800 K\r\n```\r\n\r\nSo even though Main method has exited service and executable remain running. This happens because StrangeService.StartService starts new foreground thread which never completes (ServiceBase.Run does not return) because StrangeService.Stop is not called.\r\n\r\nIf you\u0027ll squint your eyes you can see that StrangeService is a WindowsServiceLifetime. The same behavior is observed in \"real project\" when error happens during IHostedService.StartAsync. There are couple ways to solve/workaround it:\r\n1. start thread as background - it will cause thread running ServiceBase.Run to be teared down when Main exists\r\n2. implement startup error handling to call ServiceBase.Stop if error occurred\r\n3. dont report service as started until ApplicationStarted is raised (my fav)\r\n\r\nAbout #3 - unlike SystemdLifetime, WindowsServiceLifetime reports service is up and running inside WaitForStartAsync before IHostApplicationLifetime.ApplicationStarted is raised which is completely wrong because service is not running. This can cause problems when the service is dependent by other services.\n\n### Expected behavior\n\n1. windows service should stop when main method exists\r\n2. windows service should not be reported as started until ApplicationStarted event is raised\n\n### Actual behavior\n\n1. windows service does not stop if execution happens during IHostedService.Start method\r\n2. windows service is reported as started before ApplicationStarted event is raised\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ei-sinister\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.ServiceProcess`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-07-21T09:15:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HAfA7",
                                           "createdAt":  "2022-07-21T10:19:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "i-sinister",
                                           "body":  "I would also like to note that having separate thread just to call ServiceBase.Run is a clear indication that \"running an application\" was an afterthought when making dotnet core host design decisions (old windows service api is not compatible with new Host/Lifetime api).\r\n\r\nFor full framework I\u0027ve been using following approach that does not require separate thread since forever (aka .net 1.1):\r\n```csharp\r\n//  error handling logic omitted\r\n\r\ninterface IApp // host+hostlifetime\r\n{\r\n  int Run(string[] args);\r\n}\r\n\r\ninterface IDaemon // hosted service\r\n{\r\n  void Start();\r\n  void Stop();\r\n}\r\n\r\nclass ConsoleApp : IApp\r\n{\r\n  private readonly IDaemon daemon:\r\n  public ConsoleApp(IDaemon daemon)\r\n  {\r\n    this.daemon = daemon;\r\n  }\r\n  public int Run(string[] args)\r\n  {\r\n       daemon.Start();\r\n       Console.ReadLine();// or wait for Ctrl+C\r\n       daemon.Stop();\r\n       return 0;\r\n  }\r\n}\r\n\r\nclass ServiceApp : ServiceBase, IApp\r\n{\r\n  private readonly IDaemon daemon:\r\n  public ServiceApp (IDaemon daemon)\r\n  {\r\n    this.daemon = daemon;\r\n  }\r\n  public int Run(string args[])\r\n  {\r\n     Run(this);\r\n     return 0;\r\n  }\r\n  protected override void OnStart(string[] args)\r\n  {\r\n     base.OnStart(args);\r\n     daemon.Start();\r\n  }\r\n  protected override void OnShutdown()\r\n  {\r\n    daemon.Stop();\r\n    base.OnShutdown();\r\n  }\r\n  protected override void OnStop()\r\n  {\r\n      daemon.Stop();\r\n      base.OnStop();\r\n  }\r\n}\r\n\r\npublic static int Main(string[] args)\r\n{\r\n  var daemon = CreateDaemon(args);\r\n  var app = IsWindowsService ? new ServiceApp(daemon) : new ConsoleApp(daemon);\r\n  return app.Run(args);\r\n}\r\n```",
                                           "updatedAt":  "2022-07-21T10:19:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HTpci",
                                           "createdAt":  "2022-07-27T06:52:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-hosting\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nThere are several bugs related to WindowsServiceLifetime implementation in 3.1:\r\n1. windows service hangs if there are errors during host initialization\r\n2. windows service is reported running until host is initialized.\r\n\r\n#2 is can be a problem if the service is dependent by another windows service.\r\n\r\n\r\n### Reproduction Steps\r\n\r\nHere is an example of what is roughly going on when application is started as windows service.\r\n\r\nCreate a new console application\r\n\r\n```cmd\r\ndotnet new console --framework netcoreapp3.1 --output ServiceExitTest\r\ndotnet add ServiceExitTest\\ServiceExitTest.csproj package --version 3.1.3 Microsoft.Extensions.Hosting.WindowsServices\r\n```\r\nReplace Program.cs:\r\n```csharp\r\nnamespace ServiceExitTest\r\n{\r\n\tusing System;\r\n\tusing System.IO;\r\n\tusing System.ServiceProcess;\r\n\tusing System.Threading;\r\n\r\n\tpublic class Program\r\n\t{\r\n\t\tprivate readonly static object logLock = new object();\r\n\t\tpublic static void Log(string name, string message)\r\n\t\t{\r\n\t\t\tlock (logLock)\r\n\t\t\t{\r\n\t\t\t\tmessage = $\"{DateTime.Now} [{name}] {message}\";\r\n\t\t\t\tFile.AppendAllText(\"service_log.txt\", message + Environment.NewLine);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic static void Log(string message) =\u003e Log(nameof(Program), message);\r\n\r\n\t\tclass StrangeService : ServiceBase\r\n\t\t{\r\n\t\t\tprivate static void Log(string message) =\u003e Program.Log(nameof(StrangeService), message);\r\n\r\n\t\t\tprivate readonly ManualResetEvent mre = new ManualResetEvent(false);\r\n\r\n\t\t\tpublic void StartService()\r\n\t\t\t{\r\n\t\t\t\tLog(\"starting service\");\r\n\t\t\t\tnew Thread(new ThreadStart(Run)).Start();\r\n\t\t\t\tLog(\"waiting for service to start\");\r\n\t\t\t\tmre.WaitOne();\r\n\t\t\t\tLog(\"service started\");\r\n\t\t\t}\r\n\r\n\t\t\tprotected override void OnStart(string[] args)\r\n\t\t\t{\r\n\t\t\t\tLog(\"notifying started\");\r\n\t\t\t\tmre.Set();\r\n\t\t\t\tLog(\"started notification complete\");\r\n\t\t\t\tbase.OnStart(args);\r\n\t\t\t}\r\n\r\n\t\t\tprivate void Run()\r\n\t\t\t{\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tLog(\"calling ServiceBase.Run(this)\");\r\n\t\t\t\t\tRun(this);\r\n\t\t\t\t\tLog(\"ServiceBase.Run(this) completed\");\r\n\t\t\t\t}\r\n\t\t\t\tcatch { }\r\n\t\t\t\tfinally\r\n\t\t\t\t{\r\n\t\t\t\t\tLog(\"notifying completed\");\r\n\t\t\t\t\tmre.Set();\r\n\t\t\t\t\tLog(\"completed notified\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic static int Main()\r\n\t\t{\r\n\t\t\tDirectory.SetCurrentDirectory(AppDomain.CurrentDomain.BaseDirectory);\r\n\t\t\tusing var service = new StrangeService();\r\n\t\t\tLog(\"starting strange service\");\r\n\t\t\tservice.StartService();\r\n\t\t\tLog(\"strange service started\");\r\n\t\t\tLog(\"exiting application\");\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t}\r\n}\r\n```\r\nCreate build.cmd with following content:\r\n```cmd\r\n@echo off\r\nsc.exe stop WINSERVICE_STOP_TEST\r\ndotnet publish --self-contained true --configuration Release --runtime win10-x64 ServiceExitTest\\ServiceExitTest.csproj\r\nsc.exe delete WINSERVICE_STOP_TEST\r\nsc.exe create WINSERVICE_STOP_TEST binPath= \"%~dp0\\ServiceExitTest\\bin\\Release\\netcoreapp3.1\\win10-x64\\publish\\ServiceExitTest.exe\"\r\nsc.exe start WINSERVICE_STOP_TEST\r\n```\r\n\r\nExecute build.cmd and check the current state:\r\n```\r\nC:\\Repos\u003emore ServiceExitTest\\bin\\Release\\netcoreapp3.1\\win10-x64\\publish\\service_log.txt\r\n21.07.2022 11:37:25 [Program] starting strange service\r\n21.07.2022 11:37:25 [StrangeService] starting service\r\n21.07.2022 11:37:25 [StrangeService] waiting for service to start\r\n21.07.2022 11:37:25 [StrangeService] calling ServiceBase.Run(this)\r\n21.07.2022 11:37:25 [StrangeService] notifying started\r\n21.07.2022 11:37:25 [StrangeService] started notification complete\r\n21.07.2022 11:37:25 [StrangeService] service started\r\n21.07.2022 11:37:25 [Program] strange service started\r\n21.07.2022 11:37:25 [Program] exiting application\r\n\r\nC:\\Repos\u003esc.exe query WINSERVICE_STOP_TEST\r\n\r\nSERVICE_NAME: WINSERVICE_STOP_TEST\r\n        TYPE               : 10  WIN32_OWN_PROCESS\r\n        STATE              : 4  RUNNING\r\n                                (STOPPABLE, NOT_PAUSABLE, ACCEPTS_SHUTDOWN)\r\n        WIN32_EXIT_CODE    : 0  (0x0)\r\n        SERVICE_EXIT_CODE  : 0  (0x0)\r\n        CHECKPOINT         : 0x0\r\n        WAIT_HINT          : 0x0\r\n\r\nC:\\Repos\u003etasklist /fi \"IMAGENAME eq ServiceExitTest.exe\"\r\n\r\nImage Name                     PID Session Name        Session#    Mem Usage\r\n========================= ======== ================ =========== ============\r\nServiceExitTest.exe          10928 Services                   0     18,800 K\r\n```\r\n\r\nSo even though Main method has exited service and executable remain running. This happens because StrangeService.StartService starts new foreground thread which never completes (ServiceBase.Run does not return) because StrangeService.Stop is not called.\r\n\r\nIf you\u0027ll squint your eyes you can see that StrangeService is a WindowsServiceLifetime. The same behavior is observed in \"real project\" when error happens during IHostedService.StartAsync. There are couple ways to solve/workaround it:\r\n1. start thread as background - it will cause thread running ServiceBase.Run to be torn down when Main exists\r\n2. implement startup error handling to call ServiceBase.Stop if error occurred\r\n3. dont report service as started until ApplicationStarted is raised (my fav)\r\n\r\nAbout #3 - unlike SystemdLifetime, WindowsServiceLifetime reports service is up and running inside WaitForStartAsync before IHostApplicationLifetime.ApplicationStarted is raised which is completely wrong because service is not running. This can cause problems when the service is dependent by other services.\r\n\r\n### Expected behavior\r\n\r\n1. windows service should stop when main method exists\r\n2. windows service should not be reported as started until ApplicationStarted event is raised\r\n\r\n### Actual behavior\r\n\r\n1. windows service does not stop if execution happens during IHostedService.Start method\r\n2. windows service is reported as started before ApplicationStarted event is raised\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ei-sinister\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Hosting`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-07-27T06:52:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HTqJ1",
                                           "createdAt":  "2022-07-27T06:56:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Changed the area path - I believe this issue is reporting a problem with `Microsoft.Extensions.Hosting.WindowsServices`.  It\u0027s more evidence like https://github.com/dotnet/runtime/issues/62579 that the hosting model and windows services aren\u0027t playing well together.",
                                           "updatedAt":  "2022-07-27T06:56:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HVLMT",
                                           "createdAt":  "2022-07-27T13:07:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "@i-sinister - can you describe the issue(s) in terms of using Microsoft.Extensions.Hosting.WindowsServices, and not how WindowsServices is implemented? For example, can you give a repro project that uses Microsoft.Extensions.Hosting.WindowsServices and what the expected and actual behavior in the project is. See https://github.com/dotnet/runtime/blob/main/CONTRIBUTING.md#writing-a-good-bug-report.",
                                           "updatedAt":  "2022-07-27T13:07:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Hall0",
                                           "createdAt":  "2022-07-28T13:35:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "i-sinister",
                                           "body":  "@eerhardt, here you are:\r\n```csharp\r\nnamespace ServiceExitTest\r\n{\r\n\tusing Microsoft.Extensions.DependencyInjection;\r\n\tusing Microsoft.Extensions.Hosting;\r\n\tusing System;\r\n\tusing System.IO;\r\n\tusing System.Threading;\r\n\tusing System.Threading.Tasks;\r\n\r\n\tpublic class Program\r\n\t{\r\n\t\tprivate readonly static object logLock = new object();\r\n\t\tpublic static void Log(string name, string message)\r\n\t\t{\r\n\t\t\tlock (logLock)\r\n\t\t\t{\r\n\t\t\t\tmessage = $\"{DateTime.Now} [{name}] {message}\";\r\n\t\t\t\tFile.AppendAllText(\"service_log.txt\", message + Environment.NewLine);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic static void Log(string message) =\u003e Log(nameof(Program), message);\r\n\r\n\t\tpublic class BadService : IHostedService\r\n\t\t{\r\n\t\t\tpublic Task StartAsync(CancellationToken cancellationToken)\r\n\t\t\t{\r\n\t\t\t\tLog(\"starting bad service\");\r\n\t\t\t\tthrow new Exception(\"kaboom\");\r\n\t\t\t}\r\n\r\n\t\t\tpublic Task StopAsync(CancellationToken cancellationToken)\r\n\t\t\t{\r\n\t\t\t\tLog(\"stopping bad service\");\r\n\t\t\t\treturn Task.CompletedTask;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic static async Task\u003cint\u003e Main()\r\n\t\t{\r\n\t\t\tDirectory.SetCurrentDirectory(AppDomain.CurrentDomain.BaseDirectory);\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tLog(\"building host\");\r\n\t\t\t\tvar host = Host.CreateDefaultBuilder()\r\n\t\t\t\t\t.ConfigureServices(services =\u003e services.AddHostedService\u003cBadService\u003e())\r\n\t\t\t\t\t.UseWindowsService()\r\n\t\t\t\t\t.Build();\r\n\t\t\t\tLog(\"running host\");\r\n\t\t\t\tawait host.RunAsync();\r\n\t\t\t\tLog(\"application completed\");\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\tcatch (Exception ex)\r\n\t\t\t{\r\n\t\t\t\tLog($\"error: {ex}\");\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nStarting windows service generates log similar to following:\r\n```\r\nC:\\\u003emore ServiceExitTest\\bin\\Release\\netcoreapp3.1\\win10-x64\\publish\\service_log.txt\r\n28.07.2022 16:27:18 [Program] building host\r\n28.07.2022 16:27:18 [Program] running host\r\n28.07.2022 16:27:18 [Program] starting bad service\r\n28.07.2022 16:27:18 [Program] error: System.Exception: kaboom\r\n   at ServiceExitTest.Program.BadService.StartAsync(CancellationToken cancellationToken) in C:\\ServiceExitTest\\Program.cs:line 71\r\n   at Microsoft.Extensions.Hosting.Internal.Host.StartAsync(CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.RunAsync(IHost host, CancellationToken token)\r\n   at Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.RunAsync(IHost host, CancellationToken token)\r\n   at ServiceExitTest.Program.Main() in C:\\ServiceExitTest\\Program.cs:line 101\r\n```\r\n\r\nAfter  \u0027error ...\u0027 log line main function exits and host and all related services are disposed. However executable remains running, as well as windows service.",
                                           "updatedAt":  "2022-07-28T13:35:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ha-TD",
                                           "createdAt":  "2022-07-28T14:52:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "\u003e However executable remains running, as well as windows service.\r\n\r\nI see above it appears you are using `netcoreapp3.1`. Have you tried this with the latest? When I use `net6.0` and the `6.0.0` version of `Microsoft.Extensions.Hosting.WindowsServices`, the service is stopped after the exception is thrown.\r\n\r\n\u003e So even though Main method has exited service and executable remain running. This happens because StrangeService.StartService starts new foreground thread which never completes\r\n\r\nThe latest code uses a background thread:\r\n\r\nhttps://github.com/dotnet/runtime/blob/9a0b8f339ddb5cd6d4f7e8c333afc9a74dc545e5/src/libraries/Microsoft.Extensions.Hosting.WindowsServices/src/WindowsServiceLifetime.cs#L59-L61",
                                           "updatedAt":  "2022-07-28T14:52:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HdjYc",
                                           "createdAt":  "2022-07-29T06:33:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "i-sinister",
                                           "body":  "\u003e I see above it appears you are using netcoreapp3.1. Have you tried this with the latest?\r\n\r\nNope, as we are using 3.1 - there are multiple services that were written even before 6.0 was a thing.\r\n\r\n\u003e The latest code uses a background thread: ...\r\n\r\nThis should not be happening then. I only wonder is it the correct way to handle this scenario.\r\n\r\nHowever the issue with reporting windows service as started while it is actually starting and apis are not available is still present",
                                           "updatedAt":  "2022-07-29T06:40:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HfGdD",
                                           "createdAt":  "2022-07-29T14:04:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "\u003e However the issue with reporting windows service as started while it is actually starting and apis are not available is still present\r\n\r\ncan you describe the issue(s) with a repro project that uses Microsoft.Extensions.Hosting.WindowsServices and what the expected and actual behavior in the project is? See https://github.com/dotnet/runtime/blob/main/CONTRIBUTING.md#writing-a-good-bug-report.",
                                           "updatedAt":  "2022-07-29T14:04:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HiGIs",
                                           "createdAt":  "2022-07-30T09:00:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "i-sinister",
                                           "body":  "I dont understand what is unclear in the first post but anyway here is it:\r\n\r\nReplace Program.cs with:\r\n\r\n```\r\nnamespace ServiceExitTest\r\n{\r\n\tusing Microsoft.Extensions.DependencyInjection;\r\n\tusing Microsoft.Extensions.Hosting;\r\n\tusing System;\r\n\tusing System.IO;\r\n\tusing System.Threading;\r\n\tusing System.Threading.Tasks;\r\n\r\n\tpublic class Program\r\n\t{\r\n\t\tprivate readonly static object logLock = new object();\r\n\t\tpublic static void Log(string name, string message)\r\n\t\t{\r\n\t\t\tlock (logLock)\r\n\t\t\t{\r\n\t\t\t\tmessage = $\"{DateTime.Now} [{name}] {message}\";\r\n\t\t\t\tFile.AppendAllText(\"service_log.txt\", message + Environment.NewLine);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic static void Log(string message) =\u003e Log(nameof(Program), message);\r\n\r\n\t\tpublic class BadService : IHostedService\r\n\t\t{\r\n\t\t\tpublic async Task StartAsync(CancellationToken cancellationToken)\r\n\t\t\t{\r\n\t\t\t\tLog(\"starting bad service\");\r\n\t\t\t\tawait Task.Delay(55000);\r\n\t\t\t\tthrow new Exception(\"kaboom\");\r\n\t\t\t}\r\n\r\n\r\n\t\t\tpublic Task StopAsync(CancellationToken cancellationToken)\r\n\t\t\t{\r\n\t\t\t\tLog(\"stopping bad service\");\r\n\t\t\t\treturn Task.CompletedTask;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic static async Task\u003cint\u003e Main()\r\n\t\t{\r\n\t\t\tDirectory.SetCurrentDirectory(AppDomain.CurrentDomain.BaseDirectory);\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tLog(\"building host\");\r\n\t\t\t\tvar host = Host.CreateDefaultBuilder()\r\n\t\t\t\t\t.ConfigureServices(services =\u003e services.AddHostedService\u003cBadService\u003e())\r\n\t\t\t\t\t.UseWindowsService()\r\n\t\t\t\t\t.Build();\r\n\t\t\t\tLog(\"running host\");\r\n\t\t\t\tawait host.RunAsync();\r\n\t\t\t\tLog(\"application completed\");\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\tcatch (Exception ex)\r\n\t\t\t{\r\n\t\t\t\tLog($\"error: {ex}\");\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nStarting windows service, observe logs and status:\r\n```\r\nc:\\\u003emore ServiceExitTest\\bin\\Release\\netcoreapp3.1\\win10-x64\\publish\\service_log.txt\r\n30.07.2022 11:50:05 [Program] building host\r\n30.07.2022 11:50:05 [Program] running host\r\n30.07.2022 11:50:05 [Program] starting bad service\r\n\r\nc:\\\u003esc.exe query WINSERVICE_STOP_TEST\r\n\r\nSERVICE_NAME: WINSERVICE_STOP_TEST\r\n        TYPE               : 10  WIN32_OWN_PROCESS\r\n        STATE              : 4  RUNNING\r\n                                (STOPPABLE, NOT_PAUSABLE, ACCEPTS_SHUTDOWN)\r\n        WIN32_EXIT_CODE    : 0  (0x0)\r\n        SERVICE_EXIT_CODE  : 0  (0x0)\r\n        CHECKPOINT         : 0x0\r\n        WAIT_HINT          : 0x0\r\n```\r\n\r\nAs you can see service startup is in process but service reported as running which is not correct.\r\n\r\nIf you\u0027ll use `UseSystemd` instead of broken `UseWindowsService` the service will not be reported as running until \u0027starting sequence\u0027 completes.",
                                           "updatedAt":  "2022-07-30T09:00:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IGQZq",
                                           "createdAt":  "2022-08-09T16:22:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "It looks like the issue is that the ServiceBase.Run method is kicked off from `WaitForStartAsync`, which is called before calling each `IHostService.StartAsync`.\r\n\r\nThe main Host logic StartAsync:\r\n\r\nhttps://github.com/dotnet/runtime/blob/e71a9583b4d6c9bd97edd87cda7f98f232f63530/src/libraries/Microsoft.Extensions.Hosting/src/Internal/Host.cs#L56-L80\r\n\r\nThe sequence goes:\r\n\r\n* await _hostLifetime.WaitForStartAsync\r\n* Call each IHostedService.StartAsync\r\n* Raise _applicationLifetime.Started\r\n\r\nAnd here is the WindowsServiceLifetime.WaitForStartAsync, which kicks off a separate thread to call `ServiceBase.Run`:\r\n\r\nhttps://github.com/dotnet/runtime/blob/e71a9583b4d6c9bd97edd87cda7f98f232f63530/src/libraries/Microsoft.Extensions.Hosting.WindowsServices/src/WindowsServiceLifetime.cs#L45-L70\r\n\r\nThis means the \"Windows Service\" side thinks the service is up and running before the `IHostService.StartAsync` methods get to run.\r\n\r\nOne potential fix for this would be to move the code that kicks off a thread to call `ServiceBase.Run` into the `ApplicationLifetime.Started` handler. That way it occurs after each service has started.\r\n\r\n@Tratcher - do you know why it was done this way originally?\r\n\r\n@i-sinister - one potential workaround for now would be to subscribe to `ApplicationLifetime.ApplicationStarted` yourself and log some message to indicate to dependent services that the service is now started.",
                                           "updatedAt":  "2022-08-09T16:22:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IIWg7",
                                           "createdAt":  "2022-08-10T04:33:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "\u003e One potential fix for this would be to move the code that kicks off a thread to call ServiceBase.Run into the ApplicationLifetime.Started handler. That way it occurs after each service has started.\r\n\r\nThat seems like a reasonable change but I don\u0027t know what else it impacts. It means hosted services run before ServiceBase does anything right? Systemd has a lighter weight communication model where the application just sends signals over a unix domain socket signaling (started, or stopped).",
                                           "updatedAt":  "2022-08-10T04:33:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IIXg4",
                                           "createdAt":  "2022-08-10T04:41:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I think I remember why it was done this way. We use [OnStart](https://github.com/dotnet/runtime/blob/e71a9583b4d6c9bd97edd87cda7f98f232f63530/src/libraries/Microsoft.Extensions.Hosting.WindowsServices/src/WindowsServiceLifetime.cs#L90) to signal that the service is starting up. Basically we let the windows service tell us when it has started before we start running user code. For that to be the case we needed to Run the service. \r\n\r\nIt seems like instead we\u0027d want to either:\r\n- Run the windows service after the hosted services run. I\u0027m don\u0027t think failures would propagate, it would just never start the service if any of those fail.\r\n- Run the startup sequence from OnStart. This is a bit inverted because the IHostLifetime APIs don\u0027t have a way to run the startup sequence of the host. It\u0027s just one of the things the host uses before it starts the sequence. ",
                                           "updatedAt":  "2022-08-10T04:41:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ILQ0w",
                                           "createdAt":  "2022-08-10T15:59:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "This seems to be a common theme with Hosting.WindowsServices. Which app model is \"in charge\"? I wrote about this in https://github.com/dotnet/runtime/issues/63284#issuecomment-1005149933 w.r.t. exiting the app. There it was basically decided that the Extensions.Hosting app model \"sits on top of\" ServiceBase, and Extensions.Hosting is the owner/controller of the process.\r\n\r\nWhat if we add a wait both ways in OnStart? We do the same sequence we do today and wait for ServiceBase.OnStart to get called before running user code. But then the new change is to block the ServiceBase.OnStart waiting for the `_applicationLifetime.Started` event to be raised (basically all of the IHostedService.StartAsync methods have completed).\r\n\r\nThe sequence would be:\r\n\r\n* await _hostLifetime.WaitForStartAsync\r\n    * Spin up a thread for ServiceBase.Run to be called\r\n    * Wait for ServiceBase.OnStart to be invoked. When it is invoked, it sets the `_delayStart` flag indicating that it was called, and then it waits for the \"started\" flag to be set.\r\n* Call each IHostedService.StartAsync\r\n* Raise _applicationLifetime.Started\r\n     * Unblock ServiceBase.OnStart thread by setting the \"started\" flag, which tells Windows that the service is now running\r\n\r\nThoughts?",
                                           "updatedAt":  "2022-08-10T16:00:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IMxQw",
                                           "createdAt":  "2022-08-10T21:39:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "The main complaint above seems to be that the service reports as \"running\" before IHostedService\u0027s are called. Run is needed to tell the service we\u0027re ready to start and wait for the service host to actually start us. Does the service report \"running\" before or after OnStart is called?",
                                           "updatedAt":  "2022-08-10T21:39:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IM-cR",
                                           "createdAt":  "2022-08-10T22:47:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Right as long as we can also propagate failures so if Started never fires, we want OnStart to throw or fail or something.",
                                           "updatedAt":  "2022-08-10T22:47:33Z"
                                       }
                                   ],
                         "totalCount":  16
                     },
        "title":  "WindowsSerivceLifetime is broken",
        "labels":  [
                       "area-Extensions-Hosting"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/73473",
        "createdAt":  "2022-07-31T06:53:21Z",
        "number":  73473,
        "author":  "dferretti",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-08-05T17:21:18Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nI am trying to ConfigureWebHost, but only if the host\u0027s app config indicates it should do so. However, ConfigureWebHost must be called earlier in the setup process, before any app configuration is available.\r\n\r\nI found this locked issue from a few years ago: https://github.com/dotnet/aspnetcore/issues/22079\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nLike the linked issue asks, making `GenericWebHostService` public could help, but it still needs configuration.\r\n\r\nI would like to be able to do something like this:\r\n```c#\r\nHost.CreateDefaultBuilder()\r\n    .ConfigureServices((ctx, services) =\u003e\r\n    {\r\n        if (ctx.Configuration ... some condition)\r\n            services.AddWebHost(webHostBuilder =\u003e ...);\r\n    });\r\n```\r\n\r\n### Additional context\r\n\r\nNot thinking it would actually work, but I did try\r\n```c#\r\nvar builder = Host.CreateDefaultBuilder();\r\nbuilder.ConfigureServices((ctx, services) =\u003e\r\n{\r\n    if (...)\r\n        builder.ConfigureWebHost(webHostBuilder =\u003e ...);\r\n});\r\n```\r\nbut that results in \r\n```\r\nUnhandled exception. System.InvalidOperationException: Collection was modified; enumeration operation may not execute.\r\n   at System.Collections.Generic.List`1.Enumerator.MoveNext()\r\n   at Microsoft.Extensions.Hosting.HostBuilder.CreateServiceProvider()\r\n   at Microsoft.Extensions.Hosting.HostBuilder.Build()\r\n```\r\nI have not dug all the way in yet, but this leads me to believe that `ConfigureWebHost` is not just adding a normal IHostedService, but adding some other callbacks to the host builder that modify the config/service callback lists out of the normal order.\r\n\r\nThis is in net6.0\r\n\r\n### Proposed API\r\n\r\n```diff\r\n// In the Microsoft.Extensions.Hosting assembly\r\nnamespace Microsoft.Extensions.Configuration;\r\n\r\n+ public static class HostingConfigurationBuilderExtensions\r\n+ {\r\n+    public static IConfigurationBuilder AddDefaultHostingSources(this IConfigurationBuilder configurationBuilder);\r\n+ }\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOR-w8_A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5H7Duq",
                                           "createdAt":  "2022-08-01T23:36:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "\u003e I have not dug all the way in yet, but this leads me to believe that ConfigureWebHost is not just adding a normal IHostedService, but adding some other callbacks to the host builder that modify the config/service callback lists out of the normal order.\r\n\r\nIt\u0027s a bad idea to call `IHostBuilder` extension methods during or after the call to `Build()`, and this is during `Build()`. `ConfigureWebHost` adding more `ConfigureServices` callbacks to the list of callbacks while the builder is enumerating the list is the proximate cause of the `InvalidOperationException`.\r\n\r\nHowever, you are right that there is a more fundamental ordering issue with doing something like `ConfigureWebHost` so late in the build process. `ConfigureWebHost` adds `ASPNET_`-prefixed environment variables as a \"host\" configuration source. It\u0027s this configuration that\u0027s passed to the `ConfigureServices` callback via the `HostBuilderContext` (and even earlier to any `ConfigureAppConfiguration` callback), so it\u0027s too late for `ConfigureWebHost` to do this.\r\n\r\nThis means that any other libraries or frameworks that do `if (ctx.Configuration ... some condition)` expecting those conditions to be influenced by `ASPNET_`-prefixed environment variables would be broken if someone only called the proposed `services.AddWebHost(...)` API. I don\u0027t want to go down the road of having different ways to create a web host that have this kind of subtle difference in config loading.\r\n\r\nCould you instead create a `new ConfigurationBuilder()` or `new ConfigurationManager()` yourself and add whatever default configuration sources (environment variables, appsettings.json, etc...) you need manually? Then you could read configuration before you end up inside the a `ConfigureServices` callback.",
                                           "updatedAt":  "2022-08-01T23:40:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5H7Duu",
                                           "createdAt":  "2022-08-01T23:37:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Hi @dferretti. We have added the \"Needs: Author Feedback\" label to this issue, which indicates that we have an open question for you before we can take further action. This issue will be closed automatically in 7 days if we do not hear back from you by then - please feel free to re-open it if you come back to this issue after that time.",
                                           "updatedAt":  "2022-08-01T23:37:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5H7Duz",
                                           "createdAt":  "2022-08-01T23:43:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "\u003e ```\r\n\u003e Unhandled exception. System.InvalidOperationException: Collection was modified; enumeration operation may not execute.\r\n\u003e    at System.Collections.Generic.List`1.Enumerator.MoveNext()\r\n\u003e    at Microsoft.Extensions.Hosting.HostBuilder.CreateServiceProvider()\r\n\u003e    at Microsoft.Extensions.Hosting.HostBuilder.Build()\r\n\u003e ```\r\n\r\nWe might be able to improve the exception regardless. These days, we\u0027d probably point most people to `WebApplicationBuilder` and `HostApplicationBuilder` instead of the generic host, but the generic host is still very much supported and this is a sharp corner. It\u0027s not super obvious that you cannot call `IHostBuilder` APIs once you\u0027re already in `ConfigureServices()` and similar methods, and exceptions like these don\u0027t effectively point out the problem.\r\n\r\n",
                                           "updatedAt":  "2022-08-01T23:43:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5H7Du2",
                                           "createdAt":  "2022-08-03T15:35:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dferretti",
                                           "body":  "Ah yeah I can see how I was essentially calling ConfigureServices from within a ConfigureServices callback, which is not good. Agreed that touching the host builder at all within any of those config/service callbacks is a bad idea.\r\n\r\nThe project I am working on is built around the generic host, so I was trying to plug in to the existing host config -\u003e app config -\u003e dependency injection sort of pipeline. I could manually rebuild my config sources but it does sort of feel like re-implementing the generic host. That might be the best way forward though.\r\n\r\nI do see how the concept of adding the web host is more than just a hosted service, it is host config and app config and a hosted service, from [here](https://github.com/dotnet/aspnetcore/blob/773e8cc3fbdc2c4ffbd57c1f53f21649ef94c35c/src/Hosting/Hosting/src/GenericHost/GenericWebHostBuilder.cs#L23). In my head I see those as 3 building blocks of the web host, and ConfigureWebHost is a convenience method that adds all 3. Maybe they could all be exposed so a library could take responsibility of replicating the config steps and choosing to call the configureservices step manually. But I see what you mean that would not be a pit of success if users or libraries call it without properly setting up the config. \r\n\r\n",
                                           "updatedAt":  "2022-08-03T15:35:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5H7Du7",
                                           "createdAt":  "2022-08-04T00:14:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "\u003e But I see what you mean that would not be a pit of success if users or libraries call it without properly setting up the config.\r\n\r\nThat is what I\u0027m worried about. I don\u0027t want to make it too easy to get a `GenericWebHostBuilder` that\u0027s not configured properly.\r\n\r\n\u003e The project I am working on is built around the generic host, so I was trying to plug in to the existing host config -\u003e app config -\u003e dependency injection sort of pipeline. I could manually rebuild my config sources but it does sort of feel like re-implementing the generic host. That might be the best way forward though.\r\n\r\nGetting the default configuration sources can be somewhat difficult. If you just want hosting\u0027s default configuration sources (minus the web host\u0027s `ASPNETCORE_` environment variables), I think your best bet is to just build a host, read whatever config you want out of it, dispose it, and then build another host with or without the generic web host based on that config.\r\n\r\nThe chicken-and-egg problem here is that the web host affects what the default configuration sources are. Would an extension method in Microsoft.Extensions.Hosting for `IConfigurationBuilder` like `AddDefaultHostingSources()` be useful so you wouldn\u0027t have to create an entire host just to read the default config?\r\n\r\n",
                                           "updatedAt":  "2022-08-04T00:16:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5H7DvB",
                                           "createdAt":  "2022-08-04T21:48:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dferretti",
                                           "body":  "Chicken-and-egg is a good way to describe this. I am sold on the idea of rebuilding the config manually - and I think `AddDefaultHostingSources` would be a very nice way of doing that cleanly. I like the idea!",
                                           "updatedAt":  "2022-08-04T21:48:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5H7DvG",
                                           "createdAt":  "2022-08-05T17:02:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCqGq_w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dferretti",
                                                                               "createdAt":  "2022-08-05T18:07:22Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "halter73",
                                           "body":  "I\u0027ve updated this issue with an API proposal and I\u0027m moving this to the runtime repo which is where `AddDefaultHostingSources()` would be added if we decide to do it. We\u0027re pretty late in .NET 7 development, so I wouldn\u0027t expect anything to happen here until .NET 8.",
                                           "updatedAt":  "2022-08-05T17:02:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5H7Dz8",
                                           "createdAt":  "2022-08-05T17:03:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-hosting\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nI am trying to ConfigureWebHost, but only if the host\u0027s app config indicates it should do so. However, ConfigureWebHost must be called earlier in the setup process, before any app configuration is available.\r\n\r\nI found this locked issue from a few years ago: https://github.com/dotnet/aspnetcore/issues/22079\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nLike the linked issue asks, making `GenericWebHostService` public could help, but it still needs configuration.\r\n\r\nI would like to be able to do something like this:\r\n```c#\r\nHost.CreateDefaultBuilder()\r\n    .ConfigureServices((ctx, services) =\u003e\r\n    {\r\n        if (ctx.Configuration ... some condition)\r\n            services.AddWebHost(webHostBuilder =\u003e ...);\r\n    });\r\n```\r\n\r\n### Additional context\r\n\r\nNot thinking it would actually work, but I did try\r\n```c#\r\nvar builder = Host.CreateDefaultBuilder();\r\nbuilder.ConfigureServices((ctx, services) =\u003e\r\n{\r\n    if (...)\r\n        builder.ConfigureWebHost(webHostBuilder =\u003e ...);\r\n});\r\n```\r\nbut that results in \r\n```\r\nUnhandled exception. System.InvalidOperationException: Collection was modified; enumeration operation may not execute.\r\n   at System.Collections.Generic.List`1.Enumerator.MoveNext()\r\n   at Microsoft.Extensions.Hosting.HostBuilder.CreateServiceProvider()\r\n   at Microsoft.Extensions.Hosting.HostBuilder.Build()\r\n```\r\nI have not dug all the way in yet, but this leads me to believe that `ConfigureWebHost` is not just adding a normal IHostedService, but adding some other callbacks to the host builder that modify the config/service callback lists out of the normal order.\r\n\r\nThis is in net6.0\r\n\r\n### Proposed API\r\n\r\n```diff\r\n// In the Microsoft.Extensions.Hosting assembly\r\nnamespace Microsoft.Extensions.Configuration;\r\n\r\n+ public static class HostingConfigurationBuilderExtensions\r\n+ {\r\n+    public static IConfigurationBuilder AddDefaultHostingSources(this IConfigurationBuilder configurationBuilder);\r\n+ }\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edferretti\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-Extensions-Hosting`, `area-runtime`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-08-05T17:03:05Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "Add default hosting sources to arbitrary IConfigurationBuilder",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Hosting"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/77381",
        "createdAt":  "2022-10-24T14:09:50Z",
        "number":  77381,
        "author":  "beppemarazzi",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODIXPRg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KalleOlaviNiemitalo",
                                            "createdAt":  "2023-11-02T17:20:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cyungmann",
                                            "createdAt":  "2025-07-09T17:11:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "delreluca",
                                            "createdAt":  "2025-07-24T14:28:41Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2025-07-24T14:04:15Z",
        "body":  "### Description\r\n\r\nIf there is an unexpected exception into a `BackgroundService`, the Host correctly tears down all the application by default. (see https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.hosting.hostoptions.backgroundserviceexceptionbehavior)\r\n\r\nThe problem is that when the application is executed in a WindowsService through [`UseWindowsService`](https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.hosting.windowsservicelifetimehostbuilderextensions.usewindowsservice) API, the ServiceControlManager is notified of a normal ServiceStop in this case. So it\u0027s impossible to configure the SCM to restart the service in case of unexpected termination.\r\n\r\n### Reproduction Steps\r\n\r\n1. Compile this simple program\r\n```cs\r\nvar options = new WebApplicationOptions\r\n{\r\n    Args = args,\r\n    ContentRootPath = AppContext.BaseDirectory\r\n};\r\n\r\nvar builder = WebApplication.CreateBuilder(options);\r\nbuilder.Host.UseWindowsService();\r\nbuilder.Services.AddHostedService\u003cMyHS\u003e();\r\n\r\nvar app = builder.Build();\r\n\r\napp.Run();\r\n\r\nclass MyHS : BackgroundService\r\n{\r\n    private readonly ILogger _logger;\r\n    public MyHS(ILogger\u003cMyHS\u003e logger)\r\n    {\r\n        _logger = logger;\r\n    }\r\n    protected override async Task ExecuteAsync(CancellationToken stoppingToken)\r\n    {\r\n        _logger.LogInformation(\"Started\");\r\n        while(!stoppingToken.IsCancellationRequested)\r\n        {\r\n            if (File.Exists(\"c:\\\\crash.txt\"))\r\n                throw new InvalidOperationException(\"CRASH\");\r\n\r\n            await Task.Delay(2000);\r\n        }        \r\n        _logger.LogInformation(\"Stopped\");\r\n    }\r\n}\r\n```\r\n\r\n2. Install it as a Windows Service (i.e. `sc create _myService binpath=C:\\Devel\\test\\WebApplication2\\WebApplication2\\bin\\Debug\\net6.0\\WebApplication2.exe`\r\n3. Configure the SCM to restart the service in case of unexpected error (i.e. `sc failure _myService reset=0 actions=restart/5000`\r\n4. Start the service\r\n5. Create a new file `c:\\crash.txt`\r\n6. Look at the service status and wait until it\u0027s dead\r\n7. Delete the file `c:\\crash.txt`\r\n8. Wait some seconds (i.e. 5)\r\n\r\n\r\n### Expected behavior\r\n\r\nThe service will restart\r\n\r\n### Actual behavior\r\n\r\nNothing happens\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\nI\u0027ve developed a dirty workaround, but IMHO is preferable to officially address this issue.\r\nIn few words:\r\n\r\n1. i\u0027m intercepting the Host Logger to detect if there is an event with EventId == 10 raised when the Host is stopped due to an unexpected exception (see (https://source.dot.net/#Microsoft.Extensions.Hosting/Internal/Host.cs,110) )\r\n2. i\u0027m overriding the registration of the service `WindowsServiceLifetime` with something like this:\r\n\r\n```cs\r\n  ...\r\n   services.AddSingleton\u003cIHostLifetime, WindowsServiceLifetimeEx\u003e();\r\n   ...\r\n \r\n\r\n    internal class WindowsServiceLifetimeEx : WindowsServiceLifetime, IHostLifetime\r\n    {\r\n        private readonly HostLogger m_hostLogger; //this is my wrapper around ILogger that stores the exception logged with event 10. It\u0027s injected into Host overriding the registration for ILogger\u003c\u003e...\r\n        public WindowsServiceLifetimeEx(HostLogger hostLogger, IHostEnvironment environment, IHostApplicationLifetime applicationLifetime, ILoggerFactory loggerFactory, IOptions\u003cHostOptions\u003e optionsAccessor)\r\n            : base(environment, applicationLifetime, loggerFactory, optionsAccessor)\r\n        {\r\n            m_hostLogger = hostLogger;\r\n        }\r\n\r\n        protected override void OnStop()\r\n        {\r\n            var ex = m_hostLogger.BackgroundServiceStoppingHostException;\r\n            if (ex != null)\r\n                throw ex;\r\n            base.OnStop();\r\n        }\r\n    }\r\n```\r\n\r\n\r\n\r\n\r\n### Configuration\r\n\r\nMicrosoft.AspNetCore.App 6.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n\r\nλ  [System.Environment]::OSVersion.Version\r\n\r\nMajor  Minor  Build  Revision\r\n-----  -----  -----  --------\r\n10     0      19043  0\r\n\r\n\r\n\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOuZTNHw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5M1g03",
                                           "createdAt":  "2022-10-24T14:09:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-hosting\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nIf there is an unexpected exception into a `BackgroundService`, the Host correctly tears down all the application by default. (see https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.hosting.hostoptions.backgroundserviceexceptionbehavior)\r\n\r\nThe problem is that when the application is executed in a WindowsService through [`UseWindowsService`](https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.hosting.windowsservicelifetimehostbuilderextensions.usewindowsservice) API, the ServiceControlManager is notified of a normal ServiceStop in this case. So it\u0027s impossible to configure the SCM to restart the service in case of unexpected termination.\n\n### Reproduction Steps\n\n1. Compile this simple program\r\n```\r\nvar options = new WebApplicationOptions\r\n{\r\n    Args = args,\r\n    ContentRootPath = AppContext.BaseDirectory\r\n};\r\n\r\nvar builder = WebApplication.CreateBuilder(options);\r\nbuilder.Host.UseWindowsService();\r\nbuilder.Services.AddHostedService\u003cMyHS\u003e();\r\n\r\nvar app = builder.Build();\r\n\r\napp.Run();\r\n\r\nclass MyHS : BackgroundService\r\n{\r\n    private readonly ILogger _logger;\r\n    public MyHS(ILogger\u003cMyHS\u003e logger)\r\n    {\r\n        _logger = logger;\r\n    }\r\n    protected override async Task ExecuteAsync(CancellationToken stoppingToken)\r\n    {\r\n        _logger.LogInformation(\"Started\");\r\n        while(!stoppingToken.IsCancellationRequested)\r\n        {\r\n            if (File.Exists(\"c:\\\\crash.txt\"))\r\n                throw new InvalidOperationException(\"CRASH\");\r\n\r\n            await Task.Delay(2000);\r\n        }        \r\n        _logger.LogInformation(\"Stopped\");\r\n    }\r\n}\r\n```\r\n\r\n2. Install it as a Windows Service (i.e. `sc create _myService binpath=C:\\Devel\\test\\WebApplication2\\WebApplication2\\bin\\Debug\\net6.0\\WebApplication2.exe`\r\n3. Configure the SCM to restart the service in case of unexpected error (i.e. `sc failure _myService reset=0 actions=restart/5000`\r\n4. Start the service\r\n5. Create a new file `c:\\crash.txt`\r\n6. Look at the service status and wait until it\u0027s dead\r\n7. Delete the file `c:\\crash.txt`\r\n8. Wait some seconds (i.e. 5)\r\n\n\n### Expected behavior\n\nThe service will restart\n\n### Actual behavior\n\nNothing happens\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nI\u0027ve developed a dirty workaround, but IMHO is preferable to officially address this issue.\r\nIn few words:\r\n\r\n1. i\u0027m intercepting the Host Logger to detect if there is an event with EventId == 10 raised when the Host is stopped due to an unexpected exception (see (https://source.dot.net/#Microsoft.Extensions.Hosting/Internal/Host.cs,110) )\r\n2. i\u0027m overriding the registration of the service `WindowsServiceLifetime` with something like this:\r\n\r\n```\r\n  ...\r\n   services.AddSingleton\u003cIHostLifetime, WindowsServiceLifetimeEx\u003e();\r\n   ...\r\n \r\n\r\n    internal class WindowsServiceLifetimeEx : WindowsServiceLifetime, IHostLifetime\r\n    {\r\n        private readonly IHostApplicationLifetime m_applicationLifetime;\r\n        private readonly ILogger m_logger;\r\n        private readonly HostLogger m_hostLogger;\r\n        public WindowsServiceLifetimeEx(HostLogger hostLogger, IHostEnvironment environment, IHostApplicationLifetime applicationLifetime, ILoggerFactory loggerFactory, IOptions\u003cHostOptions\u003e optionsAccessor)\r\n            : base(environment, applicationLifetime, loggerFactory, optionsAccessor)\r\n        {\r\n            m_applicationLifetime = applicationLifetime;\r\n            m_logger = loggerFactory.CreateLogger\u003cWindowsServiceLifetimeEx\u003e();\r\n            m_hostLogger = hostLogger;\r\n        }\r\n\r\n        async Task IHostLifetime.StopAsync(CancellationToken cancellationToken)\r\n        {\r\n            var cleanExit = !m_hostLogger.IsBackgroundServiceStoppingHost;\r\n            if (cleanExit)\r\n            {\r\n                m_logger.LogDebug(\"Clean exiting...\");\r\n                await base.StopAsync(cancellationToken);\r\n                m_logger.LogDebug(\"Clean exit!\");\r\n            }\r\n            else\r\n            {\r\n                m_logger.LogDebug(\"NOT Clean exiting...\");\r\n                m_applicationLifetime.StopApplication();\r\n                try\r\n                {\r\n                    await Task.Delay(-1, m_applicationLifetime.ApplicationStopped);\r\n                }\r\n                catch (OperationCanceledException)\r\n                {\r\n                }\r\n                m_logger.LogDebug(\"NOT Clean exit!\");\r\n            }\r\n        }\r\n    }\r\n```\r\n\r\n\r\n\n\n### Configuration\n\nMicrosoft.AspNetCore.App 6.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n\r\nλ  [System.Environment]::OSVersion.Version\r\n\r\nMajor  Minor  Build  Revision\r\n-----  -----  -----  --------\r\n10     0      19043  0\r\n\r\n\r\n\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ebeppemarazzi\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Hosting`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-10-24T14:09:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UJZNw",
                                           "createdAt":  "2023-02-01T09:40:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "beppemarazzi",
                                           "body":  "Probably related with #50019",
                                           "updatedAt":  "2023-02-01T09:40:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5aUtC8",
                                           "createdAt":  "2023-04-19T21:03:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Perhaps the request here would be to instead have a new value for [BackgroundServiceExceptionBehavior](https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.hosting.backgroundserviceexceptionbehavior?view=dotnet-plat-ext-7.0) which would be to rethrow the exception and let the process exit.",
                                           "updatedAt":  "2023-04-19T21:03:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qw4xi",
                                           "createdAt":  "2023-11-02T17:27:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "Not sure about rethrowing… it should be enough if you run `sc.exe failureflag SERVICENAME 1` at install time and then set ServiceBase.ExitCode = nonzero (e.g. Exception.HResult) during the IHostApplicationLifetime.ApplicationStopped notification if the stop was caused by an error.  Hosting will log the original exception anyway, so you don\u0027t need to rethrow that for ServiceBase to catch and log.",
                                           "updatedAt":  "2023-11-02T17:27:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc65lM0f",
                                           "createdAt":  "2025-07-24T13:44:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "delreluca",
                                           "body":  "There are multiple issues at hand here:\n- #67146: exceptions in background services stop the host (since .NET 6 unless you change the behaviour), they do not set `Environment.ExitCode` and they do not throw another exception for you to catch. The workaround in that issue lets you check for exceptions after the host has already stopped\n- When using Microsoft.Extensions.Hosting.WindowsServices the `WindowsServiceLifetime` is used as lifetime, which will signal the status SERVICE_STOPPED to the Service Control Manager on stop. A STOPPED service however is not recognised as failure unless `sc failureflag \u003cservice name\u003e 1` was called (or you click that checkbox in the Services UI) and the exit code is non-zero.\n- Windows services have their own exit codes, setting `Environment.ExitCode` won’t work. So you have to set `WindowsServiceLifetime.ExitCode`, but _before_ signalling STOPPED\n- Alternatively you can call `Environment.Exit(1)` to just immediately terminate the process before stopping. Since the status is not STOPPED, this is detected as failure independent of `failureflag`. However this terminates _immediately,_ which might not be desired\n\nAll of this means that you currently have to catch the exception inside of the background service loop and then do something additional to just throwing, for example you can (without changing the lifetime like you did)\n- Immediately terminate with `Environment.Exit(1)` nothing will be executed afterwards. This will not required you to set `failureflag`\n- Set the `WindowsServiceLifetime.ExitCode` which you could access by injecting `IHostLifetime`, then rethrow to let the `WindowsServiceLifetime` set service to STOPPED (this will require `failureflag`)",
                                           "updatedAt":  "2025-07-24T14:04:15Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "UseWindowsService reports a gracefull ServiceStop to SCM even in case of exception, so it\u0027s impossible to schedule a restart",
        "labels":  [
                       "area-Extensions-Hosting"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/78100",
        "createdAt":  "2022-11-09T10:54:48Z",
        "number":  78100,
        "author":  "saber-wang",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-11-15T22:52:42Z",
        "body":  "### Description\r\n\r\nAttaching files that cannot be watch  to the program will cause startup blocking.\r\n\r\n### Reproduction Steps\r\n\r\n\r\nhttps://github.com/dotnet/runtime/blob/2934824d2aa45ab6d558040f27de0d0027872353/src/libraries/Microsoft.Extensions.Configuration.Json/src/JsonConfigurationExtensions.cs#L80\r\nAlthough there is a call to `ResolveFileProvider`,but\r\nhttps://github.com/dotnet/runtime/blob/2934824d2aa45ab6d558040f27de0d0027872353/src/libraries/Microsoft.Extensions.Configuration.FileExtensions/src/FileConfigurationSource.cs#L73 `IsPathRouted ` returned `false`,so it is not executed \r\n\r\n_(Because the relative path is given https://github.com/dotnet/runtime/blob/2934824d2aa45ab6d558040f27de0d0027872353/src/libraries/Microsoft.Extensions.Hosting/src/HostingHostBuilderExtensions.cs#L235)_\r\n\r\nFinally use ` builder.GetFileProvider() ` Cause watch  to the program root directory\r\nhttps://github.com/dotnet/runtime/blob/2934824d2aa45ab6d558040f27de0d0027872353/src/libraries/Microsoft.Extensions.Configuration.FileExtensions/src/FileConfigurationSource.cs#L61\r\n\r\nProvider acquired by ` builder.GetFileProvider() ` \r\nhttps://github.com/dotnet/runtime/blob/2934824d2aa45ab6d558040f27de0d0027872353/src/libraries/Microsoft.Extensions.Hosting/src/HostBuilder.cs#L277\r\n\r\n\r\n\r\n### Expected behavior\r\n\r\nOnly watch to appsettings*\r\n\r\n### Actual behavior\r\n\r\n watch the program root directory\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\nSet  `ASPNETCORE_hostBuilder:reloadConfigOnChange`=`false`,Cancel watch \r\n\r\n### Configuration\r\n\r\nruntime: net6\r\narchitecture : x64\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTg-ZPA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5OCQIW",
                                           "createdAt":  "2022-11-09T18:50:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nAttaching files that cannot be watch  to the program will cause startup blocking.\n\n### Reproduction Steps\n\n\r\nhttps://github.com/dotnet/runtime/blob/2934824d2aa45ab6d558040f27de0d0027872353/src/libraries/Microsoft.Extensions.Configuration.Json/src/JsonConfigurationExtensions.cs#L80\r\nAlthough there is a call to ` ResolveFileProvider`,but\r\nhttps://github.com/dotnet/runtime/blob/2934824d2aa45ab6d558040f27de0d0027872353/src/libraries/Microsoft.Extensions.Configuration.FileExtensions/src/FileConfigurationSource.cs#L73 `IsPathRouted ` returned `false`,so it is not executed \r\n\r\n_(Because the relative path is given https://github.com/dotnet/runtime/blob/2934824d2aa45ab6d558040f27de0d0027872353/src/libraries/Microsoft.Extensions.Hosting/src/HostingHostBuilderExtensions.cs#L235)_\r\n\r\nFinally use ` builder GetFileProvider() ` Cause watch  to the program root directory\r\nhttps://github.com/dotnet/runtime/blob/2934824d2aa45ab6d558040f27de0d0027872353/src/libraries/Microsoft.Extensions.Configuration.FileExtensions/src/FileConfigurationSource.cs#L61\r\n\r\nProvider acquired by ` builder GetFileProvider() ` \r\nhttps://github.com/dotnet/runtime/blob/2934824d2aa45ab6d558040f27de0d0027872353/src/libraries/Microsoft.Extensions.Hosting/src/HostBuilder.cs#L277\r\n\r\n\n\n### Expected behavior\n\nOnly watch to appsettings*\n\n### Actual behavior\n\n watch the program root directory\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nSet  `ASPNETCORE_hostBuilder:reloadConfigOnChange`=`false`,Cancel watch \n\n### Configuration\n\nruntime: net6\r\narchitecture : x64\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003esaber-wang\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Configuration`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-11-09T18:50:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5OCcHD",
                                           "createdAt":  "2022-11-09T19:35:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-hosting\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nAttaching files that cannot be watch  to the program will cause startup blocking.\r\n\r\n### Reproduction Steps\r\n\r\n\r\nhttps://github.com/dotnet/runtime/blob/2934824d2aa45ab6d558040f27de0d0027872353/src/libraries/Microsoft.Extensions.Configuration.Json/src/JsonConfigurationExtensions.cs#L80\r\nAlthough there is a call to `ResolveFileProvider`,but\r\nhttps://github.com/dotnet/runtime/blob/2934824d2aa45ab6d558040f27de0d0027872353/src/libraries/Microsoft.Extensions.Configuration.FileExtensions/src/FileConfigurationSource.cs#L73 `IsPathRouted ` returned `false`,so it is not executed \r\n\r\n_(Because the relative path is given https://github.com/dotnet/runtime/blob/2934824d2aa45ab6d558040f27de0d0027872353/src/libraries/Microsoft.Extensions.Hosting/src/HostingHostBuilderExtensions.cs#L235)_\r\n\r\nFinally use ` builder.GetFileProvider() ` Cause watch  to the program root directory\r\nhttps://github.com/dotnet/runtime/blob/2934824d2aa45ab6d558040f27de0d0027872353/src/libraries/Microsoft.Extensions.Configuration.FileExtensions/src/FileConfigurationSource.cs#L61\r\n\r\nProvider acquired by ` builder.GetFileProvider() ` \r\nhttps://github.com/dotnet/runtime/blob/2934824d2aa45ab6d558040f27de0d0027872353/src/libraries/Microsoft.Extensions.Hosting/src/HostBuilder.cs#L277\r\n\r\n\r\n\r\n### Expected behavior\r\n\r\nOnly watch to appsettings*\r\n\r\n### Actual behavior\r\n\r\n watch the program root directory\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\nSet  `ASPNETCORE_hostBuilder:reloadConfigOnChange`=`false`,Cancel watch \r\n\r\n### Configuration\r\n\r\nruntime: net6\r\narchitecture : x64\r\n\r\n### Other information\r\n\r\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003esaber-wang\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Hosting`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-11-09T19:35:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5OD5k8",
                                           "createdAt":  "2022-11-10T01:30:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "saber-wang",
                                           "body":  "@tarekgh  I don\u0027t know if this is a host extensions problem, because it is more likely to be caused by inconsistent expectations for `AddJsonFile`.\r\nI have also used this api to add configuration files. Now I know, this will watch  to the root directory of the program.\r\n\r\n",
                                           "updatedAt":  "2022-11-10T01:33:17Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Host.CreateDefaultBuilder watch the program root directory",
        "labels":  [
                       "area-Extensions-Hosting"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/78789",
        "createdAt":  "2022-11-22T07:44:08Z",
        "number":  78789,
        "author":  "voroninp",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCsCbFA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "amiru3f",
                                            "createdAt":  "2022-12-29T00:08:37Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-05-11T09:27:35Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nIt\u0027s not the first time I making same mistake of starting published asp.net core application in docker without setting working directory:\r\n```\r\nENTRYPOINT [\"dotnet\", \"/app/api.dll\"]\r\n```\r\nAnd content root path becomes `/`, so `appsettings` and other content files are not found. This causes app to fail on startup.\r\n\r\nHost logs its content root path much later, so in case of failure I do not get a message like:\r\n\u003e Content root path: /app \r\n\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nIMO, if host logged current working directory it would be much friendlier to the developer:\r\n\r\n\u003e Current working directory is `/`. If  Content root path is not set explicitly, then working directory is ued by default.\r\n\r\n### Additional context\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOXAJKEw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5PBZsO",
                                           "createdAt":  "2022-11-23T23:27:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-11-23T23:27:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PBaCI",
                                           "createdAt":  "2022-11-23T23:29:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC1UwsA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "buyaa-n",
                                                                               "createdAt":  "2022-12-12T18:34:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "voroninp",
                                                                               "createdAt":  "2023-02-02T15:13:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "BrennanConroy",
                                           "body":  "We might be able to log this sooner, e.g. between `ConfigureHostConfiguration` and `ConfigureAppConfiguration`.\r\n\r\nIt also should be easy to add this to your app by adding a `Console.WriteLine(host.Environment.ContentRoot);` inside `ConfigureAppConfiguration` or before `WebApplicationBuilder.Build();` depending on the host you\u0027re using.",
                                           "updatedAt":  "2022-11-23T23:29:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PBbQu",
                                           "createdAt":  "2022-11-23T23:40:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "voroninp",
                                           "body":  "\u003e It also should be easy to add this to your app\r\n\r\nOne should know Content Root is affected by working directory to want it to be logged. ;-)",
                                           "updatedAt":  "2022-11-23T23:40:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PIzzk",
                                           "createdAt":  "2022-11-25T16:55:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nIt\u0027s not the first time I making same mistake of starting published asp.net core application in docer without setting working directory:\r\n```\r\nENTRYPOINT [\"dotnet\", \"/app/api.dll\"]\r\n```\r\nAnd content root path becomes `/`, so `appsettings` and other content files are not found. This causes app to fail on startup.\r\n\r\nHost logs its content root path much later, so in case of failure I do not get a message like:\r\n\u003e Content root path: /app \r\n\n\n### Describe the solution you\u0027d like\n\nIMO, if host logged current working directory it would be much friendlier to the developer:\r\n\r\n\u003e Current working directory is `/`. If  Content root path is not set explicitly, then working directory is ued by default.\n\n### Additional context\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003evoroninp\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Configuration`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-11-25T16:55:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PJjrZ",
                                           "createdAt":  "2022-11-25T22:02:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-hosting\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nIt\u0027s not the first time I making same mistake of starting published asp.net core application in docer without setting working directory:\r\n```\r\nENTRYPOINT [\"dotnet\", \"/app/api.dll\"]\r\n```\r\nAnd content root path becomes `/`, so `appsettings` and other content files are not found. This causes app to fail on startup.\r\n\r\nHost logs its content root path much later, so in case of failure I do not get a message like:\r\n\u003e Content root path: /app \r\n\n\n### Describe the solution you\u0027d like\n\nIMO, if host logged current working directory it would be much friendlier to the developer:\r\n\r\n\u003e Current working directory is `/`. If  Content root path is not set explicitly, then working directory is ued by default.\n\n### Additional context\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003evoroninp\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Hosting`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-11-25T22:02:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5V6TnQ",
                                           "createdAt":  "2023-02-23T08:08:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC2m1qg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "voroninp",
                                                                               "createdAt":  "2023-02-23T08:54:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tmds",
                                           "body":  "I\u0027m not sure what the design rationale was for making the ContentRoot default to the working directory?\r\n\r\nThis breaks apps that depend on files that sit besides the app, like appsettings or Razor files.\r\n\r\n```cs\r\nhostBuilder.UseContentRoot(AppContext.BaseDirectory)\r\n```\r\nmakes the problem disappear.\r\n\r\nNote: the content root can also be set using the `DOTNET_CONTENTROOT` envvar.",
                                           "updatedAt":  "2023-02-23T09:30:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5V6fQT",
                                           "createdAt":  "2023-02-23T08:54:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "voroninp",
                                           "body":  "@tmds , this should be in project template, IMO. ",
                                           "updatedAt":  "2023-02-23T08:54:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5WUXE5",
                                           "createdAt":  "2023-02-28T13:25:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "@davidfowl do you know why `ContentRoot` defaults to the working directory?\r\n\r\nAny thoughts on including:\r\n\r\n```cs\r\nhostBuilder.UseContentRoot(AppContext.BaseDirectory)\r\n```\r\n\r\nin the templates?",
                                           "updatedAt":  "2023-02-28T13:25:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5b82_F",
                                           "createdAt":  "2023-05-10T19:17:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "The previous merge was reverted due to concerns in https://github.com/dotnet/runtime/issues/85809 which need to be addressed for the next go.",
                                           "updatedAt":  "2023-05-10T19:17:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cATxS",
                                           "createdAt":  "2023-05-11T08:41:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pedrobsaila",
                                           "body":  "@steveharter the concerns varied from don\u0027t need this log at all to we can keep it with adjustments. So what is the target here ?\r\n\r\nIn case we take the adjustment road, I\u0027m not convinced at all with making the log level Debug, it\u0027s rare that someone launches an application with this min log level : from what I see in the community, we configure min log level as Information for Debug/Development environments and Warning/Error is used for integration/test/production environments. Downgrading to Debug means that no one will ever see it making it useless.",
                                           "updatedAt":  "2023-05-11T08:49:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cAkoT",
                                           "createdAt":  "2023-05-11T09:27:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC7hNTA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pedrobsaila",
                                                                               "createdAt":  "2023-05-11T09:32:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tmds",
                                           "body":  "The underlying issue is that ASP.NET apps that come with content files (like Razor pages and appsettings files), the files are published with the app, but the app goes looking for them in the working directory.\r\nSo when you start the app from a random directory, it doesn\u0027t work.",
                                           "updatedAt":  "2023-05-11T09:27:35Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "Explictily log working directory and let user know it will be used as content root path by default.",
        "labels":  [
                       "help wanted",
                       "area-Extensions-Hosting"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/81566",
        "createdAt":  "2023-02-02T21:06:44Z",
        "number":  81566,
        "author":  "eerhardt",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-02-09T19:11:03Z",
        "body":  "### Description\n\nIt is pretty easy to misconfigure your DependencyInjection services in an application. To help catch mistakes, we have 2 options when building an `IServiceProvider`:\r\n\r\nhttps://github.com/dotnet/runtime/blob/9e8d0a81a35f05eaa2c4d0ab258ed9a1f4e2ec76/src/libraries/Microsoft.Extensions.DependencyInjection/src/ServiceProviderOptions.cs#L16-L25\r\n\r\nHosting adds some logic that says when the current environment is a \"Development\" environment, we should run these DI validations:\r\n\r\nhttps://github.com/dotnet/runtime/blob/9e8d0a81a35f05eaa2c4d0ab258ed9a1f4e2ec76/src/libraries/Microsoft.Extensions.Hosting/src/HostingHostBuilderExtensions.cs#L315-L320\r\n\r\nHowever, this logic doesn\u0027t run when `DisableDefaults=true` on HostApplicationBuilderSettings. But since it is so useful, we should consider changing to always do this logic no matter what `DisableDefaults` is set to.\r\n\r\nNOTE: The same applies to the `HostBuilder` API. When you create a `HostBuilder` directly (without using `CreateDefaultBuilder`), the IServiceProvider is built without this logic. If we are going to fix `HostApplicationBuilder`, we should fix `HostBuilder` too.\n\n### Reproduction Steps\n\n```C#\r\nvar config = new ConfigurationManager();\r\nconfig.AddInMemoryCollection(new Dictionary\u003cstring, string?\u003e()\r\n{\r\n    { HostDefaults.EnvironmentKey, \"Development\" }\r\n});\r\n\r\nvar settings = new HostApplicationBuilderSettings\r\n{\r\n    Configuration = config,\r\n    DisableDefaults = true\r\n};\r\n\r\nvar builder = new HostApplicationBuilder(settings);\r\nbuilder.Services.AddSingleton\u003cSingletonService\u003e();\r\nbuilder.Services.AddScoped\u003cScopedService\u003e();\r\nbuilder.Build();\r\n\r\nclass SingletonService\r\n{\r\n    public SingletonService(ScopedService scopedService) { }\r\n}\r\n\r\nclass ScopedService\r\n{\r\n    public ScopedService() { }\r\n}\r\n```\n\n### Expected behavior\n\nThis should throw an exception, like it does with `DisableDefaults=false`.\r\n\r\n```\r\nUnhandled exception. System.AggregateException: Some services are not able to be constructed (Error while validating the service descriptor \u0027ServiceType: SingletonService Lifetime: Singleton ImplementationType: SingletonService\u0027: Cannot consume scoped service \u0027ScopedService\u0027 from singleton \u0027SingletonService\u0027.)\r\n ---\u003e System.InvalidOperationException: Error while validating the service descriptor \u0027ServiceType: SingletonService Lifetime: Singleton ImplementationType: SingletonService\u0027: Cannot consume scoped service \u0027ScopedService\u0027 from singleton \u0027SingletonService\u0027.\r\n ---\u003e System.InvalidOperationException: Cannot consume scoped service \u0027ScopedService\u0027 from singleton \u0027SingletonService\u0027.\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteValidator.VisitScopeCache(ServiceCallSite scopedCallSite, CallSiteValidatorState state)\r\n```\n\n### Actual behavior\n\nNo exception is thrown. The Host is built successfully.\n\n### Regression?\n\nNo\n\n### Known Workarounds\n\nWrite the code to check for `IsDevelopment` yourself, add the DI validation options, and build the `IServiceProvider` yourself.\n\n### Configuration\n\n_No response_\n\n### Other information\n\ncc @halter73 @davidfowl ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOVE2d-w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5UTZ05",
                                           "createdAt":  "2023-02-02T21:06:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-dependencyinjection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nIt is pretty easy to misconfigure your DependencyInjection services in an application. To help catch mistakes, we have 2 options when building an `IServiceProvider`:\r\n\r\nhttps://github.com/dotnet/runtime/blob/9e8d0a81a35f05eaa2c4d0ab258ed9a1f4e2ec76/src/libraries/Microsoft.Extensions.DependencyInjection/src/ServiceProviderOptions.cs#L16-L25\r\n\r\nHosting adds some logic that says when the current environment is a \"Development\" environment, we should run these DI validations:\r\n\r\nhttps://github.com/dotnet/runtime/blob/9e8d0a81a35f05eaa2c4d0ab258ed9a1f4e2ec76/src/libraries/Microsoft.Extensions.Hosting/src/HostingHostBuilderExtensions.cs#L315-L320\r\n\r\nHowever, this logic doesn\u0027t run when `DisableDefaults=true` on HostApplicationBuilderSettings. But since it is so useful, we should consider changing to always do this logic no matter what `DisableDefaults` is set to.\r\n\r\nNOTE: The same applies to the `HostBuilder` API. When you create a `HostBuilder` directly (without using `CreateDefaultBuilder`), the IServiceProvider is built without this logic. If we are going to fix `HostApplicationBuilder`, we should fix `HostBuilder` too.\n\n### Reproduction Steps\n\n```C#\r\nvar config = new ConfigurationManager();\r\nconfig.AddInMemoryCollection(new Dictionary\u003cstring, string?\u003e()\r\n{\r\n    { HostDefaults.EnvironmentKey, \"Development\" }\r\n});\r\n\r\nvar settings = new HostApplicationBuilderSettings\r\n{\r\n    Configuration = config,\r\n    DisableDefaults = true\r\n};\r\n\r\nvar builder = new HostApplicationBuilder(settings);\r\nbuilder.Services.AddSingleton\u003cSingletonService\u003e();\r\nbuilder.Services.AddScoped\u003cScopedService\u003e();\r\nbuilder.Build();\r\n\r\nclass SingletonService\r\n{\r\n    public SingletonService(ScopedService scopedService) { }\r\n}\r\n\r\nclass ScopedService\r\n{\r\n    public ScopedService() { }\r\n}\r\n```\n\n### Expected behavior\n\nThis should throw an exception, like it does with `DisableDefaults=false`.\r\n\r\n```\r\nUnhandled exception. System.AggregateException: Some services are not able to be constructed (Error while validating the service descriptor \u0027ServiceType: SingletonService Lifetime: Singleton ImplementationType: SingletonService\u0027: Cannot consume scoped service \u0027ScopedService\u0027 from singleton \u0027SingletonService\u0027.)\r\n ---\u003e System.InvalidOperationException: Error while validating the service descriptor \u0027ServiceType: SingletonService Lifetime: Singleton ImplementationType: SingletonService\u0027: Cannot consume scoped service \u0027ScopedService\u0027 from singleton \u0027SingletonService\u0027.\r\n ---\u003e System.InvalidOperationException: Cannot consume scoped service \u0027ScopedService\u0027 from singleton \u0027SingletonService\u0027.\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteValidator.VisitScopeCache(ServiceCallSite scopedCallSite, CallSiteValidatorState state)\r\n```\n\n### Actual behavior\n\nNo exception is thrown. The Host is built successfully.\n\n### Regression?\n\nNo\n\n### Known Workarounds\n\nWrite the code to check for `IsDevelopment` yourself, add the DI validation options, and build the `IServiceProvider` yourself.\n\n### Configuration\n\n_No response_\n\n### Other information\n\ncc @halter73 @davidfowl \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eeerhardt\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-DependencyInjection`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-02-02T21:06:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UTZ37",
                                           "createdAt":  "2023-02-02T21:07:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-hosting\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nIt is pretty easy to misconfigure your DependencyInjection services in an application. To help catch mistakes, we have 2 options when building an `IServiceProvider`:\r\n\r\nhttps://github.com/dotnet/runtime/blob/9e8d0a81a35f05eaa2c4d0ab258ed9a1f4e2ec76/src/libraries/Microsoft.Extensions.DependencyInjection/src/ServiceProviderOptions.cs#L16-L25\r\n\r\nHosting adds some logic that says when the current environment is a \"Development\" environment, we should run these DI validations:\r\n\r\nhttps://github.com/dotnet/runtime/blob/9e8d0a81a35f05eaa2c4d0ab258ed9a1f4e2ec76/src/libraries/Microsoft.Extensions.Hosting/src/HostingHostBuilderExtensions.cs#L315-L320\r\n\r\nHowever, this logic doesn\u0027t run when `DisableDefaults=true` on HostApplicationBuilderSettings. But since it is so useful, we should consider changing to always do this logic no matter what `DisableDefaults` is set to.\r\n\r\nNOTE: The same applies to the `HostBuilder` API. When you create a `HostBuilder` directly (without using `CreateDefaultBuilder`), the IServiceProvider is built without this logic. If we are going to fix `HostApplicationBuilder`, we should fix `HostBuilder` too.\n\n### Reproduction Steps\n\n```C#\r\nvar config = new ConfigurationManager();\r\nconfig.AddInMemoryCollection(new Dictionary\u003cstring, string?\u003e()\r\n{\r\n    { HostDefaults.EnvironmentKey, \"Development\" }\r\n});\r\n\r\nvar settings = new HostApplicationBuilderSettings\r\n{\r\n    Configuration = config,\r\n    DisableDefaults = true\r\n};\r\n\r\nvar builder = new HostApplicationBuilder(settings);\r\nbuilder.Services.AddSingleton\u003cSingletonService\u003e();\r\nbuilder.Services.AddScoped\u003cScopedService\u003e();\r\nbuilder.Build();\r\n\r\nclass SingletonService\r\n{\r\n    public SingletonService(ScopedService scopedService) { }\r\n}\r\n\r\nclass ScopedService\r\n{\r\n    public ScopedService() { }\r\n}\r\n```\n\n### Expected behavior\n\nThis should throw an exception, like it does with `DisableDefaults=false`.\r\n\r\n```\r\nUnhandled exception. System.AggregateException: Some services are not able to be constructed (Error while validating the service descriptor \u0027ServiceType: SingletonService Lifetime: Singleton ImplementationType: SingletonService\u0027: Cannot consume scoped service \u0027ScopedService\u0027 from singleton \u0027SingletonService\u0027.)\r\n ---\u003e System.InvalidOperationException: Error while validating the service descriptor \u0027ServiceType: SingletonService Lifetime: Singleton ImplementationType: SingletonService\u0027: Cannot consume scoped service \u0027ScopedService\u0027 from singleton \u0027SingletonService\u0027.\r\n ---\u003e System.InvalidOperationException: Cannot consume scoped service \u0027ScopedService\u0027 from singleton \u0027SingletonService\u0027.\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteValidator.VisitScopeCache(ServiceCallSite scopedCallSite, CallSiteValidatorState state)\r\n```\n\n### Actual behavior\n\nNo exception is thrown. The Host is built successfully.\n\n### Regression?\n\nNo\n\n### Known Workarounds\n\nWrite the code to check for `IsDevelopment` yourself, add the DI validation options, and build the `IServiceProvider` yourself.\n\n### Configuration\n\n_No response_\n\n### Other information\n\ncc @halter73 @davidfowl \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eeerhardt\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Hosting`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-02-02T21:07:06Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "HostApplicationBuilder doesn\u0027t validate DependencyInjection in Development environment if DisableDefaults=true",
        "labels":  [
                       "area-Extensions-Hosting"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/84958",
        "createdAt":  "2023-04-18T01:32:11Z",
        "number":  84958,
        "author":  "KashMoneyMillionaire",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-05-18T19:04:32Z",
        "body":  "### Description\n\nI would like to re-open #43410 for conversation. The resolution from that ticket was that the docs needed updated (and they were), but I believe this is poor/unexpected/wrong behavior. \r\n\r\nUsing IHostBuilder, there should be some way to configure your services using existing configuration. This is especially important when using Azure App Config or Azure Key Vault, where you need a configuration value to be used as the key to setup further values.\r\n\r\nCurrently, there is no recommended way to use appsettings.json or User Secrets values as part of your configuration. However, this is possible when using `WebApplication.CreateBuilder`.\n\n### Reproduction Steps\n\nProgram.cs:\r\n```csharp\r\nusing Microsoft.Extensions.Hosting;\r\n\r\nusing var host = Host.CreateDefaultBuilder(args)\r\n                     .ConfigureAppConfiguration((context, _) =\u003e\r\n                      {\r\n                          Console.Write($\"My key\u0027s value is: {context.Configuration[\"Key\"]}\");\r\n                      })\r\n                     .Build();\r\n\r\nawait host.RunAsync();\r\n```\r\n\r\nappsettings.json:\r\n```json\r\n{\r\n    \"Key\": \"Value\"\r\n}\r\n```\n\n### Expected behavior\n\nOutput: `My key\u0027s value is: Value`\n\n### Actual behavior\n\nOutput: `My key\u0027s value is: `\r\n\r\nThe `context.Configuration[\"Key\"]` is null\n\n### Regression?\n\nNo\n\n### Known Workarounds\n\nAccording to #43410, no work arounds.\n\n### Configuration\n\n- .NET 7.0\r\n- Windows 11\r\n- x64\r\n- Not specific to config\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOXJijwQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5aKja4",
                                           "createdAt":  "2023-04-18T08:57:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pinkfloydx33",
                                           "body":  "You can use `ConfigureHostConfiguration` to bootstrap the settings needed to configure subsequent providers and then reference them from the the `hostBuilderContext.Configuration` in `ConfigureAppConfiguration`. It works very well for us; it\u0027s how we configure Azure AppConfig amongst others. Or am I missing something here? ",
                                           "updatedAt":  "2023-04-18T08:57:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5aPSbi",
                                           "createdAt":  "2023-04-19T00:39:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KashMoneyMillionaire",
                                           "body":  "You could do it that way, yes, but it goes against the default way and the way in ASP.NET MVC APIs/Apps.\r\n\r\nThe [default/built-in configuration](https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.hosting.host.createdefaultbuilder?view=dotnet-plat-ext-7.0) of appsettings.json, environment variables, and user secrets are setup as `ConfigureAppConfiguration` (see [here](https://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.Extensions.Hosting/src/HostingHostBuilderExtensions.cs#L196) and [here](https://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.Extensions.Hosting/src/HostingHostBuilderExtensions.cs#L229)). That means that by default, I can\u0027t use any environment variables, user secrets, or appsettings as the basis for others.\r\n",
                                           "updatedAt":  "2023-04-19T00:39:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5b8Orq",
                                           "createdAt":  "2023-05-10T16:45:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-hosting\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nI would like to re-open #43410 for conversation. The resolution from that ticket was that the docs needed updated (and they were), but I believe this is poor/unexpected/wrong behavior. \r\n\r\nUsing IHostBuilder, there should be some way to configure your services using existing configuration. This is especially important when using Azure App Config or Azure Key Vault, where you need a configuration value to be used as the key to setup further values.\r\n\r\nCurrently, there is no recommended way to use appsettings.json or User Secrets values as part of your configuration. However, this is possible when using `WebApplication.CreateBuilder`.\n\n### Reproduction Steps\n\nProgram.cs:\r\n```csharp\r\nusing Microsoft.Extensions.Hosting;\r\n\r\nusing var host = Host.CreateDefaultBuilder(args)\r\n                     .ConfigureAppConfiguration((context, _) =\u003e\r\n                      {\r\n                          Console.Write($\"My key\u0027s value is: {context.Configuration[\"Key\"]}\");\r\n                      })\r\n                     .Build();\r\n\r\nawait host.RunAsync();\r\n```\r\n\r\nappsettings.json:\r\n```json\r\n{\r\n    \"Key\": \"Value\"\r\n}\r\n```\n\n### Expected behavior\n\nOutput: `My key\u0027s value is: Value`\n\n### Actual behavior\n\nOutput: `My key\u0027s value is: `\r\n\r\nThe `context.Configuration[\"Key\"]` is null\n\n### Regression?\n\nNo\n\n### Known Workarounds\n\nAccording to #43410, no work arounds.\n\n### Configuration\n\n- .NET 7.0\r\n- Windows 11\r\n- x64\r\n- Not specific to config\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eKashMoneyMillionaire\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Hosting`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-05-10T16:45:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cfYLh",
                                           "createdAt":  "2023-05-17T16:37:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "buyaa-n",
                                           "body":  "\u003e The resolution from that ticket was that the docs needed updated (and they were), but I believe this is poor/unexpected/wrong behavior\r\n\r\nAs you already know it was [by design](https://github.com/dotnet/runtime/issues/43410#issuecomment-712937398). Not sure if it is possible to apply the enhancement you are requesting, leaving the issue open for investigating the possibilities in the future. @eerhardt please let us know if you have any suggestions.",
                                           "updatedAt":  "2023-05-17T16:37:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cmFGC",
                                           "createdAt":  "2023-05-18T18:49:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KashMoneyMillionaire",
                                           "body":  "Totally understand it might be difficult to change at this point. Trying to understand a few things if they\u0027re known by the team:\r\n1. Why is there a difference in the way Web and Host do app configuration? I might be missing something, but it seems like you\u0027d want this the same/very similar\r\n2. What\u0027s the recommended way to handle the scenario of \"use a value from appsettings.json to do more configuration\" is is the situation I laid out above with Azure App Config URL in the settings?",
                                           "updatedAt":  "2023-05-18T18:49:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cmKPB",
                                           "createdAt":  "2023-05-18T19:04:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "\u003e However, this is possible when using WebApplication.CreateBuilder.\r\n\r\n\u003e Why is there a difference in the way Web and Host do app configuration? I might be missing something, but it seems like you\u0027d want this the same/very similar\r\n\r\nIn .NET 7 we added an API for hosting that is analogous to `WebApplication.CreateBuilder`. See https://github.com/dotnet/runtime/pull/65109. In .NET 8, we\u0027ve updated the `worker` template to use this new API as well.\r\n\r\n`Host.CreateDefaultBuilder(args)` is the original way to create a hosted application that uses the \"callback\" approach like `ConfigureAppConfiguration`. Using `Host.CreateApplicationBuilder(args)` is the new way that corresponds to `WebApplication.CreateBuilder`.",
                                           "updatedAt":  "2023-05-18T19:04:32Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Re-open #43410: Subsequent calls to ConfigureAppConfiguration cannot see previously added Providers",
        "labels":  [
                       "area-Extensions-Hosting"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/85739",
        "createdAt":  "2023-05-03T22:38:31Z",
        "number":  85739,
        "author":  "DamianEdwards",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCv6oaQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pinkfloydx33",
                                            "createdAt":  "2023-05-03T23:09:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "eerhardt",
                                            "createdAt":  "2023-05-05T17:26:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "martincostello",
                                            "createdAt":  "2023-05-06T11:59:42Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2023-05-23T14:01:53Z",
        "body":  "# Problem\r\n\r\nThere are a number of .NET tools \u0026 libraries that follow the pattern of loading and executing the application the tool is being invoked in the context of, in order to extract configuration and other details from the application host\u0027s DI container, e.g.\r\n\r\n- `dotnet ef`: Boots the application to the point of the service container being built so that any registered `DbContext`s can be interacted with to run migrations, generate compiled models, etc.\r\n- [`Microsoft.AspNetCore.Mvc.Testing.WebApplicationFactory\u003cTEntryPoint\u003e`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.mvc.testing.webapplicationfactory-1?view=aspnetcore-7.0): Hosts the application for the intent of configuring it and executing requests against it in the context of integration tests.\r\n- [`Microsoft.Extensions.ApiDescription.Server`](https://www.nuget.org/packages/Microsoft.Extensions.ApiDescription.Server/): Includes MSBuild targets and a command line tool that executes the ASP.NET Core application after injecting a no-op `IServer` and `IHostApplicationLifetime` such that details of the app\u0027s endpoints can be obtained for the purposes of generating OpenAPI documents.\r\n- [`Swashbuckle.AspNetCore.Cli`](https://github.com/domaindrivendev/Swashbuckle.AspNetCore#swashbuckleaspnetcorecli): Functionally similar to [`Microsoft.Extensions.ApiDescription.Server`](https://www.nuget.org/packages/Microsoft.Extensions.ApiDescription.Server/) but customized for Swashbuckle and designed to be used as a CLI tool directly rather than via MSBuild targets.\r\n\r\nA [common issue](https://github.com/domaindrivendev/Swashbuckle.AspNetCore/issues/1957#issuecomment-1277210742) with these tools is that it\u0027s difficult to condition code in the application such that it doesn\u0027t run when the application is booted in the context of one of these tools. For example, imagine your application has code that executes logic on application start to seed a database with initial data, it\u0027s very unlikely that one would want that code to run when the application is run in the context of the tool. Another example relates to validation of application configuration, especially secrets that aren\u0027t available in the application source code. In \"normal\" application startup it\u0027s desirable to validate that application is correctly configured with non-null values, but when run in the context of a tool these values aren\u0027t required and may even not be available if the tool is being executed as part of a CI configuration.\r\n\r\nSome approaches that are used in applications today to detect when it\u0027s being hosted by a tool:\r\n\r\n- Use a custom configuration value from a source that can be set easily from the same context in which the tool is run, and condition code in the application based on that value, e.g. an environment variable, and then ensure that when the tool is run that configuration value is set.\r\n  - A variation of this pattern is to use the existing environment variable for setting the `IHostingEnvironment.EnvironmentName` property and then check that via `IHostingEnvironment.IsEnvironment(string environmentName)`, [example](https://github.com/aspnet/Benchmarks/blob/75d3157556ddac38a2d9daaad88c5e6fc25878a6/src/BenchmarksApps/TodosApi/DatabaseInitializer.cs#LL16C26-L16C52)\r\n- Check the name of the type implementing `IServer` and/or `IHostApplicationLifetime` to see if it matches the name of known private types that tools inject\r\n- Check the application\u0027s parent process name to see if it\u0027s something other than that expected when the application is hosted normally\r\n- EF Core actually [sets a flag](https://github.com/dotnet/efcore/issues/27306) that can be used by apps to detect when they\u0027re being run for the purposes of design-time discovery\r\n\r\n# Proposal\r\n\r\nProvide an API in `Microsoft.Extensions.Hosting` that would make it easier for an application to detect when it\u0027s been loaded in the context of a tool, such that it can perform conditional logic as appropriate. Tools would need to inject/set this API as part of booting the application. If no implementation is registered, the application is not being hosted by a tool. The tools shipped by MS that follow this hosting pattern utilize a shared code package to implement the behavior so implementing this for our own tools would be straightforward.\r\n\r\nNote this is just a starting suggestion intended to help kickstart discussion.\r\n\r\n```csharp\r\nnamespace Microsoft.Extensions.Hosting;\r\n\r\npublic interface IHostingTool\r\n{\r\n    /// \u003csummary\u003e\r\n    /// Gets the name of the tool currently hosting the application.\r\n    /// \u003c/summary\u003e\r\n    string? ToolName { get; }\r\n\r\n    /// \u003csummary\u003e\r\n    /// Gets a value that indicates whether the tool will stop the application after the host is built.\r\n    /// \u003c/summary\u003e\r\n    bool StopsApplicationAfterHostBuilt { get; }\r\n}\r\n```\r\n\r\nNote one drawback with this approach is that the app can\u0027t evaluate if it\u0027s being hosted in the context of a tool until the DI container is built.\r\n\r\n## Alternatives\r\n\r\nSome alternatives and potential drawbacks with them:\r\n\r\n- Passing a known named flag via the application\u0027s entry point `args` parameter\r\n  - This could be problematic as args are often parsed and validated by applications which then fail if an unexpected arg is passed\r\n- Setting a known named environment variable before the application\u0027s entry point is invoked\r\n  - Not sure that all tools actually start a separate process to host the application which might make it difficult to set an process-scoped environment variable",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOW89jaA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5bbJAF",
                                           "createdAt":  "2023-05-03T22:38:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-hosting\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n# Problem\r\n\r\nThere are a number of .NET tools \u0026 libraries that follow the pattern of loading and executing the application the tool is being invoked in the context of, in order to extract configuration and other details from the application host\u0027s DI container, e.g.\r\n\r\n- `dotnet ef`: Boots the application to the point of the service container being built so that any registered `DbContext`s can be interacted with to run migrations, generate compiled models, etc.\r\n- [`Microsoft.AspNetCore.Mvc.Testing.WebApplicationFactory\u003cTEntryPoint\u003e`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.mvc.testing.webapplicationfactory-1?view=aspnetcore-7.0): Hosts the application for the intent of configuring it and executing requests against it in the context of integration tests.\r\n- [`Microsoft.Extensions.ApiDescription.Server`](https://www.nuget.org/packages/Microsoft.Extensions.ApiDescription.Server/): Includes MSBuild targets and a command line tool that executes the ASP.NET Core application after injecting a no-op `IServer` and `IHostApplicationLifetime` such that details of the app\u0027s endpoints can be obtained for the purposes of generating OpenAPI documents.\r\n- [`Swashbuckle.AspNetCore.Cli`](https://github.com/domaindrivendev/Swashbuckle.AspNetCore#swashbuckleaspnetcorecli): Functionally similar to [`Microsoft.Extensions.ApiDescription.Server`](https://www.nuget.org/packages/Microsoft.Extensions.ApiDescription.Server/) but customized for Swashbuckle and designed to be used as a CLI tool directly rather than via MSBuild targets.\r\n\r\nA [common issue](https://github.com/domaindrivendev/Swashbuckle.AspNetCore/issues/1957#issuecomment-1277210742) with these tools is that it\u0027s difficult to condition code in the application such that it doesn\u0027t run when the application is booted in the context of one of these tools. For example, imagine your application has code that executes logic on application start to seed a database with initial data, it\u0027s very unlikely that one would want that code to run when the application is run in the context of the tool. Another example relates to validation of application configuration, especially secrets that aren\u0027t available in the application source code. In \"normal\" application startup it\u0027s desirable to validate that application is correctly configured with non-null values, but when run in the context of a tool these values aren\u0027t required and may even not be available if the tool is being executed as part of a CI configuration.\r\n\r\nSome approaches that are used in applications today to detect when it\u0027s being hosted by a tool:\r\n\r\n- Use a custom configuration value from a source that can be set easily from the same context in which the tool is run, and condition code in the application based on that value, e.g. an environment variable, and then ensure that when the tool is run that configuration value is set.\r\n  - A variation of this pattern is to use the existing environment variable for setting the `IHostingEnvironment.EnvironmentName` property and then check that via `IHostingEnvironment.IsEnvironment(string environmentName)`, [example](https://github.com/aspnet/Benchmarks/blob/75d3157556ddac38a2d9daaad88c5e6fc25878a6/src/BenchmarksApps/TodosApi/DatabaseInitializer.cs#LL16C26-L16C52)\r\n- Check the name of the type implementing `IServer` and/or `IHostApplicationLifetime` to see if it matches the name of known private types that tools inject\r\n- Check the application\u0027s parent process name to see if it\u0027s something other than that expected when the application is hosted normally\r\n\r\n# Proposal\r\n\r\nProvide an API in `Microsoft.Extensions.Hosting` that would make it easier for an application to detect when it\u0027s been loaded in the context of a tool, such that it can perform conditional logic as appropriate. Tools would need to inject/set this API as part of booting the application. If no implementation is registered, the application is not being hosted by a tool. The tools shipped by MS that follow this hosting pattern utilize a shared code package to implement the behavior so implementing this for our own tools would be straightforward.\r\n\r\nNote this is just a starting suggestion intended to help kickstart discussion. Please\r\n\r\n```csharp\r\nnamespace Microsoft.Extensions.Hosting;\r\n\r\npublic interface IHostingTool\r\n{\r\n    /// \u003csummary\u003e\r\n    /// Gets the name of the tool currently hosting the application.\r\n    /// \u003c/summary\u003e\r\n    string? ToolName { get; }\r\n\r\n    /// \u003csummary\u003e\r\n    /// Gets a value that indicates whether the tool will stop the application after the host is built.\r\n    /// \u003c/summary\u003e\r\n    bool StopsApplicationAfterHostBuilt { get; }\r\n}\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eDamianEdwards\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Hosting`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-05-03T22:38:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bbJDM",
                                           "createdAt":  "2023-05-03T22:38:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DamianEdwards",
                                           "body":  "FYI @eerhardt @davidfowl @ajcvickers ",
                                           "updatedAt":  "2023-05-03T22:38:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bljWo",
                                           "createdAt":  "2023-05-05T17:35:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC7MscQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DamianEdwards",
                                                                               "createdAt":  "2023-05-05T19:36:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "Another potential alternative would be to have well-known `IConfiguration` value that could be checked by the app (it could be set by an env var, command line arg, or injected into the `IConfiguration` during startup). We could provide an extension method to get the value and return whether the app is being run in the context of the tool.  This would be similar to the current `Environment` configuration value, but with a different name and a different purpose.\r\n\r\nI don\u0027t think this alternative is better than the current proposal. Just listing it for other ideas.",
                                           "updatedAt":  "2023-05-05T17:35:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bmB8x",
                                           "createdAt":  "2023-05-05T19:40:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DamianEdwards",
                                           "body":  "@eerhardt the advantages of your proposal as I see it are:\r\n- It\u0027s provides more flexibility in how the tool can pass the value as configuration will bind from the usual host/app sources, e.g. environment variables, command line args, settings files, etc.\r\n  - RE direct injection of the value by the hosting tool into the app\u0027s `IConfiguration`, what\u0027s the mechanism for that exactly? When does the tool get access to the host builder WRT the lifecycle of the app?\r\n- The app can read configuration at any point after the host builder is created so it\u0027s possible to detect before the container is built, which allows the app to include conditional logic much earlier, including service registration, etc.",
                                           "updatedAt":  "2023-05-05T19:40:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bmG6z",
                                           "createdAt":  "2023-05-05T20:02:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC7NRng==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DamianEdwards",
                                                                               "createdAt":  "2023-05-06T00:32:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "\u003e RE direct injection of the value by the hosting tool into the app\u0027s IConfiguration, what\u0027s the mechanism for that exactly? When does the tool get access to the host builder WRT the lifecycle of the app?\r\n\r\nThe same mechanism it uses today to inject DI services. For example:\r\n\r\nhttps://github.com/domaindrivendev/Swashbuckle.AspNetCore/blob/8f363f7359cb1cb8fa5de5195ec6d97aefaa16b3/src/Swashbuckle.AspNetCore.Cli/HostingApplication.cs#L28C18-L56\r\n\r\nInstead of calling `hostBuilder.ConfigureServices` there, it would call `hostBuilder.ConfigureAppConfiguration` and add the configuration value to the `IConfigurationBuilder`.",
                                           "updatedAt":  "2023-05-05T20:02:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bm97F",
                                           "createdAt":  "2023-05-06T00:37:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DamianEdwards",
                                           "body":  "OK so IIUC that means that the configuration value would not be observable in the app until they call the `Build()` method on the host, meaning they can\u0027t use it during their own host-building logic, right? In which case, they can\u0027t use it to conditionally register services, validate options, etc.",
                                           "updatedAt":  "2023-05-06T00:38:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bsld0",
                                           "createdAt":  "2023-05-08T14:03:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC7TCMQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "DamianEdwards",
                                                                               "createdAt":  "2023-05-08T16:41:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "\u003e that means that the configuration value would not be observable in the app until they call the Build() method on the host, meaning they can\u0027t use it during their own host-building logic, right? In which case, they can\u0027t use it to conditionally register services, validate options, etc.\r\n\r\nCorrect - it has the same drawback as the `IHostingTool` service approach.",
                                           "updatedAt":  "2023-05-08T14:03:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bttFn",
                                           "createdAt":  "2023-05-08T16:43:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DamianEdwards",
                                           "body":  "Perhaps this is a convenient time to introduce a new event for the `HostFactoryResolver` then, that fires when the host builder is created, e.g. `\"HostBuilderCreated\"`, that passes the `HostBuilder` as data so that the tool can inject app configuration before the app starts manipulating the builder.",
                                           "updatedAt":  "2023-05-08T16:43:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bz2No",
                                           "createdAt":  "2023-05-09T15:02:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC7X7GA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DamianEdwards",
                                                                               "createdAt":  "2023-05-09T15:21:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "The issue is the HostFactoryResolver is based on `IHostBuilder`, which is the \"callback\" approach. So even if you got the `IHostBuilder` early, there is no API to add to the configuration _inline_ right now. You only get `ConfigureHostConfiguration` and `ConfigureAppConfiguration` methods, which only get called during `.Build()`.\r\n\r\nWith https://github.com/dotnet/runtime/issues/85486, we will have an interface that will be able to add to the configuration directly inline. But HostFactoryResolver would need to be modified to work with the new interface.",
                                           "updatedAt":  "2023-05-09T15:02:03Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Provide API in Microsoft.Extensions.Hosting to allow apps to know when they\u0027re being run in the context of a tool",
        "labels":  [
                       "design-discussion",
                       "api-suggestion",
                       "area-Extensions-Hosting"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/88660",
        "createdAt":  "2023-07-11T08:38:24Z",
        "number":  88660,
        "author":  "crozone",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-16T20:05:58Z",
        "body":  "`Microsoft.Extensions.Hosting.SystemdHostBuilderExtensions.AddSystemd()` calls `SystemdHelpers.IsSystemdService()` to determine whether it should add the `SystemdNotifier` and `SystemdLifetime` services to the services container.\r\n\r\n`IsSystemdService()` goes out of its way to try and verify that its parent process is actually called \"systemd\", and also has an additional edgecase for PID 1 for if it is invoked in a service container.\r\n\r\nReference: https://github.com/dotnet/runtime/blob/076f8c58984b009033204ad1dd9f86c691ae42fb/src/libraries/Microsoft.Extensions.Hosting.Systemd/src/SystemdHostBuilderExtensions.cs#L68-L77`\r\n\r\nI can\u0027t see any reason why the check needs to be this strict and specific. It also appears to have a few drawbacks:\r\n\r\n* This check *only* works with services directly invoked from systemd, but this isn\u0027t actually required. `AddSystemd()` is primarily concerned with notifying the `NOTIFY_SOCKET` (aka `sd_notify`) that the service has started up or is shutting down. Non-systemd systems often include tools like [start-stop-daemon](https://man7.org/linux/man-pages/man8/start-stop-daemon.8.html) which also support a minimal `NOTIFY_SOCKET` interface, but are needlessly excluded by this check.\r\n\r\n* This check causes false positives when the service is invoked from systemd on an interactive shell, for example: https://github.com/dotnet/extensions/issues/2525. AFAIK this issue is marked as resolved but has not actually been fixed.\r\n\r\n* This check causes a false positive if the service is not configured as `Type=notify`.\r\n\r\n* The code is more complicated and requires a workaround for container invocation where the PID is 1 and there is no parent systemd process.\r\n\r\nA significantly simpler and more robust solution would be to only check for the presence of the `NOTIFY_SOCKET` environment variable (and also that we\u0027re on Unix). If `NOTIFY_SOCKET` is set, it should be notified, otherwise don\u0027t notify it. The presence of the environment variable should be enough of an indication that the interface is supported and notification is required.\r\n\r\nThe current `SystemdHelpers.IsSystemdService()` could still be used for changing the log format.\r\n\r\nExample of `AddSystemd()` with changes:\r\n\r\n```csharp\r\npublic static IServiceCollection AddSystemd(this IServiceCollection services)\r\n{\r\n    ThrowHelper.ThrowIfNull(services);\r\n\r\n    if (SystemdHelpers.IsSystemdService())\r\n    {\r\n        services.Configure\u003cConsoleLoggerOptions\u003e(options =\u003e\r\n        {\r\n            options.FormatterName = ConsoleFormatterNames.Systemd;\r\n        });\r\n    }\r\n\r\n    if (Environment.OSVersion.Platform == PlatformID.Unix \u0026\u0026\r\n        !string.IsNullOrEmpty(Environment.GetEnvironmentVariable(\"NOTIFY_SOCKET\")))\r\n    {\r\n        services.AddSingleton\u003cISystemdNotifier, SystemdNotifier\u003e();\r\n        services.AddSingleton\u003cIHostLifetime, SystemdLifetime\u003e();\r\n    }\r\n\r\n    return services;\r\n}\r\n```\r\n\r\nDoes this seem like a sensible change to consider?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZDUfDw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5hM_pc",
                                           "createdAt":  "2023-07-11T13:06:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-hosting\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n`Microsoft.Extensions.Hosting.SystemdHostBuilderExtensions.AddSystemd()` calls `SystemdHelpers.IsSystemdService()` to determine whether it should add the `SystemdNotifier` and `SystemdLifetime` services to the services container.\r\n\r\n`IsSystemdService()` goes out of its way to try and verify that its parent process is actually called \"systemd\", and also has an additional edgecase for PID 1 for if it is invoked in a service container.\r\n\r\nReference: https://github.com/dotnet/runtime/blob/076f8c58984b009033204ad1dd9f86c691ae42fb/src/libraries/Microsoft.Extensions.Hosting.Systemd/src/SystemdHostBuilderExtensions.cs#L68-L77`\r\n\r\nI can\u0027t see any reason why the check needs to be this strict and specific. It also appears to have a few drawbacks:\r\n\r\n* This check *only* works with services directly invoked from systemd, but this isn\u0027t actually required. `AddSystemd()` is primarily concerned with notifying the `NOTIFY_SOCKET` (aka `sd_notify`) that the service has started up or is shutting down. Non-systemd systems often include tools like [start-stop-daemon](https://man7.org/linux/man-pages/man8/start-stop-daemon.8.html) which also support a minimal `NOTIFY_SOCKET` interface, but are needlessly excluded by this check.\r\n\r\n* This check causes false positives when the service is invoked from systemd on an interactive shell, for example: https://github.com/dotnet/extensions/issues/2525. AFAIK this issue is marked as resolved but has not actually been fixed.\r\n\r\n* This check causes a false positive if the service is not configured as `Type=notify`.\r\n\r\n* The code is more complicated and requires a workaround for container invocation where the PID is 1 and there is no parent systemd process.\r\n\r\nA significantly simpler and more robust solution would be to only check for the presence of the `NOTIFY_SOCKET` environment variable (and also that we\u0027re on Unix). If `NOTIFY_SOCKET` is set, it should be notified, otherwise don\u0027t notify it. The presence of the environment variable should be enough of an indication that the interface is supported and notification is required.\r\n\r\nThe current `SystemdHelpers.IsSystemdService()` could still be used for changing the log format.\r\n\r\nExample of `AddSystemd()` with changes:\r\n\r\n```csharp\r\npublic static IServiceCollection AddSystemd(this IServiceCollection services)\r\n{\r\n    ThrowHelper.ThrowIfNull(services);\r\n\r\n    if (SystemdHelpers.IsSystemdService())\r\n    {\r\n        services.Configure\u003cConsoleLoggerOptions\u003e(options =\u003e\r\n        {\r\n            options.FormatterName = ConsoleFormatterNames.Systemd;\r\n        });\r\n    }\r\n\r\n    if (Environment.OSVersion.Platform == PlatformID.Unix \u0026\u0026\r\n        !string.IsNullOrEmpty(Environment.GetEnvironmentVariable(\"NOTIFY_SOCKET\")))\r\n    {\r\n        services.AddSingleton\u003cISystemdNotifier, SystemdNotifier\u003e();\r\n        services.AddSingleton\u003cIHostLifetime, SystemdLifetime\u003e();\r\n    }\r\n\r\n    return services;\r\n}\r\n```\r\n\r\nDoes this seem like a sensible change to consider?\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ecrozone\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Hosting`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-07-11T13:06:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5h0cRR",
                                           "createdAt":  "2023-07-18T23:52:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "buyaa-n",
                                           "body":  "Tagging area experts @tmds @eerhardt @steveharter ",
                                           "updatedAt":  "2023-07-18T23:52:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kJbMn",
                                           "createdAt":  "2023-08-16T08:35:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e This check causes false positives when the service is invoked from systemd on an interactive shell, for example:\r\nhttps://github.com/dotnet/extensions/issues/2525. AFAIK this issue is marked as resolved but has not actually been fixed.\r\n\r\nThis was fixed by https://github.com/dotnet/extensions/pull/2734 which restricted the systemd check to be the direct parent.\r\n\r\nI think it\u0027s worth considering to enable the notifier based on `NOTIFY_SOCKET` being set independent of `systemd` being the direct parent.\r\n\r\nI wonder if we should something that avoids .NET children to assume the notifier responsibility?\r\nThe [C API](https://www.freedesktop.org/software/systemd/man/sd_notify.html) has a flag causes the envvar to be unset.\r\nIf we do, at what point should we unset it?",
                                           "updatedAt":  "2023-08-16T08:35:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kNR8P",
                                           "createdAt":  "2023-08-16T20:05:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "\u003eI think it\u0027s worth considering to enable the notifier based on NOTIFY_SOCKET being set independent of systemd being the direct parent.\r\nI wonder if we should something that avoids .NET children to assume the notifier responsibility?\r\nThe [C API](https://www.freedesktop.org/software/systemd/man/sd_notify.html) has a flag causes the envvar to be unset.\r\nIf we do, at what point should we unset it?\r\n\r\nTriage: we have a partial fix for the original with some additional work \\ questions remaining.\r\n",
                                           "updatedAt":  "2023-08-16T20:05:58Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "AddSystemd should only check for NOTIFY_SOCKET env",
        "labels":  [
                       "area-Extensions-Hosting"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/90105",
        "createdAt":  "2023-08-07T17:03:06Z",
        "number":  90105,
        "author":  "jez9999",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T10:40:44Z",
        "body":  "### Background and motivation\r\n\r\nThe `.UseWindowsService()` and `.UseSystemd()` extensions allow a host builder to be configured to run as a Windows or systemd service if it\u0027s detected that they\u0027re currently running in one of those contexts, but it\u0027d be useful for the program to actually know whether that activation happened.  They should therefore be able to report back as to whether they detected that the current program was running as a Windows or systemd service, and therefore activated.\r\n\r\n### API Proposal\r\n\r\n```csharp\r\nnamespace Microsoft.Extensions.Hosting;\r\n\r\npublic static class WindowsServiceLifetimeHostBuilderExtensions\r\n{\r\n    public static (bool? WasActivated, IHostBuilder Builder) UseWindowsService(this IHostBuilder hostBuilder, Action\u003cWindowsServiceLifetimeOptions\u003e configure, bool indicateWhetherActivated = false)\r\n}\r\n```\r\n\r\n```csharp\r\nnamespace Microsoft.Extensions.Hosting;\r\n\r\npublic static class SystemdHostBuilderExtensions\r\n{\r\n    public static (bool? WasActivated, IHostBuilder Builder) UseSystemd(this IHostBuilder hostBuilder, bool indicateWhetherActivated = false)\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\n```csharp\r\nvar builder = Host.CreateDefaultBuilder(args);\r\n(var isWinService, _) = builder.UseWindowsService(x =\u003e x.ServiceName = \"MyService\", true);\r\n(var isSystemdService, _) = builder.UseSystemd(true);\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOY3SiSQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5jb7sk",
                                           "createdAt":  "2023-08-07T17:03:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-hosting\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nThe `.UseWindowsService()` and `.UseSystemd()` extensions allow a host builder to be configured to run as a Windows or systemd service if it\u0027s detected that they\u0027re currently running in one of those contexts, but it\u0027d be useful for the program to actually know whether that activation happened.  They should therefore be able to report back as to whether they detected that the current program was running as a Windows or systemd service, and therefore activated.\n\n### API Proposal\n\n```csharp\r\nnamespace Microsoft.Extensions.Hosting;\r\n\r\npublic static class WindowsServiceLifetimeHostBuilderExtensions\r\n{\r\n    public static (bool? WasActivated, IHostBuilder Builder) UseWindowsService(this IHostBuilder hostBuilder, Action\u003cWindowsServiceLifetimeOptions\u003e configure, bool indicateWhetherActivated = false)\r\n}\r\n```\r\n\r\n```csharp\r\nnamespace Microsoft.Extensions.Hosting;\r\n\r\npublic static class SystemdHostBuilderExtensions\r\n{\r\n    public static (bool? WasActivated, IHostBuilder Builder) UseSystemd(this IHostBuilder hostBuilder, bool indicateWhetherActivated = false)\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\nvar builder = Host.CreateDefaultBuilder(args);\r\nvar isWinService = builder.UseWindowsService(x =\u003e x.ServiceName = \"MyService\", true);\r\nvar isSystemdService = builder.UseSystemd(true);\r\n```\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejez9999\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `untriaged`, `area-Extensions-Hosting`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-07T17:03:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jdKJJ",
                                           "createdAt":  "2023-08-07T21:16:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODC8xwg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ericstj",
                                                                               "createdAt":  "2023-08-07T22:33:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "gfoidl",
                                           "body":  "You could use something like\r\n```c#\r\nusing Microsoft.Extensions.Hosting.Systemd;\r\nusing Microsoft.Extensions.Hosting.WindowsServices;\r\n\r\npublic static bool IsRunAsService { get; } = IsRunAsServiceCore();\r\n\r\nprivate static bool IsRunAsServiceCore()\r\n{\r\n    return WindowsServiceHelpers.IsWindowsService()\r\n        || SystemdHelpers       .IsSystemdService();\r\n}\r\n```\r\n\r\nDoes this fit your needs?",
                                           "updatedAt":  "2023-08-07T21:16:48Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[API Proposal]: Allow UseWindowsService and UseSystemd to indicate whether they\u0027ve activated",
        "labels":  [
                       "question",
                       "api-suggestion",
                       "area-Extensions-Hosting"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/90478",
        "createdAt":  "2023-08-13T06:01:58Z",
        "number":  90478,
        "author":  "WeihanLi",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC54_hQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "UladzK",
                                            "createdAt":  "2024-08-02T09:29:55Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-26T10:40:46Z",
        "body":  "### Background and motivation\n\nAdd `ConfigureHostOptions` extensions for `IHostApplicationBuilder` like extensions for `IHostBuilder`, so that we could configure the host options easily\n\n### API Proposal\n\n```csharp\r\nnamespace Microsoft.Extensions.Hosting;\r\n\r\npublic static class HostingHostApplicationBuilderExtensions\r\n{\r\n    public static IHostApplicationBuilder ConfigureHostOptions(this IHostApplicationBuilder hostBuilder, Action\u003cHostOptions\u003e configureOptions)\r\n    {\r\n        hostBuilder.Services.Configure(configureOptions);\r\n        return hostBuilder;\r\n    }\r\n\r\n    public static IHostApplicationBuilder ConfigureHostOptions(this IHostApplicationBuilder hostBuilder, Action\u003cIHostApplicationBuilder, HostOptions\u003e configureOptions)\r\n    {\r\n        hostBuilder.Services.Configure\u003cHostOptions\u003e(options =\u003e configureOptions(hostBuilder, options));\r\n        return hostBuilder;\r\n    }\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\nvar hostBuilder = Host.CreateEmptyApplicationBuilder(null);\r\n\r\nhostBuilder.ConfigureHostOptions(x =\u003e\r\n  {\r\n    x.ServicesStartConcurrently = true;\r\n    x.ServicesStopConcurrently = true;\r\n  });\r\n\r\nhostBuilder.ConfigureHostOptions((hostAppBuilder, options) =\u003e\r\n  {\r\n      if (TimeSpan.TryParse(hostAppBuilder.Configuration[nameof(options.StartupTimeout)], out var startupTimeout))\r\n      {\r\n          options.StartupTimeout = startupTimeout;\r\n      }\r\n  });\r\nvar host = hostBuilder.Build();\r\nawait host.RunAsync(cancellationToken);\r\n```\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOY-lu3g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5j6W7e",
                                           "createdAt":  "2023-08-13T06:02:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-hosting\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nAdd `ConfigureHostOptions` extensions for `IHostApplicationBuilder` like extensions for `IHostBuilder`, so that we could configure the host options easily\n\n### API Proposal\n\n```csharp\r\nnamespace Microsoft.Extensions.Hosting;\r\n\r\npublic static class HostingHostApplicationBuilderExtensions\r\n{\r\n    public static IHostApplicationBuilder ConfigureHostOptions(this IHostApplicationBuilder hostBuilder, Action\u003cHostOptions\u003e configureOptions)\r\n    {\r\n        hostBuilder.Services.Configure(configureOptions);\r\n        return hostBuilder;\r\n    }\r\n\r\n    public static IHostApplicationBuilder ConfigureHostOptions(this IHostApplicationBuilder hostBuilder, Action\u003cIHostApplicationBuilder, HostOptions\u003e configureOptions)\r\n    {\r\n        hostBuilder.Services.Configure\u003cHostOptions\u003e(options =\u003e configureOptions(hostBuilder, options));\r\n        return hostBuilder;\r\n    }\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\nvar hostBuilder = Host.CreateEmptyApplicationBuilder(null);\r\n\r\nhostBuilder.ConfigureHostOptions(x =\u003e\r\n  {\r\n    x.ServicesStartConcurrently = true;\r\n    x.ServicesStopConcurrently = true;\r\n  });\r\n\r\nhostBuilder.ConfigureHostOptions((hostAppBuilder, options) =\u003e\r\n  {\r\n      if (TimeSpan.TryParse(hostAppBuilder.Configuration[nameof(options.StartupTimeout)], out var startupTimeout))\r\n      {\r\n          options.StartupTimeout = startupTimeout;\r\n      }\r\n  });\r\nvar host = hostBuilder.Build();\r\nawait host.RunAsync(cancellationToken);\r\n```\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eWeihanLi\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-Extensions-Hosting`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-13T06:02:07Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[API Proposal]: Add `ConfigureHostOptions` extensions for `IHostApplicationBuilder`",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Hosting"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/90479",
        "createdAt":  "2023-08-13T06:41:28Z",
        "number":  90479,
        "author":  "WeihanLi",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T10:40:46Z",
        "body":  "### Background and motivation\r\n\r\nWe want to start with an empty console host for our console app, and nothing needs to be configured for the `HostApplicationBuilderSettings`, currently we had to use `Host.CreateEmptyApplicationBuilder(null)`, so we want a `Host.CreateEmptyApplicationBuilder` method without a parameter\r\n\r\n### API Proposal\r\n\r\n```diff\r\nnamespace Microsoft.Extensions.Hosting;\r\n\r\npublic static class Host\r\n{\r\n+      public static HostApplicationBuilder CreateEmptyApplicationBuilder();\r\n       public static HostApplicationBuilder CreateEmptyApplicationBuilder(HostApplicationBuilderSettings? settings);\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\n```csharp\r\nvar hostBuilder = Host.CreateEmptyApplicationBuilder();\r\nvar host = hostBuilder.Build();\r\nawait host.RunAsync(cancellationToken);\r\n```\r\n\r\n### Alternative Designs\r\n\r\nSince it\u0027s a new API introduced in .NET 8, maybe we could also consider adding a default value `null` for the `settings` parameter\r\n\r\n\r\n```diff\r\nnamespace Microsoft.Extensions.Hosting;\r\n\r\npublic static class Host\r\n{\r\n-       public static HostApplicationBuilder CreateEmptyApplicationBuilder(HostApplicationBuilderSettings? settings);\r\n+       public static HostApplicationBuilder CreateEmptyApplicationBuilder(HostApplicationBuilderSettings? settings = null);\r\n\r\n}\r\n```\r\n\r\n### Risks\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOdnmSIg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5j6ZSx",
                                           "createdAt":  "2023-08-13T06:41:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-hosting\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nWe want to start with an empty console host for our console app, and nothing needs to be configured for the `HostApplicationBuilderSettings`, currently we had to use `Host.CreateEmptyApplicationBuilder(null)`, so we want a `Host.CreateEmptyApplicationBuilder` method without a parameter\n\n### API Proposal\n\n```diff\r\nnamespace Microsoft.Extensions.Hosting;\r\n\r\npublic static class Host\r\n{\r\n+       public static HostApplicationBuilder CreateEmptyApplicationBuilder();\r\n       public static HostApplicationBuilder CreateEmptyApplicationBuilder(HostApplicationBuilderSettings? settings);\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\nvar hostBuilder = Host.CreateEmptyApplicationBuilder();\r\nvar host = hostBuilder.Build();\r\nawait host.RunAsync(cancellationToken);\r\n```\n\n### Alternative Designs\n\nSince it\u0027s a new API introduced in .NET 8, maybe we could also consider adding a default value `null` for the `settings` parameter\n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eWeihanLi\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-Extensions-Hosting`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-13T06:41:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5j_FSi",
                                           "createdAt":  "2023-08-14T14:53:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "See also https://github.com/dotnet/runtime/issues/81280 where `CreateEmptyApplicationBuilder` was added.",
                                           "updatedAt":  "2023-08-14T14:53:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52bu9K",
                                           "createdAt":  "2024-03-09T21:11:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "abatishchev",
                                           "body":  "+1",
                                           "updatedAt":  "2024-03-09T21:11:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52bvaP",
                                           "createdAt":  "2024-03-09T21:20:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "We don\u0027t expect many apps to use the empty builder mostly because it\u0027s a shell for library authors to build higher level APIs. I have nothing against this overload but why is it useful for normal console apps?",
                                           "updatedAt":  "2024-03-09T21:20:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52cAD5",
                                           "createdAt":  "2024-03-10T03:05:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "WeihanLi",
                                           "body":  "For us, the default host builder is getting more and more complex, we hope to create an empty host builder to follow the `HostApplicationBuilder` pattern and get it AOT-safe",
                                           "updatedAt":  "2024-03-10T03:05:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52cJxI",
                                           "createdAt":  "2024-03-10T05:02:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Can you show me your default configuration?",
                                           "updatedAt":  "2024-03-10T05:02:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52eENy",
                                           "createdAt":  "2024-03-11T03:57:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "WeihanLi",
                                           "body":  "sample code for the worker\r\n\r\n```c#\r\nvar builder = Host.CreateEmptyApplicationBuilder(null);\r\n\r\nbuilder.Configuration.AddJsonFile(\"appsettings.json\");\r\n\r\nbuilder.Services.AddHostedService\u003cWorker\u003e();\r\n\r\nAddServices(builder.Services);\r\n\r\nawait builder.Build().RunAsync();\r\n```",
                                           "updatedAt":  "2024-03-11T03:57:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52eGQR",
                                           "createdAt":  "2024-03-11T04:09:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "What\u0027s in AddServices? ",
                                           "updatedAt":  "2024-03-11T04:09:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52eK1S",
                                           "createdAt":  "2024-03-11T04:36:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODaED9Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "WeihanLi",
                                                                               "createdAt":  "2024-03-11T06:02:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "abatishchev",
                                           "body":  "\u003e I have nothing against this overload but why is it useful for normal console apps?\r\n\r\nHere\u0027s my scenario: I\u0027m writing unit tests against my web service\u0027s validation subsystem. I want to use its configuration (appsetting.*.json + strongly-typed classes) as the source of truth. So I want to create an as lightweight as possible host which would be capable only of parsing, binding, instantiating the corresponding configuration classes.\r\n\r\n```c#\r\nvar builder = Host.CreateEmptyApplicationBuilder(null);\r\n```\r\n\r\nI didn\u0027t know I can simply pass `null`. What makes me think that:\r\n\r\n- the API\u0027s signature is counterintuitive, pretends the parameter is mandatory\r\n- the API violates the expectations/pattern when there is an overload without optional parameter(s)",
                                           "updatedAt":  "2024-03-11T04:36:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52eWxl",
                                           "createdAt":  "2024-03-11T05:39:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "WeihanLi",
                                           "body":  "\u003e What\u0027s in AddServices?\r\n\r\nSome dependency services required by the `Worker` service, adding service register only",
                                           "updatedAt":  "2024-03-11T05:39:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52eXjE",
                                           "createdAt":  "2024-03-11T05:43:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "No logging?",
                                           "updatedAt":  "2024-03-11T05:43:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52eZIi",
                                           "createdAt":  "2024-03-11T05:51:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "WeihanLi",
                                           "body":  "\u003e No logging?\r\n\r\nwith logging configured, this is a simple worker service for monitoring deployed as a Windows service\r\n\r\n```c#\r\nvar serviceName = \"XxWorker\";\r\nif (WindowsServiceHelpers.IsWindowsService())\r\n{\r\n    services.AddLogging(logging =\u003e\r\n    {\r\n        Debug.Assert(RuntimeInformation.IsOSPlatform(OSPlatform.Windows));\r\n        logging.AddEventLog(x=\u003e\r\n        {\r\n            Debug.Assert(RuntimeInformation.IsOSPlatform(OSPlatform.Windows));\r\n            x.SourceName = serviceName;\r\n        });\r\n    });\r\n    services.AddSingleton\u003cIHostLifetime, WindowsServiceLifetime\u003e();\r\n    services.Configure\u003cWindowsServiceLifetimeOptions\u003e(options =\u003e\r\n    {\r\n        options.ServiceName = serviceName;\r\n    });\r\n}\r\nelse\r\n{\r\n    services.AddLogging(logging =\u003e\r\n    {\r\n        logging.AddSimpleConsole();\r\n    });\r\n}\r\n```\r\n\r\nFor the testing part, I also want to try integrating the `HostApplicationBuilder` with this project https://github.com/pengweiqhca/Xunit.DependencyInjection\r\n\r\ncurrently, it uses `new HostBuilder()` to build a test host, I want to support `Host.CreateEmptyApplicationBuilder()` also, though this\u0027s not a blocking issue",
                                           "updatedAt":  "2024-03-11T06:04:16Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "[API Proposal]: `Host.CreateEmptyApplicationBuilder` without parameter API",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Hosting"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/92716",
        "createdAt":  "2023-09-27T15:38:14Z",
        "number":  92716,
        "author":  "KalleOlaviNiemitalo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-25T17:32:54Z",
        "body":  "### Description\r\n\r\nIn Microsoft.Extensions.Hosting, if IHostedService.StartAsync returns a faulted Task, then HostingLoggerExtensions.HostedServiceStartupFaulted logs the exception with LogLevel.Error, and Host.StartAsync likewise returns a faulted Task. This log level is not consistent with how LogLevel.Critical is used for the following log events that indicate similarly serious problems:\r\n\r\n* ApplicationStartupException: logged if a callback registered with IHostApplicationLifetime.ApplicationStarted throws.  This (surprisingly) does not prevent the host from starting.\r\n* BackgroundServiceStoppingHost: logged if a Task returned by BackgroundService.ExecuteAsync faults asynchronously, and BackgroundServiceExceptionBehavior.StopHost is used.  The host will then stop.\r\n\r\n\r\n### Reproduction Steps\r\n\r\n`dotnet new worker`\r\n\r\nIn Worker.cs, replace ExecuteAsync with the following:\r\n\r\n```csharp\r\n    protected override async Task ExecuteAsync(CancellationToken stoppingToken)\r\n    {\r\n        throw new Exception(\"Synchronous error\");\r\n    }\r\n```\r\n\r\n`dotnet run`\r\n\r\n\r\n### Expected behavior\r\n\r\nThe HostedServiceStartupFaulted event should be logged as LogLevel.Critical (`crit` in the console logger), like events that cause the host to stop prematurely.\r\n\r\n### Actual behavior\r\n\r\nThe HostedServiceStartupFaulted event is logged as LogLevel.Error ( `fail` in the console logger):\r\n\r\n```\r\nBuilding...\r\nfail: Microsoft.Extensions.Hosting.Internal.Host[11]\r\n      Hosting failed to start\r\n      System.Exception: Synchronous error\r\n         at errsev.Worker.ExecuteAsync(CancellationToken stoppingToken) in C:\\Projects\\errsev\\Worker.cs:line 14\r\n         at Microsoft.Extensions.Hosting.Internal.Host.\u003cStartAsync\u003eb__15_1(IHostedService service, CancellationToken token)\r\n         at Microsoft.Extensions.Hosting.Internal.Host.ForeachService[T](IEnumerable`1 services, CancellationToken token, Boolean concurrent, Boolean abortOnFirstException, List`1 exceptions, Func`3 operation)\r\nUnhandled exception. System.Exception: Synchronous error\r\n   at errsev.Worker.ExecuteAsync(CancellationToken stoppingToken) in C:\\Projects\\errsev\\Worker.cs:line 14\r\n   at Microsoft.Extensions.Hosting.Internal.Host.\u003cStartAsync\u003eb__15_1(IHostedService service, CancellationToken token)\r\n   at Microsoft.Extensions.Hosting.Internal.Host.ForeachService[T](IEnumerable`1 services, CancellationToken token, Boolean concurrent, Boolean abortOnFirstException, List`1 exceptions, Func`3 operation)\r\n   at Microsoft.Extensions.Hosting.Internal.Host.\u003cStartAsync\u003eg__LogAndRethrow|15_3(\u003c\u003ec__DisplayClass15_0\u0026)\r\n   at Microsoft.Extensions.Hosting.Internal.Host.StartAsync(CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.RunAsync(IHost host, CancellationToken token)\r\n   at Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.RunAsync(IHost host, CancellationToken token)\r\n   at Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.Run(IHost host)\r\n   at Program.\u003cMain\u003e$(String[] args) in C:\\Projects\\errsev\\Program.cs:line 7\r\n```\r\n\r\n### Regression?\r\n\r\nNot a regression; before .NET 8, Microsoft.Extensions.Hosting just propagated the exception and did not log it at all.\r\n\r\n### Known Workarounds\r\n\r\nMake the application call HostingAbstractionsHostExtensions.StartAsync, await the task, catch exceptions, and log again with the correct LogLevel.Critical.\r\n\r\n(Don\u0027t call HostingAbstractionsHostExtensions.Run and catch exceptions from that, because its `finally` clause disposes of the host and services, thus loggers are no longer functional.)\r\n\r\n### Configuration\r\n\r\n.NET SDK 8.0.100-rc.1.23463.5\r\n\r\nWindows 10.0.19045 x64\r\n\r\n### Other information\r\n\r\nThe HostedServiceStartupFaulted log event was added in \u003chttps://github.com/dotnet/runtime/pull/84048\u003e.  Its LogLevel is set here: \u003chttps://github.com/dotnet/runtime/blob/92959931a32a37a19d8e1b1684edc6db0857d7de/src/libraries/Microsoft.Extensions.Hosting/src/Internal/HostingLoggerExtensions.cs#L105-L114\u003e\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZ5jpTA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5nklyt",
                                           "createdAt":  "2023-09-27T15:38:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-hosting\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nIn Microsoft.Extensions.Hosting, if IHostedService.StartAsync returns a faulted Task, then HostingLoggerExtensions.HostedServiceStartupFaulted logs the exception with LogLevel.Error, and Host.StartAsync likewise returns a faulted Task. This log level is not consistent with how LogLevel.Critical is used for the following log events that indicate similarly serious problems:\r\n\r\n* ApplicationStartupException: logged if a callback registered with IHostApplicationLifetime.ApplicationStarted throws.  This (surprisingly) does not prevent the host from starting.\r\n* BackgroundServiceStoppingHost: logged if a Task returned by BackgroundService.ExecuteAsync faults asynchronously, and BackgroundServiceExceptionBehavior.StopHost is used.  The host will then stop.\r\n\n\n### Reproduction Steps\n\n`dotnet new worker`\r\n\r\nIn Worker.cs, replace ExecuteAsync with the following:\r\n\r\n```csharp\r\n    protected override async Task ExecuteAsync(CancellationToken stoppingToken)\r\n    {\r\n        throw new Exception(\"Synchronous error\");\r\n    }\r\n```\r\n\r\n`dotnet run`\r\n\n\n### Expected behavior\n\nThe HostedServiceStartupFaulted event should be logged as LogLevel.Critical (`crit` in the console logger), like events that cause the host to stop prematurely.\n\n### Actual behavior\n\nThe HostedServiceStartupFaulted event is logged as LogLevel.Error ( `fail` in the console logger):\r\n\r\n```\r\nBuilding...\r\nfail: Microsoft.Extensions.Hosting.Internal.Host[11]\r\n      Hosting failed to start\r\n      System.Exception: Synchronous error\r\n         at errsev.Worker.ExecuteAsync(CancellationToken stoppingToken) in C:\\Projects\\errsev\\Worker.cs:line 14\r\n         at Microsoft.Extensions.Hosting.Internal.Host.\u003cStartAsync\u003eb__15_1(IHostedService service, CancellationToken token)\r\n         at Microsoft.Extensions.Hosting.Internal.Host.ForeachService[T](IEnumerable`1 services, CancellationToken token, Boolean concurrent, Boolean abortOnFirstException, List`1 exceptions, Func`3 operation)\r\nUnhandled exception. System.Exception: Synchronous error\r\n   at errsev.Worker.ExecuteAsync(CancellationToken stoppingToken) in C:\\Projects\\errsev\\Worker.cs:line 14\r\n   at Microsoft.Extensions.Hosting.Internal.Host.\u003cStartAsync\u003eb__15_1(IHostedService service, CancellationToken token)\r\n   at Microsoft.Extensions.Hosting.Internal.Host.ForeachService[T](IEnumerable`1 services, CancellationToken token, Boolean concurrent, Boolean abortOnFirstException, List`1 exceptions, Func`3 operation)\r\n   at Microsoft.Extensions.Hosting.Internal.Host.\u003cStartAsync\u003eg__LogAndRethrow|15_3(\u003c\u003ec__DisplayClass15_0\u0026)\r\n   at Microsoft.Extensions.Hosting.Internal.Host.StartAsync(CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.RunAsync(IHost host, CancellationToken token)\r\n   at Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.RunAsync(IHost host, CancellationToken token)\r\n   at Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.Run(IHost host)\r\n   at Program.\u003cMain\u003e$(String[] args) in C:\\Projects\\errsev\\Program.cs:line 7\r\n```\n\n### Regression?\n\nNot a regression; before .NET 8, Microsoft.Extensions.Hosting just propagated the exception and did not log it at all.\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET SDK 8.0.100-rc.1.23463.5\r\n\r\nWindows 10.0.19045 x64\n\n### Other information\n\nThe HostedServiceStartupFaulted log event was added in \u003chttps://github.com/dotnet/runtime/pull/84048\u003e.  Its LogLevel is set here: \u003chttps://github.com/dotnet/runtime/blob/92959931a32a37a19d8e1b1684edc6db0857d7de/src/libraries/Microsoft.Extensions.Hosting/src/Internal/HostingLoggerExtensions.cs#L105-L114\u003e\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eKalleOlaviNiemitalo\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Hosting`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-09-27T15:38:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5nmOlM",
                                           "createdAt":  "2023-09-27T21:03:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "\u003e Not a regression; before .NET 8, Microsoft.Extensions.Hosting just propagated the exception and did not log it at all.\r\n\r\nI assume adding of the logging is desired; I don\u0027t see a clear statement of this in https://github.com/dotnet/runtime/pull/84048 or the associated issue https://github.com/dotnet/runtime/issues/68036.\r\n\r\nFor consistency, I agree `LogLevel.Critical` seems to be more appropriate than `Error`; also doc is at https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging.loglevel.\r\n",
                                           "updatedAt":  "2023-09-27T21:03:17Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "HostedServiceStartupFaulted is logged with lower LogLevel than BackgroundServiceStoppingHost",
        "labels":  [
                       "enhancement",
                       "area-Extensions-Hosting",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/93476",
        "createdAt":  "2023-10-13T14:30:12Z",
        "number":  93476,
        "author":  "jojopeter",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC_EHqA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mvarblow",
                                            "createdAt":  "2025-01-07T17:47:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fremat",
                                            "createdAt":  "2025-02-13T16:00:10Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-07-26T10:43:05Z",
        "body":  "I am working on creating a Windows service in .NET 6 using BackgroundService. However, I\u0027m encountering an issue where the Windows service transitions to the \"running\" state as soon as ExecuteAsync starts executing. In my specific use case, I have a time-consuming method call inside ExecuteAsync, and I don\u0027t want the service to report that it\u0027s in the \u0027Running\u0027 state until this method call is completed. This is causing a problem because another application is monitoring the Windows service state and incorrectly assumes that it\u0027s in the \u0027Running\u0027 state while the internal method call is still in progress.\r\n\r\nPreviously, I used Topshelf with .NET Framework, and it didn\u0027t have this issue. Unfortunately, Topshelf is not supported in .NET 6.\r\n\r\nIs there an alternate method or approach I can use to ensure that the Windows service doesn\u0027t transition to the \u0027Running\u0027 state until the internal method call is completed? I am open to alternative methods that do not necessarily depend on BackgroundService.\r\n\r\nAny insights or suggestions would be greatly appreciated.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOpQCcVg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5pAC9U",
                                           "createdAt":  "2023-10-13T14:30:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-hosting\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nI am working on creating a Windows service in .NET 6 using BackgroundService. However, I\u0027m encountering an issue where the Windows service transitions to the \"running\" state as soon as ExecuteAsync starts executing. In my specific use case, I have a time-consuming method call inside ExecuteAsync, and I don\u0027t want the service to report that it\u0027s in the \u0027Running\u0027 state until this method call is completed. This is causing a problem because another application is monitoring the Windows service state and incorrectly assumes that it\u0027s in the \u0027Running\u0027 state while the internal method call is still in progress.\r\n\r\nPreviously, I used Topshelf with .NET Framework, and it didn\u0027t have this issue. Unfortunately, Topshelf is not supported in .NET 6.\r\n\r\nIs there an alternate method or approach I can use to ensure that the Windows service doesn\u0027t transition to the \u0027Running\u0027 state until the internal method call is completed? I am open to alternative methods that do not necessarily depend on BackgroundService.\r\n\r\nAny insights or suggestions would be greatly appreciated.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejojopeter\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Hosting`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-10-13T14:30:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5pAga5",
                                           "createdAt":  "2023-10-13T15:52:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "I _think_ what you\u0027re supposed to do is override [`StartAsync()`](https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.hosting.backgroundservice.startasync?view=dotnet-plat-ext-7.0#microsoft-extensions-hosting-backgroundservice-startasync(system-threading-cancellationtoken)).  Potentially do whatever heavy task in there, then have it call `ExecuteAsync()` and set the property.\r\n(see the [base implementation](https://source.dot.net/#Microsoft.Extensions.Hosting.Abstractions), although I don\u0027t know if the Windows-specific one does anything in particular)\r\n\r\nThe other option is to kick off whatever heavy task in the background, but design your communication protocol to have the equivalent of an \"I\u0027m busy\" message (or some null response).  That\u0027s also potentially helpful if you want to be able to reload/regenerate whatever this data is during runtime.",
                                           "updatedAt":  "2023-10-13T15:52:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5pCq5E",
                                           "createdAt":  "2023-10-13T22:15:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEBYDQA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "danmoseley",
                                                                               "createdAt":  "2023-10-13T22:57:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "mvarblow",
                                                                               "createdAt":  "2025-01-07T17:48:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "Wraith2",
                                           "body":  "If you\u0027re writing a windows service then the service state is for windows to track the state of your service not for you to signal to users of the service. There are limits on the time allowed for a service process to respond to scm commands and the typical advice as far as I\u0027m aware has always been to start a thread to do any long running work and return to the caller on any control message.\r\n\r\nIf you need some external caller to know whether it\u0027s safe to talk to whatever your service is hosting then you should create your own api to do that or use a queue.",
                                           "updatedAt":  "2023-10-13T22:15:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5p2AXK",
                                           "createdAt":  "2023-10-23T18:21:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Keeping this open for discussion.\r\n\r\nI assume this also applies in .NET v7 and v8.\r\n\r\nThe suggestion of adding a new property to track a custom status is good; the other application(s) need to be aware of that however.",
                                           "updatedAt":  "2023-10-23T18:21:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZiSMb",
                                           "createdAt":  "2025-01-07T17:51:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mvarblow",
                                           "body":  "When there are multiple services with dependencies defined between then, it\u0027s common to use the Running state to indicate that the service is ready, and Windows can now start the services that depend on it. But it does not appear that BackgroundService, or even IHostedLifecycleService, support this because they don\u0027t provide a way to do work during the \"Starting\" phase.  Even the StartingAsync method on IHostedLifecycleService is executed after the Windows service reports as \"Running\".",
                                           "updatedAt":  "2025-01-07T17:56:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6lAJxW",
                                           "createdAt":  "2025-04-01T06:17:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LinusCenterstrom",
                                           "body":  "I have a similar issue where I\u0027m doing a rolling deployment of a service to several servers.\nWhen I deploy to a server, I stop the old service then start the new one before I proceed to do the same on the next server.\nCurrently to make sure the service is actually started on a server before I stop it on the next server I wait for a file that I write to disk after StartAsync completes, but it would certainly be simpler if I could just use the status of the service instead.",
                                           "updatedAt":  "2025-04-02T06:21:17Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Delay Windows Service \"Running\" State Transition in .NET 6 BackgroundService",
        "labels":  [
                       "discussion",
                       "area-Extensions-Hosting",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/94075",
        "createdAt":  "2023-10-27T06:03:42Z",
        "number":  94075,
        "author":  "danmoseley",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T10:43:06Z",
        "body":  "Built 1d439772701c83108637561467e495b9edc42c73 on Windows, ran all tests, this failed\r\n```\r\n      \u003ctest name=\"Microsoft.Extensions.Hosting.Tests.HostTests.CreateDefaultBuilder_ConfigJsonDoesReload\" type=\"Microsoft.Extensions.Hosting.Tests.HostTests\" method=\"CreateDefaultBuilder_ConfigJsonDoesReload\" time=\"11.237517\" result=\"Fail\"\u003e\r\n        \u003cfailure exception-type=\"Xunit.Sdk.EqualException\"\u003e\r\n          \u003cmessage\u003e\u003c![CDATA[Assert.Equal() Failure: Strings differ\\r\\n                               ↓ (pos 20)\\r\\nExpected: \\\"Hello ASP.NET Core: 7796a03e9f744e68b6a97\\\"···\\r\\nActual:   \\\"Hello ASP.NET Core: 26ec8c29bc7042d3b9c86\\\"···\\r\\n                               ↑ (pos 20)]]\u003e\u003c/message\u003e\r\n          \u003cstack-trace\u003e\u003c![CDATA[   at Microsoft.Extensions.Hosting.Tests.HostTests.CreateDefaultBuilder_ConfigJsonDoesReload() in C:\\git\\runtime\\src\\libraries\\Microsoft.Extensions.Hosting\\tests\\UnitTests\\HostTests.cs:line 361\r\n--- End of stack trace from previous location ---]]\u003e\u003c/stack-trace\u003e\r\n        \u003c/failure\u003e\r\n      \u003c/test\u003e\r\n```\r\nIt passes when I run it again several times. Perhaps flakiness in file change events ?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhp2OAg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5qPHT5",
                                           "createdAt":  "2023-10-27T06:03:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-hosting\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nBuilt 1d439772701c83108637561467e495b9edc42c73 on Windows, ran all tests, this failed\r\n```\r\n      \u003ctest name=\"Microsoft.Extensions.Hosting.Tests.HostTests.CreateDefaultBuilder_ConfigJsonDoesReload\" type=\"Microsoft.Extensions.Hosting.Tests.HostTests\" method=\"CreateDefaultBuilder_ConfigJsonDoesReload\" time=\"11.237517\" result=\"Fail\"\u003e\r\n        \u003cfailure exception-type=\"Xunit.Sdk.EqualException\"\u003e\r\n          \u003cmessage\u003e\u003c![CDATA[Assert.Equal() Failure: Strings differ\\r\\n                               ↓ (pos 20)\\r\\nExpected: \\\"Hello ASP.NET Core: 7796a03e9f744e68b6a97\\\"···\\r\\nActual:   \\\"Hello ASP.NET Core: 26ec8c29bc7042d3b9c86\\\"···\\r\\n                               ↑ (pos 20)]]\u003e\u003c/message\u003e\r\n          \u003cstack-trace\u003e\u003c![CDATA[   at Microsoft.Extensions.Hosting.Tests.HostTests.CreateDefaultBuilder_ConfigJsonDoesReload() in C:\\git\\runtime\\src\\libraries\\Microsoft.Extensions.Hosting\\tests\\UnitTests\\HostTests.cs:line 361\r\n--- End of stack trace from previous location ---]]\u003e\u003c/stack-trace\u003e\r\n        \u003c/failure\u003e\r\n      \u003c/test\u003e\r\n```\r\nIt passes when I run it again several times. Perhaps flakiness in file change events ?\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edanmoseley\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Hosting`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-10-27T06:03:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qRnGv",
                                           "createdAt":  "2023-10-27T14:20:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "It looks like there is also the `CreateDefaultBuilder_ConfigJsonDoesNotReload` which modifies the same config, likely running at the same time conflicting. If this is the case, these will either need a separate config or we need to run the tests there serially or use a lock between them for concurrency.",
                                           "updatedAt":  "2024-07-30T14:15:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GnY4C",
                                           "createdAt":  "2024-07-30T14:18:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Testing a fix here by running the tests in a loop is made more difficult by [CreateDefaultBuilder_ConfigJsonDoesNotReload](https://github.com/dotnet/runtime/issues/43335) since `PlatformNotSupportedException` is thrown (for EventLog access) from both VS and from a command prompt when running just those tests.",
                                           "updatedAt":  "2024-07-30T14:18:39Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "failure in CreateDefaultBuilder_ConfigJsonDoesReload",
        "labels":  [
                       "test-bug",
                       "area-Extensions-Hosting"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/95835",
        "createdAt":  "2023-12-10T13:45:44Z",
        "number":  95835,
        "author":  "hwoodiwiss",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC9x9eQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "martincostello",
                                            "createdAt":  "2023-12-11T23:38:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ArminShoeibi",
                                            "createdAt":  "2024-05-21T21:07:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Sella-GH",
                                            "createdAt":  "2024-12-30T08:31:35Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2025-08-13T12:26:15Z",
        "body":  "### Background and motivation\n\nTo enable host shutdown to be delayed after a shutdown signal is received, I would like to be able to configure a ShutdownDelay in HostOptions to delay the beginning of shutdown of the application host, to better support use cases where surrounding infrastructure (load balancers, reverse proxies) are eventually consistent.\r\n\r\nThis relates to https://github.com/dotnet/aspnetcore/issues/30387\n\n### API Proposal\n\n```c#\r\nnamespace Microsoft.Extensions.Hosting;\r\n\r\npublic class HostOptions\r\n{\r\n    public System.TimeSpan? ShutdownDelay { get;  set; }\r\n}\r\n```\r\n\n\n### API Usage\n\nThis API should follow the usage of the existing properties of the `HostOptions` class, with internal usage via the `HostOptions.Initialize` method\r\n```csharp\r\nvar configuredDelaySeconds = configuration[\"shutdownDelaySeconds\"];\r\nif (!string.IsNullOrEmpty(configuredDelaySeconds)\r\n    \u0026\u0026 int.TryParse(configuredDelaySeconds, NumberStyles.None, CultureInfo.InvariantCulture, out seconds))\r\n{\r\n    ShutdownDelay = TimeSpan.FromSeconds(seconds);\r\n}\r\n```\r\n\r\nAnd then configuration via the configuration API\u0027s and the `IOptions` pattern\r\n\r\nIdealy in the case of ASP.NET Core, it will also be configurable through a new extension method on `IWebHostBuilder` in a similar way to how `ShutdownTimeout` can be (defined [here](https://github.com/dotnet/aspnetcore/blob/52364da7f2d8e8956085a92c2f6b9dae48ac130d/src/Hosting/Abstractions/src/HostingAbstractionsWebHostBuilderExtensions.cs#L161)), however that will need to go through a separate API review.\r\n\r\n```csharp\r\nWebApplicationBuilder builder = WebApplication.CreateBuilder(args);\r\nbuilder.WebHost.UseShutdownDelay(TimeSpan.FromSeconds(30));\r\n```\n\n### Alternative Designs\n\nThis change could instead be localized within [dotnet/aspnetcore](https://github.com/dotnet/aspnetcore), or read directly from `IConfiguration` in the `ConsoleHostLifetime`.\n\n### Risks\n\nGrowing the API surface adds a maintenance and compatibility burden, but should not impact existing code",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvcNSqg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5uNQtx",
                                           "createdAt":  "2023-12-10T13:45:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-hosting\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nTo enable host shutdown to be delayed after a shutdown signal is received, I would like to be able to configure a ShutdownDelay in HostOptions to delay the beginning of shutdown of the application host, to better support use cases where surrounding infrastructure (load balancers, reverse proxies) are eventually consistent.\r\n\r\nThis relates to https://github.com/dotnet/aspnetcore/issues/30387\n\n### API Proposal\n\n```c#\r\nnamespace Microsoft.Extensions.Hosting;\r\n\r\npublic class HostOptions\r\n{\r\n    public System.TimeSpan? ShutdownDelay { get;  set; }\r\n}\r\n```\r\n\n\n### API Usage\n\nThis API should follow the usage of the existing properties of the `HostOptions` class, with internal usage via the `HostOptions.Initialize` method\r\n```csharp\r\nvar configuredDelaySeconds = configuration[\"shutdownDelaySeconds\"];\r\nif (!string.IsNullOrEmpty(configuredDelaySeconds)\r\n    \u0026\u0026 int.TryParse(configuredDelaySeconds, NumberStyles.None, CultureInfo.InvariantCulture, out seconds))\r\n{\r\n    ShutdownDelay = TimeSpan.FromSeconds(seconds);\r\n}\r\n```\r\n\r\nAnd then configuration via the configuration API\u0027s and the `IOptions` pattern\r\n\r\nIdealy in the case of ASP.NET Core, it will also be configurable through a new extension method on `IWebHostBuilder` in a similar way to how `ShutdownTimeout` can be (defined [here](https://github.com/dotnet/aspnetcore/blob/52364da7f2d8e8956085a92c2f6b9dae48ac130d/src/Hosting/Abstractions/src/HostingAbstractionsWebHostBuilderExtensions.cs#L161)), however that will need to go through a separate API review.\r\n\r\n```csharp\r\nWebApplicationBuilder builder = WebApplication.CreateBuilder(args);\r\nbuilder.WebHost.UseShutdownDelay(TimeSpan.FromSeconds(30));\r\n```\n\n### Alternative Designs\n\nThis change could instead be localized within [dotnet/aspnetcore](https://github.com/dotnet/aspnetcore), or read directly from `IConfiguration` in the `ConsoleHostLifetime`.\n\n### Risks\n\nGrowing the API surface adds a maintenance and compatibility burden, but should not impact existing code\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ehwoodiwiss\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-Extensions-Hosting`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-12-10T13:45:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5uNQxe",
                                           "createdAt":  "2023-12-10T13:46:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hwoodiwiss",
                                           "body":  "Initial PoC implementation of this with related changes exist in this draft: https://github.com/dotnet/runtime/pull/95828",
                                           "updatedAt":  "2023-12-10T13:46:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wKgLX",
                                           "createdAt":  "2024-01-08T20:51:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Adding contacts from https://github.com/dotnet/aspnetcore/issues/30387: @davidfowl @halter73 @tmds @jkotalik",
                                           "updatedAt":  "2024-01-08T20:51:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wLcFB",
                                           "createdAt":  "2024-01-09T00:26:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "This seems like a weird option to add. Even though it\u0027s a pretty simple concept, every API has a cost in terms of complexity. It would be the third timespan/timeout on `HostOptions` and the second related to shut down. Do we need a `StartDelay` too for consistency?\r\n\r\nI hope not. A little custom logic to delay starting the host is all you need. Delaying shutdown is not much different. Just delay the shutdown signal. https://learnk8s.io/graceful-shutdown recommends sleeping in `preStop` for example:\r\n\r\n```yaml\r\n      lifecycle:\r\n        preStop:\r\n          exec:\r\n            command: [\"sleep\", \"15\"]\r\n```\r\n\r\nYou could also sleep in `ApplicationStopping` as @davidfowl mentioned in the other https://github.com/dotnet/aspnetcore/issues/30387, and if you wanted to be less hacky you could use a no-op `IHostLifetime` and hook SIGTERM manually to call `IHost.StopAsync` after a delay.\r\n\r\nIf we really think this is important enough that it should be configurable without any custom logic,  `ConsoleLifetimeOptions.ShutdownDelay` is the much more natural place for it. If `SuppressStatusMessages` is part of `ConsoleLifetimeOptions` and not a `HostOptions`, `ShutdownDelay` certainly shouldn\u0027t get any special treatment.\r\n\r\nHave we discussed whether or not this is going to get a default configuration key like [\"shutdownTimeoutSeconds\" does](https://github.com/dotnet/runtime/blob/f21dc6c3dceb6ea76bef73e2a026c770aaed3b5e/src/libraries/Microsoft.Extensions.Hosting/src/HostOptions.cs#L58) or [\"suppressStatusMessages\" used to with `WebHost` but no longer does 😞](https://github.com/dotnet/aspnetcore/issues/46022)? I guess people who care generally just disable logging entirely. The old `WebHost` used `Console.WriteLine` instead of logging, so \"suppressStatusMessages\" was the only way to disable it.",
                                           "updatedAt":  "2024-01-09T00:26:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wgLRn",
                                           "createdAt":  "2024-01-11T16:03:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hwoodiwiss",
                                           "body":  "Thanks for the response!\r\n\r\nI appreciate your point that `HostOptions` isn\u0027t the right place for this, I think it could lead to the expectation that all `IHostLifetime` implementations should support delayed shutdown, which I don\u0027t think is necessary, `ConsoleLifetimeOptions` may be a better option, potentially even a new implementation that inherits `ConsoleLifetime` that would live in the [dotnet/aspnetcore](https://github.com/dotnet/aspnetcore) repo would make more sense.\r\n\r\nTo this point:\r\n\u003e If we really think this is important enough that it should be configurable without any custom logic\r\n\r\nI think this fits well with the theme of .NET/ASP.NET Core being great language and framework for cloud native development and hosting. While there _are_ other options, it feels intuitive that being able to handle running in an eventually consistent hosting environment in code, and in my opinion this provides a better developer experience for developers that work primarily in .NET.\r\n\r\nI mentioned in my initial comment on [dotnet/aspnetcore#30387](https://github.com/dotnet/aspnetcore/issues/30387#issuecomment-1570444046), it felt to me that this should _just work_, and be a use case that\u0027s supported by the framework.",
                                           "updatedAt":  "2024-01-11T16:03:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc69w1Kq",
                                           "createdAt":  "2025-08-13T12:26:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "meggima",
                                           "body":  "We just ran into this topic in one of our services. Furthermore, I think we have a use-case that - if it should be supported out of the box - would need some extension to the concept outlined here.\n\nIn our case we have a TCP server running in our .NET app (multiple container instances, of course), that gets its connections assigned by an AWS network load balancer. This loadbalancer has to determine the health of the target containers. To achieve this we defined an HTTP endpoint in our app that is regularly scraped by the loadbalancer. We call it loadbalancer health check. When the app is shutdown we have to signal the load balancer that it should not send new connections to the app container. So, once the container receives the SIGTERM signal we have to delay the shutdown and turn the loadbalancer health check to unhealthy. Hence, we need a way to propagate the information that we received the SIGTERM (and are about to shutdown) to other parts in our app. This could be similar to signaling the shutdown using the stopping token.\n\nSo, maybe the feature outlined in this design should include such a signaling mechanism to trigger some actions when we are about to shutdown? This would of course increase the API surface even more.",
                                           "updatedAt":  "2025-08-13T12:26:14Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "[API Proposal]: Enable configurable HostLifetime shutdown delay via HostOptions",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Hosting"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/99085",
        "createdAt":  "2024-02-28T21:55:54Z",
        "number":  99085,
        "author":  "dferretti",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODEuKFQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-08-08T21:36:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "derigel23",
                                            "createdAt":  "2024-10-05T21:34:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "grashenko",
                                            "createdAt":  "2024-10-15T17:59:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ChristofferGersen",
                                            "createdAt":  "2025-06-25T09:57:36Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2025-08-01T18:09:42Z",
        "body":  "Currently, this results in no hosted services running, but IMO seems like it could be good to allow:\r\n\r\n```c#\r\nservices.AddKeyedSingleton\u003cIHostedService\u003e(\"x\", (sp, key) =\u003e\r\n{\r\n  var something = sp.GetRequiredKeyedService\u003cSomeService\u003e(key);\r\n  return new SomeHostedService(something);\r\n});\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOom_S3A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc51a5vo",
                                           "createdAt":  "2024-02-28T21:56:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-hosting\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nCurrently, this results in no hosted services running, but IMO seems like it could be good to allow:\r\n\r\n```c#\r\nservices.AddKeyedSingleton\u003cIHostedService\u003e(\"x\", (sp, key) =\u003e\r\n{\r\n  var something = sp.GetRequiredKeyedService\u003cSomeService\u003e(key);\r\n  return new SomeHostedService(something);\r\n});\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edferretti\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Hosting`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-02-28T21:56:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc51a8iO",
                                           "createdAt":  "2024-02-28T22:05:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODtVKnA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JorgeCandeias",
                                                                               "createdAt":  "2024-04-30T18:33:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-08-08T21:36:11Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "dferretti",
                                           "body":  "And currently, this might seem unnecessary because that could just be replaced with a `services.AddHostedService(sp =\u003e ...)`, but my ulterior motive is to have this work with https://github.com/dotnet/runtime/issues/99084 so I can do something like\r\n\r\n```c#\r\nclass MyClient() { }\r\nclass MyService([FromKeyedServices(ServiceKey)] MyClient client) : IHostedService { ... }\r\n\r\nservices.AddKeyedService\u003cMyClient\u003e(\"first\");\r\nservices.AddKeyedHostedService\u003cMyService\u003e(\"first\");\r\n```\r\n\r\ncurrently you can\u0027t `AddHostedService\u003cT\u003e` twice because it calls `TryAddEnumerable` so you only end up with one instance running. But with something like this, I could conveniently add my hosted service multiple times with service keys, and have it use my other keyed services",
                                           "updatedAt":  "2024-02-28T22:05:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52kcBw",
                                           "createdAt":  "2024-03-11T19:28:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "cc @benjaminpetit ",
                                           "updatedAt":  "2024-03-11T19:28:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58ltid",
                                           "createdAt":  "2024-05-02T11:25:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkompis",
                                           "body":  "Is there currently any workaround other than starting / stopping these services on your own? My use case is along those lines:\r\n\r\n```\r\nusing Microsoft.Extensions.DependencyInjection;\r\nusing Microsoft.Extensions.Hosting;\r\nusing Microsoft.Extensions.Logging;\r\n\r\nvar host = Host.CreateDefaultBuilder(args)\r\n    .ConfigureServices(services =\u003e\r\n    {\r\n        services.AddLogging();\r\n        services.AddKeyedSingleton\u003cIHostedService, TestService\u003e(\"key-a\");\r\n        services.AddKeyedSingleton\u003cIHostedService, TestService\u003e(\"key-b\");\r\n    })\r\n    .Build();\r\n\r\nawait host.StartAsync();\r\nawait host.StopAsync();\r\n\r\ninternal sealed class TestService([ServiceKey] string key, ILogger\u003cTestService\u003e logger) : IHostedService\r\n{\r\n    public Task StartAsync(CancellationToken cancellationToken)\r\n    {\r\n        logger.LogInformation(\"Start {Key}!\", key);\r\n        return Task.CompletedTask;\r\n    }\r\n\r\n    public Task StopAsync(CancellationToken cancellationToken)\r\n    {\r\n        logger.LogInformation(\"Stop {Key}!\", key);\r\n        return Task.CompletedTask;\r\n    }\r\n}\r\n```\r\n\r\nExpected output would be:\r\n\r\n```\r\nStart key-a\r\nStart key-b\r\nStop key-b\r\nStop key-a\r\n```",
                                           "updatedAt":  "2024-05-02T11:27:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Hj9Jl",
                                           "createdAt":  "2024-08-07T21:07:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "\u003e currently you can\u0027t AddHostedService\u003cT\u003e twice because it calls TryAddEnumerable so you only end up with one instance running. But with something like this, I could conveniently add my hosted service multiple times with service keys, and have it use my other keyed services\r\n\r\n\u003e ```c#\r\n\u003eclass MyClient() { }\r\n\u003eclass MyService([FromKeyedServices(ServiceKey)] MyClient client) : IHostedService { ... }\r\n\r\n\u003eservices.AddKeyedService\u003cMyClient\u003e(\"first\");\r\n\u003eservices.AddKeyedHostedService\u003cMyService\u003e(\"first\");\r\n\r\nI think new APIs are necessary here (as above -  AddKeyedService + AddKeyedHostedService) as changing the existing ones (AddKeyedSingleton, AddHostedService) would likely be breaking. There are many cases where the same interface is added as both a service and hosted service.\r\n\r\nMoving to v10; this issue needs to formalize the API proposal and semantics. ",
                                           "updatedAt":  "2024-08-07T21:08:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LXBU0",
                                           "createdAt":  "2024-09-09T13:02:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEJn0zg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "darrylmatthews-dcbank",
                                                                               "createdAt":  "2025-03-12T19:23:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "NikoGJ",
                                           "body":  "\u003e Is there currently any workaround other than starting / stopping these services on your own? \r\n\r\nApparently, `IHostedService ` services that are registered as keyed services are not resolved nor started on host startup.\r\nI made it work by first registering the implementation as a keyed service, so I can resolve it when registering the IHostedService the \u0027regular\u0027 way.\r\n\r\n```\r\nservices.AddKeyedSingleton\u003cMyHostedServiceImpl\u003e(\"foo\");\r\nservices.AddSingleton\u003cIHostedService, MyHostedServiceImpl\u003e(p =\u003e p. GetRequiredKeyedService\u003cMyHostedServiceImpl\u003e(\"foo\"));\r\n```\r\n\r\nFWIW, my use case is that I want to register multiple hosted services (messaging consumers) dynamically, according to what\u0027s inside the configuration\r\neg:\r\n```\r\npublic static void AddRabbitMQConsumers(this IServiceCollection services, IConfigurationSection configurationSection)\r\n{\r\n\tforeach (var consumerKey in configurationSection.GetChildren().Select(x =\u003e x.Key))\r\n\t{\r\n\t\tservices.Configure\u003cConsumerOptions\u003e(consumerKey, configurationSection.GetRequiredSection(consumerKey));\r\n\t\tservices.AddKeyedSingleton\u003cRabbitMQConsumer\u003e(consumerKey);\r\n\t\tservices.AddSingleton\u003cIHostedService, RabbitMQConsumer\u003e(p =\u003e p.GetRequiredKeyedService\u003cRabbitMQConsumer\u003e(consumerKey));\r\n\t}\r\n}\r\n```",
                                           "updatedAt":  "2024-09-09T13:02:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LXn_-",
                                           "createdAt":  "2024-09-09T14:06:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEF0d9Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tmakin",
                                                                               "createdAt":  "2025-02-10T12:33:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "julealgon",
                                           "body":  "\u003e FWIW, my use case is that I want to register multiple hosted services (messaging consumers) dynamically, according to what\u0027s inside the configuration eg:\r\n\u003e \r\n\u003e ```\r\n\u003e public static void AddRabbitMQConsumers(this IServiceCollection services, IConfigurationSection configurationSection)\r\n\u003e {\r\n\u003e \tforeach (var consumerKey in configurationSection.GetChildren().Select(x =\u003e x.Key))\r\n\u003e \t{\r\n\u003e \t\tservices.Configure\u003cConsumerOptions\u003e(consumerKey, configurationSection.GetRequiredSection(consumerKey));\r\n\u003e \t\tservices.AddKeyedSingleton\u003cRabbitMQConsumer\u003e(consumerKey);\r\n\u003e \t\tservices.AddSingleton\u003cIHostedService, RabbitMQConsumer\u003e(p =\u003e p.GetRequiredKeyedService\u003cRabbitMQConsumer\u003e(consumerKey));\r\n\u003e \t}\r\n\u003e }\r\n\u003e ```\r\n\r\n@NikoGJ I\u0027m not following you here. Your example above doesn\u0027t need the actual hosted service to be a keyed registration at all. Am I missing something?",
                                           "updatedAt":  "2024-09-09T14:06:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LZWL6",
                                           "createdAt":  "2024-09-09T17:29:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODxkyUQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-09-09T19:56:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "NikoGJ",
                                           "body":  "\u003e @NikoGJ I\u0027m not following you here. Your example above doesn\u0027t need the actual hosted service to be a keyed registration at all. Am I missing something?\r\n\r\nIt does if I want to spawn multiple hosted services with different configurations. I just configure multiple and different named IOptions, then I can get the relevant named options from the hosted service\u0027s constructor, by injecting its `[ServiceKey]` :\r\n```\r\npublic RabbitMQConsumer([ServiceKey] serviceKey, IOptionsMonitor\u003cConsumerOptions\u003e options, ...)\r\n{\r\n    _options = options.Get(serviceKey);\r\n}\r\n```\r\nSo now, I can have different consumers (hosted services) each with a different configuration (different queues, prefetchs etc.)\r\n\r\nOf course, I could do without, but I would have to manually instantiate the hosted service and resolve all its dependencies by hand:\r\n`services.AddSingleton\u003cIHostedService, RabbitMQConsumer\u003e(p =\u003e new RabbitMQConsumer(p.GetRequiredService\u003c...\u003e(), ...)\r\n`",
                                           "updatedAt":  "2024-09-09T17:29:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LahnL",
                                           "createdAt":  "2024-09-09T20:06:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGsHWA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NikoGJ",
                                                                               "createdAt":  "2025-02-18T07:46:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "julealgon",
                                           "body":  "@NikoGJ \r\n\u003e It does if I want to spawn multiple hosted services with different configurations. I just configure multiple and different named IOptions, then I can get the relevant named options from the hosted service\u0027s constructor, by injecting its `[ServiceKey]` :\r\n\u003e \r\n\u003e ```\r\n\u003e public RabbitMQConsumer([ServiceKey] serviceKey, IOptionsMonitor\u003cConsumerOptions\u003e options, ...)\r\n\u003e {\r\n\u003e     _options = options.Get(serviceKey);\r\n\u003e }\r\n\u003e ```\r\n\u003e \r\n\u003e So now, I can have different consumers (hosted services) each with a different configuration (different queues, prefetchs etc.)\r\n\r\nAh I see... for whatever reason, I actually didn\u0027t realize it was possible to inject the _key_ itself like this. Definitely an interesting pattern now that I look at it. Sorry for my ignorance.\r\n\r\n\u003e Of course, I could do without, but I would have to manually instantiate the hosted service and resolve all its dependencies by hand: `services.AddSingleton\u003cIHostedService, RabbitMQConsumer\u003e(p =\u003e new RabbitMQConsumer(p.GetRequiredService\u003c...\u003e(), ...) `\r\n\r\nIf you want to keep your code a bit more manageable in the meantime, you can use `ActivatorUtilities` to avoid all those redundant `GetRequiredService` calls and just override what you need. Not perfect by any means, but should help and you can keep your signature very similar:\r\n\r\n```csharp\r\npublic RabbitMQConsumer(string optionsName, IOptionsMonitor\u003cConsumerOptions\u003e options, ...)\r\n{\r\n    _options = options.Get(serviceKey);\r\n}\r\n```\r\n\r\n```csharp\r\npublic static void AddRabbitMQConsumers(this IServiceCollection services, IConfigurationSection configurationSection)\r\n{\r\n    foreach (var consumerKey in configurationSection.GetChildren().Select(x =\u003e x.Key))\r\n    {\r\n        services.Configure\u003cConsumerOptions\u003e(consumerKey, configurationSection.GetRequiredSection(consumerKey));\r\n        services.AddHostedService(p =\u003e ActivatorUtilities.CreateInstance\u003cRabbitMQConsumer\u003e(p, consumerKey));\r\n    }\r\n}\r\n```",
                                           "updatedAt":  "2024-09-09T20:06:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hMKbK",
                                           "createdAt":  "2025-03-06T16:19:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "I have a local prototype for this, but it depends on https://github.com/dotnet/runtime/pull/113137 getting in first to fix the bug with the caching when querying for enumerables.\n\nAs mentioned earlier, using double registration works today:\n```cs\n services.AddKeyedSingleton\u003cTestHostedServiceWithServiceKey\u003e(\"MyKey1\");\n services.AddKeyedSingleton\u003cTestHostedServiceWithServiceKey\u003e(\"MyKey2\");\n services.AddSingleton\u003cIHostedService, TestHostedServiceWithServiceKey\u003e(p =\u003e p.GetRequiredKeyedService\u003cTestHostedServiceWithServiceKey\u003e(\"MyKey1\"));\n services.AddSingleton\u003cIHostedService, TestHostedServiceWithServiceKey\u003e(p =\u003e p.GetRequiredKeyedService\u003cTestHostedServiceWithServiceKey\u003e(\"MyKey2\"));\n\n```\nbut the single registration doesn\u0027t (but should):\n```cs\nservices.AddKeyedSingleton\u003cIHostedService, TestHostedServiceWithServiceKey\u003e(\"MyKey1\");\nservices.AddKeyedSingleton\u003cIHostedService, TestHostedServiceWithServiceKey\u003e(\"MyKey2\");\n```\n\nNote however, when fixed, the just like non-keyed, you won\u0027t be able to get the service via implementation type:\n```cs\nGetRequiredKeyedService\u003cTestHostedServiceWithServiceKey\u003e(\"MyKey1\")\n```\nsince it was registered via `IHostedService`, not with `TestHostedServiceWithServiceKey`.",
                                           "updatedAt":  "2025-03-14T16:47:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ib9Lc",
                                           "createdAt":  "2025-03-14T16:52:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "I put my prototype at https://github.com/dotnet/runtime/compare/main...steveharter:runtime:Di-Issue99085.\n\nThe implementation is basically:\n```cs\nIEnumerable\u003cIHostedService\u003e? keyedHostedServices = Services.GetKeyedService\u003cIEnumerable\u003cIHostedService\u003e\u003e(KeyedService.AnyKey);\n...\nhostedServices.Concat(keyedHostedServices);\n```\n\nwhich has a few issues:\n1. Affects performance since it needs to loop over all of the registered services again\n2. Does a concat\n3. Will not preserve ordering since it does two different calls to get the services (one for unkeyed, one for keyed).\n\nDue to these issues and since there are workaround(s) and since I expect this to be a rare case (keyed IHostedService implementations) I\u0027m going to move this to future.\n\nCurrently there is no way to get both keyed and unkeyed services together in one API. If we added that, that would address the 3 issues above.",
                                           "updatedAt":  "2025-03-14T16:52:48Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "Should Host resolve keyed hosted services?",
        "labels":  [
                       "bug",
                       "area-Extensions-Hosting"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/99846",
        "createdAt":  "2024-03-15T22:51:24Z",
        "number":  99846,
        "author":  "lipchev",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODFDlHA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "martincostello",
                                            "createdAt":  "2024-03-16T03:30:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mindball",
                                            "createdAt":  "2024-03-16T06:07:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "aetos382",
                                            "createdAt":  "2024-09-20T10:09:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-09-20T15:19:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "a10r",
                                            "createdAt":  "2024-10-30T11:20:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "compujuckel",
                                            "createdAt":  "2025-06-28T13:13:43Z"
                                        }
                                    ],
                          "totalCount":  6
                      },
        "updatedAt":  "2025-08-01T18:09:43Z",
        "body":  "### Background and motivation\r\n\r\nIn .NET Core, the `IHostedService` interface is a powerful tool for running background tasks that should start when the application starts and stop when it shuts down. However, when multiple `IHostedService` instances have dependencies on each other, managing the startup order can become complex.\r\n\r\nCurrently, `IHostedService` instances are started in the order they are registered in the dependency injection container. This means that developers must carefully control the registration order to ensure that dependencies are resolved correctly. This can be error-prone and difficult to manage, especially in large applications with many interdependent services.\r\n\r\nTo simplify this process, I propose adding a new option to the `HostOptions` configuration: `StartServicesAccordingToResolutionOrder`. When this option is set to `true`, the framework would automatically start `IHostedService` instances in the order determined by the dependency resolution process, rather than the registration order. This would ensure that services are always started after their dependencies, regardless of the order in which they were registered.\r\n\r\nThis feature would complement the existing `ServicesStartConcurrently` option. If both `ServicesStartConcurrently` and `StartServicesAccordingToResolutionOrder` are set to true, the framework would start the `IHostedService` instances concurrently but still respect the order determined by the dependency resolution process. This means that even though the services are started concurrently, a service will not start until all its dependencies have finished starting. This provides developers with fine-grained control over the startup process, making it easier to manage complex dependencies between services even when they are started concurrently. \r\n\r\n### API Proposal\r\n\r\n```csharp\r\nnamespace Microsoft.Extensions.Hosting\r\n{\r\n    public class HostOptions\r\n    {\r\n        /// \u003csummary\u003e\r\n        /// Indicates whether hosted services should be started according to their dependency resolution order.\r\n        /// If true, the hosted services will be started in the order determined by the dependency resolution process.\r\n        /// If false, the hosted services will be started in the order they were registered.\r\n        /// The default value is false.\r\n        /// \u003c/summary\u003e\r\n        public bool StartServicesAccordingToResolutionOrder { get; set; }\r\n    }\r\n}\r\n```\r\n\r\n### API Usage\r\n\r\n```\r\npublic static IHostBuilder CreateHostBuilder(string[] args) =\u003e\r\n    Host.CreateDefaultBuilder(args)\r\n        .ConfigureServices((hostContext, services) =\u003e\r\n        {\r\n            services.AddHostedService\u003cWorker\u003e();\r\n        })\r\n        .UseDefaultServiceProvider((context, options) =\u003e\r\n        {\r\n            options.ValidateScopes = context.HostingEnvironment.IsDevelopment();\r\n        })\r\n        .ConfigureHostOptions(options =\u003e\r\n        {\r\n            options.ServicesStartConcurrently = false; // Start services sequentially\r\n            options.StartServicesAccordingToResolutionOrder = true; // Start services according to resolution order\r\n        });\r\n\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjN5Rzg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc53PsHP",
                                           "createdAt":  "2024-03-15T22:51:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-hosting\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-03-15T22:51:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc531kcD",
                                           "createdAt":  "2024-03-20T20:08:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "PTAL @davidfowl @halter73. Has this been discussed previously?",
                                           "updatedAt":  "2024-03-20T20:08:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6M3lHO",
                                           "createdAt":  "2024-09-20T10:20:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODzCPJQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-09-20T15:21:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "aetos382",
                                           "body":  "Even if we can control the order in which services are started, it probably won\u0027t be very useful.\r\nWhat we actually need is for the processing of one service to be carried out after the other service has completed its initialization.\r\nThis could be solved, for example, by injecting an object like this.\r\n\r\n```cs\r\npublic interface IDependencyControl\r\n{\r\n    CancellationToken ServiceInitialized { get; }\r\n}\r\n\r\npublic sealed class DependencyControl : IDependencyControl, IDisposable\r\n{\r\n    private readonly CancellationTokenSource _cts = new();\r\n\r\n    public CancellationToken ServiceInitialized =\u003e _cts.Token;\r\n\r\n    public void NotifyServiceInitialized =\u003e _cts.Cancel();\r\n\r\n    public void Dispose() =\u003e _cts.Dispose();\r\n}\r\n```",
                                           "updatedAt":  "2024-09-20T10:20:26Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[API Proposal]: Add Option to Start IHostedService Instances According to Dependency Resolution Order",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Hosting"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/103147",
        "createdAt":  "2024-06-07T02:00:30Z",
        "number":  103147,
        "author":  "Redplcs",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC4dlcQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-06-07T12:36:14Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-08-01T18:09:45Z",
        "body":  "### Background and motivation\n\nTo ensure that critically important services are working fine. For example, service initializes SDL library or service that draw frames on screen without any error. In those cases, continue running host is useless. To handle it, we just can stop applications, but when you\u0027re calling multiple methods that possibly could throw an exception, the code transforms into \u0027if\u0027 mess.\r\n\r\n\"Critical\" means that service is on critical state where any error could break the app\n\n### API Proposal\n\n```csharp\r\npublic static class CriticalServiceCollectionExtensions\r\n{\r\n    public static IServiceCollection AddCriticalService\u003cTCriticalService\u003e(this IServiceCollection services) where TCriticalService : IHostedService;\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\n// Service that throws exception\r\npublic class MyService : BackgroundService\r\n{\r\n    protected override async Task ExecuteAsync(CancellationToken stoppingToken) =\u003e throw new Exception();\r\n}\r\n\r\n// Building host\r\nvar host = Host.CreateApplicationBuilder();\r\nhost.Services.AddCriticalService\u003cMyService\u003e();\r\nawait host.Build().RunAsync();\r\n```\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgG8CCA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6AXykg",
                                           "createdAt":  "2024-06-07T02:00:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-hosting\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-06-07T02:00:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6AX9Xn",
                                           "createdAt":  "2024-06-07T03:03:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODldMdA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "buyaa-n",
                                                                               "createdAt":  "2024-06-12T20:07:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "\u003e  To handle it, we just can stop applications, but when you\u0027re calling multiple methods that possibly could throw an exception, the code transforms into \u0027if\u0027 mess.\r\n\r\nI think we need a motivating code sample to better understand the if mess. The more realistic the better.",
                                           "updatedAt":  "2024-06-07T03:03:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6AbauY",
                                           "createdAt":  "2024-06-07T11:46:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Redplcs",
                                           "body":  "Thanks for reply! It will be useful in application where we\u0027re using native libraries such as SDL, FFMPEG, e.t.c. where functions returns error codes. For example, continue running host when SDL is not initialized or primary window wasn\u0027t created is useless, so we have to manually check error codes, log an error and quit application.\r\n\r\n```csharp\r\npublic class SDLHostedService(IHostApplicationLifetime lifetime, ILogger\u003cSDLHostedService\u003e logger) : IHostedService\r\n{\r\n\tpublic IntPtr CreateWindow(string title, int x, int y, int width, int height, SDL.SDL_WindowFlags flags)\r\n\t{\r\n\t\tIntPtr handle = SDL.SDL_CreateWindow(title, x, y, width, height, flags);\r\n\t\tif (handle == IntPtr.Zero) // if mess\r\n\t\t{\r\n\t\t\tlogger.LogCritical(SDL.SDL_GetError());\r\n\t\t\tlifetime.StopApplication();\r\n\t\t}\r\n\t\treturn handle;\r\n\t}\r\n\tpublic Task StartAsync(CancellationToken cancellationToken)\r\n\t{\r\n\t\tif (SDL.SDL_Init(SDL.SDL_INIT_EVERYTHING) \u003c 0) // if mess\r\n\t\t{\r\n\t\t\tlogger.LogCritical(SDL.SDL_GetError());\r\n\t\t\tlifetime.StopApplication();\r\n\t\t}\r\n\t\treturn Task.CompletedTask;\r\n\t}\r\n\tpublic Task StopAsync(CancellationToken cancellationToken)\r\n\t{\r\n\t\tSDL.SDL_Quit();\r\n\t\treturn Task.CompletedTask;\r\n\t}\r\n}\r\n\r\nvar host = Host.CreateApplicationBuilder();\r\nhost.Services.AddHostedService\u003cSDLHostedService\u003e();\r\n\r\nawait host.Build().RunAsync();\r\n```\r\n\r\nMy idea is bring critical services where any method could throw an exception that\u0027s critical to our application. The host should log an exception and stop running if the service threw exception. The code comes into this.\r\n\r\n```csharp\r\npublic class SDLException(string message) : Exception(message)\r\n{\r\n\tprivate static void ThrowException()\r\n\t{\r\n\t\tthrow new SDLException(SDL.SDL_GetError());\r\n\t}\r\n\tpublic static void IfInvalid(int retval)\r\n\t{\r\n\t\tif (retval \u003c 0) ThrowException();\r\n\t}\r\n\tpublic static void IfInvalid(IntPtr handle)\r\n\t{\r\n\t\tif (handle == IntPtr.Zero) ThrowException();\r\n\t}\r\n}\r\n\r\npublic class SDLHostedService : IHostedService\r\n{\r\n\tpublic IntPtr CreateWindow(string title, int x, int y, int width, int height, SDL.SDL_WindowFlags flags)\r\n\t{\r\n\t\tIntPtr handle;\r\n\t\tSDLException.IfInvalid(handle = SDL.SDL_CreateWindow(title, x, y, width, height, flags));\r\n\t\treturn handle;\r\n\t}\r\n\tpublic Task StartAsync(CancellationToken cancellationToken)\r\n\t{\r\n\t\tSDLException.IfInvalid(SDL.SDL_Init(SDL.SDL_INIT_EVERYTHING));\r\n\t\treturn Task.CompletedTask;\r\n\t}\r\n\tpublic Task StopAsync(CancellationToken cancellationToken)\r\n\t{\r\n\t\tSDL.SDL_Quit();\r\n\t\treturn Task.CompletedTask;\r\n\t}\r\n}\r\n\r\nvar host = Host.CreateApplicationBuilder();\r\nhost.Services.AddCriticalService\u003cSDLHostedService\u003e();\r\n\r\nawait host.Build().RunAsync();\r\n```",
                                           "updatedAt":  "2024-06-07T11:46:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6AbwII",
                                           "createdAt":  "2024-06-07T12:42:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODlhLmA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "WernerMairl",
                                                                               "createdAt":  "2024-06-13T09:19:55Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "julealgon",
                                           "body":  "\u003e bring critical services where any method could throw an exception that\u0027s critical to our application. The host should log an exception and stop running if the service threw exception.\r\n\r\n@Redplcs can\u0027t you just create a simple decorator implementation for `IHostedService` that performs this check and exits the application?\r\n\r\nI fail to see the need for a specialized API here for such a specific corner case.\r\n\r\nAlso, if you don\u0027t want to have an \"if mess\", use a decent library instead of SDL 😅 It\u0027s not C#\u0027s libraries fault that a random package decided to be a thin PInvoke wrapper of some C library that relies exclusively on error codes instead of exceptions even though that\u0027s not idiomatic C#.\r\n\r\nIf you _really_ need to work with such terrible packages, maybe create a wrapper yourself that converts the error codes into proper exceptions? That\u0027s what I would do anyways to at least isolate my application code from the nastiness of the library.",
                                           "updatedAt":  "2024-06-07T12:42:33Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Critically important services in Microsoft.Extensions.Hosting",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Hosting",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/104428",
        "createdAt":  "2024-07-04T11:18:29Z",
        "number":  104428,
        "author":  "amoorcroft-nortech",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T10:50:36Z",
        "body":  "Currently using a single IHostedService with .NET Generic host, which is ran as a Windows Service.\r\n\r\nWhen an unhandled exception is thrown from a worker thread (e.g. from a System.Threading.Timer callback), the application is terminated with a non-zero exit code, resulting in the SCM restarting the service (due to configured service\u0027s recovery options).\r\n\r\nIt\u0027s possible to hook into the AppDomain.CurrentDomain.UnhandledException event, which could be used to save state / perform additional logging before the application terminates. The question is, should this event callback be invoking IHostApplicationLifetime.StopApplication? The advantage is that any unmanaged resources in the service container could be disposed of, rather than just exiting.\r\n\r\nLooking at the docs, when an unhandled exception occurs there doesn\u0027t seem to be anyway to prevent the application from crashing after it invokes the event callback. Perhaps if IHostApplicationLifetime.StopApplication was called, we could end up in a worse state, with some services being disposed before the application crashes (as host could take a while to shutdown cleanly)?\r\n\r\nWhen I tested invoking StopApplication in the event callback, I noticed the application would no longer be restarted by SCM (even when setting Environment.ExitCode to 1). However, it would log \"Hosting stopped\", implying the host cleanup was being completed.\r\n\r\nHere\u0027s some sample code to demonstrate what I\u0027m talking about:\r\n````\r\nAppDomain.CurrentDomain.UnhandledException += (sender, args) =\u003e\r\n{\r\n    var e = args.ExceptionObject as Exception;\r\n    try\r\n    {\r\n        _logger.Error(e, \"Unhandled exception, attempting to shutdown cleanly....\");\r\n    }\r\n    catch { }\r\n    Environment.ExitCode = 1; // TBD: this doesn\u0027t work, SCM doesn\u0027t restart service\r\n    // the application will try to terminate anyway, but try to cleanly shutdown\r\n    _lifetime.StopApplication(); // removing this line results in SCM restarting service.\r\n};\r\nnew Timer((obj) =\u003e throw new Exception(\"Unhandled exception test\"), null, TimeSpan.FromSeconds(30), TimeSpan.FromSeconds(30));\r\n````\r\nMost relevant doc I could find on subject https://learn.microsoft.com/en-us/dotnet/core/extensions/generic-host?tabs=appbuilder#host-shutdown and https://learn.microsoft.com/en-us/dotnet/fundamentals/runtime-libraries/system-appdomain-unhandledexception\r\n\r\nUsing .NET Version 8.0.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOg6Zw0g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6DpnDS",
                                           "createdAt":  "2024-07-04T11:18:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-hosting\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-04T11:18:54Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Should .NET Generic Host call IHostApplicationLifetime.StopApplication for unhandled domain exceptions?",
        "labels":  [
                       "question",
                       "area-Extensions-Hosting",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/106154",
        "createdAt":  "2024-07-28T01:52:01Z",
        "number":  106154,
        "author":  "Sombody101",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-09-11T20:39:07Z",
        "body":  "I\u0027m new to EFC, and did not know everything I needed for creating migrations. My migrations were working for a while, but I kept getting an exception every time I ran the migration command.\r\n\r\n![Exception in Powershell](https://github.com/user-attachments/assets/fbcf495c-8f85-460c-ae39-2b5fa0ffaf45)\r\n\r\nAfter adding this method (`CreateHostBuilder`), it worked with no errors.\r\nI brought this up in a C# Discord server, and they told me to create a ticket here because it should give a more specific exception and exception message rather than just `The host was aborted.`. Could a more specific exception and message be implemented to help newcomers like myself in the future?\r\n\r\nI\u0027m not sure what other information is needed for this, so feel free to ask!",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOi8CnZw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Hr_vy",
                                           "createdAt":  "2024-07-28T05:50:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "armintodev",
                                           "body":  "Please provide more information about your Codebase so we can help you.",
                                           "updatedAt":  "2024-07-28T05:50:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Hr_v3",
                                           "createdAt":  "2024-07-28T18:02:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODtUCAw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "armintodev",
                                                                               "createdAt":  "2024-07-29T05:57:11Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Sombody101",
                                           "body":  "As stated in my post, the issue with my code has been fixed.\r\n\u003e After adding this method (CreateHostBuilder), *it worked with no errors*.\r\n\r\nThe post is about the vague error message that is given when this method does not exist. Had I not looked at another application that implemented a DB, I would not have known that that was the issue.\r\n\r\nI\u0027ve gone ahead and updated the title to this post to prevent future confusion.",
                                           "updatedAt":  "2024-07-28T18:02:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6IK2ij",
                                           "createdAt":  "2024-08-12T17:21:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Presumably, the exception is from https://github.com/dotnet/runtime/blob/adb1fee95cac68b1a64561c9f414966964fee408/src/libraries/Microsoft.Extensions.HostFactoryResolver/src/HostFactoryResolver.cs#L343\r\n\r\nHowever, I\u0027m not sure who the `CreateHostBuilder()` that was not called belonged to -- is it an EFC source-generated helper that calls, for example, `Host.CreateDefaultBuilder()`?. If so, perhaps a better exception belongs there.\r\n\r\nPlease provide a functional code example with the missing call to `CreateHostBuilder()`.",
                                           "updatedAt":  "2024-08-12T17:21:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6IK68e",
                                           "createdAt":  "2024-08-12T17:31:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "@ajcvickers @AndriySvyryd I think this is an EFCore issue.  We just have the HostFactoryResolver in dotnet/runtime to share code between EFCore and ASP.NET for how they locate the pattern of code added by templates.  Seems like folks would like EFCore to surface a better error when the resolver doesn\u0027t find anything.",
                                           "updatedAt":  "2024-08-12T17:31:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6IK9lY",
                                           "createdAt":  "2024-08-12T17:37:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ajcvickers",
                                           "body":  "@davidfowl owns this code.",
                                           "updatedAt":  "2024-08-12T17:37:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6IK_Je",
                                           "createdAt":  "2024-08-12T17:41:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AndriySvyryd",
                                           "body":  "This is how it\u0027s used in EF, it shouldn\u0027t throw when the target method is not found:\r\nhttps://github.com/dotnet/efcore/blob/main/src/EFCore.Design/Design/Internal/AppServiceProviderFactory.cs#L50-L56",
                                           "updatedAt":  "2024-08-12T17:41:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Lccm-",
                                           "createdAt":  "2024-09-10T02:33:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AndriySvyryd",
                                           "body":  "Ping",
                                           "updatedAt":  "2024-09-10T02:33:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LwKdn",
                                           "createdAt":  "2024-09-11T20:38:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "buyaa-n",
                                           "body":  "Moving to future as its not a regression",
                                           "updatedAt":  "2024-09-11T20:38:33Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "Vague exception thrown when static CreateHostBuilder method cannot be found by HostFactoryResolver",
        "labels":  [
                       "area-Extensions-Hosting",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/106227",
        "createdAt":  "2024-08-10T10:14:37Z",
        "number":  106227,
        "author":  "mus65",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-01T18:09:47Z",
        "body":  "### Description\n\nThe host implementation doesn\u0027t seem to check `StartupTimeout` itself, but relies on the service implementations checking the cancellationToken.\r\n\r\nWe had a situation where this lead to a broken application state. In the reproduction example, the `ABackgroundService` is cancelled because of the startup timeout, but the application starts successfully anyway. So now the application is running without the background service.\r\n\r\nEven without the `ABackgroundService`, I wouldn\u0027t expect the application to start successfully here, because the `StartupTimeout` was 5s, but the `ASlowStartService` took 10s to start up.\r\n\r\nI realize that the try/catch in `ABackgroundService` should not be needed. We did this as a workaround for #98935. Either way I could see other applications doing this unintentionally.\n\n### Reproduction Steps\n\n```\r\nusing Microsoft.Extensions.DependencyInjection;\r\nusing Microsoft.Extensions.Hosting;\r\nusing Microsoft.Extensions.Logging;\r\n\r\nHostApplicationBuilder builder = Host.CreateApplicationBuilder();\r\nbuilder.Services.AddHostedService\u003cABackgroundService\u003e();\r\nbuilder.Services.AddHostedService\u003cASlowStartService\u003e();\r\nbuilder.Logging.AddConsole();\r\n\r\nbuilder.Services.Configure\u003cHostOptions\u003e(o =\u003e\r\n{\r\n  o.StartupTimeout = TimeSpan.FromSeconds(5);\r\n});\r\n\r\nvar host = builder.Build();\r\nawait host.RunAsync();\r\n\r\ninternal class ABackgroundService(ILogger\u003cABackgroundService\u003e logger) : BackgroundService\r\n{\r\n  protected override async Task ExecuteAsync(CancellationToken stoppingToken)\r\n  {\r\n    try\r\n    {\r\n      await Task.Delay(TimeSpan.FromMinutes(1), stoppingToken);\r\n    }\r\n    catch (OperationCanceledException)\r\n    {\r\n      logger.LogInformation(\"cancelled\");\r\n    }\r\n  }\r\n}\r\n\r\ninternal class ASlowStartService : IHostedService\r\n{\r\n  public async Task StartAsync(CancellationToken cancellationToken)\r\n  {\r\n    await Task.Delay(TimeSpan.FromSeconds(10), CancellationToken.None);\r\n  }\r\n\r\n  public Task StopAsync(CancellationToken cancellationToken) =\u003e Task.CompletedTask;\r\n}\r\n```\n\n### Expected behavior\n\nHost fails to start.\n\n### Actual behavior\n\nHost starts successfully, but BackgroundService is aborted.\r\n\r\n```\r\ninfo: ABackgroundService[0]\r\n      cancelled\r\ninfo: Microsoft.Hosting.Lifetime[0]\r\n      Application started. Press Ctrl+C to shut down.\r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nWe worked around this adding `cancellationToken.ThrowIfCancellationRequested()` in `StartedAsync`.\n\n### Configuration\n\n.NET 8.0.7\r\nWindows x64\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOiE3ICw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6H8ooC",
                                           "createdAt":  "2024-08-10T10:14:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-hosting\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-08-10T10:14:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6IKi8D",
                                           "createdAt":  "2024-08-12T16:36:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "It is a cooperative model based on CancellationToken; see [StartAsync](https://github.com/dotnet/runtime/blob/c16d5264d26b2e4b996ae18fc402d9a6dbaeffd8/src/libraries/Microsoft.Extensions.Hosting/src/Internal/Host.cs#L76-L81) and [StopAsync](https://github.com/dotnet/runtime/blob/c16d5264d26b2e4b996ae18fc402d9a6dbaeffd8/src/libraries/Microsoft.Extensions.Hosting/src/Internal/Host.cs#L221-L227) where the CancellationToken needs to be flowed.\r\n\r\nIs the intent of the sample:\r\n```cs\r\n  public async Task StartAsync(CancellationToken cancellationToken)\r\n  {\r\n    await Task.Delay(TimeSpan.FromSeconds(10), CancellationToken.None);\r\n  }\r\n```\r\nto not flow the `cancellationToken`? i.e. if changed to:\r\n```cs\r\n  public async Task StartAsync(CancellationToken cancellationToken)\r\n  {\r\n    await Task.Delay(TimeSpan.FromSeconds(10), cancellationToken);\r\n  }\r\n```\r\nthen the result is an exception in the `ASlowStartServiceStartAsync()`:\r\n```\r\ninfo: ABackgroundService[0]\r\n      cancelled\r\nfail: Microsoft.Extensions.Hosting.Internal.Host[11]\r\n      Hosting failed to start\r\n      System.Threading.Tasks.TaskCanceledException: A task was canceled.\r\n         at ASlowStartService.StartAsync(CancellationToken cancellationToken) in C:\\Users\\sharter\\source\\repos\\ConsoleApp270\\ConsoleApp270\\Program.cs:line 37\r\n```",
                                           "updatedAt":  "2024-08-12T18:10:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6IKuky",
                                           "createdAt":  "2024-08-12T17:03:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mus65",
                                           "body":  "This was intentional for the sample. In our actual problem case, we were calling a third party sync API that doesn\u0027t accept a cancellationToken.\r\n\r\nCouldn\u0027t the host call `cancellationToken.ThrowIfCancellationRequested()` after each stage?",
                                           "updatedAt":  "2024-08-12T17:03:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ISI9e",
                                           "createdAt":  "2024-08-13T14:53:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "\u003e Couldn\u0027t the host call cancellationToken.ThrowIfCancellationRequested() after each stage?\r\n\r\nIt could, and I wonder why it wasn\u0027t done that way to begin with. If we change it now, it will be a breaking change, so we\u0027d need to consider whether we need an opt-in or opt-out. Also, there\u0027s some details to be worked out:\r\n- The options to `Start\\StopConcurrently=false` option won\u0027t be covered unless they cooperate with the `cancellationToken`.\r\n- For stopping, currently the code doesn\u0027t even check the `cancellationTokenup` up-front like it does with `Start`. Not sure why.\r\n- Today we have a guarantee to call each service for stopping and then throw an `AggregateException` at the end meaning we\u0027ll likely a task cancelled exception for each service after they run (grouped into the aggregate exception) unless we want to ignore\\handle that specifically.\r\n\r\nMoving to v10 for consideration; feedback here welcomed.",
                                           "updatedAt":  "2024-08-13T15:15:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ITcgL",
                                           "createdAt":  "2024-08-13T17:48:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mus65",
                                           "body":  "\u003e It could, and I wonder why it wasn\u0027t done that way to begin with. If we change it now, it will be a breaking change, so we\u0027d need to consider whether we need an opt-in or opt-out.\r\n\r\nImho you shouldn\u0027t have to opt into this. And while this would be worth a breaking change notice, I\u0027m not sure an opt-out is even necessary. Why would you opt out of this? If this change causes a startup failure, the configured timeout was too low to begin with and could just be increased or disabled.",
                                           "updatedAt":  "2024-08-13T17:48:47Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Host: StartupTimeout not enforced for hosted services and can break application state",
        "labels":  [
                       "discussion",
                       "area-Extensions-Hosting"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/106862",
        "createdAt":  "2024-08-23T08:51:37Z",
        "number":  106862,
        "author":  "aetos382",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC6cxCw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-08-23T14:16:05Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-08-27T14:11:31Z",
        "body":  "In the current implementation, the resolution of `IHostedService` is performed before the validation of the option values by the `IStartupValidator`.\r\n\r\nhttps://github.com/dotnet/runtime/blob/08338fcaa5c9b9a8190abb99222fed12aaba956c/src/libraries/Microsoft.Extensions.Hosting/src/Internal/Host.cs#L99-L120\r\n\r\nTherefore, the constructor of the background services may receive option values that have not yet been validated and may be invalid.\r\n\r\nThe option values should be validated before the background service is instantiated.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOidjMIg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6JfDMt",
                                           "createdAt":  "2024-08-23T08:52:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-hosting\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-08-23T08:52:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JuBcn",
                                           "createdAt":  "2024-08-26T15:57:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "@steveharter can you please have a look?",
                                           "updatedAt":  "2024-08-26T15:57:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6J2MBI",
                                           "createdAt":  "2024-08-27T14:10:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "I do think that eager validation could occur earlier, but it has been this way for a while (verified on v6.0). Not sure if this will break existing cases.\r\n\r\nLazy validation will occur provided that the options are injected with `IOptions\u003cMyOptions\u003e options`, and `IOptions.Value is called`. Here\u0027s a somewhat verbose sample using the default host (see `public MyHostedService(ILogger\u003cMyHostedService\u003e logger, IOptions\u003cMyOptions\u003e options)`:\r\n```csharp\r\nusing Microsoft.Extensions.DependencyInjection;\r\nusing Microsoft.Extensions.Hosting;\r\nusing Microsoft.Extensions.Options;\r\nusing Microsoft.Extensions.Logging;\r\n\r\nnamespace ConsoleApp275\r\n{\r\n    public class Program\r\n    {\r\n        public static void Main(string[] args)\r\n        {\r\n            var host = CreateHostBuilder(args).Build();\r\n            host.Run();\r\n        }\r\n\r\n        public static IHostBuilder CreateHostBuilder(string[] args) =\u003e\r\n            Host.CreateDefaultBuilder(args)\r\n                .ConfigureServices((hostContext, services) =\u003e\r\n                {\r\n                    services.Configure\u003cMyOptions\u003e(options =\u003e\r\n                    {\r\n                        options.Option1 = \"SomeValue\";\r\n                        options.Option2 = -10;\r\n                    });\r\n                    services.AddSingleton\u003cIValidateOptions\u003cMyOptions\u003e, MyOptionsValidator\u003e();\r\n                    services.AddSingleton\u003cIStartupValidator, StartupValidator\u003e();\r\n                    services.AddHostedService\u003cMyHostedService\u003e();\r\n                })\r\n                .ConfigureLogging(logging =\u003e\r\n                {\r\n                    logging.ClearProviders();\r\n                    logging.AddConsole();\r\n                });\r\n    }\r\n\r\n\r\n    public class MyOptions\r\n    {\r\n        public string? Option1 { get; set; }\r\n        public int Option2 { get; set; }\r\n    }\r\n\r\n\r\n    public class MyOptionsValidator : IValidateOptions\u003cMyOptions\u003e\r\n    {\r\n        public ValidateOptionsResult Validate(string name, MyOptions options)\r\n        {\r\n            if (string.IsNullOrEmpty(options.Option1))\r\n            {\r\n                return ValidateOptionsResult.Fail(\"Option1 must be provided.\");\r\n            }\r\n\r\n            if (options.Option2 \u003c= 0)\r\n            {\r\n                return ValidateOptionsResult.Fail(\"Option2 must be greater than zero.\");\r\n            }\r\n\r\n            return ValidateOptionsResult.Success;\r\n        }\r\n    }\r\n\r\n    public class StartupValidator : IStartupValidator\r\n    {\r\n        private readonly IServiceProvider _serviceProvider;\r\n\r\n        public StartupValidator(IServiceProvider serviceProvider)\r\n        {\r\n            _serviceProvider = serviceProvider;\r\n        }\r\n\r\n        public void Validate()\r\n        {\r\n            var validators = _serviceProvider.GetServices\u003cIValidateOptions\u003cMyOptions\u003e\u003e();\r\n            foreach (var validator in validators)\r\n            {\r\n                var options = _serviceProvider.GetRequiredService\u003cIOptions\u003cMyOptions\u003e\u003e().Value;\r\n                var result = validator.Validate(Options.DefaultName, options);\r\n                if (result.Failed)\r\n                {\r\n                    throw new Exception(result.Failures.ToString());\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public class MyHostedService : IHostedService, IDisposable\r\n    {\r\n        private readonly ILogger\u003cMyHostedService\u003e _logger;\r\n        private Timer? _timer;\r\n        private IOptions\u003cMyOptions\u003e _options;\r\n\r\n        public MyHostedService(ILogger\u003cMyHostedService\u003e logger, IOptions\u003cMyOptions\u003e options)\r\n        {\r\n            _logger = logger;\r\n            _options = options;\r\n\r\n            if (options.Value.Option2 \u003c 0)\r\n            {\r\n                // This is not hit; options are validated when .Value is called above.\r\n                _logger.LogInformation(\"Invalid options passed here.\");\r\n            }\r\n\r\n        }\r\n\r\n        public Task StartAsync(CancellationToken cancellationToken)\r\n        {\r\n            _logger.LogInformation(\"MyHostedService is starting.\");\r\n            _timer = new Timer(DoWork, null, TimeSpan.Zero, TimeSpan.FromSeconds(5));\r\n            return Task.CompletedTask;\r\n        }\r\n\r\n        private void DoWork(object state)\r\n        {\r\n            _logger.LogInformation(\"MyHostedService is working.\");\r\n        }\r\n\r\n        public Task StopAsync(CancellationToken cancellationToken)\r\n        {\r\n            _logger.LogInformation(\"MyHostedService is stopping.\");\r\n            _timer?.Change(Timeout.Infinite, 0);\r\n            return Task.CompletedTask;\r\n        }\r\n\r\n        public void Dispose()\r\n        {\r\n            _timer?.Dispose();\r\n        }\r\n    }\r\n}\r\n```\r\n```",
                                           "updatedAt":  "2024-08-27T14:10:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6J2Mwi",
                                           "createdAt":  "2024-08-27T14:11:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Moving to Future for evaluation and additional feedback.",
                                           "updatedAt":  "2024-08-27T14:11:24Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Validation by `IStartupValidator` should be performed before initializing `IHostedService`",
        "labels":  [
                       "area-Extensions-Hosting"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/107281",
        "createdAt":  "2024-09-03T08:12:12Z",
        "number":  107281,
        "author":  "5andr0",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-09-03T19:49:11Z",
        "body":  "### Background and motivation\n\nIt would be nice to have an async root scope to use `IAsyncDisposable` services without having to create an async scope.\r\nThis could be implemented by default or with `ServiceProviderOptions` or least favourable with a new Method of IHostBuilder like BuildAsync.  \r\nAnd while we are at it, can we also get an async scope from asp.net `HttpContext.RequestServices` ? It\u0027d be helpful to async dispose connections of HttpContext services\n\n### API Proposal\n\n```csharp\r\nvoid\r\n```\r\n\n\n### API Usage\n\n```csharp\r\nvoid\r\n```\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOirfpmw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Kogsx",
                                           "createdAt":  "2024-09-03T08:12:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-hosting\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-03T08:12:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Kt-mb",
                                           "createdAt":  "2024-09-03T19:49:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Moving to future; please add current workarounds and proposed API and\\or options.",
                                           "updatedAt":  "2024-09-03T19:49:02Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[API Proposal]: Host with AsyncServiceScope Services",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Hosting"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/108435",
        "createdAt":  "2024-10-01T12:18:21Z",
        "number":  108435,
        "author":  "Balkoth",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-01T18:09:47Z",
        "body":  "### Description\r\n\r\nOver the years i was under the impression that when debugging from Visual Studio the `AppSettings.json` would be loaded from the output directory (typically bin/debug).\r\n\r\nBut when i wanted to move `AppSettings.json` to a different folder in the project, because reasons, i realized this awkward behaviour that the `ContentRootPath` by default is set to the return value of `GetCurrentDirectory()` which in terms of debugging with Visual Studio is by default the project directory and not the output directory.\r\n\r\n### Reproduction Steps\r\n\r\n- Create a new C# `Worker Service` project\r\n- Move `AppSettings.json` to `Properties` folder\r\n- Add the following to the project file:\r\n```xml\r\n\u003cItemGroup\u003e\r\n  \u003cNone Include=\"Properties\\AppSettings.json\"\u003e\r\n    \u003cCopyToOutputDirectory\u003eAlways\u003c/CopyToOutputDirectory\u003e\r\n    \u003cTargetPath\u003eAppSettings.json\u003c/TargetPath\u003e\r\n  \u003c/None\u003e\r\n\u003c/ItemGroup\u003e\r\n```\r\n- Launch the project from Visual Studio\r\n- Debug into `FileConfigurationProvider` -\u003e `Load` -\u003e `IFileInfo? file = Source.FileProvider?.GetFileInfo(Source.Path ?? string.Empty);`\r\n- Now you can see that it tries to load the `AppSettings.json` file from the project directory rather than the output directory\r\n\r\n### Expected behavior\r\n\r\nI would have expected that `ContentRootPath` is the output directory.\r\n\r\n### Actual behavior\r\n\r\n`ContentRootPath` is the project directory.\r\n\r\n### Regression?\r\n\r\nI don\u0027t think?\r\n\r\n### Known Workarounds\r\n\r\nI could get it to work with setting `ContentRootPath` to the `AppContext.BaseDirectory` but i don\u0027t know if this has any obvious side effects, especially when `PublishAot` and whatnot comes into play.\r\n\r\n`hostApplicationBuilder.Configuration.SetBasePath(AppContext.BaseDirectory)`\r\n\r\n### Configuration\r\n\r\n.NET: **8.0.402**\r\nOS:  Windows 10 22H2 19045\r\nArchitecture: AnyCPU\r\n\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOlFefxg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6OMfUY",
                                           "createdAt":  "2024-10-01T12:24:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-01T12:24:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6UV5_G",
                                           "createdAt":  "2024-11-20T14:42:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Balkoth",
                                           "body":  "Can someone jump in and have a say what is going to happen? Is it expected that debugging with Visual Studio shows this behaviour?",
                                           "updatedAt":  "2024-11-20T14:42:57Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Debugging from Visual Studio using Host.CreateDefaultBuilder sets the ContentRootPath to GetCurrentDirectory() which is not the output directory by default",
        "labels":  [
                       "area-Extensions-Hosting",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/108689",
        "createdAt":  "2024-10-08T21:39:44Z",
        "number":  108689,
        "author":  "aaronenberg-msft",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODCas3w==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-10-08T23:28:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JulianPritchard",
                                            "createdAt":  "2025-05-15T13:39:43Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-10-10T14:52:32Z",
        "body":  "### Background and motivation\r\n\r\nWhen building minimal applications, it is satisfying to setup and start a generic host using a single line with `IHostBuilder`:\r\n\r\n```csharp\r\nusing IHost host = await Host.CreateDefaultBuilder()\r\n    .ConfigureAppConfiguration(ConfigureAppConfiguration)\r\n    .ConfigureServices(ConfigureServices)\r\n    .StartAsync(cancellationToken);\r\n```\r\n\r\nWith `IHostApplicationBuilder` this can no longer be done because of the change to use property access.\r\n\r\nIt would be nice if `IHostApplicationBuilder` had some extensions offering the ability to chain calls like `IHostBuilder` does e.g. to add configuration and services to the `IServiceCollection`.\r\n\r\n### API Proposal\r\n\r\n```csharp\r\nnamespace Microsoft.Extensions.Hosting;\r\n\r\npublic static class HostingHostApplicationBuilderExtensions\r\n{\r\n    public static IHostApplicationBuilder AddAppConfiguration(this IHostApplicationBuilder hostAppBuilder, IConfiguration configuration)\r\n    { ... }\r\n    public static IHostApplicationBuilder AddServices(this IHostApplicationBuilder hostAppBuilder, IServiceCollection serviceCollection)\r\n    { ... }\r\n}\r\n\r\n```\r\n\r\n\r\n### API Usage\r\n\r\n```csharp\r\nusing IHost host = await Host.CreateApplicationBuilder()\r\n    .AddAppConfiguration(configuration)\r\n    .AddServices(serviceCollection)\r\n    .StartAsync(cancellationToken);\r\n```\r\n\r\n### Alternative Designs\r\n\r\nI understand the limitation of this API is that it does not provide `HostBuilderContext`, and I can\u0027t think of how that would be possible in this approach.\r\n\r\nWould it rather be feasible to expose an `IHostBuilder` property directly on `HostApplicationBuilder`, just as `WebApplicationBuilder` does? \r\n\r\n### Risks\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOj16iew==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6PHCVX",
                                           "createdAt":  "2024-10-08T23:28:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD1VMAg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davidfowl",
                                                                               "createdAt":  "2024-10-09T00:16:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "julealgon",
                                           "body":  "\u003e With `IHostApplicationBuilder` this can no longer be done because of the change to use property access.\r\n\u003e \r\n\u003e It would be nice if `IHostApplicationBuilder` had some extensions offering the ability to chain calls like `IHostBuilder` does e.g. to add configuration and services to the `IServiceCollection`.\r\n\r\nI\u0027m pretty sure the switch into the property-based approach was a fully _intentional_ change, so moving \"back\" to the method chaining approach wouldn\u0027t make sense.\r\n\r\n@davidfowl can probably link some articles where this is discussed. I remember coming across a few of them, including this question that I raised some time ago which might also provide a bit of context:\r\n- https://github.com/dotnet/runtime/discussions/81090\r\n\r\nCheck David\u0027s answer there.",
                                           "updatedAt":  "2024-10-08T23:28:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PQ0AZ",
                                           "createdAt":  "2024-10-09T22:41:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD_wpvw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "badbort",
                                                                               "createdAt":  "2024-12-20T08:31:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "aaronenberg-msft",
                                           "body":  "I understand it was _intentional_, I don\u0027t think it happened by accident. \n\nI would like to make the case that a builder class that once had the ability for one-line initialization, but now doesn\u0027t in its next iteration, is a step backward in the API\u0027s progression because it is inconsistent with other Builder types in .NET, e.g. extensions to `IConfigurationBuilder` which most all return back the same instance for chaining.",
                                           "updatedAt":  "2024-10-09T22:44:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PXn3y",
                                           "createdAt":  "2024-10-10T14:50:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "\u003e I would like to make the case that a builder class that once had the ability for one-line initialization, but now doesn\u0027t in its next iteration, is a step backward in the API\u0027s progression because it is inconsistent with other Builder types in .NET, e.g. extensions to `IConfigurationBuilder` which most all return back the same instance for chaining.\n\nThat\u0027s fair, but I wouldn\u0027t consider it a \"step backward\" necessarily, it\u0027s just 2 different approaches that have their pros and cons. One is a builder, the other is a fluent builder.\n\nThe way I see it, I\u0027ve gotten used to the property-based approach of the modern API and I ended up preferring it over the previous one because it tends to lead to a cleaner separation of \"concerns\" if you will since you have dedicated \"child\" builders for logging, metrics, configuration, services, etc all neatly centralized in their properties.\n\nNow... to be fair, I still think this is all quite subjective. I can see someone preferring the pure callback-based approach with chained methods. I just think you\u0027ll have a hard time getting the .NET team to either reverse course on that decision, or provide an alternative fluent API for the existing API since that could add unnecessary confusion to consumers who would start to question which one they should use.\n\nYou might have better luck with defining this in some sort of external package like an `...Extensions.Hosting.Fluent` NuGet that is then opt-in for those who prefer the fluent+callback syntax.",
                                           "updatedAt":  "2024-10-10T14:50:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PXqJ7",
                                           "createdAt":  "2024-10-10T14:52:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD15lvg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-10-10T15:21:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MattParkerDev",
                                                                               "createdAt":  "2024-10-13T16:53:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Yea we’re not going bring back this pattern, IHostBuilder already does this.",
                                           "updatedAt":  "2024-10-10T14:52:32Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[API Proposal]: IHostApplicationBuilder chaining like IHostBuilder",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Hosting",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/110988",
        "createdAt":  "2024-12-30T01:38:56Z",
        "number":  110988,
        "author":  "v-wenyuxu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-20T03:03:36Z",
        "body":  "**Failed in:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=1052116\u0026view=results\n\n**Failed tests:**\n```\nnet10.0-windows-Release-x64-fullpgo_methodprofiling-Windows.10.Amd64.Open\n    - Microsoft.Extensions.Hosting.Internal.HostTests.HostLifetimeOnStartedCanBeCancelled\n```\n\n**Error message:**\n```\n Assert.True() Failure\nExpected: True\nActual:   False\n```\n\n**Stack trace:**\n```\n   at Microsoft.Extensions.Hosting.Internal.HostTests.HostLifetimeOnStartedCanBeCancelled() in /_/src/libraries/Microsoft.Extensions.Hosting/tests/UnitTests/Internal/HostTests.cs:line 488\n--- End of stack trace from previous location ---\n```\n\u003c!-- Error message template  --\u003e\n### Known Issue Error Message\n\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\n\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\n\n```json\n{\n  \"ErrorMessage\": \"Microsoft.Extensions.Hosting.Internal.HostTests.HostLifetimeOnStartedCanBeCancelled [FAIL]\",\n  \"ErrorPattern\": \"\",\n  \"BuildRetry\": false,\n  \"ExcludeConsoleLog\": false\n}\n```\n\n\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=1052116\r\n**Error message validated:** `[Microsoft.Extensions.Hosting.Internal.HostTests.HostLifetimeOnStartedCanBeCancelled [FAIL]`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 5/28/2025 9:10:37 AM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|0|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOs6DJjw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Y4eLU",
                                           "createdAt":  "2024-12-30T01:39:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-hosting\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-12-30T01:39:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Y6-4K",
                                           "createdAt":  "2024-12-30T15:06:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Test code hasn\u0027t changed since it was added 6 years ago: https://github.com/dotnet/runtime/blame/9e28706dbc252e27174dce1a3b8f69c8ecc912b7/src/libraries/Microsoft.Extensions.Hosting/tests/UnitTests/Internal/HostTests.cs#L488\n\nIt is waiting for 5 seconds until `lifetimeStart` is signaled.\n```\nAssert.True(lifetimeStart.WaitOne(TimeSpan.FromSeconds(5)));\n```\n\nHowever that is done on a Task via `Task.Run(() =\u003e host.StartAsync());` so that may not always be reliable.\n\nWill wait to see if there are any other hits.\n\nPossible PGO issue?\n",
                                           "updatedAt":  "2024-12-30T15:06:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6zoMmP",
                                           "createdAt":  "2025-06-27T16:33:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffschwMSFT",
                                           "body":  "removing blocking-clean-ci as it has not failed in 30 days\n\n24-Hour Hit Count | 7-Day Hit Count | 1-Month Count\n-- | -- | --\n0 | 0 | 0\n",
                                           "updatedAt":  "2025-06-27T16:33:58Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Test failure: Microsoft.Extensions.Hosting.Internal.HostTests.HostLifetimeOnStartedCanBeCancelled",
        "labels":  [
                       "os-windows",
                       "arch-x64",
                       "area-Extensions-Hosting",
                       "Known Build Error"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/111013",
        "createdAt":  "2024-12-31T15:10:55Z",
        "number":  111013,
        "author":  "kmcclellan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-01T18:09:49Z",
        "body":  "### Description\n\nIf the application is stopped while one or more hosted services are still starting, a misleading `TaskCanceledException` is logged and bubbles up to `Program`. This is often due to an exception thrown in `BackgroundService`, in which case it obscures the real problem.\n\n### Reproduction Steps\n\n```csharp\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\n\nvar builder = new HostApplicationBuilder();\nbuilder.Services.AddHostedService\u003cServiceThatStops\u003e();\nbuilder.Services.AddHostedService\u003cServiceThatWaits\u003e();\n\nusing var host = builder.Build();\n\ntry\n{\n    host.Run();\n}\ncatch (Exception exception)\n{\n    Console.WriteLine($\"\u0027Run()\u0027 threw exception: {exception}\");\n}\n\nclass ServiceThatStops : BackgroundService\n{\n    protected override async Task ExecuteAsync(CancellationToken stoppingToken)\n    {\n        await Task.Delay(10, stoppingToken);\n        throw new Exception(\"My environment is bad! This is the exception I want to see.\");\n    }\n}\n\nclass ServiceThatWaits : IHostedService\n{\n    public Task StartAsync(CancellationToken cancellationToken)\n    {\n        return Task.Delay(100, cancellationToken);\n    }\n\n    public Task StopAsync(CancellationToken cancellationToken)\n    {\n        return Task.CompletedTask;\n    }\n}\n```\n\n### Expected behavior\n\nOnly the triggering exception should be logged. Cancellation of the remaining service startup should be handled by the host without throwing or logging an error.\n\n### Actual behavior\n\n```\nfail: Microsoft.Extensions.Hosting.Internal.Host[9]\n      BackgroundService failed\n      System.Exception: My environment is bad! This is the exception I want to see.\n         at ServiceThatStops.ExecuteAsync(CancellationToken stoppingToken) in C:\\Users\\KMcClellan\\Desktop\\HelloHosting\\Program.cs:line 22\n         at Microsoft.Extensions.Hosting.Internal.Host.TryExecuteBackgroundServiceAsync(BackgroundService backgroundService)\ncrit: Microsoft.Extensions.Hosting.Internal.Host[10]\n      The HostOptions.BackgroundServiceExceptionBehavior is configured to StopHost. A BackgroundService has thrown an unhandled exception, and the IHost instance is stopping. To avoid this behavior, configure this to Ignore; however the BackgroundService will not be restarted.\n      System.Exception: My environment is bad! This is the exception I want to see.\n         at ServiceThatStops.ExecuteAsync(CancellationToken stoppingToken) in C:\\Users\\KMcClellan\\Desktop\\HelloHosting\\Program.cs:line 22\n         at Microsoft.Extensions.Hosting.Internal.Host.TryExecuteBackgroundServiceAsync(BackgroundService backgroundService)\ninfo: Microsoft.Hosting.Lifetime[0]\n      Application is shutting down...\nfail: Microsoft.Extensions.Hosting.Internal.Host[11]\n      Hosting failed to start\n      System.Threading.Tasks.TaskCanceledException: A task was canceled.\n         at Microsoft.Extensions.Hosting.Internal.Host.\u003cStartAsync\u003eb__14_1(IHostedService service, CancellationToken token)\n         at Microsoft.Extensions.Hosting.Internal.Host.ForeachService[T](IEnumerable`1 services, CancellationToken token, Boolean concurrent, Boolean abortOnFirstException, List`1 exceptions, Func`3 operation)\n\u0027Run()\u0027 threw exception: System.Threading.Tasks.TaskCanceledException: A task was canceled.\n   at Microsoft.Extensions.Hosting.Internal.Host.\u003cStartAsync\u003eb__14_1(IHostedService service, CancellationToken token)\n   at Microsoft.Extensions.Hosting.Internal.Host.ForeachService[T](IEnumerable`1 services, CancellationToken token, Boolean concurrent, Boolean abortOnFirstException, List`1 exceptions, Func`3 operation)\n   at Microsoft.Extensions.Hosting.Internal.Host.\u003cStartAsync\u003eg__LogAndRethrow|14_3(\u003c\u003ec__DisplayClass14_0\u0026)\n   at Microsoft.Extensions.Hosting.Internal.Host.StartAsync(CancellationToken cancellationToken)\n   at Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.RunAsync(IHost host, CancellationToken token)\n   at Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.RunAsync(IHost host, CancellationToken token)\n   at Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.Run(IHost host)\n   at Program.\u003cMain\u003e$(String[] args) in C:\\Users\\KMcClellan\\Desktop\\HelloHosting\\Program.cs:line 10\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nCatch `OperationCanceledException` in any implementation of `StartAsync(...)` instead of throwing to acknowledge.\n\n### Configuration\n\n* .NET runtime 9.0\n* .NET SDK 9.0.101\n* Microsoft.Extensions.Hosting 9.0.0\n\n### Other information\n\nSimilar to #98935.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmutavA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6aCRkQ",
                                           "createdAt":  "2025-01-10T21:28:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEB9F5A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "kmcclellan",
                                                                               "createdAt":  "2025-01-10T22:02:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "steveharter",
                                           "body":  "In the repro, there are two `HostedServices` instances and they share a cancellation token to ensure they are cancelled together. They also have a guarantee that they all have a chance to start and thus that causes `TaskCancelledException` across the other threads\\services.\n\nSince the sync portion of each service is run sequentially before they are all awaited via Task.Run(), any validation logic before an `await` is run and should get the result you are looking for. i.e. in the repro, don\u0027t have the `await Task.Delay(10, stoppingToken)` before the validation logic.\n\n\nHowever, a likely better alternative is to use `IStartupValidator` service which runs before Start():\n```cs\n...\nservices.AddSingleton\u003cIStartupValidator, ValidationService\u003e();\n...\n\nclass ValidationService : IStartupValidator\n{\n    public void Validate()\n    {\n        throw new Exception(\"My environment is bad! This is the exception I want to see.\");\n    }\n}\n```\n\nor the newer `IHostedLifecycleService.StartingAsync` which can be implemented on the service:\n\n```cs\nclass ServiceThatStops : BackgroundService, IHostedLifecycleService\n{\n...\n    public Task StartingAsync(CancellationToken cancellationToken) =\u003e throw new Exception(\"My environment is bad!!!!!!!!!!!!!!! This is the exception I want to see.\");\n    public Task StartedAsync(CancellationToken cancellationToken) =\u003e Task.CompletedTask;\n    public Task StoppedAsync(CancellationToken cancellationToken) =\u003e Task.CompletedTask;\n    public Task StoppingAsync(CancellationToken cancellationToken) =\u003e Task.CompletedTask;\n```",
                                           "updatedAt":  "2025-01-10T21:52:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6aC-20",
                                           "createdAt":  "2025-01-10T22:10:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kmcclellan",
                                           "body":  "Sure, throwing before the `await` does not reproduce the issue. But it\u0027s not the case that all exceptions will be thrown in the synchronous section of the implementation. In my case, it is a failed HTTP response on startup that indicates the bad environment.\n\nYou can\u0027t convince me that throwing `TaskCanceledException` from `IHost.Run()` with no cancellation token passed is correct behavior.",
                                           "updatedAt":  "2025-01-10T22:10:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6aO63c",
                                           "createdAt":  "2025-01-13T16:31:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "\u003e In my case, it is a failed HTTP response on startup that indicates the bad environment.\n\nThe `TaskCanceledException` is actually from `ServiceThatWaits.StartAsync()` when it calls `Task.Delay()` which throws here due to the shared cancellation token: https://github.com/dotnet/runtime/blob/c9f0d049340a2ade9fe469c0037cf47ad19bad99/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/TaskAwaiter.cs#L146\n\nChange `StartAsync()` to this to see that you can have a graceful shutdown without `TaskCanceledException`:\n```cs\n    public async Task StartAsync(CancellationToken cancellationToken)\n    {\n        while (cancellationToken.IsCancellationRequested == false)\n        {\n        }\n    }\n```\n",
                                           "updatedAt":  "2025-01-13T16:31:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ab9M6",
                                           "createdAt":  "2025-01-14T20:15:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kmcclellan",
                                           "body":  "\n\u003e The `TaskCanceledException` is actually from `ServiceThatWaits.StartAsync()` when it calls `Task.Delay()` which throws here due to the shared cancellation token:\n\nYes, I\u0027m aware. Throwing `TaskCanceledException` (or any `OperationCanceledException`) in a method that accepts a cancellation token is known as [\"acknowledging\" cancellation](https://learn.microsoft.com/en-us/dotnet/standard/parallel-programming/task-cancellation). This is what implementers of `StartAsync(...)` _should_ do if the token is triggered and I am not done with my startup work. The host should not log this as an error, nor allow the exception to bubble up to `Program` (unless `Program` passed a cancellation token - not the case in my repro).\n\nAgain, this is very similar to https://github.com/dotnet/runtime/issues/98935, where it\u0027s granted that `BackgroundService.ExecuteAsync(...)` should be able to acknowledge cancellation without this representing an error condition. The same should be true for other members and other types of hosted service.",
                                           "updatedAt":  "2025-01-14T20:15:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6an4AT",
                                           "createdAt":  "2025-01-15T23:29:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "\u003e Again, this is very similar to https://github.com/dotnet/runtime/issues/98935, where it\u0027s granted that BackgroundService.ExecuteAsync(...) should be able to acknowledge cancellation without this representing an error condition. The same should be true for other members and other types of hosted service.\n\nThe difference is that both https://github.com/dotnet/runtime/issues/98935 and the original https://github.com/dotnet/runtime/issues/56032 have a single hosted service.\n\nTo not throw TCE for other hosted services when a background service is still starting (which is itself also a hosted service) could be considered a breaking change.\n\nAlso, since there can be more than one background service we would have to define the rules around that such as \"if any background service fails during startup, then ignore TCE for all other hosted services including other background services\". I believe this can be done simply by checking if the host is shutting down already like the other two issues linked above.\n\n\u003e You can\u0027t convince me that throwing TaskCanceledException from IHost.Run() with no cancellation token passed is correct behavior.\n\nIt should act the same with or without a specified cancellation token since one is created if not passed to `host.RunAsync()`. In general, and as mentioned before, the shared cancellation token is created in order to support stopping all threads\\hosted services in a timely manner:\nhttps://github.com/dotnet/runtime/blob/4f16361cc0748eed1dce3f762d17cfd1b5fc07d1/src/libraries/Microsoft.Extensions.Hosting/src/Internal/Host.cs#L76\n\nSo the TCE exception will still occur, but it can be ignored. I put up a prototype at https://github.com/steveharter/runtime/tree/Issue-98935 to do that.\n\n@eerhardt @halter73 any thoughts here?",
                                           "updatedAt":  "2025-01-15T23:29:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6a61q8",
                                           "createdAt":  "2025-01-17T20:11:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kmcclellan",
                                           "body":  "We still seem to be talking past each other :/ To be clear, the host is correct to trigger cancellation for all services if any of them throws an exception. What is not correct is the logging of acknowledgement TCEs as errors and allowing them to bubble up higher in the call stack than where the token source is created.\n\nGranted, this is a fairly minor issue. But fairly often someone complains to me that an app is crashing and sends me the exception details for the TCE, and I have to explain to this bug to them and that they need to look for the actual error earlier in the logs.",
                                           "updatedAt":  "2025-01-17T20:11:17Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "`Microsoft.Extensions.Hosting`: Application stop throws exception if host is still starting",
        "labels":  [
                       "enhancement",
                       "area-Extensions-Hosting"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/112327",
        "createdAt":  "2025-02-10T02:19:13Z",
        "number":  112327,
        "author":  "v-wenyuxu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-04-28T01:20:39Z",
        "body":  "**Failed in:** [runtime-coreclr libraries-jitstress2-jitstressregs 20250208.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=945290\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=25096990\u0026resultId=114869\u0026paneView=debug)\n\n**Failed tests:**\n```\nnet10.0-windows-Release-arm64-jitstress2_jitstressregs4-Windows.11.Arm64.Open\n    - Microsoft.Extensions.Hosting.WindowsServiceLifetimeTests.ServiceCanStopItself\n```\n\n**Error message:**\n```\n Microsoft.DotNet.RemoteExecutor.RemoteExecutionException : Exit code was 0 but it should have been 42\n```\n\n**Stack trace:**\n```\n   at Microsoft.DotNet.RemoteExecutor.RemoteInvokeHandle.Dispose(Boolean disposing) in /_/src/Microsoft.DotNet.RemoteExecutor/src/RemoteInvokeHandle.cs:line 242\n   at Microsoft.Extensions.Hosting.WindowsServiceTester.Dispose(Boolean disposing) in /_/src/libraries/Microsoft.Extensions.Hosting.WindowsServices/tests/WindowsServiceTester.cs:line 147\n   at System.ComponentModel.Component.Dispose() in /_/src/libraries/System.ComponentModel.Primitives/src/System/ComponentModel/Component.cs:line 73\n   at Microsoft.Extensions.Hosting.WindowsServiceLifetimeTests.ServiceCanStopItself() in /_/src/libraries/Microsoft.Extensions.Hosting.WindowsServices/tests/WindowsServiceLifetimeTests.cs:line 179\n   at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args) in /_/src/coreclr/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.CoreCLR.cs:line 36\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOqOfjFw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6dwprg",
                                           "createdAt":  "2025-02-10T02:19:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-hosting\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-02-10T02:19:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6jtnHO",
                                           "createdAt":  "2025-03-24T01:19:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-jitstress2-jitstressregs 20250322.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=989820\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=26417098\u0026resultId=106481\u0026paneView=debug)\n\n**Failed tests:**\n```\nnet10.0-windows-Release-arm64-jitstress2_jitstressregs1-Windows.11.Arm64.Open\n    - Microsoft.Extensions.Hosting.WindowsServiceLifetimeTests.CancelStopAsync\n```\n\n**Error message:**\n```\n Microsoft.DotNet.RemoteExecutor.RemoteExecutionException : Exit code was 3 but it should have been 42\n```\n\n**Stack trace:**\n```\n   at Microsoft.DotNet.RemoteExecutor.RemoteInvokeHandle.Dispose(Boolean disposing) in /_/src/Microsoft.DotNet.RemoteExecutor/src/RemoteInvokeHandle.cs:line 242\n   at Microsoft.Extensions.Hosting.WindowsServiceTester.Dispose(Boolean disposing) in /_/src/libraries/Microsoft.Extensions.Hosting.WindowsServices/tests/WindowsServiceTester.cs:line 147\n   at System.ComponentModel.Component.Dispose() in /_/src/libraries/System.ComponentModel.Primitives/src/System/ComponentModel/Component.cs:line 73\n   at Microsoft.Extensions.Hosting.WindowsServiceLifetimeTests.CancelStopAsync() in /_/src/libraries/Microsoft.Extensions.Hosting.WindowsServices/tests/WindowsServiceLifetimeTests.cs:line 130\n   at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args) in /_/src/coreclr/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.CoreCLR.cs:line 36\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\n```",
                                           "updatedAt":  "2025-03-24T01:19:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6o3sM5",
                                           "createdAt":  "2025-04-27T05:32:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-jitstress2-jitstressregs 20250426.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1027335\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=27551732\u0026resultId=141950\u0026paneView=debug)\n\n**Failed tests:**\n```\nnet10.0-windows-Release-arm64-jitstress2_jitstressregs0x1000-Windows.11.Arm64.Open\n    - Microsoft.Extensions.Hosting.WindowsServiceLifetimeTests.ServiceCanStopItself\n```\n\n**Error message:**\n```\n Microsoft.DotNet.RemoteExecutor.RemoteExecutionException : Exit code was 0 but it should have been 42\n```\n\n**Stack trace:**\n```\n   at Microsoft.DotNet.RemoteExecutor.RemoteInvokeHandle.Dispose(Boolean disposing) in /_/src/arcade/src/Microsoft.DotNet.RemoteExecutor/src/RemoteInvokeHandle.cs:line 242\n   at Microsoft.Extensions.Hosting.WindowsServiceTester.Dispose(Boolean disposing) in /_/src/libraries/Microsoft.Extensions.Hosting.WindowsServices/tests/WindowsServiceTester.cs:line 147\n   at System.ComponentModel.Component.Dispose() in /_/src/libraries/System.ComponentModel.Primitives/src/System/ComponentModel/Component.cs:line 73\n   at Microsoft.Extensions.Hosting.WindowsServiceLifetimeTests.ServiceCanStopItself() in /_/src/libraries/Microsoft.Extensions.Hosting.WindowsServices/tests/WindowsServiceLifetimeTests.cs:line 179\n   at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args) in /_/src/coreclr/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.CoreCLR.cs:line 36\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\n```",
                                           "updatedAt":  "2025-04-27T05:32:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6o5-MX",
                                           "createdAt":  "2025-04-28T01:20:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-jitstressregs 20250427.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1027703\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=27565770\u0026resultId=105281\u0026paneView=debug)\n\n**Failed tests:**\n```\nnet10.0-windows-Release-arm64-jitstressregs0x2000-Windows.11.Arm64.Open\n    - Microsoft.Extensions.Hosting.WindowsServiceLifetimeTests.ServiceCanStopItself\n```\n\n**Error message:**\n```\n Microsoft.DotNet.RemoteExecutor.RemoteExecutionException : Exit code was 0 but it should have been 42\n```\n\n**Stack trace:**\n```\n   at Microsoft.DotNet.RemoteExecutor.RemoteInvokeHandle.Dispose(Boolean disposing) in /_/src/arcade/src/Microsoft.DotNet.RemoteExecutor/src/RemoteInvokeHandle.cs:line 242\n   at Microsoft.Extensions.Hosting.WindowsServiceTester.Dispose(Boolean disposing) in /_/src/libraries/Microsoft.Extensions.Hosting.WindowsServices/tests/WindowsServiceTester.cs:line 147\n   at System.ComponentModel.Component.Dispose() in /_/src/libraries/System.ComponentModel.Primitives/src/System/ComponentModel/Component.cs:line 73\n   at Microsoft.Extensions.Hosting.WindowsServiceLifetimeTests.ServiceCanStopItself() in /_/src/libraries/Microsoft.Extensions.Hosting.WindowsServices/tests/WindowsServiceLifetimeTests.cs:line 179\n   at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args) in /_/src/coreclr/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.CoreCLR.cs:line 36\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\n```",
                                           "updatedAt":  "2025-04-28T01:20:38Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Test failure: Microsoft.Extensions.Hosting.WindowsServiceLifetimeTests.ServiceCanStopItself",
        "labels":  [
                       "arch-arm64",
                       "os-windows",
                       "JitStress",
                       "blocking-clean-ci-optional",
                       "area-Extensions-Hosting"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/113410",
        "createdAt":  "2025-03-12T05:50:44Z",
        "number":  113410,
        "author":  "MrSmoke",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-01T18:09:50Z",
        "body":  "### Background and motivation\n\n`IHostEnvironment` contains `ApplicationName` which defines the name of the application. Including the version alongside the name would allow libraries to have a standardised way to access the application version.\n\n\n\n### API Proposal\n\n```diff\nnamespace Microsoft.Extensions.Hosting;\n\npublic interface IHostEnvironment\n{\n+    /// \u003csummary\u003e\n+    /// Gets or sets the version of the application. This property is automatically set by the host to the assembly containing\n+    /// the application entry point.\n+    /// \u003c/summary\u003e\n+    public string? ApplicationVersion { get; set; }\n}\n```\n\nLike `ApplicationName`, this property should automatically set by the host to the assembly containing the application entry point.\n\nSince not all applications have a version information defined, the property should be nullable and return null when no version set in the assembly (which matches `System.Diagnostics.FileVersionInfo`).\n\n### API Usage\n\n#### OpenTelemetry\nWhen setting up OpenTelemetry, you could use the `IHostEnvironment` as follows:\n\n```csharp\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddOpenTelemetry().ConfigureResource(b =\u003e\n{\n    b.AddService(serviceName: builder.Environment.ApplicationName, serviceVersion: builder.Environment.ApplicationVersion);\n});\n```\n\nor if supported directly in OpenTelemetry:\n\n```csharp\nbuilder.Services.AddOpenTelemetry().ConfigureResource(b =\u003e\n{\n    b.AddService(builder.Environment);\n});\n```\n\n#### Logging\n\nA lot of my applications use Serilog with the following enricher to provide the version and name of the application:\n\n```csharp\npublic class ApplicationDetailsEnricher(string? applicationName, string? applicationVersion) : ILogEventEnricher\n{\n    public void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory)\n    {\n        logEvent.AddOrUpdateProperty(propertyFactory.CreateProperty(\"ApplicationName\", applicationName));\n        logEvent.AddOrUpdateProperty(propertyFactory.CreateProperty(\"ApplicationVersion\", applicationVersion));\n    }\n}\n\npublic static class EnvironmentLoggerConfigurationExtensions\n{\n    public static LoggerConfiguration WithApplicationDetails(\n        this LoggerEnrichmentConfiguration enrichmentConfiguration, Assembly assembly)\n    {\n        var versionInfo = FileVersionInfo.GetVersionInfo(assembly.Location);\n        var enricher = new ApplicationDetailsEnricher(versionInfo.FileName, versionInfo.FileVersion);\n\n        return enrichmentConfiguration.With(enricher);\n    }\n}\n\nbuilder.Host.UseSerilog((context, loggerConfiguration) =\u003e\n{\n    loggerConfiguration\n        .Enrich.WithApplicationDetails(typeof(Program).Assembly)\n        .Enrich.WithMachineName();\n});\n```\n\nwhich could be simplified to:\n\n```csharp\npublic static class EnvironmentLoggerConfigurationExtensions\n{\n    public static LoggerConfiguration WithHostEnvironment(\n        this LoggerEnrichmentConfiguration enrichmentConfiguration, IHostEnvironment environment)\n    {\n        var enricher = new ApplicationDetailsEnricher(environment.ApplicationName, environment.ApplicationVersion);\n        return enrichmentConfiguration.With(enricher);\n    }\n}\n\nbuilder.Host.UseSerilog((context, loggerConfiguration) =\u003e\n{\n    loggerConfiguration\n        .Enrich.WithHostEnvironment(builder.Environment)\n        .Enrich.WithMachineName();\n});\n```\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOor_0gQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6h8YaT",
                                           "createdAt":  "2025-03-12T07:54:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEJlImA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2025-03-12T14:18:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "There is [Microsoft.Extensions.AmbientMetadata.ApplicationMetadata.BuildVersion](https://learn.microsoft.com/dotnet/api/microsoft.extensions.ambientmetadata.applicationmetadata.buildversion?view=net-8.0-pp).  The sibling properties ApplicationMetadata.ApplicationName and ApplicationMetadata.EnvironmentName can be initialized with values from IHostEnvironment, by calling [ApplicationMetadataHostBuilderExtensions.UseApplicationMetadata](https://learn.microsoft.com/dotnet/api/microsoft.extensions.hosting.applicationmetadatahostbuilderextensions.useapplicationmetadata?view=net-8.0-pp), but AFAICS there is no code for initializing ApplicationMetadata.BuildVersion with data from assembly attributes.",
                                           "updatedAt":  "2025-03-12T07:54:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6iAk3e",
                                           "createdAt":  "2025-03-12T14:20:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "Related:\n- https://github.com/open-telemetry/opentelemetry-dotnet/issues/2781#issuecomment-1948609846",
                                           "updatedAt":  "2025-03-12T14:20:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6iv_SB",
                                           "createdAt":  "2025-03-17T18:33:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "We normally don\u0027t add new properties to interfaces, which is only possible somewhat recently due to DIM\\Default Interface Methods support. Not saying that is a bad idea, just that that we haven\u0027t been using that yet for hosting AFAIK.\n\nA `string` for a version is normally not a good way for standardization unless the format is enforced some way. For example, doing simple \u003e or \u003c may not work as expected (e.g. \"11.1\" \u003c \"3\") plus there may be \"beta\", \"rtm\" etc in the name. Perhaps use System.Version, AssemblyVersion or AssemblyFileVersion?\n\nMoving to future until we can get a more crisp idea of what we need here.",
                                           "updatedAt":  "2025-03-17T18:33:02Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[API Proposal]: Add ApplicationVersion to IHostEnvironment",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Hosting"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/114505",
        "createdAt":  "2025-04-10T20:21:36Z",
        "number":  114505,
        "author":  "julealgon",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T10:56:38Z",
        "body":  "### Description\n\nWhen creating an application using `Host.CreateApplicationBuilder`, customizing the `ApplicationName` property on the host builder settings causes the User Secrets configuration provider to not be added to the application, and thus secrets defined in the secrets file to be completely ignored.\n\n\n\n\n### Reproduction Steps\n\n```cs\nHostApplicationBuilderSettings hostSettings = new() { ApplicationName = \"something\" };\nvar builder = Host.CreateApplicationBuilder(hostSettings);\n```\n\n`builder.Configuration` ends up without the User Secrets configuration provider.\n\n### Expected behavior\n\nI would expect the default User Secrets provider to still be added regardless of customizations done to the `ApplicationName` on the host.\n\n### Actual behavior\n\nThe resulting builder ends up without the User Secrets provider added to it.\n\n### Regression?\n\nUnsure. We observed this during a migration from NET472 where we switched from `app.config` to `appsettings.json` and secrets, and we were already using v9 packages at that point.\n\n### Known Workarounds\n\nExplicitly adding the config source by calling \n\n```cs\nbuilder.Configuration.AddUserSecrets\u003cProgram\u003e();\n```\n\nOr similar.\n\n### Configuration\n\nTarget Framework: .NET8\nMicrosoft.Extensions.Hosting v9.0.3\n\n### Other information\n\nAfter spending some time investigating it, I saw that the internal logic used to add the provider directly depends on the `ApplicationName` value matching the assembly name:\n\nhttps://github.com/dotnet/runtime/blob/2d270da4a14d2d58146ef10c618524e6092b426f/src/libraries/Microsoft.Extensions.Hosting/src/HostingHostBuilderExtensions.cs#L244-L255\n\nWe can\u0027t drop our `ApplicationName` customization as we use that for multiple purposes. I\u0027m just baffled by this coupling, and by how silent the behavior is.\n\nIsn\u0027t there a better way to go about that logic in a way that doesn\u0027t depend on the `host.ApplicationName` property? Otherwise, this feels very clunky to me: the framework exposes a setable value that then breaks the default behavior of the host builder.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOp1cfkg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6mmXeO",
                                           "createdAt":  "2025-04-10T20:22:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-10T20:22:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mnyvo",
                                           "createdAt":  "2025-04-10T23:58:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-hosting\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-10T23:58:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mqvwg",
                                           "createdAt":  "2025-04-11T08:34:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEN5sRw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ericstj",
                                                                               "createdAt":  "2025-04-11T22:23:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "I think the least breaking fix would be to make HostingHostBuilderExtensions.ApplyDefaultAppConfiguration try Assembly.GetEntryAssembly() in the FileNotFoundException case.  This would keep the behaviour unchanged in the scenario where the entry assembly (a test host perhaps) loads a separate assembly that has the UserSecretsIdAttribute, and that assembly then configures hosting and stores its own name as IHostEnvironment.ApplicationName.",
                                           "updatedAt":  "2025-04-11T08:38:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ms4xC",
                                           "createdAt":  "2025-04-11T12:31:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "@KalleOlaviNiemitalo is there a reason why the builder itself can\u0027t just capture the calling assembly and assign it as \"the host assembly\" for operations like this that happen later on?\n\nI understand why the code doesn\u0027t directly use something like `Assembly.GetEntryAssembly`, because there are some flows where the entry assembly can be different from the assembly where the host was defined (like you said, in testing, or for example when running Swashbuckle to grab the OpenApi spec etc).\n\nBut can\u0027t we trust that the _caller_ of the host building methods is the assembly that should represent the host? Surely that\u0027s always going to be from the main `Program` class which is part of the assembly we want to get the information from? Wouldn\u0027t this even work in scenarios like hosted Azure Functions?",
                                           "updatedAt":  "2025-04-11T12:32:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ms_ZB",
                                           "createdAt":  "2025-04-11T12:43:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEN2phg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2025-04-11T14:47:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "No you cannot trust that.  System.CommandLine.Hosting uses host building API and is not the application assembly\n\n\u003chttps://github.com/dotnet/command-line-api/blob/e9b0511d7f1128e2bc3be7a658a2a4ea977e602d/src/System.CommandLine.Hosting/HostingAction.cs#L49-L50\u003e\n\nand if such code exists there, then I think it likely that other parties are doing similar things.",
                                           "updatedAt":  "2025-04-11T12:43:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mx_jZ",
                                           "createdAt":  "2025-04-11T22:35:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "@KalleOlaviNiemitalo\u0027s suggestion makes sense - fallback to some other convention for host name, or add some other explicit API to represent this name.  I guess the assembly should already be loaded and have `UserSecretsIdAttribute` so it could look at even more assemblies for this.\n\n@halter73 what are your thoughts here - looks like you might have added this in https://github.com/dotnet/runtime/pull/65109\n\nI guess if this doesn\u0027t work you have a workaround to register the assembly for UserSecrets yourself.  Looks like this was only a \"best effort\" to locate what might be the entry assembly.",
                                           "updatedAt":  "2025-04-11T22:35:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6nVjOm",
                                           "createdAt":  "2025-04-15T20:40:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEOcdiw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2025-04-15T20:45:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "gfoidl",
                                           "body":  "The issue here is similar to https://github.com/dotnet/aspnetcore/issues/52152 and some (historic) background is given in the comments of https://github.com/dotnet/aspnetcore/pull/52305 (and sorry that I didn\u0027t have the time to continue on that)",
                                           "updatedAt":  "2025-04-15T20:40:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6nVq6Q",
                                           "createdAt":  "2025-04-15T20:52:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "Thanks for sharing that @gfoidl . It didn\u0027t occur to me to search for this in the old API as well under aspnetcore.\n\nApparently, the team was in favor of introducing a separate property to control the assembly name and then use that to load secrets from. I quite like that idea. That would definitely work for our use case as well.\n\nAny chance this could be tackled for upcoming releases/prior to .NET10 timeframe?",
                                           "updatedAt":  "2025-04-15T20:52:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6nVx-S",
                                           "createdAt":  "2025-04-15T21:04:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEOcr3Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2025-04-15T21:12:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "gfoidl",
                                           "body":  "\u003e Any chance this could be tackled for upcoming releases/prior to .NET10 timeframe?\n\nFirst step for this is to create a [formal api proposal](https://github.com/dotnet/runtime/blob/main/docs/project/api-review-process.md), then the next steps will follow.",
                                           "updatedAt":  "2025-04-15T21:04:38Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Customizing `ApplicationName` during host building breaks User Secrets",
        "labels":  [
                       "area-Extensions-Hosting",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/114704",
        "createdAt":  "2025-04-15T17:41:42Z",
        "number":  114704,
        "author":  "steveharter",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-20T03:03:26Z",
        "body":  "## Build Information\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=1017138\nBuild error leg or test failing: Microsoft.Extensions.HostFactoryResolver.Tests.WorkItemExecution\nPull request: https://github.com/dotnet/runtime/pull/114495\n\u003c!-- Error message template  --\u003e\n## Error Message\n\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\n\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\n\n```json\n{\n  \"ErrorMessage\": [\"Microsoft.Extensions.Hosting.Tests.HostFactoryResolverTests.NoSpecialEntryPointPatternCanRunInParallel\",\"Microsoft.Extensions.HostFactoryResolver.Tests\u0027 END OF WORK ITEM LOG: Command timed out, and was killed\"],\n  \"ErrorPattern\": \"\",\n  \"BuildRetry\": false,\n  \"ExcludeConsoleLog\": false\n}\n```\n\nlog\n```\nC:\\h\\w\\B76C09D4\\w\\B1E70969\\e\u003e\"C:\\h\\w\\B76C09D4\\p\\dotnet.exe\" exec --runtimeconfig Microsoft.Extensions.HostFactoryResolver.Tests.runtimeconfig.json --depsfile Microsoft.Extensions.HostFactoryResolver.Tests.deps.json xunit.console.dll Microsoft.Extensions.HostFactoryResolver.Tests.dll -xml testResults.xml -nologo -nocolor -notrait category=IgnoreForCI -notrait category=OuterLoop -notrait category=failing  \n  Discovering: Microsoft.Extensions.HostFactoryResolver.Tests (method display = ClassAndMethod, method display options = None)\n  Discovered:  Microsoft.Extensions.HostFactoryResolver.Tests (found 24 test cases)\n  Starting:    Microsoft.Extensions.HostFactoryResolver.Tests (parallel test collections = on [4 threads], stop on fail = off)\n   Microsoft.Extensions.HostFactoryResolver.Tests: [Long Running Test] \u0027Microsoft.Extensions.Hosting.Tests.HostFactoryResolverTests.NoSpecialEntryPointPatternCanRunInParallel\u0027, Elapsed: 00:02:00\n   Microsoft.Extensions.HostFactoryResolver.Tests: [Long Running Test] \u0027Microsoft.Extensions.Hosting.Tests.HostFactoryResolverTests.NoSpecialEntryPointPatternCanRunInParallel\u0027, Elapsed: 00:04:01\n   Microsoft.Extensions.HostFactoryResolver.Tests: [Long Running Test] \u0027Microsoft.Extensions.Hosting.Tests.HostFactoryResolverTests.NoSpecialEntryPointPatternCanRunInParallel\u0027, Elapsed: 00:06:01\n   Microsoft.Extensions.HostFactoryResolver.Tests: [Long Running Test] \u0027Microsoft.Extensions.Hosting.Tests.HostFactoryResolverTests.NoSpecialEntryPointPatternCanRunInParallel\u0027, Elapsed: 00:08:01\n   Microsoft.Extensions.HostFactoryResolver.Tests: [Long Running Test] \u0027Microsoft.Extensions.Hosting.Tests.HostFactoryResolverTests.NoSpecialEntryPointPatternCanRunInParallel\u0027, Elapsed: 00:10:01\n   Microsoft.Extensions.HostFactoryResolver.Tests: [Long Running Test] \u0027Microsoft.Extensions.Hosting.Tests.HostFactoryResolverTests.NoSpecialEntryPointPatternCanRunInParallel\u0027, Elapsed: 00:12:01\n   Microsoft.Extensions.HostFactoryResolver.Tests: [Long Running Test] \u0027Microsoft.Extensions.Hosting.Tests.HostFactoryResolverTests.NoSpecialEntryPointPatternCanRunInParallel\u0027, Elapsed: 00:14:01\n[\u0027Microsoft.Extensions.HostFactoryResolver.Tests\u0027 END OF WORK ITEM LOG: Command timed out, and was killed]\n```\n\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=1017138\r\n**Error message validated:** `[Microsoft.Extensions.Hosting.Tests.HostFactoryResolverTests.NoSpecialEntryPointPatternCanRunInParallel Microsoft.Extensions.HostFactoryResolver.Tests\u0027 END OF WORK ITEM LOG: Command timed out, and was killed`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 4/15/2025 5:42:15 PM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n\r\n|Build|Definition|Test|Pull Request|\r\n|---|---|---|---|\r\n|[1152020](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152020)|dotnet/runtime|[Microsoft.Extensions.HostFactoryResolver.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152020\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31824280\u0026resultId=221979)|dotnet/runtime#119850|\r\n|[1148970](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1148970)|dotnet/runtime|[Microsoft.Extensions.HostFactoryResolver.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1148970\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31732782\u0026resultId=221817)|dotnet/runtime#119662|\r\n|[1145294](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1145294)|dotnet/runtime|[Microsoft.Extensions.HostFactoryResolver.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1145294\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31597480\u0026resultId=221814)|dotnet/runtime#119390|\r\n|[1138978](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1138978)|dotnet/runtime|[Microsoft.Extensions.HostFactoryResolver.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1138978\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31377078\u0026resultId=221810)|dotnet/runtime#119338|\r\n|[1138694](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1138694)|dotnet/runtime|[Microsoft.Extensions.HostFactoryResolver.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1138694\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31367744\u0026resultId=221808)|dotnet/runtime#119319|\r\n|[1137429](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1137429)|dotnet/runtime|[Microsoft.Extensions.HostFactoryResolver.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1137429\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31324032\u0026resultId=218352)|dotnet/runtime#115268|\r\n|[1136503](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1136503)|dotnet/runtime|[Microsoft.Extensions.HostFactoryResolver.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1136503\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31290394\u0026resultId=221792)|dotnet/runtime#119177|\r\n|[1135752](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1135752)|dotnet/runtime|[Microsoft.Extensions.HostFactoryResolver.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1135752\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31266388\u0026resultId=221792)|dotnet/runtime#119098|\r\n|[1135287](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1135287)|dotnet/runtime|[Microsoft.Extensions.HostFactoryResolver.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1135287\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31250384\u0026resultId=221788)|dotnet/runtime#119160|\r\n|[1134184](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1134184)|dotnet/runtime|[Microsoft.Extensions.HostFactoryResolver.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1134184\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31215834\u0026resultId=221786)|dotnet/runtime#118516|\r\n|[1131529](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1131529)|dotnet/runtime|[Microsoft.Extensions.HostFactoryResolver.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1131529\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31131054\u0026resultId=221785)|dotnet/runtime#119078|\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|2|11|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOp09mAQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6nT2YB",
                                           "createdAt":  "2025-04-15T17:42:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-hosting\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-15T17:42:20Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Timeout in HostFactoryResolverTests.NoSpecialEntryPointPatternCanRunInParallel",
        "labels":  [
                       "test-bug",
                       "help wanted",
                       "blocking-clean-ci",
                       "area-Extensions-Hosting",
                       "Known Build Error"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/115524",
        "createdAt":  "2025-05-13T17:22:02Z",
        "number":  115524,
        "author":  "tmds",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODOR9LQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gfoidl",
                                            "createdAt":  "2025-05-13T21:10:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NinoFloris",
                                            "createdAt":  "2025-09-03T23:35:39Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-05-28T23:07:44Z",
        "body":  "**Description**\n\nThe generic host has the content root where it loads assets from. These assets fall into two separate categories:\n- configuration files (`appsettings.json`)\n- application resources (razor files, ...)\n\nThis is a request to be able to set the location for configuration files separate from the content root.\n\n**Use-Cases**\n\nFor example, when placing a generic host app according to the Linux File Hierarchy, the config files can be under `/etc/\u003capp-name\u003e` and static assets under `/usr/share/\u003capp-name\u003e`.\n\nOr when deploying an application using a container image, the config root would be a volume that enables changing and persisting settings.\n\n**API**\n\nNo proposal yet.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOreo-MA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6rgTpV",
                                           "createdAt":  "2025-05-13T17:23:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-05-13T17:23:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6rgehh",
                                           "createdAt":  "2025-05-13T17:34:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "I ran into needing this more than once so I wrote it up as an issue to find out if others have needed it too.",
                                           "updatedAt":  "2025-05-13T17:34:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6rglU6",
                                           "createdAt":  "2025-05-13T17:43:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOER_eEA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gfoidl",
                                                                               "createdAt":  "2025-05-13T21:10:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tmds",
                                           "body":  "It may be interesting to support the config root to be a set of directories where config files from. It is a common pattern for applications to use files from `/etc` and also from a user directory which overrides those settings.",
                                           "updatedAt":  "2025-05-13T18:17:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6t6j4w",
                                           "createdAt":  "2025-05-28T23:07:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Also @halter73 since this would likely impact all hosting users.  @tmds did you have an API suggestion you wanted to make?",
                                           "updatedAt":  "2025-05-28T23:07:39Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Generic Host config root",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Hosting"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/115557",
        "createdAt":  "2025-05-14T10:42:50Z",
        "number":  115557,
        "author":  "tompazourek",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-25T04:54:28Z",
        "body":  "### Description\n\nThe Generic .NET Host is leaking `PhysicalFilesWatcher` instances because it doesn\u0027t correctly dispose all instances it creates.\n\nThis is a little bit related to https://github.com/dotnet/runtime/issues/86146, but not when using custom providers.\n\n\n### Reproduction Steps\n\nThis is the minimum example:\n\n```csharp\nvar host = Host.CreateDefaultBuilder().Build();\nhost.Dispose();\n```\n\n### Expected behavior\n\nAll is disposed.\n\n### Actual behavior\n\nDuring the `Build()`, there are 2 instances of `PhysicalFileProvider` that are constructed, but only 1 of them is disposed upon dispose. The 2nd instance is also linked to `PhysicalFilesWatcher` that is created, but **also not disposed.**\n\nThe 1st instance is the `_defaultProvider` of the `Host`, but the 2nd instance that\u0027s leaking is constructed inside `InitializeAppConfiguration` inside the `SetBasePath` method of `ConfigurationBuilder`. The instance created there is never disposed, and also will have undisposed file watchers leaking from it.\n\n![Image](https://github.com/user-attachments/assets/1209d349-8ba6-40f3-a03f-8eb9fb4f0de1)\n\nIf you create multiple host instances this way, you can run into issues like:\n\n```\nSystem.IO.IOException : The configured user limit (128) on the number of inotify instances has been reached, or the per-process limit on the number of open file descriptors has been reached.\n```\n\nAnd that is even if you properly stop and dispose everything.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nMigrate from `HostBuilder` to `HostApplicationBuilder`. The new builder shares the `ContentRootProvider` internally and that one is disposed.\n\n### Configuration\n\n.NET 8 LTS\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOv9tsCg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6ruhTX",
                                           "createdAt":  "2025-05-14T18:06:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-hosting\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-05-14T18:06:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6sajBX",
                                           "createdAt":  "2025-05-20T01:25:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-hosting\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-05-20T01:25:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6sarIs",
                                           "createdAt":  "2025-05-20T01:52:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Seems like this isn\u0027t a regression - it was caused by https://github.com/dotnet/extensions/pull/956.  I actually think this is the same as https://github.com/dotnet/runtime/issues/86146, but it\u0027s just that this version of it doesn\u0027t have a workaround since the user can\u0027t specify a provider.\n\nA similar bug seems to exist in https://github.com/dotnet/aspnetcore/blob/60d068efed11cd2c0613ca043211257fb57d9f1e/src/Hosting/Hosting/src/WebHostBuilder.cs#L276\n\nAFAICT there\u0027s no plumbing to support a user sharing a file provider either.  @Tratcher @halter73 how is this supposed to work?\n\n@adamsitnik do you remember if we ever concluded what the right pattern was here for disposing the file provider safely even though it\u0027s shared between many configuration providers?  I thought we had talked about distinguishing a user-provided provider (not safe to dispose) vs a framework instantiated one (safe to dispose) and connecting the \"safe to dispose\" ones to the provider\u0027s Dispose method - with a check to avoid double-disposal.\n",
                                           "updatedAt":  "2025-05-20T01:52:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6s3ndh",
                                           "createdAt":  "2025-05-22T07:55:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tompazourek",
                                           "body":  "I think the right pattern might be the one used by the newer `HostApplicationBuilder` (passing the `ContentRootProvider` that\u0027s disposed together with the host).\n\nUsing the same approach also in `HostBuilder` looks to me like a good way of resolving this.",
                                           "updatedAt":  "2025-05-22T07:57:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_nvS0",
                                           "createdAt":  "2025-08-22T15:57:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jzabroski",
                                           "body":  "\u003e AFAICT there\u0027s no plumbing to support a user sharing a file provider either.\n\nMaybe I misunderstand you, but, IHostingEnvironment exposes WebRootFileProvider and ContentRootFileProvider:\n\n1. https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.hosting.ihostingenvironment.webrootfileprovider?view=aspnetcore-9.0\n2. https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.hosting.ihostingenvironment.contentrootfileprovider?view=aspnetcore-9.0\n\n\u003e disposing the file provider safely even though it\u0027s shared between many configuration providers?\n\nThis is not exactly your question, but, I think there are abstractly 3-4 file providers, two of them documented:\n1. Content Root Provider (csproj directory - default for Razor Class Libraries)\n2. Web Root Provider /wwwroot\n3. Plug-in Root Provider(s) (used by CMSes like SiteCore to provide assets from a general location) -- not documented, no official hook to manage\n4. As of .NET 9, static web assets can be thought of as a virtual file provider for static endpoints, although I can\u0027t remember how it\u0027s implemented.\n\nTo simplify things, ASP.NET Core provides a CompositeFileProvider that wraps 1 and 2, but it is unspoken how to handle 3. The reason looking at this more widely may make sense is I have always wondered why anyone should be getting a handle to a single, concrete file provider, rather than simplify guaranteeing CompositeFileProvider provides a consistent, file system view for all resources. The trouble is, even if you allow frameworks to plug-in to the Plug-in Root Provider, they probably want to get their own file provider, otherwise they would have to embed resources in an assembly.",
                                           "updatedAt":  "2025-08-22T15:57:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_22wK",
                                           "createdAt":  "2025-08-25T04:54:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "I created https://github.com/dotnet/runtime/pull/117269 so the config would use the same PhysicalFileProvider as was already created for the hosting env, instead of creating a separate one which doesn\u0027t get disposed.",
                                           "updatedAt":  "2025-08-25T04:54:28Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Memory leak in Generic .NET Host of PhysicalFilesWatcher",
        "labels":  [
                       "area-Extensions-Hosting"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117753",
        "createdAt":  "2025-07-17T11:06:46Z",
        "number":  117753,
        "author":  "jkotas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODH3AjA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ericstj",
                                            "createdAt":  "2025-07-21T20:02:43Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-28T16:52:47Z",
        "body":  "Introduced by #116652 - see discussion in https://github.com/dotnet/runtime/pull/116652#issuecomment-3065910778.\n\n- We should keep the `PosixSignalRegistration`s alive to prevent them from getting finalized in case GC collects them during shutdown.\n\n- We may want to dispose `PosixSignalRegistration`s on a separate thread to avoid A-B/B-A deadlock between the thread trying dispose `PosixSignalRegistration` and the signal handler thread in case the signal is delivered while the application is shutting down",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOuW6R1Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc64sLly",
                                           "createdAt":  "2025-07-21T20:23:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "From @jkotas \n\u003e\u003eShould you also use GC.SuppressFinalize on the PosixSignalRegistration?\n\n\u003eKeeping these registrations alive to prevent their finalization would be more appropriate. Calling GC.SuppressFinalize on a type that you do not own is not the best practice.\n\n\u003eEven with the finalization suppressed, there seems to be an opportunity for dead locks: If ConsoleLifetime.Dispose gets called at the same as the signal is delivered, ConsoleLifetime.Dispose will deadlock on the Windows lock trying to unregister the handlers. We may need some sort of handshake between ConsoleLifetime.Dispose and the signal handler to prevent this.\n\nI\u0027m not sure if we can ever anticipate when the OS will invoke the handler.  There will always be the case where the OS has already taken the lock when invoking shutdown handler before it\u0027s called us.  \n\nI think we have to live with the potential race where we have already entered Dispose when the OS is about to call our handler.  We should focus on trying to fix the case where \"normal shutdown\" might end up trying to do finalization.\n\nEven if we do something in `ConsoleLifetime` to avoid finalizing these so long as `ConsoleLifetime` is alive, that doesn\u0027t prevent the finalizer from eventually running on the `PosixSignalRegistration` types, which will always deadlock without any chance for `ConsoleLifetime` to intervene.  Suppose someone has a main routine that tries to add back a wait on `GC.WaitForPendingFinalizers` after all the hosting stuff is out of scope.\n\nI think we might have to suppress finalization on these.  Or were you imagining we create some static to \"intetionally leak\" these?\n",
                                           "updatedAt":  "2025-07-21T20:23:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc64yHEw",
                                           "createdAt":  "2025-07-22T00:36:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "I have suggested above to dispose PosixSignalRegistrations on a separate thread. \n\nIf there is simultaneously delivered signal callback, the separate thread can get blocked - but it won\u0027t prevent ConsoleLifetime shutdown from making a progress. The separate thread is likely to be blocked till the application exits in this case. That\u0027s fine, it is ok to exit without disposed PosixSignalRegistrations.\n\nif there is no simultaneously delivered signal callback, the separate thread will dispose the registration, ConsoleLifetime shutdowns and any code that runs after ConsoleLifetime shutdown can continue executing. The scenario that I have in mind here are tests that startup and shutdown ConsoleLifetime lifetime multiple times per process. Is it a valid scenario?",
                                           "updatedAt":  "2025-07-22T00:36:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc641DDF",
                                           "createdAt":  "2025-07-22T04:37:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Not through Shutdown event. That only can happen once then the process is killed.  There\u0027s literally no way to dispose these after the handler is invoked for shutdown. The OS holds the lock until process is killed.\n\nI understand the issue that @AustinWise mentioned. I can reproduce in existing tests by simply making main thread block on finalizers. Maybe an elegant solution is to just keepalive the registrations in the handler after nulling out the fields. This will effectively leak them while still allowing main to exit and ConsoleLifetime to be disposed. ",
                                           "updatedAt":  "2025-07-22T07:19:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc643lvV",
                                           "createdAt":  "2025-07-22T08:14:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "I agree that keeping the registrations alive is going to fix the dead lock with repro. It is not going to fix other potential deadlocks like this:\n\n```\n        private partial void UnregisterShutdownHandlers()\n        {\n                 \u003c--- If the application is shutting down for other reasons and the shutdown signal is delivered here, application shutdown is going to deadlock. Shutdown signal is going to wait for the application to shutdown, and the Dispose on the next line is going to wait for the lock hold by the signal thread.\n\n            _sigIntRegistration?.Dispose();\n            _sigQuitRegistration?.Dispose();\n            _sigTermRegistration?.Dispose();\n        }\n```\nIt is hard to write reliable repros for these other deadlocks.\n\nI believe both the dead lock with repro and the other potential deadlocks can be fixed by doing this:\n```\n        private partial void UnregisterShutdownHandlers()\n        {\n            if (OperatingSystem.IsWindows())\n            {\n                 // Windows has a lock that prevents the unregistration while this signal handler is running\n                 // Unregister the handlers on a separate thread to avoid deadlocks with signal handler\n                 // that block until the application shutdowns.\n                 new Thread(() =\u003e {\n                    _sigIntRegistration?.Dispose();\n                    _sigQuitRegistration?.Dispose();\n                    _sigTermRegistration?.Dispose();\n                 }).UnsafeStart();\n            }\n            else\n            {\n                _sigIntRegistration?.Dispose();\n                _sigQuitRegistration?.Dispose();\n                _sigTermRegistration?.Dispose();\n            }\n        }\n```\nAnd delete the code that nulls out the registrations in HandleWindowsShutdown.",
                                           "updatedAt":  "2025-07-22T08:22:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc65Dxe-",
                                           "createdAt":  "2025-07-22T20:43:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "I see what you mean - I\u0027m still not sure that Thread would ever run.  It would get blocked on the first which would still leave others pending finalization.  They\u0027d still be rooted by that hung thread so maybe it wouldn\u0027t block the finalizer queue, but it feels like a worse hack.\n\nI was able to test one solution to the problem which kept the registration active https://github.com/ericstj/runtime/commit/f8952b106d28ac571dc089a7d79f71c47210b40c.  This did reproduce and fix the issue.\n\nThen as part of researching what the OS is doing here -- I see it\u0027s using critical section.  The deadlock happens because we were previously trying to let the main thread do the Dispose so it couldn\u0027t acquire the critical section as the callback thread held it.  If instead we had the callback dispose the registrations I think they wouldn\u0027t deadlock since the callback thread already holds the critical section.\n\nI think this might be the cleanest fix.  Have the shutdown callback dispose all the registrations itself.  I need to try this out with an actual shutdown repro (resurrecting my docker environment) rather than the simulation, but I think it should work.",
                                           "updatedAt":  "2025-07-22T20:43:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc65EVJe",
                                           "createdAt":  "2025-07-22T21:45:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Have the shutdown callback dispose all the registrations itself.\n\nIt is valid to create and dispose the default host (that comes with ConsoleLifetime) many times in a single process today. For example:\n```\nusing Microsoft.Extensions.Hosting;\n\nfor (int i = 0; i \u003c 1000; i++)\n    await RunOnce();\n\nasync Task RunOnce()\n{\n    using (var host = Host.CreateDefaultBuilder().Build())\n    {\n        await host.StartAsync();\n        // do stuff\n        await host.StopAsync();\n    }\n}\n```\nDo we care about this working about as good as it works today (without memory leaks or missing Dispose calls)? If we have the shutdown callback dispose the registrations, this repro will start depending on cleaning up the registrations on the finalizer thread.",
                                           "updatedAt":  "2025-07-22T21:46:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc65GKOM",
                                           "createdAt":  "2025-07-23T02:15:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "With my suggested fix above (not the linked one, but what I describe) to have the shutdown handler to early dispose of the registrations it will work just as it does today.  We won\u0027t change any of the other dispose logic, it will just mean that if the shutdown handler is invoked by Windows we\u0027ll dispose of the registrations at that point.",
                                           "updatedAt":  "2025-07-23T02:15:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc65GWyQ",
                                           "createdAt":  "2025-07-23T02:24:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e With my suggested fix above (not the linked one, but what I describe) to have the shutdown handler to early dispose of the registrations it will work just as it does today. We won\u0027t change any of the other dispose logi\n\nIs this fix going to suffer from a dead lock that I have described in https://github.com/dotnet/runtime/issues/117753#issuecomment-3101580245 ?",
                                           "updatedAt":  "2025-07-23T02:24:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc65WW3H",
                                           "createdAt":  "2025-07-23T18:17:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "The only way the shutdown handler will ever be invoked is if the OS already holds the critical section required for calling `SetConsoleCtrlHandler` -- so it should never deadlock if all we do is try to call `SetConsoleCtrlHandler`.  Unfortunately if we go through `PosixSignalRegistration.Dispose` that needs another lock.\n\nIf any other thread in the process has already entered into https://github.com/dotnet/runtime/blob/b5d37d161f4fc9e10b66e849820bab7174d0684b/src/libraries/System.Private.CoreLib/src/System/Runtime/InteropServices/PosixSignalRegistration.Windows.cs#L48 then we\u0027d deadlock the handler thread if we tried to call that, and the other thread that ends up calling `SetConsoleCtrlHandler` is already going to be blocked until the process is killed.\n\nThe problem here is lock ordering.  The design of PosixSignalRegistration requires acquiring a lock on `s_registrations` before implicitly acquiring a lock when calling `SetConsoleCtrlHandler`.   The OS cannot acquire our `s_registrations` lock before it acquires it\u0027s own critical section when invoking our shutdown handler.\n\nThere\u0027s an even more subtle deadlock here due to the ordering problem, which doesn\u0027t involve ConsoleLifetime at all.  In `PosixSignalRegistration.HandlerRoutine` we do try to acquire the `s_registrations` lock.\nhttps://github.com/dotnet/runtime/blob/f4f3be6002be53856a055642d4f105a76e16698f/src/libraries/System.Private.CoreLib/src/System/Runtime/InteropServices/PosixSignalRegistration.Windows.cs#L84-L91\nSuppose we have one thread with the OS acquiring the critical section, then another thread in the process acquires `s_registrations` lock - neither thread can proceed since the handler thread cannot acquire `s_registrations` and the other thread cannot get the critical section. Its an AB/BA lock ordering bug.\n\nOnce the OS has acquired the shutdown handler critical section, there is no way to call `SetConsoleCtrlHandler` except from the shutdown handler thread.  The process will not be able to predict this either - since the OS might acquire the critical section at any point and the only way to observe that is that a call to `SetConsoleCtrlHandler` will hang.\n\nI didn\u0027t like the solution that kicks off a thread for `UnregisterShutdownHandlers` since that thread will never complete.  It also doesn\u0027t fix hang from a finalizer running (like I showed in the change above).  This is what I meant by \n\n\u003e I\u0027m not sure if we can ever anticipate when the OS will invoke the handler. There will always be the case where the OS has already taken the lock when invoking shutdown handler before it\u0027s called us.\n\nWhat do you think about changing `PosixSignalRegistration` to not try to remove it\u0027s handler once it\u0027s been registered once?  We can avoid the lock ordering bug this way, since we know a custom handler should never be running if we only ever call `SetConsoleCtrlHandler` once, while holding the `s_registrations` lock.",
                                           "updatedAt":  "2025-07-23T18:17:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc65bpHV",
                                           "createdAt":  "2025-07-23T23:08:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEcNPXA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ericstj",
                                                                               "createdAt":  "2025-07-28T17:27:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e There\u0027s an even more subtle deadlock here due to the ordering problem, which doesn\u0027t involve ConsoleLifetime at all.\n\nGood catch!\n\n\u003e What do you think about changing PosixSignalRegistration to not try to remove it\u0027s handler once it\u0027s been registered once?\n\nSounds good to me on Windows. I am not sure whether it is a good idea on Unix.",
                                           "updatedAt":  "2025-07-23T23:08:09Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "Potential shutdown deadlocks in Microsoft.Extensions.Hosting on Windows",
        "labels":  [
                       "regression-from-last-release",
                       "area-Extensions-Hosting"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118391",
        "createdAt":  "2025-08-05T12:11:53Z",
        "number":  118391,
        "author":  "fredrikhr",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-01T04:44:33Z",
        "body":  "### Background and motivation\n\nASP.NET Core includes a feature [Hosting startup assemblies](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/host/platform-specific-configuration?view=aspnetcore-9.0) supporting dynamic loading of plugin assemblies and giving the loaded assembly the oppurtunity to participate in configuring the ASP.NET web host on application startup.\n\nAFAIK, this mechanism is used in e.g. Azure App Service to enable Application Insights logging even though the deployed web app in itself has no knowledge, reference or dependency on the App Insights library.\n\nAs detailed in [Specify the hosting startup assembly](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/host/platform-specific-configuration?view=aspnetcore-9.0\u0026source=docs#specify-the-hosting-startup-assembly) a set of environment variables will determine which assemblies to load and which assemblies to exclude on startup.\n\nHosting startup assemblies rely on the `Microsoft.AspNetCore.Hosting.IHostingStartup` and `Microsoft.AspNetCore.Hosting.HostingStartupAttribute` types and the `IHostingStartup.Configure` method takes an `IWebHostBuilder` as an argument. This design is therefore in its current form exclusive to ASP.NET Core. However, the documented behaviour is not necessarily limited in usefulness for ASP.NET Core applications, rather the current design is most likely a relic from the time before introduction of the .NET Generic Host model.\n\nAs with ASP.NET Core applications it is sometimes useful for developers to be able to extend or plugin into the configuration of a command-line application, or a background worker service without having the original application being dependent on certain platform- or environment-specific libraries.\n\nFor example, a CLI tool might normally make use of default console-logging, but when running within a GitHub actions runner, it might be preferable to configure a custom log-format suitable for GitHub actions logging. In such a scenario one could leverage a Hosting startup assembly that configures logging as appropriate by setting an environment variable, similar to how Azure App Service injects Application Insights logging into an ASP.NET Core web app.\n\nThis proposal re-appropiates the types mentioned above and adjusts them for use in a more generalised shape suitable for .NET Generic Host applications.\n\n**NOTE**: The proposal also includes a change to the implementation of the `HostBuilder.Build()` and `HostApplicationBuilder.Build()` methods where this functionality might be enable based on the presence and values of the configuration keys in the host-configuration propsed below. By necessity and general application security common sense this would preclude a dynamically loaded assembly from participating in the host-configuration (i.e. a call from an `IHostingStartup` to `hostBuilder.ConfigureHostConfiguration` would never take effect since the assembly would be loaded after Host configration was fully configured. This should be noted for implementors in the documentation of the `IHostingStartup` interface.\n\nAs a long-term step one could also consider deprecation of the existing API surface in ASP.NET Core that would duplicate the functionality propsed here.\n\n### API Proposal\n\nTo be added to assembly `Microsoft.Extensions.Hosting.Abstractions`.\n\nCopied from https://github.com/dotnet/aspnetcore/blob/v9.0.8/src/Hosting/Abstractions/src/IHostingStartup.cs and adapted for .NET Generic Host.\n\n```csharp\nnamespace Microsoft.Extensions.Hosting;\n\npublic interface IHostingStartup\n{\n    void Configure(IHostBuilder hostBuilder);\n}\n```\n\nCopied from https://github.com/dotnet/aspnetcore/blob/v9.0.8/src/Hosting/Abstractions/src/HostingStartupAttribute.cs and adapted for .NET Generic Host.\n\n```csharp\nnamespace Microsoft.Extensions.Hosting;\n\n[AttributeUsage(AttributeTargets.Assembly, Inherited = false, AllowMultiple = true)]\npublic sealed class HostingStartupAttribute : Attribute\n{\n    public HostingStartupAttribute(\n        [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicParameterlessConstructor)]\n        Type hostingStartupType\n        );\n\n    [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicParameterlessConstructor)]\n    public Type HostingStartupType { get; }\n}\n```\n\nAdd Host Configuration Keys to existing `HostDefaults` type (see [WebHostDefaults.cs](https://github.com/dotnet/aspnetcore/blob/main/src/Hosting/Abstractions/src/WebHostDefaults.cs#L21-L29) for reference)\n\n```csharp\nnamespace Microsoft.Extensions.Hosting;\n\npublic static partial class HostDefaults\n{\n    public static readonly string HostingStartupAssembliesKey = \"hostingStartupAssemblies\";\n    public static readonly string HostingStartupExcludeAssembliesKey = \"hostingStartupExcludeAssemblies\";\n    public static readonly string PreventHostingStartupKey = \"preventHostingStartup\";\n}\n```\n\n### API Usage\n\nIn assembly `HostingStartupLibrary` (adapted from [Hosting startup assemblies](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/host/platform-specific-configuration?view=aspnetcore-9.0\u0026source=docs#class-library)):\n\n```csharp\n[assembly: HostingStartup(typeof(HostingStartupLibrary.ServiceKeyInjection))]\n\nnamespace HostingStartupLibrary\n{\n    public class ServiceKeyInjection : IHostingStartup\n    {\n        public void Configure(IHostBuilder hostBuilder)\n        {\n            hostBuilder.ConfigureAppConfiguration(config =\u003e\n            {\n                var dict = new Dictionary\u003cstring, string\u003e\n                {\n                    {\"DevAccount_FromLibrary\", \"DEV_1111111-1111\"},\n                    {\"ProdAccount_FromLibrary\", \"PROD_2222222-2222\"}\n                };\n\n                config.AddInMemoryCollection(dict);\n            });\n        }\n    }\n}\n```\n\nWhen running an application with the environment variable `DOTNET_HOSTINGSTARTUPASSEMBLIES` set to  `HostingStartupLibrary`:\n\n```csharp\nusing Microsoft.Extensions.Hosting;\n\nIHostBuilder hostBuilder = Host.CreateDefaultBuilder(args);\nusing IHost host = hostBuilder.Build();\nhost.Start();\n\nvar config = host.Services.GetRequiredService\u003cIConfiguration\u003e();\nstring injectedConfigValue = config[\"DevAccount_FromLibrary\"];\nConsole.WriteLine($\"DevAccount_FromLibrary: {injectedConfigValue}\"); // DevAccount_FromLibrary: DEV_1111111-1111\n\nawait host.StopAsync();\n```\n\nAn application could also choose to completely disable dynamic loading in code:\n\n```csharp\nusing Microsoft.Extensions.Hosting;\n\nIHostBuilder hostBuilder = Host.CreateDefaultBuilder(args);\nhostBuilder.ConfigureHostConfiguration(config =\u003e \n{\n    Dictionary\u003cstring, string\u003e dict = new()\n    {\n        { HostDefaults.PreventHostingStartupKey, bool.TrueString }\n    };\n    config.AddInMemoryCollection(dict);\n});\nusing IHost host = hostBuilder.Build();\nhost.Start();\n\nvar config = host.Services.GetRequiredService\u003cIConfiguration\u003e();\nstring injectedConfigValue = config[\"DevAccount_FromLibrary\"];\nConsole.WriteLine($\"DevAccount_FromLibrary: {injectedConfigValue}\"); // DevAccount_FromLibrary: null\n\nawait host.StopAsync();\n```\n\n### Alternative Designs\n\nThe proposal implicitly includes a behavioural change to deafult `HostBuilder` and `HostApplicationBuilder` types. The proposed behaviour is to adopt the already familiar behaviour that is used for ASP.NET Core, but one could invert the configuration key `PreventHostingStartupKey` to `EnableHostingStartupKey` and thereby create an opt-in behaviour instead of the proposed opt-out behaviour.\n\nDepending on the placement of the library to dynamically load it could also be useful to have an alternative configuration key `HostingStartupAssemblyPathsKey` that specifies a list of paths instead of Assembly names.\n\n### Risks\n\nRisks for environment variable controlled loading of foreign (by the perpective of the running application) assemblies can introduce risks. These risks are comparable to the risks of the existing feature offering the same functionality in ASP.NET Core.\nThe presence of the `HostingStartupExcludeAssembliesKey` and `PreventHostingStartupKey` serve to address these risks.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwSKuDg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc68DPAM",
                                           "createdAt":  "2025-08-05T12:12:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-hosting\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-05T12:12:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68DPZ2",
                                           "createdAt":  "2025-08-05T12:13:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihuBot",
                                           "body":  "Possible related and/or duplicate issue:\n- https://github.com/dotnet/runtime/issues/36394",
                                           "updatedAt":  "2025-08-05T12:13:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BIq4O",
                                           "createdAt":  "2025-08-31T17:00:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "Thank you for the very detailed proposal, @fredrikhr. We will review this further during .NET 11 planning.",
                                           "updatedAt":  "2025-08-31T17:00:00Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[API Proposal]: Move IHostingStartup from ASP.NET Core to .NET Generic Host",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Hosting",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119545",
        "createdAt":  "2025-09-10T18:11:17Z",
        "number":  119545,
        "author":  "bartonjs",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-20T03:04:33Z",
        "body":  "## Build Information\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=1143743\nBuild error leg or test failing: Microsoft.Extensions.Hosting.Tests.ConsoleLifetimeExitTests.EnsureEnvironmentExitDoesntHang\nPull request: https://github.com/dotnet/runtime/pull/119515\n\nConsole excerpt:\n```\n    Microsoft.Extensions.Hosting.Tests.ConsoleLifetimeExitTests.EnsureEnvironmentExitDoesntHang [FAIL]\n      Microsoft.DotNet.RemoteExecutor.RemoteExecutionException : Exit code was -532462766 but it should have been 0\n      Stack Trace:\n        /_/src/arcade/src/Microsoft.DotNet.RemoteExecutor/src/RemoteInvokeHandle.cs(242,0): at Microsoft.DotNet.RemoteExecutor.RemoteInvokeHandle.Dispose(Boolean disposing)\n        /_/src/libraries/Microsoft.Extensions.Hosting/tests/UnitTests/ConsoleLifetimeExitTests.cs(223,0): at Microsoft.Extensions.Hosting.Tests.ConsoleLifetimeExitTests.EnsureEnvironmentExitDoesntHang()\n```\n\n-532462766 corresponds with EXCEPTION_COMPLUS.\n\n```json\n{\n  \"ErrorMessage\": \"at System.Console.ControlCHooker.Unhook\",\n  \"ErrorPattern\": \"\",\n  \"BuildRetry\": false,\n  \"ExcludeConsoleLog\": false\n}\n```\n\n\u003c!-- Known issue validation start --\u003e\n ### Known issue validation\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=1143743\n**Error message validated:** `[Microsoft\\.DotNet\\.RemoteExecutor\\.RemoteExecutionException : Exit code was -532462766 but it should have been 0.*EnsureEnvironmentExitDoesntHang()`]\n**Result validation:** :x: Known issue did not match with the provided build.\n**Validation performed at:** 9/10/2025 6:12:29 PM UTC\n\u003c!-- Known issue validation end --\u003e\n\u003c!-- Known issue validation start --\u003e\n ### Known issue validation\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=1143743\n**Error message validated:** `[Microsoft.DotNet.RemoteExecutor.RemoteExecutionException : Exit code was -532462766 but it should have been 0`]\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\n**Validation performed at:** 9/10/2025 7:05:39 PM UTC\n\u003c!-- Known issue validation end --\u003e\n\u003c!--Known issue error report start --\u003e\n\n### Report\n\n|Build|Definition|Test|Pull Request|\n|---|---|---|---|\n|[1143743](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1143743)|dotnet/runtime|[Microsoft.Extensions.Hosting.Tests.ConsoleLifetimeExitTests.EnsureEnvironmentExitDoesntHang](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1143743\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31540798\u0026resultId=103521)|dotnet/runtime#119515|\n#### Summary\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\n|---|---|---|\n|1|1|1|\n\u003c!--Known issue error report end --\u003e\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=1143743\r\n**Error message validated:** `[at System.Console.ControlCHooker.Unhook`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 9/10/2025 7:07:38 PM UTC\r\n\u003c!-- Known issue validation end --\u003e\n\u003c!--Known issue error report start --\u003e\n\n### Report\n\n|Build|Definition|Test|Pull Request|\n|---|---|---|---|\n|[1143743](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1143743)|dotnet/runtime|[Microsoft.Extensions.Hosting.Tests.ConsoleLifetimeExitTests.EnsureEnvironmentExitDoesntHang](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1143743\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31540798\u0026resultId=103521)|dotnet/runtime#119515|\n#### Summary\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\n|---|---|---|\n|1|1|1|\n\u003c!--Known issue error report end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n\r\n|Build|Definition|Test|Pull Request|\r\n|---|---|---|---|\r\n|[1143743](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1143743)|dotnet/runtime|[Microsoft.Extensions.Hosting.Tests.ConsoleLifetimeExitTests.EnsureEnvironmentExitDoesntHang](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1143743\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31540798\u0026resultId=103521)|dotnet/runtime#119515|\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|1|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOw0jsJQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7DRlbP",
                                           "createdAt":  "2025-09-10T18:59:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-hosting\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-10T18:59:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DRoCM",
                                           "createdAt":  "2025-09-10T19:03:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "This failure was hit on .NET Framework. The full log of the failure is\n\n```\nUnhandled Exception: System.IO.IOException: The parameter is incorrect.\n\n   at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath)\n   at System.Console.ControlCHooker.Unhook()\n   at System.Console.ControlCHooker.Finalize()\n    Microsoft.Extensions.Hosting.Tests.ConsoleLifetimeExitTests.EnsureEnvironmentExitDoesntHang [FAIL]\n      Microsoft.DotNet.RemoteExecutor.RemoteExecutionException : Exit code was -532462766 but it should have been 0\n      Stack Trace:\n        /_/src/arcade/src/Microsoft.DotNet.RemoteExecutor/src/RemoteInvokeHandle.cs(242,0): at Microsoft.DotNet.RemoteExecutor.RemoteInvokeHandle.Dispose(Boolean disposing)\n        /_/src/libraries/Microsoft.Extensions.Hosting/tests/UnitTests/ConsoleLifetimeExitTests.cs(223,0): at Microsoft.Extensions.Hosting.Tests.ConsoleLifetimeExitTests.EnsureEnvironmentExitDoesntHang()\n  Finished:    Microsoft.Extensions.Hosting.Unit.Tests\n```\n\n.NET Framework shutdown is known to have issues like this. If this is failing too often, we should disable the test.",
                                           "updatedAt":  "2025-09-10T19:06:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DSOwl",
                                           "createdAt":  "2025-09-10T20:02:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "justinclary114-commits",
                                           "body":  "We have been getting hacked for 8 years and have been reporting need\r\nassistance are devices are Motorola and her devices are iPhone and iPad\r\nplease report it to the FBI\r\n\r\nOn Wed, Sep 10, 2025, 2:00 PM dotnet-policy-service[bot] \u003c\r\n***@***.***\u003e wrote:\r\n\r\n\u003e *dotnet-policy-service[bot]* left a comment (dotnet/runtime#119545)\r\n\u003e \u003chttps://github.com/dotnet/runtime/issues/119545#issuecomment-3276166863\u003e\r\n\u003e\r\n\u003e Tagging subscribers to this area: @dotnet/area-extensions-hosting\r\n\u003e \u003chttps://github.com/orgs/dotnet/teams/area-extensions-hosting\u003e\r\n\u003e See info in area-owners.md\r\n\u003e \u003chttps://github.com/dotnet/runtime/blob/main/docs/area-owners.md\u003e if you\r\n\u003e want to be subscribed.\r\n\u003e\r\n\u003e —\r\n\u003e Reply to this email directly, view it on GitHub\r\n\u003e \u003chttps://github.com/dotnet/runtime/issues/119545#issuecomment-3276166863\u003e,\r\n\u003e or unsubscribe\r\n\u003e \u003chttps://github.com/notifications/unsubscribe-auth/BU6UTZ7LL3LAV2RUMSTCMM33SBYMJAVCNFSM6AAAAACGFDG7POVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZTENZWGE3DMOBWGM\u003e\r\n\u003e .\r\n\u003e You are receiving this because you are subscribed to this thread.Message\r\n\u003e ID: ***@***.***\u003e\r\n\u003e\r\n",
                                           "updatedAt":  "2025-09-10T20:05:11Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Microsoft.Extensions.Hosting.Tests.ConsoleLifetimeExitTests.EnsureEnvironmentExitDoesntHang fails in System.Console.ControlCHooker.Unhook",
        "labels":  [
                       "blocking-clean-ci",
                       "untriaged",
                       "area-Extensions-Hosting",
                       "Known Build Error"
                   ]
    }
]
